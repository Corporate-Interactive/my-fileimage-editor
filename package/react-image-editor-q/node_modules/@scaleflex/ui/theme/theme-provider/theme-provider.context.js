import _defineProperty from "@babel/runtime/helpers/defineProperty";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useMemo } from 'react';
import { ThemeProvider as SCThemeProvider } from 'styled-components';
import merge from 'lodash.merge';
import { applyPolymorphicFunctionProp } from '../../utils/functions';
import { BorderRadiusSize } from '../../utils/types/shape';
import { Typography, CommonStyles } from '../roots';
import { defaultPalette } from '../roots/palette';
import { defaultShadows } from '../roots/shadows';
import { getDefaultTypography } from '../roots/typography';
import createBreakpoints from '../roots/breakpoints/entity/create-breakpoints';
var defaultShape = {
  borderRadius: _defineProperty(_defineProperty(_defineProperty({}, BorderRadiusSize.Sm, '2px'), BorderRadiusSize.Md, '4px'), BorderRadiusSize.Lg, '8px')
};
var ThemeProvider = function ThemeProvider(_ref) {
  var children = _ref.children,
    _ref$theme = _ref.theme,
    theme = _ref$theme === void 0 ? {} : _ref$theme;
  var _theme$palette = theme.palette,
    paletteOverride = _theme$palette === void 0 ? {} : _theme$palette,
    _theme$breakpoints = theme.breakpoints,
    breakpointsOverride = _theme$breakpoints === void 0 ? {} : _theme$breakpoints,
    _theme$typography = theme.typography,
    typographyOverride = _theme$typography === void 0 ? {} : _theme$typography,
    _theme$shape = theme.shape,
    shapeOverride = _theme$shape === void 0 ? {} : _theme$shape,
    _theme$shadows = theme.shadows,
    shadowsOverride = _theme$shadows === void 0 ? {} : _theme$shadows;
  var finalTheme = useMemo(function () {
    var palette = _objectSpread(_objectSpread({}, defaultPalette), paletteOverride);
    var breakpoints = createBreakpoints(breakpointsOverride);
    var shadows = _objectSpread(_objectSpread({}, defaultShadows), shadowsOverride);
    return {
      palette: palette,
      breakpoints: breakpoints,
      typography: getDefaultTypography(typographyOverride),
      shape: _objectSpread({}, merge(_objectSpread({}, defaultShape), _objectSpread({}, shapeOverride))),
      shadows: shadows
    };
  }, [JSON.stringify(theme)]);
  return /*#__PURE__*/React.createElement(SCThemeProvider, {
    theme: finalTheme
  }, /*#__PURE__*/React.createElement(React.Fragment, null, applyPolymorphicFunctionProp(children, finalTheme), /*#__PURE__*/React.createElement(CommonStyles, null), /*#__PURE__*/React.createElement(Typography, null)));
};
export default ThemeProvider;