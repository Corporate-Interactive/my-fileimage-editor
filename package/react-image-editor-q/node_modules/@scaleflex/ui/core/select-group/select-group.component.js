import _extends from "@babel/runtime/helpers/extends";
import _typeof from "@babel/runtime/helpers/typeof";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children", "size", "error", "label", "placeholder", "hint", "LabelProps", "SelectProps", "selectProps", "fullWidth", "showSelectionKey", "value", "multiple", "hideMenuItemsActions", "onChange", "readOnly", "disabled", "showClearIcon"];
import React from 'react';
import { intrinsicComponent } from '../../utils/functions';
import Label from '../label';
import Select from '../select';
import FormHint from '../form-hint';
import Styled from './select-group.styles';
var SelectGroup = intrinsicComponent(function (_ref, ref) {
  var children = _ref.children,
    size = _ref.size,
    _ref$error = _ref.error,
    error = _ref$error === void 0 ? false : _ref$error,
    label = _ref.label,
    placeholder = _ref.placeholder,
    hint = _ref.hint,
    LabelPropsData = _ref.LabelProps,
    SelectPropsData = _ref.SelectProps,
    selectProps = _ref.selectProps,
    _ref$fullWidth = _ref.fullWidth,
    fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
    showSelectionKey = _ref.showSelectionKey,
    value = _ref.value,
    multiple = _ref.multiple,
    _ref$hideMenuItemsAct = _ref.hideMenuItemsActions,
    hideMenuItemsActions = _ref$hideMenuItemsAct === void 0 ? false : _ref$hideMenuItemsAct,
    onChange = _ref.onChange,
    _ref$readOnly = _ref.readOnly,
    readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    showClearIcon = _ref.showClearIcon,
    rest = _objectWithoutProperties(_ref, _excluded);
  var renderLabel = function renderLabel() {
    if (label) {
      if (typeof label === 'function') {
        return label({
          error: error
        });
      }
      if (_typeof(label) === 'object') {
        return label;
      }
      return /*#__PURE__*/React.createElement(Label, LabelPropsData || {}, label);
    }
    return null;
  };
  var renderHint = function renderHint() {
    if (hint) {
      if (typeof hint === 'function') {
        return hint({
          error: error
        });
      }
      if (_typeof(hint) === 'object') {
        return hint;
      }
      return /*#__PURE__*/React.createElement(FormHint, {
        error: error
      }, hint);
    }
    return null;
  };
  return /*#__PURE__*/React.createElement(Styled.SelectGroup, _extends({}, rest, {
    ref: ref
  }), renderLabel(), /*#__PURE__*/React.createElement(Select, _extends({
    error: error,
    value: value,
    size: size,
    onChange: onChange,
    multiple: multiple,
    fullWidth: Boolean(fullWidth)
  }, SelectPropsData || {}, {
    selectProps: selectProps,
    readOnly: readOnly,
    disabled: disabled,
    placeholder: placeholder,
    showSelectionKey: showSelectionKey,
    hideMenuItemsActions: hideMenuItemsActions,
    showClearIcon: showClearIcon
  }), children), renderHint());
});
export default SelectGroup;