import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children", "startIcon", "endIcon", "badge", "color", "active", "buttonType", "sideBarType", "size", "loading", "disabled"];
import React from 'react';
import SpinnerIcon from '@scaleflex/icons/spinner';
import TwoArrowsRight from '@scaleflex/icons/two-arrows-right';
import TwoArrowsLeft from '@scaleflex/icons/two-arrows-left';
import { intrinsicComponent } from '../../utils/functions';
import Badge from '../badge';
// TODO: move both types inside buttons.props file instead having them inside utils
import { ButtonSize, ButtonColor } from '../../utils/types';
import { ButtonType, SideBarType } from './types';
import { getIconSize, getSideBarIconSize } from './button.utils';
import Styled from './button.styles';
var Button = intrinsicComponent(function (_ref, ref) {
  var children = _ref.children,
    startIcon = _ref.startIcon,
    endIcon = _ref.endIcon,
    badge = _ref.badge,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? ButtonColor.Primary : _ref$color,
    _ref$active = _ref.active,
    active = _ref$active === void 0 ? false : _ref$active,
    _ref$buttonType = _ref.buttonType,
    buttonType = _ref$buttonType === void 0 ? ButtonType.Default : _ref$buttonType,
    _ref$sideBarType = _ref.sideBarType,
    sideBarType = _ref$sideBarType === void 0 ? SideBarType.Left : _ref$sideBarType,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? ButtonSize.Md : _ref$size,
    _ref$loading = _ref.loading,
    loading = _ref$loading === void 0 ? false : _ref$loading,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    rest = _objectWithoutProperties(_ref, _excluded);
  var getSideBarArrows = function getSideBarArrows(props) {
    switch (sideBarType) {
      case SideBarType.Right:
        return active ? /*#__PURE__*/React.createElement(TwoArrowsLeft, props) : /*#__PURE__*/React.createElement(TwoArrowsRight, props);
      case SideBarType.Left:
        return active ? /*#__PURE__*/React.createElement(TwoArrowsRight, props) : /*#__PURE__*/React.createElement(TwoArrowsLeft, props);
      default:
    }
  };
  var getSideBarSection = function getSideBarSection() {
    var sideBarSection = [/*#__PURE__*/React.createElement(Styled.SideArrows, {
      key: "arrows",
      $sideBarType: sideBarType
    }, getSideBarArrows({
      size: getSideBarIconSize(size)
    }))];
    var divider = /*#__PURE__*/React.createElement(Styled.Divider, {
      key: "divider",
      size: size,
      $sideBarType: sideBarType
    });
    if (sideBarType === SideBarType.Right) {
      sideBarSection.unshift(divider);
    } else {
      sideBarSection.push(divider);
    }
    return buttonType === ButtonType.Sidebar && sideBarSection;
  };
  return /*#__PURE__*/React.createElement(Styled.Button, _extends({
    type: "button",
    $buttonType: buttonType
  }, rest, {
    disabled: loading || disabled,
    color: color,
    active: active,
    size: size,
    ref: ref
  }), sideBarType === SideBarType.Left && getSideBarSection(), /*#__PURE__*/React.createElement(Styled.Wrapper, null, startIcon && /*#__PURE__*/React.createElement(Styled.StartIcon, {
    $loading: loading,
    size: size
  }, typeof startIcon === 'function' ? loading ? /*#__PURE__*/React.createElement(SpinnerIcon, {
    size: getIconSize(size)
  }) : startIcon({
    size: getIconSize(size)
  }) : loading ? /*#__PURE__*/React.createElement(SpinnerIcon, {
    size: getIconSize(size)
  }) : startIcon), loading && !startIcon && /*#__PURE__*/React.createElement(Styled.StartIcon, {
    $loading: loading
  }, /*#__PURE__*/React.createElement(SpinnerIcon, {
    size: getIconSize(size)
  })), /*#__PURE__*/React.createElement(Styled.Label, null, children), endIcon && /*#__PURE__*/React.createElement(Styled.EndIcon, null, typeof endIcon === 'function' ? endIcon({
    size: getIconSize(size)
  }) : endIcon)), sideBarType === SideBarType.Right && getSideBarSection(), badge && /*#__PURE__*/React.createElement(Styled.Badge, null, /*#__PURE__*/React.createElement(Badge, {
    inline: true,
    size: 14,
    padding: "0 1px",
    badgeContent: badge,
    color: color === ButtonColor.Primary ? 'white' : 'secondary'
  })));
});
export default Button;