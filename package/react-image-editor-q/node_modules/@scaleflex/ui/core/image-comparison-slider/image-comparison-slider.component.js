import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["leftImgProps", "rightImgProps", "imgWrapperProps", "handleProps", "fallbackPreviewProps", "footerProps"],
  _excluded2 = ["color", "thumbIconSize", "thumbIconPadding", "thumbIcon"],
  _excluded3 = ["leftText", "rightText", "hideFooter"];
import React, { useCallback, useEffect, useRef, useState } from 'react';
import ArrowChange from '@scaleflex/icons/arrow-change';
import { getHorizontalPosition } from './image-comparison-slider.utils';
import ImagePreviewComponent from './image-preview.component';
import { intrinsicComponent } from '../../utils/functions';
import { lightPalette } from '../../theme/roots/palette';
import Styled from './image-comparison-slider.styles';
import { Color } from '../../utils/types/palette';
var ImageComparisonSlider = intrinsicComponent(function (_ref, ref) {
  var leftImgProps = _ref.leftImgProps,
    rightImgProps = _ref.rightImgProps,
    imgWrapperProps = _ref.imgWrapperProps,
    handleProps = _ref.handleProps,
    fallbackPreviewProps = _ref.fallbackPreviewProps,
    footerProps = _ref.footerProps,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _ref2 = handleProps || {},
    _ref2$color = _ref2.color,
    color = _ref2$color === void 0 ? lightPalette[Color.BackgroundStateless] : _ref2$color,
    _ref2$thumbIconSize = _ref2.thumbIconSize,
    thumbIconSize = _ref2$thumbIconSize === void 0 ? 10 : _ref2$thumbIconSize,
    _ref2$thumbIconPaddin = _ref2.thumbIconPadding,
    thumbIconPadding = _ref2$thumbIconPaddin === void 0 ? 10 : _ref2$thumbIconPaddin,
    _ref2$thumbIcon = _ref2.thumbIcon,
    thumbIcon = _ref2$thumbIcon === void 0 ? /*#__PURE__*/React.createElement(ArrowChange, {
      color: lightPalette[Color.IconsPrimary]
    }) : _ref2$thumbIcon,
    restHandleProps = _objectWithoutProperties(_ref2, _excluded2);
  var _ref3 = footerProps || {},
    _ref3$leftText = _ref3.leftText,
    leftText = _ref3$leftText === void 0 ? 'Before' : _ref3$leftText,
    _ref3$rightText = _ref3.rightText,
    rightText = _ref3$rightText === void 0 ? 'After' : _ref3$rightText,
    _ref3$hideFooter = _ref3.hideFooter,
    hideFooter = _ref3$hideFooter === void 0 ? false : _ref3$hideFooter,
    restFooterProps = _objectWithoutProperties(_ref3, _excluded3);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isResizing = _useState2[0],
    setIsResizing = _useState2[1];
  var topImageRef = useRef(null);
  var handleRef = useRef(null);
  var setPositioning = useCallback(function (cursorHorizontalPosition) {
    if (topImageRef.current && handleRef.current) {
      var _topImageRef$current$ = topImageRef.current.getBoundingClientRect(),
        left = _topImageRef$current$.left,
        topImgWidth = _topImageRef$current$.width;
      var handleWidth = handleRef.current.offsetWidth;
      var position = getHorizontalPosition({
        cursorHorizontalPosition: cursorHorizontalPosition,
        handleWidth: handleWidth,
        left: left,
        width: topImgWidth
      });
      var horizontalPosition = (position === null || position === void 0 ? void 0 : position.horizontalPosition) || 0;
      if (handleRef.current) {
        handleRef.current.style.left = "".concat(horizontalPosition * 100, "%");
        topImageRef.current.style.clipPath = "inset(0 ".concat(100 - horizontalPosition * 100 - 0.1, "% 0 0)");
      }
    }
  }, []);
  var handleResize = useCallback(function (e) {
    var _e$touches;
    return setPositioning((e === null || e === void 0 || (_e$touches = e.touches) === null || _e$touches === void 0 || (_e$touches = _e$touches[0]) === null || _e$touches === void 0 ? void 0 : _e$touches.clientX) || e.clientX);
  }, [setPositioning]);
  var handleResizeEnd = useCallback(function () {
    setIsResizing(false);
    window.removeEventListener('touchmove', handleResize);
    window.removeEventListener('touchend', handleResizeEnd);
    window.removeEventListener('mousemove', handleResize);
    window.removeEventListener('mouseup', handleResizeEnd);
  }, [handleResize]);
  useEffect(function () {
    if (isResizing) {
      window.addEventListener('touchmove', handleResize);
      window.addEventListener('touchend', handleResizeEnd);
      window.addEventListener('mousemove', handleResize);
      window.addEventListener('mouseup', handleResizeEnd);
    }
    return function () {
      window.removeEventListener('touchmove', handleResize);
      window.removeEventListener('touchend', handleResizeEnd);
      window.removeEventListener('mousemove', handleResize);
      window.removeEventListener('mouseup', handleResizeEnd);
    };
  }, [isResizing, handleResize, handleResizeEnd]);
  useEffect(function () {
    if (topImageRef.current && handleRef.current) {
      var _topImageRef$current$2 = topImageRef.current.getBoundingClientRect(),
        left = _topImageRef$current$2.left,
        topImgWidth = _topImageRef$current$2.width;
      var handleWidth = handleRef.current.offsetWidth;
      setPositioning(topImgWidth / 2 + left - handleWidth / 2);
    }
  }, [setPositioning]);
  return /*#__PURE__*/React.createElement(Styled.ComparisonSlider, _extends({}, rest, {
    ref: ref
  }), /*#__PURE__*/React.createElement(Styled.SliderWrapper, null, /*#__PURE__*/React.createElement(Styled.Handle, _extends({
    ref: handleRef,
    onMouseDown: function onMouseDown() {
      return setIsResizing(true);
    },
    onTouchStart: function onTouchStart() {
      return setIsResizing(true);
    },
    color: color,
    $thumbIconPadding: thumbIconPadding,
    $thumbIconSize: thumbIconSize
  }, restHandleProps), thumbIcon), /*#__PURE__*/React.createElement(Styled.LeftImageWrapper, _extends({
    ref: topImageRef
  }, imgWrapperProps), /*#__PURE__*/React.createElement(ImagePreviewComponent, _extends({}, leftImgProps, {
    fallbackPreviewProps: fallbackPreviewProps
  }))), /*#__PURE__*/React.createElement(Styled.RightImageWrapper, imgWrapperProps, /*#__PURE__*/React.createElement(ImagePreviewComponent, _extends({}, rightImgProps, {
    fallbackPreviewProps: fallbackPreviewProps
  })))), !hideFooter && /*#__PURE__*/React.createElement(Styled.Footer, restFooterProps, /*#__PURE__*/React.createElement("span", null, leftText), /*#__PURE__*/React.createElement("span", null, rightText)));
});
export default ImageComparisonSlider;