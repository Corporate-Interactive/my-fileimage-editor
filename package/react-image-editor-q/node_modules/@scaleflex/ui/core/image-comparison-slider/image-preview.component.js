import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["fallbackPreviewProps", "onError", "onLoad"],
  _excluded2 = ["text"];
import React, { useState } from 'react';
import ErrorBroke from '@scaleflex/icons/error-broke';
import { intrinsicComponent } from '../../utils/functions';
import { lightPalette } from '../../theme/roots/palette';
import Styled from './image-comparison-slider.styles';
import { Color } from '../../utils/types/palette';
var ImagePreviewComponent = intrinsicComponent(function (_ref, ref) {
  var fallbackPreviewProps = _ref.fallbackPreviewProps,
    onError = _ref.onError,
    onLoad = _ref.onLoad,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _ref2 = fallbackPreviewProps || {},
    msgProps = _ref2.msgProps,
    _ref2$icon = _ref2.icon,
    Icon = _ref2$icon === void 0 ? ErrorBroke : _ref2$icon,
    _ref2$iconSize = _ref2.iconSize,
    iconSize = _ref2$iconSize === void 0 ? 150 : _ref2$iconSize,
    _ref2$iconColor = _ref2.iconColor,
    iconColor = _ref2$iconColor === void 0 ? lightPalette[Color.IconsSecondary] : _ref2$iconColor,
    _ref2$gap = _ref2.gap,
    gap = _ref2$gap === void 0 ? 10 : _ref2$gap,
    _ref2$backgroundColor = _ref2.backgroundColor,
    backgroundColor = _ref2$backgroundColor === void 0 ? lightPalette[Color.BackgroundPrimaryHover] : _ref2$backgroundColor;
  var _useState = useState(true),
    _useState2 = _slicedToArray(_useState, 2),
    isImgLoading = _useState2[0],
    setIsImgLoading = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    isImgFailedToLoad = _useState4[0],
    setIsImgFailedToLoad = _useState4[1];
  var onLoadError = function onLoadError(e) {
    if (typeof onError === 'function') {
      onError(e);
    }
    setIsImgFailedToLoad(true);
    setIsImgLoading(false);
  };
  var onImgLoad = function onImgLoad(e) {
    if (typeof onLoad === 'function') {
      onLoad(e);
    }
    setIsImgLoading(false);
  };
  var _ref3 = msgProps || {},
    _ref3$text = _ref3.text,
    text = _ref3$text === void 0 ? 'Failed to load img' : _ref3$text,
    restMsgProps = _objectWithoutProperties(_ref3, _excluded2);
  if (isImgFailedToLoad) {
    return /*#__PURE__*/React.createElement(Styled.FallbackPreviewWrapper, {
      ref: ref,
      backgroundColor: backgroundColor,
      gap: gap
    }, /*#__PURE__*/React.createElement(Icon, {
      size: iconSize,
      color: iconColor
    }), /*#__PURE__*/React.createElement(Styled.FallbackPreviewMsg, restMsgProps, text));
  }
  return /*#__PURE__*/React.createElement(Styled.Image, _extends({
    draggable: "false",
    onError: onLoadError,
    onLoad: onImgLoad,
    $isLoading: isImgLoading
  }, rest));
});
export default ImagePreviewComponent;