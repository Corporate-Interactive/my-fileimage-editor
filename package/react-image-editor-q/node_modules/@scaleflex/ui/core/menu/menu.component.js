import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children", "anchorEl", "maxHeight", "position", "zIndex", "open", "enableOverlay", "hideScroll", "enableUnderlayingEvent", "containerProps", "popperOptions", "popperWrapperStyles", "onClose"];
import React, { useCallback, useEffect, useRef, useState } from 'react';
import { intrinsicComponent } from '../../utils/functions';
import { Position } from '../popper/types';
import Popper from '../popper';
import Styled from './menu.styles';
var Menu = intrinsicComponent(function (_ref, ref) {
  var children = _ref.children,
    anchorEl = _ref.anchorEl,
    _ref$maxHeight = _ref.maxHeight,
    maxHeight = _ref$maxHeight === void 0 ? 250 : _ref$maxHeight,
    _ref$position = _ref.position,
    position = _ref$position === void 0 ? Position.BottomStart : _ref$position,
    zIndex = _ref.zIndex,
    _ref$open = _ref.open,
    open = _ref$open === void 0 ? false : _ref$open,
    _ref$enableOverlay = _ref.enableOverlay,
    enableOverlay = _ref$enableOverlay === void 0 ? true : _ref$enableOverlay,
    _ref$hideScroll = _ref.hideScroll,
    hideScroll = _ref$hideScroll === void 0 ? true : _ref$hideScroll,
    _ref$enableUnderlayin = _ref.enableUnderlayingEvent,
    enableUnderlayingEvent = _ref$enableUnderlayin === void 0 ? false : _ref$enableUnderlayin,
    _ref$containerProps = _ref.containerProps,
    containerProps = _ref$containerProps === void 0 ? {} : _ref$containerProps,
    popperOptions = _ref.popperOptions,
    _ref$popperWrapperSty = _ref.popperWrapperStyles,
    popperWrapperStyles = _ref$popperWrapperSty === void 0 ? {} : _ref$popperWrapperSty,
    onClose = _ref.onClose,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    timeout = _useState2[0],
    setTimeoutState = _useState2[1];
  var _useState3 = useState(new DOMRect()),
    _useState4 = _slicedToArray(_useState3, 2),
    rect = _useState4[0],
    setRect = _useState4[1];
  var menuRef = useRef(null);
  var updateRect = useCallback(function () {
    var _anchorEl$getBounding;
    var defaultPosition = {
      top: 0,
      left: 0,
      height: 0,
      width: 0
    };
    var defaultRect = new DOMRect(defaultPosition.left, defaultPosition.top, defaultPosition.width, defaultPosition.height);
    setRect((_anchorEl$getBounding = anchorEl === null || anchorEl === void 0 ? void 0 : anchorEl.getBoundingClientRect()) !== null && _anchorEl$getBounding !== void 0 ? _anchorEl$getBounding : defaultRect);
  }, [open, timeout, anchorEl]);
  var handleWindowSizeChanged = useCallback(function () {
    if (open) {
      if (timeout) {
        clearTimeout(timeout);
      }
      setTimeoutState(setTimeout(updateRect, 300));
    }
  }, [open, timeout]);
  useEffect(function () {
    window.addEventListener('resize', handleWindowSizeChanged);
    return function () {
      window.removeEventListener('resize', handleWindowSizeChanged);
    };
  }, [handleWindowSizeChanged]);
  useEffect(function () {
    updateRect();
  }, [updateRect]);
  useEffect(function () {
    if (hideScroll) {
      if (open) {
        document.body.classList.add('Menu-open');
        updateRect();
      } else {
        document.body.classList.remove('Menu-open');
      }
      return function () {
        document.body.classList.remove('Menu-open');
      };
    }
  }, [open, updateRect]);
  var handleClose = function handleClose(event) {
    if (typeof onClose === 'function') {
      onClose(event);
    }
  };
  return /*#__PURE__*/React.createElement(Popper, {
    ref: menuRef,
    position: position,
    open: open,
    anchorEl: anchorEl,
    overlay: enableOverlay,
    popperOptions: popperOptions,
    zIndex: zIndex,
    enableUnderlayingEvent: enableUnderlayingEvent,
    wrapperStyles: popperWrapperStyles,
    onClick: handleClose
  }, /*#__PURE__*/React.createElement(Styled.Menu, _extends({
    ref: ref,
    $maxHeight: maxHeight,
    $rect: rect
  }, containerProps, rest), children));
});
export default Menu;