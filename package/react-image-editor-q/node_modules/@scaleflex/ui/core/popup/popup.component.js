import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["autoHideDuration", "anchorOrigin", "open", "onClose", "status"];
import React, { useEffect, useState } from 'react';
import { createPortal } from 'react-dom';
import { intrinsicComponent, generateClassNames } from '../../utils/functions';
import usePortal from '../../hooks/use-portal';
import PopupContent from '../popup-content/popup-content.component';
import { Horizontal, Vertical } from './types';
import Styled from './popup.styles';
import { Status } from '../popup-status/types';
var Popup = intrinsicComponent(function (props, ref) {
  var _props$autoHideDurati = props.autoHideDuration,
    autoHideDuration = _props$autoHideDurati === void 0 ? 5000 : _props$autoHideDurati,
    _props$anchorOrigin = props.anchorOrigin,
    anchorOrigin = _props$anchorOrigin === void 0 ? {
      vertical: Vertical.Bottom,
      horizontal: Horizontal.Left
    } : _props$anchorOrigin,
    _props$open = props.open,
    open = _props$open === void 0 ? false : _props$open,
    onClose = props.onClose,
    _props$status = props.status,
    status = _props$status === void 0 ? Status.Success : _props$status,
    rest = _objectWithoutProperties(props, _excluded);
  var target = usePortal(generateClassNames('Popup'));
  var _useState = useState(autoHideDuration),
    _useState2 = _slicedToArray(_useState, 2),
    hoverHideDuration = _useState2[0],
    setHoverHideDuration = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    isHovering = _useState4[0],
    setIsHovering = _useState4[1];
  var handleMouseLeave = function handleMouseLeave() {
    setIsHovering(false);
    setHoverHideDuration(1000);
  };
  useEffect(function () {
    if (open) setHoverHideDuration(autoHideDuration);
  }, [open]);
  useEffect(function () {
    var timeout = null;
    if (open && !isHovering && hoverHideDuration && typeof onClose === 'function') {
      timeout = setTimeout(onClose, hoverHideDuration);
    }
    return function () {
      if (timeout) {
        clearTimeout(timeout);
      }
    };
  }, [hoverHideDuration, isHovering, open, onClose]);
  var render = function render() {
    if (!open) {
      return null;
    }
    return /*#__PURE__*/React.createElement(Styled.Popup, _extends({
      onMouseEnter: function onMouseEnter() {
        return setIsHovering(true);
      },
      onMouseLeave: handleMouseLeave,
      anchorOrigin: anchorOrigin
    }, props), /*#__PURE__*/React.createElement(PopupContent, _extends({
      onClose: onClose,
      status: status,
      ref: ref
    }, rest)));
  };
  return /*#__PURE__*/createPortal(render(), target);
});
export default Popup;