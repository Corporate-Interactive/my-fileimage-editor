import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useRef, useEffect } from 'react';
import Arrow from '@scaleflex/icons/arrow';
import { intrinsicComponent } from '../../utils/functions';
import Menu from '../menu';
import Styled from './menu-item.styles';
var MenuItem = intrinsicComponent(function (props, ref) {
  var list = props.list,
    children = props.children,
    disableHover = props.disableHover,
    disabled = props.disabled,
    enableScrollIntoView = props.enableScrollIntoView,
    _props$isFocused = props.isFocused,
    isFocused = _props$isFocused === void 0 ? false : _props$isFocused,
    active = props.active,
    value = props.value,
    dividerStyle = props.dividerStyle,
    _props$depth = props.depth,
    depth = _props$depth === void 0 ? 0 : _props$depth;
  var menuItemRef = useRef(null);
  var _React$useState = React.useState(null),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    anchorEl = _React$useState2[0],
    setAnchorEl = _React$useState2[1];
  var _React$useState3 = React.useState([]),
    _React$useState4 = _slicedToArray(_React$useState3, 2),
    selectedIds = _React$useState4[0],
    setSelectedIds = _React$useState4[1];
  var handleOpenMenu = function handleOpenMenu(event) {
    setAnchorEl(event.currentTarget);
  };
  var handleScroll = function handleScroll() {
    var _menuItemRef$current;
    (_menuItemRef$current = menuItemRef.current) === null || _menuItemRef$current === void 0 || _menuItemRef$current.scrollIntoView({
      behavior: 'auto',
      block: 'nearest'
    });
  };
  useEffect(function () {
    if ((active || isFocused) && enableScrollIntoView) {
      handleScroll();
    }
  }, [active, isFocused]);
  var handleSelectedId = function handleSelectedId(ev, selected, depthLevel) {
    var updatedArray = selectedIds.slice(0);
    updatedArray[depthLevel] = selected;
    setSelectedIds(updatedArray);
    handleOpenMenu(ev);
  };
  var handleCloseSubMenu = function handleCloseSubMenu(depthLevel) {
    var updatedArray = selectedIds.slice(0);
    updatedArray[depthLevel] = '';
    setSelectedIds(updatedArray);
    setAnchorEl(null);
  };
  var renderItems = function renderItems(options) {
    var depthLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return options.map(function (option) {
      var hasOptions = option.subList && option.subList.length > 0;
      var subMenu;
      if (selectedIds[depthLevel] === option.key && hasOptions) {
        var newDepthLevel = depthLevel + 1;
        subMenu = /*#__PURE__*/React.createElement(Menu, _extends({
          key: option.key,
          position: "right",
          open: Boolean(anchorEl),
          anchorEl: anchorEl,
          enableOverlay: false
        }, option.subMenuProps), /*#__PURE__*/React.createElement(MenuItem, _extends({}, props, {
          list: option.subList,
          depth: newDepthLevel
        })));
      }
      if (option.content === 'divider') {
        return /*#__PURE__*/React.createElement(Styled.MenuItemWrapper, {
          divider: true,
          key: option.key,
          style: option.dividerStyle
        });
      }
      return /*#__PURE__*/React.createElement(Styled.MenuItemWrapper, _extends({
        disabled: false,
        key: option.key,
        onMouseLeave: function onMouseLeave() {
          return handleCloseSubMenu(depthLevel);
        }
      }, props), /*#__PURE__*/React.createElement(Styled.MenuItem, _extends({}, props, {
        className: option.className,
        ref: ref,
        $isFocused: isFocused,
        $active: Boolean(option.active),
        onClick: function onClick(event) {
          var _option$onClick;
          return (_option$onClick = option.onClick) === null || _option$onClick === void 0 ? void 0 : _option$onClick.call(option, _objectSpread({
            event: event
          }, props));
        },
        onMouseEnter: function onMouseEnter(ev) {
          return handleSelectedId(ev, option.key, depthLevel);
        },
        disableHover: disableHover || option.disableHover
      }), option.prefix && /*#__PURE__*/React.createElement(Styled.MenuPrefix, null, typeof option.prefix === 'function' ? option.prefix(props) : option.prefix), option.content && /*#__PURE__*/React.createElement(Styled.MenuContent, null, typeof option.content === 'function' ? option.content(props) : option.content), (option.suffix || option.subList) && /*#__PURE__*/React.createElement(Styled.MenuSuffix, null, typeof option.suffix === 'function' ? option.suffix(props) : option.suffix, option.subList && /*#__PURE__*/React.createElement(Arrow, {
        size: 10,
        color: "#768A9F"
      }))), subMenu);
    });
  };
  if (!list) {
    if (value === 'divider') {
      return /*#__PURE__*/React.createElement(Styled.MenuItemWrapper, {
        divider: true,
        key: value,
        style: dividerStyle
      });
    }
    return /*#__PURE__*/React.createElement(Styled.MenuItemWrapper, {
      disabled: Boolean(disabled)
    }, /*#__PURE__*/React.createElement(Styled.MenuItem, _extends({}, props, {
      ref: menuItemRef,
      disableHover: disableHover,
      disabled: disabled,
      $isFocused: isFocused,
      $active: active
    }), children));
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, renderItems(list, depth));
});
MenuItem.displayName = 'MenuItem';
export default MenuItem;