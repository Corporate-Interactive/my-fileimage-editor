import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children", "arrow", "warning", "enableHover", "hide", "enterDelay", "leaveDelay", "offsetX", "offsetY", "title", "position", "info", "size", "variant"];
import React from 'react';
import 'tippy.js/dist/tippy.css';
import 'tippy.js/animations/scale.css';
import { intrinsicComponent } from '../../utils/functions';
import { Position, Size, Variant } from './types';
import Styled from './tooltip-v2.styles';
var TooltipV2 = intrinsicComponent(function (_ref, ref) {
  var children = _ref.children,
    _ref$arrow = _ref.arrow,
    arrow = _ref$arrow === void 0 ? true : _ref$arrow,
    _ref$warning = _ref.warning,
    warning = _ref$warning === void 0 ? false : _ref$warning,
    _ref$enableHover = _ref.enableHover,
    enableHover = _ref$enableHover === void 0 ? true : _ref$enableHover,
    _ref$hide = _ref.hide,
    hide = _ref$hide === void 0 ? false : _ref$hide,
    _ref$enterDelay = _ref.enterDelay,
    enterDelay = _ref$enterDelay === void 0 ? 0 : _ref$enterDelay,
    _ref$leaveDelay = _ref.leaveDelay,
    leaveDelay = _ref$leaveDelay === void 0 ? 0 : _ref$leaveDelay,
    _ref$offsetX = _ref.offsetX,
    offsetX = _ref$offsetX === void 0 ? 0 : _ref$offsetX,
    _ref$offsetY = _ref.offsetY,
    offsetY = _ref$offsetY === void 0 ? 10 : _ref$offsetY,
    title = _ref.title,
    _ref$position = _ref.position,
    position = _ref$position === void 0 ? Position.Top : _ref$position,
    _ref$info = _ref.info,
    info = _ref$info === void 0 ? false : _ref$info,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? Size.Sm : _ref$size,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? Variant.Default : _ref$variant,
    rest = _objectWithoutProperties(_ref, _excluded);
  if (hide) return children;
  return /*#__PURE__*/React.createElement(Styled.TooltipV2, _extends({
    ref: ref,
    placement: position,
    content: /*#__PURE__*/React.createElement(Styled.TooltipText, null, title),
    interactive: enableHover,
    arrow: arrow,
    delay: [enterDelay, leaveDelay],
    $variant: warning && Variant.Warning || info && Variant.Info || variant,
    $size: size || Size.Sm,
    animation: "scale",
    offset: [offsetX, offsetY],
    appendTo: document.body
  }, rest), children);
});
export default TooltipV2;