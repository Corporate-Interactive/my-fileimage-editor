import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["size", "type", "checked", "onChange", "checkBoxProps", "readOnly", "disabled"];
import React from 'react';
import Tick from '@scaleflex/icons/tick';
import Intermediate from '@scaleflex/icons/intermediate';
import { lightPalette } from '../../theme/roots/palette';
import { Color } from '../../utils/types/palette';
import { ignoreEvent, intrinsicComponent } from '../../utils/functions';
import Styled from './check-box.styles';
import { Size, Type } from './types';
import { getCheckboxIconSize } from './check-box.utils';
var CheckBox = intrinsicComponent(function (_ref, ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? Size.Md : _ref$size,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? Type.Checkbox : _ref$type,
    _ref$checked = _ref.checked,
    checked = _ref$checked === void 0 ? false : _ref$checked,
    onChange = _ref.onChange,
    checkBoxProps = _ref.checkBoxProps,
    _ref$readOnly = _ref.readOnly,
    readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    rest = _objectWithoutProperties(_ref, _excluded);
  var getIcon = function getIcon(props) {
    switch (type) {
      case Type.Checkbox:
        return /*#__PURE__*/React.createElement(Tick, props);
      case Type.Intermediate:
        return /*#__PURE__*/React.createElement(Intermediate, props);
      default:
        return /*#__PURE__*/React.createElement(Tick, props);
    }
  };
  return /*#__PURE__*/React.createElement(Styled.CheckBox, _extends({
    $size: size,
    disabled: Boolean(disabled),
    checked: Boolean(checked),
    ref: ref
  }, rest), /*#__PURE__*/React.createElement(Styled.Input, _extends({
    checked: checked,
    disabled: disabled,
    onChange: readOnly || disabled ? ignoreEvent : onChange
  }, checkBoxProps)), checked ? getIcon({
    size: getCheckboxIconSize(size),
    color: lightPalette[Color.ButtonPrimaryText]
  }) : /*#__PURE__*/React.createElement(Styled.UnCheckedIcon, null, getIcon({
    size: getCheckboxIconSize(size),
    color: lightPalette[Color.Accent_4_0_Opacity]
  })));
});
export default CheckBox;