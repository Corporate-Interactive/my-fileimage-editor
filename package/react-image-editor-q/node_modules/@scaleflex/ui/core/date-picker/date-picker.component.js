import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["value", "onChange", "autoSelectToday", "enableAutoSelect", "maxDate", "minDate", "position", "label", "size", "hint", "popperOptions", "zIndex", "InputProps", "calendarStyles", "popperWrapperStyles", "inputGroupProps", "fullWidth", "placeholder"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React, { useState, useRef, useEffect } from 'react';
import CalendarIcon from '@scaleflex/icons/calendar';
import CrossOutline from '@scaleflex/icons/cross-outline';
import { InputSize } from '../../utils/types';
import { intrinsicComponent } from '../../utils/functions';
import { isYearFormRegex } from '../calendar/calendar.utils';
import Calendar from '../calendar';
import Styled from './date-picker.styles';
var Datepicker = intrinsicComponent(function (_ref, ref) {
  var _isYearFormRegex$test;
  var _ref$value = _ref.value,
    value = _ref$value === void 0 ? '' : _ref$value,
    onChange = _ref.onChange,
    autoSelectToday = _ref.autoSelectToday,
    _ref$enableAutoSelect = _ref.enableAutoSelect,
    enableAutoSelect = _ref$enableAutoSelect === void 0 ? false : _ref$enableAutoSelect,
    _ref$maxDate = _ref.maxDate,
    maxDate = _ref$maxDate === void 0 ? '' : _ref$maxDate,
    _ref$minDate = _ref.minDate,
    minDate = _ref$minDate === void 0 ? '' : _ref$minDate,
    position = _ref.position,
    label = _ref.label,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? InputSize.Md : _ref$size,
    hint = _ref.hint,
    popperOptions = _ref.popperOptions,
    _ref$zIndex = _ref.zIndex,
    zIndex = _ref$zIndex === void 0 ? 1300 : _ref$zIndex,
    InputPropsData = _ref.InputProps,
    _ref$calendarStyles = _ref.calendarStyles,
    calendarStyles = _ref$calendarStyles === void 0 ? {} : _ref$calendarStyles,
    _ref$popperWrapperSty = _ref.popperWrapperStyles,
    popperWrapperStyles = _ref$popperWrapperSty === void 0 ? {} : _ref$popperWrapperSty,
    inputGroupProps = _ref.inputGroupProps,
    fullWidth = _ref.fullWidth,
    placeholder = _ref.placeholder,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    open = _useState2[0],
    setOpen = _useState2[1];
  var _useState3 = useState(value),
    _useState4 = _slicedToArray(_useState3, 2),
    inputValue = _useState4[0],
    setInputValue = _useState4[1];
  var _useState5 = useState(true),
    _useState6 = _slicedToArray(_useState5, 2),
    showPlaceholder = _useState6[0],
    setShowPlaceholder = _useState6[1];
  var _useState7 = useState(false),
    _useState8 = _slicedToArray(_useState7, 2),
    isHovering = _useState8[0],
    setIsHovering = _useState8[1];
  var datePickerRef = useRef(null);
  var maxDateTimestamp = new Date(maxDate).getTime();
  var minDateTimestamp = new Date(minDate).getTime();
  var maxYear = new Date(inputValue).getFullYear();
  var isYearForm = (_isYearFormRegex$test = isYearFormRegex.test) === null || _isYearFormRegex$test === void 0 ? void 0 : _isYearFormRegex$test.call(isYearFormRegex, maxYear);
  var disabled = rest.disabled,
    readOnly = rest.readOnly;
  var handleOnChange = function handleOnChange(dateInputValue) {
    var dateInputTimestamp = new Date(dateInputValue).getTime();
    var isDisabledDate = dateInputTimestamp > maxDateTimestamp || dateInputTimestamp < minDateTimestamp;
    setInputValue(dateInputValue);
    if (onChange && !isDisabledDate && isYearForm) {
      onChange(dateInputValue);
    }
  };
  var handleClearIconClick = function handleClearIconClick() {
    if (onChange) onChange('');
    setInputValue('');
    setShowPlaceholder(true);
  };
  var handleCalendarIcon = function handleCalendarIcon() {
    if (!disabled && !readOnly) setOpen(!open);
  };
  var handlePlaceholder = function handlePlaceholder() {
    if (!disabled && !readOnly) setShowPlaceholder(false);
  };
  useEffect(function () {
    if (autoSelectToday) return;
    if (!value) setInputValue('');else setInputValue(value);
  }, [value]);
  return /*#__PURE__*/React.createElement(Styled.DatePicker, {
    ref: datePickerRef
  }, /*#__PURE__*/React.createElement(Styled.DatePickerInput, _extends({
    label: label,
    fullWidth: fullWidth,
    hint: hint,
    size: size,
    showPlaceholder: setShowPlaceholder,
    value: inputValue,
    $isHovering: isHovering,
    clearIcon: !!inputValue.length && function (props) {
      return /*#__PURE__*/React.createElement(CrossOutline, _extends({}, props, {
        size: 10
      }));
    },
    clearIconClick: handleClearIconClick,
    onChange: function onChange(_ref2) {
      var currentTarget = _ref2.currentTarget;
      return handleOnChange(currentTarget.value);
    },
    inputProps: _objectSpread({
      iconEnd: function iconEnd() {
        return /*#__PURE__*/React.createElement(Styled.DatePickerIconButton, {
          size: size,
          color: "basic"
        }, /*#__PURE__*/React.createElement(CalendarIcon, {
          size: size === 'md' ? 16 : 14
        }));
      },
      iconClickEnd: handleCalendarIcon,
      type: 'date',
      max: '9999-12-31'
    }, InputPropsData || {}),
    ref: ref
  }, inputGroupProps, rest)), !inputValue && placeholder && showPlaceholder && /*#__PURE__*/React.createElement(Styled.Placeholder, {
    onClick: handlePlaceholder,
    onMouseEnter: function onMouseEnter() {
      return setIsHovering(true);
    },
    onMouseLeave: function onMouseLeave() {
      return setIsHovering(false);
    },
    disabled: disabled,
    readOnly: readOnly,
    size: size
  }, placeholder), /*#__PURE__*/React.createElement(Calendar, {
    value: inputValue,
    open: open,
    setOpen: setOpen,
    onChange: handleOnChange,
    maxDate: maxDate,
    minDate: minDate,
    zIndex: zIndex,
    autoSelectToday: autoSelectToday,
    enableAutoSelect: enableAutoSelect,
    anchorEl: datePickerRef.current,
    position: position || 'bottom-start',
    popperOptions: popperOptions,
    calendarStyles: calendarStyles,
    popperWrapperStyles: popperWrapperStyles
  }));
});
export default Datepicker;