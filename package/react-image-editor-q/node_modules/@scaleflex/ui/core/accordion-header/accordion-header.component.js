import _extends from "@babel/runtime/helpers/extends";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["expanded", "label", "onChange", "onClick", "onContextMenu", "hideIcon", "fullWidth", "iconProps"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
import React from 'react';
import { intrinsicComponent } from '../../utils/functions';
import ArrowTick from '../arrow-tick';
import { Position as ArrowTickType } from '../../utils/types';
import Styled from './accordion-header.styles';
var AccordionHeader = intrinsicComponent(function (_ref, ref) {
  var _ref$expanded = _ref.expanded,
    expanded = _ref$expanded === void 0 ? false : _ref$expanded,
    label = _ref.label,
    onChange = _ref.onChange,
    _onClick = _ref.onClick,
    onContextMenu = _ref.onContextMenu,
    _ref$hideIcon = _ref.hideIcon,
    hideIcon = _ref$hideIcon === void 0 ? false : _ref$hideIcon,
    _ref$fullWidth = _ref.fullWidth,
    fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
    iconPropsData = _ref.iconProps,
    rest = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/React.createElement(Styled.Header, _extends({
    ref: ref,
    onClick: function onClick(event) {
      if (typeof onChange === 'function') {
        onChange(!expanded);
      }
      if (typeof _onClick === 'function') {
        _onClick(event);
      }
    },
    $fullWidth: fullWidth
  }, rest), /*#__PURE__*/React.createElement(Styled.Label, {
    onContextMenu: onContextMenu
  }, label), !hideIcon && /*#__PURE__*/React.createElement(Styled.Icon, {
    onContextMenu: onContextMenu
  }, /*#__PURE__*/React.createElement(ArrowTick, {
    type: expanded ? ArrowTickType.Top : ArrowTickType.Bottom,
    IconProps: _objectSpread({
      size: 11
    }, iconPropsData)
  })));
});
export default AccordionHeader;