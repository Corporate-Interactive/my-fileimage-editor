import _extends from "@babel/runtime/helpers/extends";
import _typeof from "@babel/runtime/helpers/typeof";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["type", "error", "label", "hint", "LabelProps", "InputProps", "inputProps", "inputRef", "TextareaProps", "readOnly", "disabled", "size", "value", "hideCopyIcon", "copyTextMessage", "copySuccessIcon", "placeholder", "fullWidth", "onChange"];
import React from 'react';
import Success from '@scaleflex/icons/success';
import { intrinsicComponent } from '../../utils/functions';
import Label from '../label';
import Input from '../input';
import Textarea from '../textarea';
import FormHint from '../form-hint';
import { Type } from './types';
import Styled from './input-group.styles';
var InputGroup = intrinsicComponent(function (_ref, ref) {
  var _ref$type = _ref.type,
    type = _ref$type === void 0 ? Type.Input : _ref$type,
    _ref$error = _ref.error,
    error = _ref$error === void 0 ? false : _ref$error,
    label = _ref.label,
    hint = _ref.hint,
    LabelPropsData = _ref.LabelProps,
    InputProps = _ref.InputProps,
    inputProps = _ref.inputProps,
    inputRef = _ref.inputRef,
    TextareaPropsData = _ref.TextareaProps,
    _ref$readOnly = _ref.readOnly,
    readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,
    disabled = _ref.disabled,
    size = _ref.size,
    value = _ref.value,
    hideCopyIcon = _ref.hideCopyIcon,
    _ref$copyTextMessage = _ref.copyTextMessage,
    copyTextMessage = _ref$copyTextMessage === void 0 ? 'Copied!' : _ref$copyTextMessage,
    _ref$copySuccessIcon = _ref.copySuccessIcon,
    copySuccessIcon = _ref$copySuccessIcon === void 0 ? /*#__PURE__*/React.createElement(Success, {
      size: 16
    }) : _ref$copySuccessIcon,
    placeholder = _ref.placeholder,
    fullWidth = _ref.fullWidth,
    _onChange = _ref.onChange,
    rest = _objectWithoutProperties(_ref, _excluded);
  var renderLabel = function renderLabel() {
    if (label) {
      if (typeof label === 'function') {
        return label({
          error: error
        });
      }
      if (_typeof(label) === 'object') {
        return label;
      }
      return /*#__PURE__*/React.createElement(Label, _extends({
        size: size,
        disabled: disabled
      }, LabelPropsData || {}), label);
    }
    return null;
  };
  var renderField = function renderField() {
    var fieldProps = {
      value: value,
      readOnly: readOnly,
      disabled: disabled,
      size: size,
      error: error,
      placeholder: placeholder,
      hideCopyIcon: hideCopyIcon,
      copyTextMessage: copyTextMessage,
      copySuccessIcon: copySuccessIcon,
      fullWidth: fullWidth
    };
    if (type === Type.Input) {
      return /*#__PURE__*/React.createElement(Input, _extends({}, fieldProps, rest, inputProps, {
        InputProps: InputProps,
        ref: inputRef,
        readOnly: readOnly,
        disabled: disabled,
        onChange: _onChange
      }));
    }
    if (type === Type.Textarea) {
      return /*#__PURE__*/React.createElement(Textarea, _extends({}, fieldProps, TextareaPropsData || {}, {
        onChange: function onChange(event) {
          return _onChange(event);
        }
      }));
    }
    return null;
  };
  var renderHint = function renderHint() {
    if (hint) {
      if (typeof hint === 'function') {
        return hint({
          error: error
        });
      }
      if (_typeof(hint) === 'object') {
        return hint;
      }
      return /*#__PURE__*/React.createElement(FormHint, {
        size: size,
        error: error,
        disabled: disabled
      }, hint);
    }
    return null;
  };
  return /*#__PURE__*/React.createElement(Styled.InputGroup, {
    ref: ref
  }, renderLabel(), renderField(), renderHint());
});
export default InputGroup;