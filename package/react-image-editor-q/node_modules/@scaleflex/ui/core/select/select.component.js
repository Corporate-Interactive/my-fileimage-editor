import _extends from "@babel/runtime/helpers/extends";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["children", "size", "error", "multiple", "onChange", "value", "fullWidth", "selectProps", "MenuProps", "readOnly", "disabled", "placeholder", "showSelectionKey", "hideMenuItemsActions", "showClearIcon", "renderLabel", "onRequestClose", "hideEllipsis"];
import React, { useState } from 'react';
import PT from 'prop-types';
import { intrinsicComponent } from '../../utils/functions';
import ArrowTick from '../arrow-tick';
import Menu from '../menu';
import { renderValue, renderOption } from './select.utils';
import { InputSize } from '../../utils/types';
import Styled from './select.styles';
import { Size } from '../cross-button/types';
var Select = intrinsicComponent(function (_ref, ref) {
  var _value$toString;
  var children = _ref.children,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? InputSize.Md : _ref$size,
    _ref$error = _ref.error,
    error = _ref$error === void 0 ? false : _ref$error,
    _ref$multiple = _ref.multiple,
    multiple = _ref$multiple === void 0 ? false : _ref$multiple,
    onChange = _ref.onChange,
    value = _ref.value,
    _ref$fullWidth = _ref.fullWidth,
    fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
    selectProps = _ref.selectProps,
    MenuProps = _ref.MenuProps,
    _ref$readOnly = _ref.readOnly,
    readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,
    disabled = _ref.disabled,
    placeholder = _ref.placeholder,
    showSelectionKey = _ref.showSelectionKey,
    _ref$hideMenuItemsAct = _ref.hideMenuItemsActions,
    hideMenuItemsActions = _ref$hideMenuItemsAct === void 0 ? false : _ref$hideMenuItemsAct,
    _ref$showClearIcon = _ref.showClearIcon,
    showClearIcon = _ref$showClearIcon === void 0 ? false : _ref$showClearIcon,
    renderLabel = _ref.renderLabel,
    onRequestClose = _ref.onRequestClose,
    _ref$hideEllipsis = _ref.hideEllipsis,
    hideEllipsis = _ref$hideEllipsis === void 0 ? false : _ref$hideEllipsis,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useState = useState(undefined),
    _useState2 = _slicedToArray(_useState, 2),
    anchorEl = _useState2[0],
    setAnchorEl = _useState2[1];
  var open = Boolean(anchorEl);
  var handleClick = function handleClick(event) {
    return setAnchorEl(event.currentTarget);
  };
  var isValueExists = Array.isArray(value) ? !!value.length : !!(value !== null && value !== void 0 && (_value$toString = value.toString()) !== null && _value$toString !== void 0 && _value$toString.length);
  var handleClose = function handleClose() {
    if (onRequestClose) {
      onRequestClose();
    }
    setAnchorEl(undefined);
  };
  var handleClearSelection = function handleClearSelection(event) {
    event.stopPropagation();
    if (typeof onChange === 'function') {
      onChange('');
    }
  };
  return /*#__PURE__*/React.createElement(Styled.Container, {
    ref: ref,
    fullWidth: Boolean(fullWidth)
  }, /*#__PURE__*/React.createElement(Styled.Select, _extends({}, rest, {
    disabled: disabled,
    size: size,
    $error: error,
    $fullWidth: Boolean(fullWidth),
    readOnly: readOnly,
    showSelectionKey: showSelectionKey,
    isValueExists: isValueExists,
    onClick: readOnly || disabled ? undefined : handleClick
  }), isValueExists && /*#__PURE__*/React.createElement(Styled.Label, {
    hideEllipsis: hideEllipsis,
    size: size
  }, typeof renderLabel === 'function' ? renderLabel(value) : renderValue({
    value: value,
    multiple: multiple,
    children: children,
    showSelectionKey: showSelectionKey
  })), !isValueExists && /*#__PURE__*/React.createElement(Styled.Placeholder, {
    size: size
  }, placeholder), !readOnly && showClearIcon && /*#__PURE__*/React.createElement(Styled.StyledCrossButton, {
    size: size === Size.Md ? Size.Sm : Size.Xs,
    onClick: handleClearSelection
  }), /*#__PURE__*/React.createElement(Styled.Icon, {
    size: size,
    disabled: disabled
  }, /*#__PURE__*/React.createElement(ArrowTick, {
    type: open ? 'top' : 'bottom',
    IconProps: {
      size: size === Size.Md ? 11 : 10
    }
  })), /*#__PURE__*/React.createElement(Styled.Input, selectProps)), /*#__PURE__*/React.createElement(Menu, _extends({
    onClose: handleClose
  }, MenuProps, {
    open: open,
    anchorEl: anchorEl
  }), React.Children.map(children, function (child) {
    return renderOption(child, {
      value: value,
      multiple: multiple,
      size: size,
      hideMenuItemsActions: hideMenuItemsActions,
      onClose: handleClose,
      onChange: readOnly || disabled ? undefined : onChange
    });
  })));
});
export var simpleValuePropTypes = PT.oneOfType([PT.string, PT.number, PT.oneOf([null])]);
export default Select;