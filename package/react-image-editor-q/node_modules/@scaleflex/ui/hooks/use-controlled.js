import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import { useState, useRef, useCallback } from 'react';
export default function useControlled(_ref) {
  var controlled = _ref.controlled,
    defaultProp = _ref["default"];
  // isControlled is ignored in the hook dependency lists as it should never change.
  var _useRef = useRef(controlled !== undefined),
    isControlled = _useRef.current;
  var _useState = useState(defaultProp),
    _useState2 = _slicedToArray(_useState, 2),
    valueState = _useState2[0],
    setValue = _useState2[1];
  var value = isControlled ? controlled : valueState;
  var setValueIfUncontrolled = useCallback(function (newValue) {
    if (!isControlled) {
      setValue(newValue);
    }
  }, []);
  return [value, setValueIfUncontrolled];
}