import * as React from 'react';
import React__default, { forwardRef, useMemo, createContext, useState, useEffect, useCallback, useContext, useRef, useReducer, memo, isValidElement, Children, Fragment } from 'react';
import require$$1 from 'canvas';
import styled, { css, createGlobalStyle, ThemeProvider as ThemeProvider$2, useTheme as useTheme$1, keyframes } from 'styled-components';
import { createPortal } from 'react-dom';

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var propTypes = {exports: {}};

var reactIs = {exports: {}};

var reactIs_production_min = {};

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_production_min;

function requireReactIs_production_min () {
	if (hasRequiredReactIs_production_min) return reactIs_production_min;
	hasRequiredReactIs_production_min = 1;
var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
	Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
	function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min.AsyncMode=l;reactIs_production_min.ConcurrentMode=m;reactIs_production_min.ContextConsumer=k;reactIs_production_min.ContextProvider=h;reactIs_production_min.Element=c;reactIs_production_min.ForwardRef=n;reactIs_production_min.Fragment=e;reactIs_production_min.Lazy=t;reactIs_production_min.Memo=r;reactIs_production_min.Portal=d;
	reactIs_production_min.Profiler=g;reactIs_production_min.StrictMode=f;reactIs_production_min.Suspense=p;reactIs_production_min.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min.isConcurrentMode=A;reactIs_production_min.isContextConsumer=function(a){return z(a)===k};reactIs_production_min.isContextProvider=function(a){return z(a)===h};reactIs_production_min.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min.isForwardRef=function(a){return z(a)===n};reactIs_production_min.isFragment=function(a){return z(a)===e};reactIs_production_min.isLazy=function(a){return z(a)===t};
	reactIs_production_min.isMemo=function(a){return z(a)===r};reactIs_production_min.isPortal=function(a){return z(a)===d};reactIs_production_min.isProfiler=function(a){return z(a)===g};reactIs_production_min.isStrictMode=function(a){return z(a)===f};reactIs_production_min.isSuspense=function(a){return z(a)===p};
	reactIs_production_min.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min.typeOf=z;
	return reactIs_production_min;
}

var reactIs_development = {};

/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_development;

function requireReactIs_development () {
	if (hasRequiredReactIs_development) return reactIs_development;
	hasRequiredReactIs_development = 1;



	if (process.env.NODE_ENV !== "production") {
	  (function() {

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?

	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	} // AsyncMode is deprecated along with isAsyncMode

	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }

	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	reactIs_development.AsyncMode = AsyncMode;
	reactIs_development.ConcurrentMode = ConcurrentMode;
	reactIs_development.ContextConsumer = ContextConsumer;
	reactIs_development.ContextProvider = ContextProvider;
	reactIs_development.Element = Element;
	reactIs_development.ForwardRef = ForwardRef;
	reactIs_development.Fragment = Fragment;
	reactIs_development.Lazy = Lazy;
	reactIs_development.Memo = Memo;
	reactIs_development.Portal = Portal;
	reactIs_development.Profiler = Profiler;
	reactIs_development.StrictMode = StrictMode;
	reactIs_development.Suspense = Suspense;
	reactIs_development.isAsyncMode = isAsyncMode;
	reactIs_development.isConcurrentMode = isConcurrentMode;
	reactIs_development.isContextConsumer = isContextConsumer;
	reactIs_development.isContextProvider = isContextProvider;
	reactIs_development.isElement = isElement;
	reactIs_development.isForwardRef = isForwardRef;
	reactIs_development.isFragment = isFragment;
	reactIs_development.isLazy = isLazy;
	reactIs_development.isMemo = isMemo;
	reactIs_development.isPortal = isPortal;
	reactIs_development.isProfiler = isProfiler;
	reactIs_development.isStrictMode = isStrictMode;
	reactIs_development.isSuspense = isSuspense;
	reactIs_development.isValidElementType = isValidElementType;
	reactIs_development.typeOf = typeOf;
	  })();
	}
	return reactIs_development;
}

var hasRequiredReactIs;

function requireReactIs () {
	if (hasRequiredReactIs) return reactIs.exports;
	hasRequiredReactIs = 1;

	if (process.env.NODE_ENV === 'production') {
	  reactIs.exports = requireReactIs_production_min();
	} else {
	  reactIs.exports = requireReactIs_development();
	}
	return reactIs.exports;
}

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

var objectAssign;
var hasRequiredObjectAssign;

function requireObjectAssign () {
	if (hasRequiredObjectAssign) return objectAssign;
	hasRequiredObjectAssign = 1;
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};
	return objectAssign;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret_1;
var hasRequiredReactPropTypesSecret;

function requireReactPropTypesSecret () {
	if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
	hasRequiredReactPropTypesSecret = 1;

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	ReactPropTypesSecret_1 = ReactPropTypesSecret;
	return ReactPropTypesSecret_1;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var checkPropTypes_1;
var hasRequiredCheckPropTypes;

function requireCheckPropTypes () {
	if (hasRequiredCheckPropTypes) return checkPropTypes_1;
	hasRequiredCheckPropTypes = 1;

	var printWarning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  var ReactPropTypesSecret = requireReactPropTypesSecret();
	  var loggedTypeFailures = {};
	  var has = Function.call.bind(Object.prototype.hasOwnProperty);

	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (process.env.NODE_ENV !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          );
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          printWarning(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}

	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */
	checkPropTypes.resetWarningCache = function() {
	  if (process.env.NODE_ENV !== 'production') {
	    loggedTypeFailures = {};
	  }
	};

	checkPropTypes_1 = checkPropTypes;
	return checkPropTypes_1;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var factoryWithTypeCheckers;
var hasRequiredFactoryWithTypeCheckers;

function requireFactoryWithTypeCheckers () {
	if (hasRequiredFactoryWithTypeCheckers) return factoryWithTypeCheckers;
	hasRequiredFactoryWithTypeCheckers = 1;

	var ReactIs = requireReactIs();
	var assign = requireObjectAssign();

	var ReactPropTypesSecret = requireReactPropTypesSecret();
	var checkPropTypes = requireCheckPropTypes();

	var has = Function.call.bind(Object.prototype.hasOwnProperty);
	var printWarning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull() {
	  return null;
	}

	factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    if (process.env.NODE_ENV !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!ReactIs.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (arguments.length > 1) {
	          printWarning(
	            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
	            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
	          );
	        } else {
	          printWarning('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }
	      return emptyFunctionThatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);
	        if (type === 'symbol') {
	          return String(value);
	        }
	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (has(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	          return null;
	        }
	      }

	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from
	      // props.
	      var allKeys = assign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // falsy value can't be a Symbol
	    if (!propValue) {
	      return false;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};
	return factoryWithTypeCheckers;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var factoryWithThrowingShims;
var hasRequiredFactoryWithThrowingShims;

function requireFactoryWithThrowingShims () {
	if (hasRequiredFactoryWithThrowingShims) return factoryWithThrowingShims;
	hasRequiredFactoryWithThrowingShims = 1;

	var ReactPropTypesSecret = requireReactPropTypesSecret();

	function emptyFunction() {}
	function emptyFunctionWithReset() {}
	emptyFunctionWithReset.resetWarningCache = emptyFunction;

	factoryWithThrowingShims = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error(
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	    err.name = 'Invariant Violation';
	    throw err;
	  }	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  }	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    elementType: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim,

	    checkPropTypes: emptyFunctionWithReset,
	    resetWarningCache: emptyFunction
	  };

	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};
	return factoryWithThrowingShims;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredPropTypes;

function requirePropTypes () {
	if (hasRequiredPropTypes) return propTypes.exports;
	hasRequiredPropTypes = 1;
	if (process.env.NODE_ENV !== 'production') {
	  var ReactIs = requireReactIs();

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  propTypes.exports = requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  propTypes.exports = requireFactoryWithThrowingShims()();
	}
	return propTypes.exports;
}

var propTypesExports = requirePropTypes();
var PropTypes = /*@__PURE__*/getDefaultExportFromCjs(propTypesExports);

function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}

function toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}

function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}

function _defineProperty(e, r, t) {
  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}

var lodash_merge = {exports: {}};

/**
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
lodash_merge.exports;

var hasRequiredLodash_merge;

function requireLodash_merge () {
	if (hasRequiredLodash_merge) return lodash_merge.exports;
	hasRequiredLodash_merge = 1;
	(function (module, exports) {
		/** Used as the size to enable large array optimizations. */
		var LARGE_ARRAY_SIZE = 200;

		/** Used to stand-in for `undefined` hash values. */
		var HASH_UNDEFINED = '__lodash_hash_undefined__';

		/** Used to detect hot functions by number of calls within a span of milliseconds. */
		var HOT_COUNT = 800,
		    HOT_SPAN = 16;

		/** Used as references for various `Number` constants. */
		var MAX_SAFE_INTEGER = 9007199254740991;

		/** `Object#toString` result references. */
		var argsTag = '[object Arguments]',
		    arrayTag = '[object Array]',
		    asyncTag = '[object AsyncFunction]',
		    boolTag = '[object Boolean]',
		    dateTag = '[object Date]',
		    errorTag = '[object Error]',
		    funcTag = '[object Function]',
		    genTag = '[object GeneratorFunction]',
		    mapTag = '[object Map]',
		    numberTag = '[object Number]',
		    nullTag = '[object Null]',
		    objectTag = '[object Object]',
		    proxyTag = '[object Proxy]',
		    regexpTag = '[object RegExp]',
		    setTag = '[object Set]',
		    stringTag = '[object String]',
		    undefinedTag = '[object Undefined]',
		    weakMapTag = '[object WeakMap]';

		var arrayBufferTag = '[object ArrayBuffer]',
		    dataViewTag = '[object DataView]',
		    float32Tag = '[object Float32Array]',
		    float64Tag = '[object Float64Array]',
		    int8Tag = '[object Int8Array]',
		    int16Tag = '[object Int16Array]',
		    int32Tag = '[object Int32Array]',
		    uint8Tag = '[object Uint8Array]',
		    uint8ClampedTag = '[object Uint8ClampedArray]',
		    uint16Tag = '[object Uint16Array]',
		    uint32Tag = '[object Uint32Array]';

		/**
		 * Used to match `RegExp`
		 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
		 */
		var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

		/** Used to detect host constructors (Safari). */
		var reIsHostCtor = /^\[object .+?Constructor\]$/;

		/** Used to detect unsigned integer values. */
		var reIsUint = /^(?:0|[1-9]\d*)$/;

		/** Used to identify `toStringTag` values of typed arrays. */
		var typedArrayTags = {};
		typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
		typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
		typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
		typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
		typedArrayTags[uint32Tag] = true;
		typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
		typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
		typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
		typedArrayTags[errorTag] = typedArrayTags[funcTag] =
		typedArrayTags[mapTag] = typedArrayTags[numberTag] =
		typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
		typedArrayTags[setTag] = typedArrayTags[stringTag] =
		typedArrayTags[weakMapTag] = false;

		/** Detect free variable `global` from Node.js. */
		var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

		/** Detect free variable `self`. */
		var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

		/** Used as a reference to the global object. */
		var root = freeGlobal || freeSelf || Function('return this')();

		/** Detect free variable `exports`. */
		var freeExports = exports && !exports.nodeType && exports;

		/** Detect free variable `module`. */
		var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

		/** Detect the popular CommonJS extension `module.exports`. */
		var moduleExports = freeModule && freeModule.exports === freeExports;

		/** Detect free variable `process` from Node.js. */
		var freeProcess = moduleExports && freeGlobal.process;

		/** Used to access faster Node.js helpers. */
		var nodeUtil = (function() {
		  try {
		    // Use `util.types` for Node.js 10+.
		    var types = freeModule && freeModule.require && freeModule.require('util').types;

		    if (types) {
		      return types;
		    }

		    // Legacy `process.binding('util')` for Node.js < 10.
		    return freeProcess && freeProcess.binding && freeProcess.binding('util');
		  } catch (e) {}
		}());

		/* Node.js helper references. */
		var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

		/**
		 * A faster alternative to `Function#apply`, this function invokes `func`
		 * with the `this` binding of `thisArg` and the arguments of `args`.
		 *
		 * @private
		 * @param {Function} func The function to invoke.
		 * @param {*} thisArg The `this` binding of `func`.
		 * @param {Array} args The arguments to invoke `func` with.
		 * @returns {*} Returns the result of `func`.
		 */
		function apply(func, thisArg, args) {
		  switch (args.length) {
		    case 0: return func.call(thisArg);
		    case 1: return func.call(thisArg, args[0]);
		    case 2: return func.call(thisArg, args[0], args[1]);
		    case 3: return func.call(thisArg, args[0], args[1], args[2]);
		  }
		  return func.apply(thisArg, args);
		}

		/**
		 * The base implementation of `_.times` without support for iteratee shorthands
		 * or max array length checks.
		 *
		 * @private
		 * @param {number} n The number of times to invoke `iteratee`.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Array} Returns the array of results.
		 */
		function baseTimes(n, iteratee) {
		  var index = -1,
		      result = Array(n);

		  while (++index < n) {
		    result[index] = iteratee(index);
		  }
		  return result;
		}

		/**
		 * The base implementation of `_.unary` without support for storing metadata.
		 *
		 * @private
		 * @param {Function} func The function to cap arguments for.
		 * @returns {Function} Returns the new capped function.
		 */
		function baseUnary(func) {
		  return function(value) {
		    return func(value);
		  };
		}

		/**
		 * Gets the value at `key` of `object`.
		 *
		 * @private
		 * @param {Object} [object] The object to query.
		 * @param {string} key The key of the property to get.
		 * @returns {*} Returns the property value.
		 */
		function getValue(object, key) {
		  return object == null ? undefined : object[key];
		}

		/**
		 * Creates a unary function that invokes `func` with its argument transformed.
		 *
		 * @private
		 * @param {Function} func The function to wrap.
		 * @param {Function} transform The argument transform.
		 * @returns {Function} Returns the new function.
		 */
		function overArg(func, transform) {
		  return function(arg) {
		    return func(transform(arg));
		  };
		}

		/** Used for built-in method references. */
		var arrayProto = Array.prototype,
		    funcProto = Function.prototype,
		    objectProto = Object.prototype;

		/** Used to detect overreaching core-js shims. */
		var coreJsData = root['__core-js_shared__'];

		/** Used to resolve the decompiled source of functions. */
		var funcToString = funcProto.toString;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/** Used to detect methods masquerading as native. */
		var maskSrcKey = (function() {
		  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
		  return uid ? ('Symbol(src)_1.' + uid) : '';
		}());

		/**
		 * Used to resolve the
		 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
		 * of values.
		 */
		var nativeObjectToString = objectProto.toString;

		/** Used to infer the `Object` constructor. */
		var objectCtorString = funcToString.call(Object);

		/** Used to detect if a method is native. */
		var reIsNative = RegExp('^' +
		  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
		  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
		);

		/** Built-in value references. */
		var Buffer = moduleExports ? root.Buffer : undefined,
		    Symbol = root.Symbol,
		    Uint8Array = root.Uint8Array,
		    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
		    getPrototype = overArg(Object.getPrototypeOf, Object),
		    objectCreate = Object.create,
		    propertyIsEnumerable = objectProto.propertyIsEnumerable,
		    splice = arrayProto.splice,
		    symToStringTag = Symbol ? Symbol.toStringTag : undefined;

		var defineProperty = (function() {
		  try {
		    var func = getNative(Object, 'defineProperty');
		    func({}, '', {});
		    return func;
		  } catch (e) {}
		}());

		/* Built-in method references for those with the same name as other `lodash` methods. */
		var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
		    nativeMax = Math.max,
		    nativeNow = Date.now;

		/* Built-in method references that are verified to be native. */
		var Map = getNative(root, 'Map'),
		    nativeCreate = getNative(Object, 'create');

		/**
		 * The base implementation of `_.create` without support for assigning
		 * properties to the created object.
		 *
		 * @private
		 * @param {Object} proto The object to inherit from.
		 * @returns {Object} Returns the new object.
		 */
		var baseCreate = (function() {
		  function object() {}
		  return function(proto) {
		    if (!isObject(proto)) {
		      return {};
		    }
		    if (objectCreate) {
		      return objectCreate(proto);
		    }
		    object.prototype = proto;
		    var result = new object;
		    object.prototype = undefined;
		    return result;
		  };
		}());

		/**
		 * Creates a hash object.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function Hash(entries) {
		  var index = -1,
		      length = entries == null ? 0 : entries.length;

		  this.clear();
		  while (++index < length) {
		    var entry = entries[index];
		    this.set(entry[0], entry[1]);
		  }
		}

		/**
		 * Removes all key-value entries from the hash.
		 *
		 * @private
		 * @name clear
		 * @memberOf Hash
		 */
		function hashClear() {
		  this.__data__ = nativeCreate ? nativeCreate(null) : {};
		  this.size = 0;
		}

		/**
		 * Removes `key` and its value from the hash.
		 *
		 * @private
		 * @name delete
		 * @memberOf Hash
		 * @param {Object} hash The hash to modify.
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function hashDelete(key) {
		  var result = this.has(key) && delete this.__data__[key];
		  this.size -= result ? 1 : 0;
		  return result;
		}

		/**
		 * Gets the hash value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf Hash
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function hashGet(key) {
		  var data = this.__data__;
		  if (nativeCreate) {
		    var result = data[key];
		    return result === HASH_UNDEFINED ? undefined : result;
		  }
		  return hasOwnProperty.call(data, key) ? data[key] : undefined;
		}

		/**
		 * Checks if a hash value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf Hash
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function hashHas(key) {
		  var data = this.__data__;
		  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
		}

		/**
		 * Sets the hash `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf Hash
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the hash instance.
		 */
		function hashSet(key, value) {
		  var data = this.__data__;
		  this.size += this.has(key) ? 0 : 1;
		  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
		  return this;
		}

		// Add methods to `Hash`.
		Hash.prototype.clear = hashClear;
		Hash.prototype['delete'] = hashDelete;
		Hash.prototype.get = hashGet;
		Hash.prototype.has = hashHas;
		Hash.prototype.set = hashSet;

		/**
		 * Creates an list cache object.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function ListCache(entries) {
		  var index = -1,
		      length = entries == null ? 0 : entries.length;

		  this.clear();
		  while (++index < length) {
		    var entry = entries[index];
		    this.set(entry[0], entry[1]);
		  }
		}

		/**
		 * Removes all key-value entries from the list cache.
		 *
		 * @private
		 * @name clear
		 * @memberOf ListCache
		 */
		function listCacheClear() {
		  this.__data__ = [];
		  this.size = 0;
		}

		/**
		 * Removes `key` and its value from the list cache.
		 *
		 * @private
		 * @name delete
		 * @memberOf ListCache
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function listCacheDelete(key) {
		  var data = this.__data__,
		      index = assocIndexOf(data, key);

		  if (index < 0) {
		    return false;
		  }
		  var lastIndex = data.length - 1;
		  if (index == lastIndex) {
		    data.pop();
		  } else {
		    splice.call(data, index, 1);
		  }
		  --this.size;
		  return true;
		}

		/**
		 * Gets the list cache value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf ListCache
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function listCacheGet(key) {
		  var data = this.__data__,
		      index = assocIndexOf(data, key);

		  return index < 0 ? undefined : data[index][1];
		}

		/**
		 * Checks if a list cache value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf ListCache
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function listCacheHas(key) {
		  return assocIndexOf(this.__data__, key) > -1;
		}

		/**
		 * Sets the list cache `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf ListCache
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the list cache instance.
		 */
		function listCacheSet(key, value) {
		  var data = this.__data__,
		      index = assocIndexOf(data, key);

		  if (index < 0) {
		    ++this.size;
		    data.push([key, value]);
		  } else {
		    data[index][1] = value;
		  }
		  return this;
		}

		// Add methods to `ListCache`.
		ListCache.prototype.clear = listCacheClear;
		ListCache.prototype['delete'] = listCacheDelete;
		ListCache.prototype.get = listCacheGet;
		ListCache.prototype.has = listCacheHas;
		ListCache.prototype.set = listCacheSet;

		/**
		 * Creates a map cache object to store key-value pairs.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function MapCache(entries) {
		  var index = -1,
		      length = entries == null ? 0 : entries.length;

		  this.clear();
		  while (++index < length) {
		    var entry = entries[index];
		    this.set(entry[0], entry[1]);
		  }
		}

		/**
		 * Removes all key-value entries from the map.
		 *
		 * @private
		 * @name clear
		 * @memberOf MapCache
		 */
		function mapCacheClear() {
		  this.size = 0;
		  this.__data__ = {
		    'hash': new Hash,
		    'map': new (Map || ListCache),
		    'string': new Hash
		  };
		}

		/**
		 * Removes `key` and its value from the map.
		 *
		 * @private
		 * @name delete
		 * @memberOf MapCache
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function mapCacheDelete(key) {
		  var result = getMapData(this, key)['delete'](key);
		  this.size -= result ? 1 : 0;
		  return result;
		}

		/**
		 * Gets the map value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf MapCache
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function mapCacheGet(key) {
		  return getMapData(this, key).get(key);
		}

		/**
		 * Checks if a map value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf MapCache
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function mapCacheHas(key) {
		  return getMapData(this, key).has(key);
		}

		/**
		 * Sets the map `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf MapCache
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the map cache instance.
		 */
		function mapCacheSet(key, value) {
		  var data = getMapData(this, key),
		      size = data.size;

		  data.set(key, value);
		  this.size += data.size == size ? 0 : 1;
		  return this;
		}

		// Add methods to `MapCache`.
		MapCache.prototype.clear = mapCacheClear;
		MapCache.prototype['delete'] = mapCacheDelete;
		MapCache.prototype.get = mapCacheGet;
		MapCache.prototype.has = mapCacheHas;
		MapCache.prototype.set = mapCacheSet;

		/**
		 * Creates a stack cache object to store key-value pairs.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function Stack(entries) {
		  var data = this.__data__ = new ListCache(entries);
		  this.size = data.size;
		}

		/**
		 * Removes all key-value entries from the stack.
		 *
		 * @private
		 * @name clear
		 * @memberOf Stack
		 */
		function stackClear() {
		  this.__data__ = new ListCache;
		  this.size = 0;
		}

		/**
		 * Removes `key` and its value from the stack.
		 *
		 * @private
		 * @name delete
		 * @memberOf Stack
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function stackDelete(key) {
		  var data = this.__data__,
		      result = data['delete'](key);

		  this.size = data.size;
		  return result;
		}

		/**
		 * Gets the stack value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf Stack
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function stackGet(key) {
		  return this.__data__.get(key);
		}

		/**
		 * Checks if a stack value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf Stack
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function stackHas(key) {
		  return this.__data__.has(key);
		}

		/**
		 * Sets the stack `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf Stack
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the stack cache instance.
		 */
		function stackSet(key, value) {
		  var data = this.__data__;
		  if (data instanceof ListCache) {
		    var pairs = data.__data__;
		    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
		      pairs.push([key, value]);
		      this.size = ++data.size;
		      return this;
		    }
		    data = this.__data__ = new MapCache(pairs);
		  }
		  data.set(key, value);
		  this.size = data.size;
		  return this;
		}

		// Add methods to `Stack`.
		Stack.prototype.clear = stackClear;
		Stack.prototype['delete'] = stackDelete;
		Stack.prototype.get = stackGet;
		Stack.prototype.has = stackHas;
		Stack.prototype.set = stackSet;

		/**
		 * Creates an array of the enumerable property names of the array-like `value`.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @param {boolean} inherited Specify returning inherited property names.
		 * @returns {Array} Returns the array of property names.
		 */
		function arrayLikeKeys(value, inherited) {
		  var isArr = isArray(value),
		      isArg = !isArr && isArguments(value),
		      isBuff = !isArr && !isArg && isBuffer(value),
		      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
		      skipIndexes = isArr || isArg || isBuff || isType,
		      result = skipIndexes ? baseTimes(value.length, String) : [],
		      length = result.length;

		  for (var key in value) {
		    if ((inherited || hasOwnProperty.call(value, key)) &&
		        !(skipIndexes && (
		           // Safari 9 has enumerable `arguments.length` in strict mode.
		           key == 'length' ||
		           // Node.js 0.10 has enumerable non-index properties on buffers.
		           (isBuff && (key == 'offset' || key == 'parent')) ||
		           // PhantomJS 2 has enumerable non-index properties on typed arrays.
		           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
		           // Skip index properties.
		           isIndex(key, length)
		        ))) {
		      result.push(key);
		    }
		  }
		  return result;
		}

		/**
		 * This function is like `assignValue` except that it doesn't assign
		 * `undefined` values.
		 *
		 * @private
		 * @param {Object} object The object to modify.
		 * @param {string} key The key of the property to assign.
		 * @param {*} value The value to assign.
		 */
		function assignMergeValue(object, key, value) {
		  if ((value !== undefined && !eq(object[key], value)) ||
		      (value === undefined && !(key in object))) {
		    baseAssignValue(object, key, value);
		  }
		}

		/**
		 * Assigns `value` to `key` of `object` if the existing value is not equivalent
		 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		 * for equality comparisons.
		 *
		 * @private
		 * @param {Object} object The object to modify.
		 * @param {string} key The key of the property to assign.
		 * @param {*} value The value to assign.
		 */
		function assignValue(object, key, value) {
		  var objValue = object[key];
		  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
		      (value === undefined && !(key in object))) {
		    baseAssignValue(object, key, value);
		  }
		}

		/**
		 * Gets the index at which the `key` is found in `array` of key-value pairs.
		 *
		 * @private
		 * @param {Array} array The array to inspect.
		 * @param {*} key The key to search for.
		 * @returns {number} Returns the index of the matched value, else `-1`.
		 */
		function assocIndexOf(array, key) {
		  var length = array.length;
		  while (length--) {
		    if (eq(array[length][0], key)) {
		      return length;
		    }
		  }
		  return -1;
		}

		/**
		 * The base implementation of `assignValue` and `assignMergeValue` without
		 * value checks.
		 *
		 * @private
		 * @param {Object} object The object to modify.
		 * @param {string} key The key of the property to assign.
		 * @param {*} value The value to assign.
		 */
		function baseAssignValue(object, key, value) {
		  if (key == '__proto__' && defineProperty) {
		    defineProperty(object, key, {
		      'configurable': true,
		      'enumerable': true,
		      'value': value,
		      'writable': true
		    });
		  } else {
		    object[key] = value;
		  }
		}

		/**
		 * The base implementation of `baseForOwn` which iterates over `object`
		 * properties returned by `keysFunc` and invokes `iteratee` for each property.
		 * Iteratee functions may exit iteration early by explicitly returning `false`.
		 *
		 * @private
		 * @param {Object} object The object to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @param {Function} keysFunc The function to get the keys of `object`.
		 * @returns {Object} Returns `object`.
		 */
		var baseFor = createBaseFor();

		/**
		 * The base implementation of `getTag` without fallbacks for buggy environments.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @returns {string} Returns the `toStringTag`.
		 */
		function baseGetTag(value) {
		  if (value == null) {
		    return value === undefined ? undefinedTag : nullTag;
		  }
		  return (symToStringTag && symToStringTag in Object(value))
		    ? getRawTag(value)
		    : objectToString(value);
		}

		/**
		 * The base implementation of `_.isArguments`.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		 */
		function baseIsArguments(value) {
		  return isObjectLike(value) && baseGetTag(value) == argsTag;
		}

		/**
		 * The base implementation of `_.isNative` without bad shim checks.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a native function,
		 *  else `false`.
		 */
		function baseIsNative(value) {
		  if (!isObject(value) || isMasked(value)) {
		    return false;
		  }
		  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
		  return pattern.test(toSource(value));
		}

		/**
		 * The base implementation of `_.isTypedArray` without Node.js optimizations.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		 */
		function baseIsTypedArray(value) {
		  return isObjectLike(value) &&
		    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
		}

		/**
		 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 */
		function baseKeysIn(object) {
		  if (!isObject(object)) {
		    return nativeKeysIn(object);
		  }
		  var isProto = isPrototype(object),
		      result = [];

		  for (var key in object) {
		    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
		      result.push(key);
		    }
		  }
		  return result;
		}

		/**
		 * The base implementation of `_.merge` without support for multiple sources.
		 *
		 * @private
		 * @param {Object} object The destination object.
		 * @param {Object} source The source object.
		 * @param {number} srcIndex The index of `source`.
		 * @param {Function} [customizer] The function to customize merged values.
		 * @param {Object} [stack] Tracks traversed source values and their merged
		 *  counterparts.
		 */
		function baseMerge(object, source, srcIndex, customizer, stack) {
		  if (object === source) {
		    return;
		  }
		  baseFor(source, function(srcValue, key) {
		    stack || (stack = new Stack);
		    if (isObject(srcValue)) {
		      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
		    }
		    else {
		      var newValue = customizer
		        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
		        : undefined;

		      if (newValue === undefined) {
		        newValue = srcValue;
		      }
		      assignMergeValue(object, key, newValue);
		    }
		  }, keysIn);
		}

		/**
		 * A specialized version of `baseMerge` for arrays and objects which performs
		 * deep merges and tracks traversed objects enabling objects with circular
		 * references to be merged.
		 *
		 * @private
		 * @param {Object} object The destination object.
		 * @param {Object} source The source object.
		 * @param {string} key The key of the value to merge.
		 * @param {number} srcIndex The index of `source`.
		 * @param {Function} mergeFunc The function to merge values.
		 * @param {Function} [customizer] The function to customize assigned values.
		 * @param {Object} [stack] Tracks traversed source values and their merged
		 *  counterparts.
		 */
		function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
		  var objValue = safeGet(object, key),
		      srcValue = safeGet(source, key),
		      stacked = stack.get(srcValue);

		  if (stacked) {
		    assignMergeValue(object, key, stacked);
		    return;
		  }
		  var newValue = customizer
		    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
		    : undefined;

		  var isCommon = newValue === undefined;

		  if (isCommon) {
		    var isArr = isArray(srcValue),
		        isBuff = !isArr && isBuffer(srcValue),
		        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

		    newValue = srcValue;
		    if (isArr || isBuff || isTyped) {
		      if (isArray(objValue)) {
		        newValue = objValue;
		      }
		      else if (isArrayLikeObject(objValue)) {
		        newValue = copyArray(objValue);
		      }
		      else if (isBuff) {
		        isCommon = false;
		        newValue = cloneBuffer(srcValue, true);
		      }
		      else if (isTyped) {
		        isCommon = false;
		        newValue = cloneTypedArray(srcValue, true);
		      }
		      else {
		        newValue = [];
		      }
		    }
		    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
		      newValue = objValue;
		      if (isArguments(objValue)) {
		        newValue = toPlainObject(objValue);
		      }
		      else if (!isObject(objValue) || isFunction(objValue)) {
		        newValue = initCloneObject(srcValue);
		      }
		    }
		    else {
		      isCommon = false;
		    }
		  }
		  if (isCommon) {
		    // Recursively merge objects and arrays (susceptible to call stack limits).
		    stack.set(srcValue, newValue);
		    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
		    stack['delete'](srcValue);
		  }
		  assignMergeValue(object, key, newValue);
		}

		/**
		 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
		 *
		 * @private
		 * @param {Function} func The function to apply a rest parameter to.
		 * @param {number} [start=func.length-1] The start position of the rest parameter.
		 * @returns {Function} Returns the new function.
		 */
		function baseRest(func, start) {
		  return setToString(overRest(func, start, identity), func + '');
		}

		/**
		 * The base implementation of `setToString` without support for hot loop shorting.
		 *
		 * @private
		 * @param {Function} func The function to modify.
		 * @param {Function} string The `toString` result.
		 * @returns {Function} Returns `func`.
		 */
		var baseSetToString = !defineProperty ? identity : function(func, string) {
		  return defineProperty(func, 'toString', {
		    'configurable': true,
		    'enumerable': false,
		    'value': constant(string),
		    'writable': true
		  });
		};

		/**
		 * Creates a clone of  `buffer`.
		 *
		 * @private
		 * @param {Buffer} buffer The buffer to clone.
		 * @param {boolean} [isDeep] Specify a deep clone.
		 * @returns {Buffer} Returns the cloned buffer.
		 */
		function cloneBuffer(buffer, isDeep) {
		  if (isDeep) {
		    return buffer.slice();
		  }
		  var length = buffer.length,
		      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

		  buffer.copy(result);
		  return result;
		}

		/**
		 * Creates a clone of `arrayBuffer`.
		 *
		 * @private
		 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
		 * @returns {ArrayBuffer} Returns the cloned array buffer.
		 */
		function cloneArrayBuffer(arrayBuffer) {
		  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
		  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
		  return result;
		}

		/**
		 * Creates a clone of `typedArray`.
		 *
		 * @private
		 * @param {Object} typedArray The typed array to clone.
		 * @param {boolean} [isDeep] Specify a deep clone.
		 * @returns {Object} Returns the cloned typed array.
		 */
		function cloneTypedArray(typedArray, isDeep) {
		  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
		  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
		}

		/**
		 * Copies the values of `source` to `array`.
		 *
		 * @private
		 * @param {Array} source The array to copy values from.
		 * @param {Array} [array=[]] The array to copy values to.
		 * @returns {Array} Returns `array`.
		 */
		function copyArray(source, array) {
		  var index = -1,
		      length = source.length;

		  array || (array = Array(length));
		  while (++index < length) {
		    array[index] = source[index];
		  }
		  return array;
		}

		/**
		 * Copies properties of `source` to `object`.
		 *
		 * @private
		 * @param {Object} source The object to copy properties from.
		 * @param {Array} props The property identifiers to copy.
		 * @param {Object} [object={}] The object to copy properties to.
		 * @param {Function} [customizer] The function to customize copied values.
		 * @returns {Object} Returns `object`.
		 */
		function copyObject(source, props, object, customizer) {
		  var isNew = !object;
		  object || (object = {});

		  var index = -1,
		      length = props.length;

		  while (++index < length) {
		    var key = props[index];

		    var newValue = customizer
		      ? customizer(object[key], source[key], key, object, source)
		      : undefined;

		    if (newValue === undefined) {
		      newValue = source[key];
		    }
		    if (isNew) {
		      baseAssignValue(object, key, newValue);
		    } else {
		      assignValue(object, key, newValue);
		    }
		  }
		  return object;
		}

		/**
		 * Creates a function like `_.assign`.
		 *
		 * @private
		 * @param {Function} assigner The function to assign values.
		 * @returns {Function} Returns the new assigner function.
		 */
		function createAssigner(assigner) {
		  return baseRest(function(object, sources) {
		    var index = -1,
		        length = sources.length,
		        customizer = length > 1 ? sources[length - 1] : undefined,
		        guard = length > 2 ? sources[2] : undefined;

		    customizer = (assigner.length > 3 && typeof customizer == 'function')
		      ? (length--, customizer)
		      : undefined;

		    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
		      customizer = length < 3 ? undefined : customizer;
		      length = 1;
		    }
		    object = Object(object);
		    while (++index < length) {
		      var source = sources[index];
		      if (source) {
		        assigner(object, source, index, customizer);
		      }
		    }
		    return object;
		  });
		}

		/**
		 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
		 *
		 * @private
		 * @param {boolean} [fromRight] Specify iterating from right to left.
		 * @returns {Function} Returns the new base function.
		 */
		function createBaseFor(fromRight) {
		  return function(object, iteratee, keysFunc) {
		    var index = -1,
		        iterable = Object(object),
		        props = keysFunc(object),
		        length = props.length;

		    while (length--) {
		      var key = props[fromRight ? length : ++index];
		      if (iteratee(iterable[key], key, iterable) === false) {
		        break;
		      }
		    }
		    return object;
		  };
		}

		/**
		 * Gets the data for `map`.
		 *
		 * @private
		 * @param {Object} map The map to query.
		 * @param {string} key The reference key.
		 * @returns {*} Returns the map data.
		 */
		function getMapData(map, key) {
		  var data = map.__data__;
		  return isKeyable(key)
		    ? data[typeof key == 'string' ? 'string' : 'hash']
		    : data.map;
		}

		/**
		 * Gets the native function at `key` of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {string} key The key of the method to get.
		 * @returns {*} Returns the function if it's native, else `undefined`.
		 */
		function getNative(object, key) {
		  var value = getValue(object, key);
		  return baseIsNative(value) ? value : undefined;
		}

		/**
		 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @returns {string} Returns the raw `toStringTag`.
		 */
		function getRawTag(value) {
		  var isOwn = hasOwnProperty.call(value, symToStringTag),
		      tag = value[symToStringTag];

		  try {
		    value[symToStringTag] = undefined;
		    var unmasked = true;
		  } catch (e) {}

		  var result = nativeObjectToString.call(value);
		  if (unmasked) {
		    if (isOwn) {
		      value[symToStringTag] = tag;
		    } else {
		      delete value[symToStringTag];
		    }
		  }
		  return result;
		}

		/**
		 * Initializes an object clone.
		 *
		 * @private
		 * @param {Object} object The object to clone.
		 * @returns {Object} Returns the initialized clone.
		 */
		function initCloneObject(object) {
		  return (typeof object.constructor == 'function' && !isPrototype(object))
		    ? baseCreate(getPrototype(object))
		    : {};
		}

		/**
		 * Checks if `value` is a valid array-like index.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
		 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
		 */
		function isIndex(value, length) {
		  var type = typeof value;
		  length = length == null ? MAX_SAFE_INTEGER : length;

		  return !!length &&
		    (type == 'number' ||
		      (type != 'symbol' && reIsUint.test(value))) &&
		        (value > -1 && value % 1 == 0 && value < length);
		}

		/**
		 * Checks if the given arguments are from an iteratee call.
		 *
		 * @private
		 * @param {*} value The potential iteratee value argument.
		 * @param {*} index The potential iteratee index or key argument.
		 * @param {*} object The potential iteratee object argument.
		 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
		 *  else `false`.
		 */
		function isIterateeCall(value, index, object) {
		  if (!isObject(object)) {
		    return false;
		  }
		  var type = typeof index;
		  if (type == 'number'
		        ? (isArrayLike(object) && isIndex(index, object.length))
		        : (type == 'string' && index in object)
		      ) {
		    return eq(object[index], value);
		  }
		  return false;
		}

		/**
		 * Checks if `value` is suitable for use as unique object key.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
		 */
		function isKeyable(value) {
		  var type = typeof value;
		  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
		    ? (value !== '__proto__')
		    : (value === null);
		}

		/**
		 * Checks if `func` has its source masked.
		 *
		 * @private
		 * @param {Function} func The function to check.
		 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
		 */
		function isMasked(func) {
		  return !!maskSrcKey && (maskSrcKey in func);
		}

		/**
		 * Checks if `value` is likely a prototype object.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
		 */
		function isPrototype(value) {
		  var Ctor = value && value.constructor,
		      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

		  return value === proto;
		}

		/**
		 * This function is like
		 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
		 * except that it includes inherited enumerable properties.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 */
		function nativeKeysIn(object) {
		  var result = [];
		  if (object != null) {
		    for (var key in Object(object)) {
		      result.push(key);
		    }
		  }
		  return result;
		}

		/**
		 * Converts `value` to a string using `Object.prototype.toString`.
		 *
		 * @private
		 * @param {*} value The value to convert.
		 * @returns {string} Returns the converted string.
		 */
		function objectToString(value) {
		  return nativeObjectToString.call(value);
		}

		/**
		 * A specialized version of `baseRest` which transforms the rest array.
		 *
		 * @private
		 * @param {Function} func The function to apply a rest parameter to.
		 * @param {number} [start=func.length-1] The start position of the rest parameter.
		 * @param {Function} transform The rest array transform.
		 * @returns {Function} Returns the new function.
		 */
		function overRest(func, start, transform) {
		  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
		  return function() {
		    var args = arguments,
		        index = -1,
		        length = nativeMax(args.length - start, 0),
		        array = Array(length);

		    while (++index < length) {
		      array[index] = args[start + index];
		    }
		    index = -1;
		    var otherArgs = Array(start + 1);
		    while (++index < start) {
		      otherArgs[index] = args[index];
		    }
		    otherArgs[start] = transform(array);
		    return apply(func, this, otherArgs);
		  };
		}

		/**
		 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {string} key The key of the property to get.
		 * @returns {*} Returns the property value.
		 */
		function safeGet(object, key) {
		  if (key === 'constructor' && typeof object[key] === 'function') {
		    return;
		  }

		  if (key == '__proto__') {
		    return;
		  }

		  return object[key];
		}

		/**
		 * Sets the `toString` method of `func` to return `string`.
		 *
		 * @private
		 * @param {Function} func The function to modify.
		 * @param {Function} string The `toString` result.
		 * @returns {Function} Returns `func`.
		 */
		var setToString = shortOut(baseSetToString);

		/**
		 * Creates a function that'll short out and invoke `identity` instead
		 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
		 * milliseconds.
		 *
		 * @private
		 * @param {Function} func The function to restrict.
		 * @returns {Function} Returns the new shortable function.
		 */
		function shortOut(func) {
		  var count = 0,
		      lastCalled = 0;

		  return function() {
		    var stamp = nativeNow(),
		        remaining = HOT_SPAN - (stamp - lastCalled);

		    lastCalled = stamp;
		    if (remaining > 0) {
		      if (++count >= HOT_COUNT) {
		        return arguments[0];
		      }
		    } else {
		      count = 0;
		    }
		    return func.apply(undefined, arguments);
		  };
		}

		/**
		 * Converts `func` to its source code.
		 *
		 * @private
		 * @param {Function} func The function to convert.
		 * @returns {string} Returns the source code.
		 */
		function toSource(func) {
		  if (func != null) {
		    try {
		      return funcToString.call(func);
		    } catch (e) {}
		    try {
		      return (func + '');
		    } catch (e) {}
		  }
		  return '';
		}

		/**
		 * Performs a
		 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		 * comparison between two values to determine if they are equivalent.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		 * @example
		 *
		 * var object = { 'a': 1 };
		 * var other = { 'a': 1 };
		 *
		 * _.eq(object, object);
		 * // => true
		 *
		 * _.eq(object, other);
		 * // => false
		 *
		 * _.eq('a', 'a');
		 * // => true
		 *
		 * _.eq('a', Object('a'));
		 * // => false
		 *
		 * _.eq(NaN, NaN);
		 * // => true
		 */
		function eq(value, other) {
		  return value === other || (value !== value && other !== other);
		}

		/**
		 * Checks if `value` is likely an `arguments` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		 *  else `false`.
		 * @example
		 *
		 * _.isArguments(function() { return arguments; }());
		 * // => true
		 *
		 * _.isArguments([1, 2, 3]);
		 * // => false
		 */
		var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
		  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
		    !propertyIsEnumerable.call(value, 'callee');
		};

		/**
		 * Checks if `value` is classified as an `Array` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
		 * @example
		 *
		 * _.isArray([1, 2, 3]);
		 * // => true
		 *
		 * _.isArray(document.body.children);
		 * // => false
		 *
		 * _.isArray('abc');
		 * // => false
		 *
		 * _.isArray(_.noop);
		 * // => false
		 */
		var isArray = Array.isArray;

		/**
		 * Checks if `value` is array-like. A value is considered array-like if it's
		 * not a function and has a `value.length` that's an integer greater than or
		 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
		 * @example
		 *
		 * _.isArrayLike([1, 2, 3]);
		 * // => true
		 *
		 * _.isArrayLike(document.body.children);
		 * // => true
		 *
		 * _.isArrayLike('abc');
		 * // => true
		 *
		 * _.isArrayLike(_.noop);
		 * // => false
		 */
		function isArrayLike(value) {
		  return value != null && isLength(value.length) && !isFunction(value);
		}

		/**
		 * This method is like `_.isArrayLike` except that it also checks if `value`
		 * is an object.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an array-like object,
		 *  else `false`.
		 * @example
		 *
		 * _.isArrayLikeObject([1, 2, 3]);
		 * // => true
		 *
		 * _.isArrayLikeObject(document.body.children);
		 * // => true
		 *
		 * _.isArrayLikeObject('abc');
		 * // => false
		 *
		 * _.isArrayLikeObject(_.noop);
		 * // => false
		 */
		function isArrayLikeObject(value) {
		  return isObjectLike(value) && isArrayLike(value);
		}

		/**
		 * Checks if `value` is a buffer.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.3.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
		 * @example
		 *
		 * _.isBuffer(new Buffer(2));
		 * // => true
		 *
		 * _.isBuffer(new Uint8Array(2));
		 * // => false
		 */
		var isBuffer = nativeIsBuffer || stubFalse;

		/**
		 * Checks if `value` is classified as a `Function` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
		 * @example
		 *
		 * _.isFunction(_);
		 * // => true
		 *
		 * _.isFunction(/abc/);
		 * // => false
		 */
		function isFunction(value) {
		  if (!isObject(value)) {
		    return false;
		  }
		  // The use of `Object#toString` avoids issues with the `typeof` operator
		  // in Safari 9 which returns 'object' for typed arrays and other constructors.
		  var tag = baseGetTag(value);
		  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
		}

		/**
		 * Checks if `value` is a valid array-like length.
		 *
		 * **Note:** This method is loosely based on
		 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
		 * @example
		 *
		 * _.isLength(3);
		 * // => true
		 *
		 * _.isLength(Number.MIN_VALUE);
		 * // => false
		 *
		 * _.isLength(Infinity);
		 * // => false
		 *
		 * _.isLength('3');
		 * // => false
		 */
		function isLength(value) {
		  return typeof value == 'number' &&
		    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
		}

		/**
		 * Checks if `value` is the
		 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
		 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
		 * @example
		 *
		 * _.isObject({});
		 * // => true
		 *
		 * _.isObject([1, 2, 3]);
		 * // => true
		 *
		 * _.isObject(_.noop);
		 * // => true
		 *
		 * _.isObject(null);
		 * // => false
		 */
		function isObject(value) {
		  var type = typeof value;
		  return value != null && (type == 'object' || type == 'function');
		}

		/**
		 * Checks if `value` is object-like. A value is object-like if it's not `null`
		 * and has a `typeof` result of "object".
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
		 * @example
		 *
		 * _.isObjectLike({});
		 * // => true
		 *
		 * _.isObjectLike([1, 2, 3]);
		 * // => true
		 *
		 * _.isObjectLike(_.noop);
		 * // => false
		 *
		 * _.isObjectLike(null);
		 * // => false
		 */
		function isObjectLike(value) {
		  return value != null && typeof value == 'object';
		}

		/**
		 * Checks if `value` is a plain object, that is, an object created by the
		 * `Object` constructor or one with a `[[Prototype]]` of `null`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.8.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 * }
		 *
		 * _.isPlainObject(new Foo);
		 * // => false
		 *
		 * _.isPlainObject([1, 2, 3]);
		 * // => false
		 *
		 * _.isPlainObject({ 'x': 0, 'y': 0 });
		 * // => true
		 *
		 * _.isPlainObject(Object.create(null));
		 * // => true
		 */
		function isPlainObject(value) {
		  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
		    return false;
		  }
		  var proto = getPrototype(value);
		  if (proto === null) {
		    return true;
		  }
		  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
		  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
		    funcToString.call(Ctor) == objectCtorString;
		}

		/**
		 * Checks if `value` is classified as a typed array.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		 * @example
		 *
		 * _.isTypedArray(new Uint8Array);
		 * // => true
		 *
		 * _.isTypedArray([]);
		 * // => false
		 */
		var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

		/**
		 * Converts `value` to a plain object flattening inherited enumerable string
		 * keyed properties of `value` to own properties of the plain object.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Lang
		 * @param {*} value The value to convert.
		 * @returns {Object} Returns the converted plain object.
		 * @example
		 *
		 * function Foo() {
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.assign({ 'a': 1 }, new Foo);
		 * // => { 'a': 1, 'b': 2 }
		 *
		 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
		 * // => { 'a': 1, 'b': 2, 'c': 3 }
		 */
		function toPlainObject(value) {
		  return copyObject(value, keysIn(value));
		}

		/**
		 * Creates an array of the own and inherited enumerable property names of `object`.
		 *
		 * **Note:** Non-object values are coerced to objects.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Object
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.keysIn(new Foo);
		 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
		 */
		function keysIn(object) {
		  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
		}

		/**
		 * This method is like `_.assign` except that it recursively merges own and
		 * inherited enumerable string keyed properties of source objects into the
		 * destination object. Source properties that resolve to `undefined` are
		 * skipped if a destination value exists. Array and plain object properties
		 * are merged recursively. Other objects and value types are overridden by
		 * assignment. Source objects are applied from left to right. Subsequent
		 * sources overwrite property assignments of previous sources.
		 *
		 * **Note:** This method mutates `object`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.5.0
		 * @category Object
		 * @param {Object} object The destination object.
		 * @param {...Object} [sources] The source objects.
		 * @returns {Object} Returns `object`.
		 * @example
		 *
		 * var object = {
		 *   'a': [{ 'b': 2 }, { 'd': 4 }]
		 * };
		 *
		 * var other = {
		 *   'a': [{ 'c': 3 }, { 'e': 5 }]
		 * };
		 *
		 * _.merge(object, other);
		 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
		 */
		var merge = createAssigner(function(object, source, srcIndex) {
		  baseMerge(object, source, srcIndex);
		});

		/**
		 * Creates a function that returns `value`.
		 *
		 * @static
		 * @memberOf _
		 * @since 2.4.0
		 * @category Util
		 * @param {*} value The value to return from the new function.
		 * @returns {Function} Returns the new constant function.
		 * @example
		 *
		 * var objects = _.times(2, _.constant({ 'a': 1 }));
		 *
		 * console.log(objects);
		 * // => [{ 'a': 1 }, { 'a': 1 }]
		 *
		 * console.log(objects[0] === objects[1]);
		 * // => true
		 */
		function constant(value) {
		  return function() {
		    return value;
		  };
		}

		/**
		 * This method returns the first argument it receives.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Util
		 * @param {*} value Any value.
		 * @returns {*} Returns `value`.
		 * @example
		 *
		 * var object = { 'a': 1 };
		 *
		 * console.log(_.identity(object) === object);
		 * // => true
		 */
		function identity(value) {
		  return value;
		}

		/**
		 * This method returns `false`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.13.0
		 * @category Util
		 * @returns {boolean} Returns `false`.
		 * @example
		 *
		 * _.times(2, _.stubFalse);
		 * // => [false, false]
		 */
		function stubFalse() {
		  return false;
		}

		module.exports = merge; 
	} (lodash_merge, lodash_merge.exports));
	return lodash_merge.exports;
}

var lodash_mergeExports = requireLodash_merge();
var merge = /*@__PURE__*/getDefaultExportFromCjs(lodash_mergeExports);

function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}

function _arrayWithoutHoles(r) {
  if (Array.isArray(r)) return _arrayLikeToArray(r);
}

function _iterableToArray(r) {
  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}

function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray(r) {
  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
}

function generateClassNames(componentName, subClassNames) {
  var generateClassName = function generateClassName(subClassName) {
    return "Sfx".concat(componentName).concat(subClassName ? "-".concat(subClassName) : '');
  };
  var classNameArray = [];
  if (subClassNames) {
    if (Array.isArray(subClassNames)) {
      classNameArray.push.apply(classNameArray, _toConsumableArray(subClassNames.filter(function (subClassName) {
        return typeof subClassName === 'string';
      }).map(function (subClassName) {
        return generateClassName(subClassName);
      })));
    } else if (typeof subClassNames === 'string') {
      classNameArray.push(generateClassName(subClassNames));
    }
  }
  if (classNameArray.length === 0) {
    classNameArray.push(generateClassName());
  }
  return classNameArray.join(' ');
}

/**
 * Wrapper around React's `forwardRef` function, which adds a `displayName` to each component
 * created using it
 */
function intrinsicComponent$1(render, displayName) {
  var component = /*#__PURE__*/forwardRef(render);
  component.displayName = displayName || render.name;
  return component;
}

/**
 * If your prop can be either a function or a plain value, this function handles
 * its usage for you – just provide the reference for a 'maybe function' and the arguments
 * to call it with
 */
function applyPolymorphicFunctionProp(prop) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return typeof prop === 'function' ? prop.apply(void 0, args) : prop;
}

/**
 * If you are using a namespace for your styled components, this can come in handy giving each
 * styled component in this namespace a displayName which gives better debugging experience
 */
function applyDisplayNames(styledObject) {
  return Object.keys(styledObject).reduce(function (newStyledObject, styledComponentName) {
    var styledComponent = styledObject[styledComponentName];
    styledComponent.displayName = "".concat(styledComponentName);
    return Object.assign(newStyledObject, _defineProperty({}, styledComponentName, styledComponent));
  }, {});
}

/**
 * passes {value} to {ref}
 * Useful if you want to expose the ref of an inner component to the public API
 * while still using it inside the component.
 * @param ref A ref callback or ref object. If anything falsy, this is a no-op.
 */
function setRef(ref, value) {
  if (typeof ref === 'function') {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
}

function useForkRef(refA, refB) {
  /**
   * This will create a new function if the ref props change and are defined.
   * This means react will call the old forkRef with `null` and the new forkRef
   * with the ref. Cleanup naturally emerges from this behavior.
   */
  return React.useMemo(function () {
    if (refA == null && refB == null) {
      return null;
    }
    return function (refValue) {
      setRef(refA, refValue);
      setRef(refB, refValue);
    };
  }, [refA, refB]);
}

function restrictNumber$1(number) {
  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var max = arguments.length > 2 ? arguments[2] : undefined;
  // we are not assigning default value for it as if max was null it will override the default value.
  var currentMax = max || 1000000;
  var convertedNumber = +number;
  return Math.min(Math.max(min, convertedNumber), currentMax);
}

function mapNumber$1(number, oldMin, oldMax, newMin, newMax) {
  return (number - oldMin) * (newMax - newMin) / (oldMax - oldMin) + newMin;
}

var rgbStringToArray = function rgbStringToArray(rgbColorString) {
  return rgbColorString.replaceAll(/[^\d,]/gi, '').split(',').map(function (n) {
    return +n;
  });
};
var hexToRgb = function hexToRgb(hexColor) {
  // if (!hexColor) return { r: 0, g: 0, b: 0 };
  if (!hexColor) return [0, 0, 0];
  return [Number.parseInt(hexColor.slice(1, 3), 16), Number.parseInt(hexColor.slice(3, 5), 16), Number.parseInt(hexColor.slice(5, 7), 16)];
};
var rgbChannelToHex = function rgbChannelToHex(channel) {
  return channel.toString(16).padStart(2, '0');
};
var rgbToHex = function rgbToHex() {
  for (var _len = arguments.length, rgbColor = new Array(_len), _key = 0; _key < _len; _key++) {
    rgbColor[_key] = arguments[_key];
  }
  return "#".concat(rgbColor.map(rgbChannelToHex).join(''));
};
var hslToHex = function hslToHex(h, s, l) {
  var dividedL = l / 100;
  var a = s * Math.min(dividedL, 1 - dividedL) / 100;
  var f = function f(n) {
    var k = (n + h / 30) % 12;
    var color = dividedL - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    return rgbChannelToHex(Math.round(255 * color));
  };
  return "#".concat(f(0)).concat(f(8)).concat(f(4));
};
var rgbToHsl = function rgbToHsl() {
  for (var _len2 = arguments.length, rgbColor = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    rgbColor[_key2] = arguments[_key2];
  }
  var r = rgbColor[0],
    g = rgbColor[1],
    b = rgbColor[2];
  r /= 255;
  g /= 255;
  b /= 255;
  var min = Math.min(r, g, b);
  var max = Math.max(r, g, b);
  var h;
  var s;
  var l = (max + min) / 2;
  if (max === min) {
    h = 0;
    s = 0;
  } else {
    var diff = max - min;
    s = l > 0.5 ? diff / (2 - max - min) : diff / (max + min);
    switch (max) {
      case r:
        h = (g - b) / diff + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / diff + 2;
        break;
      case b:
        h = (r - g) / diff + 4;
        break;
      default:
        h = 0;
    }
    h /= 6;
  }

  // * 360 for having the hue in degrees
  return [Math.round(h * 360), Math.round(s * 100), Math.round(l * 100)];
};
var colorToHsl = function colorToHsl(color) {
  if (color.startsWith('#')) {
    var hex = color;
    if (color.length === 4) {
      hex = "#".concat(color[1]).concat(color[1]).concat(color[2]).concat(color[2]).concat(color[3]).concat(color[3]);
    }
    return rgbToHsl.apply(void 0, _toConsumableArray(hexToRgb(hex)));
  }
  if (color.startsWith('rgb')) {
    var colorInRgb = rgbStringToArray(color);
    return rgbToHsl.apply(void 0, _toConsumableArray(colorInRgb));
  }

  // if the color is in text and no one from previous then return the default color which is black
  if (typeof color === 'string') {
    return [0, 0, 0];
  }
  return color;
};
var colorToHex = function colorToHex(color) {
  if (color.startsWith('#')) {
    if (color.length === 7) {
      return color;
    }
    return "#".concat(color[0]).concat(color[0]).concat(color[1]).concat(color[1]).concat(color[2]).concat(color[2]);
  }
  if (color.startsWith('rgb')) {
    return rgbToHex.apply(void 0, _toConsumableArray(rgbStringToArray(color)));
  }
  if (typeof color === 'string') {
    return '#000000';
  }
  return color;
};
var checkIsBlack = function checkIsBlack(s, l) {
  return l === 0 && (s === 0 || s === 1);
};
var checkIsWhite = function checkIsWhite(s, l) {
  return s === 0 && l === 1;
};

// both hsv and hsl values are in [0, 1] except h is in [0, 360]
var hsvToHsl = function hsvToHsl(h, s, v) {
  var newS = s;
  var l = (2 - s) * v / 2;
  if (l !== 0) {
    if (l === 1) {
      newS = 0;
    } else if (l < 0.5) {
      newS = newS * v / (l * 2);
    } else {
      newS = newS * v / (2 - l * 2);
    }
  }
  var isBlack = checkIsBlack(newS, l);
  return [isBlack || checkIsWhite(newS, l) ? 0 : h, isBlack ? 0 : Math.round(newS * 100), Math.round(l * 100)];
};

// both hsv and hsl values are in [0, 1] except h is in [0, 360]
var hslToHsv = function hslToHsv(h, s, l) {
  var newS = s;
  var newL = l * 2;
  newS *= newL <= 1 ? newL : 2 - newL;
  var v = (newL + newS) / 2;
  newS = 2 * newS / (newL + newS);

  // return [h, newS, v];
  var isBlack = checkIsBlack(newS, l);
  return [isBlack || checkIsWhite(newS, l) ? 0 : h, isBlack ? 0 : Math.round(newS * 100), Math.round(v * 100)];
};

// TODO: validating 3 color code for Hex
// /^#([\da-f]{3}){1,2}$/i.test(color)colorToHex
var validateHex = function validateHex(color) {
  return /^#[\da-f]{6}$/i.test(color);
};

function getElemDocumentCoords$1(elem) {
  if (!elem) {
    return null;
  }
  var box = elem.getBoundingClientRect();
  var _document = document,
    body = _document.body;
  var docEl = document.documentElement;
  var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;
  var scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;
  var clientTop = docEl.clientTop || body.clientTop || 0;
  var clientLeft = docEl.clientLeft || body.clientLeft || 0;
  var top = box.top + scrollTop - clientTop;
  var left = box.left + scrollLeft - clientLeft;
  return {
    top: Math.round(top),
    left: Math.round(left),
    width: box.width,
    height: box.height
  };
}

function asc(a, b) {
  return a - b;
}
function valueToPercent(value, min, max) {
  return (value - min) * 100 / (max - min);
}
function percentToValue(percent, min, max) {
  return (max - min) * percent + min;
}
function getDecimalPrecision(num) {
  // This handles the case when num is very small (0.00000001), js will turn this into 1e-8.
  // When num is bigger than 1 or less than -1 it won't get converted to this notation so it's fine.
  if (Math.abs(num) < 1) {
    var parts = num.toExponential().split('e-');
    var matissaDecimalPart = parts[0].split('.')[1];
    return (matissaDecimalPart ? matissaDecimalPart.length : 0) + Number.parseInt(parts[1], 10);
  }
  var decimalPart = num.toString().split('.')[1];
  return decimalPart ? decimalPart.length : 0;
}
function roundValueToStep(value, step, min) {
  var nearest = Math.round((value - min) / step) * step + min;
  return Number(nearest.toFixed(getDecimalPrecision(step)));
}
function setValueIndex(_ref) {
  var values = _ref.values,
    newValue = _ref.newValue,
    index = _ref.index;
  var output = values.slice();
  output[index] = newValue;
  return output.sort(asc);
}
function findClosest(values, currentValue) {
  var _values$reduce = values.reduce(function (acc, value, index) {
      var distance = Math.abs(currentValue - value);
      if (acc === null || distance < acc.distance || distance === acc.distance) {
        return {
          distance: distance,
          index: index
        };
      }
      return acc;
    }, null),
    closestIndex = _values$reduce.index;
  return closestIndex;
}
function ownerDocument(node) {
  return node && node.ownerDocument || document;
}
function clamp(value, min, max) {
  if (value == null) {
    return min;
  }
  return Math.min(Math.max(min, value), max);
}
function trackFinger(event, touchId) {
  if (touchId.current !== undefined && event.changedTouches) {
    for (var i = 0; i < event.changedTouches.length; i += 1) {
      var touch = event.changedTouches[i];
      if (touch.identifier === touchId.current) {
        return {
          x: touch.clientX,
          y: touch.clientY
        };
      }
    }
    return false;
  }
  return {
    x: event.clientX,
    y: event.clientY
  };
}
var axisProps = {
  horizontal: {
    offset: function offset(percent) {
      return {
        left: "".concat(percent, "%")
      };
    },
    leap: function leap(percent) {
      return {
        width: "".concat(percent, "%")
      };
    }
  },
  'horizontal-reverse': {
    offset: function offset(percent) {
      return {
        right: "".concat(percent, "%")
      };
    },
    leap: function leap(percent) {
      return {
        width: "".concat(percent, "%")
      };
    }
  },
  vertical: {
    offset: function offset(percent) {
      return {
        bottom: "".concat(percent, "%")
      };
    },
    leap: function leap(percent) {
      return {
        height: "".concat(percent, "%")
      };
    }
  }
};
function focusThumb(_ref2) {
  var sliderRef = _ref2.sliderRef,
    activeIndex = _ref2.activeIndex,
    setActive = _ref2.setActive;
  var doc = ownerDocument(sliderRef.current);
  if (!sliderRef.current.contains(doc.activeElement) || Number(doc.activeElement.getAttribute('data-index')) !== activeIndex) {
    var _sliderRef$current$qu;
    (_sliderRef$current$qu = sliderRef.current.querySelector("[type=\"range\"][data-index=\"".concat(activeIndex, "\"]"))) === null || _sliderRef$current$qu === void 0 || _sliderRef$current$qu.focus();
  }
  if (setActive) {
    setActive(activeIndex);
  }
}

var Color = {
  TextPrimary: 'txt-primary',
  TextSecondary: 'txt-secondary',
  TextSecondaryInvert: 'txt-secondary-invert',
  TextPlaceholder: 'txt-placeholder',
  TextWarning: 'txt-warning',
  TextError: 'txt-error',
  TextInfo: 'txt-info',
  AccentPrimary: 'accent-primary',
  AccentPrimaryHover: 'accent-primary-hover',
  AccentPrimaryActive: 'accent-primary-active',
  AccentPrimaryDisabled: 'accent-primary-disabled',
  AccentSecondaryDisabled: 'accent-secondary-disabled',
  AccentStateless: 'accent-stateless',
  AccentStateless_0_4_Opacity: 'accent-stateless_0_4_opacity',
  Accent_0_5_5_Opacity: 'accent_0_5_5_opacity',
  Accent_0_5_Opacity: 'accent_0_5_opacity',
  Accent_0_7_Opacity: 'accent_0_7_opacity',
  Accent_1_2_Opacity: 'accent_1_2_opacity',
  Accent_1_8_Opacity: 'accent_1_8_opacity',
  Accent_2_8_Opacity: 'accent_2_8_opacity',
  Accent_4_0_Opacity: 'accent_4_0_opacity',
  BackgroundGrey: 'bg-grey',
  BackgroundStateless: 'bg-stateless',
  BackgroundActive: 'bg-active',
  BackgroundBaseLight: 'bg-base-light',
  BackgroundBaseMedium: 'bg-base-medium',
  BackgroundPrimary: 'bg-primary',
  BackgroundPrimaryLight: 'bg-primary-light',
  BackgroundPrimaryHover: 'bg-primary-hover',
  BackgroundPrimaryActive: 'bg-primary-active',
  BackgroundPrimaryStateless: 'bg-primary-stateless',
  BackgroundPrimary_0_5_Opacity: 'bg-primary-0-5-opacity',
  BackgroundSecondary: 'bg-secondary',
  BackgroundHover: 'bg-hover',
  BackgroundGreen: 'bg-green',
  BackgroundGreenMedium: 'bg-green-medium',
  BackgroundBlue: 'bg-blue',
  BackgroundRed: 'bg-red',
  BackgroundRedLight: 'bg-red-light',
  BackgroundRedMedium: 'background-red-medium',
  BackgroundOrange: 'bg-orange',
  BackgroundTooltip: 'bg-tooltip',
  IconsPrimary: 'icon-primary',
  IconsPrimaryOpacity_0_6: 'icons-primary-opacity-0-6',
  IconsSecondary: 'icons-secondary',
  IconsPlaceholder: 'icons-placeholder',
  IconsInvert: 'icons-invert',
  IconsMuted: 'icons-muted',
  IconsPrimaryHover: 'icons-primary-hover',
  IconsSecondaryHover: 'icons-secondary-hover',
  ButtonPrimaryText: 'btn-primary-text',
  ButtonPrimaryText_0_6: 'btn-primary-text-0-6',
  ButtonPrimaryText_0_4: 'btn-primary-text-0-4',
  ButtonDisabledText: 'btn-disabled-text',
  ButtonSecondaryText: 'btn-secondary-text',
  LinkPrimary: 'link-primary',
  LinkStateless: 'link-stateless',
  LinkHover: 'link-hover',
  LinkActive: 'link-active',
  LinkMuted: 'link-muted',
  LinkPressed: 'link-pressed',
  BordersPrimary: 'borders-primary',
  BordersPrimaryHover: 'borders-primary-hover',
  BordersSecondary: 'borders-secondary',
  BordersStrong: 'borders-strong',
  BordersInvert: 'borders-invert',
  BorderHoverBottom: 'border-hover-bottom',
  BorderActiveBottom: 'border-active-bottom',
  BorderPrimaryStateless: 'border-primary-stateless',
  BordersDisabled: 'borders-disabled',
  BordersButton: 'borders-button',
  BordersItem: 'borders-item',
  BordersBaseLight: 'borders-base-light',
  BordersBaseMedium: 'borders-base-medium',
  BordersGreen: 'borders-green',
  BordersGreenMedium: 'borders-green-medium',
  BordersRed: 'borders-red',
  ActiveSecondary: 'active-secondary',
  ActiveSecondaryHover: 'active-secondary-hover',
  Tag: 'tag',
  StatesErrorDisabledText: 'states-error-disabled-text',
  Error: 'error',
  Error_0_28_Opacity: 'error-0-28-opacity',
  Error_0_12_Opacity: 'error-0-12-opacity',
  ErrorHover: 'error-hover',
  ErrorActive: 'error-active',
  Success: 'success',
  SuccessHover: 'success-hover',
  SuccessActive: 'success-Active',
  Warning: 'warning',
  WarningHover: 'warning-hover',
  WarningActive: 'warning-active',
  Info: 'info',
  Modified: 'modified',
  Red: 'red',
  Orange: 'orange',
  Salad: 'salad',
  Green: 'green',
  Blue: 'blue',
  Indigo: 'indigo',
  Violet: 'violet',
  Pink: 'pink',
  GradientRight: 'gradient-right',
  Extra_0_3_Overlay: 'extra-0-3-overlay',
  GradientRightActive: 'gradient-right-active',
  GradientRightHover: 'gradient-right-hover',
  Extra_0_5_Overlay: 'extra-0-5-overlay',
  Extra_0_7_Overlay: 'extra-0-7-overlay',
  Extra_0_9_Overlay: 'extra-0-9-overlay',
  Red_0_1_Overlay: 'red-0-1-overlay',
  Orange_0_1_Overlay: 'orange-0-1-overlay',
  Accent_0_8_Overlay: 'accent-0-8-overlay',
  Green_0_2_Overlay: 'green-0-2-Overlay',
  Link: 'link',
  Camera: 'camera',
  GoogleDrive: 'google-drive',
  Dropbox: 'dropbox',
  OneDrive: 'one-drive',
  Device: 'device',
  Instagram: 'instagram',
  FreeImages: 'free-images',
  FreeIcons: 'free-icons',
  Canvas: 'canvas',
  Box: 'box',
  ScreenCast: 'screen-cast',
  Unsplash: 'unsplash',
  LightShadow: 'light-shadow',
  MediumShadow: 'medium-shadow',
  LargeShadow: 'large-shadow',
  XLargeShadow: 'x-large-shadow'
};

var scrollBar = function scrollBar(_ref) {
  var palette = _ref.theme.palette;
  return css(["&::-webkit-scrollbar{width:12px;}&::-webkit-scrollbar-thumb{background:", ";border:4px solid ", ";border-radius:99px;height:92px;padding:4px 6px;}"], palette[Color.BorderPrimaryStateless], palette[Color.ActiveSecondary]);
};

var ignoreEvent = function ignoreEvent(event) {
  var tagName = event.target.tagName;
  if (tagName === 'INPUT' || tagName === 'TEXTAREA') {
    event.stopPropagation();
    return;
  }
  event.preventDefault();
  event.stopPropagation();
};

var BorderRadiusSize = {
  Sm: 'sm',
  Md: 'md',
  Lg: 'lg'
};

var Typography = /*#__PURE__*/createGlobalStyle(["", ";"], function (_ref) {
  var theme = _ref.theme;
  var baseLineHeight = theme.typography.baseLineHeight;
  return css(["h1,h2,h3,h4,h5,h6,p,small{line-height:", ";}"], baseLineHeight);
});
var Typography$1 = Typography;

var FontWeight = {
  Thin: 100,
  ExtraLight: 200,
  Light: 300,
  Regular: 400,
  Medium: 500,
  SemiBold: 600,
  Bold: 700,
  ExtraBold: 800,
  Black: 900
};

var FontVariant = {
  TextExtraSmall: 'text-extra-small',
  TextSmall: 'text-small',
  TextSmallUp: 'text-small-up',
  TextMedium: 'text-medium',
  TextLarge: 'text-large',
  TextExtraLarge: 'text-extra-large',
  TextXExtraLarge: 'text-x-extra-large',
  TitleH6: 'title-h6',
  TitleH5: 'title-h5',
  TitleH4: 'title-h4',
  TitleH3: 'title-h3',
  TitleH2: 'title-h2',
  TitleH1: 'title-h1',
  LabelExtraSmall: 'label-extra-small',
  LabelExtraSmallEmphasis: 'label-extra-small-emphasis',
  LabelExtraSmallUp: 'label-extra-small-up',
  LabelSmall: 'label-small',
  LabelSmallEmphasis: 'label-small-emphasis',
  LabelSmallUp: 'label-small-up',
  LabelSmallUpEmphasis: 'label-small-up-emphasis',
  LabelMedium: 'label-medium',
  LabelMediumEmphasis: 'label-medium-emphasis',
  LabelLarge: 'label-large',
  LabelLargeEmphasis: 'label-large-emphasis',
  LabelLargeUp: 'label-large-up',
  LabelExtraLargeEmphasis: 'label-extra-large-emphasis',
  LabelExtraLarge: 'label-extra-large',
  LabelXExtraLargeEmphasis: 'label-x-extra-large-emphasis',
  LabelXExtraLarge: 'label-x-extra-large',
  LabelXXExtraLargeEmphasis: 'label-x-x-extra-large-emphasis',
  LabelXXExtraLarge: 'label-x-x-extra-large',
  LabelXXXExtraLarge: 'label-x-x-x-extra-large',
  ButtonSmEmphasis: 'btn-sm-emphasis',
  ButtonSm: 'btn-sm',
  ButtonSmUpEmphasis: 'btn-sm-up-emphasis',
  ButtonSmUp: 'btn-sm-up',
  ButtonMdEmphasis: 'btn-md-emphasis',
  ButtonMd: 'btn-md',
  ButtonLgEmphasis: 'btn-lg-emphasis',
  ButtonLg: 'btn-lg',
  ButtonLgUpEmphasis: 'btn-lg-up-emphasis',
  ButtonLgUp: 'btn-lg-up',
  LinkSmall: 'link-small',
  LinkSmallEmphasis: 'link-small-emphasis',
  LinkSmallUp: 'link-small-up',
  LinkSmallUpEmphasis: 'link-small-up-emphasis',
  LinkMedium: 'link-medium',
  LinkMediumEmphasis: 'link-medium-emphasis',
  LinkLarge: 'link-large',
  LinkLargeEmphasis: 'link-large-emphasis',
  LinkLargeUp: 'link-large-up',
  LinkLargeUpEmphasis: 'link-large-up-emphasis',
  InputSm: 'input-sm',
  InputSmUp: 'input-sm-up',
  InputMd: 'input-md',
  InputLg: 'input-lg'
};

function ownKeys$e(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$e(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$e(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$e(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var defaultFontValue = {
  fontFamily: '"Roboto"',
  fontStyle: 'normal',
  fontWeight: FontWeight.Regular
};
var getLabelFontVariants = function getLabelFontVariants() {
  var _ref;
  var fontOverride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _ref = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref, FontVariant.LabelExtraSmall, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '10px',
    lineHeight: '12px'
  }, fontOverride)), FontVariant.LabelExtraSmallEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: 'Bold',
    fontSize: '10px',
    lineHeight: '12px'
  }, fontOverride)), FontVariant.LabelExtraSmallUp, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '11px',
    lineHeight: '12px'
  }, fontOverride)), FontVariant.LabelSmall, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '12px',
    lineHeight: '14px'
  }, fontOverride)), FontVariant.LabelSmallEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '12px',
    lineHeight: '14px'
  }, fontOverride)), FontVariant.LabelSmallUp, _objectSpread$e(_objectSpread$e({
    fontSize: '13px',
    lineHeight: '16px'
  }, defaultFontValue), fontOverride)), FontVariant.LabelSmallUpEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '13px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.LabelMedium, _objectSpread$e(_objectSpread$e({
    fontSize: '14px',
    lineHeight: '16px'
  }, defaultFontValue), fontOverride)), FontVariant.LabelMediumEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '14px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.LabelLarge, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '16px',
    lineHeight: '18px'
  }, fontOverride)), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref, FontVariant.LabelLargeEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '16px',
    lineHeight: '18px'
  }, fontOverride)), FontVariant.LabelLargeUp, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Regular,
    fontSize: '18px',
    lineHeight: '20px'
  }, fontOverride)), FontVariant.LabelExtraLargeEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '24px',
    lineHeight: '28px'
  }, fontOverride)), FontVariant.LabelExtraLarge, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Regular,
    fontSize: '24px',
    lineHeight: '28px'
  }, fontOverride)), FontVariant.LabelXExtraLargeEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '32px',
    lineHeight: '36px'
  }, fontOverride)), FontVariant.LabelXExtraLarge, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '32px',
    lineHeight: '36px'
  }, fontOverride)), FontVariant.LabelXXExtraLargeEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '48px',
    lineHeight: '54px'
  }, fontOverride)), FontVariant.LabelXXExtraLarge, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '48px',
    lineHeight: '54px'
  }, fontOverride)), FontVariant.LabelXXXExtraLarge, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '60px',
    lineHeight: '68px'
  }, fontOverride));
};
var getTextFontVariants = function getTextFontVariants() {
  var fontOverride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, FontVariant.TextExtraSmall, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '11px',
    lineHeight: '14px'
  }, fontOverride)), FontVariant.TextSmall, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '12px',
    lineHeight: '18px'
  }, fontOverride)), FontVariant.TextSmallUp, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '13px',
    lineHeight: '18px'
  }, fontOverride)), FontVariant.TextMedium, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '14px',
    lineHeight: '20px'
  }, fontOverride)), FontVariant.TextLarge, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '16px',
    lineHeight: '22px'
  }, fontOverride)), FontVariant.TextExtraLarge, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '18px',
    lineHeight: '26px'
  }, fontOverride)), FontVariant.TextXExtraLarge, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '28px',
    lineHeight: '40px'
  }, fontOverride));
};
var getButtonFontVariants = function getButtonFontVariants() {
  var fontOverride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, FontVariant.ButtonSmEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '12px',
    lineHeight: '14px'
  }, fontOverride)), FontVariant.ButtonSm, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '12px',
    lineHeight: '14px'
  }, fontOverride)), FontVariant.ButtonSmUpEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '13px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.ButtonSmUp, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '13px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.ButtonMdEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '14px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.ButtonMd, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '14px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.ButtonLgEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '16px',
    lineHeight: '18px'
  }, fontOverride)), FontVariant.ButtonLg, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '16px',
    lineHeight: '18px'
  }, fontOverride)), FontVariant.ButtonLgUpEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '18px',
    lineHeight: '20px'
  }, fontOverride)), FontVariant.ButtonLgUp, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '18px',
    lineHeight: '20px'
  }, fontOverride));
};
var getLinkFontVariants = function getLinkFontVariants() {
  var fontOverride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, FontVariant.LinkSmall, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '12px',
    lineHeight: '14px'
  }, fontOverride)), FontVariant.LinkSmallEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '12px',
    lineHeight: '14px'
  }, fontOverride)), FontVariant.LinkSmallUp, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '13px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.LinkSmallUpEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '13px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.LinkMedium, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '14px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.LinkMediumEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '14px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.LinkLarge, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '16px',
    lineHeight: '18px'
  }, fontOverride)), FontVariant.LinkLargeEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '16px',
    lineHeight: '18px'
  }, fontOverride)), FontVariant.LinkLargeUp, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '18px',
    lineHeight: '20px'
  }, fontOverride)), FontVariant.LinkLargeUpEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '18px',
    lineHeight: '20px'
  }, fontOverride));
};
var getInputFontVariants = function getInputFontVariants() {
  var fontOverride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, FontVariant.InputSm, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '12px',
    lineHeight: '14px'
  }, fontOverride)), FontVariant.InputSmUp, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '13px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.InputMd, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '14px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.InputLg, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '16px',
    lineHeight: '18px'
  }, fontOverride));
};
var getTitleFontVariants = function getTitleFontVariants() {
  var fontOverride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, FontVariant.TitleH6, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '12px',
    lineHeight: '18px'
  }, fontOverride)), FontVariant.TitleH5, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '14px',
    lineHeight: '21px'
  }, fontOverride)), FontVariant.TitleH4, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '16px',
    lineHeight: '24px'
  }, fontOverride)), FontVariant.TitleH3, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '18px',
    lineHeight: '27px'
  }, fontOverride)), FontVariant.TitleH2, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '20px',
    lineHeight: '30px'
  }, fontOverride)), FontVariant.TitleH1, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '28px',
    lineHeight: '42px'
  }, fontOverride));
};
var getDefaultTypography = function getDefaultTypography() {
  var typographyOverride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _objectSpread$e(_objectSpread$e({
    fontFamily: defaultFontValue.fontFamily,
    baseLineHeight: 1.375
  }, typographyOverride), {}, {
    font: _objectSpread$e(_objectSpread$e(_objectSpread$e(_objectSpread$e(_objectSpread$e(_objectSpread$e({}, getLabelFontVariants(typographyOverride)), getTextFontVariants(typographyOverride)), getButtonFontVariants(typographyOverride)), getLinkFontVariants(typographyOverride)), getInputFontVariants(typographyOverride)), getTitleFontVariants(typographyOverride))
  });
};

// Example with theme: ${({ theme }) => css``;

var CommonStyles = /*#__PURE__*/createGlobalStyle(["@keyframes spinner{0%{transform:rotate(0deg);}100%{transform:rotate(360deg);}}.Menu-open{overflow:hidden;}.Modal-open{overflow:hidden;}"]);
var CommonStyles$1 = CommonStyles;

var _accent, _background, _borders, _states, _uploader, _extra;
function ownKeys$d(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$d(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$d(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$d(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
//TODO: update theme to include grouped palette
//TODO:change color values from rgb to hex
var groupedPalette = {
  text: _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Color.TextPrimary, 'rgba(55, 65, 75, 1)'), Color.TextSecondary, 'rgba(118, 138, 159, 1)'), Color.TextSecondaryInvert, 'rgba(213, 216, 220, 1)'), Color.TextPlaceholder, 'rgba(169, 182, 194, 1)'), Color.TextWarning, 'rgba(196, 110, 0, 1)'), Color.TextError, 'rgba(185, 33, 46, 1)'), Color.TextInfo, 'rgba(35, 117, 171, 1)'),
  accent: (_accent = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_accent, Color.AccentPrimary, 'rgba(104, 121, 235, 1)'), Color.AccentPrimaryHover, 'rgba(96, 111, 209, 1)'), Color.AccentPrimaryActive, 'rgba(73, 88, 188, 1)'), Color.AccentPrimaryDisabled, 'rgba(233, 238, 242, 1)'), Color.AccentSecondaryDisabled, '#F9FBFC'), Color.AccentStateless, 'rgba(104, 121, 235, 1)'), Color.AccentStateless_0_4_Opacity, 'rgba(104, 121, 235, 0.4)'), Color.Accent_0_5_5_Opacity, 'rgba(96, 111, 209, 0.55)'), Color.Accent_0_7_Opacity, 'rgba(96, 111, 209, 0.7)'), Color.Accent_0_5_Opacity, 'rgba(104, 121, 235, 0.05)'), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_accent, Color.Accent_1_2_Opacity, 'rgba(104, 121, 235, 0.12)'), Color.Accent_1_8_Opacity, 'rgba(104, 121, 235, 0.18)'), Color.Accent_2_8_Opacity, 'rgba(104, 121, 235, 0.28)'), Color.Accent_4_0_Opacity, 'rgba(104, 121, 235, 0.4)')),
  background: (_background = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_background, Color.BackgroundGrey, 'rgba(216, 224, 232, 1)'), Color.BackgroundStateless, 'rgba(255, 255, 255, 1)'), Color.BackgroundActive, 'rgba(243, 247, 250, 1)'), Color.BackgroundBaseLight, 'rgba(235, 239, 252, 1)'), Color.BackgroundBaseMedium, 'rgba(227, 231, 251, 1)'), Color.BackgroundPrimary, 'rgba(243, 245, 247, 1)'), Color.BackgroundPrimaryLight, 'rgba(243, 245, 247, 1)'), Color.BackgroundPrimaryHover, 'rgba(239, 243, 246, 1)'), Color.BackgroundPrimaryActive, 'rgba(93, 109, 126, 1)'), Color.BackgroundPrimary_0_5_Opacity, 'rgba(255, 255, 255, 0.500)'), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_background, Color.BackgroundPrimaryStateless, '#CCD6DE'), Color.BackgroundSecondary, 'rgba(255, 255, 255, 1)'), Color.BackgroundHover, 'rgba(249, 251, 252, 1)'), Color.BackgroundGreen, 'rgba(237, 250, 244, 1)'), Color.BackgroundGreenMedium, 'rgba(227, 250, 239, 1)'), Color.BackgroundBlue, 'rgba(244, 249, 255, 1)'), Color.BackgroundRed, 'rgba(253, 244, 242, 1)'), Color.BackgroundRedLight, 'rgba(255, 245, 245, 1)'), Color.BackgroundRedMedium, 'rgba(247, 228, 230, 1)'), Color.BackgroundOrange, 'rgba(255, 249, 242, 1)'), _defineProperty(_background, Color.BackgroundTooltip, 'rgba(79, 98, 118, 1)')),
  icons: _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Color.IconsPrimary, 'rgba(118, 138, 159, 1)'), Color.IconsPrimaryOpacity_0_6, 'rgba(93, 109, 126, 0.600)'), Color.IconsSecondary, 'rgba(151, 166, 182, 1)'), Color.IconsPlaceholder, 'rgba(223, 231, 237, 1)'), Color.IconsInvert, 'rgba(255, 255, 255, 1)'), Color.IconsMuted, 'rgba(169, 182, 194, 1)'), Color.IconsPrimaryHover, 'rgba(79, 98, 118, 1)'), Color.IconsSecondaryHover, 'rgba(118, 138, 159, 1)'),
  button: _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Color.ButtonPrimaryText, 'rgba(255, 255, 255, 1)'), Color.ButtonPrimaryText_0_6, 'rgba(255, 255, 255, 0.6)'), Color.ButtonPrimaryText_0_4, 'rgba(255, 255, 255, 0.4)'), Color.ButtonDisabledText, 'rgba(169, 182, 194, 1)'), Color.ButtonSecondaryText, 'rgba(0, 0, 0, 1)'),
  link: _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Color.LinkPrimary, 'rgba(118, 138, 159, 1)'), Color.LinkStateless, 'rgba(118, 138, 159, 1)'), Color.LinkHover, 'rgba(79, 98, 118, 1)'), Color.LinkActive, 'rgba(55, 65, 75, 1)'), Color.LinkPressed, 'rgba(104, 121, 235, 1)'), Color.LinkMuted, 'rgba(169, 182, 194, 1)'),
  borders: (_borders = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_borders, Color.BordersPrimary, 'rgba(204, 214, 222, 1)'), Color.BordersPrimaryHover, 'rgba(104, 118, 134, 1)'), Color.BordersSecondary, 'rgba(236, 240, 243, 1)'), Color.BordersStrong, 'rgba(204, 214, 222, 1)'), Color.BordersInvert, 'rgba(85, 99, 115, 1)'), Color.BorderHoverBottom, 'rgba(104, 121, 235, 0.18)'), Color.BorderActiveBottom, '#4958BC'), Color.BorderPrimaryStateless, 'rgba(204, 214, 222, 1)'), Color.BordersDisabled, 'rgba(73, 88, 188, 0.4)'), Color.BordersButton, 'rgba(151, 166, 182, 1)'), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_borders, Color.BordersItem, 'rgba(226, 232, 236, 1)'), Color.BordersBaseLight, 'rgba(211, 219, 250, 1)'), Color.BordersBaseMedium, 'rgba(164, 175, 227, 1)'), Color.BordersGreen, 'rgba(27, 161, 99, 0.22)'), Color.BordersGreenMedium, 'rgba(27, 161, 99, 0.4)'), Color.BordersRed, 'rgba(185, 33, 46, 0.4)')),
  states: (_states = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_states, Color.Error, 'rgba(246, 61, 61, 1)'), Color.Error_0_28_Opacity, 'rgba(185, 33, 46, 0.28)'), Color.Error_0_12_Opacity, 'rgba(255, 86, 78, 0.1)'), Color.ErrorHover, 'rgba(216, 46, 46, 1)'), Color.ErrorActive, 'rgba(185, 33, 46, 1)'), Color.Success, 'rgba(38, 193, 122, 1)'), Color.SuccessHover, 'rgba(30, 154, 98, 1)'), Color.SuccessActive, 'rgba(23, 116, 73, 1)'), Color.Warning, 'rgba(255, 172, 74, 1)'), Color.WarningHover, 'rgba(237, 145, 7, 1)'), _defineProperty(_defineProperty(_defineProperty(_states, Color.WarningActive, 'rgba(224, 135, 0, 1)'), Color.Info, 'rgba(41, 127, 184, 1)'), Color.Modified, 'rgba(165, 166, 246, 1)')),
  flat: _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Color.Red, 'rgba(219, 46, 50, 1)'), Color.Orange, 'rgba(255, 168, 0, 1)'), Color.Salad, 'rgba(143, 176, 33, 1)'), Color.Green, 'rgba(22, 160, 134, 1)'), Color.Blue, 'rgba(41, 127, 184, 1)'), Color.Indigo, 'rgba(91, 72, 162, 1)'), Color.Violet, 'rgba(141, 68, 173, 1)'), Color.Pink, 'rgba(211, 92, 158, 1)'),
  uploader: (_uploader = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_uploader, Color.Link, 'rgba(250, 166, 68, 1)'), Color.Camera, 'rgba(73, 186, 224, 1)'), Color.GoogleDrive, 'rgba(81, 136, 238, 1)'), Color.Dropbox, 'rgba(17, 40, 124, 1)'), Color.OneDrive, 'rgba(40, 100, 186, 1)'), Color.Device, 'rgba(102, 73, 209, 1)'), Color.Instagram, 'rgba(244, 70, 154, 1)'), Color.Unsplash, 'rgba(173, 38, 220, 1)'), Color.FreeImages, 'rgba(16, 163, 135, 1)'), Color.FreeIcons, 'rgba(62, 207, 139, 1)'), _defineProperty(_defineProperty(_defineProperty(_uploader, Color.Canvas, 'rgba(36, 190, 202, 1)'), Color.Box, 'rgba(0, 97, 213, 1)'), Color.ScreenCast, 'rgba(48, 61, 78, 1)')),
  extra: (_extra = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_extra, Color.GradientRight, 'linear-gradient(270deg, #FFFFFF 1.56%, rgba(255, 255, 255, 0.89) 52.4%, rgba(255, 255, 255, 0.532165) 76.04%, rgba(255, 255, 255, 0) 100%)'), Color.Extra_0_3_Overlay, 'rgba(79, 98, 118, 0.3)'), Color.GradientRightActive, 'linear-gradient(270deg, #F3F7FA 1.56%, #F3F7FA 52.4%, rgba(243, 247, 250, 0.53) 76.04%, rgba(243, 247, 250, 0) 100%)'), Color.GradientRightHover, 'linear-gradient(270deg, #F9FBFC 1.56%, #F9FBFC 52.4%, rgba(249, 251, 252, 0.53) 76.04%, rgba(249, 251, 252, 0) 100%)'), Color.Extra_0_5_Overlay, 'rgba(79, 98, 118, 0.5)'), Color.Extra_0_7_Overlay, 'rgba(79, 98, 118, 0.7)'), Color.Extra_0_9_Overlay, 'rgba(79, 98, 118, 0.9)'), Color.Red_0_1_Overlay, 'rgba(232, 91, 70, 0.1)'), Color.Orange_0_1_Overlay, 'rgba(250, 157, 47, 0.1)'), Color.Accent_0_8_Overlay, 'rgba(104, 121, 235, 0.08)'), _defineProperty(_extra, Color.Green_0_2_Overlay, 'rgba(27, 161, 99, 0.2)'))
};
var lightPalette = _objectSpread$d(_objectSpread$d(_objectSpread$d(_objectSpread$d(_objectSpread$d(_objectSpread$d(_objectSpread$d(_objectSpread$d(_objectSpread$d(_objectSpread$d(_objectSpread$d(_objectSpread$d({}, groupedPalette.text), groupedPalette.accent), groupedPalette.background), groupedPalette.icons), groupedPalette.button), groupedPalette.link), groupedPalette.borders), groupedPalette.states), groupedPalette.flat), groupedPalette.uploader), groupedPalette.extra), {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Color.ActiveSecondary, '#FFFFFF'), Color.ActiveSecondaryHover, 'rgba(104, 121, 235, 0.05)'), Color.Tag, '#889AAC'), Color.StatesErrorDisabledText, 'rgba(185, 33, 46, 0.3)'), Color.LightShadow, 'rgba(146, 166, 188, 0.2)'), Color.MediumShadow, 'rgba(146, 166, 188, 0.24)'), Color.LargeShadow, 'rgba(146, 166, 188, 0.32)'), Color.XLargeShadow, 'rgba(146, 166, 188, 0.5)'));
var defaultPalette = lightPalette;

var Shadows = {
  ShadowSm: 'shadow-sm',
  ShadowMd: 'shadow-md',
  ShadowLg: 'shadow-lg',
  ShadowXl: 'shadow-xl',
  Label: 'label',
  Header: 'header',
  HeaderPopup: 'header-popup',
  FooterPopup: 'footer-popup',
  LeftPanelMd: 'left-panel-md',
  RightPanelMd: 'right-panel-md',
  LeftPanelSm: 'left-panel-sm',
  RightPanelSm: 'right-panel-sm'
};

var _shadows;
var shadows = (_shadows = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_shadows, Shadows.ShadowSm, '0px 1px 2px 0px rgba(146, 166, 188, 0.2)'), Shadows.ShadowMd, ' 0px 1px 4px 0px rgba(146, 166, 188, 0.24)'), Shadows.ShadowLg, ' 0px 2px 6px 0px rgba(146, 166, 188, 0.32)'), Shadows.ShadowXl, ' 0px 2px 6px 0px rgba(146, 166, 188, 0.5)'), Shadows.Label, ' 0px 1px 3px 0px rgba(77, 78, 78, 0.15)'), Shadows.Header, ' 0px 6px 10px 0px rgba(146, 166, 188, 0.2)'), Shadows.HeaderPopup, ' 0px 3px 7px 0px rgba(146, 166, 188, 0.16)'), Shadows.FooterPopup, ' 0px -4px 8px 0px rgba(208, 215, 220, 0.22)'), Shadows.LeftPanelMd, ' 6px 8px 12px 0px rgba(146, 166, 188, 0.14)'), Shadows.RightPanelMd, '-6px 8px 12px 0px rgba(146, 166, 188, 0.14)'), _defineProperty(_defineProperty(_shadows, Shadows.LeftPanelSm, '6px -4px 12px 0px rgba(146, 166, 188, 0.14)'), Shadows.RightPanelSm, '-6px -4px 12px 0px rgba(146, 166, 188, 0.14)'));
var defaultShadows = shadows;

var Breakpoint = {
  Xs: 'xs',
  Sm: 'sm',
  Md: 'md',
  Lg: 'lg',
  Xl: 'xl',
  Xxl: 'xxl',
  Xxxl: 'xxxl'
};

var defaultBreakpoints = {
  keys: [Breakpoint.Xs, Breakpoint.Sm, Breakpoint.Md, Breakpoint.Lg, Breakpoint.Xl],
  values: _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Breakpoint.Xs, 0), Breakpoint.Sm, 576), Breakpoint.Md, 768), Breakpoint.Lg, 1084), Breakpoint.Xl, 1342), Breakpoint.Xxl, 1600), Breakpoint.Xxxl, 1920),
  classes: _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Breakpoint.Xs, '.sfx-breakpoint-xs'), Breakpoint.Sm, '.sfx-breakpoint-sm'), Breakpoint.Md, '.sfx-breakpoint-md'), Breakpoint.Lg, '.sfx-breakpoint-lg'), Breakpoint.Xl, '.sfx-breakpoint-xl'), Breakpoint.Xxl, '.sfx-breakpoint-xxl'), Breakpoint.Xxxl, '.sfx-breakpoint-xxxl'),
  getBreakpointClass: function getBreakpointClass() {
    return '';
  },
  up: function up() {
    return '';
  },
  down: function down() {
    return '';
  },
  between: function between() {
    return '';
  },
  only: function only() {
    return '';
  }
};

var createBreakpoints = function createBreakpoints(breakpoints) {
  var _breakpoints$values = breakpoints.values,
    values = _breakpoints$values === void 0 ? defaultBreakpoints.values : _breakpoints$values,
    _breakpoints$classes = breakpoints.classes,
    classes = _breakpoints$classes === void 0 ? defaultBreakpoints.classes : _breakpoints$classes;
  var unit = 'px';
  var keys = Object.keys(values);
  var up = function up(key) {
    var value = typeof values[key] === 'number' ? values[key] : key;
    return "@media (min-width:".concat(value).concat(unit, ")");
  };
  var down = function down(key) {
    var value = values[key];
    return "@media (max-width:".concat(value).concat(unit, ")");
  };
  var between = function between(start, end) {
    var endIndex = keys.indexOf(end);
    return "@media (min-width:".concat(values[start]).concat(unit, ") and (max-width:").concat(values[keys[endIndex]]).concat(unit, ")");
  };
  var only = function only(key) {
    if (keys.indexOf(key) + 1 < keys.length) {
      return between(key, keys[keys.indexOf(key) + 1]);
    }
    return up(key);
  };
  var getBreakpointClass = function getBreakpointClass(width, hideSelector) {
    var removeSelector = function removeSelector(str) {
      return str.slice(1);
    };
    if (width >= values.xs && width < values.sm) {
      return hideSelector ? removeSelector(classes.xs) : classes.xs;
    }
    if (width >= values.sm && width < values.md) {
      return hideSelector ? removeSelector(classes.sm) : classes.sm;
    }
    if (width >= values.md && width < values.lg) {
      return hideSelector ? removeSelector(classes.md) : classes.md;
    }
    if (width >= values.lg && width < values.xl) {
      return hideSelector ? removeSelector(classes.lg) : classes.lg;
    }
    if (width >= values.xl && width < values.xxl) {
      return hideSelector ? removeSelector(classes.xl) : classes.xl;
    }
    if (width >= values.xxl && width < values.xxxl) {
      return hideSelector ? removeSelector(classes.xxl) : classes.xxl;
    }
    if (width >= values.xxxl) {
      return hideSelector ? removeSelector(classes.xxxl) : classes.xxxl;
    }
    return hideSelector ? removeSelector(classes.md) : classes.md;
  };
  return {
    keys: keys,
    values: values,
    classes: classes,
    getBreakpointClass: getBreakpointClass,
    up: up,
    down: down,
    between: between,
    only: only
  };
};
var createBreakpoints$1 = createBreakpoints;

function ownKeys$c(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$c(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$c(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$c(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var defaultShape = {
  borderRadius: _defineProperty(_defineProperty(_defineProperty({}, BorderRadiusSize.Sm, '2px'), BorderRadiusSize.Md, '4px'), BorderRadiusSize.Lg, '8px')
};
var ThemeProvider = function ThemeProvider(_ref) {
  var children = _ref.children,
    _ref$theme = _ref.theme,
    theme = _ref$theme === void 0 ? {} : _ref$theme;
  var _theme$palette = theme.palette,
    paletteOverride = _theme$palette === void 0 ? {} : _theme$palette,
    _theme$breakpoints = theme.breakpoints,
    breakpointsOverride = _theme$breakpoints === void 0 ? {} : _theme$breakpoints,
    _theme$typography = theme.typography,
    typographyOverride = _theme$typography === void 0 ? {} : _theme$typography,
    _theme$shape = theme.shape,
    shapeOverride = _theme$shape === void 0 ? {} : _theme$shape,
    _theme$shadows = theme.shadows,
    shadowsOverride = _theme$shadows === void 0 ? {} : _theme$shadows;
  var finalTheme = useMemo(function () {
    var palette = _objectSpread$c(_objectSpread$c({}, defaultPalette), paletteOverride);
    var breakpoints = createBreakpoints$1(breakpointsOverride);
    var shadows = _objectSpread$c(_objectSpread$c({}, defaultShadows), shadowsOverride);
    return {
      palette: palette,
      breakpoints: breakpoints,
      typography: getDefaultTypography(typographyOverride),
      shape: _objectSpread$c({}, merge(_objectSpread$c({}, defaultShape), _objectSpread$c({}, shapeOverride))),
      shadows: shadows
    };
  }, [JSON.stringify(theme)]);
  return /*#__PURE__*/React__default.createElement(ThemeProvider$2, {
    theme: finalTheme
  }, /*#__PURE__*/React__default.createElement(React__default.Fragment, null, applyPolymorphicFunctionProp(children, finalTheme), /*#__PURE__*/React__default.createElement(CommonStyles$1, null), /*#__PURE__*/React__default.createElement(Typography$1, null)));
};
var ThemeProvider$1 = ThemeProvider;

function _extends$1() {
  return _extends$1 = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends$1.apply(null, arguments);
}

var indexNode$1 = {exports: {}};

var _FullInternals = {};

var _CoreInternals = {};

var Global = {};

var hasRequiredGlobal;

function requireGlobal () {
	if (hasRequiredGlobal) return Global;
	hasRequiredGlobal = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports._registerNode = exports.Konva = exports.glob = void 0;
		const PI_OVER_180 = Math.PI / 180;
		function detectBrowser() {
		    return (typeof window !== 'undefined' &&
		        ({}.toString.call(window) === '[object Window]' ||
		            {}.toString.call(window) === '[object global]'));
		}
		exports.glob = typeof commonjsGlobal !== 'undefined'
		    ? commonjsGlobal
		    : typeof window !== 'undefined'
		        ? window
		        : typeof WorkerGlobalScope !== 'undefined'
		            ? self
		            : {};
		exports.Konva = {
		    _global: exports.glob,
		    version: '9.3.6',
		    isBrowser: detectBrowser(),
		    isUnminified: /param/.test(function (param) { }.toString()),
		    dblClickWindow: 400,
		    getAngle(angle) {
		        return exports.Konva.angleDeg ? angle * PI_OVER_180 : angle;
		    },
		    enableTrace: false,
		    pointerEventsEnabled: true,
		    autoDrawEnabled: true,
		    hitOnDragEnabled: false,
		    capturePointerEventsEnabled: false,
		    _mouseListenClick: false,
		    _touchListenClick: false,
		    _pointerListenClick: false,
		    _mouseInDblClickWindow: false,
		    _touchInDblClickWindow: false,
		    _pointerInDblClickWindow: false,
		    _mouseDblClickPointerId: null,
		    _touchDblClickPointerId: null,
		    _pointerDblClickPointerId: null,
		    pixelRatio: (typeof window !== 'undefined' && window.devicePixelRatio) || 1,
		    dragDistance: 3,
		    angleDeg: true,
		    showWarnings: true,
		    dragButtons: [0, 1],
		    isDragging() {
		        return exports.Konva['DD'].isDragging;
		    },
		    isTransforming() {
		        var _a;
		        return (_a = exports.Konva['Transformer']) === null || _a === void 0 ? void 0 : _a.isTransforming();
		    },
		    isDragReady() {
		        return !!exports.Konva['DD'].node;
		    },
		    releaseCanvasOnDestroy: true,
		    document: exports.glob.document,
		    _injectGlobal(Konva) {
		        exports.glob.Konva = Konva;
		    },
		};
		const _registerNode = (NodeClass) => {
		    exports.Konva[NodeClass.prototype.getClassName()] = NodeClass;
		};
		exports._registerNode = _registerNode;
		exports.Konva._injectGlobal(exports.Konva); 
	} (Global));
	return Global;
}

var Util = {};

var hasRequiredUtil;

function requireUtil () {
	if (hasRequiredUtil) return Util;
	hasRequiredUtil = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Util = exports.Transform = void 0;
		const Global_1 = requireGlobal();
		class Transform {
		    constructor(m = [1, 0, 0, 1, 0, 0]) {
		        this.dirty = false;
		        this.m = (m && m.slice()) || [1, 0, 0, 1, 0, 0];
		    }
		    reset() {
		        this.m[0] = 1;
		        this.m[1] = 0;
		        this.m[2] = 0;
		        this.m[3] = 1;
		        this.m[4] = 0;
		        this.m[5] = 0;
		    }
		    copy() {
		        return new Transform(this.m);
		    }
		    copyInto(tr) {
		        tr.m[0] = this.m[0];
		        tr.m[1] = this.m[1];
		        tr.m[2] = this.m[2];
		        tr.m[3] = this.m[3];
		        tr.m[4] = this.m[4];
		        tr.m[5] = this.m[5];
		    }
		    point(point) {
		        var m = this.m;
		        return {
		            x: m[0] * point.x + m[2] * point.y + m[4],
		            y: m[1] * point.x + m[3] * point.y + m[5],
		        };
		    }
		    translate(x, y) {
		        this.m[4] += this.m[0] * x + this.m[2] * y;
		        this.m[5] += this.m[1] * x + this.m[3] * y;
		        return this;
		    }
		    scale(sx, sy) {
		        this.m[0] *= sx;
		        this.m[1] *= sx;
		        this.m[2] *= sy;
		        this.m[3] *= sy;
		        return this;
		    }
		    rotate(rad) {
		        var c = Math.cos(rad);
		        var s = Math.sin(rad);
		        var m11 = this.m[0] * c + this.m[2] * s;
		        var m12 = this.m[1] * c + this.m[3] * s;
		        var m21 = this.m[0] * -s + this.m[2] * c;
		        var m22 = this.m[1] * -s + this.m[3] * c;
		        this.m[0] = m11;
		        this.m[1] = m12;
		        this.m[2] = m21;
		        this.m[3] = m22;
		        return this;
		    }
		    getTranslation() {
		        return {
		            x: this.m[4],
		            y: this.m[5],
		        };
		    }
		    skew(sx, sy) {
		        var m11 = this.m[0] + this.m[2] * sy;
		        var m12 = this.m[1] + this.m[3] * sy;
		        var m21 = this.m[2] + this.m[0] * sx;
		        var m22 = this.m[3] + this.m[1] * sx;
		        this.m[0] = m11;
		        this.m[1] = m12;
		        this.m[2] = m21;
		        this.m[3] = m22;
		        return this;
		    }
		    multiply(matrix) {
		        var m11 = this.m[0] * matrix.m[0] + this.m[2] * matrix.m[1];
		        var m12 = this.m[1] * matrix.m[0] + this.m[3] * matrix.m[1];
		        var m21 = this.m[0] * matrix.m[2] + this.m[2] * matrix.m[3];
		        var m22 = this.m[1] * matrix.m[2] + this.m[3] * matrix.m[3];
		        var dx = this.m[0] * matrix.m[4] + this.m[2] * matrix.m[5] + this.m[4];
		        var dy = this.m[1] * matrix.m[4] + this.m[3] * matrix.m[5] + this.m[5];
		        this.m[0] = m11;
		        this.m[1] = m12;
		        this.m[2] = m21;
		        this.m[3] = m22;
		        this.m[4] = dx;
		        this.m[5] = dy;
		        return this;
		    }
		    invert() {
		        var d = 1 / (this.m[0] * this.m[3] - this.m[1] * this.m[2]);
		        var m0 = this.m[3] * d;
		        var m1 = -this.m[1] * d;
		        var m2 = -this.m[2] * d;
		        var m3 = this.m[0] * d;
		        var m4 = d * (this.m[2] * this.m[5] - this.m[3] * this.m[4]);
		        var m5 = d * (this.m[1] * this.m[4] - this.m[0] * this.m[5]);
		        this.m[0] = m0;
		        this.m[1] = m1;
		        this.m[2] = m2;
		        this.m[3] = m3;
		        this.m[4] = m4;
		        this.m[5] = m5;
		        return this;
		    }
		    getMatrix() {
		        return this.m;
		    }
		    decompose() {
		        var a = this.m[0];
		        var b = this.m[1];
		        var c = this.m[2];
		        var d = this.m[3];
		        var e = this.m[4];
		        var f = this.m[5];
		        var delta = a * d - b * c;
		        let result = {
		            x: e,
		            y: f,
		            rotation: 0,
		            scaleX: 0,
		            scaleY: 0,
		            skewX: 0,
		            skewY: 0,
		        };
		        if (a != 0 || b != 0) {
		            var r = Math.sqrt(a * a + b * b);
		            result.rotation = b > 0 ? Math.acos(a / r) : -Math.acos(a / r);
		            result.scaleX = r;
		            result.scaleY = delta / r;
		            result.skewX = (a * c + b * d) / delta;
		            result.skewY = 0;
		        }
		        else if (c != 0 || d != 0) {
		            var s = Math.sqrt(c * c + d * d);
		            result.rotation =
		                Math.PI / 2 - (d > 0 ? Math.acos(-c / s) : -Math.acos(c / s));
		            result.scaleX = delta / s;
		            result.scaleY = s;
		            result.skewX = 0;
		            result.skewY = (a * c + b * d) / delta;
		        }
		        else ;
		        result.rotation = exports.Util._getRotation(result.rotation);
		        return result;
		    }
		}
		exports.Transform = Transform;
		var OBJECT_ARRAY = '[object Array]', OBJECT_NUMBER = '[object Number]', OBJECT_STRING = '[object String]', OBJECT_BOOLEAN = '[object Boolean]', PI_OVER_DEG180 = Math.PI / 180, DEG180_OVER_PI = 180 / Math.PI, HASH = '#', EMPTY_STRING = '', ZERO = '0', KONVA_WARNING = 'Konva warning: ', KONVA_ERROR = 'Konva error: ', RGB_PAREN = 'rgb(', COLORS = {
		    aliceblue: [240, 248, 255],
		    antiquewhite: [250, 235, 215],
		    aqua: [0, 255, 255],
		    aquamarine: [127, 255, 212],
		    azure: [240, 255, 255],
		    beige: [245, 245, 220],
		    bisque: [255, 228, 196],
		    black: [0, 0, 0],
		    blanchedalmond: [255, 235, 205],
		    blue: [0, 0, 255],
		    blueviolet: [138, 43, 226],
		    brown: [165, 42, 42],
		    burlywood: [222, 184, 135],
		    cadetblue: [95, 158, 160],
		    chartreuse: [127, 255, 0],
		    chocolate: [210, 105, 30],
		    coral: [255, 127, 80],
		    cornflowerblue: [100, 149, 237],
		    cornsilk: [255, 248, 220],
		    crimson: [220, 20, 60],
		    cyan: [0, 255, 255],
		    darkblue: [0, 0, 139],
		    darkcyan: [0, 139, 139],
		    darkgoldenrod: [184, 132, 11],
		    darkgray: [169, 169, 169],
		    darkgreen: [0, 100, 0],
		    darkgrey: [169, 169, 169],
		    darkkhaki: [189, 183, 107],
		    darkmagenta: [139, 0, 139],
		    darkolivegreen: [85, 107, 47],
		    darkorange: [255, 140, 0],
		    darkorchid: [153, 50, 204],
		    darkred: [139, 0, 0],
		    darksalmon: [233, 150, 122],
		    darkseagreen: [143, 188, 143],
		    darkslateblue: [72, 61, 139],
		    darkslategray: [47, 79, 79],
		    darkslategrey: [47, 79, 79],
		    darkturquoise: [0, 206, 209],
		    darkviolet: [148, 0, 211],
		    deeppink: [255, 20, 147],
		    deepskyblue: [0, 191, 255],
		    dimgray: [105, 105, 105],
		    dimgrey: [105, 105, 105],
		    dodgerblue: [30, 144, 255],
		    firebrick: [178, 34, 34],
		    floralwhite: [255, 255, 240],
		    forestgreen: [34, 139, 34],
		    fuchsia: [255, 0, 255],
		    gainsboro: [220, 220, 220],
		    ghostwhite: [248, 248, 255],
		    gold: [255, 215, 0],
		    goldenrod: [218, 165, 32],
		    gray: [128, 128, 128],
		    green: [0, 128, 0],
		    greenyellow: [173, 255, 47],
		    grey: [128, 128, 128],
		    honeydew: [240, 255, 240],
		    hotpink: [255, 105, 180],
		    indianred: [205, 92, 92],
		    indigo: [75, 0, 130],
		    ivory: [255, 255, 240],
		    khaki: [240, 230, 140],
		    lavender: [230, 230, 250],
		    lavenderblush: [255, 240, 245],
		    lawngreen: [124, 252, 0],
		    lemonchiffon: [255, 250, 205],
		    lightblue: [173, 216, 230],
		    lightcoral: [240, 128, 128],
		    lightcyan: [224, 255, 255],
		    lightgoldenrodyellow: [250, 250, 210],
		    lightgray: [211, 211, 211],
		    lightgreen: [144, 238, 144],
		    lightgrey: [211, 211, 211],
		    lightpink: [255, 182, 193],
		    lightsalmon: [255, 160, 122],
		    lightseagreen: [32, 178, 170],
		    lightskyblue: [135, 206, 250],
		    lightslategray: [119, 136, 153],
		    lightslategrey: [119, 136, 153],
		    lightsteelblue: [176, 196, 222],
		    lightyellow: [255, 255, 224],
		    lime: [0, 255, 0],
		    limegreen: [50, 205, 50],
		    linen: [250, 240, 230],
		    magenta: [255, 0, 255],
		    maroon: [128, 0, 0],
		    mediumaquamarine: [102, 205, 170],
		    mediumblue: [0, 0, 205],
		    mediumorchid: [186, 85, 211],
		    mediumpurple: [147, 112, 219],
		    mediumseagreen: [60, 179, 113],
		    mediumslateblue: [123, 104, 238],
		    mediumspringgreen: [0, 250, 154],
		    mediumturquoise: [72, 209, 204],
		    mediumvioletred: [199, 21, 133],
		    midnightblue: [25, 25, 112],
		    mintcream: [245, 255, 250],
		    mistyrose: [255, 228, 225],
		    moccasin: [255, 228, 181],
		    navajowhite: [255, 222, 173],
		    navy: [0, 0, 128],
		    oldlace: [253, 245, 230],
		    olive: [128, 128, 0],
		    olivedrab: [107, 142, 35],
		    orange: [255, 165, 0],
		    orangered: [255, 69, 0],
		    orchid: [218, 112, 214],
		    palegoldenrod: [238, 232, 170],
		    palegreen: [152, 251, 152],
		    paleturquoise: [175, 238, 238],
		    palevioletred: [219, 112, 147],
		    papayawhip: [255, 239, 213],
		    peachpuff: [255, 218, 185],
		    peru: [205, 133, 63],
		    pink: [255, 192, 203],
		    plum: [221, 160, 203],
		    powderblue: [176, 224, 230],
		    purple: [128, 0, 128],
		    rebeccapurple: [102, 51, 153],
		    red: [255, 0, 0],
		    rosybrown: [188, 143, 143],
		    royalblue: [65, 105, 225],
		    saddlebrown: [139, 69, 19],
		    salmon: [250, 128, 114],
		    sandybrown: [244, 164, 96],
		    seagreen: [46, 139, 87],
		    seashell: [255, 245, 238],
		    sienna: [160, 82, 45],
		    silver: [192, 192, 192],
		    skyblue: [135, 206, 235],
		    slateblue: [106, 90, 205],
		    slategray: [119, 128, 144],
		    slategrey: [119, 128, 144],
		    snow: [255, 255, 250],
		    springgreen: [0, 255, 127],
		    steelblue: [70, 130, 180],
		    tan: [210, 180, 140],
		    teal: [0, 128, 128],
		    thistle: [216, 191, 216],
		    transparent: [255, 255, 255, 0],
		    tomato: [255, 99, 71],
		    turquoise: [64, 224, 208],
		    violet: [238, 130, 238],
		    wheat: [245, 222, 179],
		    white: [255, 255, 255],
		    whitesmoke: [245, 245, 245],
		    yellow: [255, 255, 0],
		    yellowgreen: [154, 205, 5],
		}, RGB_REGEX = /rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/, animQueue = [];
		const req = (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame) ||
		    function (f) {
		        setTimeout(f, 60);
		    };
		exports.Util = {
		    _isElement(obj) {
		        return !!(obj && obj.nodeType == 1);
		    },
		    _isFunction(obj) {
		        return !!(obj && obj.constructor && obj.call && obj.apply);
		    },
		    _isPlainObject(obj) {
		        return !!obj && obj.constructor === Object;
		    },
		    _isArray(obj) {
		        return Object.prototype.toString.call(obj) === OBJECT_ARRAY;
		    },
		    _isNumber(obj) {
		        return (Object.prototype.toString.call(obj) === OBJECT_NUMBER &&
		            !isNaN(obj) &&
		            isFinite(obj));
		    },
		    _isString(obj) {
		        return Object.prototype.toString.call(obj) === OBJECT_STRING;
		    },
		    _isBoolean(obj) {
		        return Object.prototype.toString.call(obj) === OBJECT_BOOLEAN;
		    },
		    isObject(val) {
		        return val instanceof Object;
		    },
		    isValidSelector(selector) {
		        if (typeof selector !== 'string') {
		            return false;
		        }
		        var firstChar = selector[0];
		        return (firstChar === '#' ||
		            firstChar === '.' ||
		            firstChar === firstChar.toUpperCase());
		    },
		    _sign(number) {
		        if (number === 0) {
		            return 1;
		        }
		        if (number > 0) {
		            return 1;
		        }
		        else {
		            return -1;
		        }
		    },
		    requestAnimFrame(callback) {
		        animQueue.push(callback);
		        if (animQueue.length === 1) {
		            req(function () {
		                const queue = animQueue;
		                animQueue = [];
		                queue.forEach(function (cb) {
		                    cb();
		                });
		            });
		        }
		    },
		    createCanvasElement() {
		        var canvas = document.createElement('canvas');
		        try {
		            canvas.style = canvas.style || {};
		        }
		        catch (e) { }
		        return canvas;
		    },
		    createImageElement() {
		        return document.createElement('img');
		    },
		    _isInDocument(el) {
		        while ((el = el.parentNode)) {
		            if (el == document) {
		                return true;
		            }
		        }
		        return false;
		    },
		    _urlToImage(url, callback) {
		        var imageObj = exports.Util.createImageElement();
		        imageObj.onload = function () {
		            callback(imageObj);
		        };
		        imageObj.src = url;
		    },
		    _rgbToHex(r, g, b) {
		        return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
		    },
		    _hexToRgb(hex) {
		        hex = hex.replace(HASH, EMPTY_STRING);
		        var bigint = parseInt(hex, 16);
		        return {
		            r: (bigint >> 16) & 255,
		            g: (bigint >> 8) & 255,
		            b: bigint & 255,
		        };
		    },
		    getRandomColor() {
		        var randColor = ((Math.random() * 0xffffff) << 0).toString(16);
		        while (randColor.length < 6) {
		            randColor = ZERO + randColor;
		        }
		        return HASH + randColor;
		    },
		    getRGB(color) {
		        var rgb;
		        if (color in COLORS) {
		            rgb = COLORS[color];
		            return {
		                r: rgb[0],
		                g: rgb[1],
		                b: rgb[2],
		            };
		        }
		        else if (color[0] === HASH) {
		            return this._hexToRgb(color.substring(1));
		        }
		        else if (color.substr(0, 4) === RGB_PAREN) {
		            rgb = RGB_REGEX.exec(color.replace(/ /g, ''));
		            return {
		                r: parseInt(rgb[1], 10),
		                g: parseInt(rgb[2], 10),
		                b: parseInt(rgb[3], 10),
		            };
		        }
		        else {
		            return {
		                r: 0,
		                g: 0,
		                b: 0,
		            };
		        }
		    },
		    colorToRGBA(str) {
		        str = str || 'black';
		        return (exports.Util._namedColorToRBA(str) ||
		            exports.Util._hex3ColorToRGBA(str) ||
		            exports.Util._hex4ColorToRGBA(str) ||
		            exports.Util._hex6ColorToRGBA(str) ||
		            exports.Util._hex8ColorToRGBA(str) ||
		            exports.Util._rgbColorToRGBA(str) ||
		            exports.Util._rgbaColorToRGBA(str) ||
		            exports.Util._hslColorToRGBA(str));
		    },
		    _namedColorToRBA(str) {
		        var c = COLORS[str.toLowerCase()];
		        if (!c) {
		            return null;
		        }
		        return {
		            r: c[0],
		            g: c[1],
		            b: c[2],
		            a: 1,
		        };
		    },
		    _rgbColorToRGBA(str) {
		        if (str.indexOf('rgb(') === 0) {
		            str = str.match(/rgb\(([^)]+)\)/)[1];
		            var parts = str.split(/ *, */).map(Number);
		            return {
		                r: parts[0],
		                g: parts[1],
		                b: parts[2],
		                a: 1,
		            };
		        }
		    },
		    _rgbaColorToRGBA(str) {
		        if (str.indexOf('rgba(') === 0) {
		            str = str.match(/rgba\(([^)]+)\)/)[1];
		            var parts = str.split(/ *, */).map((n, index) => {
		                if (n.slice(-1) === '%') {
		                    return index === 3 ? parseInt(n) / 100 : (parseInt(n) / 100) * 255;
		                }
		                return Number(n);
		            });
		            return {
		                r: parts[0],
		                g: parts[1],
		                b: parts[2],
		                a: parts[3],
		            };
		        }
		    },
		    _hex8ColorToRGBA(str) {
		        if (str[0] === '#' && str.length === 9) {
		            return {
		                r: parseInt(str.slice(1, 3), 16),
		                g: parseInt(str.slice(3, 5), 16),
		                b: parseInt(str.slice(5, 7), 16),
		                a: parseInt(str.slice(7, 9), 16) / 0xff,
		            };
		        }
		    },
		    _hex6ColorToRGBA(str) {
		        if (str[0] === '#' && str.length === 7) {
		            return {
		                r: parseInt(str.slice(1, 3), 16),
		                g: parseInt(str.slice(3, 5), 16),
		                b: parseInt(str.slice(5, 7), 16),
		                a: 1,
		            };
		        }
		    },
		    _hex4ColorToRGBA(str) {
		        if (str[0] === '#' && str.length === 5) {
		            return {
		                r: parseInt(str[1] + str[1], 16),
		                g: parseInt(str[2] + str[2], 16),
		                b: parseInt(str[3] + str[3], 16),
		                a: parseInt(str[4] + str[4], 16) / 0xff,
		            };
		        }
		    },
		    _hex3ColorToRGBA(str) {
		        if (str[0] === '#' && str.length === 4) {
		            return {
		                r: parseInt(str[1] + str[1], 16),
		                g: parseInt(str[2] + str[2], 16),
		                b: parseInt(str[3] + str[3], 16),
		                a: 1,
		            };
		        }
		    },
		    _hslColorToRGBA(str) {
		        if (/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.test(str)) {
		            const [_, ...hsl] = /hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(str);
		            const h = Number(hsl[0]) / 360;
		            const s = Number(hsl[1]) / 100;
		            const l = Number(hsl[2]) / 100;
		            let t2;
		            let t3;
		            let val;
		            if (s === 0) {
		                val = l * 255;
		                return {
		                    r: Math.round(val),
		                    g: Math.round(val),
		                    b: Math.round(val),
		                    a: 1,
		                };
		            }
		            if (l < 0.5) {
		                t2 = l * (1 + s);
		            }
		            else {
		                t2 = l + s - l * s;
		            }
		            const t1 = 2 * l - t2;
		            const rgb = [0, 0, 0];
		            for (let i = 0; i < 3; i++) {
		                t3 = h + (1 / 3) * -(i - 1);
		                if (t3 < 0) {
		                    t3++;
		                }
		                if (t3 > 1) {
		                    t3--;
		                }
		                if (6 * t3 < 1) {
		                    val = t1 + (t2 - t1) * 6 * t3;
		                }
		                else if (2 * t3 < 1) {
		                    val = t2;
		                }
		                else if (3 * t3 < 2) {
		                    val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		                }
		                else {
		                    val = t1;
		                }
		                rgb[i] = val * 255;
		            }
		            return {
		                r: Math.round(rgb[0]),
		                g: Math.round(rgb[1]),
		                b: Math.round(rgb[2]),
		                a: 1,
		            };
		        }
		    },
		    haveIntersection(r1, r2) {
		        return !(r2.x > r1.x + r1.width ||
		            r2.x + r2.width < r1.x ||
		            r2.y > r1.y + r1.height ||
		            r2.y + r2.height < r1.y);
		    },
		    cloneObject(obj) {
		        var retObj = {};
		        for (var key in obj) {
		            if (this._isPlainObject(obj[key])) {
		                retObj[key] = this.cloneObject(obj[key]);
		            }
		            else if (this._isArray(obj[key])) {
		                retObj[key] = this.cloneArray(obj[key]);
		            }
		            else {
		                retObj[key] = obj[key];
		            }
		        }
		        return retObj;
		    },
		    cloneArray(arr) {
		        return arr.slice(0);
		    },
		    degToRad(deg) {
		        return deg * PI_OVER_DEG180;
		    },
		    radToDeg(rad) {
		        return rad * DEG180_OVER_PI;
		    },
		    _degToRad(deg) {
		        exports.Util.warn('Util._degToRad is removed. Please use public Util.degToRad instead.');
		        return exports.Util.degToRad(deg);
		    },
		    _radToDeg(rad) {
		        exports.Util.warn('Util._radToDeg is removed. Please use public Util.radToDeg instead.');
		        return exports.Util.radToDeg(rad);
		    },
		    _getRotation(radians) {
		        return Global_1.Konva.angleDeg ? exports.Util.radToDeg(radians) : radians;
		    },
		    _capitalize(str) {
		        return str.charAt(0).toUpperCase() + str.slice(1);
		    },
		    throw(str) {
		        throw new Error(KONVA_ERROR + str);
		    },
		    error(str) {
		        console.error(KONVA_ERROR + str);
		    },
		    warn(str) {
		        if (!Global_1.Konva.showWarnings) {
		            return;
		        }
		        console.warn(KONVA_WARNING + str);
		    },
		    each(obj, func) {
		        for (var key in obj) {
		            func(key, obj[key]);
		        }
		    },
		    _inRange(val, left, right) {
		        return left <= val && val < right;
		    },
		    _getProjectionToSegment(x1, y1, x2, y2, x3, y3) {
		        var x, y, dist;
		        var pd2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
		        if (pd2 == 0) {
		            x = x1;
		            y = y1;
		            dist = (x3 - x2) * (x3 - x2) + (y3 - y2) * (y3 - y2);
		        }
		        else {
		            var u = ((x3 - x1) * (x2 - x1) + (y3 - y1) * (y2 - y1)) / pd2;
		            if (u < 0) {
		                x = x1;
		                y = y1;
		                dist = (x1 - x3) * (x1 - x3) + (y1 - y3) * (y1 - y3);
		            }
		            else if (u > 1.0) {
		                x = x2;
		                y = y2;
		                dist = (x2 - x3) * (x2 - x3) + (y2 - y3) * (y2 - y3);
		            }
		            else {
		                x = x1 + u * (x2 - x1);
		                y = y1 + u * (y2 - y1);
		                dist = (x - x3) * (x - x3) + (y - y3) * (y - y3);
		            }
		        }
		        return [x, y, dist];
		    },
		    _getProjectionToLine(pt, line, isClosed) {
		        var pc = exports.Util.cloneObject(pt);
		        var dist = Number.MAX_VALUE;
		        line.forEach(function (p1, i) {
		            if (!isClosed && i === line.length - 1) {
		                return;
		            }
		            var p2 = line[(i + 1) % line.length];
		            var proj = exports.Util._getProjectionToSegment(p1.x, p1.y, p2.x, p2.y, pt.x, pt.y);
		            var px = proj[0], py = proj[1], pdist = proj[2];
		            if (pdist < dist) {
		                pc.x = px;
		                pc.y = py;
		                dist = pdist;
		            }
		        });
		        return pc;
		    },
		    _prepareArrayForTween(startArray, endArray, isClosed) {
		        var n, start = [], end = [];
		        if (startArray.length > endArray.length) {
		            var temp = endArray;
		            endArray = startArray;
		            startArray = temp;
		        }
		        for (n = 0; n < startArray.length; n += 2) {
		            start.push({
		                x: startArray[n],
		                y: startArray[n + 1],
		            });
		        }
		        for (n = 0; n < endArray.length; n += 2) {
		            end.push({
		                x: endArray[n],
		                y: endArray[n + 1],
		            });
		        }
		        var newStart = [];
		        end.forEach(function (point) {
		            var pr = exports.Util._getProjectionToLine(point, start, isClosed);
		            newStart.push(pr.x);
		            newStart.push(pr.y);
		        });
		        return newStart;
		    },
		    _prepareToStringify(obj) {
		        var desc;
		        obj.visitedByCircularReferenceRemoval = true;
		        for (var key in obj) {
		            if (!(obj.hasOwnProperty(key) && obj[key] && typeof obj[key] == 'object')) {
		                continue;
		            }
		            desc = Object.getOwnPropertyDescriptor(obj, key);
		            if (obj[key].visitedByCircularReferenceRemoval ||
		                exports.Util._isElement(obj[key])) {
		                if (desc.configurable) {
		                    delete obj[key];
		                }
		                else {
		                    return null;
		                }
		            }
		            else if (exports.Util._prepareToStringify(obj[key]) === null) {
		                if (desc.configurable) {
		                    delete obj[key];
		                }
		                else {
		                    return null;
		                }
		            }
		        }
		        delete obj.visitedByCircularReferenceRemoval;
		        return obj;
		    },
		    _assign(target, source) {
		        for (var key in source) {
		            target[key] = source[key];
		        }
		        return target;
		    },
		    _getFirstPointerId(evt) {
		        if (!evt.touches) {
		            return evt.pointerId || 999;
		        }
		        else {
		            return evt.changedTouches[0].identifier;
		        }
		    },
		    releaseCanvas(...canvases) {
		        if (!Global_1.Konva.releaseCanvasOnDestroy)
		            return;
		        canvases.forEach((c) => {
		            c.width = 0;
		            c.height = 0;
		        });
		    },
		    drawRoundedRectPath(context, width, height, cornerRadius) {
		        let topLeft = 0;
		        let topRight = 0;
		        let bottomLeft = 0;
		        let bottomRight = 0;
		        if (typeof cornerRadius === 'number') {
		            topLeft =
		                topRight =
		                    bottomLeft =
		                        bottomRight =
		                            Math.min(cornerRadius, width / 2, height / 2);
		        }
		        else {
		            topLeft = Math.min(cornerRadius[0] || 0, width / 2, height / 2);
		            topRight = Math.min(cornerRadius[1] || 0, width / 2, height / 2);
		            bottomRight = Math.min(cornerRadius[2] || 0, width / 2, height / 2);
		            bottomLeft = Math.min(cornerRadius[3] || 0, width / 2, height / 2);
		        }
		        context.moveTo(topLeft, 0);
		        context.lineTo(width - topRight, 0);
		        context.arc(width - topRight, topRight, topRight, (Math.PI * 3) / 2, 0, false);
		        context.lineTo(width, height - bottomRight);
		        context.arc(width - bottomRight, height - bottomRight, bottomRight, 0, Math.PI / 2, false);
		        context.lineTo(bottomLeft, height);
		        context.arc(bottomLeft, height - bottomLeft, bottomLeft, Math.PI / 2, Math.PI, false);
		        context.lineTo(0, topLeft);
		        context.arc(topLeft, topLeft, topLeft, Math.PI, (Math.PI * 3) / 2, false);
		    },
		}; 
	} (Util));
	return Util;
}

var Node = {};

var Factory = {};

var Validators = {};

var hasRequiredValidators;

function requireValidators () {
	if (hasRequiredValidators) return Validators;
	hasRequiredValidators = 1;
	Object.defineProperty(Validators, "__esModule", { value: true });
	Validators.getComponentValidator = Validators.getBooleanValidator = Validators.getNumberArrayValidator = Validators.getFunctionValidator = Validators.getStringOrGradientValidator = Validators.getStringValidator = Validators.getNumberOrAutoValidator = Validators.getNumberOrArrayOfNumbersValidator = Validators.getNumberValidator = Validators.alphaComponent = Validators.RGBComponent = void 0;
	const Global_1 = requireGlobal();
	const Util_1 = requireUtil();
	function _formatValue(val) {
	    if (Util_1.Util._isString(val)) {
	        return '"' + val + '"';
	    }
	    if (Object.prototype.toString.call(val) === '[object Number]') {
	        return val;
	    }
	    if (Util_1.Util._isBoolean(val)) {
	        return val;
	    }
	    return Object.prototype.toString.call(val);
	}
	function RGBComponent(val) {
	    if (val > 255) {
	        return 255;
	    }
	    else if (val < 0) {
	        return 0;
	    }
	    return Math.round(val);
	}
	Validators.RGBComponent = RGBComponent;
	function alphaComponent(val) {
	    if (val > 1) {
	        return 1;
	    }
	    else if (val < 0.0001) {
	        return 0.0001;
	    }
	    return val;
	}
	Validators.alphaComponent = alphaComponent;
	function getNumberValidator() {
	    if (Global_1.Konva.isUnminified) {
	        return function (val, attr) {
	            if (!Util_1.Util._isNumber(val)) {
	                Util_1.Util.warn(_formatValue(val) +
	                    ' is a not valid value for "' +
	                    attr +
	                    '" attribute. The value should be a number.');
	            }
	            return val;
	        };
	    }
	}
	Validators.getNumberValidator = getNumberValidator;
	function getNumberOrArrayOfNumbersValidator(noOfElements) {
	    if (Global_1.Konva.isUnminified) {
	        return function (val, attr) {
	            let isNumber = Util_1.Util._isNumber(val);
	            let isValidArray = Util_1.Util._isArray(val) && val.length == noOfElements;
	            if (!isNumber && !isValidArray) {
	                Util_1.Util.warn(_formatValue(val) +
	                    ' is a not valid value for "' +
	                    attr +
	                    '" attribute. The value should be a number or Array<number>(' +
	                    noOfElements +
	                    ')');
	            }
	            return val;
	        };
	    }
	}
	Validators.getNumberOrArrayOfNumbersValidator = getNumberOrArrayOfNumbersValidator;
	function getNumberOrAutoValidator() {
	    if (Global_1.Konva.isUnminified) {
	        return function (val, attr) {
	            var isNumber = Util_1.Util._isNumber(val);
	            var isAuto = val === 'auto';
	            if (!(isNumber || isAuto)) {
	                Util_1.Util.warn(_formatValue(val) +
	                    ' is a not valid value for "' +
	                    attr +
	                    '" attribute. The value should be a number or "auto".');
	            }
	            return val;
	        };
	    }
	}
	Validators.getNumberOrAutoValidator = getNumberOrAutoValidator;
	function getStringValidator() {
	    if (Global_1.Konva.isUnminified) {
	        return function (val, attr) {
	            if (!Util_1.Util._isString(val)) {
	                Util_1.Util.warn(_formatValue(val) +
	                    ' is a not valid value for "' +
	                    attr +
	                    '" attribute. The value should be a string.');
	            }
	            return val;
	        };
	    }
	}
	Validators.getStringValidator = getStringValidator;
	function getStringOrGradientValidator() {
	    if (Global_1.Konva.isUnminified) {
	        return function (val, attr) {
	            const isString = Util_1.Util._isString(val);
	            const isGradient = Object.prototype.toString.call(val) === '[object CanvasGradient]' ||
	                (val && val.addColorStop);
	            if (!(isString || isGradient)) {
	                Util_1.Util.warn(_formatValue(val) +
	                    ' is a not valid value for "' +
	                    attr +
	                    '" attribute. The value should be a string or a native gradient.');
	            }
	            return val;
	        };
	    }
	}
	Validators.getStringOrGradientValidator = getStringOrGradientValidator;
	function getFunctionValidator() {
	    if (Global_1.Konva.isUnminified) {
	        return function (val, attr) {
	            if (!Util_1.Util._isFunction(val)) {
	                Util_1.Util.warn(_formatValue(val) +
	                    ' is a not valid value for "' +
	                    attr +
	                    '" attribute. The value should be a function.');
	            }
	            return val;
	        };
	    }
	}
	Validators.getFunctionValidator = getFunctionValidator;
	function getNumberArrayValidator() {
	    if (Global_1.Konva.isUnminified) {
	        return function (val, attr) {
	            const TypedArray = Int8Array ? Object.getPrototypeOf(Int8Array) : null;
	            if (TypedArray && val instanceof TypedArray) {
	                return val;
	            }
	            if (!Util_1.Util._isArray(val)) {
	                Util_1.Util.warn(_formatValue(val) +
	                    ' is a not valid value for "' +
	                    attr +
	                    '" attribute. The value should be a array of numbers.');
	            }
	            else {
	                val.forEach(function (item) {
	                    if (!Util_1.Util._isNumber(item)) {
	                        Util_1.Util.warn('"' +
	                            attr +
	                            '" attribute has non numeric element ' +
	                            item +
	                            '. Make sure that all elements are numbers.');
	                    }
	                });
	            }
	            return val;
	        };
	    }
	}
	Validators.getNumberArrayValidator = getNumberArrayValidator;
	function getBooleanValidator() {
	    if (Global_1.Konva.isUnminified) {
	        return function (val, attr) {
	            var isBool = val === true || val === false;
	            if (!isBool) {
	                Util_1.Util.warn(_formatValue(val) +
	                    ' is a not valid value for "' +
	                    attr +
	                    '" attribute. The value should be a boolean.');
	            }
	            return val;
	        };
	    }
	}
	Validators.getBooleanValidator = getBooleanValidator;
	function getComponentValidator(components) {
	    if (Global_1.Konva.isUnminified) {
	        return function (val, attr) {
	            if (val === undefined || val === null) {
	                return val;
	            }
	            if (!Util_1.Util.isObject(val)) {
	                Util_1.Util.warn(_formatValue(val) +
	                    ' is a not valid value for "' +
	                    attr +
	                    '" attribute. The value should be an object with properties ' +
	                    components);
	            }
	            return val;
	        };
	    }
	}
	Validators.getComponentValidator = getComponentValidator;
	return Validators;
}

var hasRequiredFactory;

function requireFactory () {
	if (hasRequiredFactory) return Factory;
	hasRequiredFactory = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Factory = void 0;
		const Util_1 = requireUtil();
		const Validators_1 = requireValidators();
		var GET = 'get', SET = 'set';
		exports.Factory = {
		    addGetterSetter(constructor, attr, def, validator, after) {
		        exports.Factory.addGetter(constructor, attr, def);
		        exports.Factory.addSetter(constructor, attr, validator, after);
		        exports.Factory.addOverloadedGetterSetter(constructor, attr);
		    },
		    addGetter(constructor, attr, def) {
		        var method = GET + Util_1.Util._capitalize(attr);
		        constructor.prototype[method] =
		            constructor.prototype[method] ||
		                function () {
		                    var val = this.attrs[attr];
		                    return val === undefined ? def : val;
		                };
		    },
		    addSetter(constructor, attr, validator, after) {
		        var method = SET + Util_1.Util._capitalize(attr);
		        if (!constructor.prototype[method]) {
		            exports.Factory.overWriteSetter(constructor, attr, validator, after);
		        }
		    },
		    overWriteSetter(constructor, attr, validator, after) {
		        var method = SET + Util_1.Util._capitalize(attr);
		        constructor.prototype[method] = function (val) {
		            if (validator && val !== undefined && val !== null) {
		                val = validator.call(this, val, attr);
		            }
		            this._setAttr(attr, val);
		            if (after) {
		                after.call(this);
		            }
		            return this;
		        };
		    },
		    addComponentsGetterSetter(constructor, attr, components, validator, after) {
		        var len = components.length, capitalize = Util_1.Util._capitalize, getter = GET + capitalize(attr), setter = SET + capitalize(attr), n, component;
		        constructor.prototype[getter] = function () {
		            var ret = {};
		            for (n = 0; n < len; n++) {
		                component = components[n];
		                ret[component] = this.getAttr(attr + capitalize(component));
		            }
		            return ret;
		        };
		        var basicValidator = (0, Validators_1.getComponentValidator)(components);
		        constructor.prototype[setter] = function (val) {
		            var oldVal = this.attrs[attr], key;
		            if (validator) {
		                val = validator.call(this, val);
		            }
		            if (basicValidator) {
		                basicValidator.call(this, val, attr);
		            }
		            for (key in val) {
		                if (!val.hasOwnProperty(key)) {
		                    continue;
		                }
		                this._setAttr(attr + capitalize(key), val[key]);
		            }
		            if (!val) {
		                components.forEach((component) => {
		                    this._setAttr(attr + capitalize(component), undefined);
		                });
		            }
		            this._fireChangeEvent(attr, oldVal, val);
		            if (after) {
		                after.call(this);
		            }
		            return this;
		        };
		        exports.Factory.addOverloadedGetterSetter(constructor, attr);
		    },
		    addOverloadedGetterSetter(constructor, attr) {
		        var capitalizedAttr = Util_1.Util._capitalize(attr), setter = SET + capitalizedAttr, getter = GET + capitalizedAttr;
		        constructor.prototype[attr] = function () {
		            if (arguments.length) {
		                this[setter](arguments[0]);
		                return this;
		            }
		            return this[getter]();
		        };
		    },
		    addDeprecatedGetterSetter(constructor, attr, def, validator) {
		        Util_1.Util.error('Adding deprecated ' + attr);
		        var method = GET + Util_1.Util._capitalize(attr);
		        var message = attr +
		            ' property is deprecated and will be removed soon. Look at Konva change log for more information.';
		        constructor.prototype[method] = function () {
		            Util_1.Util.error(message);
		            var val = this.attrs[attr];
		            return val === undefined ? def : val;
		        };
		        exports.Factory.addSetter(constructor, attr, validator, function () {
		            Util_1.Util.error(message);
		        });
		        exports.Factory.addOverloadedGetterSetter(constructor, attr);
		    },
		    backCompat(constructor, methods) {
		        Util_1.Util.each(methods, function (oldMethodName, newMethodName) {
		            var method = constructor.prototype[newMethodName];
		            var oldGetter = GET + Util_1.Util._capitalize(oldMethodName);
		            var oldSetter = SET + Util_1.Util._capitalize(oldMethodName);
		            function deprecated() {
		                method.apply(this, arguments);
		                Util_1.Util.error('"' +
		                    oldMethodName +
		                    '" method is deprecated and will be removed soon. Use ""' +
		                    newMethodName +
		                    '" instead.');
		            }
		            constructor.prototype[oldMethodName] = deprecated;
		            constructor.prototype[oldGetter] = deprecated;
		            constructor.prototype[oldSetter] = deprecated;
		        });
		    },
		    afterSetFilter() {
		        this._filterUpToDate = false;
		    },
		}; 
	} (Factory));
	return Factory;
}

var Canvas = {};

var Context = {};

var hasRequiredContext;

function requireContext () {
	if (hasRequiredContext) return Context;
	hasRequiredContext = 1;
	Object.defineProperty(Context, "__esModule", { value: true });
	Context.HitContext = Context.SceneContext = Context.Context = void 0;
	const Util_1 = requireUtil();
	const Global_1 = requireGlobal();
	function simplifyArray(arr) {
	    var retArr = [], len = arr.length, util = Util_1.Util, n, val;
	    for (n = 0; n < len; n++) {
	        val = arr[n];
	        if (util._isNumber(val)) {
	            val = Math.round(val * 1000) / 1000;
	        }
	        else if (!util._isString(val)) {
	            val = val + '';
	        }
	        retArr.push(val);
	    }
	    return retArr;
	}
	var COMMA = ',', OPEN_PAREN = '(', CLOSE_PAREN = ')', OPEN_PAREN_BRACKET = '([', CLOSE_BRACKET_PAREN = '])', SEMICOLON = ';', DOUBLE_PAREN = '()', EQUALS = '=', CONTEXT_METHODS = [
	    'arc',
	    'arcTo',
	    'beginPath',
	    'bezierCurveTo',
	    'clearRect',
	    'clip',
	    'closePath',
	    'createLinearGradient',
	    'createPattern',
	    'createRadialGradient',
	    'drawImage',
	    'ellipse',
	    'fill',
	    'fillText',
	    'getImageData',
	    'createImageData',
	    'lineTo',
	    'moveTo',
	    'putImageData',
	    'quadraticCurveTo',
	    'rect',
	    'roundRect',
	    'restore',
	    'rotate',
	    'save',
	    'scale',
	    'setLineDash',
	    'setTransform',
	    'stroke',
	    'strokeText',
	    'transform',
	    'translate',
	];
	var CONTEXT_PROPERTIES = [
	    'fillStyle',
	    'strokeStyle',
	    'shadowColor',
	    'shadowBlur',
	    'shadowOffsetX',
	    'shadowOffsetY',
	    'letterSpacing',
	    'lineCap',
	    'lineDashOffset',
	    'lineJoin',
	    'lineWidth',
	    'miterLimit',
	    'direction',
	    'font',
	    'textAlign',
	    'textBaseline',
	    'globalAlpha',
	    'globalCompositeOperation',
	    'imageSmoothingEnabled',
	];
	const traceArrMax = 100;
	let Context$1 = class Context {
	    constructor(canvas) {
	        this.canvas = canvas;
	        if (Global_1.Konva.enableTrace) {
	            this.traceArr = [];
	            this._enableTrace();
	        }
	    }
	    fillShape(shape) {
	        if (shape.fillEnabled()) {
	            this._fill(shape);
	        }
	    }
	    _fill(shape) {
	    }
	    strokeShape(shape) {
	        if (shape.hasStroke()) {
	            this._stroke(shape);
	        }
	    }
	    _stroke(shape) {
	    }
	    fillStrokeShape(shape) {
	        if (shape.attrs.fillAfterStrokeEnabled) {
	            this.strokeShape(shape);
	            this.fillShape(shape);
	        }
	        else {
	            this.fillShape(shape);
	            this.strokeShape(shape);
	        }
	    }
	    getTrace(relaxed, rounded) {
	        var traceArr = this.traceArr, len = traceArr.length, str = '', n, trace, method, args;
	        for (n = 0; n < len; n++) {
	            trace = traceArr[n];
	            method = trace.method;
	            if (method) {
	                args = trace.args;
	                str += method;
	                if (relaxed) {
	                    str += DOUBLE_PAREN;
	                }
	                else {
	                    if (Util_1.Util._isArray(args[0])) {
	                        str += OPEN_PAREN_BRACKET + args.join(COMMA) + CLOSE_BRACKET_PAREN;
	                    }
	                    else {
	                        if (rounded) {
	                            args = args.map((a) => typeof a === 'number' ? Math.floor(a) : a);
	                        }
	                        str += OPEN_PAREN + args.join(COMMA) + CLOSE_PAREN;
	                    }
	                }
	            }
	            else {
	                str += trace.property;
	                if (!relaxed) {
	                    str += EQUALS + trace.val;
	                }
	            }
	            str += SEMICOLON;
	        }
	        return str;
	    }
	    clearTrace() {
	        this.traceArr = [];
	    }
	    _trace(str) {
	        var traceArr = this.traceArr, len;
	        traceArr.push(str);
	        len = traceArr.length;
	        if (len >= traceArrMax) {
	            traceArr.shift();
	        }
	    }
	    reset() {
	        var pixelRatio = this.getCanvas().getPixelRatio();
	        this.setTransform(1 * pixelRatio, 0, 0, 1 * pixelRatio, 0, 0);
	    }
	    getCanvas() {
	        return this.canvas;
	    }
	    clear(bounds) {
	        var canvas = this.getCanvas();
	        if (bounds) {
	            this.clearRect(bounds.x || 0, bounds.y || 0, bounds.width || 0, bounds.height || 0);
	        }
	        else {
	            this.clearRect(0, 0, canvas.getWidth() / canvas.pixelRatio, canvas.getHeight() / canvas.pixelRatio);
	        }
	    }
	    _applyLineCap(shape) {
	        const lineCap = shape.attrs.lineCap;
	        if (lineCap) {
	            this.setAttr('lineCap', lineCap);
	        }
	    }
	    _applyOpacity(shape) {
	        var absOpacity = shape.getAbsoluteOpacity();
	        if (absOpacity !== 1) {
	            this.setAttr('globalAlpha', absOpacity);
	        }
	    }
	    _applyLineJoin(shape) {
	        const lineJoin = shape.attrs.lineJoin;
	        if (lineJoin) {
	            this.setAttr('lineJoin', lineJoin);
	        }
	    }
	    setAttr(attr, val) {
	        this._context[attr] = val;
	    }
	    arc(x, y, radius, startAngle, endAngle, counterClockwise) {
	        this._context.arc(x, y, radius, startAngle, endAngle, counterClockwise);
	    }
	    arcTo(x1, y1, x2, y2, radius) {
	        this._context.arcTo(x1, y1, x2, y2, radius);
	    }
	    beginPath() {
	        this._context.beginPath();
	    }
	    bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {
	        this._context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
	    }
	    clearRect(x, y, width, height) {
	        this._context.clearRect(x, y, width, height);
	    }
	    clip(...args) {
	        this._context.clip.apply(this._context, args);
	    }
	    closePath() {
	        this._context.closePath();
	    }
	    createImageData(width, height) {
	        var a = arguments;
	        if (a.length === 2) {
	            return this._context.createImageData(width, height);
	        }
	        else if (a.length === 1) {
	            return this._context.createImageData(width);
	        }
	    }
	    createLinearGradient(x0, y0, x1, y1) {
	        return this._context.createLinearGradient(x0, y0, x1, y1);
	    }
	    createPattern(image, repetition) {
	        return this._context.createPattern(image, repetition);
	    }
	    createRadialGradient(x0, y0, r0, x1, y1, r1) {
	        return this._context.createRadialGradient(x0, y0, r0, x1, y1, r1);
	    }
	    drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) {
	        var a = arguments, _context = this._context;
	        if (a.length === 3) {
	            _context.drawImage(image, sx, sy);
	        }
	        else if (a.length === 5) {
	            _context.drawImage(image, sx, sy, sWidth, sHeight);
	        }
	        else if (a.length === 9) {
	            _context.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);
	        }
	    }
	    ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, counterclockwise) {
	        this._context.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, counterclockwise);
	    }
	    isPointInPath(x, y, path, fillRule) {
	        if (path) {
	            return this._context.isPointInPath(path, x, y, fillRule);
	        }
	        return this._context.isPointInPath(x, y, fillRule);
	    }
	    fill(...args) {
	        this._context.fill.apply(this._context, args);
	    }
	    fillRect(x, y, width, height) {
	        this._context.fillRect(x, y, width, height);
	    }
	    strokeRect(x, y, width, height) {
	        this._context.strokeRect(x, y, width, height);
	    }
	    fillText(text, x, y, maxWidth) {
	        if (maxWidth) {
	            this._context.fillText(text, x, y, maxWidth);
	        }
	        else {
	            this._context.fillText(text, x, y);
	        }
	    }
	    measureText(text) {
	        return this._context.measureText(text);
	    }
	    getImageData(sx, sy, sw, sh) {
	        return this._context.getImageData(sx, sy, sw, sh);
	    }
	    lineTo(x, y) {
	        this._context.lineTo(x, y);
	    }
	    moveTo(x, y) {
	        this._context.moveTo(x, y);
	    }
	    rect(x, y, width, height) {
	        this._context.rect(x, y, width, height);
	    }
	    roundRect(x, y, width, height, radii) {
	        this._context.roundRect(x, y, width, height, radii);
	    }
	    putImageData(imageData, dx, dy) {
	        this._context.putImageData(imageData, dx, dy);
	    }
	    quadraticCurveTo(cpx, cpy, x, y) {
	        this._context.quadraticCurveTo(cpx, cpy, x, y);
	    }
	    restore() {
	        this._context.restore();
	    }
	    rotate(angle) {
	        this._context.rotate(angle);
	    }
	    save() {
	        this._context.save();
	    }
	    scale(x, y) {
	        this._context.scale(x, y);
	    }
	    setLineDash(segments) {
	        if (this._context.setLineDash) {
	            this._context.setLineDash(segments);
	        }
	        else if ('mozDash' in this._context) {
	            this._context['mozDash'] = segments;
	        }
	        else if ('webkitLineDash' in this._context) {
	            this._context['webkitLineDash'] = segments;
	        }
	    }
	    getLineDash() {
	        return this._context.getLineDash();
	    }
	    setTransform(a, b, c, d, e, f) {
	        this._context.setTransform(a, b, c, d, e, f);
	    }
	    stroke(path2d) {
	        if (path2d) {
	            this._context.stroke(path2d);
	        }
	        else {
	            this._context.stroke();
	        }
	    }
	    strokeText(text, x, y, maxWidth) {
	        this._context.strokeText(text, x, y, maxWidth);
	    }
	    transform(a, b, c, d, e, f) {
	        this._context.transform(a, b, c, d, e, f);
	    }
	    translate(x, y) {
	        this._context.translate(x, y);
	    }
	    _enableTrace() {
	        var that = this, len = CONTEXT_METHODS.length, origSetter = this.setAttr, n, args;
	        var func = function (methodName) {
	            var origMethod = that[methodName], ret;
	            that[methodName] = function () {
	                args = simplifyArray(Array.prototype.slice.call(arguments, 0));
	                ret = origMethod.apply(that, arguments);
	                that._trace({
	                    method: methodName,
	                    args: args,
	                });
	                return ret;
	            };
	        };
	        for (n = 0; n < len; n++) {
	            func(CONTEXT_METHODS[n]);
	        }
	        that.setAttr = function () {
	            origSetter.apply(that, arguments);
	            var prop = arguments[0];
	            var val = arguments[1];
	            if (prop === 'shadowOffsetX' ||
	                prop === 'shadowOffsetY' ||
	                prop === 'shadowBlur') {
	                val = val / this.canvas.getPixelRatio();
	            }
	            that._trace({
	                property: prop,
	                val: val,
	            });
	        };
	    }
	    _applyGlobalCompositeOperation(node) {
	        const op = node.attrs.globalCompositeOperation;
	        var def = !op || op === 'source-over';
	        if (!def) {
	            this.setAttr('globalCompositeOperation', op);
	        }
	    }
	};
	Context.Context = Context$1;
	CONTEXT_PROPERTIES.forEach(function (prop) {
	    Object.defineProperty(Context$1.prototype, prop, {
	        get() {
	            return this._context[prop];
	        },
	        set(val) {
	            this._context[prop] = val;
	        },
	    });
	});
	class SceneContext extends Context$1 {
	    constructor(canvas, { willReadFrequently = false } = {}) {
	        super(canvas);
	        this._context = canvas._canvas.getContext('2d', {
	            willReadFrequently,
	        });
	    }
	    _fillColor(shape) {
	        var fill = shape.fill();
	        this.setAttr('fillStyle', fill);
	        shape._fillFunc(this);
	    }
	    _fillPattern(shape) {
	        this.setAttr('fillStyle', shape._getFillPattern());
	        shape._fillFunc(this);
	    }
	    _fillLinearGradient(shape) {
	        var grd = shape._getLinearGradient();
	        if (grd) {
	            this.setAttr('fillStyle', grd);
	            shape._fillFunc(this);
	        }
	    }
	    _fillRadialGradient(shape) {
	        const grd = shape._getRadialGradient();
	        if (grd) {
	            this.setAttr('fillStyle', grd);
	            shape._fillFunc(this);
	        }
	    }
	    _fill(shape) {
	        const hasColor = shape.fill(), fillPriority = shape.getFillPriority();
	        if (hasColor && fillPriority === 'color') {
	            this._fillColor(shape);
	            return;
	        }
	        const hasPattern = shape.getFillPatternImage();
	        if (hasPattern && fillPriority === 'pattern') {
	            this._fillPattern(shape);
	            return;
	        }
	        const hasLinearGradient = shape.getFillLinearGradientColorStops();
	        if (hasLinearGradient && fillPriority === 'linear-gradient') {
	            this._fillLinearGradient(shape);
	            return;
	        }
	        const hasRadialGradient = shape.getFillRadialGradientColorStops();
	        if (hasRadialGradient && fillPriority === 'radial-gradient') {
	            this._fillRadialGradient(shape);
	            return;
	        }
	        if (hasColor) {
	            this._fillColor(shape);
	        }
	        else if (hasPattern) {
	            this._fillPattern(shape);
	        }
	        else if (hasLinearGradient) {
	            this._fillLinearGradient(shape);
	        }
	        else if (hasRadialGradient) {
	            this._fillRadialGradient(shape);
	        }
	    }
	    _strokeLinearGradient(shape) {
	        const start = shape.getStrokeLinearGradientStartPoint(), end = shape.getStrokeLinearGradientEndPoint(), colorStops = shape.getStrokeLinearGradientColorStops(), grd = this.createLinearGradient(start.x, start.y, end.x, end.y);
	        if (colorStops) {
	            for (var n = 0; n < colorStops.length; n += 2) {
	                grd.addColorStop(colorStops[n], colorStops[n + 1]);
	            }
	            this.setAttr('strokeStyle', grd);
	        }
	    }
	    _stroke(shape) {
	        var dash = shape.dash(), strokeScaleEnabled = shape.getStrokeScaleEnabled();
	        if (shape.hasStroke()) {
	            if (!strokeScaleEnabled) {
	                this.save();
	                var pixelRatio = this.getCanvas().getPixelRatio();
	                this.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
	            }
	            this._applyLineCap(shape);
	            if (dash && shape.dashEnabled()) {
	                this.setLineDash(dash);
	                this.setAttr('lineDashOffset', shape.dashOffset());
	            }
	            this.setAttr('lineWidth', shape.strokeWidth());
	            if (!shape.getShadowForStrokeEnabled()) {
	                this.setAttr('shadowColor', 'rgba(0,0,0,0)');
	            }
	            var hasLinearGradient = shape.getStrokeLinearGradientColorStops();
	            if (hasLinearGradient) {
	                this._strokeLinearGradient(shape);
	            }
	            else {
	                this.setAttr('strokeStyle', shape.stroke());
	            }
	            shape._strokeFunc(this);
	            if (!strokeScaleEnabled) {
	                this.restore();
	            }
	        }
	    }
	    _applyShadow(shape) {
	        var _a, _b, _c;
	        var color = (_a = shape.getShadowRGBA()) !== null && _a !== void 0 ? _a : 'black', blur = (_b = shape.getShadowBlur()) !== null && _b !== void 0 ? _b : 5, offset = (_c = shape.getShadowOffset()) !== null && _c !== void 0 ? _c : {
	            x: 0,
	            y: 0,
	        }, scale = shape.getAbsoluteScale(), ratio = this.canvas.getPixelRatio(), scaleX = scale.x * ratio, scaleY = scale.y * ratio;
	        this.setAttr('shadowColor', color);
	        this.setAttr('shadowBlur', blur * Math.min(Math.abs(scaleX), Math.abs(scaleY)));
	        this.setAttr('shadowOffsetX', offset.x * scaleX);
	        this.setAttr('shadowOffsetY', offset.y * scaleY);
	    }
	}
	Context.SceneContext = SceneContext;
	class HitContext extends Context$1 {
	    constructor(canvas) {
	        super(canvas);
	        this._context = canvas._canvas.getContext('2d', {
	            willReadFrequently: true,
	        });
	    }
	    _fill(shape) {
	        this.save();
	        this.setAttr('fillStyle', shape.colorKey);
	        shape._fillFuncHit(this);
	        this.restore();
	    }
	    strokeShape(shape) {
	        if (shape.hasHitStroke()) {
	            this._stroke(shape);
	        }
	    }
	    _stroke(shape) {
	        if (shape.hasHitStroke()) {
	            const strokeScaleEnabled = shape.getStrokeScaleEnabled();
	            if (!strokeScaleEnabled) {
	                this.save();
	                var pixelRatio = this.getCanvas().getPixelRatio();
	                this.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
	            }
	            this._applyLineCap(shape);
	            var hitStrokeWidth = shape.hitStrokeWidth();
	            var strokeWidth = hitStrokeWidth === 'auto' ? shape.strokeWidth() : hitStrokeWidth;
	            this.setAttr('lineWidth', strokeWidth);
	            this.setAttr('strokeStyle', shape.colorKey);
	            shape._strokeFuncHit(this);
	            if (!strokeScaleEnabled) {
	                this.restore();
	            }
	        }
	    }
	}
	Context.HitContext = HitContext;
	return Context;
}

var hasRequiredCanvas;

function requireCanvas () {
	if (hasRequiredCanvas) return Canvas;
	hasRequiredCanvas = 1;
	Object.defineProperty(Canvas, "__esModule", { value: true });
	Canvas.HitCanvas = Canvas.SceneCanvas = Canvas.Canvas = void 0;
	const Util_1 = requireUtil();
	const Context_1 = requireContext();
	const Global_1 = requireGlobal();
	const Factory_1 = requireFactory();
	const Validators_1 = requireValidators();
	var _pixelRatio;
	function getDevicePixelRatio() {
	    if (_pixelRatio) {
	        return _pixelRatio;
	    }
	    var canvas = Util_1.Util.createCanvasElement();
	    var context = canvas.getContext('2d');
	    _pixelRatio = (function () {
	        var devicePixelRatio = Global_1.Konva._global.devicePixelRatio || 1, backingStoreRatio = context.webkitBackingStorePixelRatio ||
	            context.mozBackingStorePixelRatio ||
	            context.msBackingStorePixelRatio ||
	            context.oBackingStorePixelRatio ||
	            context.backingStorePixelRatio ||
	            1;
	        return devicePixelRatio / backingStoreRatio;
	    })();
	    Util_1.Util.releaseCanvas(canvas);
	    return _pixelRatio;
	}
	let Canvas$1 = class Canvas {
	    constructor(config) {
	        this.pixelRatio = 1;
	        this.width = 0;
	        this.height = 0;
	        this.isCache = false;
	        var conf = config || {};
	        var pixelRatio = conf.pixelRatio || Global_1.Konva.pixelRatio || getDevicePixelRatio();
	        this.pixelRatio = pixelRatio;
	        this._canvas = Util_1.Util.createCanvasElement();
	        this._canvas.style.padding = '0';
	        this._canvas.style.margin = '0';
	        this._canvas.style.border = '0';
	        this._canvas.style.background = 'transparent';
	        this._canvas.style.position = 'absolute';
	        this._canvas.style.top = '0';
	        this._canvas.style.left = '0';
	    }
	    getContext() {
	        return this.context;
	    }
	    getPixelRatio() {
	        return this.pixelRatio;
	    }
	    setPixelRatio(pixelRatio) {
	        var previousRatio = this.pixelRatio;
	        this.pixelRatio = pixelRatio;
	        this.setSize(this.getWidth() / previousRatio, this.getHeight() / previousRatio);
	    }
	    setWidth(width) {
	        this.width = this._canvas.width = width * this.pixelRatio;
	        this._canvas.style.width = width + 'px';
	        var pixelRatio = this.pixelRatio, _context = this.getContext()._context;
	        _context.scale(pixelRatio, pixelRatio);
	    }
	    setHeight(height) {
	        this.height = this._canvas.height = height * this.pixelRatio;
	        this._canvas.style.height = height + 'px';
	        var pixelRatio = this.pixelRatio, _context = this.getContext()._context;
	        _context.scale(pixelRatio, pixelRatio);
	    }
	    getWidth() {
	        return this.width;
	    }
	    getHeight() {
	        return this.height;
	    }
	    setSize(width, height) {
	        this.setWidth(width || 0);
	        this.setHeight(height || 0);
	    }
	    toDataURL(mimeType, quality) {
	        try {
	            return this._canvas.toDataURL(mimeType, quality);
	        }
	        catch (e) {
	            try {
	                return this._canvas.toDataURL();
	            }
	            catch (err) {
	                Util_1.Util.error('Unable to get data URL. ' +
	                    err.message +
	                    ' For more info read https://konvajs.org/docs/posts/Tainted_Canvas.html.');
	                return '';
	            }
	        }
	    }
	};
	Canvas.Canvas = Canvas$1;
	Factory_1.Factory.addGetterSetter(Canvas$1, 'pixelRatio', undefined, (0, Validators_1.getNumberValidator)());
	class SceneCanvas extends Canvas$1 {
	    constructor(config = { width: 0, height: 0, willReadFrequently: false }) {
	        super(config);
	        this.context = new Context_1.SceneContext(this, {
	            willReadFrequently: config.willReadFrequently,
	        });
	        this.setSize(config.width, config.height);
	    }
	}
	Canvas.SceneCanvas = SceneCanvas;
	class HitCanvas extends Canvas$1 {
	    constructor(config = { width: 0, height: 0 }) {
	        super(config);
	        this.hitCanvas = true;
	        this.context = new Context_1.HitContext(this);
	        this.setSize(config.width, config.height);
	    }
	}
	Canvas.HitCanvas = HitCanvas;
	return Canvas;
}

var DragAndDrop = {};

var hasRequiredDragAndDrop;

function requireDragAndDrop () {
	if (hasRequiredDragAndDrop) return DragAndDrop;
	hasRequiredDragAndDrop = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.DD = void 0;
		const Global_1 = requireGlobal();
		const Util_1 = requireUtil();
		exports.DD = {
		    get isDragging() {
		        var flag = false;
		        exports.DD._dragElements.forEach((elem) => {
		            if (elem.dragStatus === 'dragging') {
		                flag = true;
		            }
		        });
		        return flag;
		    },
		    justDragged: false,
		    get node() {
		        var node;
		        exports.DD._dragElements.forEach((elem) => {
		            node = elem.node;
		        });
		        return node;
		    },
		    _dragElements: new Map(),
		    _drag(evt) {
		        const nodesToFireEvents = [];
		        exports.DD._dragElements.forEach((elem, key) => {
		            const { node } = elem;
		            const stage = node.getStage();
		            stage.setPointersPositions(evt);
		            if (elem.pointerId === undefined) {
		                elem.pointerId = Util_1.Util._getFirstPointerId(evt);
		            }
		            const pos = stage._changedPointerPositions.find((pos) => pos.id === elem.pointerId);
		            if (!pos) {
		                return;
		            }
		            if (elem.dragStatus !== 'dragging') {
		                var dragDistance = node.dragDistance();
		                var distance = Math.max(Math.abs(pos.x - elem.startPointerPos.x), Math.abs(pos.y - elem.startPointerPos.y));
		                if (distance < dragDistance) {
		                    return;
		                }
		                node.startDrag({ evt });
		                if (!node.isDragging()) {
		                    return;
		                }
		            }
		            node._setDragPosition(evt, elem);
		            nodesToFireEvents.push(node);
		        });
		        nodesToFireEvents.forEach((node) => {
		            node.fire('dragmove', {
		                type: 'dragmove',
		                target: node,
		                evt: evt,
		            }, true);
		        });
		    },
		    _endDragBefore(evt) {
		        const drawNodes = [];
		        exports.DD._dragElements.forEach((elem) => {
		            const { node } = elem;
		            const stage = node.getStage();
		            if (evt) {
		                stage.setPointersPositions(evt);
		            }
		            const pos = stage._changedPointerPositions.find((pos) => pos.id === elem.pointerId);
		            if (!pos) {
		                return;
		            }
		            if (elem.dragStatus === 'dragging' || elem.dragStatus === 'stopped') {
		                exports.DD.justDragged = true;
		                Global_1.Konva._mouseListenClick = false;
		                Global_1.Konva._touchListenClick = false;
		                Global_1.Konva._pointerListenClick = false;
		                elem.dragStatus = 'stopped';
		            }
		            const drawNode = elem.node.getLayer() ||
		                (elem.node instanceof Global_1.Konva['Stage'] && elem.node);
		            if (drawNode && drawNodes.indexOf(drawNode) === -1) {
		                drawNodes.push(drawNode);
		            }
		        });
		        drawNodes.forEach((drawNode) => {
		            drawNode.draw();
		        });
		    },
		    _endDragAfter(evt) {
		        exports.DD._dragElements.forEach((elem, key) => {
		            if (elem.dragStatus === 'stopped') {
		                elem.node.fire('dragend', {
		                    type: 'dragend',
		                    target: elem.node,
		                    evt: evt,
		                }, true);
		            }
		            if (elem.dragStatus !== 'dragging') {
		                exports.DD._dragElements.delete(key);
		            }
		        });
		    },
		};
		if (Global_1.Konva.isBrowser) {
		    window.addEventListener('mouseup', exports.DD._endDragBefore, true);
		    window.addEventListener('touchend', exports.DD._endDragBefore, true);
		    window.addEventListener('mousemove', exports.DD._drag);
		    window.addEventListener('touchmove', exports.DD._drag);
		    window.addEventListener('mouseup', exports.DD._endDragAfter, false);
		    window.addEventListener('touchend', exports.DD._endDragAfter, false);
		} 
	} (DragAndDrop));
	return DragAndDrop;
}

var hasRequiredNode;

function requireNode () {
	if (hasRequiredNode) return Node;
	hasRequiredNode = 1;
	Object.defineProperty(Node, "__esModule", { value: true });
	Node.Node = void 0;
	const Util_1 = requireUtil();
	const Factory_1 = requireFactory();
	const Canvas_1 = requireCanvas();
	const Global_1 = requireGlobal();
	const DragAndDrop_1 = requireDragAndDrop();
	const Validators_1 = requireValidators();
	var ABSOLUTE_OPACITY = 'absoluteOpacity', ALL_LISTENERS = 'allEventListeners', ABSOLUTE_TRANSFORM = 'absoluteTransform', ABSOLUTE_SCALE = 'absoluteScale', CANVAS = 'canvas', CHANGE = 'Change', CHILDREN = 'children', KONVA = 'konva', LISTENING = 'listening', MOUSEENTER = 'mouseenter', MOUSELEAVE = 'mouseleave', SET = 'set', SHAPE = 'Shape', SPACE = ' ', STAGE = 'stage', TRANSFORM = 'transform', UPPER_STAGE = 'Stage', VISIBLE = 'visible', TRANSFORM_CHANGE_STR = [
	    'xChange.konva',
	    'yChange.konva',
	    'scaleXChange.konva',
	    'scaleYChange.konva',
	    'skewXChange.konva',
	    'skewYChange.konva',
	    'rotationChange.konva',
	    'offsetXChange.konva',
	    'offsetYChange.konva',
	    'transformsEnabledChange.konva',
	].join(SPACE);
	let idCounter = 1;
	let Node$1 = class Node {
	    constructor(config) {
	        this._id = idCounter++;
	        this.eventListeners = {};
	        this.attrs = {};
	        this.index = 0;
	        this._allEventListeners = null;
	        this.parent = null;
	        this._cache = new Map();
	        this._attachedDepsListeners = new Map();
	        this._lastPos = null;
	        this._batchingTransformChange = false;
	        this._needClearTransformCache = false;
	        this._filterUpToDate = false;
	        this._isUnderCache = false;
	        this._dragEventId = null;
	        this._shouldFireChangeEvents = false;
	        this.setAttrs(config);
	        this._shouldFireChangeEvents = true;
	    }
	    hasChildren() {
	        return false;
	    }
	    _clearCache(attr) {
	        if ((attr === TRANSFORM || attr === ABSOLUTE_TRANSFORM) &&
	            this._cache.get(attr)) {
	            this._cache.get(attr).dirty = true;
	        }
	        else if (attr) {
	            this._cache.delete(attr);
	        }
	        else {
	            this._cache.clear();
	        }
	    }
	    _getCache(attr, privateGetter) {
	        var cache = this._cache.get(attr);
	        var isTransform = attr === TRANSFORM || attr === ABSOLUTE_TRANSFORM;
	        var invalid = cache === undefined || (isTransform && cache.dirty === true);
	        if (invalid) {
	            cache = privateGetter.call(this);
	            this._cache.set(attr, cache);
	        }
	        return cache;
	    }
	    _calculate(name, deps, getter) {
	        if (!this._attachedDepsListeners.get(name)) {
	            const depsString = deps.map((dep) => dep + 'Change.konva').join(SPACE);
	            this.on(depsString, () => {
	                this._clearCache(name);
	            });
	            this._attachedDepsListeners.set(name, true);
	        }
	        return this._getCache(name, getter);
	    }
	    _getCanvasCache() {
	        return this._cache.get(CANVAS);
	    }
	    _clearSelfAndDescendantCache(attr) {
	        this._clearCache(attr);
	        if (attr === ABSOLUTE_TRANSFORM) {
	            this.fire('absoluteTransformChange');
	        }
	    }
	    clearCache() {
	        if (this._cache.has(CANVAS)) {
	            const { scene, filter, hit } = this._cache.get(CANVAS);
	            Util_1.Util.releaseCanvas(scene, filter, hit);
	            this._cache.delete(CANVAS);
	        }
	        this._clearSelfAndDescendantCache();
	        this._requestDraw();
	        return this;
	    }
	    cache(config) {
	        var conf = config || {};
	        var rect = {};
	        if (conf.x === undefined ||
	            conf.y === undefined ||
	            conf.width === undefined ||
	            conf.height === undefined) {
	            rect = this.getClientRect({
	                skipTransform: true,
	                relativeTo: this.getParent() || undefined,
	            });
	        }
	        var width = Math.ceil(conf.width || rect.width), height = Math.ceil(conf.height || rect.height), pixelRatio = conf.pixelRatio, x = conf.x === undefined ? Math.floor(rect.x) : conf.x, y = conf.y === undefined ? Math.floor(rect.y) : conf.y, offset = conf.offset || 0, drawBorder = conf.drawBorder || false, hitCanvasPixelRatio = conf.hitCanvasPixelRatio || 1;
	        if (!width || !height) {
	            Util_1.Util.error('Can not cache the node. Width or height of the node equals 0. Caching is skipped.');
	            return;
	        }
	        const extraPaddingX = Math.abs(Math.round(rect.x) - x) > 0.5 ? 1 : 0;
	        const extraPaddingY = Math.abs(Math.round(rect.y) - y) > 0.5 ? 1 : 0;
	        width += offset * 2 + extraPaddingX;
	        height += offset * 2 + extraPaddingY;
	        x -= offset;
	        y -= offset;
	        var cachedSceneCanvas = new Canvas_1.SceneCanvas({
	            pixelRatio: pixelRatio,
	            width: width,
	            height: height,
	        }), cachedFilterCanvas = new Canvas_1.SceneCanvas({
	            pixelRatio: pixelRatio,
	            width: 0,
	            height: 0,
	            willReadFrequently: true,
	        }), cachedHitCanvas = new Canvas_1.HitCanvas({
	            pixelRatio: hitCanvasPixelRatio,
	            width: width,
	            height: height,
	        }), sceneContext = cachedSceneCanvas.getContext(), hitContext = cachedHitCanvas.getContext();
	        cachedHitCanvas.isCache = true;
	        cachedSceneCanvas.isCache = true;
	        this._cache.delete(CANVAS);
	        this._filterUpToDate = false;
	        if (conf.imageSmoothingEnabled === false) {
	            cachedSceneCanvas.getContext()._context.imageSmoothingEnabled = false;
	            cachedFilterCanvas.getContext()._context.imageSmoothingEnabled = false;
	        }
	        sceneContext.save();
	        hitContext.save();
	        sceneContext.translate(-x, -y);
	        hitContext.translate(-x, -y);
	        this._isUnderCache = true;
	        this._clearSelfAndDescendantCache(ABSOLUTE_OPACITY);
	        this._clearSelfAndDescendantCache(ABSOLUTE_SCALE);
	        this.drawScene(cachedSceneCanvas, this);
	        this.drawHit(cachedHitCanvas, this);
	        this._isUnderCache = false;
	        sceneContext.restore();
	        hitContext.restore();
	        if (drawBorder) {
	            sceneContext.save();
	            sceneContext.beginPath();
	            sceneContext.rect(0, 0, width, height);
	            sceneContext.closePath();
	            sceneContext.setAttr('strokeStyle', 'red');
	            sceneContext.setAttr('lineWidth', 5);
	            sceneContext.stroke();
	            sceneContext.restore();
	        }
	        this._cache.set(CANVAS, {
	            scene: cachedSceneCanvas,
	            filter: cachedFilterCanvas,
	            hit: cachedHitCanvas,
	            x: x,
	            y: y,
	        });
	        this._requestDraw();
	        return this;
	    }
	    isCached() {
	        return this._cache.has(CANVAS);
	    }
	    getClientRect(config) {
	        throw new Error('abstract "getClientRect" method call');
	    }
	    _transformedRect(rect, top) {
	        var points = [
	            { x: rect.x, y: rect.y },
	            { x: rect.x + rect.width, y: rect.y },
	            { x: rect.x + rect.width, y: rect.y + rect.height },
	            { x: rect.x, y: rect.y + rect.height },
	        ];
	        var minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;
	        var trans = this.getAbsoluteTransform(top);
	        points.forEach(function (point) {
	            var transformed = trans.point(point);
	            if (minX === undefined) {
	                minX = maxX = transformed.x;
	                minY = maxY = transformed.y;
	            }
	            minX = Math.min(minX, transformed.x);
	            minY = Math.min(minY, transformed.y);
	            maxX = Math.max(maxX, transformed.x);
	            maxY = Math.max(maxY, transformed.y);
	        });
	        return {
	            x: minX,
	            y: minY,
	            width: maxX - minX,
	            height: maxY - minY,
	        };
	    }
	    _drawCachedSceneCanvas(context) {
	        context.save();
	        context._applyOpacity(this);
	        context._applyGlobalCompositeOperation(this);
	        const canvasCache = this._getCanvasCache();
	        context.translate(canvasCache.x, canvasCache.y);
	        var cacheCanvas = this._getCachedSceneCanvas();
	        var ratio = cacheCanvas.pixelRatio;
	        context.drawImage(cacheCanvas._canvas, 0, 0, cacheCanvas.width / ratio, cacheCanvas.height / ratio);
	        context.restore();
	    }
	    _drawCachedHitCanvas(context) {
	        var canvasCache = this._getCanvasCache(), hitCanvas = canvasCache.hit;
	        context.save();
	        context.translate(canvasCache.x, canvasCache.y);
	        context.drawImage(hitCanvas._canvas, 0, 0, hitCanvas.width / hitCanvas.pixelRatio, hitCanvas.height / hitCanvas.pixelRatio);
	        context.restore();
	    }
	    _getCachedSceneCanvas() {
	        var filters = this.filters(), cachedCanvas = this._getCanvasCache(), sceneCanvas = cachedCanvas.scene, filterCanvas = cachedCanvas.filter, filterContext = filterCanvas.getContext(), len, imageData, n, filter;
	        if (filters) {
	            if (!this._filterUpToDate) {
	                var ratio = sceneCanvas.pixelRatio;
	                filterCanvas.setSize(sceneCanvas.width / sceneCanvas.pixelRatio, sceneCanvas.height / sceneCanvas.pixelRatio);
	                try {
	                    len = filters.length;
	                    filterContext.clear();
	                    filterContext.drawImage(sceneCanvas._canvas, 0, 0, sceneCanvas.getWidth() / ratio, sceneCanvas.getHeight() / ratio);
	                    imageData = filterContext.getImageData(0, 0, filterCanvas.getWidth(), filterCanvas.getHeight());
	                    for (n = 0; n < len; n++) {
	                        filter = filters[n];
	                        if (typeof filter !== 'function') {
	                            Util_1.Util.error('Filter should be type of function, but got ' +
	                                typeof filter +
	                                ' instead. Please check correct filters');
	                            continue;
	                        }
	                        filter.call(this, imageData);
	                        filterContext.putImageData(imageData, 0, 0);
	                    }
	                }
	                catch (e) {
	                    Util_1.Util.error('Unable to apply filter. ' +
	                        e.message +
	                        ' This post my help you https://konvajs.org/docs/posts/Tainted_Canvas.html.');
	                }
	                this._filterUpToDate = true;
	            }
	            return filterCanvas;
	        }
	        return sceneCanvas;
	    }
	    on(evtStr, handler) {
	        this._cache && this._cache.delete(ALL_LISTENERS);
	        if (arguments.length === 3) {
	            return this._delegate.apply(this, arguments);
	        }
	        var events = evtStr.split(SPACE), len = events.length, n, event, parts, baseEvent, name;
	        for (n = 0; n < len; n++) {
	            event = events[n];
	            parts = event.split('.');
	            baseEvent = parts[0];
	            name = parts[1] || '';
	            if (!this.eventListeners[baseEvent]) {
	                this.eventListeners[baseEvent] = [];
	            }
	            this.eventListeners[baseEvent].push({
	                name: name,
	                handler: handler,
	            });
	        }
	        return this;
	    }
	    off(evtStr, callback) {
	        var events = (evtStr || '').split(SPACE), len = events.length, n, t, event, parts, baseEvent, name;
	        this._cache && this._cache.delete(ALL_LISTENERS);
	        if (!evtStr) {
	            for (t in this.eventListeners) {
	                this._off(t);
	            }
	        }
	        for (n = 0; n < len; n++) {
	            event = events[n];
	            parts = event.split('.');
	            baseEvent = parts[0];
	            name = parts[1];
	            if (baseEvent) {
	                if (this.eventListeners[baseEvent]) {
	                    this._off(baseEvent, name, callback);
	                }
	            }
	            else {
	                for (t in this.eventListeners) {
	                    this._off(t, name, callback);
	                }
	            }
	        }
	        return this;
	    }
	    dispatchEvent(evt) {
	        var e = {
	            target: this,
	            type: evt.type,
	            evt: evt,
	        };
	        this.fire(evt.type, e);
	        return this;
	    }
	    addEventListener(type, handler) {
	        this.on(type, function (evt) {
	            handler.call(this, evt.evt);
	        });
	        return this;
	    }
	    removeEventListener(type) {
	        this.off(type);
	        return this;
	    }
	    _delegate(event, selector, handler) {
	        var stopNode = this;
	        this.on(event, function (evt) {
	            var targets = evt.target.findAncestors(selector, true, stopNode);
	            for (var i = 0; i < targets.length; i++) {
	                evt = Util_1.Util.cloneObject(evt);
	                evt.currentTarget = targets[i];
	                handler.call(targets[i], evt);
	            }
	        });
	    }
	    remove() {
	        if (this.isDragging()) {
	            this.stopDrag();
	        }
	        DragAndDrop_1.DD._dragElements.delete(this._id);
	        this._remove();
	        return this;
	    }
	    _clearCaches() {
	        this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);
	        this._clearSelfAndDescendantCache(ABSOLUTE_OPACITY);
	        this._clearSelfAndDescendantCache(ABSOLUTE_SCALE);
	        this._clearSelfAndDescendantCache(STAGE);
	        this._clearSelfAndDescendantCache(VISIBLE);
	        this._clearSelfAndDescendantCache(LISTENING);
	    }
	    _remove() {
	        this._clearCaches();
	        var parent = this.getParent();
	        if (parent && parent.children) {
	            parent.children.splice(this.index, 1);
	            parent._setChildrenIndices();
	            this.parent = null;
	        }
	    }
	    destroy() {
	        this.remove();
	        this.clearCache();
	        return this;
	    }
	    getAttr(attr) {
	        var method = 'get' + Util_1.Util._capitalize(attr);
	        if (Util_1.Util._isFunction(this[method])) {
	            return this[method]();
	        }
	        return this.attrs[attr];
	    }
	    getAncestors() {
	        var parent = this.getParent(), ancestors = [];
	        while (parent) {
	            ancestors.push(parent);
	            parent = parent.getParent();
	        }
	        return ancestors;
	    }
	    getAttrs() {
	        return (this.attrs || {});
	    }
	    setAttrs(config) {
	        this._batchTransformChanges(() => {
	            var key, method;
	            if (!config) {
	                return this;
	            }
	            for (key in config) {
	                if (key === CHILDREN) {
	                    continue;
	                }
	                method = SET + Util_1.Util._capitalize(key);
	                if (Util_1.Util._isFunction(this[method])) {
	                    this[method](config[key]);
	                }
	                else {
	                    this._setAttr(key, config[key]);
	                }
	            }
	        });
	        return this;
	    }
	    isListening() {
	        return this._getCache(LISTENING, this._isListening);
	    }
	    _isListening(relativeTo) {
	        const listening = this.listening();
	        if (!listening) {
	            return false;
	        }
	        const parent = this.getParent();
	        if (parent && parent !== relativeTo && this !== relativeTo) {
	            return parent._isListening(relativeTo);
	        }
	        else {
	            return true;
	        }
	    }
	    isVisible() {
	        return this._getCache(VISIBLE, this._isVisible);
	    }
	    _isVisible(relativeTo) {
	        const visible = this.visible();
	        if (!visible) {
	            return false;
	        }
	        const parent = this.getParent();
	        if (parent && parent !== relativeTo && this !== relativeTo) {
	            return parent._isVisible(relativeTo);
	        }
	        else {
	            return true;
	        }
	    }
	    shouldDrawHit(top, skipDragCheck = false) {
	        if (top) {
	            return this._isVisible(top) && this._isListening(top);
	        }
	        var layer = this.getLayer();
	        var layerUnderDrag = false;
	        DragAndDrop_1.DD._dragElements.forEach((elem) => {
	            if (elem.dragStatus !== 'dragging') {
	                return;
	            }
	            else if (elem.node.nodeType === 'Stage') {
	                layerUnderDrag = true;
	            }
	            else if (elem.node.getLayer() === layer) {
	                layerUnderDrag = true;
	            }
	        });
	        var dragSkip = !skipDragCheck &&
	            !Global_1.Konva.hitOnDragEnabled &&
	            (layerUnderDrag || Global_1.Konva.isTransforming());
	        return this.isListening() && this.isVisible() && !dragSkip;
	    }
	    show() {
	        this.visible(true);
	        return this;
	    }
	    hide() {
	        this.visible(false);
	        return this;
	    }
	    getZIndex() {
	        return this.index || 0;
	    }
	    getAbsoluteZIndex() {
	        var depth = this.getDepth(), that = this, index = 0, nodes, len, n, child;
	        function addChildren(children) {
	            nodes = [];
	            len = children.length;
	            for (n = 0; n < len; n++) {
	                child = children[n];
	                index++;
	                if (child.nodeType !== SHAPE) {
	                    nodes = nodes.concat(child.getChildren().slice());
	                }
	                if (child._id === that._id) {
	                    n = len;
	                }
	            }
	            if (nodes.length > 0 && nodes[0].getDepth() <= depth) {
	                addChildren(nodes);
	            }
	        }
	        const stage = this.getStage();
	        if (that.nodeType !== UPPER_STAGE && stage) {
	            addChildren(stage.getChildren());
	        }
	        return index;
	    }
	    getDepth() {
	        var depth = 0, parent = this.parent;
	        while (parent) {
	            depth++;
	            parent = parent.parent;
	        }
	        return depth;
	    }
	    _batchTransformChanges(func) {
	        this._batchingTransformChange = true;
	        func();
	        this._batchingTransformChange = false;
	        if (this._needClearTransformCache) {
	            this._clearCache(TRANSFORM);
	            this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);
	        }
	        this._needClearTransformCache = false;
	    }
	    setPosition(pos) {
	        this._batchTransformChanges(() => {
	            this.x(pos.x);
	            this.y(pos.y);
	        });
	        return this;
	    }
	    getPosition() {
	        return {
	            x: this.x(),
	            y: this.y(),
	        };
	    }
	    getRelativePointerPosition() {
	        const stage = this.getStage();
	        if (!stage) {
	            return null;
	        }
	        var pos = stage.getPointerPosition();
	        if (!pos) {
	            return null;
	        }
	        var transform = this.getAbsoluteTransform().copy();
	        transform.invert();
	        return transform.point(pos);
	    }
	    getAbsolutePosition(top) {
	        let haveCachedParent = false;
	        let parent = this.parent;
	        while (parent) {
	            if (parent.isCached()) {
	                haveCachedParent = true;
	                break;
	            }
	            parent = parent.parent;
	        }
	        if (haveCachedParent && !top) {
	            top = true;
	        }
	        var absoluteMatrix = this.getAbsoluteTransform(top).getMatrix(), absoluteTransform = new Util_1.Transform(), offset = this.offset();
	        absoluteTransform.m = absoluteMatrix.slice();
	        absoluteTransform.translate(offset.x, offset.y);
	        return absoluteTransform.getTranslation();
	    }
	    setAbsolutePosition(pos) {
	        const { x, y, ...origTrans } = this._clearTransform();
	        this.attrs.x = x;
	        this.attrs.y = y;
	        this._clearCache(TRANSFORM);
	        var it = this._getAbsoluteTransform().copy();
	        it.invert();
	        it.translate(pos.x, pos.y);
	        pos = {
	            x: this.attrs.x + it.getTranslation().x,
	            y: this.attrs.y + it.getTranslation().y,
	        };
	        this._setTransform(origTrans);
	        this.setPosition({ x: pos.x, y: pos.y });
	        this._clearCache(TRANSFORM);
	        this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);
	        return this;
	    }
	    _setTransform(trans) {
	        var key;
	        for (key in trans) {
	            this.attrs[key] = trans[key];
	        }
	    }
	    _clearTransform() {
	        var trans = {
	            x: this.x(),
	            y: this.y(),
	            rotation: this.rotation(),
	            scaleX: this.scaleX(),
	            scaleY: this.scaleY(),
	            offsetX: this.offsetX(),
	            offsetY: this.offsetY(),
	            skewX: this.skewX(),
	            skewY: this.skewY(),
	        };
	        this.attrs.x = 0;
	        this.attrs.y = 0;
	        this.attrs.rotation = 0;
	        this.attrs.scaleX = 1;
	        this.attrs.scaleY = 1;
	        this.attrs.offsetX = 0;
	        this.attrs.offsetY = 0;
	        this.attrs.skewX = 0;
	        this.attrs.skewY = 0;
	        return trans;
	    }
	    move(change) {
	        var changeX = change.x, changeY = change.y, x = this.x(), y = this.y();
	        if (changeX !== undefined) {
	            x += changeX;
	        }
	        if (changeY !== undefined) {
	            y += changeY;
	        }
	        this.setPosition({ x: x, y: y });
	        return this;
	    }
	    _eachAncestorReverse(func, top) {
	        var family = [], parent = this.getParent(), len, n;
	        if (top && top._id === this._id) {
	            return;
	        }
	        family.unshift(this);
	        while (parent && (!top || parent._id !== top._id)) {
	            family.unshift(parent);
	            parent = parent.parent;
	        }
	        len = family.length;
	        for (n = 0; n < len; n++) {
	            func(family[n]);
	        }
	    }
	    rotate(theta) {
	        this.rotation(this.rotation() + theta);
	        return this;
	    }
	    moveToTop() {
	        if (!this.parent) {
	            Util_1.Util.warn('Node has no parent. moveToTop function is ignored.');
	            return false;
	        }
	        var index = this.index, len = this.parent.getChildren().length;
	        if (index < len - 1) {
	            this.parent.children.splice(index, 1);
	            this.parent.children.push(this);
	            this.parent._setChildrenIndices();
	            return true;
	        }
	        return false;
	    }
	    moveUp() {
	        if (!this.parent) {
	            Util_1.Util.warn('Node has no parent. moveUp function is ignored.');
	            return false;
	        }
	        var index = this.index, len = this.parent.getChildren().length;
	        if (index < len - 1) {
	            this.parent.children.splice(index, 1);
	            this.parent.children.splice(index + 1, 0, this);
	            this.parent._setChildrenIndices();
	            return true;
	        }
	        return false;
	    }
	    moveDown() {
	        if (!this.parent) {
	            Util_1.Util.warn('Node has no parent. moveDown function is ignored.');
	            return false;
	        }
	        var index = this.index;
	        if (index > 0) {
	            this.parent.children.splice(index, 1);
	            this.parent.children.splice(index - 1, 0, this);
	            this.parent._setChildrenIndices();
	            return true;
	        }
	        return false;
	    }
	    moveToBottom() {
	        if (!this.parent) {
	            Util_1.Util.warn('Node has no parent. moveToBottom function is ignored.');
	            return false;
	        }
	        var index = this.index;
	        if (index > 0) {
	            this.parent.children.splice(index, 1);
	            this.parent.children.unshift(this);
	            this.parent._setChildrenIndices();
	            return true;
	        }
	        return false;
	    }
	    setZIndex(zIndex) {
	        if (!this.parent) {
	            Util_1.Util.warn('Node has no parent. zIndex parameter is ignored.');
	            return this;
	        }
	        if (zIndex < 0 || zIndex >= this.parent.children.length) {
	            Util_1.Util.warn('Unexpected value ' +
	                zIndex +
	                ' for zIndex property. zIndex is just index of a node in children of its parent. Expected value is from 0 to ' +
	                (this.parent.children.length - 1) +
	                '.');
	        }
	        var index = this.index;
	        this.parent.children.splice(index, 1);
	        this.parent.children.splice(zIndex, 0, this);
	        this.parent._setChildrenIndices();
	        return this;
	    }
	    getAbsoluteOpacity() {
	        return this._getCache(ABSOLUTE_OPACITY, this._getAbsoluteOpacity);
	    }
	    _getAbsoluteOpacity() {
	        var absOpacity = this.opacity();
	        var parent = this.getParent();
	        if (parent && !parent._isUnderCache) {
	            absOpacity *= parent.getAbsoluteOpacity();
	        }
	        return absOpacity;
	    }
	    moveTo(newContainer) {
	        if (this.getParent() !== newContainer) {
	            this._remove();
	            newContainer.add(this);
	        }
	        return this;
	    }
	    toObject() {
	        var attrs = this.getAttrs(), key, val, getter, defaultValue, nonPlainObject;
	        const obj = {
	            attrs: {},
	            className: this.getClassName(),
	        };
	        for (key in attrs) {
	            val = attrs[key];
	            nonPlainObject =
	                Util_1.Util.isObject(val) && !Util_1.Util._isPlainObject(val) && !Util_1.Util._isArray(val);
	            if (nonPlainObject) {
	                continue;
	            }
	            getter = typeof this[key] === 'function' && this[key];
	            delete attrs[key];
	            defaultValue = getter ? getter.call(this) : null;
	            attrs[key] = val;
	            if (defaultValue !== val) {
	                obj.attrs[key] = val;
	            }
	        }
	        return Util_1.Util._prepareToStringify(obj);
	    }
	    toJSON() {
	        return JSON.stringify(this.toObject());
	    }
	    getParent() {
	        return this.parent;
	    }
	    findAncestors(selector, includeSelf, stopNode) {
	        var res = [];
	        if (includeSelf && this._isMatch(selector)) {
	            res.push(this);
	        }
	        var ancestor = this.parent;
	        while (ancestor) {
	            if (ancestor === stopNode) {
	                return res;
	            }
	            if (ancestor._isMatch(selector)) {
	                res.push(ancestor);
	            }
	            ancestor = ancestor.parent;
	        }
	        return res;
	    }
	    isAncestorOf(node) {
	        return false;
	    }
	    findAncestor(selector, includeSelf, stopNode) {
	        return this.findAncestors(selector, includeSelf, stopNode)[0];
	    }
	    _isMatch(selector) {
	        if (!selector) {
	            return false;
	        }
	        if (typeof selector === 'function') {
	            return selector(this);
	        }
	        var selectorArr = selector.replace(/ /g, '').split(','), len = selectorArr.length, n, sel;
	        for (n = 0; n < len; n++) {
	            sel = selectorArr[n];
	            if (!Util_1.Util.isValidSelector(sel)) {
	                Util_1.Util.warn('Selector "' +
	                    sel +
	                    '" is invalid. Allowed selectors examples are "#foo", ".bar" or "Group".');
	                Util_1.Util.warn('If you have a custom shape with such className, please change it to start with upper letter like "Triangle".');
	                Util_1.Util.warn('Konva is awesome, right?');
	            }
	            if (sel.charAt(0) === '#') {
	                if (this.id() === sel.slice(1)) {
	                    return true;
	                }
	            }
	            else if (sel.charAt(0) === '.') {
	                if (this.hasName(sel.slice(1))) {
	                    return true;
	                }
	            }
	            else if (this.className === sel || this.nodeType === sel) {
	                return true;
	            }
	        }
	        return false;
	    }
	    getLayer() {
	        var parent = this.getParent();
	        return parent ? parent.getLayer() : null;
	    }
	    getStage() {
	        return this._getCache(STAGE, this._getStage);
	    }
	    _getStage() {
	        var parent = this.getParent();
	        if (parent) {
	            return parent.getStage();
	        }
	        else {
	            return null;
	        }
	    }
	    fire(eventType, evt = {}, bubble) {
	        evt.target = evt.target || this;
	        if (bubble) {
	            this._fireAndBubble(eventType, evt);
	        }
	        else {
	            this._fire(eventType, evt);
	        }
	        return this;
	    }
	    getAbsoluteTransform(top) {
	        if (top) {
	            return this._getAbsoluteTransform(top);
	        }
	        else {
	            return this._getCache(ABSOLUTE_TRANSFORM, this._getAbsoluteTransform);
	        }
	    }
	    _getAbsoluteTransform(top) {
	        var at;
	        if (top) {
	            at = new Util_1.Transform();
	            this._eachAncestorReverse(function (node) {
	                var transformsEnabled = node.transformsEnabled();
	                if (transformsEnabled === 'all') {
	                    at.multiply(node.getTransform());
	                }
	                else if (transformsEnabled === 'position') {
	                    at.translate(node.x() - node.offsetX(), node.y() - node.offsetY());
	                }
	            }, top);
	            return at;
	        }
	        else {
	            at = this._cache.get(ABSOLUTE_TRANSFORM) || new Util_1.Transform();
	            if (this.parent) {
	                this.parent.getAbsoluteTransform().copyInto(at);
	            }
	            else {
	                at.reset();
	            }
	            var transformsEnabled = this.transformsEnabled();
	            if (transformsEnabled === 'all') {
	                at.multiply(this.getTransform());
	            }
	            else if (transformsEnabled === 'position') {
	                const x = this.attrs.x || 0;
	                const y = this.attrs.y || 0;
	                const offsetX = this.attrs.offsetX || 0;
	                const offsetY = this.attrs.offsetY || 0;
	                at.translate(x - offsetX, y - offsetY);
	            }
	            at.dirty = false;
	            return at;
	        }
	    }
	    getAbsoluteScale(top) {
	        var parent = this;
	        while (parent) {
	            if (parent._isUnderCache) {
	                top = parent;
	            }
	            parent = parent.getParent();
	        }
	        const transform = this.getAbsoluteTransform(top);
	        const attrs = transform.decompose();
	        return {
	            x: attrs.scaleX,
	            y: attrs.scaleY,
	        };
	    }
	    getAbsoluteRotation() {
	        return this.getAbsoluteTransform().decompose().rotation;
	    }
	    getTransform() {
	        return this._getCache(TRANSFORM, this._getTransform);
	    }
	    _getTransform() {
	        var _a, _b;
	        var m = this._cache.get(TRANSFORM) || new Util_1.Transform();
	        m.reset();
	        var x = this.x(), y = this.y(), rotation = Global_1.Konva.getAngle(this.rotation()), scaleX = (_a = this.attrs.scaleX) !== null && _a !== void 0 ? _a : 1, scaleY = (_b = this.attrs.scaleY) !== null && _b !== void 0 ? _b : 1, skewX = this.attrs.skewX || 0, skewY = this.attrs.skewY || 0, offsetX = this.attrs.offsetX || 0, offsetY = this.attrs.offsetY || 0;
	        if (x !== 0 || y !== 0) {
	            m.translate(x, y);
	        }
	        if (rotation !== 0) {
	            m.rotate(rotation);
	        }
	        if (skewX !== 0 || skewY !== 0) {
	            m.skew(skewX, skewY);
	        }
	        if (scaleX !== 1 || scaleY !== 1) {
	            m.scale(scaleX, scaleY);
	        }
	        if (offsetX !== 0 || offsetY !== 0) {
	            m.translate(-1 * offsetX, -1 * offsetY);
	        }
	        m.dirty = false;
	        return m;
	    }
	    clone(obj) {
	        var attrs = Util_1.Util.cloneObject(this.attrs), key, allListeners, len, n, listener;
	        for (key in obj) {
	            attrs[key] = obj[key];
	        }
	        var node = new this.constructor(attrs);
	        for (key in this.eventListeners) {
	            allListeners = this.eventListeners[key];
	            len = allListeners.length;
	            for (n = 0; n < len; n++) {
	                listener = allListeners[n];
	                if (listener.name.indexOf(KONVA) < 0) {
	                    if (!node.eventListeners[key]) {
	                        node.eventListeners[key] = [];
	                    }
	                    node.eventListeners[key].push(listener);
	                }
	            }
	        }
	        return node;
	    }
	    _toKonvaCanvas(config) {
	        config = config || {};
	        var box = this.getClientRect();
	        var stage = this.getStage(), x = config.x !== undefined ? config.x : Math.floor(box.x), y = config.y !== undefined ? config.y : Math.floor(box.y), pixelRatio = config.pixelRatio || 1, canvas = new Canvas_1.SceneCanvas({
	            width: config.width || Math.ceil(box.width) || (stage ? stage.width() : 0),
	            height: config.height ||
	                Math.ceil(box.height) ||
	                (stage ? stage.height() : 0),
	            pixelRatio: pixelRatio,
	        }), context = canvas.getContext();
	        const bufferCanvas = new Canvas_1.SceneCanvas({
	            width: canvas.width / canvas.pixelRatio + Math.abs(x),
	            height: canvas.height / canvas.pixelRatio + Math.abs(y),
	            pixelRatio: canvas.pixelRatio,
	        });
	        if (config.imageSmoothingEnabled === false) {
	            context._context.imageSmoothingEnabled = false;
	        }
	        context.save();
	        if (x || y) {
	            context.translate(-1 * x, -1 * y);
	        }
	        this.drawScene(canvas, undefined, bufferCanvas);
	        context.restore();
	        return canvas;
	    }
	    toCanvas(config) {
	        return this._toKonvaCanvas(config)._canvas;
	    }
	    toDataURL(config) {
	        config = config || {};
	        var mimeType = config.mimeType || null, quality = config.quality || null;
	        var url = this._toKonvaCanvas(config).toDataURL(mimeType, quality);
	        if (config.callback) {
	            config.callback(url);
	        }
	        return url;
	    }
	    toImage(config) {
	        return new Promise((resolve, reject) => {
	            try {
	                const callback = config === null || config === void 0 ? void 0 : config.callback;
	                if (callback)
	                    delete config.callback;
	                Util_1.Util._urlToImage(this.toDataURL(config), function (img) {
	                    resolve(img);
	                    callback === null || callback === void 0 ? void 0 : callback(img);
	                });
	            }
	            catch (err) {
	                reject(err);
	            }
	        });
	    }
	    toBlob(config) {
	        return new Promise((resolve, reject) => {
	            try {
	                const callback = config === null || config === void 0 ? void 0 : config.callback;
	                if (callback)
	                    delete config.callback;
	                this.toCanvas(config).toBlob((blob) => {
	                    resolve(blob);
	                    callback === null || callback === void 0 ? void 0 : callback(blob);
	                }, config === null || config === void 0 ? void 0 : config.mimeType, config === null || config === void 0 ? void 0 : config.quality);
	            }
	            catch (err) {
	                reject(err);
	            }
	        });
	    }
	    setSize(size) {
	        this.width(size.width);
	        this.height(size.height);
	        return this;
	    }
	    getSize() {
	        return {
	            width: this.width(),
	            height: this.height(),
	        };
	    }
	    getClassName() {
	        return this.className || this.nodeType;
	    }
	    getType() {
	        return this.nodeType;
	    }
	    getDragDistance() {
	        if (this.attrs.dragDistance !== undefined) {
	            return this.attrs.dragDistance;
	        }
	        else if (this.parent) {
	            return this.parent.getDragDistance();
	        }
	        else {
	            return Global_1.Konva.dragDistance;
	        }
	    }
	    _off(type, name, callback) {
	        var evtListeners = this.eventListeners[type], i, evtName, handler;
	        for (i = 0; i < evtListeners.length; i++) {
	            evtName = evtListeners[i].name;
	            handler = evtListeners[i].handler;
	            if ((evtName !== 'konva' || name === 'konva') &&
	                (!name || evtName === name) &&
	                (!callback || callback === handler)) {
	                evtListeners.splice(i, 1);
	                if (evtListeners.length === 0) {
	                    delete this.eventListeners[type];
	                    break;
	                }
	                i--;
	            }
	        }
	    }
	    _fireChangeEvent(attr, oldVal, newVal) {
	        this._fire(attr + CHANGE, {
	            oldVal: oldVal,
	            newVal: newVal,
	        });
	    }
	    addName(name) {
	        if (!this.hasName(name)) {
	            var oldName = this.name();
	            var newName = oldName ? oldName + ' ' + name : name;
	            this.name(newName);
	        }
	        return this;
	    }
	    hasName(name) {
	        if (!name) {
	            return false;
	        }
	        const fullName = this.name();
	        if (!fullName) {
	            return false;
	        }
	        var names = (fullName || '').split(/\s/g);
	        return names.indexOf(name) !== -1;
	    }
	    removeName(name) {
	        var names = (this.name() || '').split(/\s/g);
	        var index = names.indexOf(name);
	        if (index !== -1) {
	            names.splice(index, 1);
	            this.name(names.join(' '));
	        }
	        return this;
	    }
	    setAttr(attr, val) {
	        var func = this[SET + Util_1.Util._capitalize(attr)];
	        if (Util_1.Util._isFunction(func)) {
	            func.call(this, val);
	        }
	        else {
	            this._setAttr(attr, val);
	        }
	        return this;
	    }
	    _requestDraw() {
	        if (Global_1.Konva.autoDrawEnabled) {
	            const drawNode = this.getLayer() || this.getStage();
	            drawNode === null || drawNode === void 0 ? void 0 : drawNode.batchDraw();
	        }
	    }
	    _setAttr(key, val) {
	        var oldVal = this.attrs[key];
	        if (oldVal === val && !Util_1.Util.isObject(val)) {
	            return;
	        }
	        if (val === undefined || val === null) {
	            delete this.attrs[key];
	        }
	        else {
	            this.attrs[key] = val;
	        }
	        if (this._shouldFireChangeEvents) {
	            this._fireChangeEvent(key, oldVal, val);
	        }
	        this._requestDraw();
	    }
	    _setComponentAttr(key, component, val) {
	        var oldVal;
	        if (val !== undefined) {
	            oldVal = this.attrs[key];
	            if (!oldVal) {
	                this.attrs[key] = this.getAttr(key);
	            }
	            this.attrs[key][component] = val;
	            this._fireChangeEvent(key, oldVal, val);
	        }
	    }
	    _fireAndBubble(eventType, evt, compareShape) {
	        if (evt && this.nodeType === SHAPE) {
	            evt.target = this;
	        }
	        var shouldStop = (eventType === MOUSEENTER || eventType === MOUSELEAVE) &&
	            ((compareShape &&
	                (this === compareShape ||
	                    (this.isAncestorOf && this.isAncestorOf(compareShape)))) ||
	                (this.nodeType === 'Stage' && !compareShape));
	        if (!shouldStop) {
	            this._fire(eventType, evt);
	            var stopBubble = (eventType === MOUSEENTER || eventType === MOUSELEAVE) &&
	                compareShape &&
	                compareShape.isAncestorOf &&
	                compareShape.isAncestorOf(this) &&
	                !compareShape.isAncestorOf(this.parent);
	            if (((evt && !evt.cancelBubble) || !evt) &&
	                this.parent &&
	                this.parent.isListening() &&
	                !stopBubble) {
	                if (compareShape && compareShape.parent) {
	                    this._fireAndBubble.call(this.parent, eventType, evt, compareShape);
	                }
	                else {
	                    this._fireAndBubble.call(this.parent, eventType, evt);
	                }
	            }
	        }
	    }
	    _getProtoListeners(eventType) {
	        var _a, _b, _c;
	        const allListeners = (_a = this._cache.get(ALL_LISTENERS)) !== null && _a !== void 0 ? _a : {};
	        let events = allListeners === null || allListeners === void 0 ? void 0 : allListeners[eventType];
	        if (events === undefined) {
	            events = [];
	            let obj = Object.getPrototypeOf(this);
	            while (obj) {
	                const hierarchyEvents = (_c = (_b = obj.eventListeners) === null || _b === void 0 ? void 0 : _b[eventType]) !== null && _c !== void 0 ? _c : [];
	                events.push(...hierarchyEvents);
	                obj = Object.getPrototypeOf(obj);
	            }
	            allListeners[eventType] = events;
	            this._cache.set(ALL_LISTENERS, allListeners);
	        }
	        return events;
	    }
	    _fire(eventType, evt) {
	        evt = evt || {};
	        evt.currentTarget = this;
	        evt.type = eventType;
	        const topListeners = this._getProtoListeners(eventType);
	        if (topListeners) {
	            for (var i = 0; i < topListeners.length; i++) {
	                topListeners[i].handler.call(this, evt);
	            }
	        }
	        const selfListeners = this.eventListeners[eventType];
	        if (selfListeners) {
	            for (var i = 0; i < selfListeners.length; i++) {
	                selfListeners[i].handler.call(this, evt);
	            }
	        }
	    }
	    draw() {
	        this.drawScene();
	        this.drawHit();
	        return this;
	    }
	    _createDragElement(evt) {
	        var pointerId = evt ? evt.pointerId : undefined;
	        var stage = this.getStage();
	        var ap = this.getAbsolutePosition();
	        if (!stage) {
	            return;
	        }
	        var pos = stage._getPointerById(pointerId) ||
	            stage._changedPointerPositions[0] ||
	            ap;
	        DragAndDrop_1.DD._dragElements.set(this._id, {
	            node: this,
	            startPointerPos: pos,
	            offset: {
	                x: pos.x - ap.x,
	                y: pos.y - ap.y,
	            },
	            dragStatus: 'ready',
	            pointerId,
	        });
	    }
	    startDrag(evt, bubbleEvent = true) {
	        if (!DragAndDrop_1.DD._dragElements.has(this._id)) {
	            this._createDragElement(evt);
	        }
	        const elem = DragAndDrop_1.DD._dragElements.get(this._id);
	        elem.dragStatus = 'dragging';
	        this.fire('dragstart', {
	            type: 'dragstart',
	            target: this,
	            evt: evt && evt.evt,
	        }, bubbleEvent);
	    }
	    _setDragPosition(evt, elem) {
	        const pos = this.getStage()._getPointerById(elem.pointerId);
	        if (!pos) {
	            return;
	        }
	        var newNodePos = {
	            x: pos.x - elem.offset.x,
	            y: pos.y - elem.offset.y,
	        };
	        var dbf = this.dragBoundFunc();
	        if (dbf !== undefined) {
	            const bounded = dbf.call(this, newNodePos, evt);
	            if (!bounded) {
	                Util_1.Util.warn('dragBoundFunc did not return any value. That is unexpected behavior. You must return new absolute position from dragBoundFunc.');
	            }
	            else {
	                newNodePos = bounded;
	            }
	        }
	        if (!this._lastPos ||
	            this._lastPos.x !== newNodePos.x ||
	            this._lastPos.y !== newNodePos.y) {
	            this.setAbsolutePosition(newNodePos);
	            this._requestDraw();
	        }
	        this._lastPos = newNodePos;
	    }
	    stopDrag(evt) {
	        const elem = DragAndDrop_1.DD._dragElements.get(this._id);
	        if (elem) {
	            elem.dragStatus = 'stopped';
	        }
	        DragAndDrop_1.DD._endDragBefore(evt);
	        DragAndDrop_1.DD._endDragAfter(evt);
	    }
	    setDraggable(draggable) {
	        this._setAttr('draggable', draggable);
	        this._dragChange();
	    }
	    isDragging() {
	        const elem = DragAndDrop_1.DD._dragElements.get(this._id);
	        return elem ? elem.dragStatus === 'dragging' : false;
	    }
	    _listenDrag() {
	        this._dragCleanup();
	        this.on('mousedown.konva touchstart.konva', function (evt) {
	            var shouldCheckButton = evt.evt['button'] !== undefined;
	            var canDrag = !shouldCheckButton || Global_1.Konva.dragButtons.indexOf(evt.evt['button']) >= 0;
	            if (!canDrag) {
	                return;
	            }
	            if (this.isDragging()) {
	                return;
	            }
	            var hasDraggingChild = false;
	            DragAndDrop_1.DD._dragElements.forEach((elem) => {
	                if (this.isAncestorOf(elem.node)) {
	                    hasDraggingChild = true;
	                }
	            });
	            if (!hasDraggingChild) {
	                this._createDragElement(evt);
	            }
	        });
	    }
	    _dragChange() {
	        if (this.attrs.draggable) {
	            this._listenDrag();
	        }
	        else {
	            this._dragCleanup();
	            var stage = this.getStage();
	            if (!stage) {
	                return;
	            }
	            const dragElement = DragAndDrop_1.DD._dragElements.get(this._id);
	            const isDragging = dragElement && dragElement.dragStatus === 'dragging';
	            const isReady = dragElement && dragElement.dragStatus === 'ready';
	            if (isDragging) {
	                this.stopDrag();
	            }
	            else if (isReady) {
	                DragAndDrop_1.DD._dragElements.delete(this._id);
	            }
	        }
	    }
	    _dragCleanup() {
	        this.off('mousedown.konva');
	        this.off('touchstart.konva');
	    }
	    isClientRectOnScreen(margin = { x: 0, y: 0 }) {
	        const stage = this.getStage();
	        if (!stage) {
	            return false;
	        }
	        const screenRect = {
	            x: -margin.x,
	            y: -margin.y,
	            width: stage.width() + 2 * margin.x,
	            height: stage.height() + 2 * margin.y,
	        };
	        return Util_1.Util.haveIntersection(screenRect, this.getClientRect());
	    }
	    static create(data, container) {
	        if (Util_1.Util._isString(data)) {
	            data = JSON.parse(data);
	        }
	        return this._createNode(data, container);
	    }
	    static _createNode(obj, container) {
	        var className = Node.prototype.getClassName.call(obj), children = obj.children, no, len, n;
	        if (container) {
	            obj.attrs.container = container;
	        }
	        if (!Global_1.Konva[className]) {
	            Util_1.Util.warn('Can not find a node with class name "' +
	                className +
	                '". Fallback to "Shape".');
	            className = 'Shape';
	        }
	        const Class = Global_1.Konva[className];
	        no = new Class(obj.attrs);
	        if (children) {
	            len = children.length;
	            for (n = 0; n < len; n++) {
	                no.add(Node._createNode(children[n]));
	            }
	        }
	        return no;
	    }
	};
	Node.Node = Node$1;
	Node$1.prototype.nodeType = 'Node';
	Node$1.prototype._attrsAffectingSize = [];
	Node$1.prototype.eventListeners = {};
	Node$1.prototype.on.call(Node$1.prototype, TRANSFORM_CHANGE_STR, function () {
	    if (this._batchingTransformChange) {
	        this._needClearTransformCache = true;
	        return;
	    }
	    this._clearCache(TRANSFORM);
	    this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);
	});
	Node$1.prototype.on.call(Node$1.prototype, 'visibleChange.konva', function () {
	    this._clearSelfAndDescendantCache(VISIBLE);
	});
	Node$1.prototype.on.call(Node$1.prototype, 'listeningChange.konva', function () {
	    this._clearSelfAndDescendantCache(LISTENING);
	});
	Node$1.prototype.on.call(Node$1.prototype, 'opacityChange.konva', function () {
	    this._clearSelfAndDescendantCache(ABSOLUTE_OPACITY);
	});
	const addGetterSetter = Factory_1.Factory.addGetterSetter;
	addGetterSetter(Node$1, 'zIndex');
	addGetterSetter(Node$1, 'absolutePosition');
	addGetterSetter(Node$1, 'position');
	addGetterSetter(Node$1, 'x', 0, (0, Validators_1.getNumberValidator)());
	addGetterSetter(Node$1, 'y', 0, (0, Validators_1.getNumberValidator)());
	addGetterSetter(Node$1, 'globalCompositeOperation', 'source-over', (0, Validators_1.getStringValidator)());
	addGetterSetter(Node$1, 'opacity', 1, (0, Validators_1.getNumberValidator)());
	addGetterSetter(Node$1, 'name', '', (0, Validators_1.getStringValidator)());
	addGetterSetter(Node$1, 'id', '', (0, Validators_1.getStringValidator)());
	addGetterSetter(Node$1, 'rotation', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addComponentsGetterSetter(Node$1, 'scale', ['x', 'y']);
	addGetterSetter(Node$1, 'scaleX', 1, (0, Validators_1.getNumberValidator)());
	addGetterSetter(Node$1, 'scaleY', 1, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addComponentsGetterSetter(Node$1, 'skew', ['x', 'y']);
	addGetterSetter(Node$1, 'skewX', 0, (0, Validators_1.getNumberValidator)());
	addGetterSetter(Node$1, 'skewY', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addComponentsGetterSetter(Node$1, 'offset', ['x', 'y']);
	addGetterSetter(Node$1, 'offsetX', 0, (0, Validators_1.getNumberValidator)());
	addGetterSetter(Node$1, 'offsetY', 0, (0, Validators_1.getNumberValidator)());
	addGetterSetter(Node$1, 'dragDistance', null, (0, Validators_1.getNumberValidator)());
	addGetterSetter(Node$1, 'width', 0, (0, Validators_1.getNumberValidator)());
	addGetterSetter(Node$1, 'height', 0, (0, Validators_1.getNumberValidator)());
	addGetterSetter(Node$1, 'listening', true, (0, Validators_1.getBooleanValidator)());
	addGetterSetter(Node$1, 'preventDefault', true, (0, Validators_1.getBooleanValidator)());
	addGetterSetter(Node$1, 'filters', null, function (val) {
	    this._filterUpToDate = false;
	    return val;
	});
	addGetterSetter(Node$1, 'visible', true, (0, Validators_1.getBooleanValidator)());
	addGetterSetter(Node$1, 'transformsEnabled', 'all', (0, Validators_1.getStringValidator)());
	addGetterSetter(Node$1, 'size');
	addGetterSetter(Node$1, 'dragBoundFunc');
	addGetterSetter(Node$1, 'draggable', false, (0, Validators_1.getBooleanValidator)());
	Factory_1.Factory.backCompat(Node$1, {
	    rotateDeg: 'rotate',
	    setRotationDeg: 'setRotation',
	    getRotationDeg: 'getRotation',
	});
	return Node;
}

var Container$3 = {};

var hasRequiredContainer;

function requireContainer () {
	if (hasRequiredContainer) return Container$3;
	hasRequiredContainer = 1;
	Object.defineProperty(Container$3, "__esModule", { value: true });
	Container$3.Container = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	class Container extends Node_1.Node {
	    constructor() {
	        super(...arguments);
	        this.children = [];
	    }
	    getChildren(filterFunc) {
	        if (!filterFunc) {
	            return this.children || [];
	        }
	        const children = this.children || [];
	        var results = [];
	        children.forEach(function (child) {
	            if (filterFunc(child)) {
	                results.push(child);
	            }
	        });
	        return results;
	    }
	    hasChildren() {
	        return this.getChildren().length > 0;
	    }
	    removeChildren() {
	        this.getChildren().forEach((child) => {
	            child.parent = null;
	            child.index = 0;
	            child.remove();
	        });
	        this.children = [];
	        this._requestDraw();
	        return this;
	    }
	    destroyChildren() {
	        this.getChildren().forEach((child) => {
	            child.parent = null;
	            child.index = 0;
	            child.destroy();
	        });
	        this.children = [];
	        this._requestDraw();
	        return this;
	    }
	    add(...children) {
	        if (children.length === 0) {
	            return this;
	        }
	        if (children.length > 1) {
	            for (var i = 0; i < children.length; i++) {
	                this.add(children[i]);
	            }
	            return this;
	        }
	        const child = children[0];
	        if (child.getParent()) {
	            child.moveTo(this);
	            return this;
	        }
	        this._validateAdd(child);
	        child.index = this.getChildren().length;
	        child.parent = this;
	        child._clearCaches();
	        this.getChildren().push(child);
	        this._fire('add', {
	            child: child,
	        });
	        this._requestDraw();
	        return this;
	    }
	    destroy() {
	        if (this.hasChildren()) {
	            this.destroyChildren();
	        }
	        super.destroy();
	        return this;
	    }
	    find(selector) {
	        return this._generalFind(selector, false);
	    }
	    findOne(selector) {
	        var result = this._generalFind(selector, true);
	        return result.length > 0 ? result[0] : undefined;
	    }
	    _generalFind(selector, findOne) {
	        var retArr = [];
	        this._descendants((node) => {
	            const valid = node._isMatch(selector);
	            if (valid) {
	                retArr.push(node);
	            }
	            if (valid && findOne) {
	                return true;
	            }
	            return false;
	        });
	        return retArr;
	    }
	    _descendants(fn) {
	        let shouldStop = false;
	        const children = this.getChildren();
	        for (const child of children) {
	            shouldStop = fn(child);
	            if (shouldStop) {
	                return true;
	            }
	            if (!child.hasChildren()) {
	                continue;
	            }
	            shouldStop = child._descendants(fn);
	            if (shouldStop) {
	                return true;
	            }
	        }
	        return false;
	    }
	    toObject() {
	        var obj = Node_1.Node.prototype.toObject.call(this);
	        obj.children = [];
	        this.getChildren().forEach((child) => {
	            obj.children.push(child.toObject());
	        });
	        return obj;
	    }
	    isAncestorOf(node) {
	        var parent = node.getParent();
	        while (parent) {
	            if (parent._id === this._id) {
	                return true;
	            }
	            parent = parent.getParent();
	        }
	        return false;
	    }
	    clone(obj) {
	        var node = Node_1.Node.prototype.clone.call(this, obj);
	        this.getChildren().forEach(function (no) {
	            node.add(no.clone());
	        });
	        return node;
	    }
	    getAllIntersections(pos) {
	        var arr = [];
	        this.find('Shape').forEach((shape) => {
	            if (shape.isVisible() && shape.intersects(pos)) {
	                arr.push(shape);
	            }
	        });
	        return arr;
	    }
	    _clearSelfAndDescendantCache(attr) {
	        var _a;
	        super._clearSelfAndDescendantCache(attr);
	        if (this.isCached()) {
	            return;
	        }
	        (_a = this.children) === null || _a === void 0 ? void 0 : _a.forEach(function (node) {
	            node._clearSelfAndDescendantCache(attr);
	        });
	    }
	    _setChildrenIndices() {
	        var _a;
	        (_a = this.children) === null || _a === void 0 ? void 0 : _a.forEach(function (child, n) {
	            child.index = n;
	        });
	        this._requestDraw();
	    }
	    drawScene(can, top, bufferCanvas) {
	        var layer = this.getLayer(), canvas = can || (layer && layer.getCanvas()), context = canvas && canvas.getContext(), cachedCanvas = this._getCanvasCache(), cachedSceneCanvas = cachedCanvas && cachedCanvas.scene;
	        var caching = canvas && canvas.isCache;
	        if (!this.isVisible() && !caching) {
	            return this;
	        }
	        if (cachedSceneCanvas) {
	            context.save();
	            var m = this.getAbsoluteTransform(top).getMatrix();
	            context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	            this._drawCachedSceneCanvas(context);
	            context.restore();
	        }
	        else {
	            this._drawChildren('drawScene', canvas, top, bufferCanvas);
	        }
	        return this;
	    }
	    drawHit(can, top) {
	        if (!this.shouldDrawHit(top)) {
	            return this;
	        }
	        var layer = this.getLayer(), canvas = can || (layer && layer.hitCanvas), context = canvas && canvas.getContext(), cachedCanvas = this._getCanvasCache(), cachedHitCanvas = cachedCanvas && cachedCanvas.hit;
	        if (cachedHitCanvas) {
	            context.save();
	            var m = this.getAbsoluteTransform(top).getMatrix();
	            context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	            this._drawCachedHitCanvas(context);
	            context.restore();
	        }
	        else {
	            this._drawChildren('drawHit', canvas, top);
	        }
	        return this;
	    }
	    _drawChildren(drawMethod, canvas, top, bufferCanvas) {
	        var _a;
	        var context = canvas && canvas.getContext(), clipWidth = this.clipWidth(), clipHeight = this.clipHeight(), clipFunc = this.clipFunc(), hasClip = (typeof clipWidth === 'number' && typeof clipHeight === 'number') ||
	            clipFunc;
	        const selfCache = top === this;
	        if (hasClip) {
	            context.save();
	            var transform = this.getAbsoluteTransform(top);
	            var m = transform.getMatrix();
	            context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	            context.beginPath();
	            let clipArgs;
	            if (clipFunc) {
	                clipArgs = clipFunc.call(this, context, this);
	            }
	            else {
	                var clipX = this.clipX();
	                var clipY = this.clipY();
	                context.rect(clipX || 0, clipY || 0, clipWidth, clipHeight);
	            }
	            context.clip.apply(context, clipArgs);
	            m = transform.copy().invert().getMatrix();
	            context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	        }
	        var hasComposition = !selfCache &&
	            this.globalCompositeOperation() !== 'source-over' &&
	            drawMethod === 'drawScene';
	        if (hasComposition) {
	            context.save();
	            context._applyGlobalCompositeOperation(this);
	        }
	        (_a = this.children) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {
	            child[drawMethod](canvas, top, bufferCanvas);
	        });
	        if (hasComposition) {
	            context.restore();
	        }
	        if (hasClip) {
	            context.restore();
	        }
	    }
	    getClientRect(config = {}) {
	        var _a;
	        var skipTransform = config.skipTransform;
	        var relativeTo = config.relativeTo;
	        var minX, minY, maxX, maxY;
	        var selfRect = {
	            x: Infinity,
	            y: Infinity,
	            width: 0,
	            height: 0,
	        };
	        var that = this;
	        (_a = this.children) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {
	            if (!child.visible()) {
	                return;
	            }
	            var rect = child.getClientRect({
	                relativeTo: that,
	                skipShadow: config.skipShadow,
	                skipStroke: config.skipStroke,
	            });
	            if (rect.width === 0 && rect.height === 0) {
	                return;
	            }
	            if (minX === undefined) {
	                minX = rect.x;
	                minY = rect.y;
	                maxX = rect.x + rect.width;
	                maxY = rect.y + rect.height;
	            }
	            else {
	                minX = Math.min(minX, rect.x);
	                minY = Math.min(minY, rect.y);
	                maxX = Math.max(maxX, rect.x + rect.width);
	                maxY = Math.max(maxY, rect.y + rect.height);
	            }
	        });
	        var shapes = this.find('Shape');
	        var hasVisible = false;
	        for (var i = 0; i < shapes.length; i++) {
	            var shape = shapes[i];
	            if (shape._isVisible(this)) {
	                hasVisible = true;
	                break;
	            }
	        }
	        if (hasVisible && minX !== undefined) {
	            selfRect = {
	                x: minX,
	                y: minY,
	                width: maxX - minX,
	                height: maxY - minY,
	            };
	        }
	        else {
	            selfRect = {
	                x: 0,
	                y: 0,
	                width: 0,
	                height: 0,
	            };
	        }
	        if (!skipTransform) {
	            return this._transformedRect(selfRect, relativeTo);
	        }
	        return selfRect;
	    }
	}
	Container$3.Container = Container;
	Factory_1.Factory.addComponentsGetterSetter(Container, 'clip', [
	    'x',
	    'y',
	    'width',
	    'height',
	]);
	Factory_1.Factory.addGetterSetter(Container, 'clipX', undefined, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Container, 'clipY', undefined, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Container, 'clipWidth', undefined, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Container, 'clipHeight', undefined, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Container, 'clipFunc');
	return Container$3;
}

var Stage$1 = {};

var PointerEvents = {};

var hasRequiredPointerEvents;

function requirePointerEvents () {
	if (hasRequiredPointerEvents) return PointerEvents;
	hasRequiredPointerEvents = 1;
	Object.defineProperty(PointerEvents, "__esModule", { value: true });
	PointerEvents.releaseCapture = PointerEvents.setPointerCapture = PointerEvents.hasPointerCapture = PointerEvents.createEvent = PointerEvents.getCapturedShape = void 0;
	const Global_1 = requireGlobal();
	const Captures = new Map();
	const SUPPORT_POINTER_EVENTS = Global_1.Konva._global['PointerEvent'] !== undefined;
	function getCapturedShape(pointerId) {
	    return Captures.get(pointerId);
	}
	PointerEvents.getCapturedShape = getCapturedShape;
	function createEvent(evt) {
	    return {
	        evt,
	        pointerId: evt.pointerId,
	    };
	}
	PointerEvents.createEvent = createEvent;
	function hasPointerCapture(pointerId, shape) {
	    return Captures.get(pointerId) === shape;
	}
	PointerEvents.hasPointerCapture = hasPointerCapture;
	function setPointerCapture(pointerId, shape) {
	    releaseCapture(pointerId);
	    const stage = shape.getStage();
	    if (!stage)
	        return;
	    Captures.set(pointerId, shape);
	    if (SUPPORT_POINTER_EVENTS) {
	        shape._fire('gotpointercapture', createEvent(new PointerEvent('gotpointercapture')));
	    }
	}
	PointerEvents.setPointerCapture = setPointerCapture;
	function releaseCapture(pointerId, target) {
	    const shape = Captures.get(pointerId);
	    if (!shape)
	        return;
	    const stage = shape.getStage();
	    if (stage && stage.content) ;
	    Captures.delete(pointerId);
	    if (SUPPORT_POINTER_EVENTS) {
	        shape._fire('lostpointercapture', createEvent(new PointerEvent('lostpointercapture')));
	    }
	}
	PointerEvents.releaseCapture = releaseCapture;
	return PointerEvents;
}

var hasRequiredStage;

function requireStage () {
	if (hasRequiredStage) return Stage$1;
	hasRequiredStage = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Stage = exports.stages = void 0;
		const Util_1 = requireUtil();
		const Factory_1 = requireFactory();
		const Container_1 = requireContainer();
		const Global_1 = requireGlobal();
		const Canvas_1 = requireCanvas();
		const DragAndDrop_1 = requireDragAndDrop();
		const Global_2 = requireGlobal();
		const PointerEvents = requirePointerEvents();
		var STAGE = 'Stage', STRING = 'string', PX = 'px', MOUSEOUT = 'mouseout', MOUSELEAVE = 'mouseleave', MOUSEOVER = 'mouseover', MOUSEENTER = 'mouseenter', MOUSEMOVE = 'mousemove', MOUSEDOWN = 'mousedown', MOUSEUP = 'mouseup', POINTERMOVE = 'pointermove', POINTERDOWN = 'pointerdown', POINTERUP = 'pointerup', POINTERCANCEL = 'pointercancel', LOSTPOINTERCAPTURE = 'lostpointercapture', POINTEROUT = 'pointerout', POINTERLEAVE = 'pointerleave', POINTEROVER = 'pointerover', POINTERENTER = 'pointerenter', CONTEXTMENU = 'contextmenu', TOUCHSTART = 'touchstart', TOUCHEND = 'touchend', TOUCHMOVE = 'touchmove', TOUCHCANCEL = 'touchcancel', WHEEL = 'wheel', MAX_LAYERS_NUMBER = 5, EVENTS = [
		    [MOUSEENTER, '_pointerenter'],
		    [MOUSEDOWN, '_pointerdown'],
		    [MOUSEMOVE, '_pointermove'],
		    [MOUSEUP, '_pointerup'],
		    [MOUSELEAVE, '_pointerleave'],
		    [TOUCHSTART, '_pointerdown'],
		    [TOUCHMOVE, '_pointermove'],
		    [TOUCHEND, '_pointerup'],
		    [TOUCHCANCEL, '_pointercancel'],
		    [MOUSEOVER, '_pointerover'],
		    [WHEEL, '_wheel'],
		    [CONTEXTMENU, '_contextmenu'],
		    [POINTERDOWN, '_pointerdown'],
		    [POINTERMOVE, '_pointermove'],
		    [POINTERUP, '_pointerup'],
		    [POINTERCANCEL, '_pointercancel'],
		    [LOSTPOINTERCAPTURE, '_lostpointercapture'],
		];
		const EVENTS_MAP = {
		    mouse: {
		        [POINTEROUT]: MOUSEOUT,
		        [POINTERLEAVE]: MOUSELEAVE,
		        [POINTEROVER]: MOUSEOVER,
		        [POINTERENTER]: MOUSEENTER,
		        [POINTERMOVE]: MOUSEMOVE,
		        [POINTERDOWN]: MOUSEDOWN,
		        [POINTERUP]: MOUSEUP,
		        [POINTERCANCEL]: 'mousecancel',
		        pointerclick: 'click',
		        pointerdblclick: 'dblclick',
		    },
		    touch: {
		        [POINTEROUT]: 'touchout',
		        [POINTERLEAVE]: 'touchleave',
		        [POINTEROVER]: 'touchover',
		        [POINTERENTER]: 'touchenter',
		        [POINTERMOVE]: TOUCHMOVE,
		        [POINTERDOWN]: TOUCHSTART,
		        [POINTERUP]: TOUCHEND,
		        [POINTERCANCEL]: TOUCHCANCEL,
		        pointerclick: 'tap',
		        pointerdblclick: 'dbltap',
		    },
		    pointer: {
		        [POINTEROUT]: POINTEROUT,
		        [POINTERLEAVE]: POINTERLEAVE,
		        [POINTEROVER]: POINTEROVER,
		        [POINTERENTER]: POINTERENTER,
		        [POINTERMOVE]: POINTERMOVE,
		        [POINTERDOWN]: POINTERDOWN,
		        [POINTERUP]: POINTERUP,
		        [POINTERCANCEL]: POINTERCANCEL,
		        pointerclick: 'pointerclick',
		        pointerdblclick: 'pointerdblclick',
		    },
		};
		const getEventType = (type) => {
		    if (type.indexOf('pointer') >= 0) {
		        return 'pointer';
		    }
		    if (type.indexOf('touch') >= 0) {
		        return 'touch';
		    }
		    return 'mouse';
		};
		const getEventsMap = (eventType) => {
		    const type = getEventType(eventType);
		    if (type === 'pointer') {
		        return Global_1.Konva.pointerEventsEnabled && EVENTS_MAP.pointer;
		    }
		    if (type === 'touch') {
		        return EVENTS_MAP.touch;
		    }
		    if (type === 'mouse') {
		        return EVENTS_MAP.mouse;
		    }
		};
		function checkNoClip(attrs = {}) {
		    if (attrs.clipFunc || attrs.clipWidth || attrs.clipHeight) {
		        Util_1.Util.warn('Stage does not support clipping. Please use clip for Layers or Groups.');
		    }
		    return attrs;
		}
		const NO_POINTERS_MESSAGE = `Pointer position is missing and not registered by the stage. Looks like it is outside of the stage container. You can set it manually from event: stage.setPointersPositions(event);`;
		exports.stages = [];
		class Stage extends Container_1.Container {
		    constructor(config) {
		        super(checkNoClip(config));
		        this._pointerPositions = [];
		        this._changedPointerPositions = [];
		        this._buildDOM();
		        this._bindContentEvents();
		        exports.stages.push(this);
		        this.on('widthChange.konva heightChange.konva', this._resizeDOM);
		        this.on('visibleChange.konva', this._checkVisibility);
		        this.on('clipWidthChange.konva clipHeightChange.konva clipFuncChange.konva', () => {
		            checkNoClip(this.attrs);
		        });
		        this._checkVisibility();
		    }
		    _validateAdd(child) {
		        const isLayer = child.getType() === 'Layer';
		        const isFastLayer = child.getType() === 'FastLayer';
		        const valid = isLayer || isFastLayer;
		        if (!valid) {
		            Util_1.Util.throw('You may only add layers to the stage.');
		        }
		    }
		    _checkVisibility() {
		        if (!this.content) {
		            return;
		        }
		        const style = this.visible() ? '' : 'none';
		        this.content.style.display = style;
		    }
		    setContainer(container) {
		        if (typeof container === STRING) {
		            if (container.charAt(0) === '.') {
		                var className = container.slice(1);
		                container = document.getElementsByClassName(className)[0];
		            }
		            else {
		                var id;
		                if (container.charAt(0) !== '#') {
		                    id = container;
		                }
		                else {
		                    id = container.slice(1);
		                }
		                container = document.getElementById(id);
		            }
		            if (!container) {
		                throw 'Can not find container in document with id ' + id;
		            }
		        }
		        this._setAttr('container', container);
		        if (this.content) {
		            if (this.content.parentElement) {
		                this.content.parentElement.removeChild(this.content);
		            }
		            container.appendChild(this.content);
		        }
		        return this;
		    }
		    shouldDrawHit() {
		        return true;
		    }
		    clear() {
		        var layers = this.children, len = layers.length, n;
		        for (n = 0; n < len; n++) {
		            layers[n].clear();
		        }
		        return this;
		    }
		    clone(obj) {
		        if (!obj) {
		            obj = {};
		        }
		        obj.container =
		            typeof document !== 'undefined' && document.createElement('div');
		        return Container_1.Container.prototype.clone.call(this, obj);
		    }
		    destroy() {
		        super.destroy();
		        var content = this.content;
		        if (content && Util_1.Util._isInDocument(content)) {
		            this.container().removeChild(content);
		        }
		        var index = exports.stages.indexOf(this);
		        if (index > -1) {
		            exports.stages.splice(index, 1);
		        }
		        Util_1.Util.releaseCanvas(this.bufferCanvas._canvas, this.bufferHitCanvas._canvas);
		        return this;
		    }
		    getPointerPosition() {
		        const pos = this._pointerPositions[0] || this._changedPointerPositions[0];
		        if (!pos) {
		            Util_1.Util.warn(NO_POINTERS_MESSAGE);
		            return null;
		        }
		        return {
		            x: pos.x,
		            y: pos.y,
		        };
		    }
		    _getPointerById(id) {
		        return this._pointerPositions.find((p) => p.id === id);
		    }
		    getPointersPositions() {
		        return this._pointerPositions;
		    }
		    getStage() {
		        return this;
		    }
		    getContent() {
		        return this.content;
		    }
		    _toKonvaCanvas(config) {
		        config = config || {};
		        config.x = config.x || 0;
		        config.y = config.y || 0;
		        config.width = config.width || this.width();
		        config.height = config.height || this.height();
		        var canvas = new Canvas_1.SceneCanvas({
		            width: config.width,
		            height: config.height,
		            pixelRatio: config.pixelRatio || 1,
		        });
		        var _context = canvas.getContext()._context;
		        var layers = this.children;
		        if (config.x || config.y) {
		            _context.translate(-1 * config.x, -1 * config.y);
		        }
		        layers.forEach(function (layer) {
		            if (!layer.isVisible()) {
		                return;
		            }
		            var layerCanvas = layer._toKonvaCanvas(config);
		            _context.drawImage(layerCanvas._canvas, config.x, config.y, layerCanvas.getWidth() / layerCanvas.getPixelRatio(), layerCanvas.getHeight() / layerCanvas.getPixelRatio());
		        });
		        return canvas;
		    }
		    getIntersection(pos) {
		        if (!pos) {
		            return null;
		        }
		        var layers = this.children, len = layers.length, end = len - 1, n;
		        for (n = end; n >= 0; n--) {
		            const shape = layers[n].getIntersection(pos);
		            if (shape) {
		                return shape;
		            }
		        }
		        return null;
		    }
		    _resizeDOM() {
		        var width = this.width();
		        var height = this.height();
		        if (this.content) {
		            this.content.style.width = width + PX;
		            this.content.style.height = height + PX;
		        }
		        this.bufferCanvas.setSize(width, height);
		        this.bufferHitCanvas.setSize(width, height);
		        this.children.forEach((layer) => {
		            layer.setSize({ width, height });
		            layer.draw();
		        });
		    }
		    add(layer, ...rest) {
		        if (arguments.length > 1) {
		            for (var i = 0; i < arguments.length; i++) {
		                this.add(arguments[i]);
		            }
		            return this;
		        }
		        super.add(layer);
		        var length = this.children.length;
		        if (length > MAX_LAYERS_NUMBER) {
		            Util_1.Util.warn('The stage has ' +
		                length +
		                ' layers. Recommended maximum number of layers is 3-5. Adding more layers into the stage may drop the performance. Rethink your tree structure, you can use Konva.Group.');
		        }
		        layer.setSize({ width: this.width(), height: this.height() });
		        layer.draw();
		        if (Global_1.Konva.isBrowser) {
		            this.content.appendChild(layer.canvas._canvas);
		        }
		        return this;
		    }
		    getParent() {
		        return null;
		    }
		    getLayer() {
		        return null;
		    }
		    hasPointerCapture(pointerId) {
		        return PointerEvents.hasPointerCapture(pointerId, this);
		    }
		    setPointerCapture(pointerId) {
		        PointerEvents.setPointerCapture(pointerId, this);
		    }
		    releaseCapture(pointerId) {
		        PointerEvents.releaseCapture(pointerId, this);
		    }
		    getLayers() {
		        return this.children;
		    }
		    _bindContentEvents() {
		        if (!Global_1.Konva.isBrowser) {
		            return;
		        }
		        EVENTS.forEach(([event, methodName]) => {
		            this.content.addEventListener(event, (evt) => {
		                this[methodName](evt);
		            }, { passive: false });
		        });
		    }
		    _pointerenter(evt) {
		        this.setPointersPositions(evt);
		        const events = getEventsMap(evt.type);
		        if (events) {
		            this._fire(events.pointerenter, {
		                evt: evt,
		                target: this,
		                currentTarget: this,
		            });
		        }
		    }
		    _pointerover(evt) {
		        this.setPointersPositions(evt);
		        const events = getEventsMap(evt.type);
		        if (events) {
		            this._fire(events.pointerover, {
		                evt: evt,
		                target: this,
		                currentTarget: this,
		            });
		        }
		    }
		    _getTargetShape(evenType) {
		        let shape = this[evenType + 'targetShape'];
		        if (shape && !shape.getStage()) {
		            shape = null;
		        }
		        return shape;
		    }
		    _pointerleave(evt) {
		        const events = getEventsMap(evt.type);
		        const eventType = getEventType(evt.type);
		        if (!events) {
		            return;
		        }
		        this.setPointersPositions(evt);
		        var targetShape = this._getTargetShape(eventType);
		        var eventsEnabled = !(Global_1.Konva.isDragging() || Global_1.Konva.isTransforming()) || Global_1.Konva.hitOnDragEnabled;
		        if (targetShape && eventsEnabled) {
		            targetShape._fireAndBubble(events.pointerout, { evt: evt });
		            targetShape._fireAndBubble(events.pointerleave, { evt: evt });
		            this._fire(events.pointerleave, {
		                evt: evt,
		                target: this,
		                currentTarget: this,
		            });
		            this[eventType + 'targetShape'] = null;
		        }
		        else if (eventsEnabled) {
		            this._fire(events.pointerleave, {
		                evt: evt,
		                target: this,
		                currentTarget: this,
		            });
		            this._fire(events.pointerout, {
		                evt: evt,
		                target: this,
		                currentTarget: this,
		            });
		        }
		        this.pointerPos = null;
		        this._pointerPositions = [];
		    }
		    _pointerdown(evt) {
		        const events = getEventsMap(evt.type);
		        const eventType = getEventType(evt.type);
		        if (!events) {
		            return;
		        }
		        this.setPointersPositions(evt);
		        var triggeredOnShape = false;
		        this._changedPointerPositions.forEach((pos) => {
		            var shape = this.getIntersection(pos);
		            DragAndDrop_1.DD.justDragged = false;
		            Global_1.Konva['_' + eventType + 'ListenClick'] = true;
		            if (!shape || !shape.isListening()) {
		                return;
		            }
		            if (Global_1.Konva.capturePointerEventsEnabled) {
		                shape.setPointerCapture(pos.id);
		            }
		            this[eventType + 'ClickStartShape'] = shape;
		            shape._fireAndBubble(events.pointerdown, {
		                evt: evt,
		                pointerId: pos.id,
		            });
		            triggeredOnShape = true;
		            const isTouch = evt.type.indexOf('touch') >= 0;
		            if (shape.preventDefault() && evt.cancelable && isTouch) {
		                evt.preventDefault();
		            }
		        });
		        if (!triggeredOnShape) {
		            this._fire(events.pointerdown, {
		                evt: evt,
		                target: this,
		                currentTarget: this,
		                pointerId: this._pointerPositions[0].id,
		            });
		        }
		    }
		    _pointermove(evt) {
		        const events = getEventsMap(evt.type);
		        const eventType = getEventType(evt.type);
		        if (!events) {
		            return;
		        }
		        if (Global_1.Konva.isDragging() && DragAndDrop_1.DD.node.preventDefault() && evt.cancelable) {
		            evt.preventDefault();
		        }
		        this.setPointersPositions(evt);
		        var eventsEnabled = !(Global_1.Konva.isDragging() || Global_1.Konva.isTransforming()) || Global_1.Konva.hitOnDragEnabled;
		        if (!eventsEnabled) {
		            return;
		        }
		        var processedShapesIds = {};
		        let triggeredOnShape = false;
		        var targetShape = this._getTargetShape(eventType);
		        this._changedPointerPositions.forEach((pos) => {
		            const shape = (PointerEvents.getCapturedShape(pos.id) ||
		                this.getIntersection(pos));
		            const pointerId = pos.id;
		            const event = { evt: evt, pointerId };
		            var differentTarget = targetShape !== shape;
		            if (differentTarget && targetShape) {
		                targetShape._fireAndBubble(events.pointerout, { ...event }, shape);
		                targetShape._fireAndBubble(events.pointerleave, { ...event }, shape);
		            }
		            if (shape) {
		                if (processedShapesIds[shape._id]) {
		                    return;
		                }
		                processedShapesIds[shape._id] = true;
		            }
		            if (shape && shape.isListening()) {
		                triggeredOnShape = true;
		                if (differentTarget) {
		                    shape._fireAndBubble(events.pointerover, { ...event }, targetShape);
		                    shape._fireAndBubble(events.pointerenter, { ...event }, targetShape);
		                    this[eventType + 'targetShape'] = shape;
		                }
		                shape._fireAndBubble(events.pointermove, { ...event });
		            }
		            else {
		                if (targetShape) {
		                    this._fire(events.pointerover, {
		                        evt: evt,
		                        target: this,
		                        currentTarget: this,
		                        pointerId,
		                    });
		                    this[eventType + 'targetShape'] = null;
		                }
		            }
		        });
		        if (!triggeredOnShape) {
		            this._fire(events.pointermove, {
		                evt: evt,
		                target: this,
		                currentTarget: this,
		                pointerId: this._changedPointerPositions[0].id,
		            });
		        }
		    }
		    _pointerup(evt) {
		        const events = getEventsMap(evt.type);
		        const eventType = getEventType(evt.type);
		        if (!events) {
		            return;
		        }
		        this.setPointersPositions(evt);
		        const clickStartShape = this[eventType + 'ClickStartShape'];
		        const clickEndShape = this[eventType + 'ClickEndShape'];
		        var processedShapesIds = {};
		        let triggeredOnShape = false;
		        this._changedPointerPositions.forEach((pos) => {
		            const shape = (PointerEvents.getCapturedShape(pos.id) ||
		                this.getIntersection(pos));
		            if (shape) {
		                shape.releaseCapture(pos.id);
		                if (processedShapesIds[shape._id]) {
		                    return;
		                }
		                processedShapesIds[shape._id] = true;
		            }
		            const pointerId = pos.id;
		            const event = { evt: evt, pointerId };
		            let fireDblClick = false;
		            if (Global_1.Konva['_' + eventType + 'InDblClickWindow']) {
		                fireDblClick = true;
		                clearTimeout(this[eventType + 'DblTimeout']);
		            }
		            else if (!DragAndDrop_1.DD.justDragged) {
		                Global_1.Konva['_' + eventType + 'InDblClickWindow'] = true;
		                clearTimeout(this[eventType + 'DblTimeout']);
		            }
		            this[eventType + 'DblTimeout'] = setTimeout(function () {
		                Global_1.Konva['_' + eventType + 'InDblClickWindow'] = false;
		            }, Global_1.Konva.dblClickWindow);
		            if (shape && shape.isListening()) {
		                triggeredOnShape = true;
		                this[eventType + 'ClickEndShape'] = shape;
		                shape._fireAndBubble(events.pointerup, { ...event });
		                if (Global_1.Konva['_' + eventType + 'ListenClick'] &&
		                    clickStartShape &&
		                    clickStartShape === shape) {
		                    shape._fireAndBubble(events.pointerclick, { ...event });
		                    if (fireDblClick && clickEndShape && clickEndShape === shape) {
		                        shape._fireAndBubble(events.pointerdblclick, { ...event });
		                    }
		                }
		            }
		            else {
		                this[eventType + 'ClickEndShape'] = null;
		                if (Global_1.Konva['_' + eventType + 'ListenClick']) {
		                    this._fire(events.pointerclick, {
		                        evt: evt,
		                        target: this,
		                        currentTarget: this,
		                        pointerId,
		                    });
		                }
		                if (fireDblClick) {
		                    this._fire(events.pointerdblclick, {
		                        evt: evt,
		                        target: this,
		                        currentTarget: this,
		                        pointerId,
		                    });
		                }
		            }
		        });
		        if (!triggeredOnShape) {
		            this._fire(events.pointerup, {
		                evt: evt,
		                target: this,
		                currentTarget: this,
		                pointerId: this._changedPointerPositions[0].id,
		            });
		        }
		        Global_1.Konva['_' + eventType + 'ListenClick'] = false;
		        if (evt.cancelable && eventType !== 'touch') {
		            evt.preventDefault();
		        }
		    }
		    _contextmenu(evt) {
		        this.setPointersPositions(evt);
		        var shape = this.getIntersection(this.getPointerPosition());
		        if (shape && shape.isListening()) {
		            shape._fireAndBubble(CONTEXTMENU, { evt: evt });
		        }
		        else {
		            this._fire(CONTEXTMENU, {
		                evt: evt,
		                target: this,
		                currentTarget: this,
		            });
		        }
		    }
		    _wheel(evt) {
		        this.setPointersPositions(evt);
		        var shape = this.getIntersection(this.getPointerPosition());
		        if (shape && shape.isListening()) {
		            shape._fireAndBubble(WHEEL, { evt: evt });
		        }
		        else {
		            this._fire(WHEEL, {
		                evt: evt,
		                target: this,
		                currentTarget: this,
		            });
		        }
		    }
		    _pointercancel(evt) {
		        this.setPointersPositions(evt);
		        const shape = PointerEvents.getCapturedShape(evt.pointerId) ||
		            this.getIntersection(this.getPointerPosition());
		        if (shape) {
		            shape._fireAndBubble(POINTERUP, PointerEvents.createEvent(evt));
		        }
		        PointerEvents.releaseCapture(evt.pointerId);
		    }
		    _lostpointercapture(evt) {
		        PointerEvents.releaseCapture(evt.pointerId);
		    }
		    setPointersPositions(evt) {
		        var contentPosition = this._getContentPosition(), x = null, y = null;
		        evt = evt ? evt : window.event;
		        if (evt.touches !== undefined) {
		            this._pointerPositions = [];
		            this._changedPointerPositions = [];
		            Array.prototype.forEach.call(evt.touches, (touch) => {
		                this._pointerPositions.push({
		                    id: touch.identifier,
		                    x: (touch.clientX - contentPosition.left) / contentPosition.scaleX,
		                    y: (touch.clientY - contentPosition.top) / contentPosition.scaleY,
		                });
		            });
		            Array.prototype.forEach.call(evt.changedTouches || evt.touches, (touch) => {
		                this._changedPointerPositions.push({
		                    id: touch.identifier,
		                    x: (touch.clientX - contentPosition.left) / contentPosition.scaleX,
		                    y: (touch.clientY - contentPosition.top) / contentPosition.scaleY,
		                });
		            });
		        }
		        else {
		            x = (evt.clientX - contentPosition.left) / contentPosition.scaleX;
		            y = (evt.clientY - contentPosition.top) / contentPosition.scaleY;
		            this.pointerPos = {
		                x: x,
		                y: y,
		            };
		            this._pointerPositions = [{ x, y, id: Util_1.Util._getFirstPointerId(evt) }];
		            this._changedPointerPositions = [
		                { x, y, id: Util_1.Util._getFirstPointerId(evt) },
		            ];
		        }
		    }
		    _setPointerPosition(evt) {
		        Util_1.Util.warn('Method _setPointerPosition is deprecated. Use "stage.setPointersPositions(event)" instead.');
		        this.setPointersPositions(evt);
		    }
		    _getContentPosition() {
		        if (!this.content || !this.content.getBoundingClientRect) {
		            return {
		                top: 0,
		                left: 0,
		                scaleX: 1,
		                scaleY: 1,
		            };
		        }
		        var rect = this.content.getBoundingClientRect();
		        return {
		            top: rect.top,
		            left: rect.left,
		            scaleX: rect.width / this.content.clientWidth || 1,
		            scaleY: rect.height / this.content.clientHeight || 1,
		        };
		    }
		    _buildDOM() {
		        this.bufferCanvas = new Canvas_1.SceneCanvas({
		            width: this.width(),
		            height: this.height(),
		        });
		        this.bufferHitCanvas = new Canvas_1.HitCanvas({
		            pixelRatio: 1,
		            width: this.width(),
		            height: this.height(),
		        });
		        if (!Global_1.Konva.isBrowser) {
		            return;
		        }
		        var container = this.container();
		        if (!container) {
		            throw 'Stage has no container. A container is required.';
		        }
		        container.innerHTML = '';
		        this.content = document.createElement('div');
		        this.content.style.position = 'relative';
		        this.content.style.userSelect = 'none';
		        this.content.className = 'konvajs-content';
		        this.content.setAttribute('role', 'presentation');
		        container.appendChild(this.content);
		        this._resizeDOM();
		    }
		    cache() {
		        Util_1.Util.warn('Cache function is not allowed for stage. You may use cache only for layers, groups and shapes.');
		        return this;
		    }
		    clearCache() {
		        return this;
		    }
		    batchDraw() {
		        this.getChildren().forEach(function (layer) {
		            layer.batchDraw();
		        });
		        return this;
		    }
		}
		exports.Stage = Stage;
		Stage.prototype.nodeType = STAGE;
		(0, Global_2._registerNode)(Stage);
		Factory_1.Factory.addGetterSetter(Stage, 'container'); 
	} (Stage$1));
	return Stage$1;
}

var Layer$1 = {};

var Shape = {};

var hasRequiredShape;

function requireShape () {
	if (hasRequiredShape) return Shape;
	hasRequiredShape = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Shape = exports.shapes = void 0;
		const Global_1 = requireGlobal();
		const Util_1 = requireUtil();
		const Factory_1 = requireFactory();
		const Node_1 = requireNode();
		const Validators_1 = requireValidators();
		const Global_2 = requireGlobal();
		const PointerEvents = requirePointerEvents();
		var HAS_SHADOW = 'hasShadow';
		var SHADOW_RGBA = 'shadowRGBA';
		var patternImage = 'patternImage';
		var linearGradient = 'linearGradient';
		var radialGradient = 'radialGradient';
		let dummyContext;
		function getDummyContext() {
		    if (dummyContext) {
		        return dummyContext;
		    }
		    dummyContext = Util_1.Util.createCanvasElement().getContext('2d');
		    return dummyContext;
		}
		exports.shapes = {};
		function _fillFunc(context) {
		    const fillRule = this.attrs.fillRule;
		    if (fillRule) {
		        context.fill(fillRule);
		    }
		    else {
		        context.fill();
		    }
		}
		function _strokeFunc(context) {
		    context.stroke();
		}
		function _fillFuncHit(context) {
		    context.fill();
		}
		function _strokeFuncHit(context) {
		    context.stroke();
		}
		function _clearHasShadowCache() {
		    this._clearCache(HAS_SHADOW);
		}
		function _clearGetShadowRGBACache() {
		    this._clearCache(SHADOW_RGBA);
		}
		function _clearFillPatternCache() {
		    this._clearCache(patternImage);
		}
		function _clearLinearGradientCache() {
		    this._clearCache(linearGradient);
		}
		function _clearRadialGradientCache() {
		    this._clearCache(radialGradient);
		}
		class Shape extends Node_1.Node {
		    constructor(config) {
		        super(config);
		        let key;
		        while (true) {
		            key = Util_1.Util.getRandomColor();
		            if (key && !(key in exports.shapes)) {
		                break;
		            }
		        }
		        this.colorKey = key;
		        exports.shapes[key] = this;
		    }
		    getContext() {
		        Util_1.Util.warn('shape.getContext() method is deprecated. Please do not use it.');
		        return this.getLayer().getContext();
		    }
		    getCanvas() {
		        Util_1.Util.warn('shape.getCanvas() method is deprecated. Please do not use it.');
		        return this.getLayer().getCanvas();
		    }
		    getSceneFunc() {
		        return this.attrs.sceneFunc || this['_sceneFunc'];
		    }
		    getHitFunc() {
		        return this.attrs.hitFunc || this['_hitFunc'];
		    }
		    hasShadow() {
		        return this._getCache(HAS_SHADOW, this._hasShadow);
		    }
		    _hasShadow() {
		        return (this.shadowEnabled() &&
		            this.shadowOpacity() !== 0 &&
		            !!(this.shadowColor() ||
		                this.shadowBlur() ||
		                this.shadowOffsetX() ||
		                this.shadowOffsetY()));
		    }
		    _getFillPattern() {
		        return this._getCache(patternImage, this.__getFillPattern);
		    }
		    __getFillPattern() {
		        if (this.fillPatternImage()) {
		            var ctx = getDummyContext();
		            const pattern = ctx.createPattern(this.fillPatternImage(), this.fillPatternRepeat() || 'repeat');
		            if (pattern && pattern.setTransform) {
		                const tr = new Util_1.Transform();
		                tr.translate(this.fillPatternX(), this.fillPatternY());
		                tr.rotate(Global_1.Konva.getAngle(this.fillPatternRotation()));
		                tr.scale(this.fillPatternScaleX(), this.fillPatternScaleY());
		                tr.translate(-1 * this.fillPatternOffsetX(), -1 * this.fillPatternOffsetY());
		                const m = tr.getMatrix();
		                const matrix = typeof DOMMatrix === 'undefined'
		                    ? {
		                        a: m[0],
		                        b: m[1],
		                        c: m[2],
		                        d: m[3],
		                        e: m[4],
		                        f: m[5],
		                    }
		                    : new DOMMatrix(m);
		                pattern.setTransform(matrix);
		            }
		            return pattern;
		        }
		    }
		    _getLinearGradient() {
		        return this._getCache(linearGradient, this.__getLinearGradient);
		    }
		    __getLinearGradient() {
		        var colorStops = this.fillLinearGradientColorStops();
		        if (colorStops) {
		            var ctx = getDummyContext();
		            var start = this.fillLinearGradientStartPoint();
		            var end = this.fillLinearGradientEndPoint();
		            var grd = ctx.createLinearGradient(start.x, start.y, end.x, end.y);
		            for (var n = 0; n < colorStops.length; n += 2) {
		                grd.addColorStop(colorStops[n], colorStops[n + 1]);
		            }
		            return grd;
		        }
		    }
		    _getRadialGradient() {
		        return this._getCache(radialGradient, this.__getRadialGradient);
		    }
		    __getRadialGradient() {
		        var colorStops = this.fillRadialGradientColorStops();
		        if (colorStops) {
		            var ctx = getDummyContext();
		            var start = this.fillRadialGradientStartPoint();
		            var end = this.fillRadialGradientEndPoint();
		            var grd = ctx.createRadialGradient(start.x, start.y, this.fillRadialGradientStartRadius(), end.x, end.y, this.fillRadialGradientEndRadius());
		            for (var n = 0; n < colorStops.length; n += 2) {
		                grd.addColorStop(colorStops[n], colorStops[n + 1]);
		            }
		            return grd;
		        }
		    }
		    getShadowRGBA() {
		        return this._getCache(SHADOW_RGBA, this._getShadowRGBA);
		    }
		    _getShadowRGBA() {
		        if (!this.hasShadow()) {
		            return;
		        }
		        var rgba = Util_1.Util.colorToRGBA(this.shadowColor());
		        if (rgba) {
		            return ('rgba(' +
		                rgba.r +
		                ',' +
		                rgba.g +
		                ',' +
		                rgba.b +
		                ',' +
		                rgba.a * (this.shadowOpacity() || 1) +
		                ')');
		        }
		    }
		    hasFill() {
		        return this._calculate('hasFill', [
		            'fillEnabled',
		            'fill',
		            'fillPatternImage',
		            'fillLinearGradientColorStops',
		            'fillRadialGradientColorStops',
		        ], () => {
		            return (this.fillEnabled() &&
		                !!(this.fill() ||
		                    this.fillPatternImage() ||
		                    this.fillLinearGradientColorStops() ||
		                    this.fillRadialGradientColorStops()));
		        });
		    }
		    hasStroke() {
		        return this._calculate('hasStroke', [
		            'strokeEnabled',
		            'strokeWidth',
		            'stroke',
		            'strokeLinearGradientColorStops',
		        ], () => {
		            return (this.strokeEnabled() &&
		                this.strokeWidth() &&
		                !!(this.stroke() || this.strokeLinearGradientColorStops()));
		        });
		    }
		    hasHitStroke() {
		        const width = this.hitStrokeWidth();
		        if (width === 'auto') {
		            return this.hasStroke();
		        }
		        return this.strokeEnabled() && !!width;
		    }
		    intersects(point) {
		        var stage = this.getStage();
		        if (!stage) {
		            return false;
		        }
		        const bufferHitCanvas = stage.bufferHitCanvas;
		        bufferHitCanvas.getContext().clear();
		        this.drawHit(bufferHitCanvas, undefined, true);
		        const p = bufferHitCanvas.context.getImageData(Math.round(point.x), Math.round(point.y), 1, 1).data;
		        return p[3] > 0;
		    }
		    destroy() {
		        Node_1.Node.prototype.destroy.call(this);
		        delete exports.shapes[this.colorKey];
		        delete this.colorKey;
		        return this;
		    }
		    _useBufferCanvas(forceFill) {
		        var _a;
		        const perfectDrawEnabled = (_a = this.attrs.perfectDrawEnabled) !== null && _a !== void 0 ? _a : true;
		        if (!perfectDrawEnabled) {
		            return false;
		        }
		        const hasFill = forceFill || this.hasFill();
		        const hasStroke = this.hasStroke();
		        const isTransparent = this.getAbsoluteOpacity() !== 1;
		        if (hasFill && hasStroke && isTransparent) {
		            return true;
		        }
		        const hasShadow = this.hasShadow();
		        const strokeForShadow = this.shadowForStrokeEnabled();
		        if (hasFill && hasStroke && hasShadow && strokeForShadow) {
		            return true;
		        }
		        return false;
		    }
		    setStrokeHitEnabled(val) {
		        Util_1.Util.warn('strokeHitEnabled property is deprecated. Please use hitStrokeWidth instead.');
		        if (val) {
		            this.hitStrokeWidth('auto');
		        }
		        else {
		            this.hitStrokeWidth(0);
		        }
		    }
		    getStrokeHitEnabled() {
		        if (this.hitStrokeWidth() === 0) {
		            return false;
		        }
		        else {
		            return true;
		        }
		    }
		    getSelfRect() {
		        var size = this.size();
		        return {
		            x: this._centroid ? -size.width / 2 : 0,
		            y: this._centroid ? -size.height / 2 : 0,
		            width: size.width,
		            height: size.height,
		        };
		    }
		    getClientRect(config = {}) {
		        const skipTransform = config.skipTransform;
		        const relativeTo = config.relativeTo;
		        const fillRect = this.getSelfRect();
		        const applyStroke = !config.skipStroke && this.hasStroke();
		        const strokeWidth = (applyStroke && this.strokeWidth()) || 0;
		        const fillAndStrokeWidth = fillRect.width + strokeWidth;
		        const fillAndStrokeHeight = fillRect.height + strokeWidth;
		        const applyShadow = !config.skipShadow && this.hasShadow();
		        const shadowOffsetX = applyShadow ? this.shadowOffsetX() : 0;
		        const shadowOffsetY = applyShadow ? this.shadowOffsetY() : 0;
		        const preWidth = fillAndStrokeWidth + Math.abs(shadowOffsetX);
		        const preHeight = fillAndStrokeHeight + Math.abs(shadowOffsetY);
		        const blurRadius = (applyShadow && this.shadowBlur()) || 0;
		        const width = preWidth + blurRadius * 2;
		        const height = preHeight + blurRadius * 2;
		        const rect = {
		            width: width,
		            height: height,
		            x: -(strokeWidth / 2 + blurRadius) +
		                Math.min(shadowOffsetX, 0) +
		                fillRect.x,
		            y: -(strokeWidth / 2 + blurRadius) +
		                Math.min(shadowOffsetY, 0) +
		                fillRect.y,
		        };
		        if (!skipTransform) {
		            return this._transformedRect(rect, relativeTo);
		        }
		        return rect;
		    }
		    drawScene(can, top, bufferCanvas) {
		        var layer = this.getLayer();
		        var canvas = can || layer.getCanvas(), context = canvas.getContext(), cachedCanvas = this._getCanvasCache(), drawFunc = this.getSceneFunc(), hasShadow = this.hasShadow(), stage, bufferContext;
		        var skipBuffer = canvas.isCache;
		        var cachingSelf = top === this;
		        if (!this.isVisible() && !cachingSelf) {
		            return this;
		        }
		        if (cachedCanvas) {
		            context.save();
		            var m = this.getAbsoluteTransform(top).getMatrix();
		            context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
		            this._drawCachedSceneCanvas(context);
		            context.restore();
		            return this;
		        }
		        if (!drawFunc) {
		            return this;
		        }
		        context.save();
		        if (this._useBufferCanvas() && !skipBuffer) {
		            stage = this.getStage();
		            const bc = bufferCanvas || stage.bufferCanvas;
		            bufferContext = bc.getContext();
		            bufferContext.clear();
		            bufferContext.save();
		            bufferContext._applyLineJoin(this);
		            var o = this.getAbsoluteTransform(top).getMatrix();
		            bufferContext.transform(o[0], o[1], o[2], o[3], o[4], o[5]);
		            drawFunc.call(this, bufferContext, this);
		            bufferContext.restore();
		            var ratio = bc.pixelRatio;
		            if (hasShadow) {
		                context._applyShadow(this);
		            }
		            context._applyOpacity(this);
		            context._applyGlobalCompositeOperation(this);
		            context.drawImage(bc._canvas, 0, 0, bc.width / ratio, bc.height / ratio);
		        }
		        else {
		            context._applyLineJoin(this);
		            if (!cachingSelf) {
		                var o = this.getAbsoluteTransform(top).getMatrix();
		                context.transform(o[0], o[1], o[2], o[3], o[4], o[5]);
		                context._applyOpacity(this);
		                context._applyGlobalCompositeOperation(this);
		            }
		            if (hasShadow) {
		                context._applyShadow(this);
		            }
		            drawFunc.call(this, context, this);
		        }
		        context.restore();
		        return this;
		    }
		    drawHit(can, top, skipDragCheck = false) {
		        if (!this.shouldDrawHit(top, skipDragCheck)) {
		            return this;
		        }
		        var layer = this.getLayer(), canvas = can || layer.hitCanvas, context = canvas && canvas.getContext(), drawFunc = this.hitFunc() || this.sceneFunc(), cachedCanvas = this._getCanvasCache(), cachedHitCanvas = cachedCanvas && cachedCanvas.hit;
		        if (!this.colorKey) {
		            Util_1.Util.warn('Looks like your canvas has a destroyed shape in it. Do not reuse shape after you destroyed it. If you want to reuse shape you should call remove() instead of destroy()');
		        }
		        if (cachedHitCanvas) {
		            context.save();
		            var m = this.getAbsoluteTransform(top).getMatrix();
		            context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
		            this._drawCachedHitCanvas(context);
		            context.restore();
		            return this;
		        }
		        if (!drawFunc) {
		            return this;
		        }
		        context.save();
		        context._applyLineJoin(this);
		        const selfCache = this === top;
		        if (!selfCache) {
		            var o = this.getAbsoluteTransform(top).getMatrix();
		            context.transform(o[0], o[1], o[2], o[3], o[4], o[5]);
		        }
		        drawFunc.call(this, context, this);
		        context.restore();
		        return this;
		    }
		    drawHitFromCache(alphaThreshold = 0) {
		        var cachedCanvas = this._getCanvasCache(), sceneCanvas = this._getCachedSceneCanvas(), hitCanvas = cachedCanvas.hit, hitContext = hitCanvas.getContext(), hitWidth = hitCanvas.getWidth(), hitHeight = hitCanvas.getHeight(), hitImageData, hitData, len, rgbColorKey, i, alpha;
		        hitContext.clear();
		        hitContext.drawImage(sceneCanvas._canvas, 0, 0, hitWidth, hitHeight);
		        try {
		            hitImageData = hitContext.getImageData(0, 0, hitWidth, hitHeight);
		            hitData = hitImageData.data;
		            len = hitData.length;
		            rgbColorKey = Util_1.Util._hexToRgb(this.colorKey);
		            for (i = 0; i < len; i += 4) {
		                alpha = hitData[i + 3];
		                if (alpha > alphaThreshold) {
		                    hitData[i] = rgbColorKey.r;
		                    hitData[i + 1] = rgbColorKey.g;
		                    hitData[i + 2] = rgbColorKey.b;
		                    hitData[i + 3] = 255;
		                }
		                else {
		                    hitData[i + 3] = 0;
		                }
		            }
		            hitContext.putImageData(hitImageData, 0, 0);
		        }
		        catch (e) {
		            Util_1.Util.error('Unable to draw hit graph from cached scene canvas. ' + e.message);
		        }
		        return this;
		    }
		    hasPointerCapture(pointerId) {
		        return PointerEvents.hasPointerCapture(pointerId, this);
		    }
		    setPointerCapture(pointerId) {
		        PointerEvents.setPointerCapture(pointerId, this);
		    }
		    releaseCapture(pointerId) {
		        PointerEvents.releaseCapture(pointerId, this);
		    }
		}
		exports.Shape = Shape;
		Shape.prototype._fillFunc = _fillFunc;
		Shape.prototype._strokeFunc = _strokeFunc;
		Shape.prototype._fillFuncHit = _fillFuncHit;
		Shape.prototype._strokeFuncHit = _strokeFuncHit;
		Shape.prototype._centroid = false;
		Shape.prototype.nodeType = 'Shape';
		(0, Global_2._registerNode)(Shape);
		Shape.prototype.eventListeners = {};
		Shape.prototype.on.call(Shape.prototype, 'shadowColorChange.konva shadowBlurChange.konva shadowOffsetChange.konva shadowOpacityChange.konva shadowEnabledChange.konva', _clearHasShadowCache);
		Shape.prototype.on.call(Shape.prototype, 'shadowColorChange.konva shadowOpacityChange.konva shadowEnabledChange.konva', _clearGetShadowRGBACache);
		Shape.prototype.on.call(Shape.prototype, 'fillPriorityChange.konva fillPatternImageChange.konva fillPatternRepeatChange.konva fillPatternScaleXChange.konva fillPatternScaleYChange.konva fillPatternOffsetXChange.konva fillPatternOffsetYChange.konva fillPatternXChange.konva fillPatternYChange.konva fillPatternRotationChange.konva', _clearFillPatternCache);
		Shape.prototype.on.call(Shape.prototype, 'fillPriorityChange.konva fillLinearGradientColorStopsChange.konva fillLinearGradientStartPointXChange.konva fillLinearGradientStartPointYChange.konva fillLinearGradientEndPointXChange.konva fillLinearGradientEndPointYChange.konva', _clearLinearGradientCache);
		Shape.prototype.on.call(Shape.prototype, 'fillPriorityChange.konva fillRadialGradientColorStopsChange.konva fillRadialGradientStartPointXChange.konva fillRadialGradientStartPointYChange.konva fillRadialGradientEndPointXChange.konva fillRadialGradientEndPointYChange.konva fillRadialGradientStartRadiusChange.konva fillRadialGradientEndRadiusChange.konva', _clearRadialGradientCache);
		Factory_1.Factory.addGetterSetter(Shape, 'stroke', undefined, (0, Validators_1.getStringOrGradientValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'strokeWidth', 2, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'fillAfterStrokeEnabled', false);
		Factory_1.Factory.addGetterSetter(Shape, 'hitStrokeWidth', 'auto', (0, Validators_1.getNumberOrAutoValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'strokeHitEnabled', true, (0, Validators_1.getBooleanValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'perfectDrawEnabled', true, (0, Validators_1.getBooleanValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'shadowForStrokeEnabled', true, (0, Validators_1.getBooleanValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'lineJoin');
		Factory_1.Factory.addGetterSetter(Shape, 'lineCap');
		Factory_1.Factory.addGetterSetter(Shape, 'sceneFunc');
		Factory_1.Factory.addGetterSetter(Shape, 'hitFunc');
		Factory_1.Factory.addGetterSetter(Shape, 'dash');
		Factory_1.Factory.addGetterSetter(Shape, 'dashOffset', 0, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'shadowColor', undefined, (0, Validators_1.getStringValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'shadowBlur', 0, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'shadowOpacity', 1, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addComponentsGetterSetter(Shape, 'shadowOffset', ['x', 'y']);
		Factory_1.Factory.addGetterSetter(Shape, 'shadowOffsetX', 0, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'shadowOffsetY', 0, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'fillPatternImage');
		Factory_1.Factory.addGetterSetter(Shape, 'fill', undefined, (0, Validators_1.getStringOrGradientValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'fillPatternX', 0, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'fillPatternY', 0, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'fillLinearGradientColorStops');
		Factory_1.Factory.addGetterSetter(Shape, 'strokeLinearGradientColorStops');
		Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientStartRadius', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientEndRadius', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientColorStops');
		Factory_1.Factory.addGetterSetter(Shape, 'fillPatternRepeat', 'repeat');
		Factory_1.Factory.addGetterSetter(Shape, 'fillEnabled', true);
		Factory_1.Factory.addGetterSetter(Shape, 'strokeEnabled', true);
		Factory_1.Factory.addGetterSetter(Shape, 'shadowEnabled', true);
		Factory_1.Factory.addGetterSetter(Shape, 'dashEnabled', true);
		Factory_1.Factory.addGetterSetter(Shape, 'strokeScaleEnabled', true);
		Factory_1.Factory.addGetterSetter(Shape, 'fillPriority', 'color');
		Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillPatternOffset', ['x', 'y']);
		Factory_1.Factory.addGetterSetter(Shape, 'fillPatternOffsetX', 0, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'fillPatternOffsetY', 0, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillPatternScale', ['x', 'y']);
		Factory_1.Factory.addGetterSetter(Shape, 'fillPatternScaleX', 1, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'fillPatternScaleY', 1, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillLinearGradientStartPoint', [
		    'x',
		    'y',
		]);
		Factory_1.Factory.addComponentsGetterSetter(Shape, 'strokeLinearGradientStartPoint', [
		    'x',
		    'y',
		]);
		Factory_1.Factory.addGetterSetter(Shape, 'fillLinearGradientStartPointX', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'strokeLinearGradientStartPointX', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'fillLinearGradientStartPointY', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'strokeLinearGradientStartPointY', 0);
		Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillLinearGradientEndPoint', [
		    'x',
		    'y',
		]);
		Factory_1.Factory.addComponentsGetterSetter(Shape, 'strokeLinearGradientEndPoint', [
		    'x',
		    'y',
		]);
		Factory_1.Factory.addGetterSetter(Shape, 'fillLinearGradientEndPointX', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'strokeLinearGradientEndPointX', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'fillLinearGradientEndPointY', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'strokeLinearGradientEndPointY', 0);
		Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillRadialGradientStartPoint', [
		    'x',
		    'y',
		]);
		Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientStartPointX', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientStartPointY', 0);
		Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillRadialGradientEndPoint', [
		    'x',
		    'y',
		]);
		Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientEndPointX', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientEndPointY', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'fillPatternRotation', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'fillRule', undefined, (0, Validators_1.getStringValidator)());
		Factory_1.Factory.backCompat(Shape, {
		    dashArray: 'dash',
		    getDashArray: 'getDash',
		    setDashArray: 'getDash',
		    drawFunc: 'sceneFunc',
		    getDrawFunc: 'getSceneFunc',
		    setDrawFunc: 'setSceneFunc',
		    drawHitFunc: 'hitFunc',
		    getDrawHitFunc: 'getHitFunc',
		    setDrawHitFunc: 'setHitFunc',
		}); 
	} (Shape));
	return Shape;
}

var hasRequiredLayer;

function requireLayer () {
	if (hasRequiredLayer) return Layer$1;
	hasRequiredLayer = 1;
	Object.defineProperty(Layer$1, "__esModule", { value: true });
	Layer$1.Layer = void 0;
	const Util_1 = requireUtil();
	const Container_1 = requireContainer();
	const Node_1 = requireNode();
	const Factory_1 = requireFactory();
	const Canvas_1 = requireCanvas();
	const Validators_1 = requireValidators();
	const Shape_1 = requireShape();
	const Global_1 = requireGlobal();
	var HASH = '#', BEFORE_DRAW = 'beforeDraw', DRAW = 'draw', INTERSECTION_OFFSETS = [
	    { x: 0, y: 0 },
	    { x: -1, y: -1 },
	    { x: 1, y: -1 },
	    { x: 1, y: 1 },
	    { x: -1, y: 1 },
	], INTERSECTION_OFFSETS_LEN = INTERSECTION_OFFSETS.length;
	class Layer extends Container_1.Container {
	    constructor(config) {
	        super(config);
	        this.canvas = new Canvas_1.SceneCanvas();
	        this.hitCanvas = new Canvas_1.HitCanvas({
	            pixelRatio: 1,
	        });
	        this._waitingForDraw = false;
	        this.on('visibleChange.konva', this._checkVisibility);
	        this._checkVisibility();
	        this.on('imageSmoothingEnabledChange.konva', this._setSmoothEnabled);
	        this._setSmoothEnabled();
	    }
	    createPNGStream() {
	        const c = this.canvas._canvas;
	        return c.createPNGStream();
	    }
	    getCanvas() {
	        return this.canvas;
	    }
	    getNativeCanvasElement() {
	        return this.canvas._canvas;
	    }
	    getHitCanvas() {
	        return this.hitCanvas;
	    }
	    getContext() {
	        return this.getCanvas().getContext();
	    }
	    clear(bounds) {
	        this.getContext().clear(bounds);
	        this.getHitCanvas().getContext().clear(bounds);
	        return this;
	    }
	    setZIndex(index) {
	        super.setZIndex(index);
	        var stage = this.getStage();
	        if (stage && stage.content) {
	            stage.content.removeChild(this.getNativeCanvasElement());
	            if (index < stage.children.length - 1) {
	                stage.content.insertBefore(this.getNativeCanvasElement(), stage.children[index + 1].getCanvas()._canvas);
	            }
	            else {
	                stage.content.appendChild(this.getNativeCanvasElement());
	            }
	        }
	        return this;
	    }
	    moveToTop() {
	        Node_1.Node.prototype.moveToTop.call(this);
	        var stage = this.getStage();
	        if (stage && stage.content) {
	            stage.content.removeChild(this.getNativeCanvasElement());
	            stage.content.appendChild(this.getNativeCanvasElement());
	        }
	        return true;
	    }
	    moveUp() {
	        var moved = Node_1.Node.prototype.moveUp.call(this);
	        if (!moved) {
	            return false;
	        }
	        var stage = this.getStage();
	        if (!stage || !stage.content) {
	            return false;
	        }
	        stage.content.removeChild(this.getNativeCanvasElement());
	        if (this.index < stage.children.length - 1) {
	            stage.content.insertBefore(this.getNativeCanvasElement(), stage.children[this.index + 1].getCanvas()._canvas);
	        }
	        else {
	            stage.content.appendChild(this.getNativeCanvasElement());
	        }
	        return true;
	    }
	    moveDown() {
	        if (Node_1.Node.prototype.moveDown.call(this)) {
	            var stage = this.getStage();
	            if (stage) {
	                var children = stage.children;
	                if (stage.content) {
	                    stage.content.removeChild(this.getNativeCanvasElement());
	                    stage.content.insertBefore(this.getNativeCanvasElement(), children[this.index + 1].getCanvas()._canvas);
	                }
	            }
	            return true;
	        }
	        return false;
	    }
	    moveToBottom() {
	        if (Node_1.Node.prototype.moveToBottom.call(this)) {
	            var stage = this.getStage();
	            if (stage) {
	                var children = stage.children;
	                if (stage.content) {
	                    stage.content.removeChild(this.getNativeCanvasElement());
	                    stage.content.insertBefore(this.getNativeCanvasElement(), children[1].getCanvas()._canvas);
	                }
	            }
	            return true;
	        }
	        return false;
	    }
	    getLayer() {
	        return this;
	    }
	    remove() {
	        var _canvas = this.getNativeCanvasElement();
	        Node_1.Node.prototype.remove.call(this);
	        if (_canvas && _canvas.parentNode && Util_1.Util._isInDocument(_canvas)) {
	            _canvas.parentNode.removeChild(_canvas);
	        }
	        return this;
	    }
	    getStage() {
	        return this.parent;
	    }
	    setSize({ width, height }) {
	        this.canvas.setSize(width, height);
	        this.hitCanvas.setSize(width, height);
	        this._setSmoothEnabled();
	        return this;
	    }
	    _validateAdd(child) {
	        var type = child.getType();
	        if (type !== 'Group' && type !== 'Shape') {
	            Util_1.Util.throw('You may only add groups and shapes to a layer.');
	        }
	    }
	    _toKonvaCanvas(config) {
	        config = config || {};
	        config.width = config.width || this.getWidth();
	        config.height = config.height || this.getHeight();
	        config.x = config.x !== undefined ? config.x : this.x();
	        config.y = config.y !== undefined ? config.y : this.y();
	        return Node_1.Node.prototype._toKonvaCanvas.call(this, config);
	    }
	    _checkVisibility() {
	        const visible = this.visible();
	        if (visible) {
	            this.canvas._canvas.style.display = 'block';
	        }
	        else {
	            this.canvas._canvas.style.display = 'none';
	        }
	    }
	    _setSmoothEnabled() {
	        this.getContext()._context.imageSmoothingEnabled =
	            this.imageSmoothingEnabled();
	    }
	    getWidth() {
	        if (this.parent) {
	            return this.parent.width();
	        }
	    }
	    setWidth() {
	        Util_1.Util.warn('Can not change width of layer. Use "stage.width(value)" function instead.');
	    }
	    getHeight() {
	        if (this.parent) {
	            return this.parent.height();
	        }
	    }
	    setHeight() {
	        Util_1.Util.warn('Can not change height of layer. Use "stage.height(value)" function instead.');
	    }
	    batchDraw() {
	        if (!this._waitingForDraw) {
	            this._waitingForDraw = true;
	            Util_1.Util.requestAnimFrame(() => {
	                this.draw();
	                this._waitingForDraw = false;
	            });
	        }
	        return this;
	    }
	    getIntersection(pos) {
	        if (!this.isListening() || !this.isVisible()) {
	            return null;
	        }
	        var spiralSearchDistance = 1;
	        var continueSearch = false;
	        while (true) {
	            for (let i = 0; i < INTERSECTION_OFFSETS_LEN; i++) {
	                const intersectionOffset = INTERSECTION_OFFSETS[i];
	                const obj = this._getIntersection({
	                    x: pos.x + intersectionOffset.x * spiralSearchDistance,
	                    y: pos.y + intersectionOffset.y * spiralSearchDistance,
	                });
	                const shape = obj.shape;
	                if (shape) {
	                    return shape;
	                }
	                continueSearch = !!obj.antialiased;
	                if (!obj.antialiased) {
	                    break;
	                }
	            }
	            if (continueSearch) {
	                spiralSearchDistance += 1;
	            }
	            else {
	                return null;
	            }
	        }
	    }
	    _getIntersection(pos) {
	        const ratio = this.hitCanvas.pixelRatio;
	        const p = this.hitCanvas.context.getImageData(Math.round(pos.x * ratio), Math.round(pos.y * ratio), 1, 1).data;
	        const p3 = p[3];
	        if (p3 === 255) {
	            const colorKey = Util_1.Util._rgbToHex(p[0], p[1], p[2]);
	            const shape = Shape_1.shapes[HASH + colorKey];
	            if (shape) {
	                return {
	                    shape: shape,
	                };
	            }
	            return {
	                antialiased: true,
	            };
	        }
	        else if (p3 > 0) {
	            return {
	                antialiased: true,
	            };
	        }
	        return {};
	    }
	    drawScene(can, top) {
	        var layer = this.getLayer(), canvas = can || (layer && layer.getCanvas());
	        this._fire(BEFORE_DRAW, {
	            node: this,
	        });
	        if (this.clearBeforeDraw()) {
	            canvas.getContext().clear();
	        }
	        Container_1.Container.prototype.drawScene.call(this, canvas, top);
	        this._fire(DRAW, {
	            node: this,
	        });
	        return this;
	    }
	    drawHit(can, top) {
	        var layer = this.getLayer(), canvas = can || (layer && layer.hitCanvas);
	        if (layer && layer.clearBeforeDraw()) {
	            layer.getHitCanvas().getContext().clear();
	        }
	        Container_1.Container.prototype.drawHit.call(this, canvas, top);
	        return this;
	    }
	    enableHitGraph() {
	        this.hitGraphEnabled(true);
	        return this;
	    }
	    disableHitGraph() {
	        this.hitGraphEnabled(false);
	        return this;
	    }
	    setHitGraphEnabled(val) {
	        Util_1.Util.warn('hitGraphEnabled method is deprecated. Please use layer.listening() instead.');
	        this.listening(val);
	    }
	    getHitGraphEnabled(val) {
	        Util_1.Util.warn('hitGraphEnabled method is deprecated. Please use layer.listening() instead.');
	        return this.listening();
	    }
	    toggleHitCanvas() {
	        if (!this.parent || !this.parent['content']) {
	            return;
	        }
	        var parent = this.parent;
	        var added = !!this.hitCanvas._canvas.parentNode;
	        if (added) {
	            parent.content.removeChild(this.hitCanvas._canvas);
	        }
	        else {
	            parent.content.appendChild(this.hitCanvas._canvas);
	        }
	    }
	    destroy() {
	        Util_1.Util.releaseCanvas(this.getNativeCanvasElement(), this.getHitCanvas()._canvas);
	        return super.destroy();
	    }
	}
	Layer$1.Layer = Layer;
	Layer.prototype.nodeType = 'Layer';
	(0, Global_1._registerNode)(Layer);
	Factory_1.Factory.addGetterSetter(Layer, 'imageSmoothingEnabled', true);
	Factory_1.Factory.addGetterSetter(Layer, 'clearBeforeDraw', true);
	Factory_1.Factory.addGetterSetter(Layer, 'hitGraphEnabled', true, (0, Validators_1.getBooleanValidator)());
	return Layer$1;
}

var FastLayer = {};

var hasRequiredFastLayer;

function requireFastLayer () {
	if (hasRequiredFastLayer) return FastLayer;
	hasRequiredFastLayer = 1;
	Object.defineProperty(FastLayer, "__esModule", { value: true });
	FastLayer.FastLayer = void 0;
	const Util_1 = requireUtil();
	const Layer_1 = requireLayer();
	const Global_1 = requireGlobal();
	let FastLayer$1 = class FastLayer extends Layer_1.Layer {
	    constructor(attrs) {
	        super(attrs);
	        this.listening(false);
	        Util_1.Util.warn('Konva.Fast layer is deprecated. Please use "new Konva.Layer({ listening: false })" instead.');
	    }
	};
	FastLayer.FastLayer = FastLayer$1;
	FastLayer$1.prototype.nodeType = 'FastLayer';
	(0, Global_1._registerNode)(FastLayer$1);
	return FastLayer;
}

var Group$1 = {};

var hasRequiredGroup;

function requireGroup () {
	if (hasRequiredGroup) return Group$1;
	hasRequiredGroup = 1;
	Object.defineProperty(Group$1, "__esModule", { value: true });
	Group$1.Group = void 0;
	const Util_1 = requireUtil();
	const Container_1 = requireContainer();
	const Global_1 = requireGlobal();
	class Group extends Container_1.Container {
	    _validateAdd(child) {
	        var type = child.getType();
	        if (type !== 'Group' && type !== 'Shape') {
	            Util_1.Util.throw('You may only add groups and shapes to groups.');
	        }
	    }
	}
	Group$1.Group = Group;
	Group.prototype.nodeType = 'Group';
	(0, Global_1._registerNode)(Group);
	return Group$1;
}

var Animation = {};

var hasRequiredAnimation;

function requireAnimation () {
	if (hasRequiredAnimation) return Animation;
	hasRequiredAnimation = 1;
	Object.defineProperty(Animation, "__esModule", { value: true });
	Animation.Animation = void 0;
	const Global_1 = requireGlobal();
	const Util_1 = requireUtil();
	const now = (function () {
	    if (Global_1.glob.performance && Global_1.glob.performance.now) {
	        return function () {
	            return Global_1.glob.performance.now();
	        };
	    }
	    return function () {
	        return new Date().getTime();
	    };
	})();
	let Animation$1 = class Animation {
	    constructor(func, layers) {
	        this.id = Animation.animIdCounter++;
	        this.frame = {
	            time: 0,
	            timeDiff: 0,
	            lastTime: now(),
	            frameRate: 0,
	        };
	        this.func = func;
	        this.setLayers(layers);
	    }
	    setLayers(layers) {
	        let lays = [];
	        if (layers) {
	            lays = Array.isArray(layers) ? layers : [layers];
	        }
	        this.layers = lays;
	        return this;
	    }
	    getLayers() {
	        return this.layers;
	    }
	    addLayer(layer) {
	        const layers = this.layers;
	        const len = layers.length;
	        for (let n = 0; n < len; n++) {
	            if (layers[n]._id === layer._id) {
	                return false;
	            }
	        }
	        this.layers.push(layer);
	        return true;
	    }
	    isRunning() {
	        const a = Animation;
	        const animations = a.animations;
	        const len = animations.length;
	        for (let n = 0; n < len; n++) {
	            if (animations[n].id === this.id) {
	                return true;
	            }
	        }
	        return false;
	    }
	    start() {
	        this.stop();
	        this.frame.timeDiff = 0;
	        this.frame.lastTime = now();
	        Animation._addAnimation(this);
	        return this;
	    }
	    stop() {
	        Animation._removeAnimation(this);
	        return this;
	    }
	    _updateFrameObject(time) {
	        this.frame.timeDiff = time - this.frame.lastTime;
	        this.frame.lastTime = time;
	        this.frame.time += this.frame.timeDiff;
	        this.frame.frameRate = 1000 / this.frame.timeDiff;
	    }
	    static _addAnimation(anim) {
	        this.animations.push(anim);
	        this._handleAnimation();
	    }
	    static _removeAnimation(anim) {
	        const id = anim.id;
	        const animations = this.animations;
	        const len = animations.length;
	        for (let n = 0; n < len; n++) {
	            if (animations[n].id === id) {
	                this.animations.splice(n, 1);
	                break;
	            }
	        }
	    }
	    static _runFrames() {
	        const layerHash = {};
	        const animations = this.animations;
	        for (let n = 0; n < animations.length; n++) {
	            const anim = animations[n];
	            const layers = anim.layers;
	            const func = anim.func;
	            anim._updateFrameObject(now());
	            const layersLen = layers.length;
	            let needRedraw;
	            if (func) {
	                needRedraw = func.call(anim, anim.frame) !== false;
	            }
	            else {
	                needRedraw = true;
	            }
	            if (!needRedraw) {
	                continue;
	            }
	            for (let i = 0; i < layersLen; i++) {
	                const layer = layers[i];
	                if (layer._id !== undefined) {
	                    layerHash[layer._id] = layer;
	                }
	            }
	        }
	        for (let key in layerHash) {
	            if (!layerHash.hasOwnProperty(key)) {
	                continue;
	            }
	            layerHash[key].batchDraw();
	        }
	    }
	    static _animationLoop() {
	        const Anim = Animation;
	        if (Anim.animations.length) {
	            Anim._runFrames();
	            Util_1.Util.requestAnimFrame(Anim._animationLoop);
	        }
	        else {
	            Anim.animRunning = false;
	        }
	    }
	    static _handleAnimation() {
	        if (!this.animRunning) {
	            this.animRunning = true;
	            Util_1.Util.requestAnimFrame(this._animationLoop);
	        }
	    }
	};
	Animation.Animation = Animation$1;
	Animation$1.animations = [];
	Animation$1.animIdCounter = 0;
	Animation$1.animRunning = false;
	return Animation;
}

var Tween = {};

var hasRequiredTween;

function requireTween () {
	if (hasRequiredTween) return Tween;
	hasRequiredTween = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Easings = exports.Tween = void 0;
		const Util_1 = requireUtil();
		const Animation_1 = requireAnimation();
		const Node_1 = requireNode();
		const Global_1 = requireGlobal();
		var blacklist = {
		    node: 1,
		    duration: 1,
		    easing: 1,
		    onFinish: 1,
		    yoyo: 1,
		}, PAUSED = 1, PLAYING = 2, REVERSING = 3, idCounter = 0, colorAttrs = ['fill', 'stroke', 'shadowColor'];
		class TweenEngine {
		    constructor(prop, propFunc, func, begin, finish, duration, yoyo) {
		        this.prop = prop;
		        this.propFunc = propFunc;
		        this.begin = begin;
		        this._pos = begin;
		        this.duration = duration;
		        this._change = 0;
		        this.prevPos = 0;
		        this.yoyo = yoyo;
		        this._time = 0;
		        this._position = 0;
		        this._startTime = 0;
		        this._finish = 0;
		        this.func = func;
		        this._change = finish - this.begin;
		        this.pause();
		    }
		    fire(str) {
		        var handler = this[str];
		        if (handler) {
		            handler();
		        }
		    }
		    setTime(t) {
		        if (t > this.duration) {
		            if (this.yoyo) {
		                this._time = this.duration;
		                this.reverse();
		            }
		            else {
		                this.finish();
		            }
		        }
		        else if (t < 0) {
		            if (this.yoyo) {
		                this._time = 0;
		                this.play();
		            }
		            else {
		                this.reset();
		            }
		        }
		        else {
		            this._time = t;
		            this.update();
		        }
		    }
		    getTime() {
		        return this._time;
		    }
		    setPosition(p) {
		        this.prevPos = this._pos;
		        this.propFunc(p);
		        this._pos = p;
		    }
		    getPosition(t) {
		        if (t === undefined) {
		            t = this._time;
		        }
		        return this.func(t, this.begin, this._change, this.duration);
		    }
		    play() {
		        this.state = PLAYING;
		        this._startTime = this.getTimer() - this._time;
		        this.onEnterFrame();
		        this.fire('onPlay');
		    }
		    reverse() {
		        this.state = REVERSING;
		        this._time = this.duration - this._time;
		        this._startTime = this.getTimer() - this._time;
		        this.onEnterFrame();
		        this.fire('onReverse');
		    }
		    seek(t) {
		        this.pause();
		        this._time = t;
		        this.update();
		        this.fire('onSeek');
		    }
		    reset() {
		        this.pause();
		        this._time = 0;
		        this.update();
		        this.fire('onReset');
		    }
		    finish() {
		        this.pause();
		        this._time = this.duration;
		        this.update();
		        this.fire('onFinish');
		    }
		    update() {
		        this.setPosition(this.getPosition(this._time));
		        this.fire('onUpdate');
		    }
		    onEnterFrame() {
		        var t = this.getTimer() - this._startTime;
		        if (this.state === PLAYING) {
		            this.setTime(t);
		        }
		        else if (this.state === REVERSING) {
		            this.setTime(this.duration - t);
		        }
		    }
		    pause() {
		        this.state = PAUSED;
		        this.fire('onPause');
		    }
		    getTimer() {
		        return new Date().getTime();
		    }
		}
		class Tween {
		    constructor(config) {
		        var that = this, node = config.node, nodeId = node._id, duration, easing = config.easing || exports.Easings.Linear, yoyo = !!config.yoyo, key;
		        if (typeof config.duration === 'undefined') {
		            duration = 0.3;
		        }
		        else if (config.duration === 0) {
		            duration = 0.001;
		        }
		        else {
		            duration = config.duration;
		        }
		        this.node = node;
		        this._id = idCounter++;
		        var layers = node.getLayer() ||
		            (node instanceof Global_1.Konva['Stage'] ? node.getLayers() : null);
		        if (!layers) {
		            Util_1.Util.error('Tween constructor have `node` that is not in a layer. Please add node into layer first.');
		        }
		        this.anim = new Animation_1.Animation(function () {
		            that.tween.onEnterFrame();
		        }, layers);
		        this.tween = new TweenEngine(key, function (i) {
		            that._tweenFunc(i);
		        }, easing, 0, 1, duration * 1000, yoyo);
		        this._addListeners();
		        if (!Tween.attrs[nodeId]) {
		            Tween.attrs[nodeId] = {};
		        }
		        if (!Tween.attrs[nodeId][this._id]) {
		            Tween.attrs[nodeId][this._id] = {};
		        }
		        if (!Tween.tweens[nodeId]) {
		            Tween.tweens[nodeId] = {};
		        }
		        for (key in config) {
		            if (blacklist[key] === undefined) {
		                this._addAttr(key, config[key]);
		            }
		        }
		        this.reset();
		        this.onFinish = config.onFinish;
		        this.onReset = config.onReset;
		        this.onUpdate = config.onUpdate;
		    }
		    _addAttr(key, end) {
		        var node = this.node, nodeId = node._id, start, diff, tweenId, n, len, trueEnd, trueStart, endRGBA;
		        tweenId = Tween.tweens[nodeId][key];
		        if (tweenId) {
		            delete Tween.attrs[nodeId][tweenId][key];
		        }
		        start = node.getAttr(key);
		        if (Util_1.Util._isArray(end)) {
		            diff = [];
		            len = Math.max(end.length, start.length);
		            if (key === 'points' && end.length !== start.length) {
		                if (end.length > start.length) {
		                    trueStart = start;
		                    start = Util_1.Util._prepareArrayForTween(start, end, node.closed());
		                }
		                else {
		                    trueEnd = end;
		                    end = Util_1.Util._prepareArrayForTween(end, start, node.closed());
		                }
		            }
		            if (key.indexOf('fill') === 0) {
		                for (n = 0; n < len; n++) {
		                    if (n % 2 === 0) {
		                        diff.push(end[n] - start[n]);
		                    }
		                    else {
		                        var startRGBA = Util_1.Util.colorToRGBA(start[n]);
		                        endRGBA = Util_1.Util.colorToRGBA(end[n]);
		                        start[n] = startRGBA;
		                        diff.push({
		                            r: endRGBA.r - startRGBA.r,
		                            g: endRGBA.g - startRGBA.g,
		                            b: endRGBA.b - startRGBA.b,
		                            a: endRGBA.a - startRGBA.a,
		                        });
		                    }
		                }
		            }
		            else {
		                for (n = 0; n < len; n++) {
		                    diff.push(end[n] - start[n]);
		                }
		            }
		        }
		        else if (colorAttrs.indexOf(key) !== -1) {
		            start = Util_1.Util.colorToRGBA(start);
		            endRGBA = Util_1.Util.colorToRGBA(end);
		            diff = {
		                r: endRGBA.r - start.r,
		                g: endRGBA.g - start.g,
		                b: endRGBA.b - start.b,
		                a: endRGBA.a - start.a,
		            };
		        }
		        else {
		            diff = end - start;
		        }
		        Tween.attrs[nodeId][this._id][key] = {
		            start: start,
		            diff: diff,
		            end: end,
		            trueEnd: trueEnd,
		            trueStart: trueStart,
		        };
		        Tween.tweens[nodeId][key] = this._id;
		    }
		    _tweenFunc(i) {
		        var node = this.node, attrs = Tween.attrs[node._id][this._id], key, attr, start, diff, newVal, n, len, end;
		        for (key in attrs) {
		            attr = attrs[key];
		            start = attr.start;
		            diff = attr.diff;
		            end = attr.end;
		            if (Util_1.Util._isArray(start)) {
		                newVal = [];
		                len = Math.max(start.length, end.length);
		                if (key.indexOf('fill') === 0) {
		                    for (n = 0; n < len; n++) {
		                        if (n % 2 === 0) {
		                            newVal.push((start[n] || 0) + diff[n] * i);
		                        }
		                        else {
		                            newVal.push('rgba(' +
		                                Math.round(start[n].r + diff[n].r * i) +
		                                ',' +
		                                Math.round(start[n].g + diff[n].g * i) +
		                                ',' +
		                                Math.round(start[n].b + diff[n].b * i) +
		                                ',' +
		                                (start[n].a + diff[n].a * i) +
		                                ')');
		                        }
		                    }
		                }
		                else {
		                    for (n = 0; n < len; n++) {
		                        newVal.push((start[n] || 0) + diff[n] * i);
		                    }
		                }
		            }
		            else if (colorAttrs.indexOf(key) !== -1) {
		                newVal =
		                    'rgba(' +
		                        Math.round(start.r + diff.r * i) +
		                        ',' +
		                        Math.round(start.g + diff.g * i) +
		                        ',' +
		                        Math.round(start.b + diff.b * i) +
		                        ',' +
		                        (start.a + diff.a * i) +
		                        ')';
		            }
		            else {
		                newVal = start + diff * i;
		            }
		            node.setAttr(key, newVal);
		        }
		    }
		    _addListeners() {
		        this.tween.onPlay = () => {
		            this.anim.start();
		        };
		        this.tween.onReverse = () => {
		            this.anim.start();
		        };
		        this.tween.onPause = () => {
		            this.anim.stop();
		        };
		        this.tween.onFinish = () => {
		            var node = this.node;
		            var attrs = Tween.attrs[node._id][this._id];
		            if (attrs.points && attrs.points.trueEnd) {
		                node.setAttr('points', attrs.points.trueEnd);
		            }
		            if (this.onFinish) {
		                this.onFinish.call(this);
		            }
		        };
		        this.tween.onReset = () => {
		            var node = this.node;
		            var attrs = Tween.attrs[node._id][this._id];
		            if (attrs.points && attrs.points.trueStart) {
		                node.points(attrs.points.trueStart);
		            }
		            if (this.onReset) {
		                this.onReset();
		            }
		        };
		        this.tween.onUpdate = () => {
		            if (this.onUpdate) {
		                this.onUpdate.call(this);
		            }
		        };
		    }
		    play() {
		        this.tween.play();
		        return this;
		    }
		    reverse() {
		        this.tween.reverse();
		        return this;
		    }
		    reset() {
		        this.tween.reset();
		        return this;
		    }
		    seek(t) {
		        this.tween.seek(t * 1000);
		        return this;
		    }
		    pause() {
		        this.tween.pause();
		        return this;
		    }
		    finish() {
		        this.tween.finish();
		        return this;
		    }
		    destroy() {
		        var nodeId = this.node._id, thisId = this._id, attrs = Tween.tweens[nodeId], key;
		        this.pause();
		        for (key in attrs) {
		            delete Tween.tweens[nodeId][key];
		        }
		        delete Tween.attrs[nodeId][thisId];
		    }
		}
		exports.Tween = Tween;
		Tween.attrs = {};
		Tween.tweens = {};
		Node_1.Node.prototype.to = function (params) {
		    var onFinish = params.onFinish;
		    params.node = this;
		    params.onFinish = function () {
		        this.destroy();
		        if (onFinish) {
		            onFinish();
		        }
		    };
		    var tween = new Tween(params);
		    tween.play();
		};
		exports.Easings = {
		    BackEaseIn(t, b, c, d) {
		        var s = 1.70158;
		        return c * (t /= d) * t * ((s + 1) * t - s) + b;
		    },
		    BackEaseOut(t, b, c, d) {
		        var s = 1.70158;
		        return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
		    },
		    BackEaseInOut(t, b, c, d) {
		        var s = 1.70158;
		        if ((t /= d / 2) < 1) {
		            return (c / 2) * (t * t * (((s *= 1.525) + 1) * t - s)) + b;
		        }
		        return (c / 2) * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;
		    },
		    ElasticEaseIn(t, b, c, d, a, p) {
		        var s = 0;
		        if (t === 0) {
		            return b;
		        }
		        if ((t /= d) === 1) {
		            return b + c;
		        }
		        if (!p) {
		            p = d * 0.3;
		        }
		        if (!a || a < Math.abs(c)) {
		            a = c;
		            s = p / 4;
		        }
		        else {
		            s = (p / (2 * Math.PI)) * Math.asin(c / a);
		        }
		        return (-(a *
		            Math.pow(2, 10 * (t -= 1)) *
		            Math.sin(((t * d - s) * (2 * Math.PI)) / p)) + b);
		    },
		    ElasticEaseOut(t, b, c, d, a, p) {
		        var s = 0;
		        if (t === 0) {
		            return b;
		        }
		        if ((t /= d) === 1) {
		            return b + c;
		        }
		        if (!p) {
		            p = d * 0.3;
		        }
		        if (!a || a < Math.abs(c)) {
		            a = c;
		            s = p / 4;
		        }
		        else {
		            s = (p / (2 * Math.PI)) * Math.asin(c / a);
		        }
		        return (a * Math.pow(2, -10 * t) * Math.sin(((t * d - s) * (2 * Math.PI)) / p) +
		            c +
		            b);
		    },
		    ElasticEaseInOut(t, b, c, d, a, p) {
		        var s = 0;
		        if (t === 0) {
		            return b;
		        }
		        if ((t /= d / 2) === 2) {
		            return b + c;
		        }
		        if (!p) {
		            p = d * (0.3 * 1.5);
		        }
		        if (!a || a < Math.abs(c)) {
		            a = c;
		            s = p / 4;
		        }
		        else {
		            s = (p / (2 * Math.PI)) * Math.asin(c / a);
		        }
		        if (t < 1) {
		            return (-0.5 *
		                (a *
		                    Math.pow(2, 10 * (t -= 1)) *
		                    Math.sin(((t * d - s) * (2 * Math.PI)) / p)) +
		                b);
		        }
		        return (a *
		            Math.pow(2, -10 * (t -= 1)) *
		            Math.sin(((t * d - s) * (2 * Math.PI)) / p) *
		            0.5 +
		            c +
		            b);
		    },
		    BounceEaseOut(t, b, c, d) {
		        if ((t /= d) < 1 / 2.75) {
		            return c * (7.5625 * t * t) + b;
		        }
		        else if (t < 2 / 2.75) {
		            return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;
		        }
		        else if (t < 2.5 / 2.75) {
		            return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;
		        }
		        else {
		            return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;
		        }
		    },
		    BounceEaseIn(t, b, c, d) {
		        return c - exports.Easings.BounceEaseOut(d - t, 0, c, d) + b;
		    },
		    BounceEaseInOut(t, b, c, d) {
		        if (t < d / 2) {
		            return exports.Easings.BounceEaseIn(t * 2, 0, c, d) * 0.5 + b;
		        }
		        else {
		            return exports.Easings.BounceEaseOut(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;
		        }
		    },
		    EaseIn(t, b, c, d) {
		        return c * (t /= d) * t + b;
		    },
		    EaseOut(t, b, c, d) {
		        return -c * (t /= d) * (t - 2) + b;
		    },
		    EaseInOut(t, b, c, d) {
		        if ((t /= d / 2) < 1) {
		            return (c / 2) * t * t + b;
		        }
		        return (-c / 2) * (--t * (t - 2) - 1) + b;
		    },
		    StrongEaseIn(t, b, c, d) {
		        return c * (t /= d) * t * t * t * t + b;
		    },
		    StrongEaseOut(t, b, c, d) {
		        return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
		    },
		    StrongEaseInOut(t, b, c, d) {
		        if ((t /= d / 2) < 1) {
		            return (c / 2) * t * t * t * t * t + b;
		        }
		        return (c / 2) * ((t -= 2) * t * t * t * t + 2) + b;
		    },
		    Linear(t, b, c, d) {
		        return (c * t) / d + b;
		    },
		}; 
	} (Tween));
	return Tween;
}

var hasRequired_CoreInternals;

function require_CoreInternals () {
	if (hasRequired_CoreInternals) return _CoreInternals;
	hasRequired_CoreInternals = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Konva = void 0;
		const Global_1 = requireGlobal();
		const Util_1 = requireUtil();
		const Node_1 = requireNode();
		const Container_1 = requireContainer();
		const Stage_1 = requireStage();
		const Layer_1 = requireLayer();
		const FastLayer_1 = requireFastLayer();
		const Group_1 = requireGroup();
		const DragAndDrop_1 = requireDragAndDrop();
		const Shape_1 = requireShape();
		const Animation_1 = requireAnimation();
		const Tween_1 = requireTween();
		const Context_1 = requireContext();
		const Canvas_1 = requireCanvas();
		exports.Konva = Util_1.Util._assign(Global_1.Konva, {
		    Util: Util_1.Util,
		    Transform: Util_1.Transform,
		    Node: Node_1.Node,
		    Container: Container_1.Container,
		    Stage: Stage_1.Stage,
		    stages: Stage_1.stages,
		    Layer: Layer_1.Layer,
		    FastLayer: FastLayer_1.FastLayer,
		    Group: Group_1.Group,
		    DD: DragAndDrop_1.DD,
		    Shape: Shape_1.Shape,
		    shapes: Shape_1.shapes,
		    Animation: Animation_1.Animation,
		    Tween: Tween_1.Tween,
		    Easings: Tween_1.Easings,
		    Context: Context_1.Context,
		    Canvas: Canvas_1.Canvas,
		});
		exports.default = exports.Konva; 
	} (_CoreInternals));
	return _CoreInternals;
}

var Arc = {};

var hasRequiredArc;

function requireArc () {
	if (hasRequiredArc) return Arc;
	hasRequiredArc = 1;
	Object.defineProperty(Arc, "__esModule", { value: true });
	Arc.Arc = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Global_1 = requireGlobal();
	const Validators_1 = requireValidators();
	const Global_2 = requireGlobal();
	let Arc$1 = class Arc extends Shape_1.Shape {
	    _sceneFunc(context) {
	        var angle = Global_1.Konva.getAngle(this.angle()), clockwise = this.clockwise();
	        context.beginPath();
	        context.arc(0, 0, this.outerRadius(), 0, angle, clockwise);
	        context.arc(0, 0, this.innerRadius(), angle, 0, !clockwise);
	        context.closePath();
	        context.fillStrokeShape(this);
	    }
	    getWidth() {
	        return this.outerRadius() * 2;
	    }
	    getHeight() {
	        return this.outerRadius() * 2;
	    }
	    setWidth(width) {
	        this.outerRadius(width / 2);
	    }
	    setHeight(height) {
	        this.outerRadius(height / 2);
	    }
	    getSelfRect() {
	        const innerRadius = this.innerRadius();
	        const outerRadius = this.outerRadius();
	        const clockwise = this.clockwise();
	        const angle = Global_1.Konva.getAngle(clockwise ? 360 - this.angle() : this.angle());
	        const boundLeftRatio = Math.cos(Math.min(angle, Math.PI));
	        const boundRightRatio = 1;
	        const boundTopRatio = Math.sin(Math.min(Math.max(Math.PI, angle), (3 * Math.PI) / 2));
	        const boundBottomRatio = Math.sin(Math.min(angle, Math.PI / 2));
	        const boundLeft = boundLeftRatio * (boundLeftRatio > 0 ? innerRadius : outerRadius);
	        const boundRight = boundRightRatio * (outerRadius );
	        const boundTop = boundTopRatio * (boundTopRatio > 0 ? innerRadius : outerRadius);
	        const boundBottom = boundBottomRatio * (boundBottomRatio > 0 ? outerRadius : innerRadius);
	        return {
	            x: boundLeft,
	            y: clockwise ? -1 * boundBottom : boundTop,
	            width: boundRight - boundLeft,
	            height: boundBottom - boundTop,
	        };
	    }
	};
	Arc.Arc = Arc$1;
	Arc$1.prototype._centroid = true;
	Arc$1.prototype.className = 'Arc';
	Arc$1.prototype._attrsAffectingSize = ['innerRadius', 'outerRadius'];
	(0, Global_2._registerNode)(Arc$1);
	Factory_1.Factory.addGetterSetter(Arc$1, 'innerRadius', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Arc$1, 'outerRadius', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Arc$1, 'angle', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Arc$1, 'clockwise', false, (0, Validators_1.getBooleanValidator)());
	return Arc;
}

var Arrow$4 = {};

var Line$3 = {};

var hasRequiredLine;

function requireLine () {
	if (hasRequiredLine) return Line$3;
	hasRequiredLine = 1;
	Object.defineProperty(Line$3, "__esModule", { value: true });
	Line$3.Line = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Validators_1 = requireValidators();
	const Global_1 = requireGlobal();
	function getControlPoints(x0, y0, x1, y1, x2, y2, t) {
	    var d01 = Math.sqrt(Math.pow(x1 - x0, 2) + Math.pow(y1 - y0, 2)), d12 = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)), fa = (t * d01) / (d01 + d12), fb = (t * d12) / (d01 + d12), p1x = x1 - fa * (x2 - x0), p1y = y1 - fa * (y2 - y0), p2x = x1 + fb * (x2 - x0), p2y = y1 + fb * (y2 - y0);
	    return [p1x, p1y, p2x, p2y];
	}
	function expandPoints(p, tension) {
	    var len = p.length, allPoints = [], n, cp;
	    for (n = 2; n < len - 2; n += 2) {
	        cp = getControlPoints(p[n - 2], p[n - 1], p[n], p[n + 1], p[n + 2], p[n + 3], tension);
	        if (isNaN(cp[0])) {
	            continue;
	        }
	        allPoints.push(cp[0]);
	        allPoints.push(cp[1]);
	        allPoints.push(p[n]);
	        allPoints.push(p[n + 1]);
	        allPoints.push(cp[2]);
	        allPoints.push(cp[3]);
	    }
	    return allPoints;
	}
	class Line extends Shape_1.Shape {
	    constructor(config) {
	        super(config);
	        this.on('pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva', function () {
	            this._clearCache('tensionPoints');
	        });
	    }
	    _sceneFunc(context) {
	        var points = this.points(), length = points.length, tension = this.tension(), closed = this.closed(), bezier = this.bezier(), tp, len, n;
	        if (!length) {
	            return;
	        }
	        context.beginPath();
	        context.moveTo(points[0], points[1]);
	        if (tension !== 0 && length > 4) {
	            tp = this.getTensionPoints();
	            len = tp.length;
	            n = closed ? 0 : 4;
	            if (!closed) {
	                context.quadraticCurveTo(tp[0], tp[1], tp[2], tp[3]);
	            }
	            while (n < len - 2) {
	                context.bezierCurveTo(tp[n++], tp[n++], tp[n++], tp[n++], tp[n++], tp[n++]);
	            }
	            if (!closed) {
	                context.quadraticCurveTo(tp[len - 2], tp[len - 1], points[length - 2], points[length - 1]);
	            }
	        }
	        else if (bezier) {
	            n = 2;
	            while (n < length) {
	                context.bezierCurveTo(points[n++], points[n++], points[n++], points[n++], points[n++], points[n++]);
	            }
	        }
	        else {
	            for (n = 2; n < length; n += 2) {
	                context.lineTo(points[n], points[n + 1]);
	            }
	        }
	        if (closed) {
	            context.closePath();
	            context.fillStrokeShape(this);
	        }
	        else {
	            context.strokeShape(this);
	        }
	    }
	    getTensionPoints() {
	        return this._getCache('tensionPoints', this._getTensionPoints);
	    }
	    _getTensionPoints() {
	        if (this.closed()) {
	            return this._getTensionPointsClosed();
	        }
	        else {
	            return expandPoints(this.points(), this.tension());
	        }
	    }
	    _getTensionPointsClosed() {
	        var p = this.points(), len = p.length, tension = this.tension(), firstControlPoints = getControlPoints(p[len - 2], p[len - 1], p[0], p[1], p[2], p[3], tension), lastControlPoints = getControlPoints(p[len - 4], p[len - 3], p[len - 2], p[len - 1], p[0], p[1], tension), middle = expandPoints(p, tension), tp = [firstControlPoints[2], firstControlPoints[3]]
	            .concat(middle)
	            .concat([
	            lastControlPoints[0],
	            lastControlPoints[1],
	            p[len - 2],
	            p[len - 1],
	            lastControlPoints[2],
	            lastControlPoints[3],
	            firstControlPoints[0],
	            firstControlPoints[1],
	            p[0],
	            p[1],
	        ]);
	        return tp;
	    }
	    getWidth() {
	        return this.getSelfRect().width;
	    }
	    getHeight() {
	        return this.getSelfRect().height;
	    }
	    getSelfRect() {
	        var points = this.points();
	        if (points.length < 4) {
	            return {
	                x: points[0] || 0,
	                y: points[1] || 0,
	                width: 0,
	                height: 0,
	            };
	        }
	        if (this.tension() !== 0) {
	            points = [
	                points[0],
	                points[1],
	                ...this._getTensionPoints(),
	                points[points.length - 2],
	                points[points.length - 1],
	            ];
	        }
	        else {
	            points = this.points();
	        }
	        var minX = points[0];
	        var maxX = points[0];
	        var minY = points[1];
	        var maxY = points[1];
	        var x, y;
	        for (var i = 0; i < points.length / 2; i++) {
	            x = points[i * 2];
	            y = points[i * 2 + 1];
	            minX = Math.min(minX, x);
	            maxX = Math.max(maxX, x);
	            minY = Math.min(minY, y);
	            maxY = Math.max(maxY, y);
	        }
	        return {
	            x: minX,
	            y: minY,
	            width: maxX - minX,
	            height: maxY - minY,
	        };
	    }
	}
	Line$3.Line = Line;
	Line.prototype.className = 'Line';
	Line.prototype._attrsAffectingSize = ['points', 'bezier', 'tension'];
	(0, Global_1._registerNode)(Line);
	Factory_1.Factory.addGetterSetter(Line, 'closed', false);
	Factory_1.Factory.addGetterSetter(Line, 'bezier', false);
	Factory_1.Factory.addGetterSetter(Line, 'tension', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Line, 'points', [], (0, Validators_1.getNumberArrayValidator)());
	return Line$3;
}

var Path = {};

var BezierFunctions = {};

var hasRequiredBezierFunctions;

function requireBezierFunctions () {
	if (hasRequiredBezierFunctions) return BezierFunctions;
	hasRequiredBezierFunctions = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.t2length = exports.getQuadraticArcLength = exports.getCubicArcLength = exports.binomialCoefficients = exports.cValues = exports.tValues = void 0;
		exports.tValues = [
		    [],
		    [],
		    [
		        -0.5773502691896257645091487805019574556476,
		        0.5773502691896257645091487805019574556476,
		    ],
		    [
		        0, -0.7745966692414833770358530799564799221665,
		        0.7745966692414833770358530799564799221665,
		    ],
		    [
		        -0.3399810435848562648026657591032446872005,
		        0.3399810435848562648026657591032446872005,
		        -0.8611363115940525752239464888928095050957,
		        0.8611363115940525752239464888928095050957,
		    ],
		    [
		        0, -0.5384693101056830910363144207002088049672,
		        0.5384693101056830910363144207002088049672,
		        -0.9061798459386639927976268782993929651256,
		        0.9061798459386639927976268782993929651256,
		    ],
		    [
		        0.6612093864662645136613995950199053470064,
		        -0.6612093864662645136613995950199053470064,
		        -0.2386191860831969086305017216807119354186,
		        0.2386191860831969086305017216807119354186,
		        -0.9324695142031520278123015544939946091347,
		        0.9324695142031520278123015544939946091347,
		    ],
		    [
		        0, 0.4058451513773971669066064120769614633473,
		        -0.4058451513773971669066064120769614633473,
		        -0.7415311855993944398638647732807884070741,
		        0.7415311855993944398638647732807884070741,
		        -0.9491079123427585245261896840478512624007,
		        0.9491079123427585245261896840478512624007,
		    ],
		    [
		        -0.1834346424956498049394761423601839806667,
		        0.1834346424956498049394761423601839806667,
		        -0.5255324099163289858177390491892463490419,
		        0.5255324099163289858177390491892463490419,
		        -0.7966664774136267395915539364758304368371,
		        0.7966664774136267395915539364758304368371,
		        -0.9602898564975362316835608685694729904282,
		        0.9602898564975362316835608685694729904282,
		    ],
		    [
		        0, -0.8360311073266357942994297880697348765441,
		        0.8360311073266357942994297880697348765441,
		        -0.9681602395076260898355762029036728700494,
		        0.9681602395076260898355762029036728700494,
		        -0.3242534234038089290385380146433366085719,
		        0.3242534234038089290385380146433366085719,
		        -0.6133714327005903973087020393414741847857,
		        0.6133714327005903973087020393414741847857,
		    ],
		    [
		        -0.1488743389816312108848260011297199846175,
		        0.1488743389816312108848260011297199846175,
		        -0.4333953941292471907992659431657841622,
		        0.4333953941292471907992659431657841622,
		        -0.6794095682990244062343273651148735757692,
		        0.6794095682990244062343273651148735757692,
		        -0.8650633666889845107320966884234930485275,
		        0.8650633666889845107320966884234930485275,
		        -0.9739065285171717200779640120844520534282,
		        0.9739065285171717200779640120844520534282,
		    ],
		    [
		        0, -0.2695431559523449723315319854008615246796,
		        0.2695431559523449723315319854008615246796,
		        -0.5190961292068118159257256694586095544802,
		        0.5190961292068118159257256694586095544802,
		        -0.7301520055740493240934162520311534580496,
		        0.7301520055740493240934162520311534580496,
		        -0.8870625997680952990751577693039272666316,
		        0.8870625997680952990751577693039272666316,
		        -0.9782286581460569928039380011228573907714,
		        0.9782286581460569928039380011228573907714,
		    ],
		    [
		        -0.1252334085114689154724413694638531299833,
		        0.1252334085114689154724413694638531299833,
		        -0.3678314989981801937526915366437175612563,
		        0.3678314989981801937526915366437175612563,
		        -0.587317954286617447296702418940534280369,
		        0.587317954286617447296702418940534280369,
		        -0.7699026741943046870368938332128180759849,
		        0.7699026741943046870368938332128180759849,
		        -0.9041172563704748566784658661190961925375,
		        0.9041172563704748566784658661190961925375,
		        -0.9815606342467192506905490901492808229601,
		        0.9815606342467192506905490901492808229601,
		    ],
		    [
		        0, -0.2304583159551347940655281210979888352115,
		        0.2304583159551347940655281210979888352115,
		        -0.4484927510364468528779128521276398678019,
		        0.4484927510364468528779128521276398678019,
		        -0.6423493394403402206439846069955156500716,
		        0.6423493394403402206439846069955156500716,
		        -0.8015780907333099127942064895828598903056,
		        0.8015780907333099127942064895828598903056,
		        -0.9175983992229779652065478365007195123904,
		        0.9175983992229779652065478365007195123904,
		        -0.9841830547185881494728294488071096110649,
		        0.9841830547185881494728294488071096110649,
		    ],
		    [
		        -0.1080549487073436620662446502198347476119,
		        0.1080549487073436620662446502198347476119,
		        -0.3191123689278897604356718241684754668342,
		        0.3191123689278897604356718241684754668342,
		        -0.5152486363581540919652907185511886623088,
		        0.5152486363581540919652907185511886623088,
		        -0.6872929048116854701480198030193341375384,
		        0.6872929048116854701480198030193341375384,
		        -0.8272013150697649931897947426503949610397,
		        0.8272013150697649931897947426503949610397,
		        -0.928434883663573517336391139377874264477,
		        0.928434883663573517336391139377874264477,
		        -0.986283808696812338841597266704052801676,
		        0.986283808696812338841597266704052801676,
		    ],
		    [
		        0, -0.2011940939974345223006283033945962078128,
		        0.2011940939974345223006283033945962078128,
		        -0.3941513470775633698972073709810454683627,
		        0.3941513470775633698972073709810454683627,
		        -0.5709721726085388475372267372539106412383,
		        0.5709721726085388475372267372539106412383,
		        -0.7244177313601700474161860546139380096308,
		        0.7244177313601700474161860546139380096308,
		        -0.8482065834104272162006483207742168513662,
		        0.8482065834104272162006483207742168513662,
		        -0.9372733924007059043077589477102094712439,
		        0.9372733924007059043077589477102094712439,
		        -0.9879925180204854284895657185866125811469,
		        0.9879925180204854284895657185866125811469,
		    ],
		    [
		        -0.0950125098376374401853193354249580631303,
		        0.0950125098376374401853193354249580631303,
		        -0.281603550779258913230460501460496106486,
		        0.281603550779258913230460501460496106486,
		        -0.45801677765722738634241944298357757354,
		        0.45801677765722738634241944298357757354,
		        -0.6178762444026437484466717640487910189918,
		        0.6178762444026437484466717640487910189918,
		        -0.7554044083550030338951011948474422683538,
		        0.7554044083550030338951011948474422683538,
		        -0.8656312023878317438804678977123931323873,
		        0.8656312023878317438804678977123931323873,
		        -0.9445750230732325760779884155346083450911,
		        0.9445750230732325760779884155346083450911,
		        -0.9894009349916499325961541734503326274262,
		        0.9894009349916499325961541734503326274262,
		    ],
		    [
		        0, -0.1784841814958478558506774936540655574754,
		        0.1784841814958478558506774936540655574754,
		        -0.3512317634538763152971855170953460050405,
		        0.3512317634538763152971855170953460050405,
		        -0.5126905370864769678862465686295518745829,
		        0.5126905370864769678862465686295518745829,
		        -0.6576711592166907658503022166430023351478,
		        0.6576711592166907658503022166430023351478,
		        -0.7815140038968014069252300555204760502239,
		        0.7815140038968014069252300555204760502239,
		        -0.8802391537269859021229556944881556926234,
		        0.8802391537269859021229556944881556926234,
		        -0.9506755217687677612227169578958030214433,
		        0.9506755217687677612227169578958030214433,
		        -0.9905754753144173356754340199406652765077,
		        0.9905754753144173356754340199406652765077,
		    ],
		    [
		        -0.0847750130417353012422618529357838117333,
		        0.0847750130417353012422618529357838117333,
		        -0.2518862256915055095889728548779112301628,
		        0.2518862256915055095889728548779112301628,
		        -0.4117511614628426460359317938330516370789,
		        0.4117511614628426460359317938330516370789,
		        -0.5597708310739475346078715485253291369276,
		        0.5597708310739475346078715485253291369276,
		        -0.6916870430603532078748910812888483894522,
		        0.6916870430603532078748910812888483894522,
		        -0.8037049589725231156824174550145907971032,
		        0.8037049589725231156824174550145907971032,
		        -0.8926024664975557392060605911271455154078,
		        0.8926024664975557392060605911271455154078,
		        -0.9558239495713977551811958929297763099728,
		        0.9558239495713977551811958929297763099728,
		        -0.9915651684209309467300160047061507702525,
		        0.9915651684209309467300160047061507702525,
		    ],
		    [
		        0, -0.1603586456402253758680961157407435495048,
		        0.1603586456402253758680961157407435495048,
		        -0.3165640999636298319901173288498449178922,
		        0.3165640999636298319901173288498449178922,
		        -0.4645707413759609457172671481041023679762,
		        0.4645707413759609457172671481041023679762,
		        -0.6005453046616810234696381649462392798683,
		        0.6005453046616810234696381649462392798683,
		        -0.7209661773352293786170958608237816296571,
		        0.7209661773352293786170958608237816296571,
		        -0.8227146565371428249789224867127139017745,
		        0.8227146565371428249789224867127139017745,
		        -0.9031559036148179016426609285323124878093,
		        0.9031559036148179016426609285323124878093,
		        -0.960208152134830030852778840687651526615,
		        0.960208152134830030852778840687651526615,
		        -0.9924068438435844031890176702532604935893,
		        0.9924068438435844031890176702532604935893,
		    ],
		    [
		        -0.0765265211334973337546404093988382110047,
		        0.0765265211334973337546404093988382110047,
		        -0.227785851141645078080496195368574624743,
		        0.227785851141645078080496195368574624743,
		        -0.3737060887154195606725481770249272373957,
		        0.3737060887154195606725481770249272373957,
		        -0.5108670019508270980043640509552509984254,
		        0.5108670019508270980043640509552509984254,
		        -0.6360536807265150254528366962262859367433,
		        0.6360536807265150254528366962262859367433,
		        -0.7463319064601507926143050703556415903107,
		        0.7463319064601507926143050703556415903107,
		        -0.8391169718222188233945290617015206853296,
		        0.8391169718222188233945290617015206853296,
		        -0.9122344282513259058677524412032981130491,
		        0.9122344282513259058677524412032981130491,
		        -0.963971927277913791267666131197277221912,
		        0.963971927277913791267666131197277221912,
		        -0.9931285991850949247861223884713202782226,
		        0.9931285991850949247861223884713202782226,
		    ],
		    [
		        0, -0.1455618541608950909370309823386863301163,
		        0.1455618541608950909370309823386863301163,
		        -0.288021316802401096600792516064600319909,
		        0.288021316802401096600792516064600319909,
		        -0.4243421202074387835736688885437880520964,
		        0.4243421202074387835736688885437880520964,
		        -0.551618835887219807059018796724313286622,
		        0.551618835887219807059018796724313286622,
		        -0.667138804197412319305966669990339162597,
		        0.667138804197412319305966669990339162597,
		        -0.7684399634756779086158778513062280348209,
		        0.7684399634756779086158778513062280348209,
		        -0.8533633645833172836472506385875676702761,
		        0.8533633645833172836472506385875676702761,
		        -0.9200993341504008287901871337149688941591,
		        0.9200993341504008287901871337149688941591,
		        -0.9672268385663062943166222149076951614246,
		        0.9672268385663062943166222149076951614246,
		        -0.9937521706203895002602420359379409291933,
		        0.9937521706203895002602420359379409291933,
		    ],
		    [
		        -0.0697392733197222212138417961186280818222,
		        0.0697392733197222212138417961186280818222,
		        -0.2078604266882212854788465339195457342156,
		        0.2078604266882212854788465339195457342156,
		        -0.3419358208920842251581474204273796195591,
		        0.3419358208920842251581474204273796195591,
		        -0.4693558379867570264063307109664063460953,
		        0.4693558379867570264063307109664063460953,
		        -0.5876404035069115929588769276386473488776,
		        0.5876404035069115929588769276386473488776,
		        -0.6944872631866827800506898357622567712673,
		        0.6944872631866827800506898357622567712673,
		        -0.7878168059792081620042779554083515213881,
		        0.7878168059792081620042779554083515213881,
		        -0.8658125777203001365364256370193787290847,
		        0.8658125777203001365364256370193787290847,
		        -0.9269567721871740005206929392590531966353,
		        0.9269567721871740005206929392590531966353,
		        -0.9700604978354287271239509867652687108059,
		        0.9700604978354287271239509867652687108059,
		        -0.994294585482399292073031421161298980393,
		        0.994294585482399292073031421161298980393,
		    ],
		    [
		        0, -0.1332568242984661109317426822417661370104,
		        0.1332568242984661109317426822417661370104,
		        -0.264135680970344930533869538283309602979,
		        0.264135680970344930533869538283309602979,
		        -0.390301038030290831421488872880605458578,
		        0.390301038030290831421488872880605458578,
		        -0.5095014778460075496897930478668464305448,
		        0.5095014778460075496897930478668464305448,
		        -0.6196098757636461563850973116495956533871,
		        0.6196098757636461563850973116495956533871,
		        -0.7186613631319501944616244837486188483299,
		        0.7186613631319501944616244837486188483299,
		        -0.8048884016188398921511184069967785579414,
		        0.8048884016188398921511184069967785579414,
		        -0.8767523582704416673781568859341456716389,
		        0.8767523582704416673781568859341456716389,
		        -0.9329710868260161023491969890384229782357,
		        0.9329710868260161023491969890384229782357,
		        -0.9725424712181152319560240768207773751816,
		        0.9725424712181152319560240768207773751816,
		        -0.9947693349975521235239257154455743605736,
		        0.9947693349975521235239257154455743605736,
		    ],
		    [
		        -0.0640568928626056260850430826247450385909,
		        0.0640568928626056260850430826247450385909,
		        -0.1911188674736163091586398207570696318404,
		        0.1911188674736163091586398207570696318404,
		        -0.3150426796961633743867932913198102407864,
		        0.3150426796961633743867932913198102407864,
		        -0.4337935076260451384870842319133497124524,
		        0.4337935076260451384870842319133497124524,
		        -0.5454214713888395356583756172183723700107,
		        0.5454214713888395356583756172183723700107,
		        -0.6480936519369755692524957869107476266696,
		        0.6480936519369755692524957869107476266696,
		        -0.7401241915785543642438281030999784255232,
		        0.7401241915785543642438281030999784255232,
		        -0.8200019859739029219539498726697452080761,
		        0.8200019859739029219539498726697452080761,
		        -0.8864155270044010342131543419821967550873,
		        0.8864155270044010342131543419821967550873,
		        -0.9382745520027327585236490017087214496548,
		        0.9382745520027327585236490017087214496548,
		        -0.9747285559713094981983919930081690617411,
		        0.9747285559713094981983919930081690617411,
		        -0.9951872199970213601799974097007368118745,
		        0.9951872199970213601799974097007368118745,
		    ],
		];
		exports.cValues = [
		    [],
		    [],
		    [1.0, 1.0],
		    [
		        0.8888888888888888888888888888888888888888,
		        0.5555555555555555555555555555555555555555,
		        0.5555555555555555555555555555555555555555,
		    ],
		    [
		        0.6521451548625461426269360507780005927646,
		        0.6521451548625461426269360507780005927646,
		        0.3478548451374538573730639492219994072353,
		        0.3478548451374538573730639492219994072353,
		    ],
		    [
		        0.5688888888888888888888888888888888888888,
		        0.4786286704993664680412915148356381929122,
		        0.4786286704993664680412915148356381929122,
		        0.2369268850561890875142640407199173626432,
		        0.2369268850561890875142640407199173626432,
		    ],
		    [
		        0.3607615730481386075698335138377161116615,
		        0.3607615730481386075698335138377161116615,
		        0.4679139345726910473898703439895509948116,
		        0.4679139345726910473898703439895509948116,
		        0.1713244923791703450402961421727328935268,
		        0.1713244923791703450402961421727328935268,
		    ],
		    [
		        0.4179591836734693877551020408163265306122,
		        0.3818300505051189449503697754889751338783,
		        0.3818300505051189449503697754889751338783,
		        0.2797053914892766679014677714237795824869,
		        0.2797053914892766679014677714237795824869,
		        0.1294849661688696932706114326790820183285,
		        0.1294849661688696932706114326790820183285,
		    ],
		    [
		        0.3626837833783619829651504492771956121941,
		        0.3626837833783619829651504492771956121941,
		        0.3137066458778872873379622019866013132603,
		        0.3137066458778872873379622019866013132603,
		        0.2223810344533744705443559944262408844301,
		        0.2223810344533744705443559944262408844301,
		        0.1012285362903762591525313543099621901153,
		        0.1012285362903762591525313543099621901153,
		    ],
		    [
		        0.3302393550012597631645250692869740488788,
		        0.1806481606948574040584720312429128095143,
		        0.1806481606948574040584720312429128095143,
		        0.0812743883615744119718921581105236506756,
		        0.0812743883615744119718921581105236506756,
		        0.3123470770400028400686304065844436655987,
		        0.3123470770400028400686304065844436655987,
		        0.2606106964029354623187428694186328497718,
		        0.2606106964029354623187428694186328497718,
		    ],
		    [
		        0.295524224714752870173892994651338329421,
		        0.295524224714752870173892994651338329421,
		        0.2692667193099963550912269215694693528597,
		        0.2692667193099963550912269215694693528597,
		        0.2190863625159820439955349342281631924587,
		        0.2190863625159820439955349342281631924587,
		        0.1494513491505805931457763396576973324025,
		        0.1494513491505805931457763396576973324025,
		        0.0666713443086881375935688098933317928578,
		        0.0666713443086881375935688098933317928578,
		    ],
		    [
		        0.272925086777900630714483528336342189156,
		        0.2628045445102466621806888698905091953727,
		        0.2628045445102466621806888698905091953727,
		        0.2331937645919904799185237048431751394317,
		        0.2331937645919904799185237048431751394317,
		        0.1862902109277342514260976414316558916912,
		        0.1862902109277342514260976414316558916912,
		        0.1255803694649046246346942992239401001976,
		        0.1255803694649046246346942992239401001976,
		        0.0556685671161736664827537204425485787285,
		        0.0556685671161736664827537204425485787285,
		    ],
		    [
		        0.2491470458134027850005624360429512108304,
		        0.2491470458134027850005624360429512108304,
		        0.2334925365383548087608498989248780562594,
		        0.2334925365383548087608498989248780562594,
		        0.2031674267230659217490644558097983765065,
		        0.2031674267230659217490644558097983765065,
		        0.160078328543346226334652529543359071872,
		        0.160078328543346226334652529543359071872,
		        0.1069393259953184309602547181939962242145,
		        0.1069393259953184309602547181939962242145,
		        0.047175336386511827194615961485017060317,
		        0.047175336386511827194615961485017060317,
		    ],
		    [
		        0.2325515532308739101945895152688359481566,
		        0.2262831802628972384120901860397766184347,
		        0.2262831802628972384120901860397766184347,
		        0.2078160475368885023125232193060527633865,
		        0.2078160475368885023125232193060527633865,
		        0.1781459807619457382800466919960979955128,
		        0.1781459807619457382800466919960979955128,
		        0.1388735102197872384636017768688714676218,
		        0.1388735102197872384636017768688714676218,
		        0.0921214998377284479144217759537971209236,
		        0.0921214998377284479144217759537971209236,
		        0.0404840047653158795200215922009860600419,
		        0.0404840047653158795200215922009860600419,
		    ],
		    [
		        0.2152638534631577901958764433162600352749,
		        0.2152638534631577901958764433162600352749,
		        0.2051984637212956039659240656612180557103,
		        0.2051984637212956039659240656612180557103,
		        0.1855383974779378137417165901251570362489,
		        0.1855383974779378137417165901251570362489,
		        0.1572031671581935345696019386238421566056,
		        0.1572031671581935345696019386238421566056,
		        0.1215185706879031846894148090724766259566,
		        0.1215185706879031846894148090724766259566,
		        0.0801580871597602098056332770628543095836,
		        0.0801580871597602098056332770628543095836,
		        0.0351194603317518630318328761381917806197,
		        0.0351194603317518630318328761381917806197,
		    ],
		    [
		        0.2025782419255612728806201999675193148386,
		        0.1984314853271115764561183264438393248186,
		        0.1984314853271115764561183264438393248186,
		        0.1861610000155622110268005618664228245062,
		        0.1861610000155622110268005618664228245062,
		        0.1662692058169939335532008604812088111309,
		        0.1662692058169939335532008604812088111309,
		        0.1395706779261543144478047945110283225208,
		        0.1395706779261543144478047945110283225208,
		        0.1071592204671719350118695466858693034155,
		        0.1071592204671719350118695466858693034155,
		        0.0703660474881081247092674164506673384667,
		        0.0703660474881081247092674164506673384667,
		        0.0307532419961172683546283935772044177217,
		        0.0307532419961172683546283935772044177217,
		    ],
		    [
		        0.1894506104550684962853967232082831051469,
		        0.1894506104550684962853967232082831051469,
		        0.1826034150449235888667636679692199393835,
		        0.1826034150449235888667636679692199393835,
		        0.1691565193950025381893120790303599622116,
		        0.1691565193950025381893120790303599622116,
		        0.1495959888165767320815017305474785489704,
		        0.1495959888165767320815017305474785489704,
		        0.1246289712555338720524762821920164201448,
		        0.1246289712555338720524762821920164201448,
		        0.0951585116824927848099251076022462263552,
		        0.0951585116824927848099251076022462263552,
		        0.0622535239386478928628438369943776942749,
		        0.0622535239386478928628438369943776942749,
		        0.0271524594117540948517805724560181035122,
		        0.0271524594117540948517805724560181035122,
		    ],
		    [
		        0.1794464703562065254582656442618856214487,
		        0.1765627053669926463252709901131972391509,
		        0.1765627053669926463252709901131972391509,
		        0.1680041021564500445099706637883231550211,
		        0.1680041021564500445099706637883231550211,
		        0.1540457610768102880814315948019586119404,
		        0.1540457610768102880814315948019586119404,
		        0.1351363684685254732863199817023501973721,
		        0.1351363684685254732863199817023501973721,
		        0.1118838471934039710947883856263559267358,
		        0.1118838471934039710947883856263559267358,
		        0.0850361483171791808835353701910620738504,
		        0.0850361483171791808835353701910620738504,
		        0.0554595293739872011294401653582446605128,
		        0.0554595293739872011294401653582446605128,
		        0.0241483028685479319601100262875653246916,
		        0.0241483028685479319601100262875653246916,
		    ],
		    [
		        0.1691423829631435918406564701349866103341,
		        0.1691423829631435918406564701349866103341,
		        0.1642764837458327229860537764659275904123,
		        0.1642764837458327229860537764659275904123,
		        0.1546846751262652449254180038363747721932,
		        0.1546846751262652449254180038363747721932,
		        0.1406429146706506512047313037519472280955,
		        0.1406429146706506512047313037519472280955,
		        0.1225552067114784601845191268002015552281,
		        0.1225552067114784601845191268002015552281,
		        0.1009420441062871655628139849248346070628,
		        0.1009420441062871655628139849248346070628,
		        0.0764257302548890565291296776166365256053,
		        0.0764257302548890565291296776166365256053,
		        0.0497145488949697964533349462026386416808,
		        0.0497145488949697964533349462026386416808,
		        0.0216160135264833103133427102664524693876,
		        0.0216160135264833103133427102664524693876,
		    ],
		    [
		        0.1610544498487836959791636253209167350399,
		        0.1589688433939543476499564394650472016787,
		        0.1589688433939543476499564394650472016787,
		        0.152766042065859666778855400897662998461,
		        0.152766042065859666778855400897662998461,
		        0.1426067021736066117757461094419029724756,
		        0.1426067021736066117757461094419029724756,
		        0.1287539625393362276755157848568771170558,
		        0.1287539625393362276755157848568771170558,
		        0.1115666455473339947160239016817659974813,
		        0.1115666455473339947160239016817659974813,
		        0.0914900216224499994644620941238396526609,
		        0.0914900216224499994644620941238396526609,
		        0.0690445427376412265807082580060130449618,
		        0.0690445427376412265807082580060130449618,
		        0.0448142267656996003328381574019942119517,
		        0.0448142267656996003328381574019942119517,
		        0.0194617882297264770363120414644384357529,
		        0.0194617882297264770363120414644384357529,
		    ],
		    [
		        0.1527533871307258506980843319550975934919,
		        0.1527533871307258506980843319550975934919,
		        0.1491729864726037467878287370019694366926,
		        0.1491729864726037467878287370019694366926,
		        0.1420961093183820513292983250671649330345,
		        0.1420961093183820513292983250671649330345,
		        0.1316886384491766268984944997481631349161,
		        0.1316886384491766268984944997481631349161,
		        0.118194531961518417312377377711382287005,
		        0.118194531961518417312377377711382287005,
		        0.1019301198172404350367501354803498761666,
		        0.1019301198172404350367501354803498761666,
		        0.0832767415767047487247581432220462061001,
		        0.0832767415767047487247581432220462061001,
		        0.0626720483341090635695065351870416063516,
		        0.0626720483341090635695065351870416063516,
		        0.040601429800386941331039952274932109879,
		        0.040601429800386941331039952274932109879,
		        0.0176140071391521183118619623518528163621,
		        0.0176140071391521183118619623518528163621,
		    ],
		    [
		        0.1460811336496904271919851476833711882448,
		        0.1445244039899700590638271665537525436099,
		        0.1445244039899700590638271665537525436099,
		        0.1398873947910731547221334238675831108927,
		        0.1398873947910731547221334238675831108927,
		        0.132268938633337461781052574496775604329,
		        0.132268938633337461781052574496775604329,
		        0.1218314160537285341953671771257335983563,
		        0.1218314160537285341953671771257335983563,
		        0.1087972991671483776634745780701056420336,
		        0.1087972991671483776634745780701056420336,
		        0.0934444234560338615532897411139320884835,
		        0.0934444234560338615532897411139320884835,
		        0.0761001136283793020170516533001831792261,
		        0.0761001136283793020170516533001831792261,
		        0.0571344254268572082836358264724479574912,
		        0.0571344254268572082836358264724479574912,
		        0.0369537897708524937999506682993296661889,
		        0.0369537897708524937999506682993296661889,
		        0.0160172282577743333242246168584710152658,
		        0.0160172282577743333242246168584710152658,
		    ],
		    [
		        0.1392518728556319933754102483418099578739,
		        0.1392518728556319933754102483418099578739,
		        0.1365414983460151713525738312315173965863,
		        0.1365414983460151713525738312315173965863,
		        0.1311735047870623707329649925303074458757,
		        0.1311735047870623707329649925303074458757,
		        0.1232523768105124242855609861548144719594,
		        0.1232523768105124242855609861548144719594,
		        0.1129322960805392183934006074217843191142,
		        0.1129322960805392183934006074217843191142,
		        0.1004141444428809649320788378305362823508,
		        0.1004141444428809649320788378305362823508,
		        0.0859416062170677274144436813727028661891,
		        0.0859416062170677274144436813727028661891,
		        0.0697964684245204880949614189302176573987,
		        0.0697964684245204880949614189302176573987,
		        0.0522933351526832859403120512732112561121,
		        0.0522933351526832859403120512732112561121,
		        0.0337749015848141547933022468659129013491,
		        0.0337749015848141547933022468659129013491,
		        0.0146279952982722006849910980471854451902,
		        0.0146279952982722006849910980471854451902,
		    ],
		    [
		        0.1336545721861061753514571105458443385831,
		        0.132462039404696617371642464703316925805,
		        0.132462039404696617371642464703316925805,
		        0.1289057221880821499785953393997936532597,
		        0.1289057221880821499785953393997936532597,
		        0.1230490843067295304675784006720096548158,
		        0.1230490843067295304675784006720096548158,
		        0.1149966402224113649416435129339613014914,
		        0.1149966402224113649416435129339613014914,
		        0.1048920914645414100740861850147438548584,
		        0.1048920914645414100740861850147438548584,
		        0.0929157660600351474770186173697646486034,
		        0.0929157660600351474770186173697646486034,
		        0.0792814117767189549228925247420432269137,
		        0.0792814117767189549228925247420432269137,
		        0.0642324214085258521271696151589109980391,
		        0.0642324214085258521271696151589109980391,
		        0.0480376717310846685716410716320339965612,
		        0.0480376717310846685716410716320339965612,
		        0.0309880058569794443106942196418845053837,
		        0.0309880058569794443106942196418845053837,
		        0.0134118594871417720813094934586150649766,
		        0.0134118594871417720813094934586150649766,
		    ],
		    [
		        0.1279381953467521569740561652246953718517,
		        0.1279381953467521569740561652246953718517,
		        0.1258374563468282961213753825111836887264,
		        0.1258374563468282961213753825111836887264,
		        0.121670472927803391204463153476262425607,
		        0.121670472927803391204463153476262425607,
		        0.1155056680537256013533444839067835598622,
		        0.1155056680537256013533444839067835598622,
		        0.1074442701159656347825773424466062227946,
		        0.1074442701159656347825773424466062227946,
		        0.0976186521041138882698806644642471544279,
		        0.0976186521041138882698806644642471544279,
		        0.086190161531953275917185202983742667185,
		        0.086190161531953275917185202983742667185,
		        0.0733464814110803057340336152531165181193,
		        0.0733464814110803057340336152531165181193,
		        0.0592985849154367807463677585001085845412,
		        0.0592985849154367807463677585001085845412,
		        0.0442774388174198061686027482113382288593,
		        0.0442774388174198061686027482113382288593,
		        0.0285313886289336631813078159518782864491,
		        0.0285313886289336631813078159518782864491,
		        0.0123412297999871995468056670700372915759,
		        0.0123412297999871995468056670700372915759,
		    ],
		];
		exports.binomialCoefficients = [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]];
		const getCubicArcLength = (xs, ys, t) => {
		    let z;
		    let sum;
		    let correctedT;
		    const n = 20;
		    z = t / 2;
		    sum = 0;
		    for (let i = 0; i < n; i++) {
		        correctedT = z * exports.tValues[n][i] + z;
		        sum += exports.cValues[n][i] * BFunc(xs, ys, correctedT);
		    }
		    return z * sum;
		};
		exports.getCubicArcLength = getCubicArcLength;
		const getQuadraticArcLength = (xs, ys, t) => {
		    if (t === undefined) {
		        t = 1;
		    }
		    const ax = xs[0] - 2 * xs[1] + xs[2];
		    const ay = ys[0] - 2 * ys[1] + ys[2];
		    const bx = 2 * xs[1] - 2 * xs[0];
		    const by = 2 * ys[1] - 2 * ys[0];
		    const A = 4 * (ax * ax + ay * ay);
		    const B = 4 * (ax * bx + ay * by);
		    const C = bx * bx + by * by;
		    if (A === 0) {
		        return (t * Math.sqrt(Math.pow(xs[2] - xs[0], 2) + Math.pow(ys[2] - ys[0], 2)));
		    }
		    const b = B / (2 * A);
		    const c = C / A;
		    const u = t + b;
		    const k = c - b * b;
		    const uuk = u * u + k > 0 ? Math.sqrt(u * u + k) : 0;
		    const bbk = b * b + k > 0 ? Math.sqrt(b * b + k) : 0;
		    const term = b + Math.sqrt(b * b + k) !== 0
		        ? k * Math.log(Math.abs((u + uuk) / (b + bbk)))
		        : 0;
		    return (Math.sqrt(A) / 2) * (u * uuk - b * bbk + term);
		};
		exports.getQuadraticArcLength = getQuadraticArcLength;
		function BFunc(xs, ys, t) {
		    const xbase = getDerivative(1, t, xs);
		    const ybase = getDerivative(1, t, ys);
		    const combined = xbase * xbase + ybase * ybase;
		    return Math.sqrt(combined);
		}
		const getDerivative = (derivative, t, vs) => {
		    const n = vs.length - 1;
		    let _vs;
		    let value;
		    if (n === 0) {
		        return 0;
		    }
		    if (derivative === 0) {
		        value = 0;
		        for (let k = 0; k <= n; k++) {
		            value +=
		                exports.binomialCoefficients[n][k] *
		                    Math.pow(1 - t, n - k) *
		                    Math.pow(t, k) *
		                    vs[k];
		        }
		        return value;
		    }
		    else {
		        _vs = new Array(n);
		        for (let k = 0; k < n; k++) {
		            _vs[k] = n * (vs[k + 1] - vs[k]);
		        }
		        return getDerivative(derivative - 1, t, _vs);
		    }
		};
		const t2length = (length, totalLength, func) => {
		    let error = 1;
		    let t = length / totalLength;
		    let step = (length - func(t)) / totalLength;
		    let numIterations = 0;
		    while (error > 0.001) {
		        const increasedTLength = func(t + step);
		        const increasedTError = Math.abs(length - increasedTLength) / totalLength;
		        if (increasedTError < error) {
		            error = increasedTError;
		            t += step;
		        }
		        else {
		            const decreasedTLength = func(t - step);
		            const decreasedTError = Math.abs(length - decreasedTLength) / totalLength;
		            if (decreasedTError < error) {
		                error = decreasedTError;
		                t -= step;
		            }
		            else {
		                step /= 2;
		            }
		        }
		        numIterations++;
		        if (numIterations > 500) {
		            break;
		        }
		    }
		    return t;
		};
		exports.t2length = t2length; 
	} (BezierFunctions));
	return BezierFunctions;
}

var hasRequiredPath;

function requirePath () {
	if (hasRequiredPath) return Path;
	hasRequiredPath = 1;
	Object.defineProperty(Path, "__esModule", { value: true });
	Path.Path = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Global_1 = requireGlobal();
	const BezierFunctions_1 = requireBezierFunctions();
	let Path$1 = class Path extends Shape_1.Shape {
	    constructor(config) {
	        super(config);
	        this.dataArray = [];
	        this.pathLength = 0;
	        this._readDataAttribute();
	        this.on('dataChange.konva', function () {
	            this._readDataAttribute();
	        });
	    }
	    _readDataAttribute() {
	        this.dataArray = Path.parsePathData(this.data());
	        this.pathLength = Path.getPathLength(this.dataArray);
	    }
	    _sceneFunc(context) {
	        var ca = this.dataArray;
	        context.beginPath();
	        var isClosed = false;
	        for (var n = 0; n < ca.length; n++) {
	            var c = ca[n].command;
	            var p = ca[n].points;
	            switch (c) {
	                case 'L':
	                    context.lineTo(p[0], p[1]);
	                    break;
	                case 'M':
	                    context.moveTo(p[0], p[1]);
	                    break;
	                case 'C':
	                    context.bezierCurveTo(p[0], p[1], p[2], p[3], p[4], p[5]);
	                    break;
	                case 'Q':
	                    context.quadraticCurveTo(p[0], p[1], p[2], p[3]);
	                    break;
	                case 'A':
	                    var cx = p[0], cy = p[1], rx = p[2], ry = p[3], theta = p[4], dTheta = p[5], psi = p[6], fs = p[7];
	                    var r = rx > ry ? rx : ry;
	                    var scaleX = rx > ry ? 1 : rx / ry;
	                    var scaleY = rx > ry ? ry / rx : 1;
	                    context.translate(cx, cy);
	                    context.rotate(psi);
	                    context.scale(scaleX, scaleY);
	                    context.arc(0, 0, r, theta, theta + dTheta, 1 - fs);
	                    context.scale(1 / scaleX, 1 / scaleY);
	                    context.rotate(-psi);
	                    context.translate(-cx, -cy);
	                    break;
	                case 'z':
	                    isClosed = true;
	                    context.closePath();
	                    break;
	            }
	        }
	        if (!isClosed && !this.hasFill()) {
	            context.strokeShape(this);
	        }
	        else {
	            context.fillStrokeShape(this);
	        }
	    }
	    getSelfRect() {
	        var points = [];
	        this.dataArray.forEach(function (data) {
	            if (data.command === 'A') {
	                var start = data.points[4];
	                var dTheta = data.points[5];
	                var end = data.points[4] + dTheta;
	                var inc = Math.PI / 180.0;
	                if (Math.abs(start - end) < inc) {
	                    inc = Math.abs(start - end);
	                }
	                if (dTheta < 0) {
	                    for (let t = start - inc; t > end; t -= inc) {
	                        const point = Path.getPointOnEllipticalArc(data.points[0], data.points[1], data.points[2], data.points[3], t, 0);
	                        points.push(point.x, point.y);
	                    }
	                }
	                else {
	                    for (let t = start + inc; t < end; t += inc) {
	                        const point = Path.getPointOnEllipticalArc(data.points[0], data.points[1], data.points[2], data.points[3], t, 0);
	                        points.push(point.x, point.y);
	                    }
	                }
	            }
	            else if (data.command === 'C') {
	                for (let t = 0.0; t <= 1; t += 0.01) {
	                    const point = Path.getPointOnCubicBezier(t, data.start.x, data.start.y, data.points[0], data.points[1], data.points[2], data.points[3], data.points[4], data.points[5]);
	                    points.push(point.x, point.y);
	                }
	            }
	            else {
	                points = points.concat(data.points);
	            }
	        });
	        var minX = points[0];
	        var maxX = points[0];
	        var minY = points[1];
	        var maxY = points[1];
	        var x, y;
	        for (var i = 0; i < points.length / 2; i++) {
	            x = points[i * 2];
	            y = points[i * 2 + 1];
	            if (!isNaN(x)) {
	                minX = Math.min(minX, x);
	                maxX = Math.max(maxX, x);
	            }
	            if (!isNaN(y)) {
	                minY = Math.min(minY, y);
	                maxY = Math.max(maxY, y);
	            }
	        }
	        return {
	            x: minX,
	            y: minY,
	            width: maxX - minX,
	            height: maxY - minY,
	        };
	    }
	    getLength() {
	        return this.pathLength;
	    }
	    getPointAtLength(length) {
	        return Path.getPointAtLengthOfDataArray(length, this.dataArray);
	    }
	    static getLineLength(x1, y1, x2, y2) {
	        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
	    }
	    static getPathLength(dataArray) {
	        let pathLength = 0;
	        for (var i = 0; i < dataArray.length; ++i) {
	            pathLength += dataArray[i].pathLength;
	        }
	        return pathLength;
	    }
	    static getPointAtLengthOfDataArray(length, dataArray) {
	        var point, i = 0, ii = dataArray.length;
	        if (!ii) {
	            return null;
	        }
	        while (i < ii && length > dataArray[i].pathLength) {
	            length -= dataArray[i].pathLength;
	            ++i;
	        }
	        if (i === ii) {
	            point = dataArray[i - 1].points.slice(-2);
	            return {
	                x: point[0],
	                y: point[1],
	            };
	        }
	        if (length < 0.01) {
	            point = dataArray[i].points.slice(0, 2);
	            return {
	                x: point[0],
	                y: point[1],
	            };
	        }
	        var cp = dataArray[i];
	        var p = cp.points;
	        switch (cp.command) {
	            case 'L':
	                return Path.getPointOnLine(length, cp.start.x, cp.start.y, p[0], p[1]);
	            case 'C':
	                return Path.getPointOnCubicBezier((0, BezierFunctions_1.t2length)(length, Path.getPathLength(dataArray), (i) => {
	                    return (0, BezierFunctions_1.getCubicArcLength)([cp.start.x, p[0], p[2], p[4]], [cp.start.y, p[1], p[3], p[5]], i);
	                }), cp.start.x, cp.start.y, p[0], p[1], p[2], p[3], p[4], p[5]);
	            case 'Q':
	                return Path.getPointOnQuadraticBezier((0, BezierFunctions_1.t2length)(length, Path.getPathLength(dataArray), (i) => {
	                    return (0, BezierFunctions_1.getQuadraticArcLength)([cp.start.x, p[0], p[2]], [cp.start.y, p[1], p[3]], i);
	                }), cp.start.x, cp.start.y, p[0], p[1], p[2], p[3]);
	            case 'A':
	                var cx = p[0], cy = p[1], rx = p[2], ry = p[3], theta = p[4], dTheta = p[5], psi = p[6];
	                theta += (dTheta * length) / cp.pathLength;
	                return Path.getPointOnEllipticalArc(cx, cy, rx, ry, theta, psi);
	        }
	        return null;
	    }
	    static getPointOnLine(dist, P1x, P1y, P2x, P2y, fromX, fromY) {
	        if (fromX === undefined) {
	            fromX = P1x;
	        }
	        if (fromY === undefined) {
	            fromY = P1y;
	        }
	        var m = (P2y - P1y) / (P2x - P1x + 0.00000001);
	        var run = Math.sqrt((dist * dist) / (1 + m * m));
	        if (P2x < P1x) {
	            run *= -1;
	        }
	        var rise = m * run;
	        var pt;
	        if (P2x === P1x) {
	            pt = {
	                x: fromX,
	                y: fromY + rise,
	            };
	        }
	        else if ((fromY - P1y) / (fromX - P1x + 0.00000001) === m) {
	            pt = {
	                x: fromX + run,
	                y: fromY + rise,
	            };
	        }
	        else {
	            var ix, iy;
	            var len = this.getLineLength(P1x, P1y, P2x, P2y);
	            var u = (fromX - P1x) * (P2x - P1x) + (fromY - P1y) * (P2y - P1y);
	            u = u / (len * len);
	            ix = P1x + u * (P2x - P1x);
	            iy = P1y + u * (P2y - P1y);
	            var pRise = this.getLineLength(fromX, fromY, ix, iy);
	            var pRun = Math.sqrt(dist * dist - pRise * pRise);
	            run = Math.sqrt((pRun * pRun) / (1 + m * m));
	            if (P2x < P1x) {
	                run *= -1;
	            }
	            rise = m * run;
	            pt = {
	                x: ix + run,
	                y: iy + rise,
	            };
	        }
	        return pt;
	    }
	    static getPointOnCubicBezier(pct, P1x, P1y, P2x, P2y, P3x, P3y, P4x, P4y) {
	        function CB1(t) {
	            return t * t * t;
	        }
	        function CB2(t) {
	            return 3 * t * t * (1 - t);
	        }
	        function CB3(t) {
	            return 3 * t * (1 - t) * (1 - t);
	        }
	        function CB4(t) {
	            return (1 - t) * (1 - t) * (1 - t);
	        }
	        var x = P4x * CB1(pct) + P3x * CB2(pct) + P2x * CB3(pct) + P1x * CB4(pct);
	        var y = P4y * CB1(pct) + P3y * CB2(pct) + P2y * CB3(pct) + P1y * CB4(pct);
	        return {
	            x: x,
	            y: y,
	        };
	    }
	    static getPointOnQuadraticBezier(pct, P1x, P1y, P2x, P2y, P3x, P3y) {
	        function QB1(t) {
	            return t * t;
	        }
	        function QB2(t) {
	            return 2 * t * (1 - t);
	        }
	        function QB3(t) {
	            return (1 - t) * (1 - t);
	        }
	        var x = P3x * QB1(pct) + P2x * QB2(pct) + P1x * QB3(pct);
	        var y = P3y * QB1(pct) + P2y * QB2(pct) + P1y * QB3(pct);
	        return {
	            x: x,
	            y: y,
	        };
	    }
	    static getPointOnEllipticalArc(cx, cy, rx, ry, theta, psi) {
	        var cosPsi = Math.cos(psi), sinPsi = Math.sin(psi);
	        var pt = {
	            x: rx * Math.cos(theta),
	            y: ry * Math.sin(theta),
	        };
	        return {
	            x: cx + (pt.x * cosPsi - pt.y * sinPsi),
	            y: cy + (pt.x * sinPsi + pt.y * cosPsi),
	        };
	    }
	    static parsePathData(data) {
	        if (!data) {
	            return [];
	        }
	        var cs = data;
	        var cc = [
	            'm',
	            'M',
	            'l',
	            'L',
	            'v',
	            'V',
	            'h',
	            'H',
	            'z',
	            'Z',
	            'c',
	            'C',
	            'q',
	            'Q',
	            't',
	            'T',
	            's',
	            'S',
	            'a',
	            'A',
	        ];
	        cs = cs.replace(new RegExp(' ', 'g'), ',');
	        for (var n = 0; n < cc.length; n++) {
	            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);
	        }
	        var arr = cs.split('|');
	        var ca = [];
	        var coords = [];
	        var cpx = 0;
	        var cpy = 0;
	        var re = /([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:e[-+]?\d+)?)/gi;
	        var match;
	        for (n = 1; n < arr.length; n++) {
	            var str = arr[n];
	            var c = str.charAt(0);
	            str = str.slice(1);
	            coords.length = 0;
	            while ((match = re.exec(str))) {
	                coords.push(match[0]);
	            }
	            var p = [];
	            for (var j = 0, jlen = coords.length; j < jlen; j++) {
	                if (coords[j] === '00') {
	                    p.push(0, 0);
	                    continue;
	                }
	                var parsed = parseFloat(coords[j]);
	                if (!isNaN(parsed)) {
	                    p.push(parsed);
	                }
	                else {
	                    p.push(0);
	                }
	            }
	            while (p.length > 0) {
	                if (isNaN(p[0])) {
	                    break;
	                }
	                var cmd = '';
	                var points = [];
	                var startX = cpx, startY = cpy;
	                var prevCmd, ctlPtx, ctlPty;
	                var rx, ry, psi, fa, fs, x1, y1;
	                switch (c) {
	                    case 'l':
	                        cpx += p.shift();
	                        cpy += p.shift();
	                        cmd = 'L';
	                        points.push(cpx, cpy);
	                        break;
	                    case 'L':
	                        cpx = p.shift();
	                        cpy = p.shift();
	                        points.push(cpx, cpy);
	                        break;
	                    case 'm':
	                        var dx = p.shift();
	                        var dy = p.shift();
	                        cpx += dx;
	                        cpy += dy;
	                        cmd = 'M';
	                        if (ca.length > 2 && ca[ca.length - 1].command === 'z') {
	                            for (var idx = ca.length - 2; idx >= 0; idx--) {
	                                if (ca[idx].command === 'M') {
	                                    cpx = ca[idx].points[0] + dx;
	                                    cpy = ca[idx].points[1] + dy;
	                                    break;
	                                }
	                            }
	                        }
	                        points.push(cpx, cpy);
	                        c = 'l';
	                        break;
	                    case 'M':
	                        cpx = p.shift();
	                        cpy = p.shift();
	                        cmd = 'M';
	                        points.push(cpx, cpy);
	                        c = 'L';
	                        break;
	                    case 'h':
	                        cpx += p.shift();
	                        cmd = 'L';
	                        points.push(cpx, cpy);
	                        break;
	                    case 'H':
	                        cpx = p.shift();
	                        cmd = 'L';
	                        points.push(cpx, cpy);
	                        break;
	                    case 'v':
	                        cpy += p.shift();
	                        cmd = 'L';
	                        points.push(cpx, cpy);
	                        break;
	                    case 'V':
	                        cpy = p.shift();
	                        cmd = 'L';
	                        points.push(cpx, cpy);
	                        break;
	                    case 'C':
	                        points.push(p.shift(), p.shift(), p.shift(), p.shift());
	                        cpx = p.shift();
	                        cpy = p.shift();
	                        points.push(cpx, cpy);
	                        break;
	                    case 'c':
	                        points.push(cpx + p.shift(), cpy + p.shift(), cpx + p.shift(), cpy + p.shift());
	                        cpx += p.shift();
	                        cpy += p.shift();
	                        cmd = 'C';
	                        points.push(cpx, cpy);
	                        break;
	                    case 'S':
	                        ctlPtx = cpx;
	                        ctlPty = cpy;
	                        prevCmd = ca[ca.length - 1];
	                        if (prevCmd.command === 'C') {
	                            ctlPtx = cpx + (cpx - prevCmd.points[2]);
	                            ctlPty = cpy + (cpy - prevCmd.points[3]);
	                        }
	                        points.push(ctlPtx, ctlPty, p.shift(), p.shift());
	                        cpx = p.shift();
	                        cpy = p.shift();
	                        cmd = 'C';
	                        points.push(cpx, cpy);
	                        break;
	                    case 's':
	                        ctlPtx = cpx;
	                        ctlPty = cpy;
	                        prevCmd = ca[ca.length - 1];
	                        if (prevCmd.command === 'C') {
	                            ctlPtx = cpx + (cpx - prevCmd.points[2]);
	                            ctlPty = cpy + (cpy - prevCmd.points[3]);
	                        }
	                        points.push(ctlPtx, ctlPty, cpx + p.shift(), cpy + p.shift());
	                        cpx += p.shift();
	                        cpy += p.shift();
	                        cmd = 'C';
	                        points.push(cpx, cpy);
	                        break;
	                    case 'Q':
	                        points.push(p.shift(), p.shift());
	                        cpx = p.shift();
	                        cpy = p.shift();
	                        points.push(cpx, cpy);
	                        break;
	                    case 'q':
	                        points.push(cpx + p.shift(), cpy + p.shift());
	                        cpx += p.shift();
	                        cpy += p.shift();
	                        cmd = 'Q';
	                        points.push(cpx, cpy);
	                        break;
	                    case 'T':
	                        ctlPtx = cpx;
	                        ctlPty = cpy;
	                        prevCmd = ca[ca.length - 1];
	                        if (prevCmd.command === 'Q') {
	                            ctlPtx = cpx + (cpx - prevCmd.points[0]);
	                            ctlPty = cpy + (cpy - prevCmd.points[1]);
	                        }
	                        cpx = p.shift();
	                        cpy = p.shift();
	                        cmd = 'Q';
	                        points.push(ctlPtx, ctlPty, cpx, cpy);
	                        break;
	                    case 't':
	                        ctlPtx = cpx;
	                        ctlPty = cpy;
	                        prevCmd = ca[ca.length - 1];
	                        if (prevCmd.command === 'Q') {
	                            ctlPtx = cpx + (cpx - prevCmd.points[0]);
	                            ctlPty = cpy + (cpy - prevCmd.points[1]);
	                        }
	                        cpx += p.shift();
	                        cpy += p.shift();
	                        cmd = 'Q';
	                        points.push(ctlPtx, ctlPty, cpx, cpy);
	                        break;
	                    case 'A':
	                        rx = p.shift();
	                        ry = p.shift();
	                        psi = p.shift();
	                        fa = p.shift();
	                        fs = p.shift();
	                        x1 = cpx;
	                        y1 = cpy;
	                        cpx = p.shift();
	                        cpy = p.shift();
	                        cmd = 'A';
	                        points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);
	                        break;
	                    case 'a':
	                        rx = p.shift();
	                        ry = p.shift();
	                        psi = p.shift();
	                        fa = p.shift();
	                        fs = p.shift();
	                        x1 = cpx;
	                        y1 = cpy;
	                        cpx += p.shift();
	                        cpy += p.shift();
	                        cmd = 'A';
	                        points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);
	                        break;
	                }
	                ca.push({
	                    command: cmd || c,
	                    points: points,
	                    start: {
	                        x: startX,
	                        y: startY,
	                    },
	                    pathLength: this.calcLength(startX, startY, cmd || c, points),
	                });
	            }
	            if (c === 'z' || c === 'Z') {
	                ca.push({
	                    command: 'z',
	                    points: [],
	                    start: undefined,
	                    pathLength: 0,
	                });
	            }
	        }
	        return ca;
	    }
	    static calcLength(x, y, cmd, points) {
	        var len, p1, p2, t;
	        var path = Path;
	        switch (cmd) {
	            case 'L':
	                return path.getLineLength(x, y, points[0], points[1]);
	            case 'C':
	                return (0, BezierFunctions_1.getCubicArcLength)([x, points[0], points[2], points[4]], [y, points[1], points[3], points[5]], 1);
	            case 'Q':
	                return (0, BezierFunctions_1.getQuadraticArcLength)([x, points[0], points[2]], [y, points[1], points[3]], 1);
	            case 'A':
	                len = 0.0;
	                var start = points[4];
	                var dTheta = points[5];
	                var end = points[4] + dTheta;
	                var inc = Math.PI / 180.0;
	                if (Math.abs(start - end) < inc) {
	                    inc = Math.abs(start - end);
	                }
	                p1 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], start, 0);
	                if (dTheta < 0) {
	                    for (t = start - inc; t > end; t -= inc) {
	                        p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);
	                        len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
	                        p1 = p2;
	                    }
	                }
	                else {
	                    for (t = start + inc; t < end; t += inc) {
	                        p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);
	                        len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
	                        p1 = p2;
	                    }
	                }
	                p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], end, 0);
	                len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
	                return len;
	        }
	        return 0;
	    }
	    static convertEndpointToCenterParameterization(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg) {
	        var psi = psiDeg * (Math.PI / 180.0);
	        var xp = (Math.cos(psi) * (x1 - x2)) / 2.0 + (Math.sin(psi) * (y1 - y2)) / 2.0;
	        var yp = (-1 * Math.sin(psi) * (x1 - x2)) / 2.0 +
	            (Math.cos(psi) * (y1 - y2)) / 2.0;
	        var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);
	        if (lambda > 1) {
	            rx *= Math.sqrt(lambda);
	            ry *= Math.sqrt(lambda);
	        }
	        var f = Math.sqrt((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) /
	            (rx * rx * (yp * yp) + ry * ry * (xp * xp)));
	        if (fa === fs) {
	            f *= -1;
	        }
	        if (isNaN(f)) {
	            f = 0;
	        }
	        var cxp = (f * rx * yp) / ry;
	        var cyp = (f * -ry * xp) / rx;
	        var cx = (x1 + x2) / 2.0 + Math.cos(psi) * cxp - Math.sin(psi) * cyp;
	        var cy = (y1 + y2) / 2.0 + Math.sin(psi) * cxp + Math.cos(psi) * cyp;
	        var vMag = function (v) {
	            return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
	        };
	        var vRatio = function (u, v) {
	            return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));
	        };
	        var vAngle = function (u, v) {
	            return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));
	        };
	        var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);
	        var u = [(xp - cxp) / rx, (yp - cyp) / ry];
	        var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];
	        var dTheta = vAngle(u, v);
	        if (vRatio(u, v) <= -1) {
	            dTheta = Math.PI;
	        }
	        if (vRatio(u, v) >= 1) {
	            dTheta = 0;
	        }
	        if (fs === 0 && dTheta > 0) {
	            dTheta = dTheta - 2 * Math.PI;
	        }
	        if (fs === 1 && dTheta < 0) {
	            dTheta = dTheta + 2 * Math.PI;
	        }
	        return [cx, cy, rx, ry, theta, dTheta, psi, fs];
	    }
	};
	Path.Path = Path$1;
	Path$1.prototype.className = 'Path';
	Path$1.prototype._attrsAffectingSize = ['data'];
	(0, Global_1._registerNode)(Path$1);
	Factory_1.Factory.addGetterSetter(Path$1, 'data');
	return Path;
}

var hasRequiredArrow;

function requireArrow () {
	if (hasRequiredArrow) return Arrow$4;
	hasRequiredArrow = 1;
	Object.defineProperty(Arrow$4, "__esModule", { value: true });
	Arrow$4.Arrow = void 0;
	const Factory_1 = requireFactory();
	const Line_1 = requireLine();
	const Validators_1 = requireValidators();
	const Global_1 = requireGlobal();
	const Path_1 = requirePath();
	class Arrow extends Line_1.Line {
	    _sceneFunc(ctx) {
	        super._sceneFunc(ctx);
	        var PI2 = Math.PI * 2;
	        var points = this.points();
	        var tp = points;
	        var fromTension = this.tension() !== 0 && points.length > 4;
	        if (fromTension) {
	            tp = this.getTensionPoints();
	        }
	        var length = this.pointerLength();
	        var n = points.length;
	        var dx, dy;
	        if (fromTension) {
	            const lp = [
	                tp[tp.length - 4],
	                tp[tp.length - 3],
	                tp[tp.length - 2],
	                tp[tp.length - 1],
	                points[n - 2],
	                points[n - 1],
	            ];
	            const lastLength = Path_1.Path.calcLength(tp[tp.length - 4], tp[tp.length - 3], 'C', lp);
	            const previous = Path_1.Path.getPointOnQuadraticBezier(Math.min(1, 1 - length / lastLength), lp[0], lp[1], lp[2], lp[3], lp[4], lp[5]);
	            dx = points[n - 2] - previous.x;
	            dy = points[n - 1] - previous.y;
	        }
	        else {
	            dx = points[n - 2] - points[n - 4];
	            dy = points[n - 1] - points[n - 3];
	        }
	        var radians = (Math.atan2(dy, dx) + PI2) % PI2;
	        var width = this.pointerWidth();
	        if (this.pointerAtEnding()) {
	            ctx.save();
	            ctx.beginPath();
	            ctx.translate(points[n - 2], points[n - 1]);
	            ctx.rotate(radians);
	            ctx.moveTo(0, 0);
	            ctx.lineTo(-length, width / 2);
	            ctx.lineTo(-length, -width / 2);
	            ctx.closePath();
	            ctx.restore();
	            this.__fillStroke(ctx);
	        }
	        if (this.pointerAtBeginning()) {
	            ctx.save();
	            ctx.beginPath();
	            ctx.translate(points[0], points[1]);
	            if (fromTension) {
	                dx = (tp[0] + tp[2]) / 2 - points[0];
	                dy = (tp[1] + tp[3]) / 2 - points[1];
	            }
	            else {
	                dx = points[2] - points[0];
	                dy = points[3] - points[1];
	            }
	            ctx.rotate((Math.atan2(-dy, -dx) + PI2) % PI2);
	            ctx.moveTo(0, 0);
	            ctx.lineTo(-length, width / 2);
	            ctx.lineTo(-length, -width / 2);
	            ctx.closePath();
	            ctx.restore();
	            this.__fillStroke(ctx);
	        }
	    }
	    __fillStroke(ctx) {
	        var isDashEnabled = this.dashEnabled();
	        if (isDashEnabled) {
	            this.attrs.dashEnabled = false;
	            ctx.setLineDash([]);
	        }
	        ctx.fillStrokeShape(this);
	        if (isDashEnabled) {
	            this.attrs.dashEnabled = true;
	        }
	    }
	    getSelfRect() {
	        const lineRect = super.getSelfRect();
	        const offset = this.pointerWidth() / 2;
	        return {
	            x: lineRect.x - offset,
	            y: lineRect.y - offset,
	            width: lineRect.width + offset * 2,
	            height: lineRect.height + offset * 2,
	        };
	    }
	}
	Arrow$4.Arrow = Arrow;
	Arrow.prototype.className = 'Arrow';
	(0, Global_1._registerNode)(Arrow);
	Factory_1.Factory.addGetterSetter(Arrow, 'pointerLength', 10, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Arrow, 'pointerWidth', 10, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Arrow, 'pointerAtBeginning', false);
	Factory_1.Factory.addGetterSetter(Arrow, 'pointerAtEnding', true);
	return Arrow$4;
}

var Circle = {};

var hasRequiredCircle;

function requireCircle () {
	if (hasRequiredCircle) return Circle;
	hasRequiredCircle = 1;
	Object.defineProperty(Circle, "__esModule", { value: true });
	Circle.Circle = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Validators_1 = requireValidators();
	const Global_1 = requireGlobal();
	let Circle$1 = class Circle extends Shape_1.Shape {
	    _sceneFunc(context) {
	        context.beginPath();
	        context.arc(0, 0, this.attrs.radius || 0, 0, Math.PI * 2, false);
	        context.closePath();
	        context.fillStrokeShape(this);
	    }
	    getWidth() {
	        return this.radius() * 2;
	    }
	    getHeight() {
	        return this.radius() * 2;
	    }
	    setWidth(width) {
	        if (this.radius() !== width / 2) {
	            this.radius(width / 2);
	        }
	    }
	    setHeight(height) {
	        if (this.radius() !== height / 2) {
	            this.radius(height / 2);
	        }
	    }
	};
	Circle.Circle = Circle$1;
	Circle$1.prototype._centroid = true;
	Circle$1.prototype.className = 'Circle';
	Circle$1.prototype._attrsAffectingSize = ['radius'];
	(0, Global_1._registerNode)(Circle$1);
	Factory_1.Factory.addGetterSetter(Circle$1, 'radius', 0, (0, Validators_1.getNumberValidator)());
	return Circle;
}

var Ellipse$3 = {};

var hasRequiredEllipse;

function requireEllipse () {
	if (hasRequiredEllipse) return Ellipse$3;
	hasRequiredEllipse = 1;
	Object.defineProperty(Ellipse$3, "__esModule", { value: true });
	Ellipse$3.Ellipse = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Validators_1 = requireValidators();
	const Global_1 = requireGlobal();
	class Ellipse extends Shape_1.Shape {
	    _sceneFunc(context) {
	        var rx = this.radiusX(), ry = this.radiusY();
	        context.beginPath();
	        context.save();
	        if (rx !== ry) {
	            context.scale(1, ry / rx);
	        }
	        context.arc(0, 0, rx, 0, Math.PI * 2, false);
	        context.restore();
	        context.closePath();
	        context.fillStrokeShape(this);
	    }
	    getWidth() {
	        return this.radiusX() * 2;
	    }
	    getHeight() {
	        return this.radiusY() * 2;
	    }
	    setWidth(width) {
	        this.radiusX(width / 2);
	    }
	    setHeight(height) {
	        this.radiusY(height / 2);
	    }
	}
	Ellipse$3.Ellipse = Ellipse;
	Ellipse.prototype.className = 'Ellipse';
	Ellipse.prototype._centroid = true;
	Ellipse.prototype._attrsAffectingSize = ['radiusX', 'radiusY'];
	(0, Global_1._registerNode)(Ellipse);
	Factory_1.Factory.addComponentsGetterSetter(Ellipse, 'radius', ['x', 'y']);
	Factory_1.Factory.addGetterSetter(Ellipse, 'radiusX', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Ellipse, 'radiusY', 0, (0, Validators_1.getNumberValidator)());
	return Ellipse$3;
}

var Image$2 = {};

var hasRequiredImage;

function requireImage () {
	if (hasRequiredImage) return Image$2;
	hasRequiredImage = 1;
	Object.defineProperty(Image$2, "__esModule", { value: true });
	Image$2.Image = void 0;
	const Util_1 = requireUtil();
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Global_1 = requireGlobal();
	const Validators_1 = requireValidators();
	class Image extends Shape_1.Shape {
	    constructor(attrs) {
	        super(attrs);
	        this.on('imageChange.konva', () => {
	            this._setImageLoad();
	        });
	        this._setImageLoad();
	    }
	    _setImageLoad() {
	        const image = this.image();
	        if (image && image.complete) {
	            return;
	        }
	        if (image && image.readyState === 4) {
	            return;
	        }
	        if (image && image['addEventListener']) {
	            image['addEventListener']('load', () => {
	                this._requestDraw();
	            });
	        }
	    }
	    _useBufferCanvas() {
	        return super._useBufferCanvas(true);
	    }
	    _sceneFunc(context) {
	        const width = this.getWidth();
	        const height = this.getHeight();
	        const cornerRadius = this.cornerRadius();
	        const image = this.attrs.image;
	        let params;
	        if (image) {
	            const cropWidth = this.attrs.cropWidth;
	            const cropHeight = this.attrs.cropHeight;
	            if (cropWidth && cropHeight) {
	                params = [
	                    image,
	                    this.cropX(),
	                    this.cropY(),
	                    cropWidth,
	                    cropHeight,
	                    0,
	                    0,
	                    width,
	                    height,
	                ];
	            }
	            else {
	                params = [image, 0, 0, width, height];
	            }
	        }
	        if (this.hasFill() || this.hasStroke() || cornerRadius) {
	            context.beginPath();
	            cornerRadius
	                ? Util_1.Util.drawRoundedRectPath(context, width, height, cornerRadius)
	                : context.rect(0, 0, width, height);
	            context.closePath();
	            context.fillStrokeShape(this);
	        }
	        if (image) {
	            if (cornerRadius) {
	                context.clip();
	            }
	            context.drawImage.apply(context, params);
	        }
	    }
	    _hitFunc(context) {
	        var width = this.width(), height = this.height(), cornerRadius = this.cornerRadius();
	        context.beginPath();
	        if (!cornerRadius) {
	            context.rect(0, 0, width, height);
	        }
	        else {
	            Util_1.Util.drawRoundedRectPath(context, width, height, cornerRadius);
	        }
	        context.closePath();
	        context.fillStrokeShape(this);
	    }
	    getWidth() {
	        var _a, _b;
	        return (_a = this.attrs.width) !== null && _a !== void 0 ? _a : (_b = this.image()) === null || _b === void 0 ? void 0 : _b.width;
	    }
	    getHeight() {
	        var _a, _b;
	        return (_a = this.attrs.height) !== null && _a !== void 0 ? _a : (_b = this.image()) === null || _b === void 0 ? void 0 : _b.height;
	    }
	    static fromURL(url, callback, onError = null) {
	        var img = Util_1.Util.createImageElement();
	        img.onload = function () {
	            var image = new Image({
	                image: img,
	            });
	            callback(image);
	        };
	        img.onerror = onError;
	        img.crossOrigin = 'Anonymous';
	        img.src = url;
	    }
	}
	Image$2.Image = Image;
	Image.prototype.className = 'Image';
	(0, Global_1._registerNode)(Image);
	Factory_1.Factory.addGetterSetter(Image, 'cornerRadius', 0, (0, Validators_1.getNumberOrArrayOfNumbersValidator)(4));
	Factory_1.Factory.addGetterSetter(Image, 'image');
	Factory_1.Factory.addComponentsGetterSetter(Image, 'crop', ['x', 'y', 'width', 'height']);
	Factory_1.Factory.addGetterSetter(Image, 'cropX', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Image, 'cropY', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Image, 'cropWidth', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Image, 'cropHeight', 0, (0, Validators_1.getNumberValidator)());
	return Image$2;
}

var Label$8 = {};

var hasRequiredLabel;

function requireLabel () {
	if (hasRequiredLabel) return Label$8;
	hasRequiredLabel = 1;
	Object.defineProperty(Label$8, "__esModule", { value: true });
	Label$8.Tag = Label$8.Label = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Group_1 = requireGroup();
	const Validators_1 = requireValidators();
	const Global_1 = requireGlobal();
	var ATTR_CHANGE_LIST = [
	    'fontFamily',
	    'fontSize',
	    'fontStyle',
	    'padding',
	    'lineHeight',
	    'text',
	    'width',
	    'height',
	    'pointerDirection',
	    'pointerWidth',
	    'pointerHeight',
	], CHANGE_KONVA = 'Change.konva', NONE = 'none', UP = 'up', RIGHT = 'right', DOWN = 'down', LEFT = 'left', attrChangeListLen = ATTR_CHANGE_LIST.length;
	class Label extends Group_1.Group {
	    constructor(config) {
	        super(config);
	        this.on('add.konva', function (evt) {
	            this._addListeners(evt.child);
	            this._sync();
	        });
	    }
	    getText() {
	        return this.find('Text')[0];
	    }
	    getTag() {
	        return this.find('Tag')[0];
	    }
	    _addListeners(text) {
	        var that = this, n;
	        var func = function () {
	            that._sync();
	        };
	        for (n = 0; n < attrChangeListLen; n++) {
	            text.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, func);
	        }
	    }
	    getWidth() {
	        return this.getText().width();
	    }
	    getHeight() {
	        return this.getText().height();
	    }
	    _sync() {
	        var text = this.getText(), tag = this.getTag(), width, height, pointerDirection, pointerWidth, x, y, pointerHeight;
	        if (text && tag) {
	            width = text.width();
	            height = text.height();
	            pointerDirection = tag.pointerDirection();
	            pointerWidth = tag.pointerWidth();
	            pointerHeight = tag.pointerHeight();
	            x = 0;
	            y = 0;
	            switch (pointerDirection) {
	                case UP:
	                    x = width / 2;
	                    y = -1 * pointerHeight;
	                    break;
	                case RIGHT:
	                    x = width + pointerWidth;
	                    y = height / 2;
	                    break;
	                case DOWN:
	                    x = width / 2;
	                    y = height + pointerHeight;
	                    break;
	                case LEFT:
	                    x = -1 * pointerWidth;
	                    y = height / 2;
	                    break;
	            }
	            tag.setAttrs({
	                x: -1 * x,
	                y: -1 * y,
	                width: width,
	                height: height,
	            });
	            text.setAttrs({
	                x: -1 * x,
	                y: -1 * y,
	            });
	        }
	    }
	}
	Label$8.Label = Label;
	Label.prototype.className = 'Label';
	(0, Global_1._registerNode)(Label);
	class Tag extends Shape_1.Shape {
	    _sceneFunc(context) {
	        var width = this.width(), height = this.height(), pointerDirection = this.pointerDirection(), pointerWidth = this.pointerWidth(), pointerHeight = this.pointerHeight(), cornerRadius = this.cornerRadius();
	        let topLeft = 0;
	        let topRight = 0;
	        let bottomLeft = 0;
	        let bottomRight = 0;
	        if (typeof cornerRadius === 'number') {
	            topLeft =
	                topRight =
	                    bottomLeft =
	                        bottomRight =
	                            Math.min(cornerRadius, width / 2, height / 2);
	        }
	        else {
	            topLeft = Math.min(cornerRadius[0] || 0, width / 2, height / 2);
	            topRight = Math.min(cornerRadius[1] || 0, width / 2, height / 2);
	            bottomRight = Math.min(cornerRadius[2] || 0, width / 2, height / 2);
	            bottomLeft = Math.min(cornerRadius[3] || 0, width / 2, height / 2);
	        }
	        context.beginPath();
	        context.moveTo(topLeft, 0);
	        if (pointerDirection === UP) {
	            context.lineTo((width - pointerWidth) / 2, 0);
	            context.lineTo(width / 2, -1 * pointerHeight);
	            context.lineTo((width + pointerWidth) / 2, 0);
	        }
	        context.lineTo(width - topRight, 0);
	        context.arc(width - topRight, topRight, topRight, (Math.PI * 3) / 2, 0, false);
	        if (pointerDirection === RIGHT) {
	            context.lineTo(width, (height - pointerHeight) / 2);
	            context.lineTo(width + pointerWidth, height / 2);
	            context.lineTo(width, (height + pointerHeight) / 2);
	        }
	        context.lineTo(width, height - bottomRight);
	        context.arc(width - bottomRight, height - bottomRight, bottomRight, 0, Math.PI / 2, false);
	        if (pointerDirection === DOWN) {
	            context.lineTo((width + pointerWidth) / 2, height);
	            context.lineTo(width / 2, height + pointerHeight);
	            context.lineTo((width - pointerWidth) / 2, height);
	        }
	        context.lineTo(bottomLeft, height);
	        context.arc(bottomLeft, height - bottomLeft, bottomLeft, Math.PI / 2, Math.PI, false);
	        if (pointerDirection === LEFT) {
	            context.lineTo(0, (height + pointerHeight) / 2);
	            context.lineTo(-1 * pointerWidth, height / 2);
	            context.lineTo(0, (height - pointerHeight) / 2);
	        }
	        context.lineTo(0, topLeft);
	        context.arc(topLeft, topLeft, topLeft, Math.PI, (Math.PI * 3) / 2, false);
	        context.closePath();
	        context.fillStrokeShape(this);
	    }
	    getSelfRect() {
	        var x = 0, y = 0, pointerWidth = this.pointerWidth(), pointerHeight = this.pointerHeight(), direction = this.pointerDirection(), width = this.width(), height = this.height();
	        if (direction === UP) {
	            y -= pointerHeight;
	            height += pointerHeight;
	        }
	        else if (direction === DOWN) {
	            height += pointerHeight;
	        }
	        else if (direction === LEFT) {
	            x -= pointerWidth * 1.5;
	            width += pointerWidth;
	        }
	        else if (direction === RIGHT) {
	            width += pointerWidth * 1.5;
	        }
	        return {
	            x: x,
	            y: y,
	            width: width,
	            height: height,
	        };
	    }
	}
	Label$8.Tag = Tag;
	Tag.prototype.className = 'Tag';
	(0, Global_1._registerNode)(Tag);
	Factory_1.Factory.addGetterSetter(Tag, 'pointerDirection', NONE);
	Factory_1.Factory.addGetterSetter(Tag, 'pointerWidth', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Tag, 'pointerHeight', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Tag, 'cornerRadius', 0, (0, Validators_1.getNumberOrArrayOfNumbersValidator)(4));
	return Label$8;
}

var Rect$1 = {};

var hasRequiredRect;

function requireRect () {
	if (hasRequiredRect) return Rect$1;
	hasRequiredRect = 1;
	Object.defineProperty(Rect$1, "__esModule", { value: true });
	Rect$1.Rect = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Global_1 = requireGlobal();
	const Util_1 = requireUtil();
	const Validators_1 = requireValidators();
	class Rect extends Shape_1.Shape {
	    _sceneFunc(context) {
	        var cornerRadius = this.cornerRadius(), width = this.width(), height = this.height();
	        context.beginPath();
	        if (!cornerRadius) {
	            context.rect(0, 0, width, height);
	        }
	        else {
	            Util_1.Util.drawRoundedRectPath(context, width, height, cornerRadius);
	        }
	        context.closePath();
	        context.fillStrokeShape(this);
	    }
	}
	Rect$1.Rect = Rect;
	Rect.prototype.className = 'Rect';
	(0, Global_1._registerNode)(Rect);
	Factory_1.Factory.addGetterSetter(Rect, 'cornerRadius', 0, (0, Validators_1.getNumberOrArrayOfNumbersValidator)(4));
	return Rect$1;
}

var RegularPolygon$1 = {};

var hasRequiredRegularPolygon;

function requireRegularPolygon () {
	if (hasRequiredRegularPolygon) return RegularPolygon$1;
	hasRequiredRegularPolygon = 1;
	Object.defineProperty(RegularPolygon$1, "__esModule", { value: true });
	RegularPolygon$1.RegularPolygon = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Validators_1 = requireValidators();
	const Global_1 = requireGlobal();
	class RegularPolygon extends Shape_1.Shape {
	    _sceneFunc(context) {
	        const points = this._getPoints();
	        context.beginPath();
	        context.moveTo(points[0].x, points[0].y);
	        for (var n = 1; n < points.length; n++) {
	            context.lineTo(points[n].x, points[n].y);
	        }
	        context.closePath();
	        context.fillStrokeShape(this);
	    }
	    _getPoints() {
	        const sides = this.attrs.sides;
	        const radius = this.attrs.radius || 0;
	        const points = [];
	        for (var n = 0; n < sides; n++) {
	            points.push({
	                x: radius * Math.sin((n * 2 * Math.PI) / sides),
	                y: -1 * radius * Math.cos((n * 2 * Math.PI) / sides),
	            });
	        }
	        return points;
	    }
	    getSelfRect() {
	        const points = this._getPoints();
	        var minX = points[0].x;
	        var maxX = points[0].y;
	        var minY = points[0].x;
	        var maxY = points[0].y;
	        points.forEach((point) => {
	            minX = Math.min(minX, point.x);
	            maxX = Math.max(maxX, point.x);
	            minY = Math.min(minY, point.y);
	            maxY = Math.max(maxY, point.y);
	        });
	        return {
	            x: minX,
	            y: minY,
	            width: maxX - minX,
	            height: maxY - minY,
	        };
	    }
	    getWidth() {
	        return this.radius() * 2;
	    }
	    getHeight() {
	        return this.radius() * 2;
	    }
	    setWidth(width) {
	        this.radius(width / 2);
	    }
	    setHeight(height) {
	        this.radius(height / 2);
	    }
	}
	RegularPolygon$1.RegularPolygon = RegularPolygon;
	RegularPolygon.prototype.className = 'RegularPolygon';
	RegularPolygon.prototype._centroid = true;
	RegularPolygon.prototype._attrsAffectingSize = ['radius'];
	(0, Global_1._registerNode)(RegularPolygon);
	Factory_1.Factory.addGetterSetter(RegularPolygon, 'radius', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(RegularPolygon, 'sides', 0, (0, Validators_1.getNumberValidator)());
	return RegularPolygon$1;
}

var Ring = {};

var hasRequiredRing;

function requireRing () {
	if (hasRequiredRing) return Ring;
	hasRequiredRing = 1;
	Object.defineProperty(Ring, "__esModule", { value: true });
	Ring.Ring = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Validators_1 = requireValidators();
	const Global_1 = requireGlobal();
	var PIx2 = Math.PI * 2;
	let Ring$1 = class Ring extends Shape_1.Shape {
	    _sceneFunc(context) {
	        context.beginPath();
	        context.arc(0, 0, this.innerRadius(), 0, PIx2, false);
	        context.moveTo(this.outerRadius(), 0);
	        context.arc(0, 0, this.outerRadius(), PIx2, 0, true);
	        context.closePath();
	        context.fillStrokeShape(this);
	    }
	    getWidth() {
	        return this.outerRadius() * 2;
	    }
	    getHeight() {
	        return this.outerRadius() * 2;
	    }
	    setWidth(width) {
	        this.outerRadius(width / 2);
	    }
	    setHeight(height) {
	        this.outerRadius(height / 2);
	    }
	};
	Ring.Ring = Ring$1;
	Ring$1.prototype.className = 'Ring';
	Ring$1.prototype._centroid = true;
	Ring$1.prototype._attrsAffectingSize = ['innerRadius', 'outerRadius'];
	(0, Global_1._registerNode)(Ring$1);
	Factory_1.Factory.addGetterSetter(Ring$1, 'innerRadius', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Ring$1, 'outerRadius', 0, (0, Validators_1.getNumberValidator)());
	return Ring;
}

var Sprite = {};

var hasRequiredSprite;

function requireSprite () {
	if (hasRequiredSprite) return Sprite;
	hasRequiredSprite = 1;
	Object.defineProperty(Sprite, "__esModule", { value: true });
	Sprite.Sprite = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Animation_1 = requireAnimation();
	const Validators_1 = requireValidators();
	const Global_1 = requireGlobal();
	let Sprite$1 = class Sprite extends Shape_1.Shape {
	    constructor(config) {
	        super(config);
	        this._updated = true;
	        this.anim = new Animation_1.Animation(() => {
	            var updated = this._updated;
	            this._updated = false;
	            return updated;
	        });
	        this.on('animationChange.konva', function () {
	            this.frameIndex(0);
	        });
	        this.on('frameIndexChange.konva', function () {
	            this._updated = true;
	        });
	        this.on('frameRateChange.konva', function () {
	            if (!this.anim.isRunning()) {
	                return;
	            }
	            clearInterval(this.interval);
	            this._setInterval();
	        });
	    }
	    _sceneFunc(context) {
	        var anim = this.animation(), index = this.frameIndex(), ix4 = index * 4, set = this.animations()[anim], offsets = this.frameOffsets(), x = set[ix4 + 0], y = set[ix4 + 1], width = set[ix4 + 2], height = set[ix4 + 3], image = this.image();
	        if (this.hasFill() || this.hasStroke()) {
	            context.beginPath();
	            context.rect(0, 0, width, height);
	            context.closePath();
	            context.fillStrokeShape(this);
	        }
	        if (image) {
	            if (offsets) {
	                var offset = offsets[anim], ix2 = index * 2;
	                context.drawImage(image, x, y, width, height, offset[ix2 + 0], offset[ix2 + 1], width, height);
	            }
	            else {
	                context.drawImage(image, x, y, width, height, 0, 0, width, height);
	            }
	        }
	    }
	    _hitFunc(context) {
	        var anim = this.animation(), index = this.frameIndex(), ix4 = index * 4, set = this.animations()[anim], offsets = this.frameOffsets(), width = set[ix4 + 2], height = set[ix4 + 3];
	        context.beginPath();
	        if (offsets) {
	            var offset = offsets[anim];
	            var ix2 = index * 2;
	            context.rect(offset[ix2 + 0], offset[ix2 + 1], width, height);
	        }
	        else {
	            context.rect(0, 0, width, height);
	        }
	        context.closePath();
	        context.fillShape(this);
	    }
	    _useBufferCanvas() {
	        return super._useBufferCanvas(true);
	    }
	    _setInterval() {
	        var that = this;
	        this.interval = setInterval(function () {
	            that._updateIndex();
	        }, 1000 / this.frameRate());
	    }
	    start() {
	        if (this.isRunning()) {
	            return;
	        }
	        var layer = this.getLayer();
	        this.anim.setLayers(layer);
	        this._setInterval();
	        this.anim.start();
	    }
	    stop() {
	        this.anim.stop();
	        clearInterval(this.interval);
	    }
	    isRunning() {
	        return this.anim.isRunning();
	    }
	    _updateIndex() {
	        var index = this.frameIndex(), animation = this.animation(), animations = this.animations(), anim = animations[animation], len = anim.length / 4;
	        if (index < len - 1) {
	            this.frameIndex(index + 1);
	        }
	        else {
	            this.frameIndex(0);
	        }
	    }
	};
	Sprite.Sprite = Sprite$1;
	Sprite$1.prototype.className = 'Sprite';
	(0, Global_1._registerNode)(Sprite$1);
	Factory_1.Factory.addGetterSetter(Sprite$1, 'animation');
	Factory_1.Factory.addGetterSetter(Sprite$1, 'animations');
	Factory_1.Factory.addGetterSetter(Sprite$1, 'frameOffsets');
	Factory_1.Factory.addGetterSetter(Sprite$1, 'image');
	Factory_1.Factory.addGetterSetter(Sprite$1, 'frameIndex', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Sprite$1, 'frameRate', 17, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.backCompat(Sprite$1, {
	    index: 'frameIndex',
	    getIndex: 'getFrameIndex',
	    setIndex: 'setFrameIndex',
	});
	return Sprite;
}

var Star = {};

var hasRequiredStar;

function requireStar () {
	if (hasRequiredStar) return Star;
	hasRequiredStar = 1;
	Object.defineProperty(Star, "__esModule", { value: true });
	Star.Star = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Validators_1 = requireValidators();
	const Global_1 = requireGlobal();
	let Star$1 = class Star extends Shape_1.Shape {
	    _sceneFunc(context) {
	        var innerRadius = this.innerRadius(), outerRadius = this.outerRadius(), numPoints = this.numPoints();
	        context.beginPath();
	        context.moveTo(0, 0 - outerRadius);
	        for (var n = 1; n < numPoints * 2; n++) {
	            var radius = n % 2 === 0 ? outerRadius : innerRadius;
	            var x = radius * Math.sin((n * Math.PI) / numPoints);
	            var y = -1 * radius * Math.cos((n * Math.PI) / numPoints);
	            context.lineTo(x, y);
	        }
	        context.closePath();
	        context.fillStrokeShape(this);
	    }
	    getWidth() {
	        return this.outerRadius() * 2;
	    }
	    getHeight() {
	        return this.outerRadius() * 2;
	    }
	    setWidth(width) {
	        this.outerRadius(width / 2);
	    }
	    setHeight(height) {
	        this.outerRadius(height / 2);
	    }
	};
	Star.Star = Star$1;
	Star$1.prototype.className = 'Star';
	Star$1.prototype._centroid = true;
	Star$1.prototype._attrsAffectingSize = ['innerRadius', 'outerRadius'];
	(0, Global_1._registerNode)(Star$1);
	Factory_1.Factory.addGetterSetter(Star$1, 'numPoints', 5, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Star$1, 'innerRadius', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Star$1, 'outerRadius', 0, (0, Validators_1.getNumberValidator)());
	return Star;
}

var Text$4 = {};

var hasRequiredText;

function requireText () {
	if (hasRequiredText) return Text$4;
	hasRequiredText = 1;
	Object.defineProperty(Text$4, "__esModule", { value: true });
	Text$4.Text = Text$4.stringToArray = void 0;
	const Util_1 = requireUtil();
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Validators_1 = requireValidators();
	const Global_1 = requireGlobal();
	function stringToArray(string) {
	    return Array.from(string);
	}
	Text$4.stringToArray = stringToArray;
	var AUTO = 'auto', CENTER = 'center', INHERIT = 'inherit', JUSTIFY = 'justify', CHANGE_KONVA = 'Change.konva', CONTEXT_2D = '2d', DASH = '-', LEFT = 'left', TEXT = 'text', TEXT_UPPER = 'Text', TOP = 'top', BOTTOM = 'bottom', MIDDLE = 'middle', NORMAL = 'normal', PX_SPACE = 'px ', SPACE = ' ', RIGHT = 'right', RTL = 'rtl', WORD = 'word', CHAR = 'char', NONE = 'none', ELLIPSIS = '…', ATTR_CHANGE_LIST = [
	    'direction',
	    'fontFamily',
	    'fontSize',
	    'fontStyle',
	    'fontVariant',
	    'padding',
	    'align',
	    'verticalAlign',
	    'lineHeight',
	    'text',
	    'width',
	    'height',
	    'wrap',
	    'ellipsis',
	    'letterSpacing',
	], attrChangeListLen = ATTR_CHANGE_LIST.length;
	function normalizeFontFamily(fontFamily) {
	    return fontFamily
	        .split(',')
	        .map((family) => {
	        family = family.trim();
	        const hasSpace = family.indexOf(' ') >= 0;
	        const hasQuotes = family.indexOf('"') >= 0 || family.indexOf("'") >= 0;
	        if (hasSpace && !hasQuotes) {
	            family = `"${family}"`;
	        }
	        return family;
	    })
	        .join(', ');
	}
	var dummyContext;
	function getDummyContext() {
	    if (dummyContext) {
	        return dummyContext;
	    }
	    dummyContext = Util_1.Util.createCanvasElement().getContext(CONTEXT_2D);
	    return dummyContext;
	}
	function _fillFunc(context) {
	    context.fillText(this._partialText, this._partialTextX, this._partialTextY);
	}
	function _strokeFunc(context) {
	    context.setAttr('miterLimit', 2);
	    context.strokeText(this._partialText, this._partialTextX, this._partialTextY);
	}
	function checkDefaultFill(config) {
	    config = config || {};
	    if (!config.fillLinearGradientColorStops &&
	        !config.fillRadialGradientColorStops &&
	        !config.fillPatternImage) {
	        config.fill = config.fill || 'black';
	    }
	    return config;
	}
	class Text extends Shape_1.Shape {
	    constructor(config) {
	        super(checkDefaultFill(config));
	        this._partialTextX = 0;
	        this._partialTextY = 0;
	        for (var n = 0; n < attrChangeListLen; n++) {
	            this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, this._setTextData);
	        }
	        this._setTextData();
	    }
	    _sceneFunc(context) {
	        var textArr = this.textArr, textArrLen = textArr.length;
	        if (!this.text()) {
	            return;
	        }
	        var padding = this.padding(), fontSize = this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, verticalAlign = this.verticalAlign(), direction = this.direction(), alignY = 0, align = this.align(), totalWidth = this.getWidth(), letterSpacing = this.letterSpacing(), fill = this.fill(), textDecoration = this.textDecoration(), shouldUnderline = textDecoration.indexOf('underline') !== -1, shouldLineThrough = textDecoration.indexOf('line-through') !== -1, n;
	        direction = direction === INHERIT ? context.direction : direction;
	        var translateY = 0;
	        var translateY = lineHeightPx / 2;
	        var lineTranslateX = 0;
	        var lineTranslateY = 0;
	        if (direction === RTL) {
	            context.setAttr('direction', direction);
	        }
	        context.setAttr('font', this._getContextFont());
	        context.setAttr('textBaseline', MIDDLE);
	        context.setAttr('textAlign', LEFT);
	        if (verticalAlign === MIDDLE) {
	            alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;
	        }
	        else if (verticalAlign === BOTTOM) {
	            alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;
	        }
	        context.translate(padding, alignY + padding);
	        for (n = 0; n < textArrLen; n++) {
	            var lineTranslateX = 0;
	            var lineTranslateY = 0;
	            var obj = textArr[n], text = obj.text, width = obj.width, lastLine = obj.lastInParagraph, spacesNumber, oneWord, lineWidth;
	            context.save();
	            if (align === RIGHT) {
	                lineTranslateX += totalWidth - width - padding * 2;
	            }
	            else if (align === CENTER) {
	                lineTranslateX += (totalWidth - width - padding * 2) / 2;
	            }
	            if (shouldUnderline) {
	                context.save();
	                context.beginPath();
	                context.moveTo(lineTranslateX, translateY + lineTranslateY + Math.round(fontSize / 2));
	                spacesNumber = text.split(' ').length - 1;
	                oneWord = spacesNumber === 0;
	                lineWidth =
	                    align === JUSTIFY && !lastLine ? totalWidth - padding * 2 : width;
	                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + Math.round(fontSize / 2));
	                context.lineWidth = fontSize / 15;
	                const gradient = this._getLinearGradient();
	                context.strokeStyle = gradient || fill;
	                context.stroke();
	                context.restore();
	            }
	            if (shouldLineThrough) {
	                context.save();
	                context.beginPath();
	                context.moveTo(lineTranslateX, translateY + lineTranslateY);
	                spacesNumber = text.split(' ').length - 1;
	                oneWord = spacesNumber === 0;
	                lineWidth =
	                    align === JUSTIFY && lastLine && !oneWord
	                        ? totalWidth - padding * 2
	                        : width;
	                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY);
	                context.lineWidth = fontSize / 15;
	                const gradient = this._getLinearGradient();
	                context.strokeStyle = gradient || fill;
	                context.stroke();
	                context.restore();
	            }
	            if (direction !== RTL && (letterSpacing !== 0 || align === JUSTIFY)) {
	                spacesNumber = text.split(' ').length - 1;
	                var array = stringToArray(text);
	                for (var li = 0; li < array.length; li++) {
	                    var letter = array[li];
	                    if (letter === ' ' && !lastLine && align === JUSTIFY) {
	                        lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;
	                    }
	                    this._partialTextX = lineTranslateX;
	                    this._partialTextY = translateY + lineTranslateY;
	                    this._partialText = letter;
	                    context.fillStrokeShape(this);
	                    lineTranslateX += this.measureSize(letter).width + letterSpacing;
	                }
	            }
	            else {
	                if (letterSpacing !== 0) {
	                    context.setAttr('letterSpacing', `${letterSpacing}px`);
	                }
	                this._partialTextX = lineTranslateX;
	                this._partialTextY = translateY + lineTranslateY;
	                this._partialText = text;
	                context.fillStrokeShape(this);
	            }
	            context.restore();
	            if (textArrLen > 1) {
	                translateY += lineHeightPx;
	            }
	        }
	    }
	    _hitFunc(context) {
	        var width = this.getWidth(), height = this.getHeight();
	        context.beginPath();
	        context.rect(0, 0, width, height);
	        context.closePath();
	        context.fillStrokeShape(this);
	    }
	    setText(text) {
	        var str = Util_1.Util._isString(text)
	            ? text
	            : text === null || text === undefined
	                ? ''
	                : text + '';
	        this._setAttr(TEXT, str);
	        return this;
	    }
	    getWidth() {
	        var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;
	        return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;
	    }
	    getHeight() {
	        var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;
	        return isAuto
	            ? this.fontSize() * this.textArr.length * this.lineHeight() +
	                this.padding() * 2
	            : this.attrs.height;
	    }
	    getTextWidth() {
	        return this.textWidth;
	    }
	    getTextHeight() {
	        Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');
	        return this.textHeight;
	    }
	    measureSize(text) {
	        var _context = getDummyContext(), fontSize = this.fontSize(), metrics;
	        _context.save();
	        _context.font = this._getContextFont();
	        metrics = _context.measureText(text);
	        _context.restore();
	        return {
	            width: metrics.width,
	            height: fontSize,
	        };
	    }
	    _getContextFont() {
	        return (this.fontStyle() +
	            SPACE +
	            this.fontVariant() +
	            SPACE +
	            (this.fontSize() + PX_SPACE) +
	            normalizeFontFamily(this.fontFamily()));
	    }
	    _addTextLine(line) {
	        const align = this.align();
	        if (align === JUSTIFY) {
	            line = line.trim();
	        }
	        var width = this._getTextWidth(line);
	        return this.textArr.push({
	            text: line,
	            width: width,
	            lastInParagraph: false,
	        });
	    }
	    _getTextWidth(text) {
	        var letterSpacing = this.letterSpacing();
	        var length = text.length;
	        return (getDummyContext().measureText(text).width +
	            (length ? letterSpacing * (length - 1) : 0));
	    }
	    _setTextData() {
	        var lines = this.text().split('\n'), fontSize = +this.fontSize(), textWidth = 0, lineHeightPx = this.lineHeight() * fontSize, width = this.attrs.width, height = this.attrs.height, fixedWidth = width !== AUTO && width !== undefined, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxWidth = width - padding * 2, maxHeightPx = height - padding * 2, currentHeightPx = 0, wrap = this.wrap(), shouldWrap = wrap !== NONE, wrapAtWord = wrap !== CHAR && shouldWrap, shouldAddEllipsis = this.ellipsis();
	        this.textArr = [];
	        getDummyContext().font = this._getContextFont();
	        var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;
	        for (var i = 0, max = lines.length; i < max; ++i) {
	            var line = lines[i];
	            var lineWidth = this._getTextWidth(line);
	            if (fixedWidth && lineWidth > maxWidth) {
	                while (line.length > 0) {
	                    var low = 0, high = line.length, match = '', matchWidth = 0;
	                    while (low < high) {
	                        var mid = (low + high) >>> 1, substr = line.slice(0, mid + 1), substrWidth = this._getTextWidth(substr) + additionalWidth;
	                        if (substrWidth <= maxWidth) {
	                            low = mid + 1;
	                            match = substr;
	                            matchWidth = substrWidth;
	                        }
	                        else {
	                            high = mid;
	                        }
	                    }
	                    if (match) {
	                        if (wrapAtWord) {
	                            var wrapIndex;
	                            var nextChar = line[match.length];
	                            var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;
	                            if (nextIsSpaceOrDash && matchWidth <= maxWidth) {
	                                wrapIndex = match.length;
	                            }
	                            else {
	                                wrapIndex =
	                                    Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) +
	                                        1;
	                            }
	                            if (wrapIndex > 0) {
	                                low = wrapIndex;
	                                match = match.slice(0, low);
	                                matchWidth = this._getTextWidth(match);
	                            }
	                        }
	                        match = match.trimRight();
	                        this._addTextLine(match);
	                        textWidth = Math.max(textWidth, matchWidth);
	                        currentHeightPx += lineHeightPx;
	                        var shouldHandleEllipsis = this._shouldHandleEllipsis(currentHeightPx);
	                        if (shouldHandleEllipsis) {
	                            this._tryToAddEllipsisToLastLine();
	                            break;
	                        }
	                        line = line.slice(low);
	                        line = line.trimLeft();
	                        if (line.length > 0) {
	                            lineWidth = this._getTextWidth(line);
	                            if (lineWidth <= maxWidth) {
	                                this._addTextLine(line);
	                                currentHeightPx += lineHeightPx;
	                                textWidth = Math.max(textWidth, lineWidth);
	                                break;
	                            }
	                        }
	                    }
	                    else {
	                        break;
	                    }
	                }
	            }
	            else {
	                this._addTextLine(line);
	                currentHeightPx += lineHeightPx;
	                textWidth = Math.max(textWidth, lineWidth);
	                if (this._shouldHandleEllipsis(currentHeightPx) && i < max - 1) {
	                    this._tryToAddEllipsisToLastLine();
	                }
	            }
	            if (this.textArr[this.textArr.length - 1]) {
	                this.textArr[this.textArr.length - 1].lastInParagraph = true;
	            }
	            if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {
	                break;
	            }
	        }
	        this.textHeight = fontSize;
	        this.textWidth = textWidth;
	    }
	    _shouldHandleEllipsis(currentHeightPx) {
	        var fontSize = +this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, height = this.attrs.height, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxHeightPx = height - padding * 2, wrap = this.wrap(), shouldWrap = wrap !== NONE;
	        return (!shouldWrap ||
	            (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx));
	    }
	    _tryToAddEllipsisToLastLine() {
	        var width = this.attrs.width, fixedWidth = width !== AUTO && width !== undefined, padding = this.padding(), maxWidth = width - padding * 2, shouldAddEllipsis = this.ellipsis();
	        var lastLine = this.textArr[this.textArr.length - 1];
	        if (!lastLine || !shouldAddEllipsis) {
	            return;
	        }
	        if (fixedWidth) {
	            var haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;
	            if (!haveSpace) {
	                lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);
	            }
	        }
	        this.textArr.splice(this.textArr.length - 1, 1);
	        this._addTextLine(lastLine.text + ELLIPSIS);
	    }
	    getStrokeScaleEnabled() {
	        return true;
	    }
	    _useBufferCanvas() {
	        const hasLine = this.textDecoration().indexOf('underline') !== -1 ||
	            this.textDecoration().indexOf('line-through') !== -1;
	        const hasShadow = this.hasShadow();
	        if (hasLine && hasShadow) {
	            return true;
	        }
	        return super._useBufferCanvas();
	    }
	}
	Text$4.Text = Text;
	Text.prototype._fillFunc = _fillFunc;
	Text.prototype._strokeFunc = _strokeFunc;
	Text.prototype.className = TEXT_UPPER;
	Text.prototype._attrsAffectingSize = [
	    'text',
	    'fontSize',
	    'padding',
	    'wrap',
	    'lineHeight',
	    'letterSpacing',
	];
	(0, Global_1._registerNode)(Text);
	Factory_1.Factory.overWriteSetter(Text, 'width', (0, Validators_1.getNumberOrAutoValidator)());
	Factory_1.Factory.overWriteSetter(Text, 'height', (0, Validators_1.getNumberOrAutoValidator)());
	Factory_1.Factory.addGetterSetter(Text, 'direction', INHERIT);
	Factory_1.Factory.addGetterSetter(Text, 'fontFamily', 'Arial');
	Factory_1.Factory.addGetterSetter(Text, 'fontSize', 12, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Text, 'fontStyle', NORMAL);
	Factory_1.Factory.addGetterSetter(Text, 'fontVariant', NORMAL);
	Factory_1.Factory.addGetterSetter(Text, 'padding', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Text, 'align', LEFT);
	Factory_1.Factory.addGetterSetter(Text, 'verticalAlign', TOP);
	Factory_1.Factory.addGetterSetter(Text, 'lineHeight', 1, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Text, 'wrap', WORD);
	Factory_1.Factory.addGetterSetter(Text, 'ellipsis', false, (0, Validators_1.getBooleanValidator)());
	Factory_1.Factory.addGetterSetter(Text, 'letterSpacing', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Text, 'text', '', (0, Validators_1.getStringValidator)());
	Factory_1.Factory.addGetterSetter(Text, 'textDecoration', '');
	return Text$4;
}

var TextPath = {};

var hasRequiredTextPath;

function requireTextPath () {
	if (hasRequiredTextPath) return TextPath;
	hasRequiredTextPath = 1;
	Object.defineProperty(TextPath, "__esModule", { value: true });
	TextPath.TextPath = void 0;
	const Util_1 = requireUtil();
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Path_1 = requirePath();
	const Text_1 = requireText();
	const Validators_1 = requireValidators();
	const Global_1 = requireGlobal();
	var EMPTY_STRING = '', NORMAL = 'normal';
	function _fillFunc(context) {
	    context.fillText(this.partialText, 0, 0);
	}
	function _strokeFunc(context) {
	    context.strokeText(this.partialText, 0, 0);
	}
	let TextPath$1 = class TextPath extends Shape_1.Shape {
	    constructor(config) {
	        super(config);
	        this.dummyCanvas = Util_1.Util.createCanvasElement();
	        this.dataArray = [];
	        this._readDataAttribute();
	        this.on('dataChange.konva', function () {
	            this._readDataAttribute();
	            this._setTextData();
	        });
	        this.on('textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva fontSizeChange.konva fontFamilyChange.konva', this._setTextData);
	        this._setTextData();
	    }
	    _getTextPathLength() {
	        return Path_1.Path.getPathLength(this.dataArray);
	    }
	    _getPointAtLength(length) {
	        if (!this.attrs.data) {
	            return null;
	        }
	        const totalLength = this.pathLength;
	        if (length - 1 > totalLength) {
	            return null;
	        }
	        return Path_1.Path.getPointAtLengthOfDataArray(length, this.dataArray);
	    }
	    _readDataAttribute() {
	        this.dataArray = Path_1.Path.parsePathData(this.attrs.data);
	        this.pathLength = this._getTextPathLength();
	    }
	    _sceneFunc(context) {
	        context.setAttr('font', this._getContextFont());
	        context.setAttr('textBaseline', this.textBaseline());
	        context.setAttr('textAlign', 'left');
	        context.save();
	        var textDecoration = this.textDecoration();
	        var fill = this.fill();
	        var fontSize = this.fontSize();
	        var glyphInfo = this.glyphInfo;
	        if (textDecoration === 'underline') {
	            context.beginPath();
	        }
	        for (var i = 0; i < glyphInfo.length; i++) {
	            context.save();
	            var p0 = glyphInfo[i].p0;
	            context.translate(p0.x, p0.y);
	            context.rotate(glyphInfo[i].rotation);
	            this.partialText = glyphInfo[i].text;
	            context.fillStrokeShape(this);
	            if (textDecoration === 'underline') {
	                if (i === 0) {
	                    context.moveTo(0, fontSize / 2 + 1);
	                }
	                context.lineTo(fontSize, fontSize / 2 + 1);
	            }
	            context.restore();
	        }
	        if (textDecoration === 'underline') {
	            context.strokeStyle = fill;
	            context.lineWidth = fontSize / 20;
	            context.stroke();
	        }
	        context.restore();
	    }
	    _hitFunc(context) {
	        context.beginPath();
	        var glyphInfo = this.glyphInfo;
	        if (glyphInfo.length >= 1) {
	            var p0 = glyphInfo[0].p0;
	            context.moveTo(p0.x, p0.y);
	        }
	        for (var i = 0; i < glyphInfo.length; i++) {
	            var p1 = glyphInfo[i].p1;
	            context.lineTo(p1.x, p1.y);
	        }
	        context.setAttr('lineWidth', this.fontSize());
	        context.setAttr('strokeStyle', this.colorKey);
	        context.stroke();
	    }
	    getTextWidth() {
	        return this.textWidth;
	    }
	    getTextHeight() {
	        Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');
	        return this.textHeight;
	    }
	    setText(text) {
	        return Text_1.Text.prototype.setText.call(this, text);
	    }
	    _getContextFont() {
	        return Text_1.Text.prototype._getContextFont.call(this);
	    }
	    _getTextSize(text) {
	        var dummyCanvas = this.dummyCanvas;
	        var _context = dummyCanvas.getContext('2d');
	        _context.save();
	        _context.font = this._getContextFont();
	        var metrics = _context.measureText(text);
	        _context.restore();
	        return {
	            width: metrics.width,
	            height: parseInt(`${this.fontSize()}`, 10),
	        };
	    }
	    _setTextData() {
	        const { width, height } = this._getTextSize(this.attrs.text);
	        this.textWidth = width;
	        this.textHeight = height;
	        this.glyphInfo = [];
	        if (!this.attrs.data) {
	            return null;
	        }
	        const letterSpacing = this.letterSpacing();
	        const align = this.align();
	        const kerningFunc = this.kerningFunc();
	        const textWidth = Math.max(this.textWidth + ((this.attrs.text || '').length - 1) * letterSpacing, 0);
	        let offset = 0;
	        if (align === 'center') {
	            offset = Math.max(0, this.pathLength / 2 - textWidth / 2);
	        }
	        if (align === 'right') {
	            offset = Math.max(0, this.pathLength - textWidth);
	        }
	        const charArr = (0, Text_1.stringToArray)(this.text());
	        let offsetToGlyph = offset;
	        for (var i = 0; i < charArr.length; i++) {
	            const charStartPoint = this._getPointAtLength(offsetToGlyph);
	            if (!charStartPoint)
	                return;
	            let glyphWidth = this._getTextSize(charArr[i]).width + letterSpacing;
	            if (charArr[i] === ' ' && align === 'justify') {
	                const numberOfSpaces = this.text().split(' ').length - 1;
	                glyphWidth += (this.pathLength - textWidth) / numberOfSpaces;
	            }
	            const charEndPoint = this._getPointAtLength(offsetToGlyph + glyphWidth);
	            if (!charEndPoint)
	                return;
	            const width = Path_1.Path.getLineLength(charStartPoint.x, charStartPoint.y, charEndPoint.x, charEndPoint.y);
	            let kern = 0;
	            if (kerningFunc) {
	                try {
	                    kern = kerningFunc(charArr[i - 1], charArr[i]) * this.fontSize();
	                }
	                catch (e) {
	                    kern = 0;
	                }
	            }
	            charStartPoint.x += kern;
	            charEndPoint.x += kern;
	            this.textWidth += kern;
	            const midpoint = Path_1.Path.getPointOnLine(kern + width / 2.0, charStartPoint.x, charStartPoint.y, charEndPoint.x, charEndPoint.y);
	            const rotation = Math.atan2(charEndPoint.y - charStartPoint.y, charEndPoint.x - charStartPoint.x);
	            this.glyphInfo.push({
	                transposeX: midpoint.x,
	                transposeY: midpoint.y,
	                text: charArr[i],
	                rotation: rotation,
	                p0: charStartPoint,
	                p1: charEndPoint,
	            });
	            offsetToGlyph += glyphWidth;
	        }
	    }
	    getSelfRect() {
	        if (!this.glyphInfo.length) {
	            return {
	                x: 0,
	                y: 0,
	                width: 0,
	                height: 0,
	            };
	        }
	        var points = [];
	        this.glyphInfo.forEach(function (info) {
	            points.push(info.p0.x);
	            points.push(info.p0.y);
	            points.push(info.p1.x);
	            points.push(info.p1.y);
	        });
	        var minX = points[0] || 0;
	        var maxX = points[0] || 0;
	        var minY = points[1] || 0;
	        var maxY = points[1] || 0;
	        var x, y;
	        for (var i = 0; i < points.length / 2; i++) {
	            x = points[i * 2];
	            y = points[i * 2 + 1];
	            minX = Math.min(minX, x);
	            maxX = Math.max(maxX, x);
	            minY = Math.min(minY, y);
	            maxY = Math.max(maxY, y);
	        }
	        var fontSize = this.fontSize();
	        return {
	            x: minX - fontSize / 2,
	            y: minY - fontSize / 2,
	            width: maxX - minX + fontSize,
	            height: maxY - minY + fontSize,
	        };
	    }
	    destroy() {
	        Util_1.Util.releaseCanvas(this.dummyCanvas);
	        return super.destroy();
	    }
	};
	TextPath.TextPath = TextPath$1;
	TextPath$1.prototype._fillFunc = _fillFunc;
	TextPath$1.prototype._strokeFunc = _strokeFunc;
	TextPath$1.prototype._fillFuncHit = _fillFunc;
	TextPath$1.prototype._strokeFuncHit = _strokeFunc;
	TextPath$1.prototype.className = 'TextPath';
	TextPath$1.prototype._attrsAffectingSize = ['text', 'fontSize', 'data'];
	(0, Global_1._registerNode)(TextPath$1);
	Factory_1.Factory.addGetterSetter(TextPath$1, 'data');
	Factory_1.Factory.addGetterSetter(TextPath$1, 'fontFamily', 'Arial');
	Factory_1.Factory.addGetterSetter(TextPath$1, 'fontSize', 12, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(TextPath$1, 'fontStyle', NORMAL);
	Factory_1.Factory.addGetterSetter(TextPath$1, 'align', 'left');
	Factory_1.Factory.addGetterSetter(TextPath$1, 'letterSpacing', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(TextPath$1, 'textBaseline', 'middle');
	Factory_1.Factory.addGetterSetter(TextPath$1, 'fontVariant', NORMAL);
	Factory_1.Factory.addGetterSetter(TextPath$1, 'text', EMPTY_STRING);
	Factory_1.Factory.addGetterSetter(TextPath$1, 'textDecoration', null);
	Factory_1.Factory.addGetterSetter(TextPath$1, 'kerningFunc', null);
	return TextPath;
}

var Transformer$1 = {};

var hasRequiredTransformer;

function requireTransformer () {
	if (hasRequiredTransformer) return Transformer$1;
	hasRequiredTransformer = 1;
	Object.defineProperty(Transformer$1, "__esModule", { value: true });
	Transformer$1.Transformer = void 0;
	const Util_1 = requireUtil();
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Shape_1 = requireShape();
	const Rect_1 = requireRect();
	const Group_1 = requireGroup();
	const Global_1 = requireGlobal();
	const Validators_1 = requireValidators();
	const Global_2 = requireGlobal();
	var EVENTS_NAME = 'tr-konva';
	var ATTR_CHANGE_LIST = [
	    'resizeEnabledChange',
	    'rotateAnchorOffsetChange',
	    'rotateEnabledChange',
	    'enabledAnchorsChange',
	    'anchorSizeChange',
	    'borderEnabledChange',
	    'borderStrokeChange',
	    'borderStrokeWidthChange',
	    'borderDashChange',
	    'anchorStrokeChange',
	    'anchorStrokeWidthChange',
	    'anchorFillChange',
	    'anchorCornerRadiusChange',
	    'ignoreStrokeChange',
	    'anchorStyleFuncChange',
	]
	    .map((e) => e + `.${EVENTS_NAME}`)
	    .join(' ');
	var NODES_RECT = 'nodesRect';
	var TRANSFORM_CHANGE_STR = [
	    'widthChange',
	    'heightChange',
	    'scaleXChange',
	    'scaleYChange',
	    'skewXChange',
	    'skewYChange',
	    'rotationChange',
	    'offsetXChange',
	    'offsetYChange',
	    'transformsEnabledChange',
	    'strokeWidthChange',
	];
	var ANGLES = {
	    'top-left': -45,
	    'top-center': 0,
	    'top-right': 45,
	    'middle-right': -90,
	    'middle-left': 90,
	    'bottom-left': -135,
	    'bottom-center': 180,
	    'bottom-right': 135,
	};
	const TOUCH_DEVICE = 'ontouchstart' in Global_1.Konva._global;
	function getCursor(anchorName, rad, rotateCursor) {
	    if (anchorName === 'rotater') {
	        return rotateCursor;
	    }
	    rad += Util_1.Util.degToRad(ANGLES[anchorName] || 0);
	    var angle = ((Util_1.Util.radToDeg(rad) % 360) + 360) % 360;
	    if (Util_1.Util._inRange(angle, 315 + 22.5, 360) || Util_1.Util._inRange(angle, 0, 22.5)) {
	        return 'ns-resize';
	    }
	    else if (Util_1.Util._inRange(angle, 45 - 22.5, 45 + 22.5)) {
	        return 'nesw-resize';
	    }
	    else if (Util_1.Util._inRange(angle, 90 - 22.5, 90 + 22.5)) {
	        return 'ew-resize';
	    }
	    else if (Util_1.Util._inRange(angle, 135 - 22.5, 135 + 22.5)) {
	        return 'nwse-resize';
	    }
	    else if (Util_1.Util._inRange(angle, 180 - 22.5, 180 + 22.5)) {
	        return 'ns-resize';
	    }
	    else if (Util_1.Util._inRange(angle, 225 - 22.5, 225 + 22.5)) {
	        return 'nesw-resize';
	    }
	    else if (Util_1.Util._inRange(angle, 270 - 22.5, 270 + 22.5)) {
	        return 'ew-resize';
	    }
	    else if (Util_1.Util._inRange(angle, 315 - 22.5, 315 + 22.5)) {
	        return 'nwse-resize';
	    }
	    else {
	        Util_1.Util.error('Transformer has unknown angle for cursor detection: ' + angle);
	        return 'pointer';
	    }
	}
	var ANCHORS_NAMES = [
	    'top-left',
	    'top-center',
	    'top-right',
	    'middle-right',
	    'middle-left',
	    'bottom-left',
	    'bottom-center',
	    'bottom-right',
	];
	var MAX_SAFE_INTEGER = 100000000;
	function getCenter(shape) {
	    return {
	        x: shape.x +
	            (shape.width / 2) * Math.cos(shape.rotation) +
	            (shape.height / 2) * Math.sin(-shape.rotation),
	        y: shape.y +
	            (shape.height / 2) * Math.cos(shape.rotation) +
	            (shape.width / 2) * Math.sin(shape.rotation),
	    };
	}
	function rotateAroundPoint(shape, angleRad, point) {
	    const x = point.x +
	        (shape.x - point.x) * Math.cos(angleRad) -
	        (shape.y - point.y) * Math.sin(angleRad);
	    const y = point.y +
	        (shape.x - point.x) * Math.sin(angleRad) +
	        (shape.y - point.y) * Math.cos(angleRad);
	    return {
	        ...shape,
	        rotation: shape.rotation + angleRad,
	        x,
	        y,
	    };
	}
	function rotateAroundCenter(shape, deltaRad) {
	    const center = getCenter(shape);
	    return rotateAroundPoint(shape, deltaRad, center);
	}
	function getSnap(snaps, newRotationRad, tol) {
	    let snapped = newRotationRad;
	    for (let i = 0; i < snaps.length; i++) {
	        const angle = Global_1.Konva.getAngle(snaps[i]);
	        const absDiff = Math.abs(angle - newRotationRad) % (Math.PI * 2);
	        const dif = Math.min(absDiff, Math.PI * 2 - absDiff);
	        if (dif < tol) {
	            snapped = angle;
	        }
	    }
	    return snapped;
	}
	let activeTransformersCount = 0;
	class Transformer extends Group_1.Group {
	    constructor(config) {
	        super(config);
	        this._movingAnchorName = null;
	        this._transforming = false;
	        this._createElements();
	        this._handleMouseMove = this._handleMouseMove.bind(this);
	        this._handleMouseUp = this._handleMouseUp.bind(this);
	        this.update = this.update.bind(this);
	        this.on(ATTR_CHANGE_LIST, this.update);
	        if (this.getNode()) {
	            this.update();
	        }
	    }
	    attachTo(node) {
	        this.setNode(node);
	        return this;
	    }
	    setNode(node) {
	        Util_1.Util.warn('tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead.');
	        return this.setNodes([node]);
	    }
	    getNode() {
	        return this._nodes && this._nodes[0];
	    }
	    _getEventNamespace() {
	        return EVENTS_NAME + this._id;
	    }
	    setNodes(nodes = []) {
	        if (this._nodes && this._nodes.length) {
	            this.detach();
	        }
	        const filteredNodes = nodes.filter((node) => {
	            if (node.isAncestorOf(this)) {
	                Util_1.Util.error('Konva.Transformer cannot be an a child of the node you are trying to attach');
	                return false;
	            }
	            return true;
	        });
	        this._nodes = nodes = filteredNodes;
	        if (nodes.length === 1 && this.useSingleNodeRotation()) {
	            this.rotation(nodes[0].getAbsoluteRotation());
	        }
	        else {
	            this.rotation(0);
	        }
	        this._nodes.forEach((node) => {
	            const onChange = () => {
	                if (this.nodes().length === 1 && this.useSingleNodeRotation()) {
	                    this.rotation(this.nodes()[0].getAbsoluteRotation());
	                }
	                this._resetTransformCache();
	                if (!this._transforming && !this.isDragging()) {
	                    this.update();
	                }
	            };
	            const additionalEvents = node._attrsAffectingSize
	                .map((prop) => prop + 'Change.' + this._getEventNamespace())
	                .join(' ');
	            node.on(additionalEvents, onChange);
	            node.on(TRANSFORM_CHANGE_STR.map((e) => e + `.${this._getEventNamespace()}`).join(' '), onChange);
	            node.on(`absoluteTransformChange.${this._getEventNamespace()}`, onChange);
	            this._proxyDrag(node);
	        });
	        this._resetTransformCache();
	        var elementsCreated = !!this.findOne('.top-left');
	        if (elementsCreated) {
	            this.update();
	        }
	        return this;
	    }
	    _proxyDrag(node) {
	        let lastPos;
	        node.on(`dragstart.${this._getEventNamespace()}`, (e) => {
	            lastPos = node.getAbsolutePosition();
	            if (!this.isDragging() && node !== this.findOne('.back')) {
	                this.startDrag(e, false);
	            }
	        });
	        node.on(`dragmove.${this._getEventNamespace()}`, (e) => {
	            if (!lastPos) {
	                return;
	            }
	            const abs = node.getAbsolutePosition();
	            const dx = abs.x - lastPos.x;
	            const dy = abs.y - lastPos.y;
	            this.nodes().forEach((otherNode) => {
	                if (otherNode === node) {
	                    return;
	                }
	                if (otherNode.isDragging()) {
	                    return;
	                }
	                const otherAbs = otherNode.getAbsolutePosition();
	                otherNode.setAbsolutePosition({
	                    x: otherAbs.x + dx,
	                    y: otherAbs.y + dy,
	                });
	                otherNode.startDrag(e);
	            });
	            lastPos = null;
	        });
	    }
	    getNodes() {
	        return this._nodes || [];
	    }
	    getActiveAnchor() {
	        return this._movingAnchorName;
	    }
	    detach() {
	        if (this._nodes) {
	            this._nodes.forEach((node) => {
	                node.off('.' + this._getEventNamespace());
	            });
	        }
	        this._nodes = [];
	        this._resetTransformCache();
	    }
	    _resetTransformCache() {
	        this._clearCache(NODES_RECT);
	        this._clearCache('transform');
	        this._clearSelfAndDescendantCache('absoluteTransform');
	    }
	    _getNodeRect() {
	        return this._getCache(NODES_RECT, this.__getNodeRect);
	    }
	    __getNodeShape(node, rot = this.rotation(), relative) {
	        var rect = node.getClientRect({
	            skipTransform: true,
	            skipShadow: true,
	            skipStroke: this.ignoreStroke(),
	        });
	        var absScale = node.getAbsoluteScale(relative);
	        var absPos = node.getAbsolutePosition(relative);
	        var dx = rect.x * absScale.x - node.offsetX() * absScale.x;
	        var dy = rect.y * absScale.y - node.offsetY() * absScale.y;
	        const rotation = (Global_1.Konva.getAngle(node.getAbsoluteRotation()) + Math.PI * 2) %
	            (Math.PI * 2);
	        const box = {
	            x: absPos.x + dx * Math.cos(rotation) + dy * Math.sin(-rotation),
	            y: absPos.y + dy * Math.cos(rotation) + dx * Math.sin(rotation),
	            width: rect.width * absScale.x,
	            height: rect.height * absScale.y,
	            rotation: rotation,
	        };
	        return rotateAroundPoint(box, -Global_1.Konva.getAngle(rot), {
	            x: 0,
	            y: 0,
	        });
	    }
	    __getNodeRect() {
	        var node = this.getNode();
	        if (!node) {
	            return {
	                x: -MAX_SAFE_INTEGER,
	                y: -MAX_SAFE_INTEGER,
	                width: 0,
	                height: 0,
	                rotation: 0,
	            };
	        }
	        const totalPoints = [];
	        this.nodes().map((node) => {
	            const box = node.getClientRect({
	                skipTransform: true,
	                skipShadow: true,
	                skipStroke: this.ignoreStroke(),
	            });
	            var points = [
	                { x: box.x, y: box.y },
	                { x: box.x + box.width, y: box.y },
	                { x: box.x + box.width, y: box.y + box.height },
	                { x: box.x, y: box.y + box.height },
	            ];
	            var trans = node.getAbsoluteTransform();
	            points.forEach(function (point) {
	                var transformed = trans.point(point);
	                totalPoints.push(transformed);
	            });
	        });
	        const tr = new Util_1.Transform();
	        tr.rotate(-Global_1.Konva.getAngle(this.rotation()));
	        var minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;
	        totalPoints.forEach(function (point) {
	            var transformed = tr.point(point);
	            if (minX === undefined) {
	                minX = maxX = transformed.x;
	                minY = maxY = transformed.y;
	            }
	            minX = Math.min(minX, transformed.x);
	            minY = Math.min(minY, transformed.y);
	            maxX = Math.max(maxX, transformed.x);
	            maxY = Math.max(maxY, transformed.y);
	        });
	        tr.invert();
	        const p = tr.point({ x: minX, y: minY });
	        return {
	            x: p.x,
	            y: p.y,
	            width: maxX - minX,
	            height: maxY - minY,
	            rotation: Global_1.Konva.getAngle(this.rotation()),
	        };
	    }
	    getX() {
	        return this._getNodeRect().x;
	    }
	    getY() {
	        return this._getNodeRect().y;
	    }
	    getWidth() {
	        return this._getNodeRect().width;
	    }
	    getHeight() {
	        return this._getNodeRect().height;
	    }
	    _createElements() {
	        this._createBack();
	        ANCHORS_NAMES.forEach((name) => {
	            this._createAnchor(name);
	        });
	        this._createAnchor('rotater');
	    }
	    _createAnchor(name) {
	        var anchor = new Rect_1.Rect({
	            stroke: 'rgb(0, 161, 255)',
	            fill: 'white',
	            strokeWidth: 1,
	            name: name + ' _anchor',
	            dragDistance: 0,
	            draggable: true,
	            hitStrokeWidth: TOUCH_DEVICE ? 10 : 'auto',
	        });
	        var self = this;
	        anchor.on('mousedown touchstart', function (e) {
	            self._handleMouseDown(e);
	        });
	        anchor.on('dragstart', (e) => {
	            anchor.stopDrag();
	            e.cancelBubble = true;
	        });
	        anchor.on('dragend', (e) => {
	            e.cancelBubble = true;
	        });
	        anchor.on('mouseenter', () => {
	            var rad = Global_1.Konva.getAngle(this.rotation());
	            var rotateCursor = this.rotateAnchorCursor();
	            var cursor = getCursor(name, rad, rotateCursor);
	            anchor.getStage().content &&
	                (anchor.getStage().content.style.cursor = cursor);
	            this._cursorChange = true;
	        });
	        anchor.on('mouseout', () => {
	            anchor.getStage().content &&
	                (anchor.getStage().content.style.cursor = '');
	            this._cursorChange = false;
	        });
	        this.add(anchor);
	    }
	    _createBack() {
	        var back = new Shape_1.Shape({
	            name: 'back',
	            width: 0,
	            height: 0,
	            draggable: true,
	            sceneFunc(ctx, shape) {
	                var tr = shape.getParent();
	                var padding = tr.padding();
	                ctx.beginPath();
	                ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);
	                ctx.moveTo(shape.width() / 2, -padding);
	                if (tr.rotateEnabled() && tr.rotateLineVisible()) {
	                    ctx.lineTo(shape.width() / 2, -tr.rotateAnchorOffset() * Util_1.Util._sign(shape.height()) - padding);
	                }
	                ctx.fillStrokeShape(shape);
	            },
	            hitFunc: (ctx, shape) => {
	                if (!this.shouldOverdrawWholeArea()) {
	                    return;
	                }
	                var padding = this.padding();
	                ctx.beginPath();
	                ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);
	                ctx.fillStrokeShape(shape);
	            },
	        });
	        this.add(back);
	        this._proxyDrag(back);
	        back.on('dragstart', (e) => {
	            e.cancelBubble = true;
	        });
	        back.on('dragmove', (e) => {
	            e.cancelBubble = true;
	        });
	        back.on('dragend', (e) => {
	            e.cancelBubble = true;
	        });
	        this.on('dragmove', (e) => {
	            this.update();
	        });
	    }
	    _handleMouseDown(e) {
	        this._movingAnchorName = e.target.name().split(' ')[0];
	        var attrs = this._getNodeRect();
	        var width = attrs.width;
	        var height = attrs.height;
	        var hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));
	        this.sin = Math.abs(height / hypotenuse);
	        this.cos = Math.abs(width / hypotenuse);
	        if (typeof window !== 'undefined') {
	            window.addEventListener('mousemove', this._handleMouseMove);
	            window.addEventListener('touchmove', this._handleMouseMove);
	            window.addEventListener('mouseup', this._handleMouseUp, true);
	            window.addEventListener('touchend', this._handleMouseUp, true);
	        }
	        this._transforming = true;
	        var ap = e.target.getAbsolutePosition();
	        var pos = e.target.getStage().getPointerPosition();
	        this._anchorDragOffset = {
	            x: pos.x - ap.x,
	            y: pos.y - ap.y,
	        };
	        activeTransformersCount++;
	        this._fire('transformstart', { evt: e.evt, target: this.getNode() });
	        this._nodes.forEach((target) => {
	            target._fire('transformstart', { evt: e.evt, target });
	        });
	    }
	    _handleMouseMove(e) {
	        var x, y, newHypotenuse;
	        var anchorNode = this.findOne('.' + this._movingAnchorName);
	        var stage = anchorNode.getStage();
	        stage.setPointersPositions(e);
	        const pp = stage.getPointerPosition();
	        let newNodePos = {
	            x: pp.x - this._anchorDragOffset.x,
	            y: pp.y - this._anchorDragOffset.y,
	        };
	        const oldAbs = anchorNode.getAbsolutePosition();
	        if (this.anchorDragBoundFunc()) {
	            newNodePos = this.anchorDragBoundFunc()(oldAbs, newNodePos, e);
	        }
	        anchorNode.setAbsolutePosition(newNodePos);
	        const newAbs = anchorNode.getAbsolutePosition();
	        if (oldAbs.x === newAbs.x && oldAbs.y === newAbs.y) {
	            return;
	        }
	        if (this._movingAnchorName === 'rotater') {
	            var attrs = this._getNodeRect();
	            x = anchorNode.x() - attrs.width / 2;
	            y = -anchorNode.y() + attrs.height / 2;
	            let delta = Math.atan2(-y, x) + Math.PI / 2;
	            if (attrs.height < 0) {
	                delta -= Math.PI;
	            }
	            var oldRotation = Global_1.Konva.getAngle(this.rotation());
	            const newRotation = oldRotation + delta;
	            const tol = Global_1.Konva.getAngle(this.rotationSnapTolerance());
	            const snappedRot = getSnap(this.rotationSnaps(), newRotation, tol);
	            const diff = snappedRot - attrs.rotation;
	            const shape = rotateAroundCenter(attrs, diff);
	            this._fitNodesInto(shape, e);
	            return;
	        }
	        var shiftBehavior = this.shiftBehavior();
	        var keepProportion;
	        if (shiftBehavior === 'inverted') {
	            keepProportion = this.keepRatio() && !e.shiftKey;
	        }
	        else if (shiftBehavior === 'none') {
	            keepProportion = this.keepRatio();
	        }
	        else {
	            keepProportion = this.keepRatio() || e.shiftKey;
	        }
	        var centeredScaling = this.centeredScaling() || e.altKey;
	        if (this._movingAnchorName === 'top-left') {
	            if (keepProportion) {
	                var comparePoint = centeredScaling
	                    ? {
	                        x: this.width() / 2,
	                        y: this.height() / 2,
	                    }
	                    : {
	                        x: this.findOne('.bottom-right').x(),
	                        y: this.findOne('.bottom-right').y(),
	                    };
	                newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) +
	                    Math.pow(comparePoint.y - anchorNode.y(), 2));
	                var reverseX = this.findOne('.top-left').x() > comparePoint.x ? -1 : 1;
	                var reverseY = this.findOne('.top-left').y() > comparePoint.y ? -1 : 1;
	                x = newHypotenuse * this.cos * reverseX;
	                y = newHypotenuse * this.sin * reverseY;
	                this.findOne('.top-left').x(comparePoint.x - x);
	                this.findOne('.top-left').y(comparePoint.y - y);
	            }
	        }
	        else if (this._movingAnchorName === 'top-center') {
	            this.findOne('.top-left').y(anchorNode.y());
	        }
	        else if (this._movingAnchorName === 'top-right') {
	            if (keepProportion) {
	                var comparePoint = centeredScaling
	                    ? {
	                        x: this.width() / 2,
	                        y: this.height() / 2,
	                    }
	                    : {
	                        x: this.findOne('.bottom-left').x(),
	                        y: this.findOne('.bottom-left').y(),
	                    };
	                newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) +
	                    Math.pow(comparePoint.y - anchorNode.y(), 2));
	                var reverseX = this.findOne('.top-right').x() < comparePoint.x ? -1 : 1;
	                var reverseY = this.findOne('.top-right').y() > comparePoint.y ? -1 : 1;
	                x = newHypotenuse * this.cos * reverseX;
	                y = newHypotenuse * this.sin * reverseY;
	                this.findOne('.top-right').x(comparePoint.x + x);
	                this.findOne('.top-right').y(comparePoint.y - y);
	            }
	            var pos = anchorNode.position();
	            this.findOne('.top-left').y(pos.y);
	            this.findOne('.bottom-right').x(pos.x);
	        }
	        else if (this._movingAnchorName === 'middle-left') {
	            this.findOne('.top-left').x(anchorNode.x());
	        }
	        else if (this._movingAnchorName === 'middle-right') {
	            this.findOne('.bottom-right').x(anchorNode.x());
	        }
	        else if (this._movingAnchorName === 'bottom-left') {
	            if (keepProportion) {
	                var comparePoint = centeredScaling
	                    ? {
	                        x: this.width() / 2,
	                        y: this.height() / 2,
	                    }
	                    : {
	                        x: this.findOne('.top-right').x(),
	                        y: this.findOne('.top-right').y(),
	                    };
	                newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) +
	                    Math.pow(anchorNode.y() - comparePoint.y, 2));
	                var reverseX = comparePoint.x < anchorNode.x() ? -1 : 1;
	                var reverseY = anchorNode.y() < comparePoint.y ? -1 : 1;
	                x = newHypotenuse * this.cos * reverseX;
	                y = newHypotenuse * this.sin * reverseY;
	                anchorNode.x(comparePoint.x - x);
	                anchorNode.y(comparePoint.y + y);
	            }
	            pos = anchorNode.position();
	            this.findOne('.top-left').x(pos.x);
	            this.findOne('.bottom-right').y(pos.y);
	        }
	        else if (this._movingAnchorName === 'bottom-center') {
	            this.findOne('.bottom-right').y(anchorNode.y());
	        }
	        else if (this._movingAnchorName === 'bottom-right') {
	            if (keepProportion) {
	                var comparePoint = centeredScaling
	                    ? {
	                        x: this.width() / 2,
	                        y: this.height() / 2,
	                    }
	                    : {
	                        x: this.findOne('.top-left').x(),
	                        y: this.findOne('.top-left').y(),
	                    };
	                newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) +
	                    Math.pow(anchorNode.y() - comparePoint.y, 2));
	                var reverseX = this.findOne('.bottom-right').x() < comparePoint.x ? -1 : 1;
	                var reverseY = this.findOne('.bottom-right').y() < comparePoint.y ? -1 : 1;
	                x = newHypotenuse * this.cos * reverseX;
	                y = newHypotenuse * this.sin * reverseY;
	                this.findOne('.bottom-right').x(comparePoint.x + x);
	                this.findOne('.bottom-right').y(comparePoint.y + y);
	            }
	        }
	        else {
	            console.error(new Error('Wrong position argument of selection resizer: ' +
	                this._movingAnchorName));
	        }
	        var centeredScaling = this.centeredScaling() || e.altKey;
	        if (centeredScaling) {
	            var topLeft = this.findOne('.top-left');
	            var bottomRight = this.findOne('.bottom-right');
	            var topOffsetX = topLeft.x();
	            var topOffsetY = topLeft.y();
	            var bottomOffsetX = this.getWidth() - bottomRight.x();
	            var bottomOffsetY = this.getHeight() - bottomRight.y();
	            bottomRight.move({
	                x: -topOffsetX,
	                y: -topOffsetY,
	            });
	            topLeft.move({
	                x: bottomOffsetX,
	                y: bottomOffsetY,
	            });
	        }
	        var absPos = this.findOne('.top-left').getAbsolutePosition();
	        x = absPos.x;
	        y = absPos.y;
	        var width = this.findOne('.bottom-right').x() - this.findOne('.top-left').x();
	        var height = this.findOne('.bottom-right').y() - this.findOne('.top-left').y();
	        this._fitNodesInto({
	            x: x,
	            y: y,
	            width: width,
	            height: height,
	            rotation: Global_1.Konva.getAngle(this.rotation()),
	        }, e);
	    }
	    _handleMouseUp(e) {
	        this._removeEvents(e);
	    }
	    getAbsoluteTransform() {
	        return this.getTransform();
	    }
	    _removeEvents(e) {
	        var _a;
	        if (this._transforming) {
	            this._transforming = false;
	            if (typeof window !== 'undefined') {
	                window.removeEventListener('mousemove', this._handleMouseMove);
	                window.removeEventListener('touchmove', this._handleMouseMove);
	                window.removeEventListener('mouseup', this._handleMouseUp, true);
	                window.removeEventListener('touchend', this._handleMouseUp, true);
	            }
	            var node = this.getNode();
	            activeTransformersCount--;
	            this._fire('transformend', { evt: e, target: node });
	            (_a = this.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();
	            if (node) {
	                this._nodes.forEach((target) => {
	                    var _a;
	                    target._fire('transformend', { evt: e, target });
	                    (_a = target.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();
	                });
	            }
	            this._movingAnchorName = null;
	        }
	    }
	    _fitNodesInto(newAttrs, evt) {
	        var oldAttrs = this._getNodeRect();
	        const minSize = 1;
	        if (Util_1.Util._inRange(newAttrs.width, -this.padding() * 2 - minSize, minSize)) {
	            this.update();
	            return;
	        }
	        if (Util_1.Util._inRange(newAttrs.height, -this.padding() * 2 - minSize, minSize)) {
	            this.update();
	            return;
	        }
	        var t = new Util_1.Transform();
	        t.rotate(Global_1.Konva.getAngle(this.rotation()));
	        if (this._movingAnchorName &&
	            newAttrs.width < 0 &&
	            this._movingAnchorName.indexOf('left') >= 0) {
	            const offset = t.point({
	                x: -this.padding() * 2,
	                y: 0,
	            });
	            newAttrs.x += offset.x;
	            newAttrs.y += offset.y;
	            newAttrs.width += this.padding() * 2;
	            this._movingAnchorName = this._movingAnchorName.replace('left', 'right');
	            this._anchorDragOffset.x -= offset.x;
	            this._anchorDragOffset.y -= offset.y;
	        }
	        else if (this._movingAnchorName &&
	            newAttrs.width < 0 &&
	            this._movingAnchorName.indexOf('right') >= 0) {
	            const offset = t.point({
	                x: this.padding() * 2,
	                y: 0,
	            });
	            this._movingAnchorName = this._movingAnchorName.replace('right', 'left');
	            this._anchorDragOffset.x -= offset.x;
	            this._anchorDragOffset.y -= offset.y;
	            newAttrs.width += this.padding() * 2;
	        }
	        if (this._movingAnchorName &&
	            newAttrs.height < 0 &&
	            this._movingAnchorName.indexOf('top') >= 0) {
	            const offset = t.point({
	                x: 0,
	                y: -this.padding() * 2,
	            });
	            newAttrs.x += offset.x;
	            newAttrs.y += offset.y;
	            this._movingAnchorName = this._movingAnchorName.replace('top', 'bottom');
	            this._anchorDragOffset.x -= offset.x;
	            this._anchorDragOffset.y -= offset.y;
	            newAttrs.height += this.padding() * 2;
	        }
	        else if (this._movingAnchorName &&
	            newAttrs.height < 0 &&
	            this._movingAnchorName.indexOf('bottom') >= 0) {
	            const offset = t.point({
	                x: 0,
	                y: this.padding() * 2,
	            });
	            this._movingAnchorName = this._movingAnchorName.replace('bottom', 'top');
	            this._anchorDragOffset.x -= offset.x;
	            this._anchorDragOffset.y -= offset.y;
	            newAttrs.height += this.padding() * 2;
	        }
	        if (this.boundBoxFunc()) {
	            const bounded = this.boundBoxFunc()(oldAttrs, newAttrs);
	            if (bounded) {
	                newAttrs = bounded;
	            }
	            else {
	                Util_1.Util.warn('boundBoxFunc returned falsy. You should return new bound rect from it!');
	            }
	        }
	        const baseSize = 10000000;
	        const oldTr = new Util_1.Transform();
	        oldTr.translate(oldAttrs.x, oldAttrs.y);
	        oldTr.rotate(oldAttrs.rotation);
	        oldTr.scale(oldAttrs.width / baseSize, oldAttrs.height / baseSize);
	        const newTr = new Util_1.Transform();
	        const newScaleX = newAttrs.width / baseSize;
	        const newScaleY = newAttrs.height / baseSize;
	        if (this.flipEnabled() === false) {
	            newTr.translate(newAttrs.x, newAttrs.y);
	            newTr.rotate(newAttrs.rotation);
	            newTr.translate(newAttrs.width < 0 ? newAttrs.width : 0, newAttrs.height < 0 ? newAttrs.height : 0);
	            newTr.scale(Math.abs(newScaleX), Math.abs(newScaleY));
	        }
	        else {
	            newTr.translate(newAttrs.x, newAttrs.y);
	            newTr.rotate(newAttrs.rotation);
	            newTr.scale(newScaleX, newScaleY);
	        }
	        const delta = newTr.multiply(oldTr.invert());
	        this._nodes.forEach((node) => {
	            var _a;
	            const parentTransform = node.getParent().getAbsoluteTransform();
	            const localTransform = node.getTransform().copy();
	            localTransform.translate(node.offsetX(), node.offsetY());
	            const newLocalTransform = new Util_1.Transform();
	            newLocalTransform
	                .multiply(parentTransform.copy().invert())
	                .multiply(delta)
	                .multiply(parentTransform)
	                .multiply(localTransform);
	            const attrs = newLocalTransform.decompose();
	            node.setAttrs(attrs);
	            (_a = node.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();
	        });
	        this.rotation(Util_1.Util._getRotation(newAttrs.rotation));
	        this._nodes.forEach((node) => {
	            this._fire('transform', { evt: evt, target: node });
	            node._fire('transform', { evt: evt, target: node });
	        });
	        this._resetTransformCache();
	        this.update();
	        this.getLayer().batchDraw();
	    }
	    forceUpdate() {
	        this._resetTransformCache();
	        this.update();
	    }
	    _batchChangeChild(selector, attrs) {
	        const anchor = this.findOne(selector);
	        anchor.setAttrs(attrs);
	    }
	    update() {
	        var _a;
	        var attrs = this._getNodeRect();
	        this.rotation(Util_1.Util._getRotation(attrs.rotation));
	        var width = attrs.width;
	        var height = attrs.height;
	        var enabledAnchors = this.enabledAnchors();
	        var resizeEnabled = this.resizeEnabled();
	        var padding = this.padding();
	        var anchorSize = this.anchorSize();
	        const anchors = this.find('._anchor');
	        anchors.forEach((node) => {
	            node.setAttrs({
	                width: anchorSize,
	                height: anchorSize,
	                offsetX: anchorSize / 2,
	                offsetY: anchorSize / 2,
	                stroke: this.anchorStroke(),
	                strokeWidth: this.anchorStrokeWidth(),
	                fill: this.anchorFill(),
	                cornerRadius: this.anchorCornerRadius(),
	            });
	        });
	        this._batchChangeChild('.top-left', {
	            x: 0,
	            y: 0,
	            offsetX: anchorSize / 2 + padding,
	            offsetY: anchorSize / 2 + padding,
	            visible: resizeEnabled && enabledAnchors.indexOf('top-left') >= 0,
	        });
	        this._batchChangeChild('.top-center', {
	            x: width / 2,
	            y: 0,
	            offsetY: anchorSize / 2 + padding,
	            visible: resizeEnabled && enabledAnchors.indexOf('top-center') >= 0,
	        });
	        this._batchChangeChild('.top-right', {
	            x: width,
	            y: 0,
	            offsetX: anchorSize / 2 - padding,
	            offsetY: anchorSize / 2 + padding,
	            visible: resizeEnabled && enabledAnchors.indexOf('top-right') >= 0,
	        });
	        this._batchChangeChild('.middle-left', {
	            x: 0,
	            y: height / 2,
	            offsetX: anchorSize / 2 + padding,
	            visible: resizeEnabled && enabledAnchors.indexOf('middle-left') >= 0,
	        });
	        this._batchChangeChild('.middle-right', {
	            x: width,
	            y: height / 2,
	            offsetX: anchorSize / 2 - padding,
	            visible: resizeEnabled && enabledAnchors.indexOf('middle-right') >= 0,
	        });
	        this._batchChangeChild('.bottom-left', {
	            x: 0,
	            y: height,
	            offsetX: anchorSize / 2 + padding,
	            offsetY: anchorSize / 2 - padding,
	            visible: resizeEnabled && enabledAnchors.indexOf('bottom-left') >= 0,
	        });
	        this._batchChangeChild('.bottom-center', {
	            x: width / 2,
	            y: height,
	            offsetY: anchorSize / 2 - padding,
	            visible: resizeEnabled && enabledAnchors.indexOf('bottom-center') >= 0,
	        });
	        this._batchChangeChild('.bottom-right', {
	            x: width,
	            y: height,
	            offsetX: anchorSize / 2 - padding,
	            offsetY: anchorSize / 2 - padding,
	            visible: resizeEnabled && enabledAnchors.indexOf('bottom-right') >= 0,
	        });
	        this._batchChangeChild('.rotater', {
	            x: width / 2,
	            y: -this.rotateAnchorOffset() * Util_1.Util._sign(height) - padding,
	            visible: this.rotateEnabled(),
	        });
	        this._batchChangeChild('.back', {
	            width: width,
	            height: height,
	            visible: this.borderEnabled(),
	            stroke: this.borderStroke(),
	            strokeWidth: this.borderStrokeWidth(),
	            dash: this.borderDash(),
	            x: 0,
	            y: 0,
	        });
	        const styleFunc = this.anchorStyleFunc();
	        if (styleFunc) {
	            anchors.forEach((node) => {
	                styleFunc(node);
	            });
	        }
	        (_a = this.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();
	    }
	    isTransforming() {
	        return this._transforming;
	    }
	    stopTransform() {
	        if (this._transforming) {
	            this._removeEvents();
	            var anchorNode = this.findOne('.' + this._movingAnchorName);
	            if (anchorNode) {
	                anchorNode.stopDrag();
	            }
	        }
	    }
	    destroy() {
	        if (this.getStage() && this._cursorChange) {
	            this.getStage().content && (this.getStage().content.style.cursor = '');
	        }
	        Group_1.Group.prototype.destroy.call(this);
	        this.detach();
	        this._removeEvents();
	        return this;
	    }
	    toObject() {
	        return Node_1.Node.prototype.toObject.call(this);
	    }
	    clone(obj) {
	        var node = Node_1.Node.prototype.clone.call(this, obj);
	        return node;
	    }
	    getClientRect() {
	        if (this.nodes().length > 0) {
	            return super.getClientRect();
	        }
	        else {
	            return { x: 0, y: 0, width: 0, height: 0 };
	        }
	    }
	}
	Transformer$1.Transformer = Transformer;
	Transformer.isTransforming = () => {
	    return activeTransformersCount > 0;
	};
	function validateAnchors(val) {
	    if (!(val instanceof Array)) {
	        Util_1.Util.warn('enabledAnchors value should be an array');
	    }
	    if (val instanceof Array) {
	        val.forEach(function (name) {
	            if (ANCHORS_NAMES.indexOf(name) === -1) {
	                Util_1.Util.warn('Unknown anchor name: ' +
	                    name +
	                    '. Available names are: ' +
	                    ANCHORS_NAMES.join(', '));
	            }
	        });
	    }
	    return val || [];
	}
	Transformer.prototype.className = 'Transformer';
	(0, Global_2._registerNode)(Transformer);
	Factory_1.Factory.addGetterSetter(Transformer, 'enabledAnchors', ANCHORS_NAMES, validateAnchors);
	Factory_1.Factory.addGetterSetter(Transformer, 'flipEnabled', true, (0, Validators_1.getBooleanValidator)());
	Factory_1.Factory.addGetterSetter(Transformer, 'resizeEnabled', true);
	Factory_1.Factory.addGetterSetter(Transformer, 'anchorSize', 10, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Transformer, 'rotateEnabled', true);
	Factory_1.Factory.addGetterSetter(Transformer, 'rotateLineVisible', true);
	Factory_1.Factory.addGetterSetter(Transformer, 'rotationSnaps', []);
	Factory_1.Factory.addGetterSetter(Transformer, 'rotateAnchorOffset', 50, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Transformer, 'rotateAnchorCursor', 'crosshair');
	Factory_1.Factory.addGetterSetter(Transformer, 'rotationSnapTolerance', 5, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Transformer, 'borderEnabled', true);
	Factory_1.Factory.addGetterSetter(Transformer, 'anchorStroke', 'rgb(0, 161, 255)');
	Factory_1.Factory.addGetterSetter(Transformer, 'anchorStrokeWidth', 1, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Transformer, 'anchorFill', 'white');
	Factory_1.Factory.addGetterSetter(Transformer, 'anchorCornerRadius', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Transformer, 'borderStroke', 'rgb(0, 161, 255)');
	Factory_1.Factory.addGetterSetter(Transformer, 'borderStrokeWidth', 1, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Transformer, 'borderDash');
	Factory_1.Factory.addGetterSetter(Transformer, 'keepRatio', true);
	Factory_1.Factory.addGetterSetter(Transformer, 'shiftBehavior', 'default');
	Factory_1.Factory.addGetterSetter(Transformer, 'centeredScaling', false);
	Factory_1.Factory.addGetterSetter(Transformer, 'ignoreStroke', false);
	Factory_1.Factory.addGetterSetter(Transformer, 'padding', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Transformer, 'node');
	Factory_1.Factory.addGetterSetter(Transformer, 'nodes');
	Factory_1.Factory.addGetterSetter(Transformer, 'boundBoxFunc');
	Factory_1.Factory.addGetterSetter(Transformer, 'anchorDragBoundFunc');
	Factory_1.Factory.addGetterSetter(Transformer, 'anchorStyleFunc');
	Factory_1.Factory.addGetterSetter(Transformer, 'shouldOverdrawWholeArea', false);
	Factory_1.Factory.addGetterSetter(Transformer, 'useSingleNodeRotation', true);
	Factory_1.Factory.backCompat(Transformer, {
	    lineEnabled: 'borderEnabled',
	    rotateHandlerOffset: 'rotateAnchorOffset',
	    enabledHandlers: 'enabledAnchors',
	});
	return Transformer$1;
}

var Wedge = {};

var hasRequiredWedge;

function requireWedge () {
	if (hasRequiredWedge) return Wedge;
	hasRequiredWedge = 1;
	Object.defineProperty(Wedge, "__esModule", { value: true });
	Wedge.Wedge = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Global_1 = requireGlobal();
	const Validators_1 = requireValidators();
	const Global_2 = requireGlobal();
	let Wedge$1 = class Wedge extends Shape_1.Shape {
	    _sceneFunc(context) {
	        context.beginPath();
	        context.arc(0, 0, this.radius(), 0, Global_1.Konva.getAngle(this.angle()), this.clockwise());
	        context.lineTo(0, 0);
	        context.closePath();
	        context.fillStrokeShape(this);
	    }
	    getWidth() {
	        return this.radius() * 2;
	    }
	    getHeight() {
	        return this.radius() * 2;
	    }
	    setWidth(width) {
	        this.radius(width / 2);
	    }
	    setHeight(height) {
	        this.radius(height / 2);
	    }
	};
	Wedge.Wedge = Wedge$1;
	Wedge$1.prototype.className = 'Wedge';
	Wedge$1.prototype._centroid = true;
	Wedge$1.prototype._attrsAffectingSize = ['radius'];
	(0, Global_2._registerNode)(Wedge$1);
	Factory_1.Factory.addGetterSetter(Wedge$1, 'radius', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Wedge$1, 'angle', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Wedge$1, 'clockwise', false);
	Factory_1.Factory.backCompat(Wedge$1, {
	    angleDeg: 'angle',
	    getAngleDeg: 'getAngle',
	    setAngleDeg: 'setAngle',
	});
	return Wedge;
}

var Blur$2 = {};

var hasRequiredBlur;

function requireBlur () {
	if (hasRequiredBlur) return Blur$2;
	hasRequiredBlur = 1;
	Object.defineProperty(Blur$2, "__esModule", { value: true });
	Blur$2.Blur = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	function BlurStack() {
	    this.r = 0;
	    this.g = 0;
	    this.b = 0;
	    this.a = 0;
	    this.next = null;
	}
	var mul_table = [
	    512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292,
	    512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292,
	    273, 512, 482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259,
	    496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292,
	    282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373,
	    364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259,
	    507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381,
	    374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292,
	    287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461,
	    454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373,
	    368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309,
	    305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259,
	    257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442,
	    437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381,
	    377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332,
	    329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292,
	    289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259,
	];
	var shg_table = [
	    9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17,
	    17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19,
	    19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	    20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	    21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22,
	    22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	    22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23,
	    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	    23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	    24, 24, 24, 24, 24, 24, 24,
	];
	function filterGaussBlurRGBA(imageData, radius) {
	    var pixels = imageData.data, width = imageData.width, height = imageData.height;
	    var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, a_sum, r_out_sum, g_out_sum, b_out_sum, a_out_sum, r_in_sum, g_in_sum, b_in_sum, a_in_sum, pr, pg, pb, pa, rbs;
	    var div = radius + radius + 1, widthMinus1 = width - 1, heightMinus1 = height - 1, radiusPlus1 = radius + 1, sumFactor = (radiusPlus1 * (radiusPlus1 + 1)) / 2, stackStart = new BlurStack(), stackEnd = null, stack = stackStart, stackIn = null, stackOut = null, mul_sum = mul_table[radius], shg_sum = shg_table[radius];
	    for (i = 1; i < div; i++) {
	        stack = stack.next = new BlurStack();
	        if (i === radiusPlus1) {
	            stackEnd = stack;
	        }
	    }
	    stack.next = stackStart;
	    yw = yi = 0;
	    for (y = 0; y < height; y++) {
	        r_in_sum =
	            g_in_sum =
	                b_in_sum =
	                    a_in_sum =
	                        r_sum =
	                            g_sum =
	                                b_sum =
	                                    a_sum =
	                                        0;
	        r_out_sum = radiusPlus1 * (pr = pixels[yi]);
	        g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);
	        b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);
	        a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);
	        r_sum += sumFactor * pr;
	        g_sum += sumFactor * pg;
	        b_sum += sumFactor * pb;
	        a_sum += sumFactor * pa;
	        stack = stackStart;
	        for (i = 0; i < radiusPlus1; i++) {
	            stack.r = pr;
	            stack.g = pg;
	            stack.b = pb;
	            stack.a = pa;
	            stack = stack.next;
	        }
	        for (i = 1; i < radiusPlus1; i++) {
	            p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);
	            r_sum += (stack.r = pr = pixels[p]) * (rbs = radiusPlus1 - i);
	            g_sum += (stack.g = pg = pixels[p + 1]) * rbs;
	            b_sum += (stack.b = pb = pixels[p + 2]) * rbs;
	            a_sum += (stack.a = pa = pixels[p + 3]) * rbs;
	            r_in_sum += pr;
	            g_in_sum += pg;
	            b_in_sum += pb;
	            a_in_sum += pa;
	            stack = stack.next;
	        }
	        stackIn = stackStart;
	        stackOut = stackEnd;
	        for (x = 0; x < width; x++) {
	            pixels[yi + 3] = pa = (a_sum * mul_sum) >> shg_sum;
	            if (pa !== 0) {
	                pa = 255 / pa;
	                pixels[yi] = ((r_sum * mul_sum) >> shg_sum) * pa;
	                pixels[yi + 1] = ((g_sum * mul_sum) >> shg_sum) * pa;
	                pixels[yi + 2] = ((b_sum * mul_sum) >> shg_sum) * pa;
	            }
	            else {
	                pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;
	            }
	            r_sum -= r_out_sum;
	            g_sum -= g_out_sum;
	            b_sum -= b_out_sum;
	            a_sum -= a_out_sum;
	            r_out_sum -= stackIn.r;
	            g_out_sum -= stackIn.g;
	            b_out_sum -= stackIn.b;
	            a_out_sum -= stackIn.a;
	            p = (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1)) << 2;
	            r_in_sum += stackIn.r = pixels[p];
	            g_in_sum += stackIn.g = pixels[p + 1];
	            b_in_sum += stackIn.b = pixels[p + 2];
	            a_in_sum += stackIn.a = pixels[p + 3];
	            r_sum += r_in_sum;
	            g_sum += g_in_sum;
	            b_sum += b_in_sum;
	            a_sum += a_in_sum;
	            stackIn = stackIn.next;
	            r_out_sum += pr = stackOut.r;
	            g_out_sum += pg = stackOut.g;
	            b_out_sum += pb = stackOut.b;
	            a_out_sum += pa = stackOut.a;
	            r_in_sum -= pr;
	            g_in_sum -= pg;
	            b_in_sum -= pb;
	            a_in_sum -= pa;
	            stackOut = stackOut.next;
	            yi += 4;
	        }
	        yw += width;
	    }
	    for (x = 0; x < width; x++) {
	        g_in_sum =
	            b_in_sum =
	                a_in_sum =
	                    r_in_sum =
	                        g_sum =
	                            b_sum =
	                                a_sum =
	                                    r_sum =
	                                        0;
	        yi = x << 2;
	        r_out_sum = radiusPlus1 * (pr = pixels[yi]);
	        g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);
	        b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);
	        a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);
	        r_sum += sumFactor * pr;
	        g_sum += sumFactor * pg;
	        b_sum += sumFactor * pb;
	        a_sum += sumFactor * pa;
	        stack = stackStart;
	        for (i = 0; i < radiusPlus1; i++) {
	            stack.r = pr;
	            stack.g = pg;
	            stack.b = pb;
	            stack.a = pa;
	            stack = stack.next;
	        }
	        yp = width;
	        for (i = 1; i <= radius; i++) {
	            yi = (yp + x) << 2;
	            r_sum += (stack.r = pr = pixels[yi]) * (rbs = radiusPlus1 - i);
	            g_sum += (stack.g = pg = pixels[yi + 1]) * rbs;
	            b_sum += (stack.b = pb = pixels[yi + 2]) * rbs;
	            a_sum += (stack.a = pa = pixels[yi + 3]) * rbs;
	            r_in_sum += pr;
	            g_in_sum += pg;
	            b_in_sum += pb;
	            a_in_sum += pa;
	            stack = stack.next;
	            if (i < heightMinus1) {
	                yp += width;
	            }
	        }
	        yi = x;
	        stackIn = stackStart;
	        stackOut = stackEnd;
	        for (y = 0; y < height; y++) {
	            p = yi << 2;
	            pixels[p + 3] = pa = (a_sum * mul_sum) >> shg_sum;
	            if (pa > 0) {
	                pa = 255 / pa;
	                pixels[p] = ((r_sum * mul_sum) >> shg_sum) * pa;
	                pixels[p + 1] = ((g_sum * mul_sum) >> shg_sum) * pa;
	                pixels[p + 2] = ((b_sum * mul_sum) >> shg_sum) * pa;
	            }
	            else {
	                pixels[p] = pixels[p + 1] = pixels[p + 2] = 0;
	            }
	            r_sum -= r_out_sum;
	            g_sum -= g_out_sum;
	            b_sum -= b_out_sum;
	            a_sum -= a_out_sum;
	            r_out_sum -= stackIn.r;
	            g_out_sum -= stackIn.g;
	            b_out_sum -= stackIn.b;
	            a_out_sum -= stackIn.a;
	            p =
	                (x +
	                    ((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width) <<
	                    2;
	            r_sum += r_in_sum += stackIn.r = pixels[p];
	            g_sum += g_in_sum += stackIn.g = pixels[p + 1];
	            b_sum += b_in_sum += stackIn.b = pixels[p + 2];
	            a_sum += a_in_sum += stackIn.a = pixels[p + 3];
	            stackIn = stackIn.next;
	            r_out_sum += pr = stackOut.r;
	            g_out_sum += pg = stackOut.g;
	            b_out_sum += pb = stackOut.b;
	            a_out_sum += pa = stackOut.a;
	            r_in_sum -= pr;
	            g_in_sum -= pg;
	            b_in_sum -= pb;
	            a_in_sum -= pa;
	            stackOut = stackOut.next;
	            yi += width;
	        }
	    }
	}
	const Blur = function Blur(imageData) {
	    var radius = Math.round(this.blurRadius());
	    if (radius > 0) {
	        filterGaussBlurRGBA(imageData, radius);
	    }
	};
	Blur$2.Blur = Blur;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'blurRadius', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	return Blur$2;
}

var Brighten = {};

var hasRequiredBrighten;

function requireBrighten () {
	if (hasRequiredBrighten) return Brighten;
	hasRequiredBrighten = 1;
	Object.defineProperty(Brighten, "__esModule", { value: true });
	Brighten.Brighten = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	const Brighten$1 = function (imageData) {
	    var brightness = this.brightness() * 255, data = imageData.data, len = data.length, i;
	    for (i = 0; i < len; i += 4) {
	        data[i] += brightness;
	        data[i + 1] += brightness;
	        data[i + 2] += brightness;
	    }
	};
	Brighten.Brighten = Brighten$1;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'brightness', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	return Brighten;
}

var Contrast$2 = {};

var hasRequiredContrast;

function requireContrast () {
	if (hasRequiredContrast) return Contrast$2;
	hasRequiredContrast = 1;
	Object.defineProperty(Contrast$2, "__esModule", { value: true });
	Contrast$2.Contrast = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	const Contrast = function (imageData) {
	    var adjust = Math.pow((this.contrast() + 100) / 100, 2);
	    var data = imageData.data, nPixels = data.length, red = 150, green = 150, blue = 150, i;
	    for (i = 0; i < nPixels; i += 4) {
	        red = data[i];
	        green = data[i + 1];
	        blue = data[i + 2];
	        red /= 255;
	        red -= 0.5;
	        red *= adjust;
	        red += 0.5;
	        red *= 255;
	        green /= 255;
	        green -= 0.5;
	        green *= adjust;
	        green += 0.5;
	        green *= 255;
	        blue /= 255;
	        blue -= 0.5;
	        blue *= adjust;
	        blue += 0.5;
	        blue *= 255;
	        red = red < 0 ? 0 : red > 255 ? 255 : red;
	        green = green < 0 ? 0 : green > 255 ? 255 : green;
	        blue = blue < 0 ? 0 : blue > 255 ? 255 : blue;
	        data[i] = red;
	        data[i + 1] = green;
	        data[i + 2] = blue;
	    }
	};
	Contrast$2.Contrast = Contrast;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'contrast', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	return Contrast$2;
}

var Emboss = {};

var hasRequiredEmboss;

function requireEmboss () {
	if (hasRequiredEmboss) return Emboss;
	hasRequiredEmboss = 1;
	Object.defineProperty(Emboss, "__esModule", { value: true });
	Emboss.Emboss = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Util_1 = requireUtil();
	const Validators_1 = requireValidators();
	const Emboss$1 = function (imageData) {
	    var strength = this.embossStrength() * 10, greyLevel = this.embossWhiteLevel() * 255, direction = this.embossDirection(), blend = this.embossBlend(), dirY = 0, dirX = 0, data = imageData.data, w = imageData.width, h = imageData.height, w4 = w * 4, y = h;
	    switch (direction) {
	        case 'top-left':
	            dirY = -1;
	            dirX = -1;
	            break;
	        case 'top':
	            dirY = -1;
	            dirX = 0;
	            break;
	        case 'top-right':
	            dirY = -1;
	            dirX = 1;
	            break;
	        case 'right':
	            dirY = 0;
	            dirX = 1;
	            break;
	        case 'bottom-right':
	            dirY = 1;
	            dirX = 1;
	            break;
	        case 'bottom':
	            dirY = 1;
	            dirX = 0;
	            break;
	        case 'bottom-left':
	            dirY = 1;
	            dirX = -1;
	            break;
	        case 'left':
	            dirY = 0;
	            dirX = -1;
	            break;
	        default:
	            Util_1.Util.error('Unknown emboss direction: ' + direction);
	    }
	    do {
	        var offsetY = (y - 1) * w4;
	        var otherY = dirY;
	        if (y + otherY < 1) {
	            otherY = 0;
	        }
	        if (y + otherY > h) {
	            otherY = 0;
	        }
	        var offsetYOther = (y - 1 + otherY) * w * 4;
	        var x = w;
	        do {
	            var offset = offsetY + (x - 1) * 4;
	            var otherX = dirX;
	            if (x + otherX < 1) {
	                otherX = 0;
	            }
	            if (x + otherX > w) {
	                otherX = 0;
	            }
	            var offsetOther = offsetYOther + (x - 1 + otherX) * 4;
	            var dR = data[offset] - data[offsetOther];
	            var dG = data[offset + 1] - data[offsetOther + 1];
	            var dB = data[offset + 2] - data[offsetOther + 2];
	            var dif = dR;
	            var absDif = dif > 0 ? dif : -dif;
	            var absG = dG > 0 ? dG : -dG;
	            var absB = dB > 0 ? dB : -dB;
	            if (absG > absDif) {
	                dif = dG;
	            }
	            if (absB > absDif) {
	                dif = dB;
	            }
	            dif *= strength;
	            if (blend) {
	                var r = data[offset] + dif;
	                var g = data[offset + 1] + dif;
	                var b = data[offset + 2] + dif;
	                data[offset] = r > 255 ? 255 : r < 0 ? 0 : r;
	                data[offset + 1] = g > 255 ? 255 : g < 0 ? 0 : g;
	                data[offset + 2] = b > 255 ? 255 : b < 0 ? 0 : b;
	            }
	            else {
	                var grey = greyLevel - dif;
	                if (grey < 0) {
	                    grey = 0;
	                }
	                else if (grey > 255) {
	                    grey = 255;
	                }
	                data[offset] = data[offset + 1] = data[offset + 2] = grey;
	            }
	        } while (--x);
	    } while (--y);
	};
	Emboss.Emboss = Emboss$1;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'embossStrength', 0.5, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'embossWhiteLevel', 0.5, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'embossDirection', 'top-left', null, Factory_1.Factory.afterSetFilter);
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'embossBlend', false, null, Factory_1.Factory.afterSetFilter);
	return Emboss;
}

var Enhance = {};

var hasRequiredEnhance;

function requireEnhance () {
	if (hasRequiredEnhance) return Enhance;
	hasRequiredEnhance = 1;
	Object.defineProperty(Enhance, "__esModule", { value: true });
	Enhance.Enhance = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	function remap(fromValue, fromMin, fromMax, toMin, toMax) {
	    var fromRange = fromMax - fromMin, toRange = toMax - toMin, toValue;
	    if (fromRange === 0) {
	        return toMin + toRange / 2;
	    }
	    if (toRange === 0) {
	        return toMin;
	    }
	    toValue = (fromValue - fromMin) / fromRange;
	    toValue = toRange * toValue + toMin;
	    return toValue;
	}
	const Enhance$1 = function (imageData) {
	    var data = imageData.data, nSubPixels = data.length, rMin = data[0], rMax = rMin, r, gMin = data[1], gMax = gMin, g, bMin = data[2], bMax = bMin, b, i;
	    var enhanceAmount = this.enhance();
	    if (enhanceAmount === 0) {
	        return;
	    }
	    for (i = 0; i < nSubPixels; i += 4) {
	        r = data[i + 0];
	        if (r < rMin) {
	            rMin = r;
	        }
	        else if (r > rMax) {
	            rMax = r;
	        }
	        g = data[i + 1];
	        if (g < gMin) {
	            gMin = g;
	        }
	        else if (g > gMax) {
	            gMax = g;
	        }
	        b = data[i + 2];
	        if (b < bMin) {
	            bMin = b;
	        }
	        else if (b > bMax) {
	            bMax = b;
	        }
	    }
	    if (rMax === rMin) {
	        rMax = 255;
	        rMin = 0;
	    }
	    if (gMax === gMin) {
	        gMax = 255;
	        gMin = 0;
	    }
	    if (bMax === bMin) {
	        bMax = 255;
	        bMin = 0;
	    }
	    var rMid, rGoalMax, rGoalMin, gMid, gGoalMax, gGoalMin, bMid, bGoalMax, bGoalMin;
	    if (enhanceAmount > 0) {
	        rGoalMax = rMax + enhanceAmount * (255 - rMax);
	        rGoalMin = rMin - enhanceAmount * (rMin - 0);
	        gGoalMax = gMax + enhanceAmount * (255 - gMax);
	        gGoalMin = gMin - enhanceAmount * (gMin - 0);
	        bGoalMax = bMax + enhanceAmount * (255 - bMax);
	        bGoalMin = bMin - enhanceAmount * (bMin - 0);
	    }
	    else {
	        rMid = (rMax + rMin) * 0.5;
	        rGoalMax = rMax + enhanceAmount * (rMax - rMid);
	        rGoalMin = rMin + enhanceAmount * (rMin - rMid);
	        gMid = (gMax + gMin) * 0.5;
	        gGoalMax = gMax + enhanceAmount * (gMax - gMid);
	        gGoalMin = gMin + enhanceAmount * (gMin - gMid);
	        bMid = (bMax + bMin) * 0.5;
	        bGoalMax = bMax + enhanceAmount * (bMax - bMid);
	        bGoalMin = bMin + enhanceAmount * (bMin - bMid);
	    }
	    for (i = 0; i < nSubPixels; i += 4) {
	        data[i + 0] = remap(data[i + 0], rMin, rMax, rGoalMin, rGoalMax);
	        data[i + 1] = remap(data[i + 1], gMin, gMax, gGoalMin, gGoalMax);
	        data[i + 2] = remap(data[i + 2], bMin, bMax, bGoalMin, bGoalMax);
	    }
	};
	Enhance.Enhance = Enhance$1;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'enhance', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	return Enhance;
}

var Grayscale = {};

var hasRequiredGrayscale;

function requireGrayscale () {
	if (hasRequiredGrayscale) return Grayscale;
	hasRequiredGrayscale = 1;
	Object.defineProperty(Grayscale, "__esModule", { value: true });
	Grayscale.Grayscale = void 0;
	const Grayscale$1 = function (imageData) {
	    var data = imageData.data, len = data.length, i, brightness;
	    for (i = 0; i < len; i += 4) {
	        brightness = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2];
	        data[i] = brightness;
	        data[i + 1] = brightness;
	        data[i + 2] = brightness;
	    }
	};
	Grayscale.Grayscale = Grayscale$1;
	return Grayscale;
}

var HSL = {};

var hasRequiredHSL;

function requireHSL () {
	if (hasRequiredHSL) return HSL;
	hasRequiredHSL = 1;
	Object.defineProperty(HSL, "__esModule", { value: true });
	HSL.HSL = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'hue', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'saturation', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'luminance', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	const HSL$1 = function (imageData) {
	    var data = imageData.data, nPixels = data.length, v = 1, s = Math.pow(2, this.saturation()), h = Math.abs(this.hue() + 360) % 360, l = this.luminance() * 127, i;
	    var vsu = v * s * Math.cos((h * Math.PI) / 180), vsw = v * s * Math.sin((h * Math.PI) / 180);
	    var rr = 0.299 * v + 0.701 * vsu + 0.167 * vsw, rg = 0.587 * v - 0.587 * vsu + 0.33 * vsw, rb = 0.114 * v - 0.114 * vsu - 0.497 * vsw;
	    var gr = 0.299 * v - 0.299 * vsu - 0.328 * vsw, gg = 0.587 * v + 0.413 * vsu + 0.035 * vsw, gb = 0.114 * v - 0.114 * vsu + 0.293 * vsw;
	    var br = 0.299 * v - 0.3 * vsu + 1.25 * vsw, bg = 0.587 * v - 0.586 * vsu - 1.05 * vsw, bb = 0.114 * v + 0.886 * vsu - 0.2 * vsw;
	    var r, g, b, a;
	    for (i = 0; i < nPixels; i += 4) {
	        r = data[i + 0];
	        g = data[i + 1];
	        b = data[i + 2];
	        a = data[i + 3];
	        data[i + 0] = rr * r + rg * g + rb * b + l;
	        data[i + 1] = gr * r + gg * g + gb * b + l;
	        data[i + 2] = br * r + bg * g + bb * b + l;
	        data[i + 3] = a;
	    }
	};
	HSL.HSL = HSL$1;
	return HSL;
}

var HSV$1 = {};

var hasRequiredHSV;

function requireHSV () {
	if (hasRequiredHSV) return HSV$1;
	hasRequiredHSV = 1;
	Object.defineProperty(HSV$1, "__esModule", { value: true });
	HSV$1.HSV = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	const HSV = function (imageData) {
	    var data = imageData.data, nPixels = data.length, v = Math.pow(2, this.value()), s = Math.pow(2, this.saturation()), h = Math.abs(this.hue() + 360) % 360, i;
	    var vsu = v * s * Math.cos((h * Math.PI) / 180), vsw = v * s * Math.sin((h * Math.PI) / 180);
	    var rr = 0.299 * v + 0.701 * vsu + 0.167 * vsw, rg = 0.587 * v - 0.587 * vsu + 0.33 * vsw, rb = 0.114 * v - 0.114 * vsu - 0.497 * vsw;
	    var gr = 0.299 * v - 0.299 * vsu - 0.328 * vsw, gg = 0.587 * v + 0.413 * vsu + 0.035 * vsw, gb = 0.114 * v - 0.114 * vsu + 0.293 * vsw;
	    var br = 0.299 * v - 0.3 * vsu + 1.25 * vsw, bg = 0.587 * v - 0.586 * vsu - 1.05 * vsw, bb = 0.114 * v + 0.886 * vsu - 0.2 * vsw;
	    var r, g, b, a;
	    for (i = 0; i < nPixels; i += 4) {
	        r = data[i + 0];
	        g = data[i + 1];
	        b = data[i + 2];
	        a = data[i + 3];
	        data[i + 0] = rr * r + rg * g + rb * b;
	        data[i + 1] = gr * r + gg * g + gb * b;
	        data[i + 2] = br * r + bg * g + bb * b;
	        data[i + 3] = a;
	    }
	};
	HSV$1.HSV = HSV;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'hue', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'saturation', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'value', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	return HSV$1;
}

var Invert = {};

var hasRequiredInvert;

function requireInvert () {
	if (hasRequiredInvert) return Invert;
	hasRequiredInvert = 1;
	Object.defineProperty(Invert, "__esModule", { value: true });
	Invert.Invert = void 0;
	const Invert$1 = function (imageData) {
	    var data = imageData.data, len = data.length, i;
	    for (i = 0; i < len; i += 4) {
	        data[i] = 255 - data[i];
	        data[i + 1] = 255 - data[i + 1];
	        data[i + 2] = 255 - data[i + 2];
	    }
	};
	Invert.Invert = Invert$1;
	return Invert;
}

var Kaleidoscope = {};

var hasRequiredKaleidoscope;

function requireKaleidoscope () {
	if (hasRequiredKaleidoscope) return Kaleidoscope;
	hasRequiredKaleidoscope = 1;
	Object.defineProperty(Kaleidoscope, "__esModule", { value: true });
	Kaleidoscope.Kaleidoscope = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Util_1 = requireUtil();
	const Validators_1 = requireValidators();
	var ToPolar = function (src, dst, opt) {
	    var srcPixels = src.data, dstPixels = dst.data, xSize = src.width, ySize = src.height, xMid = opt.polarCenterX || xSize / 2, yMid = opt.polarCenterY || ySize / 2, i, x, y, r = 0, g = 0, b = 0, a = 0;
	    var rad, rMax = Math.sqrt(xMid * xMid + yMid * yMid);
	    x = xSize - xMid;
	    y = ySize - yMid;
	    rad = Math.sqrt(x * x + y * y);
	    rMax = rad > rMax ? rad : rMax;
	    var rSize = ySize, tSize = xSize, radius, theta;
	    var conversion = ((360 / tSize) * Math.PI) / 180, sin, cos;
	    for (theta = 0; theta < tSize; theta += 1) {
	        sin = Math.sin(theta * conversion);
	        cos = Math.cos(theta * conversion);
	        for (radius = 0; radius < rSize; radius += 1) {
	            x = Math.floor(xMid + ((rMax * radius) / rSize) * cos);
	            y = Math.floor(yMid + ((rMax * radius) / rSize) * sin);
	            i = (y * xSize + x) * 4;
	            r = srcPixels[i + 0];
	            g = srcPixels[i + 1];
	            b = srcPixels[i + 2];
	            a = srcPixels[i + 3];
	            i = (theta + radius * xSize) * 4;
	            dstPixels[i + 0] = r;
	            dstPixels[i + 1] = g;
	            dstPixels[i + 2] = b;
	            dstPixels[i + 3] = a;
	        }
	    }
	};
	var FromPolar = function (src, dst, opt) {
	    var srcPixels = src.data, dstPixels = dst.data, xSize = src.width, ySize = src.height, xMid = opt.polarCenterX || xSize / 2, yMid = opt.polarCenterY || ySize / 2, i, x, y, dx, dy, r = 0, g = 0, b = 0, a = 0;
	    var rad, rMax = Math.sqrt(xMid * xMid + yMid * yMid);
	    x = xSize - xMid;
	    y = ySize - yMid;
	    rad = Math.sqrt(x * x + y * y);
	    rMax = rad > rMax ? rad : rMax;
	    var rSize = ySize, tSize = xSize, radius, theta, phaseShift = opt.polarRotation || 0;
	    var x1, y1;
	    for (x = 0; x < xSize; x += 1) {
	        for (y = 0; y < ySize; y += 1) {
	            dx = x - xMid;
	            dy = y - yMid;
	            radius = (Math.sqrt(dx * dx + dy * dy) * rSize) / rMax;
	            theta = ((Math.atan2(dy, dx) * 180) / Math.PI + 360 + phaseShift) % 360;
	            theta = (theta * tSize) / 360;
	            x1 = Math.floor(theta);
	            y1 = Math.floor(radius);
	            i = (y1 * xSize + x1) * 4;
	            r = srcPixels[i + 0];
	            g = srcPixels[i + 1];
	            b = srcPixels[i + 2];
	            a = srcPixels[i + 3];
	            i = (y * xSize + x) * 4;
	            dstPixels[i + 0] = r;
	            dstPixels[i + 1] = g;
	            dstPixels[i + 2] = b;
	            dstPixels[i + 3] = a;
	        }
	    }
	};
	const Kaleidoscope$1 = function (imageData) {
	    var xSize = imageData.width, ySize = imageData.height;
	    var x, y, xoff, i, r, g, b, a, srcPos, dstPos;
	    var power = Math.round(this.kaleidoscopePower());
	    var angle = Math.round(this.kaleidoscopeAngle());
	    var offset = Math.floor((xSize * (angle % 360)) / 360);
	    if (power < 1) {
	        return;
	    }
	    var tempCanvas = Util_1.Util.createCanvasElement();
	    tempCanvas.width = xSize;
	    tempCanvas.height = ySize;
	    var scratchData = tempCanvas
	        .getContext('2d')
	        .getImageData(0, 0, xSize, ySize);
	    Util_1.Util.releaseCanvas(tempCanvas);
	    ToPolar(imageData, scratchData, {
	        polarCenterX: xSize / 2,
	        polarCenterY: ySize / 2,
	    });
	    var minSectionSize = xSize / Math.pow(2, power);
	    while (minSectionSize <= 8) {
	        minSectionSize = minSectionSize * 2;
	        power -= 1;
	    }
	    minSectionSize = Math.ceil(minSectionSize);
	    var sectionSize = minSectionSize;
	    var xStart = 0, xEnd = sectionSize, xDelta = 1;
	    if (offset + minSectionSize > xSize) {
	        xStart = sectionSize;
	        xEnd = 0;
	        xDelta = -1;
	    }
	    for (y = 0; y < ySize; y += 1) {
	        for (x = xStart; x !== xEnd; x += xDelta) {
	            xoff = Math.round(x + offset) % xSize;
	            srcPos = (xSize * y + xoff) * 4;
	            r = scratchData.data[srcPos + 0];
	            g = scratchData.data[srcPos + 1];
	            b = scratchData.data[srcPos + 2];
	            a = scratchData.data[srcPos + 3];
	            dstPos = (xSize * y + x) * 4;
	            scratchData.data[dstPos + 0] = r;
	            scratchData.data[dstPos + 1] = g;
	            scratchData.data[dstPos + 2] = b;
	            scratchData.data[dstPos + 3] = a;
	        }
	    }
	    for (y = 0; y < ySize; y += 1) {
	        sectionSize = Math.floor(minSectionSize);
	        for (i = 0; i < power; i += 1) {
	            for (x = 0; x < sectionSize + 1; x += 1) {
	                srcPos = (xSize * y + x) * 4;
	                r = scratchData.data[srcPos + 0];
	                g = scratchData.data[srcPos + 1];
	                b = scratchData.data[srcPos + 2];
	                a = scratchData.data[srcPos + 3];
	                dstPos = (xSize * y + sectionSize * 2 - x - 1) * 4;
	                scratchData.data[dstPos + 0] = r;
	                scratchData.data[dstPos + 1] = g;
	                scratchData.data[dstPos + 2] = b;
	                scratchData.data[dstPos + 3] = a;
	            }
	            sectionSize *= 2;
	        }
	    }
	    FromPolar(scratchData, imageData, { polarRotation: 0 });
	};
	Kaleidoscope.Kaleidoscope = Kaleidoscope$1;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'kaleidoscopePower', 2, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'kaleidoscopeAngle', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	return Kaleidoscope;
}

var Mask = {};

var hasRequiredMask;

function requireMask () {
	if (hasRequiredMask) return Mask;
	hasRequiredMask = 1;
	Object.defineProperty(Mask, "__esModule", { value: true });
	Mask.Mask = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	function pixelAt(idata, x, y) {
	    var idx = (y * idata.width + x) * 4;
	    var d = [];
	    d.push(idata.data[idx++], idata.data[idx++], idata.data[idx++], idata.data[idx++]);
	    return d;
	}
	function rgbDistance(p1, p2) {
	    return Math.sqrt(Math.pow(p1[0] - p2[0], 2) +
	        Math.pow(p1[1] - p2[1], 2) +
	        Math.pow(p1[2] - p2[2], 2));
	}
	function rgbMean(pTab) {
	    var m = [0, 0, 0];
	    for (var i = 0; i < pTab.length; i++) {
	        m[0] += pTab[i][0];
	        m[1] += pTab[i][1];
	        m[2] += pTab[i][2];
	    }
	    m[0] /= pTab.length;
	    m[1] /= pTab.length;
	    m[2] /= pTab.length;
	    return m;
	}
	function backgroundMask(idata, threshold) {
	    var rgbv_no = pixelAt(idata, 0, 0);
	    var rgbv_ne = pixelAt(idata, idata.width - 1, 0);
	    var rgbv_so = pixelAt(idata, 0, idata.height - 1);
	    var rgbv_se = pixelAt(idata, idata.width - 1, idata.height - 1);
	    var thres = threshold || 10;
	    if (rgbDistance(rgbv_no, rgbv_ne) < thres &&
	        rgbDistance(rgbv_ne, rgbv_se) < thres &&
	        rgbDistance(rgbv_se, rgbv_so) < thres &&
	        rgbDistance(rgbv_so, rgbv_no) < thres) {
	        var mean = rgbMean([rgbv_ne, rgbv_no, rgbv_se, rgbv_so]);
	        var mask = [];
	        for (var i = 0; i < idata.width * idata.height; i++) {
	            var d = rgbDistance(mean, [
	                idata.data[i * 4],
	                idata.data[i * 4 + 1],
	                idata.data[i * 4 + 2],
	            ]);
	            mask[i] = d < thres ? 0 : 255;
	        }
	        return mask;
	    }
	}
	function applyMask(idata, mask) {
	    for (var i = 0; i < idata.width * idata.height; i++) {
	        idata.data[4 * i + 3] = mask[i];
	    }
	}
	function erodeMask(mask, sw, sh) {
	    var weights = [1, 1, 1, 1, 0, 1, 1, 1, 1];
	    var side = Math.round(Math.sqrt(weights.length));
	    var halfSide = Math.floor(side / 2);
	    var maskResult = [];
	    for (var y = 0; y < sh; y++) {
	        for (var x = 0; x < sw; x++) {
	            var so = y * sw + x;
	            var a = 0;
	            for (var cy = 0; cy < side; cy++) {
	                for (var cx = 0; cx < side; cx++) {
	                    var scy = y + cy - halfSide;
	                    var scx = x + cx - halfSide;
	                    if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {
	                        var srcOff = scy * sw + scx;
	                        var wt = weights[cy * side + cx];
	                        a += mask[srcOff] * wt;
	                    }
	                }
	            }
	            maskResult[so] = a === 255 * 8 ? 255 : 0;
	        }
	    }
	    return maskResult;
	}
	function dilateMask(mask, sw, sh) {
	    var weights = [1, 1, 1, 1, 1, 1, 1, 1, 1];
	    var side = Math.round(Math.sqrt(weights.length));
	    var halfSide = Math.floor(side / 2);
	    var maskResult = [];
	    for (var y = 0; y < sh; y++) {
	        for (var x = 0; x < sw; x++) {
	            var so = y * sw + x;
	            var a = 0;
	            for (var cy = 0; cy < side; cy++) {
	                for (var cx = 0; cx < side; cx++) {
	                    var scy = y + cy - halfSide;
	                    var scx = x + cx - halfSide;
	                    if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {
	                        var srcOff = scy * sw + scx;
	                        var wt = weights[cy * side + cx];
	                        a += mask[srcOff] * wt;
	                    }
	                }
	            }
	            maskResult[so] = a >= 255 * 4 ? 255 : 0;
	        }
	    }
	    return maskResult;
	}
	function smoothEdgeMask(mask, sw, sh) {
	    var weights = [1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9];
	    var side = Math.round(Math.sqrt(weights.length));
	    var halfSide = Math.floor(side / 2);
	    var maskResult = [];
	    for (var y = 0; y < sh; y++) {
	        for (var x = 0; x < sw; x++) {
	            var so = y * sw + x;
	            var a = 0;
	            for (var cy = 0; cy < side; cy++) {
	                for (var cx = 0; cx < side; cx++) {
	                    var scy = y + cy - halfSide;
	                    var scx = x + cx - halfSide;
	                    if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {
	                        var srcOff = scy * sw + scx;
	                        var wt = weights[cy * side + cx];
	                        a += mask[srcOff] * wt;
	                    }
	                }
	            }
	            maskResult[so] = a;
	        }
	    }
	    return maskResult;
	}
	const Mask$1 = function (imageData) {
	    var threshold = this.threshold(), mask = backgroundMask(imageData, threshold);
	    if (mask) {
	        mask = erodeMask(mask, imageData.width, imageData.height);
	        mask = dilateMask(mask, imageData.width, imageData.height);
	        mask = smoothEdgeMask(mask, imageData.width, imageData.height);
	        applyMask(imageData, mask);
	    }
	    return imageData;
	};
	Mask.Mask = Mask$1;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'threshold', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	return Mask;
}

var Noise = {};

var hasRequiredNoise;

function requireNoise () {
	if (hasRequiredNoise) return Noise;
	hasRequiredNoise = 1;
	Object.defineProperty(Noise, "__esModule", { value: true });
	Noise.Noise = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	const Noise$1 = function (imageData) {
	    var amount = this.noise() * 255, data = imageData.data, nPixels = data.length, half = amount / 2, i;
	    for (i = 0; i < nPixels; i += 4) {
	        data[i + 0] += half - 2 * half * Math.random();
	        data[i + 1] += half - 2 * half * Math.random();
	        data[i + 2] += half - 2 * half * Math.random();
	    }
	};
	Noise.Noise = Noise$1;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'noise', 0.2, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	return Noise;
}

var Pixelate = {};

var hasRequiredPixelate;

function requirePixelate () {
	if (hasRequiredPixelate) return Pixelate;
	hasRequiredPixelate = 1;
	Object.defineProperty(Pixelate, "__esModule", { value: true });
	Pixelate.Pixelate = void 0;
	const Factory_1 = requireFactory();
	const Util_1 = requireUtil();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	const Pixelate$1 = function (imageData) {
	    var pixelSize = Math.ceil(this.pixelSize()), width = imageData.width, height = imageData.height, x, y, i, red, green, blue, alpha, nBinsX = Math.ceil(width / pixelSize), nBinsY = Math.ceil(height / pixelSize), xBinStart, xBinEnd, yBinStart, yBinEnd, xBin, yBin, pixelsInBin, data = imageData.data;
	    if (pixelSize <= 0) {
	        Util_1.Util.error('pixelSize value can not be <= 0');
	        return;
	    }
	    for (xBin = 0; xBin < nBinsX; xBin += 1) {
	        for (yBin = 0; yBin < nBinsY; yBin += 1) {
	            red = 0;
	            green = 0;
	            blue = 0;
	            alpha = 0;
	            xBinStart = xBin * pixelSize;
	            xBinEnd = xBinStart + pixelSize;
	            yBinStart = yBin * pixelSize;
	            yBinEnd = yBinStart + pixelSize;
	            pixelsInBin = 0;
	            for (x = xBinStart; x < xBinEnd; x += 1) {
	                if (x >= width) {
	                    continue;
	                }
	                for (y = yBinStart; y < yBinEnd; y += 1) {
	                    if (y >= height) {
	                        continue;
	                    }
	                    i = (width * y + x) * 4;
	                    red += data[i + 0];
	                    green += data[i + 1];
	                    blue += data[i + 2];
	                    alpha += data[i + 3];
	                    pixelsInBin += 1;
	                }
	            }
	            red = red / pixelsInBin;
	            green = green / pixelsInBin;
	            blue = blue / pixelsInBin;
	            alpha = alpha / pixelsInBin;
	            for (x = xBinStart; x < xBinEnd; x += 1) {
	                if (x >= width) {
	                    continue;
	                }
	                for (y = yBinStart; y < yBinEnd; y += 1) {
	                    if (y >= height) {
	                        continue;
	                    }
	                    i = (width * y + x) * 4;
	                    data[i + 0] = red;
	                    data[i + 1] = green;
	                    data[i + 2] = blue;
	                    data[i + 3] = alpha;
	                }
	            }
	        }
	    }
	};
	Pixelate.Pixelate = Pixelate$1;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'pixelSize', 8, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	return Pixelate;
}

var Posterize = {};

var hasRequiredPosterize;

function requirePosterize () {
	if (hasRequiredPosterize) return Posterize;
	hasRequiredPosterize = 1;
	Object.defineProperty(Posterize, "__esModule", { value: true });
	Posterize.Posterize = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	const Posterize$1 = function (imageData) {
	    var levels = Math.round(this.levels() * 254) + 1, data = imageData.data, len = data.length, scale = 255 / levels, i;
	    for (i = 0; i < len; i += 1) {
	        data[i] = Math.floor(data[i] / scale) * scale;
	    }
	};
	Posterize.Posterize = Posterize$1;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'levels', 0.5, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	return Posterize;
}

var RGB = {};

var hasRequiredRGB;

function requireRGB () {
	if (hasRequiredRGB) return RGB;
	hasRequiredRGB = 1;
	Object.defineProperty(RGB, "__esModule", { value: true });
	RGB.RGB = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	const RGB$1 = function (imageData) {
	    var data = imageData.data, nPixels = data.length, red = this.red(), green = this.green(), blue = this.blue(), i, brightness;
	    for (i = 0; i < nPixels; i += 4) {
	        brightness =
	            (0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2]) / 255;
	        data[i] = brightness * red;
	        data[i + 1] = brightness * green;
	        data[i + 2] = brightness * blue;
	        data[i + 3] = data[i + 3];
	    }
	};
	RGB.RGB = RGB$1;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'red', 0, function (val) {
	    this._filterUpToDate = false;
	    if (val > 255) {
	        return 255;
	    }
	    else if (val < 0) {
	        return 0;
	    }
	    else {
	        return Math.round(val);
	    }
	});
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'green', 0, function (val) {
	    this._filterUpToDate = false;
	    if (val > 255) {
	        return 255;
	    }
	    else if (val < 0) {
	        return 0;
	    }
	    else {
	        return Math.round(val);
	    }
	});
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'blue', 0, Validators_1.RGBComponent, Factory_1.Factory.afterSetFilter);
	return RGB;
}

var RGBA = {};

var hasRequiredRGBA;

function requireRGBA () {
	if (hasRequiredRGBA) return RGBA;
	hasRequiredRGBA = 1;
	Object.defineProperty(RGBA, "__esModule", { value: true });
	RGBA.RGBA = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	const RGBA$1 = function (imageData) {
	    var data = imageData.data, nPixels = data.length, red = this.red(), green = this.green(), blue = this.blue(), alpha = this.alpha(), i, ia;
	    for (i = 0; i < nPixels; i += 4) {
	        ia = 1 - alpha;
	        data[i] = red * alpha + data[i] * ia;
	        data[i + 1] = green * alpha + data[i + 1] * ia;
	        data[i + 2] = blue * alpha + data[i + 2] * ia;
	    }
	};
	RGBA.RGBA = RGBA$1;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'red', 0, function (val) {
	    this._filterUpToDate = false;
	    if (val > 255) {
	        return 255;
	    }
	    else if (val < 0) {
	        return 0;
	    }
	    else {
	        return Math.round(val);
	    }
	});
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'green', 0, function (val) {
	    this._filterUpToDate = false;
	    if (val > 255) {
	        return 255;
	    }
	    else if (val < 0) {
	        return 0;
	    }
	    else {
	        return Math.round(val);
	    }
	});
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'blue', 0, Validators_1.RGBComponent, Factory_1.Factory.afterSetFilter);
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'alpha', 1, function (val) {
	    this._filterUpToDate = false;
	    if (val > 1) {
	        return 1;
	    }
	    else if (val < 0) {
	        return 0;
	    }
	    else {
	        return val;
	    }
	});
	return RGBA;
}

var Sepia = {};

var hasRequiredSepia;

function requireSepia () {
	if (hasRequiredSepia) return Sepia;
	hasRequiredSepia = 1;
	Object.defineProperty(Sepia, "__esModule", { value: true });
	Sepia.Sepia = void 0;
	const Sepia$1 = function (imageData) {
	    var data = imageData.data, nPixels = data.length, i, r, g, b;
	    for (i = 0; i < nPixels; i += 4) {
	        r = data[i + 0];
	        g = data[i + 1];
	        b = data[i + 2];
	        data[i + 0] = Math.min(255, r * 0.393 + g * 0.769 + b * 0.189);
	        data[i + 1] = Math.min(255, r * 0.349 + g * 0.686 + b * 0.168);
	        data[i + 2] = Math.min(255, r * 0.272 + g * 0.534 + b * 0.131);
	    }
	};
	Sepia.Sepia = Sepia$1;
	return Sepia;
}

var Solarize = {};

var hasRequiredSolarize;

function requireSolarize () {
	if (hasRequiredSolarize) return Solarize;
	hasRequiredSolarize = 1;
	Object.defineProperty(Solarize, "__esModule", { value: true });
	Solarize.Solarize = void 0;
	const Solarize$1 = function (imageData) {
	    var data = imageData.data, w = imageData.width, h = imageData.height, w4 = w * 4, y = h;
	    do {
	        var offsetY = (y - 1) * w4;
	        var x = w;
	        do {
	            var offset = offsetY + (x - 1) * 4;
	            var r = data[offset];
	            var g = data[offset + 1];
	            var b = data[offset + 2];
	            if (r > 127) {
	                r = 255 - r;
	            }
	            if (g > 127) {
	                g = 255 - g;
	            }
	            if (b > 127) {
	                b = 255 - b;
	            }
	            data[offset] = r;
	            data[offset + 1] = g;
	            data[offset + 2] = b;
	        } while (--x);
	    } while (--y);
	};
	Solarize.Solarize = Solarize$1;
	return Solarize;
}

var Threshold = {};

var hasRequiredThreshold;

function requireThreshold () {
	if (hasRequiredThreshold) return Threshold;
	hasRequiredThreshold = 1;
	Object.defineProperty(Threshold, "__esModule", { value: true });
	Threshold.Threshold = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	const Threshold$1 = function (imageData) {
	    var level = this.threshold() * 255, data = imageData.data, len = data.length, i;
	    for (i = 0; i < len; i += 1) {
	        data[i] = data[i] < level ? 0 : 255;
	    }
	};
	Threshold.Threshold = Threshold$1;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'threshold', 0.5, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	return Threshold;
}

var hasRequired_FullInternals;

function require_FullInternals () {
	if (hasRequired_FullInternals) return _FullInternals;
	hasRequired_FullInternals = 1;
	Object.defineProperty(_FullInternals, "__esModule", { value: true });
	_FullInternals.Konva = void 0;
	const _CoreInternals_1 = require_CoreInternals();
	const Arc_1 = requireArc();
	const Arrow_1 = requireArrow();
	const Circle_1 = requireCircle();
	const Ellipse_1 = requireEllipse();
	const Image_1 = requireImage();
	const Label_1 = requireLabel();
	const Line_1 = requireLine();
	const Path_1 = requirePath();
	const Rect_1 = requireRect();
	const RegularPolygon_1 = requireRegularPolygon();
	const Ring_1 = requireRing();
	const Sprite_1 = requireSprite();
	const Star_1 = requireStar();
	const Text_1 = requireText();
	const TextPath_1 = requireTextPath();
	const Transformer_1 = requireTransformer();
	const Wedge_1 = requireWedge();
	const Blur_1 = requireBlur();
	const Brighten_1 = requireBrighten();
	const Contrast_1 = requireContrast();
	const Emboss_1 = requireEmboss();
	const Enhance_1 = requireEnhance();
	const Grayscale_1 = requireGrayscale();
	const HSL_1 = requireHSL();
	const HSV_1 = requireHSV();
	const Invert_1 = requireInvert();
	const Kaleidoscope_1 = requireKaleidoscope();
	const Mask_1 = requireMask();
	const Noise_1 = requireNoise();
	const Pixelate_1 = requirePixelate();
	const Posterize_1 = requirePosterize();
	const RGB_1 = requireRGB();
	const RGBA_1 = requireRGBA();
	const Sepia_1 = requireSepia();
	const Solarize_1 = requireSolarize();
	const Threshold_1 = requireThreshold();
	_FullInternals.Konva = _CoreInternals_1.Konva.Util._assign(_CoreInternals_1.Konva, {
	    Arc: Arc_1.Arc,
	    Arrow: Arrow_1.Arrow,
	    Circle: Circle_1.Circle,
	    Ellipse: Ellipse_1.Ellipse,
	    Image: Image_1.Image,
	    Label: Label_1.Label,
	    Tag: Label_1.Tag,
	    Line: Line_1.Line,
	    Path: Path_1.Path,
	    Rect: Rect_1.Rect,
	    RegularPolygon: RegularPolygon_1.RegularPolygon,
	    Ring: Ring_1.Ring,
	    Sprite: Sprite_1.Sprite,
	    Star: Star_1.Star,
	    Text: Text_1.Text,
	    TextPath: TextPath_1.TextPath,
	    Transformer: Transformer_1.Transformer,
	    Wedge: Wedge_1.Wedge,
	    Filters: {
	        Blur: Blur_1.Blur,
	        Brighten: Brighten_1.Brighten,
	        Contrast: Contrast_1.Contrast,
	        Emboss: Emboss_1.Emboss,
	        Enhance: Enhance_1.Enhance,
	        Grayscale: Grayscale_1.Grayscale,
	        HSL: HSL_1.HSL,
	        HSV: HSV_1.HSV,
	        Invert: Invert_1.Invert,
	        Kaleidoscope: Kaleidoscope_1.Kaleidoscope,
	        Mask: Mask_1.Mask,
	        Noise: Noise_1.Noise,
	        Pixelate: Pixelate_1.Pixelate,
	        Posterize: Posterize_1.Posterize,
	        RGB: RGB_1.RGB,
	        RGBA: RGBA_1.RGBA,
	        Sepia: Sepia_1.Sepia,
	        Solarize: Solarize_1.Solarize,
	        Threshold: Threshold_1.Threshold,
	    },
	});
	return _FullInternals;
}

var indexNode = indexNode$1.exports;

var hasRequiredIndexNode;

function requireIndexNode () {
	if (hasRequiredIndexNode) return indexNode$1.exports;
	hasRequiredIndexNode = 1;
	Object.defineProperty(indexNode, "__esModule", { value: true });
	const _FullInternals_1 = require_FullInternals();
	const Canvas = require$$1;
	const canvas = Canvas['default'] || Canvas;
	commonjsGlobal.DOMMatrix = canvas.DOMMatrix;
	const isNode = typeof commonjsGlobal.document === 'undefined';
	if (isNode) {
	    _FullInternals_1.Konva.Util['createCanvasElement'] = () => {
	        const node = canvas.createCanvas(300, 300);
	        if (!node['style']) {
	            node['style'] = {};
	        }
	        return node;
	    };
	    _FullInternals_1.Konva.Util.createImageElement = () => {
	        const node = new canvas.Image();
	        return node;
	    };
	}
	indexNode$1.exports = _FullInternals_1.Konva;
	return indexNode$1.exports;
}

var indexNodeExports = requireIndexNode();
var Konva$2 = /*@__PURE__*/getDefaultExportFromCjs(indexNodeExports);

var Core = {exports: {}};

var hasRequiredCore;

function requireCore () {
	if (hasRequiredCore) return Core.exports;
	hasRequiredCore = 1;
	(function (module, exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Konva = void 0;
		var _CoreInternals_1 = require_CoreInternals();
		Object.defineProperty(exports, "Konva", { enumerable: true, get: function () { return _CoreInternals_1.Konva; } });
		const _CoreInternals_2 = require_CoreInternals();
		module.exports = _CoreInternals_2.Konva; 
	} (Core, Core.exports));
	return Core.exports;
}

var CoreExports = requireCore();
var Konva$1 = /*@__PURE__*/getDefaultExportFromCjs(CoreExports);

var reactReconciler = {exports: {}};

var reactReconciler_production = {exports: {}};

var scheduler$1 = {exports: {}};

var scheduler_production$1 = {};

/**
 * @license React
 * scheduler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredScheduler_production$1;

function requireScheduler_production$1 () {
	if (hasRequiredScheduler_production$1) return scheduler_production$1;
	hasRequiredScheduler_production$1 = 1;
	(function (exports) {
		function push(heap, node) {
		  var index = heap.length;
		  heap.push(node);
		  a: for (; 0 < index; ) {
		    var parentIndex = (index - 1) >>> 1,
		      parent = heap[parentIndex];
		    if (0 < compare(parent, node))
		      (heap[parentIndex] = node), (heap[index] = parent), (index = parentIndex);
		    else break a;
		  }
		}
		function peek(heap) {
		  return 0 === heap.length ? null : heap[0];
		}
		function pop(heap) {
		  if (0 === heap.length) return null;
		  var first = heap[0],
		    last = heap.pop();
		  if (last !== first) {
		    heap[0] = last;
		    a: for (
		      var index = 0, length = heap.length, halfLength = length >>> 1;
		      index < halfLength;

		    ) {
		      var leftIndex = 2 * (index + 1) - 1,
		        left = heap[leftIndex],
		        rightIndex = leftIndex + 1,
		        right = heap[rightIndex];
		      if (0 > compare(left, last))
		        rightIndex < length && 0 > compare(right, left)
		          ? ((heap[index] = right),
		            (heap[rightIndex] = last),
		            (index = rightIndex))
		          : ((heap[index] = left),
		            (heap[leftIndex] = last),
		            (index = leftIndex));
		      else if (rightIndex < length && 0 > compare(right, last))
		        (heap[index] = right), (heap[rightIndex] = last), (index = rightIndex);
		      else break a;
		    }
		  }
		  return first;
		}
		function compare(a, b) {
		  var diff = a.sortIndex - b.sortIndex;
		  return 0 !== diff ? diff : a.id - b.id;
		}
		exports.unstable_now = void 0;
		if ("object" === typeof performance && "function" === typeof performance.now) {
		  var localPerformance = performance;
		  exports.unstable_now = function () {
		    return localPerformance.now();
		  };
		} else {
		  var localDate = Date,
		    initialTime = localDate.now();
		  exports.unstable_now = function () {
		    return localDate.now() - initialTime;
		  };
		}
		var taskQueue = [],
		  timerQueue = [],
		  taskIdCounter = 1,
		  currentTask = null,
		  currentPriorityLevel = 3,
		  isPerformingWork = !1,
		  isHostCallbackScheduled = !1,
		  isHostTimeoutScheduled = !1,
		  localSetTimeout = "function" === typeof setTimeout ? setTimeout : null,
		  localClearTimeout = "function" === typeof clearTimeout ? clearTimeout : null,
		  localSetImmediate = "undefined" !== typeof setImmediate ? setImmediate : null;
		function advanceTimers(currentTime) {
		  for (var timer = peek(timerQueue); null !== timer; ) {
		    if (null === timer.callback) pop(timerQueue);
		    else if (timer.startTime <= currentTime)
		      pop(timerQueue),
		        (timer.sortIndex = timer.expirationTime),
		        push(taskQueue, timer);
		    else break;
		    timer = peek(timerQueue);
		  }
		}
		function handleTimeout(currentTime) {
		  isHostTimeoutScheduled = !1;
		  advanceTimers(currentTime);
		  if (!isHostCallbackScheduled)
		    if (null !== peek(taskQueue))
		      (isHostCallbackScheduled = !0), requestHostCallback();
		    else {
		      var firstTimer = peek(timerQueue);
		      null !== firstTimer &&
		        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
		    }
		}
		var isMessageLoopRunning = !1,
		  taskTimeoutID = -1,
		  frameInterval = 5,
		  startTime = -1;
		function shouldYieldToHost() {
		  return exports.unstable_now() - startTime < frameInterval ? !1 : !0;
		}
		function performWorkUntilDeadline() {
		  if (isMessageLoopRunning) {
		    var currentTime = exports.unstable_now();
		    startTime = currentTime;
		    var hasMoreWork = !0;
		    try {
		      a: {
		        isHostCallbackScheduled = !1;
		        isHostTimeoutScheduled &&
		          ((isHostTimeoutScheduled = !1),
		          localClearTimeout(taskTimeoutID),
		          (taskTimeoutID = -1));
		        isPerformingWork = !0;
		        var previousPriorityLevel = currentPriorityLevel;
		        try {
		          b: {
		            advanceTimers(currentTime);
		            for (
		              currentTask = peek(taskQueue);
		              null !== currentTask &&
		              !(
		                currentTask.expirationTime > currentTime && shouldYieldToHost()
		              );

		            ) {
		              var callback = currentTask.callback;
		              if ("function" === typeof callback) {
		                currentTask.callback = null;
		                currentPriorityLevel = currentTask.priorityLevel;
		                var continuationCallback = callback(
		                  currentTask.expirationTime <= currentTime
		                );
		                currentTime = exports.unstable_now();
		                if ("function" === typeof continuationCallback) {
		                  currentTask.callback = continuationCallback;
		                  advanceTimers(currentTime);
		                  hasMoreWork = !0;
		                  break b;
		                }
		                currentTask === peek(taskQueue) && pop(taskQueue);
		                advanceTimers(currentTime);
		              } else pop(taskQueue);
		              currentTask = peek(taskQueue);
		            }
		            if (null !== currentTask) hasMoreWork = !0;
		            else {
		              var firstTimer = peek(timerQueue);
		              null !== firstTimer &&
		                requestHostTimeout(
		                  handleTimeout,
		                  firstTimer.startTime - currentTime
		                );
		              hasMoreWork = !1;
		            }
		          }
		          break a;
		        } finally {
		          (currentTask = null),
		            (currentPriorityLevel = previousPriorityLevel),
		            (isPerformingWork = !1);
		        }
		        hasMoreWork = void 0;
		      }
		    } finally {
		      hasMoreWork
		        ? schedulePerformWorkUntilDeadline()
		        : (isMessageLoopRunning = !1);
		    }
		  }
		}
		var schedulePerformWorkUntilDeadline;
		if ("function" === typeof localSetImmediate)
		  schedulePerformWorkUntilDeadline = function () {
		    localSetImmediate(performWorkUntilDeadline);
		  };
		else if ("undefined" !== typeof MessageChannel) {
		  var channel = new MessageChannel(),
		    port = channel.port2;
		  channel.port1.onmessage = performWorkUntilDeadline;
		  schedulePerformWorkUntilDeadline = function () {
		    port.postMessage(null);
		  };
		} else
		  schedulePerformWorkUntilDeadline = function () {
		    localSetTimeout(performWorkUntilDeadline, 0);
		  };
		function requestHostCallback() {
		  isMessageLoopRunning ||
		    ((isMessageLoopRunning = !0), schedulePerformWorkUntilDeadline());
		}
		function requestHostTimeout(callback, ms) {
		  taskTimeoutID = localSetTimeout(function () {
		    callback(exports.unstable_now());
		  }, ms);
		}
		exports.unstable_IdlePriority = 5;
		exports.unstable_ImmediatePriority = 1;
		exports.unstable_LowPriority = 4;
		exports.unstable_NormalPriority = 3;
		exports.unstable_Profiling = null;
		exports.unstable_UserBlockingPriority = 2;
		exports.unstable_cancelCallback = function (task) {
		  task.callback = null;
		};
		exports.unstable_continueExecution = function () {
		  isHostCallbackScheduled ||
		    isPerformingWork ||
		    ((isHostCallbackScheduled = !0), requestHostCallback());
		};
		exports.unstable_forceFrameRate = function (fps) {
		  0 > fps || 125 < fps
		    ? console.error(
		        "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
		      )
		    : (frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5);
		};
		exports.unstable_getCurrentPriorityLevel = function () {
		  return currentPriorityLevel;
		};
		exports.unstable_getFirstCallbackNode = function () {
		  return peek(taskQueue);
		};
		exports.unstable_next = function (eventHandler) {
		  switch (currentPriorityLevel) {
		    case 1:
		    case 2:
		    case 3:
		      var priorityLevel = 3;
		      break;
		    default:
		      priorityLevel = currentPriorityLevel;
		  }
		  var previousPriorityLevel = currentPriorityLevel;
		  currentPriorityLevel = priorityLevel;
		  try {
		    return eventHandler();
		  } finally {
		    currentPriorityLevel = previousPriorityLevel;
		  }
		};
		exports.unstable_pauseExecution = function () {};
		exports.unstable_requestPaint = function () {};
		exports.unstable_runWithPriority = function (priorityLevel, eventHandler) {
		  switch (priorityLevel) {
		    case 1:
		    case 2:
		    case 3:
		    case 4:
		    case 5:
		      break;
		    default:
		      priorityLevel = 3;
		  }
		  var previousPriorityLevel = currentPriorityLevel;
		  currentPriorityLevel = priorityLevel;
		  try {
		    return eventHandler();
		  } finally {
		    currentPriorityLevel = previousPriorityLevel;
		  }
		};
		exports.unstable_scheduleCallback = function (
		  priorityLevel,
		  callback,
		  options
		) {
		  var currentTime = exports.unstable_now();
		  "object" === typeof options && null !== options
		    ? ((options = options.delay),
		      (options =
		        "number" === typeof options && 0 < options
		          ? currentTime + options
		          : currentTime))
		    : (options = currentTime);
		  switch (priorityLevel) {
		    case 1:
		      var timeout = -1;
		      break;
		    case 2:
		      timeout = 250;
		      break;
		    case 5:
		      timeout = 1073741823;
		      break;
		    case 4:
		      timeout = 1e4;
		      break;
		    default:
		      timeout = 5e3;
		  }
		  timeout = options + timeout;
		  priorityLevel = {
		    id: taskIdCounter++,
		    callback: callback,
		    priorityLevel: priorityLevel,
		    startTime: options,
		    expirationTime: timeout,
		    sortIndex: -1
		  };
		  options > currentTime
		    ? ((priorityLevel.sortIndex = options),
		      push(timerQueue, priorityLevel),
		      null === peek(taskQueue) &&
		        priorityLevel === peek(timerQueue) &&
		        (isHostTimeoutScheduled
		          ? (localClearTimeout(taskTimeoutID), (taskTimeoutID = -1))
		          : (isHostTimeoutScheduled = !0),
		        requestHostTimeout(handleTimeout, options - currentTime)))
		    : ((priorityLevel.sortIndex = timeout),
		      push(taskQueue, priorityLevel),
		      isHostCallbackScheduled ||
		        isPerformingWork ||
		        ((isHostCallbackScheduled = !0), requestHostCallback()));
		  return priorityLevel;
		};
		exports.unstable_shouldYield = shouldYieldToHost;
		exports.unstable_wrapCallback = function (callback) {
		  var parentPriorityLevel = currentPriorityLevel;
		  return function () {
		    var previousPriorityLevel = currentPriorityLevel;
		    currentPriorityLevel = parentPriorityLevel;
		    try {
		      return callback.apply(this, arguments);
		    } finally {
		      currentPriorityLevel = previousPriorityLevel;
		    }
		  };
		}; 
	} (scheduler_production$1));
	return scheduler_production$1;
}

var scheduler_development$1 = {};

/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredScheduler_development$1;

function requireScheduler_development$1 () {
	if (hasRequiredScheduler_development$1) return scheduler_development$1;
	hasRequiredScheduler_development$1 = 1;
	(function (exports) {
		"production" !== process.env.NODE_ENV &&
		  (function () {
		    function performWorkUntilDeadline() {
		      if (isMessageLoopRunning) {
		        var currentTime = exports.unstable_now();
		        startTime = currentTime;
		        var hasMoreWork = !0;
		        try {
		          a: {
		            isHostCallbackScheduled = !1;
		            isHostTimeoutScheduled &&
		              ((isHostTimeoutScheduled = !1),
		              localClearTimeout(taskTimeoutID),
		              (taskTimeoutID = -1));
		            isPerformingWork = !0;
		            var previousPriorityLevel = currentPriorityLevel;
		            try {
		              b: {
		                advanceTimers(currentTime);
		                for (
		                  currentTask = peek(taskQueue);
		                  null !== currentTask &&
		                  !(
		                    currentTask.expirationTime > currentTime &&
		                    shouldYieldToHost()
		                  );

		                ) {
		                  var callback = currentTask.callback;
		                  if ("function" === typeof callback) {
		                    currentTask.callback = null;
		                    currentPriorityLevel = currentTask.priorityLevel;
		                    var continuationCallback = callback(
		                      currentTask.expirationTime <= currentTime
		                    );
		                    currentTime = exports.unstable_now();
		                    if ("function" === typeof continuationCallback) {
		                      currentTask.callback = continuationCallback;
		                      advanceTimers(currentTime);
		                      hasMoreWork = !0;
		                      break b;
		                    }
		                    currentTask === peek(taskQueue) && pop(taskQueue);
		                    advanceTimers(currentTime);
		                  } else pop(taskQueue);
		                  currentTask = peek(taskQueue);
		                }
		                if (null !== currentTask) hasMoreWork = !0;
		                else {
		                  var firstTimer = peek(timerQueue);
		                  null !== firstTimer &&
		                    requestHostTimeout(
		                      handleTimeout,
		                      firstTimer.startTime - currentTime
		                    );
		                  hasMoreWork = !1;
		                }
		              }
		              break a;
		            } finally {
		              (currentTask = null),
		                (currentPriorityLevel = previousPriorityLevel),
		                (isPerformingWork = !1);
		            }
		            hasMoreWork = void 0;
		          }
		        } finally {
		          hasMoreWork
		            ? schedulePerformWorkUntilDeadline()
		            : (isMessageLoopRunning = !1);
		        }
		      }
		    }
		    function push(heap, node) {
		      var index = heap.length;
		      heap.push(node);
		      a: for (; 0 < index; ) {
		        var parentIndex = (index - 1) >>> 1,
		          parent = heap[parentIndex];
		        if (0 < compare(parent, node))
		          (heap[parentIndex] = node),
		            (heap[index] = parent),
		            (index = parentIndex);
		        else break a;
		      }
		    }
		    function peek(heap) {
		      return 0 === heap.length ? null : heap[0];
		    }
		    function pop(heap) {
		      if (0 === heap.length) return null;
		      var first = heap[0],
		        last = heap.pop();
		      if (last !== first) {
		        heap[0] = last;
		        a: for (
		          var index = 0, length = heap.length, halfLength = length >>> 1;
		          index < halfLength;

		        ) {
		          var leftIndex = 2 * (index + 1) - 1,
		            left = heap[leftIndex],
		            rightIndex = leftIndex + 1,
		            right = heap[rightIndex];
		          if (0 > compare(left, last))
		            rightIndex < length && 0 > compare(right, left)
		              ? ((heap[index] = right),
		                (heap[rightIndex] = last),
		                (index = rightIndex))
		              : ((heap[index] = left),
		                (heap[leftIndex] = last),
		                (index = leftIndex));
		          else if (rightIndex < length && 0 > compare(right, last))
		            (heap[index] = right),
		              (heap[rightIndex] = last),
		              (index = rightIndex);
		          else break a;
		        }
		      }
		      return first;
		    }
		    function compare(a, b) {
		      var diff = a.sortIndex - b.sortIndex;
		      return 0 !== diff ? diff : a.id - b.id;
		    }
		    function advanceTimers(currentTime) {
		      for (var timer = peek(timerQueue); null !== timer; ) {
		        if (null === timer.callback) pop(timerQueue);
		        else if (timer.startTime <= currentTime)
		          pop(timerQueue),
		            (timer.sortIndex = timer.expirationTime),
		            push(taskQueue, timer);
		        else break;
		        timer = peek(timerQueue);
		      }
		    }
		    function handleTimeout(currentTime) {
		      isHostTimeoutScheduled = !1;
		      advanceTimers(currentTime);
		      if (!isHostCallbackScheduled)
		        if (null !== peek(taskQueue))
		          (isHostCallbackScheduled = !0), requestHostCallback();
		        else {
		          var firstTimer = peek(timerQueue);
		          null !== firstTimer &&
		            requestHostTimeout(
		              handleTimeout,
		              firstTimer.startTime - currentTime
		            );
		        }
		    }
		    function shouldYieldToHost() {
		      return exports.unstable_now() - startTime < frameInterval ? !1 : !0;
		    }
		    function requestHostCallback() {
		      isMessageLoopRunning ||
		        ((isMessageLoopRunning = !0), schedulePerformWorkUntilDeadline());
		    }
		    function requestHostTimeout(callback, ms) {
		      taskTimeoutID = localSetTimeout(function () {
		        callback(exports.unstable_now());
		      }, ms);
		    }
		    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
		      "function" ===
		        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
		      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
		    exports.unstable_now = void 0;
		    if (
		      "object" === typeof performance &&
		      "function" === typeof performance.now
		    ) {
		      var localPerformance = performance;
		      exports.unstable_now = function () {
		        return localPerformance.now();
		      };
		    } else {
		      var localDate = Date,
		        initialTime = localDate.now();
		      exports.unstable_now = function () {
		        return localDate.now() - initialTime;
		      };
		    }
		    var taskQueue = [],
		      timerQueue = [],
		      taskIdCounter = 1,
		      currentTask = null,
		      currentPriorityLevel = 3,
		      isPerformingWork = !1,
		      isHostCallbackScheduled = !1,
		      isHostTimeoutScheduled = !1,
		      localSetTimeout = "function" === typeof setTimeout ? setTimeout : null,
		      localClearTimeout =
		        "function" === typeof clearTimeout ? clearTimeout : null,
		      localSetImmediate =
		        "undefined" !== typeof setImmediate ? setImmediate : null,
		      isMessageLoopRunning = !1,
		      taskTimeoutID = -1,
		      frameInterval = 5,
		      startTime = -1;
		    if ("function" === typeof localSetImmediate)
		      var schedulePerformWorkUntilDeadline = function () {
		        localSetImmediate(performWorkUntilDeadline);
		      };
		    else if ("undefined" !== typeof MessageChannel) {
		      var channel = new MessageChannel(),
		        port = channel.port2;
		      channel.port1.onmessage = performWorkUntilDeadline;
		      schedulePerformWorkUntilDeadline = function () {
		        port.postMessage(null);
		      };
		    } else
		      schedulePerformWorkUntilDeadline = function () {
		        localSetTimeout(performWorkUntilDeadline, 0);
		      };
		    exports.unstable_IdlePriority = 5;
		    exports.unstable_ImmediatePriority = 1;
		    exports.unstable_LowPriority = 4;
		    exports.unstable_NormalPriority = 3;
		    exports.unstable_Profiling = null;
		    exports.unstable_UserBlockingPriority = 2;
		    exports.unstable_cancelCallback = function (task) {
		      task.callback = null;
		    };
		    exports.unstable_continueExecution = function () {
		      isHostCallbackScheduled ||
		        isPerformingWork ||
		        ((isHostCallbackScheduled = !0), requestHostCallback());
		    };
		    exports.unstable_forceFrameRate = function (fps) {
		      0 > fps || 125 < fps
		        ? console.error(
		            "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
		          )
		        : (frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5);
		    };
		    exports.unstable_getCurrentPriorityLevel = function () {
		      return currentPriorityLevel;
		    };
		    exports.unstable_getFirstCallbackNode = function () {
		      return peek(taskQueue);
		    };
		    exports.unstable_next = function (eventHandler) {
		      switch (currentPriorityLevel) {
		        case 1:
		        case 2:
		        case 3:
		          var priorityLevel = 3;
		          break;
		        default:
		          priorityLevel = currentPriorityLevel;
		      }
		      var previousPriorityLevel = currentPriorityLevel;
		      currentPriorityLevel = priorityLevel;
		      try {
		        return eventHandler();
		      } finally {
		        currentPriorityLevel = previousPriorityLevel;
		      }
		    };
		    exports.unstable_pauseExecution = function () {};
		    exports.unstable_requestPaint = function () {};
		    exports.unstable_runWithPriority = function (priorityLevel, eventHandler) {
		      switch (priorityLevel) {
		        case 1:
		        case 2:
		        case 3:
		        case 4:
		        case 5:
		          break;
		        default:
		          priorityLevel = 3;
		      }
		      var previousPriorityLevel = currentPriorityLevel;
		      currentPriorityLevel = priorityLevel;
		      try {
		        return eventHandler();
		      } finally {
		        currentPriorityLevel = previousPriorityLevel;
		      }
		    };
		    exports.unstable_scheduleCallback = function (
		      priorityLevel,
		      callback,
		      options
		    ) {
		      var currentTime = exports.unstable_now();
		      "object" === typeof options && null !== options
		        ? ((options = options.delay),
		          (options =
		            "number" === typeof options && 0 < options
		              ? currentTime + options
		              : currentTime))
		        : (options = currentTime);
		      switch (priorityLevel) {
		        case 1:
		          var timeout = -1;
		          break;
		        case 2:
		          timeout = 250;
		          break;
		        case 5:
		          timeout = 1073741823;
		          break;
		        case 4:
		          timeout = 1e4;
		          break;
		        default:
		          timeout = 5e3;
		      }
		      timeout = options + timeout;
		      priorityLevel = {
		        id: taskIdCounter++,
		        callback: callback,
		        priorityLevel: priorityLevel,
		        startTime: options,
		        expirationTime: timeout,
		        sortIndex: -1
		      };
		      options > currentTime
		        ? ((priorityLevel.sortIndex = options),
		          push(timerQueue, priorityLevel),
		          null === peek(taskQueue) &&
		            priorityLevel === peek(timerQueue) &&
		            (isHostTimeoutScheduled
		              ? (localClearTimeout(taskTimeoutID), (taskTimeoutID = -1))
		              : (isHostTimeoutScheduled = !0),
		            requestHostTimeout(handleTimeout, options - currentTime)))
		        : ((priorityLevel.sortIndex = timeout),
		          push(taskQueue, priorityLevel),
		          isHostCallbackScheduled ||
		            isPerformingWork ||
		            ((isHostCallbackScheduled = !0), requestHostCallback()));
		      return priorityLevel;
		    };
		    exports.unstable_shouldYield = shouldYieldToHost;
		    exports.unstable_wrapCallback = function (callback) {
		      var parentPriorityLevel = currentPriorityLevel;
		      return function () {
		        var previousPriorityLevel = currentPriorityLevel;
		        currentPriorityLevel = parentPriorityLevel;
		        try {
		          return callback.apply(this, arguments);
		        } finally {
		          currentPriorityLevel = previousPriorityLevel;
		        }
		      };
		    };
		    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
		      "function" ===
		        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
		      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
		  })(); 
	} (scheduler_development$1));
	return scheduler_development$1;
}

var hasRequiredScheduler$1;

function requireScheduler$1 () {
	if (hasRequiredScheduler$1) return scheduler$1.exports;
	hasRequiredScheduler$1 = 1;

	if (process.env.NODE_ENV === 'production') {
	  scheduler$1.exports = requireScheduler_production$1();
	} else {
	  scheduler$1.exports = requireScheduler_development$1();
	}
	return scheduler$1.exports;
}

/**
 * @license React
 * react-reconciler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactReconciler_production;

function requireReactReconciler_production () {
	if (hasRequiredReactReconciler_production) return reactReconciler_production.exports;
	hasRequiredReactReconciler_production = 1;
	(function (module) {
		module.exports = function ($$$config) {
		  function createFiber(tag, pendingProps, key, mode) {
		    return new FiberNode(tag, pendingProps, key, mode);
		  }
		  function noop() {}
		  function formatProdErrorMessage(code) {
		    var url = "https://react.dev/errors/" + code;
		    if (1 < arguments.length) {
		      url += "?args[]=" + encodeURIComponent(arguments[1]);
		      for (var i = 2; i < arguments.length; i++)
		        url += "&args[]=" + encodeURIComponent(arguments[i]);
		    }
		    return (
		      "Minified React error #" +
		      code +
		      "; visit " +
		      url +
		      " for the full message or use the non-minified dev environment for full errors and additional helpful warnings."
		    );
		  }
		  function getIteratorFn(maybeIterable) {
		    if (null === maybeIterable || "object" !== typeof maybeIterable)
		      return null;
		    maybeIterable =
		      (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
		      maybeIterable["@@iterator"];
		    return "function" === typeof maybeIterable ? maybeIterable : null;
		  }
		  function getComponentNameFromType(type) {
		    if (null == type) return null;
		    if ("function" === typeof type)
		      return type.$$typeof === REACT_CLIENT_REFERENCE
		        ? null
		        : type.displayName || type.name || null;
		    if ("string" === typeof type) return type;
		    switch (type) {
		      case REACT_FRAGMENT_TYPE:
		        return "Fragment";
		      case REACT_PORTAL_TYPE:
		        return "Portal";
		      case REACT_PROFILER_TYPE:
		        return "Profiler";
		      case REACT_STRICT_MODE_TYPE:
		        return "StrictMode";
		      case REACT_SUSPENSE_TYPE:
		        return "Suspense";
		      case REACT_SUSPENSE_LIST_TYPE:
		        return "SuspenseList";
		    }
		    if ("object" === typeof type)
		      switch (type.$$typeof) {
		        case REACT_CONTEXT_TYPE:
		          return (type.displayName || "Context") + ".Provider";
		        case REACT_CONSUMER_TYPE:
		          return (type._context.displayName || "Context") + ".Consumer";
		        case REACT_FORWARD_REF_TYPE:
		          var innerType = type.render;
		          type = type.displayName;
		          type ||
		            ((type = innerType.displayName || innerType.name || ""),
		            (type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef"));
		          return type;
		        case REACT_MEMO_TYPE:
		          return (
		            (innerType = type.displayName || null),
		            null !== innerType
		              ? innerType
		              : getComponentNameFromType(type.type) || "Memo"
		          );
		        case REACT_LAZY_TYPE:
		          innerType = type._payload;
		          type = type._init;
		          try {
		            return getComponentNameFromType(type(innerType));
		          } catch (x) {}
		      }
		    return null;
		  }
		  function describeBuiltInComponentFrame(name) {
		    if (void 0 === prefix)
		      try {
		        throw Error();
		      } catch (x) {
		        var match = x.stack.trim().match(/\n( *(at )?)/);
		        prefix = (match && match[1]) || "";
		        suffix =
		          -1 < x.stack.indexOf("\n    at")
		            ? " (<anonymous>)"
		            : -1 < x.stack.indexOf("@")
		              ? "@unknown:0:0"
		              : "";
		      }
		    return "\n" + prefix + name + suffix;
		  }
		  function describeNativeComponentFrame(fn, construct) {
		    if (!fn || reentry) return "";
		    reentry = !0;
		    var previousPrepareStackTrace = Error.prepareStackTrace;
		    Error.prepareStackTrace = void 0;
		    try {
		      var RunInRootFrame = {
		        DetermineComponentFrameRoot: function () {
		          try {
		            if (construct) {
		              var Fake = function () {
		                throw Error();
		              };
		              Object.defineProperty(Fake.prototype, "props", {
		                set: function () {
		                  throw Error();
		                }
		              });
		              if ("object" === typeof Reflect && Reflect.construct) {
		                try {
		                  Reflect.construct(Fake, []);
		                } catch (x) {
		                  var control = x;
		                }
		                Reflect.construct(fn, [], Fake);
		              } else {
		                try {
		                  Fake.call();
		                } catch (x$0) {
		                  control = x$0;
		                }
		                fn.call(Fake.prototype);
		              }
		            } else {
		              try {
		                throw Error();
		              } catch (x$1) {
		                control = x$1;
		              }
		              (Fake = fn()) &&
		                "function" === typeof Fake.catch &&
		                Fake.catch(function () {});
		            }
		          } catch (sample) {
		            if (sample && control && "string" === typeof sample.stack)
		              return [sample.stack, control.stack];
		          }
		          return [null, null];
		        }
		      };
		      RunInRootFrame.DetermineComponentFrameRoot.displayName =
		        "DetermineComponentFrameRoot";
		      var namePropDescriptor = Object.getOwnPropertyDescriptor(
		        RunInRootFrame.DetermineComponentFrameRoot,
		        "name"
		      );
		      namePropDescriptor &&
		        namePropDescriptor.configurable &&
		        Object.defineProperty(
		          RunInRootFrame.DetermineComponentFrameRoot,
		          "name",
		          { value: "DetermineComponentFrameRoot" }
		        );
		      var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(),
		        sampleStack = _RunInRootFrame$Deter[0],
		        controlStack = _RunInRootFrame$Deter[1];
		      if (sampleStack && controlStack) {
		        var sampleLines = sampleStack.split("\n"),
		          controlLines = controlStack.split("\n");
		        for (
		          namePropDescriptor = RunInRootFrame = 0;
		          RunInRootFrame < sampleLines.length &&
		          !sampleLines[RunInRootFrame].includes("DetermineComponentFrameRoot");

		        )
		          RunInRootFrame++;
		        for (
		          ;
		          namePropDescriptor < controlLines.length &&
		          !controlLines[namePropDescriptor].includes(
		            "DetermineComponentFrameRoot"
		          );

		        )
		          namePropDescriptor++;
		        if (
		          RunInRootFrame === sampleLines.length ||
		          namePropDescriptor === controlLines.length
		        )
		          for (
		            RunInRootFrame = sampleLines.length - 1,
		              namePropDescriptor = controlLines.length - 1;
		            1 <= RunInRootFrame &&
		            0 <= namePropDescriptor &&
		            sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor];

		          )
		            namePropDescriptor--;
		        for (
		          ;
		          1 <= RunInRootFrame && 0 <= namePropDescriptor;
		          RunInRootFrame--, namePropDescriptor--
		        )
		          if (
		            sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]
		          ) {
		            if (1 !== RunInRootFrame || 1 !== namePropDescriptor) {
		              do
		                if (
		                  (RunInRootFrame--,
		                  namePropDescriptor--,
		                  0 > namePropDescriptor ||
		                    sampleLines[RunInRootFrame] !==
		                      controlLines[namePropDescriptor])
		                ) {
		                  var frame =
		                    "\n" +
		                    sampleLines[RunInRootFrame].replace(" at new ", " at ");
		                  fn.displayName &&
		                    frame.includes("<anonymous>") &&
		                    (frame = frame.replace("<anonymous>", fn.displayName));
		                  return frame;
		                }
		              while (1 <= RunInRootFrame && 0 <= namePropDescriptor);
		            }
		            break;
		          }
		      }
		    } finally {
		      (reentry = !1), (Error.prepareStackTrace = previousPrepareStackTrace);
		    }
		    return (previousPrepareStackTrace = fn ? fn.displayName || fn.name : "")
		      ? describeBuiltInComponentFrame(previousPrepareStackTrace)
		      : "";
		  }
		  function describeFiber(fiber) {
		    switch (fiber.tag) {
		      case 26:
		      case 27:
		      case 5:
		        return describeBuiltInComponentFrame(fiber.type);
		      case 16:
		        return describeBuiltInComponentFrame("Lazy");
		      case 13:
		        return describeBuiltInComponentFrame("Suspense");
		      case 19:
		        return describeBuiltInComponentFrame("SuspenseList");
		      case 0:
		      case 15:
		        return (fiber = describeNativeComponentFrame(fiber.type, !1)), fiber;
		      case 11:
		        return (
		          (fiber = describeNativeComponentFrame(fiber.type.render, !1)), fiber
		        );
		      case 1:
		        return (fiber = describeNativeComponentFrame(fiber.type, !0)), fiber;
		      default:
		        return "";
		    }
		  }
		  function getStackByFiberInDevAndProd(workInProgress) {
		    try {
		      var info = "";
		      do
		        (info += describeFiber(workInProgress)),
		          (workInProgress = workInProgress.return);
		      while (workInProgress);
		      return info;
		    } catch (x) {
		      return "\nError generating stack: " + x.message + "\n" + x.stack;
		    }
		  }
		  function getNearestMountedFiber(fiber) {
		    var node = fiber,
		      nearestMounted = fiber;
		    if (fiber.alternate) for (; node.return; ) node = node.return;
		    else {
		      fiber = node;
		      do
		        (node = fiber),
		          0 !== (node.flags & 4098) && (nearestMounted = node.return),
		          (fiber = node.return);
		      while (fiber);
		    }
		    return 3 === node.tag ? nearestMounted : null;
		  }
		  function assertIsMounted(fiber) {
		    if (getNearestMountedFiber(fiber) !== fiber)
		      throw Error(formatProdErrorMessage(188));
		  }
		  function findCurrentFiberUsingSlowPath(fiber) {
		    var alternate = fiber.alternate;
		    if (!alternate) {
		      alternate = getNearestMountedFiber(fiber);
		      if (null === alternate) throw Error(formatProdErrorMessage(188));
		      return alternate !== fiber ? null : fiber;
		    }
		    for (var a = fiber, b = alternate; ; ) {
		      var parentA = a.return;
		      if (null === parentA) break;
		      var parentB = parentA.alternate;
		      if (null === parentB) {
		        b = parentA.return;
		        if (null !== b) {
		          a = b;
		          continue;
		        }
		        break;
		      }
		      if (parentA.child === parentB.child) {
		        for (parentB = parentA.child; parentB; ) {
		          if (parentB === a) return assertIsMounted(parentA), fiber;
		          if (parentB === b) return assertIsMounted(parentA), alternate;
		          parentB = parentB.sibling;
		        }
		        throw Error(formatProdErrorMessage(188));
		      }
		      if (a.return !== b.return) (a = parentA), (b = parentB);
		      else {
		        for (var didFindChild = !1, child$2 = parentA.child; child$2; ) {
		          if (child$2 === a) {
		            didFindChild = !0;
		            a = parentA;
		            b = parentB;
		            break;
		          }
		          if (child$2 === b) {
		            didFindChild = !0;
		            b = parentA;
		            a = parentB;
		            break;
		          }
		          child$2 = child$2.sibling;
		        }
		        if (!didFindChild) {
		          for (child$2 = parentB.child; child$2; ) {
		            if (child$2 === a) {
		              didFindChild = !0;
		              a = parentB;
		              b = parentA;
		              break;
		            }
		            if (child$2 === b) {
		              didFindChild = !0;
		              b = parentB;
		              a = parentA;
		              break;
		            }
		            child$2 = child$2.sibling;
		          }
		          if (!didFindChild) throw Error(formatProdErrorMessage(189));
		        }
		      }
		      if (a.alternate !== b) throw Error(formatProdErrorMessage(190));
		    }
		    if (3 !== a.tag) throw Error(formatProdErrorMessage(188));
		    return a.stateNode.current === a ? fiber : alternate;
		  }
		  function findCurrentHostFiberImpl(node) {
		    var tag = node.tag;
		    if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;
		    for (node = node.child; null !== node; ) {
		      tag = findCurrentHostFiberImpl(node);
		      if (null !== tag) return tag;
		      node = node.sibling;
		    }
		    return null;
		  }
		  function findCurrentHostFiberWithNoPortalsImpl(node) {
		    var tag = node.tag;
		    if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;
		    for (node = node.child; null !== node; ) {
		      if (
		        4 !== node.tag &&
		        ((tag = findCurrentHostFiberWithNoPortalsImpl(node)), null !== tag)
		      )
		        return tag;
		      node = node.sibling;
		    }
		    return null;
		  }
		  function createCursor(defaultValue) {
		    return { current: defaultValue };
		  }
		  function pop(cursor) {
		    0 > index$jscomp$0 ||
		      ((cursor.current = valueStack[index$jscomp$0]),
		      (valueStack[index$jscomp$0] = null),
		      index$jscomp$0--);
		  }
		  function push(cursor, value) {
		    index$jscomp$0++;
		    valueStack[index$jscomp$0] = cursor.current;
		    cursor.current = value;
		  }
		  function clz32Fallback(x) {
		    x >>>= 0;
		    return 0 === x ? 32 : (31 - ((log$1(x) / LN2) | 0)) | 0;
		  }
		  function getHighestPriorityLanes(lanes) {
		    var pendingSyncLanes = lanes & 42;
		    if (0 !== pendingSyncLanes) return pendingSyncLanes;
		    switch (lanes & -lanes) {
		      case 1:
		        return 1;
		      case 2:
		        return 2;
		      case 4:
		        return 4;
		      case 8:
		        return 8;
		      case 16:
		        return 16;
		      case 32:
		        return 32;
		      case 64:
		        return 64;
		      case 128:
		      case 256:
		      case 512:
		      case 1024:
		      case 2048:
		      case 4096:
		      case 8192:
		      case 16384:
		      case 32768:
		      case 65536:
		      case 131072:
		      case 262144:
		      case 524288:
		      case 1048576:
		      case 2097152:
		        return lanes & 4194176;
		      case 4194304:
		      case 8388608:
		      case 16777216:
		      case 33554432:
		        return lanes & 62914560;
		      case 67108864:
		        return 67108864;
		      case 134217728:
		        return 134217728;
		      case 268435456:
		        return 268435456;
		      case 536870912:
		        return 536870912;
		      case 1073741824:
		        return 0;
		      default:
		        return lanes;
		    }
		  }
		  function getNextLanes(root, wipLanes) {
		    var pendingLanes = root.pendingLanes;
		    if (0 === pendingLanes) return 0;
		    var nextLanes = 0,
		      suspendedLanes = root.suspendedLanes,
		      pingedLanes = root.pingedLanes,
		      warmLanes = root.warmLanes;
		    root = 0 !== root.finishedLanes;
		    var nonIdlePendingLanes = pendingLanes & 134217727;
		    0 !== nonIdlePendingLanes
		      ? ((pendingLanes = nonIdlePendingLanes & ~suspendedLanes),
		        0 !== pendingLanes
		          ? (nextLanes = getHighestPriorityLanes(pendingLanes))
		          : ((pingedLanes &= nonIdlePendingLanes),
		            0 !== pingedLanes
		              ? (nextLanes = getHighestPriorityLanes(pingedLanes))
		              : root ||
		                ((warmLanes = nonIdlePendingLanes & ~warmLanes),
		                0 !== warmLanes &&
		                  (nextLanes = getHighestPriorityLanes(warmLanes)))))
		      : ((nonIdlePendingLanes = pendingLanes & ~suspendedLanes),
		        0 !== nonIdlePendingLanes
		          ? (nextLanes = getHighestPriorityLanes(nonIdlePendingLanes))
		          : 0 !== pingedLanes
		            ? (nextLanes = getHighestPriorityLanes(pingedLanes))
		            : root ||
		              ((warmLanes = pendingLanes & ~warmLanes),
		              0 !== warmLanes &&
		                (nextLanes = getHighestPriorityLanes(warmLanes))));
		    return 0 === nextLanes
		      ? 0
		      : 0 !== wipLanes &&
		          wipLanes !== nextLanes &&
		          0 === (wipLanes & suspendedLanes) &&
		          ((suspendedLanes = nextLanes & -nextLanes),
		          (warmLanes = wipLanes & -wipLanes),
		          suspendedLanes >= warmLanes ||
		            (32 === suspendedLanes && 0 !== (warmLanes & 4194176)))
		        ? wipLanes
		        : nextLanes;
		  }
		  function checkIfRootIsPrerendering(root, renderLanes) {
		    return (
		      0 ===
		      (root.pendingLanes &
		        ~(root.suspendedLanes & ~root.pingedLanes) &
		        renderLanes)
		    );
		  }
		  function computeExpirationTime(lane, currentTime) {
		    switch (lane) {
		      case 1:
		      case 2:
		      case 4:
		      case 8:
		        return currentTime + 250;
		      case 16:
		      case 32:
		      case 64:
		      case 128:
		      case 256:
		      case 512:
		      case 1024:
		      case 2048:
		      case 4096:
		      case 8192:
		      case 16384:
		      case 32768:
		      case 65536:
		      case 131072:
		      case 262144:
		      case 524288:
		      case 1048576:
		      case 2097152:
		        return currentTime + 5e3;
		      case 4194304:
		      case 8388608:
		      case 16777216:
		      case 33554432:
		        return -1;
		      case 67108864:
		      case 134217728:
		      case 268435456:
		      case 536870912:
		      case 1073741824:
		        return -1;
		      default:
		        return -1;
		    }
		  }
		  function claimNextTransitionLane() {
		    var lane = nextTransitionLane;
		    nextTransitionLane <<= 1;
		    0 === (nextTransitionLane & 4194176) && (nextTransitionLane = 128);
		    return lane;
		  }
		  function claimNextRetryLane() {
		    var lane = nextRetryLane;
		    nextRetryLane <<= 1;
		    0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
		    return lane;
		  }
		  function createLaneMap(initial) {
		    for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial);
		    return laneMap;
		  }
		  function markRootUpdated$1(root, updateLane) {
		    root.pendingLanes |= updateLane;
		    268435456 !== updateLane &&
		      ((root.suspendedLanes = 0), (root.pingedLanes = 0), (root.warmLanes = 0));
		  }
		  function markRootFinished(
		    root,
		    finishedLanes,
		    remainingLanes,
		    spawnedLane,
		    updatedLanes,
		    suspendedRetryLanes
		  ) {
		    var previouslyPendingLanes = root.pendingLanes;
		    root.pendingLanes = remainingLanes;
		    root.suspendedLanes = 0;
		    root.pingedLanes = 0;
		    root.warmLanes = 0;
		    root.expiredLanes &= remainingLanes;
		    root.entangledLanes &= remainingLanes;
		    root.errorRecoveryDisabledLanes &= remainingLanes;
		    root.shellSuspendCounter = 0;
		    var entanglements = root.entanglements,
		      expirationTimes = root.expirationTimes,
		      hiddenUpdates = root.hiddenUpdates;
		    for (
		      remainingLanes = previouslyPendingLanes & ~remainingLanes;
		      0 < remainingLanes;

		    ) {
		      var index$7 = 31 - clz32(remainingLanes),
		        lane = 1 << index$7;
		      entanglements[index$7] = 0;
		      expirationTimes[index$7] = -1;
		      var hiddenUpdatesForLane = hiddenUpdates[index$7];
		      if (null !== hiddenUpdatesForLane)
		        for (
		          hiddenUpdates[index$7] = null, index$7 = 0;
		          index$7 < hiddenUpdatesForLane.length;
		          index$7++
		        ) {
		          var update = hiddenUpdatesForLane[index$7];
		          null !== update && (update.lane &= -536870913);
		        }
		      remainingLanes &= ~lane;
		    }
		    0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, 0);
		    0 !== suspendedRetryLanes &&
		      0 === updatedLanes &&
		      0 !== root.tag &&
		      (root.suspendedLanes |=
		        suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
		  }
		  function markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {
		    root.pendingLanes |= spawnedLane;
		    root.suspendedLanes &= ~spawnedLane;
		    var spawnedLaneIndex = 31 - clz32(spawnedLane);
		    root.entangledLanes |= spawnedLane;
		    root.entanglements[spawnedLaneIndex] =
		      root.entanglements[spawnedLaneIndex] |
		      1073741824 |
		      (entangledLanes & 4194218);
		  }
		  function markRootEntangled(root, entangledLanes) {
		    var rootEntangledLanes = (root.entangledLanes |= entangledLanes);
		    for (root = root.entanglements; rootEntangledLanes; ) {
		      var index$8 = 31 - clz32(rootEntangledLanes),
		        lane = 1 << index$8;
		      (lane & entangledLanes) | (root[index$8] & entangledLanes) &&
		        (root[index$8] |= entangledLanes);
		      rootEntangledLanes &= ~lane;
		    }
		  }
		  function lanesToEventPriority(lanes) {
		    lanes &= -lanes;
		    return 2 < lanes
		      ? 8 < lanes
		        ? 0 !== (lanes & 134217727)
		          ? 32
		          : 268435456
		        : 8
		      : 2;
		  }
		  function onCommitRoot(root) {
		    if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot)
		      try {
		        injectedHook.onCommitFiberRoot(
		          rendererID,
		          root,
		          void 0,
		          128 === (root.current.flags & 128)
		        );
		      } catch (err) {}
		  }
		  function setIsStrictModeForDevtools(newIsStrictMode) {
		    "function" === typeof log && unstable_setDisableYieldValue(newIsStrictMode);
		    if (injectedHook && "function" === typeof injectedHook.setStrictMode)
		      try {
		        injectedHook.setStrictMode(rendererID, newIsStrictMode);
		      } catch (err) {}
		  }
		  function is(x, y) {
		    return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);
		  }
		  function createCapturedValueAtFiber(value, source) {
		    if ("object" === typeof value && null !== value) {
		      var existing = CapturedStacks.get(value);
		      if (void 0 !== existing) return existing;
		      source = {
		        value: value,
		        source: source,
		        stack: getStackByFiberInDevAndProd(source)
		      };
		      CapturedStacks.set(value, source);
		      return source;
		    }
		    return {
		      value: value,
		      source: source,
		      stack: getStackByFiberInDevAndProd(source)
		    };
		  }
		  function pushTreeFork(workInProgress, totalChildren) {
		    forkStack[forkStackIndex++] = treeForkCount;
		    forkStack[forkStackIndex++] = treeForkProvider;
		    treeForkProvider = workInProgress;
		    treeForkCount = totalChildren;
		  }
		  function pushTreeId(workInProgress, totalChildren, index) {
		    idStack[idStackIndex++] = treeContextId;
		    idStack[idStackIndex++] = treeContextOverflow;
		    idStack[idStackIndex++] = treeContextProvider;
		    treeContextProvider = workInProgress;
		    var baseIdWithLeadingBit = treeContextId;
		    workInProgress = treeContextOverflow;
		    var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
		    baseIdWithLeadingBit &= ~(1 << baseLength);
		    index += 1;
		    var length = 32 - clz32(totalChildren) + baseLength;
		    if (30 < length) {
		      var numberOfOverflowBits = baseLength - (baseLength % 5);
		      length = (
		        baseIdWithLeadingBit &
		        ((1 << numberOfOverflowBits) - 1)
		      ).toString(32);
		      baseIdWithLeadingBit >>= numberOfOverflowBits;
		      baseLength -= numberOfOverflowBits;
		      treeContextId =
		        (1 << (32 - clz32(totalChildren) + baseLength)) |
		        (index << baseLength) |
		        baseIdWithLeadingBit;
		      treeContextOverflow = length + workInProgress;
		    } else
		      (treeContextId =
		        (1 << length) | (index << baseLength) | baseIdWithLeadingBit),
		        (treeContextOverflow = workInProgress);
		  }
		  function pushMaterializedTreeId(workInProgress) {
		    null !== workInProgress.return &&
		      (pushTreeFork(workInProgress, 1), pushTreeId(workInProgress, 1, 0));
		  }
		  function popTreeContext(workInProgress) {
		    for (; workInProgress === treeForkProvider; )
		      (treeForkProvider = forkStack[--forkStackIndex]),
		        (forkStack[forkStackIndex] = null),
		        (treeForkCount = forkStack[--forkStackIndex]),
		        (forkStack[forkStackIndex] = null);
		    for (; workInProgress === treeContextProvider; )
		      (treeContextProvider = idStack[--idStackIndex]),
		        (idStack[idStackIndex] = null),
		        (treeContextOverflow = idStack[--idStackIndex]),
		        (idStack[idStackIndex] = null),
		        (treeContextId = idStack[--idStackIndex]),
		        (idStack[idStackIndex] = null);
		  }
		  function pushHostContainer(fiber, nextRootInstance) {
		    push(rootInstanceStackCursor, nextRootInstance);
		    push(contextFiberStackCursor, fiber);
		    push(contextStackCursor, null);
		    fiber = getRootHostContext(nextRootInstance);
		    pop(contextStackCursor);
		    push(contextStackCursor, fiber);
		  }
		  function popHostContainer() {
		    pop(contextStackCursor);
		    pop(contextFiberStackCursor);
		    pop(rootInstanceStackCursor);
		  }
		  function pushHostContext(fiber) {
		    null !== fiber.memoizedState && push(hostTransitionProviderCursor, fiber);
		    var context = contextStackCursor.current,
		      nextContext = getChildHostContext(context, fiber.type);
		    context !== nextContext &&
		      (push(contextFiberStackCursor, fiber),
		      push(contextStackCursor, nextContext));
		  }
		  function popHostContext(fiber) {
		    contextFiberStackCursor.current === fiber &&
		      (pop(contextStackCursor), pop(contextFiberStackCursor));
		    hostTransitionProviderCursor.current === fiber &&
		      (pop(hostTransitionProviderCursor),
		      isPrimaryRenderer
		        ? (HostTransitionContext._currentValue = NotPendingTransition)
		        : (HostTransitionContext._currentValue2 = NotPendingTransition));
		  }
		  function throwOnHydrationMismatch(fiber) {
		    var error = Error(formatProdErrorMessage(418, ""));
		    queueHydrationError(createCapturedValueAtFiber(error, fiber));
		    throw HydrationMismatchException;
		  }
		  function prepareToHydrateHostInstance(fiber, hostContext) {
		    if (!supportsHydration) throw Error(formatProdErrorMessage(175));
		    hydrateInstance(
		      fiber.stateNode,
		      fiber.type,
		      fiber.memoizedProps,
		      hostContext,
		      fiber
		    ) || throwOnHydrationMismatch(fiber);
		  }
		  function popToNextHostParent(fiber) {
		    for (hydrationParentFiber = fiber.return; hydrationParentFiber; )
		      switch (hydrationParentFiber.tag) {
		        case 3:
		        case 27:
		          rootOrSingletonContext = !0;
		          return;
		        case 5:
		        case 13:
		          rootOrSingletonContext = !1;
		          return;
		        default:
		          hydrationParentFiber = hydrationParentFiber.return;
		      }
		  }
		  function popHydrationState(fiber) {
		    if (!supportsHydration || fiber !== hydrationParentFiber) return !1;
		    if (!isHydrating) return popToNextHostParent(fiber), (isHydrating = !0), !1;
		    var shouldClear = !1;
		    supportsSingletons
		      ? 3 !== fiber.tag &&
		        27 !== fiber.tag &&
		        (5 !== fiber.tag ||
		          (shouldDeleteUnhydratedTailInstances(fiber.type) &&
		            !shouldSetTextContent(fiber.type, fiber.memoizedProps))) &&
		        (shouldClear = !0)
		      : 3 !== fiber.tag &&
		        (5 !== fiber.tag ||
		          (shouldDeleteUnhydratedTailInstances(fiber.type) &&
		            !shouldSetTextContent(fiber.type, fiber.memoizedProps))) &&
		        (shouldClear = !0);
		    shouldClear && nextHydratableInstance && throwOnHydrationMismatch(fiber);
		    popToNextHostParent(fiber);
		    if (13 === fiber.tag) {
		      if (!supportsHydration) throw Error(formatProdErrorMessage(316));
		      fiber = fiber.memoizedState;
		      fiber = null !== fiber ? fiber.dehydrated : null;
		      if (!fiber) throw Error(formatProdErrorMessage(317));
		      nextHydratableInstance =
		        getNextHydratableInstanceAfterSuspenseInstance(fiber);
		    } else
		      nextHydratableInstance = hydrationParentFiber
		        ? getNextHydratableSibling(fiber.stateNode)
		        : null;
		    return !0;
		  }
		  function resetHydrationState() {
		    supportsHydration &&
		      ((nextHydratableInstance = hydrationParentFiber = null),
		      (isHydrating = !1));
		  }
		  function queueHydrationError(error) {
		    null === hydrationErrors
		      ? (hydrationErrors = [error])
		      : hydrationErrors.push(error);
		  }
		  function finishQueueingConcurrentUpdates() {
		    for (
		      var endIndex = concurrentQueuesIndex,
		        i = (concurrentlyUpdatedLanes = concurrentQueuesIndex = 0);
		      i < endIndex;

		    ) {
		      var fiber = concurrentQueues[i];
		      concurrentQueues[i++] = null;
		      var queue = concurrentQueues[i];
		      concurrentQueues[i++] = null;
		      var update = concurrentQueues[i];
		      concurrentQueues[i++] = null;
		      var lane = concurrentQueues[i];
		      concurrentQueues[i++] = null;
		      if (null !== queue && null !== update) {
		        var pending = queue.pending;
		        null === pending
		          ? (update.next = update)
		          : ((update.next = pending.next), (pending.next = update));
		        queue.pending = update;
		      }
		      0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
		    }
		  }
		  function enqueueUpdate$1(fiber, queue, update, lane) {
		    concurrentQueues[concurrentQueuesIndex++] = fiber;
		    concurrentQueues[concurrentQueuesIndex++] = queue;
		    concurrentQueues[concurrentQueuesIndex++] = update;
		    concurrentQueues[concurrentQueuesIndex++] = lane;
		    concurrentlyUpdatedLanes |= lane;
		    fiber.lanes |= lane;
		    fiber = fiber.alternate;
		    null !== fiber && (fiber.lanes |= lane);
		  }
		  function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
		    enqueueUpdate$1(fiber, queue, update, lane);
		    return getRootForUpdatedFiber(fiber);
		  }
		  function enqueueConcurrentRenderForLane(fiber, lane) {
		    enqueueUpdate$1(fiber, null, null, lane);
		    return getRootForUpdatedFiber(fiber);
		  }
		  function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
		    sourceFiber.lanes |= lane;
		    var alternate = sourceFiber.alternate;
		    null !== alternate && (alternate.lanes |= lane);
		    for (var isHidden = !1, parent = sourceFiber.return; null !== parent; )
		      (parent.childLanes |= lane),
		        (alternate = parent.alternate),
		        null !== alternate && (alternate.childLanes |= lane),
		        22 === parent.tag &&
		          ((sourceFiber = parent.stateNode),
		          null === sourceFiber ||
		            sourceFiber._visibility & 1 ||
		            (isHidden = !0)),
		        (sourceFiber = parent),
		        (parent = parent.return);
		    isHidden &&
		      null !== update &&
		      3 === sourceFiber.tag &&
		      ((parent = sourceFiber.stateNode),
		      (isHidden = 31 - clz32(lane)),
		      (parent = parent.hiddenUpdates),
		      (sourceFiber = parent[isHidden]),
		      null === sourceFiber
		        ? (parent[isHidden] = [update])
		        : sourceFiber.push(update),
		      (update.lane = lane | 536870912));
		  }
		  function getRootForUpdatedFiber(sourceFiber) {
		    if (50 < nestedUpdateCount)
		      throw (
		        ((nestedUpdateCount = 0),
		        (rootWithNestedUpdates = null),
		        Error(formatProdErrorMessage(185)))
		      );
		    for (var parent = sourceFiber.return; null !== parent; )
		      (sourceFiber = parent), (parent = sourceFiber.return);
		    return 3 === sourceFiber.tag ? sourceFiber.stateNode : null;
		  }
		  function ensureRootIsScheduled(root) {
		    root !== lastScheduledRoot &&
		      null === root.next &&
		      (null === lastScheduledRoot
		        ? (firstScheduledRoot = lastScheduledRoot = root)
		        : (lastScheduledRoot = lastScheduledRoot.next = root));
		    mightHavePendingSyncWork = !0;
		    didScheduleMicrotask ||
		      ((didScheduleMicrotask = !0),
		      scheduleImmediateTask(processRootScheduleInMicrotask));
		  }
		  function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
		    if (!isFlushingWork && mightHavePendingSyncWork) {
		      isFlushingWork = !0;
		      do {
		        var didPerformSomeWork = !1;
		        for (var root = firstScheduledRoot; null !== root; ) {
		          if (!onlyLegacy)
		            if (0 !== syncTransitionLanes) {
		              var pendingLanes = root.pendingLanes;
		              if (0 === pendingLanes) var JSCompiler_inline_result = 0;
		              else {
		                var suspendedLanes = root.suspendedLanes,
		                  pingedLanes = root.pingedLanes;
		                JSCompiler_inline_result =
		                  (1 << (31 - clz32(42 | syncTransitionLanes) + 1)) - 1;
		                JSCompiler_inline_result &=
		                  pendingLanes & ~(suspendedLanes & ~pingedLanes);
		                JSCompiler_inline_result =
		                  JSCompiler_inline_result & 201326677
		                    ? (JSCompiler_inline_result & 201326677) | 1
		                    : JSCompiler_inline_result
		                      ? JSCompiler_inline_result | 2
		                      : 0;
		              }
		              0 !== JSCompiler_inline_result &&
		                ((didPerformSomeWork = !0),
		                performSyncWorkOnRoot(root, JSCompiler_inline_result));
		            } else
		              (JSCompiler_inline_result = workInProgressRootRenderLanes),
		                (JSCompiler_inline_result = getNextLanes(
		                  root,
		                  root === workInProgressRoot ? JSCompiler_inline_result : 0
		                )),
		                0 === (JSCompiler_inline_result & 3) ||
		                  checkIfRootIsPrerendering(root, JSCompiler_inline_result) ||
		                  ((didPerformSomeWork = !0),
		                  performSyncWorkOnRoot(root, JSCompiler_inline_result));
		          root = root.next;
		        }
		      } while (didPerformSomeWork);
		      isFlushingWork = !1;
		    }
		  }
		  function processRootScheduleInMicrotask() {
		    mightHavePendingSyncWork = didScheduleMicrotask = !1;
		    var syncTransitionLanes = 0;
		    0 !== currentEventTransitionLane &&
		      (shouldAttemptEagerTransition() &&
		        (syncTransitionLanes = currentEventTransitionLane),
		      (currentEventTransitionLane = 0));
		    for (
		      var currentTime = now(), prev = null, root = firstScheduledRoot;
		      null !== root;

		    ) {
		      var next = root.next,
		        nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);
		      if (0 === nextLanes)
		        (root.next = null),
		          null === prev ? (firstScheduledRoot = next) : (prev.next = next),
		          null === next && (lastScheduledRoot = prev);
		      else if (
		        ((prev = root), 0 !== syncTransitionLanes || 0 !== (nextLanes & 3))
		      )
		        mightHavePendingSyncWork = !0;
		      root = next;
		    }
		    flushSyncWorkAcrossRoots_impl(syncTransitionLanes, !1);
		  }
		  function scheduleTaskForRootDuringMicrotask(root, currentTime) {
		    for (
		      var suspendedLanes = root.suspendedLanes,
		        pingedLanes = root.pingedLanes,
		        expirationTimes = root.expirationTimes,
		        lanes = root.pendingLanes & -62914561;
		      0 < lanes;

		    ) {
		      var index$5 = 31 - clz32(lanes),
		        lane = 1 << index$5,
		        expirationTime = expirationTimes[index$5];
		      if (-1 === expirationTime) {
		        if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes))
		          expirationTimes[index$5] = computeExpirationTime(lane, currentTime);
		      } else expirationTime <= currentTime && (root.expiredLanes |= lane);
		      lanes &= ~lane;
		    }
		    currentTime = workInProgressRoot;
		    suspendedLanes = workInProgressRootRenderLanes;
		    suspendedLanes = getNextLanes(
		      root,
		      root === currentTime ? suspendedLanes : 0
		    );
		    pingedLanes = root.callbackNode;
		    if (
		      0 === suspendedLanes ||
		      (root === currentTime && 2 === workInProgressSuspendedReason) ||
		      null !== root.cancelPendingCommit
		    )
		      return (
		        null !== pingedLanes &&
		          null !== pingedLanes &&
		          cancelCallback$1(pingedLanes),
		        (root.callbackNode = null),
		        (root.callbackPriority = 0)
		      );
		    if (
		      0 === (suspendedLanes & 3) ||
		      checkIfRootIsPrerendering(root, suspendedLanes)
		    ) {
		      currentTime = suspendedLanes & -suspendedLanes;
		      if (currentTime === root.callbackPriority) return currentTime;
		      null !== pingedLanes && cancelCallback$1(pingedLanes);
		      switch (lanesToEventPriority(suspendedLanes)) {
		        case 2:
		        case 8:
		          suspendedLanes = UserBlockingPriority;
		          break;
		        case 32:
		          suspendedLanes = NormalPriority$1;
		          break;
		        case 268435456:
		          suspendedLanes = IdlePriority;
		          break;
		        default:
		          suspendedLanes = NormalPriority$1;
		      }
		      pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root);
		      suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);
		      root.callbackPriority = currentTime;
		      root.callbackNode = suspendedLanes;
		      return currentTime;
		    }
		    null !== pingedLanes &&
		      null !== pingedLanes &&
		      cancelCallback$1(pingedLanes);
		    root.callbackPriority = 2;
		    root.callbackNode = null;
		    return 2;
		  }
		  function performWorkOnRootViaSchedulerTask(root, didTimeout) {
		    var originalCallbackNode = root.callbackNode;
		    if (flushPassiveEffects() && root.callbackNode !== originalCallbackNode)
		      return null;
		    var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;
		    workInProgressRootRenderLanes$jscomp$0 = getNextLanes(
		      root,
		      root === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0
		    );
		    if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
		    performWorkOnRoot(root, workInProgressRootRenderLanes$jscomp$0, didTimeout);
		    scheduleTaskForRootDuringMicrotask(root, now());
		    return null != root.callbackNode &&
		      root.callbackNode === originalCallbackNode
		      ? performWorkOnRootViaSchedulerTask.bind(null, root)
		      : null;
		  }
		  function performSyncWorkOnRoot(root, lanes) {
		    if (flushPassiveEffects()) return null;
		    performWorkOnRoot(root, lanes, !0);
		  }
		  function scheduleImmediateTask(cb) {
		    supportsMicrotasks
		      ? scheduleMicrotask(function () {
		          0 !== (executionContext & 6)
		            ? scheduleCallback$3(ImmediatePriority, cb)
		            : cb();
		        })
		      : scheduleCallback$3(ImmediatePriority, cb);
		  }
		  function requestTransitionLane() {
		    0 === currentEventTransitionLane &&
		      (currentEventTransitionLane = claimNextTransitionLane());
		    return currentEventTransitionLane;
		  }
		  function entangleAsyncAction(transition, thenable) {
		    if (null === currentEntangledListeners) {
		      var entangledListeners = (currentEntangledListeners = []);
		      currentEntangledPendingCount = 0;
		      currentEntangledLane = requestTransitionLane();
		      currentEntangledActionThenable = {
		        status: "pending",
		        value: void 0,
		        then: function (resolve) {
		          entangledListeners.push(resolve);
		        }
		      };
		    }
		    currentEntangledPendingCount++;
		    thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
		    return thenable;
		  }
		  function pingEngtangledActionScope() {
		    if (
		      0 === --currentEntangledPendingCount &&
		      null !== currentEntangledListeners
		    ) {
		      null !== currentEntangledActionThenable &&
		        (currentEntangledActionThenable.status = "fulfilled");
		      var listeners = currentEntangledListeners;
		      currentEntangledListeners = null;
		      currentEntangledLane = 0;
		      currentEntangledActionThenable = null;
		      for (var i = 0; i < listeners.length; i++) (0, listeners[i])();
		    }
		  }
		  function chainThenableValue(thenable, result) {
		    var listeners = [],
		      thenableWithOverride = {
		        status: "pending",
		        value: null,
		        reason: null,
		        then: function (resolve) {
		          listeners.push(resolve);
		        }
		      };
		    thenable.then(
		      function () {
		        thenableWithOverride.status = "fulfilled";
		        thenableWithOverride.value = result;
		        for (var i = 0; i < listeners.length; i++) (0, listeners[i])(result);
		      },
		      function (error) {
		        thenableWithOverride.status = "rejected";
		        thenableWithOverride.reason = error;
		        for (error = 0; error < listeners.length; error++)
		          (0, listeners[error])(void 0);
		      }
		    );
		    return thenableWithOverride;
		  }
		  function initializeUpdateQueue(fiber) {
		    fiber.updateQueue = {
		      baseState: fiber.memoizedState,
		      firstBaseUpdate: null,
		      lastBaseUpdate: null,
		      shared: { pending: null, lanes: 0, hiddenCallbacks: null },
		      callbacks: null
		    };
		  }
		  function cloneUpdateQueue(current, workInProgress) {
		    current = current.updateQueue;
		    workInProgress.updateQueue === current &&
		      (workInProgress.updateQueue = {
		        baseState: current.baseState,
		        firstBaseUpdate: current.firstBaseUpdate,
		        lastBaseUpdate: current.lastBaseUpdate,
		        shared: current.shared,
		        callbacks: null
		      });
		  }
		  function createUpdate(lane) {
		    return { lane: lane, tag: 0, payload: null, callback: null, next: null };
		  }
		  function enqueueUpdate(fiber, update, lane) {
		    var updateQueue = fiber.updateQueue;
		    if (null === updateQueue) return null;
		    updateQueue = updateQueue.shared;
		    if (0 !== (executionContext & 2)) {
		      var pending = updateQueue.pending;
		      null === pending
		        ? (update.next = update)
		        : ((update.next = pending.next), (pending.next = update));
		      updateQueue.pending = update;
		      update = getRootForUpdatedFiber(fiber);
		      markUpdateLaneFromFiberToRoot(fiber, null, lane);
		      return update;
		    }
		    enqueueUpdate$1(fiber, updateQueue, update, lane);
		    return getRootForUpdatedFiber(fiber);
		  }
		  function entangleTransitions(root, fiber, lane) {
		    fiber = fiber.updateQueue;
		    if (null !== fiber && ((fiber = fiber.shared), 0 !== (lane & 4194176))) {
		      var queueLanes = fiber.lanes;
		      queueLanes &= root.pendingLanes;
		      lane |= queueLanes;
		      fiber.lanes = lane;
		      markRootEntangled(root, lane);
		    }
		  }
		  function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
		    var queue = workInProgress.updateQueue,
		      current = workInProgress.alternate;
		    if (
		      null !== current &&
		      ((current = current.updateQueue), queue === current)
		    ) {
		      var newFirst = null,
		        newLast = null;
		      queue = queue.firstBaseUpdate;
		      if (null !== queue) {
		        do {
		          var clone = {
		            lane: queue.lane,
		            tag: queue.tag,
		            payload: queue.payload,
		            callback: null,
		            next: null
		          };
		          null === newLast
		            ? (newFirst = newLast = clone)
		            : (newLast = newLast.next = clone);
		          queue = queue.next;
		        } while (null !== queue);
		        null === newLast
		          ? (newFirst = newLast = capturedUpdate)
		          : (newLast = newLast.next = capturedUpdate);
		      } else newFirst = newLast = capturedUpdate;
		      queue = {
		        baseState: current.baseState,
		        firstBaseUpdate: newFirst,
		        lastBaseUpdate: newLast,
		        shared: current.shared,
		        callbacks: current.callbacks
		      };
		      workInProgress.updateQueue = queue;
		      return;
		    }
		    workInProgress = queue.lastBaseUpdate;
		    null === workInProgress
		      ? (queue.firstBaseUpdate = capturedUpdate)
		      : (workInProgress.next = capturedUpdate);
		    queue.lastBaseUpdate = capturedUpdate;
		  }
		  function suspendIfUpdateReadFromEntangledAsyncAction() {
		    if (didReadFromEntangledAsyncAction) {
		      var entangledActionThenable = currentEntangledActionThenable;
		      if (null !== entangledActionThenable) throw entangledActionThenable;
		    }
		  }
		  function processUpdateQueue(
		    workInProgress$jscomp$0,
		    props,
		    instance$jscomp$0,
		    renderLanes
		  ) {
		    didReadFromEntangledAsyncAction = !1;
		    var queue = workInProgress$jscomp$0.updateQueue;
		    hasForceUpdate = !1;
		    var firstBaseUpdate = queue.firstBaseUpdate,
		      lastBaseUpdate = queue.lastBaseUpdate,
		      pendingQueue = queue.shared.pending;
		    if (null !== pendingQueue) {
		      queue.shared.pending = null;
		      var lastPendingUpdate = pendingQueue,
		        firstPendingUpdate = lastPendingUpdate.next;
		      lastPendingUpdate.next = null;
		      null === lastBaseUpdate
		        ? (firstBaseUpdate = firstPendingUpdate)
		        : (lastBaseUpdate.next = firstPendingUpdate);
		      lastBaseUpdate = lastPendingUpdate;
		      var current = workInProgress$jscomp$0.alternate;
		      null !== current &&
		        ((current = current.updateQueue),
		        (pendingQueue = current.lastBaseUpdate),
		        pendingQueue !== lastBaseUpdate &&
		          (null === pendingQueue
		            ? (current.firstBaseUpdate = firstPendingUpdate)
		            : (pendingQueue.next = firstPendingUpdate),
		          (current.lastBaseUpdate = lastPendingUpdate)));
		    }
		    if (null !== firstBaseUpdate) {
		      var newState = queue.baseState;
		      lastBaseUpdate = 0;
		      current = firstPendingUpdate = lastPendingUpdate = null;
		      pendingQueue = firstBaseUpdate;
		      do {
		        var updateLane = pendingQueue.lane & -536870913,
		          isHiddenUpdate = updateLane !== pendingQueue.lane;
		        if (
		          isHiddenUpdate
		            ? (workInProgressRootRenderLanes & updateLane) === updateLane
		            : (renderLanes & updateLane) === updateLane
		        ) {
		          0 !== updateLane &&
		            updateLane === currentEntangledLane &&
		            (didReadFromEntangledAsyncAction = !0);
		          null !== current &&
		            (current = current.next =
		              {
		                lane: 0,
		                tag: pendingQueue.tag,
		                payload: pendingQueue.payload,
		                callback: null,
		                next: null
		              });
		          a: {
		            var workInProgress = workInProgress$jscomp$0,
		              update = pendingQueue;
		            updateLane = props;
		            var instance = instance$jscomp$0;
		            switch (update.tag) {
		              case 1:
		                workInProgress = update.payload;
		                if ("function" === typeof workInProgress) {
		                  newState = workInProgress.call(
		                    instance,
		                    newState,
		                    updateLane
		                  );
		                  break a;
		                }
		                newState = workInProgress;
		                break a;
		              case 3:
		                workInProgress.flags = (workInProgress.flags & -65537) | 128;
		              case 0:
		                workInProgress = update.payload;
		                updateLane =
		                  "function" === typeof workInProgress
		                    ? workInProgress.call(instance, newState, updateLane)
		                    : workInProgress;
		                if (null === updateLane || void 0 === updateLane) break a;
		                newState = assign({}, newState, updateLane);
		                break a;
		              case 2:
		                hasForceUpdate = !0;
		            }
		          }
		          updateLane = pendingQueue.callback;
		          null !== updateLane &&
		            ((workInProgress$jscomp$0.flags |= 64),
		            isHiddenUpdate && (workInProgress$jscomp$0.flags |= 8192),
		            (isHiddenUpdate = queue.callbacks),
		            null === isHiddenUpdate
		              ? (queue.callbacks = [updateLane])
		              : isHiddenUpdate.push(updateLane));
		        } else
		          (isHiddenUpdate = {
		            lane: updateLane,
		            tag: pendingQueue.tag,
		            payload: pendingQueue.payload,
		            callback: pendingQueue.callback,
		            next: null
		          }),
		            null === current
		              ? ((firstPendingUpdate = current = isHiddenUpdate),
		                (lastPendingUpdate = newState))
		              : (current = current.next = isHiddenUpdate),
		            (lastBaseUpdate |= updateLane);
		        pendingQueue = pendingQueue.next;
		        if (null === pendingQueue)
		          if (((pendingQueue = queue.shared.pending), null === pendingQueue))
		            break;
		          else
		            (isHiddenUpdate = pendingQueue),
		              (pendingQueue = isHiddenUpdate.next),
		              (isHiddenUpdate.next = null),
		              (queue.lastBaseUpdate = isHiddenUpdate),
		              (queue.shared.pending = null);
		      } while (1);
		      null === current && (lastPendingUpdate = newState);
		      queue.baseState = lastPendingUpdate;
		      queue.firstBaseUpdate = firstPendingUpdate;
		      queue.lastBaseUpdate = current;
		      null === firstBaseUpdate && (queue.shared.lanes = 0);
		      workInProgressRootSkippedLanes |= lastBaseUpdate;
		      workInProgress$jscomp$0.lanes = lastBaseUpdate;
		      workInProgress$jscomp$0.memoizedState = newState;
		    }
		  }
		  function callCallback(callback, context) {
		    if ("function" !== typeof callback)
		      throw Error(formatProdErrorMessage(191, callback));
		    callback.call(context);
		  }
		  function commitCallbacks(updateQueue, context) {
		    var callbacks = updateQueue.callbacks;
		    if (null !== callbacks)
		      for (
		        updateQueue.callbacks = null, updateQueue = 0;
		        updateQueue < callbacks.length;
		        updateQueue++
		      )
		        callCallback(callbacks[updateQueue], context);
		  }
		  function shallowEqual(objA, objB) {
		    if (objectIs(objA, objB)) return !0;
		    if (
		      "object" !== typeof objA ||
		      null === objA ||
		      "object" !== typeof objB ||
		      null === objB
		    )
		      return !1;
		    var keysA = Object.keys(objA),
		      keysB = Object.keys(objB);
		    if (keysA.length !== keysB.length) return !1;
		    for (keysB = 0; keysB < keysA.length; keysB++) {
		      var currentKey = keysA[keysB];
		      if (
		        !hasOwnProperty.call(objB, currentKey) ||
		        !objectIs(objA[currentKey], objB[currentKey])
		      )
		        return !1;
		    }
		    return !0;
		  }
		  function isThenableResolved(thenable) {
		    thenable = thenable.status;
		    return "fulfilled" === thenable || "rejected" === thenable;
		  }
		  function noop$1() {}
		  function trackUsedThenable(thenableState, thenable, index) {
		    index = thenableState[index];
		    void 0 === index
		      ? thenableState.push(thenable)
		      : index !== thenable &&
		        (thenable.then(noop$1, noop$1), (thenable = index));
		    switch (thenable.status) {
		      case "fulfilled":
		        return thenable.value;
		      case "rejected":
		        thenableState = thenable.reason;
		        if (thenableState === SuspenseException)
		          throw Error(formatProdErrorMessage(483));
		        throw thenableState;
		      default:
		        if ("string" === typeof thenable.status) thenable.then(noop$1, noop$1);
		        else {
		          thenableState = workInProgressRoot;
		          if (null !== thenableState && 100 < thenableState.shellSuspendCounter)
		            throw Error(formatProdErrorMessage(482));
		          thenableState = thenable;
		          thenableState.status = "pending";
		          thenableState.then(
		            function (fulfilledValue) {
		              if ("pending" === thenable.status) {
		                var fulfilledThenable = thenable;
		                fulfilledThenable.status = "fulfilled";
		                fulfilledThenable.value = fulfilledValue;
		              }
		            },
		            function (error) {
		              if ("pending" === thenable.status) {
		                var rejectedThenable = thenable;
		                rejectedThenable.status = "rejected";
		                rejectedThenable.reason = error;
		              }
		            }
		          );
		        }
		        switch (thenable.status) {
		          case "fulfilled":
		            return thenable.value;
		          case "rejected":
		            thenableState = thenable.reason;
		            if (thenableState === SuspenseException)
		              throw Error(formatProdErrorMessage(483));
		            throw thenableState;
		        }
		        suspendedThenable = thenable;
		        throw SuspenseException;
		    }
		  }
		  function getSuspendedThenable() {
		    if (null === suspendedThenable) throw Error(formatProdErrorMessage(459));
		    var thenable = suspendedThenable;
		    suspendedThenable = null;
		    return thenable;
		  }
		  function unwrapThenable(thenable) {
		    var index = thenableIndexCounter$1;
		    thenableIndexCounter$1 += 1;
		    null === thenableState$1 && (thenableState$1 = []);
		    return trackUsedThenable(thenableState$1, thenable, index);
		  }
		  function coerceRef(workInProgress, element) {
		    element = element.props.ref;
		    workInProgress.ref = void 0 !== element ? element : null;
		  }
		  function throwOnInvalidObjectType(returnFiber, newChild) {
		    if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE)
		      throw Error(formatProdErrorMessage(525));
		    returnFiber = Object.prototype.toString.call(newChild);
		    throw Error(
		      formatProdErrorMessage(
		        31,
		        "[object Object]" === returnFiber
		          ? "object with keys {" + Object.keys(newChild).join(", ") + "}"
		          : returnFiber
		      )
		    );
		  }
		  function resolveLazy(lazyType) {
		    var init = lazyType._init;
		    return init(lazyType._payload);
		  }
		  function createChildReconciler(shouldTrackSideEffects) {
		    function deleteChild(returnFiber, childToDelete) {
		      if (shouldTrackSideEffects) {
		        var deletions = returnFiber.deletions;
		        null === deletions
		          ? ((returnFiber.deletions = [childToDelete]),
		            (returnFiber.flags |= 16))
		          : deletions.push(childToDelete);
		      }
		    }
		    function deleteRemainingChildren(returnFiber, currentFirstChild) {
		      if (!shouldTrackSideEffects) return null;
		      for (; null !== currentFirstChild; )
		        deleteChild(returnFiber, currentFirstChild),
		          (currentFirstChild = currentFirstChild.sibling);
		      return null;
		    }
		    function mapRemainingChildren(currentFirstChild) {
		      for (var existingChildren = new Map(); null !== currentFirstChild; )
		        null !== currentFirstChild.key
		          ? existingChildren.set(currentFirstChild.key, currentFirstChild)
		          : existingChildren.set(currentFirstChild.index, currentFirstChild),
		          (currentFirstChild = currentFirstChild.sibling);
		      return existingChildren;
		    }
		    function useFiber(fiber, pendingProps) {
		      fiber = createWorkInProgress(fiber, pendingProps);
		      fiber.index = 0;
		      fiber.sibling = null;
		      return fiber;
		    }
		    function placeChild(newFiber, lastPlacedIndex, newIndex) {
		      newFiber.index = newIndex;
		      if (!shouldTrackSideEffects)
		        return (newFiber.flags |= 1048576), lastPlacedIndex;
		      newIndex = newFiber.alternate;
		      if (null !== newIndex)
		        return (
		          (newIndex = newIndex.index),
		          newIndex < lastPlacedIndex
		            ? ((newFiber.flags |= 33554434), lastPlacedIndex)
		            : newIndex
		        );
		      newFiber.flags |= 33554434;
		      return lastPlacedIndex;
		    }
		    function placeSingleChild(newFiber) {
		      shouldTrackSideEffects &&
		        null === newFiber.alternate &&
		        (newFiber.flags |= 33554434);
		      return newFiber;
		    }
		    function updateTextNode(returnFiber, current, textContent, lanes) {
		      if (null === current || 6 !== current.tag)
		        return (
		          (current = createFiberFromText(textContent, returnFiber.mode, lanes)),
		          (current.return = returnFiber),
		          current
		        );
		      current = useFiber(current, textContent);
		      current.return = returnFiber;
		      return current;
		    }
		    function updateElement(returnFiber, current, element, lanes) {
		      var elementType = element.type;
		      if (elementType === REACT_FRAGMENT_TYPE)
		        return updateFragment(
		          returnFiber,
		          current,
		          element.props.children,
		          lanes,
		          element.key
		        );
		      if (
		        null !== current &&
		        (current.elementType === elementType ||
		          ("object" === typeof elementType &&
		            null !== elementType &&
		            elementType.$$typeof === REACT_LAZY_TYPE &&
		            resolveLazy(elementType) === current.type))
		      )
		        return (
		          (current = useFiber(current, element.props)),
		          coerceRef(current, element),
		          (current.return = returnFiber),
		          current
		        );
		      current = createFiberFromTypeAndProps(
		        element.type,
		        element.key,
		        element.props,
		        null,
		        returnFiber.mode,
		        lanes
		      );
		      coerceRef(current, element);
		      current.return = returnFiber;
		      return current;
		    }
		    function updatePortal(returnFiber, current, portal, lanes) {
		      if (
		        null === current ||
		        4 !== current.tag ||
		        current.stateNode.containerInfo !== portal.containerInfo ||
		        current.stateNode.implementation !== portal.implementation
		      )
		        return (
		          (current = createFiberFromPortal(portal, returnFiber.mode, lanes)),
		          (current.return = returnFiber),
		          current
		        );
		      current = useFiber(current, portal.children || []);
		      current.return = returnFiber;
		      return current;
		    }
		    function updateFragment(returnFiber, current, fragment, lanes, key) {
		      if (null === current || 7 !== current.tag)
		        return (
		          (current = createFiberFromFragment(
		            fragment,
		            returnFiber.mode,
		            lanes,
		            key
		          )),
		          (current.return = returnFiber),
		          current
		        );
		      current = useFiber(current, fragment);
		      current.return = returnFiber;
		      return current;
		    }
		    function createChild(returnFiber, newChild, lanes) {
		      if (
		        ("string" === typeof newChild && "" !== newChild) ||
		        "number" === typeof newChild ||
		        "bigint" === typeof newChild
		      )
		        return (
		          (newChild = createFiberFromText(
		            "" + newChild,
		            returnFiber.mode,
		            lanes
		          )),
		          (newChild.return = returnFiber),
		          newChild
		        );
		      if ("object" === typeof newChild && null !== newChild) {
		        switch (newChild.$$typeof) {
		          case REACT_ELEMENT_TYPE:
		            return (
		              (lanes = createFiberFromTypeAndProps(
		                newChild.type,
		                newChild.key,
		                newChild.props,
		                null,
		                returnFiber.mode,
		                lanes
		              )),
		              coerceRef(lanes, newChild),
		              (lanes.return = returnFiber),
		              lanes
		            );
		          case REACT_PORTAL_TYPE:
		            return (
		              (newChild = createFiberFromPortal(
		                newChild,
		                returnFiber.mode,
		                lanes
		              )),
		              (newChild.return = returnFiber),
		              newChild
		            );
		          case REACT_LAZY_TYPE:
		            var init = newChild._init;
		            newChild = init(newChild._payload);
		            return createChild(returnFiber, newChild, lanes);
		        }
		        if (isArrayImpl(newChild) || getIteratorFn(newChild))
		          return (
		            (newChild = createFiberFromFragment(
		              newChild,
		              returnFiber.mode,
		              lanes,
		              null
		            )),
		            (newChild.return = returnFiber),
		            newChild
		          );
		        if ("function" === typeof newChild.then)
		          return createChild(returnFiber, unwrapThenable(newChild), lanes);
		        if (newChild.$$typeof === REACT_CONTEXT_TYPE)
		          return createChild(
		            returnFiber,
		            readContextDuringReconciliation(returnFiber, newChild),
		            lanes
		          );
		        throwOnInvalidObjectType(returnFiber, newChild);
		      }
		      return null;
		    }
		    function updateSlot(returnFiber, oldFiber, newChild, lanes) {
		      var key = null !== oldFiber ? oldFiber.key : null;
		      if (
		        ("string" === typeof newChild && "" !== newChild) ||
		        "number" === typeof newChild ||
		        "bigint" === typeof newChild
		      )
		        return null !== key
		          ? null
		          : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
		      if ("object" === typeof newChild && null !== newChild) {
		        switch (newChild.$$typeof) {
		          case REACT_ELEMENT_TYPE:
		            return newChild.key === key
		              ? updateElement(returnFiber, oldFiber, newChild, lanes)
		              : null;
		          case REACT_PORTAL_TYPE:
		            return newChild.key === key
		              ? updatePortal(returnFiber, oldFiber, newChild, lanes)
		              : null;
		          case REACT_LAZY_TYPE:
		            return (
		              (key = newChild._init),
		              (newChild = key(newChild._payload)),
		              updateSlot(returnFiber, oldFiber, newChild, lanes)
		            );
		        }
		        if (isArrayImpl(newChild) || getIteratorFn(newChild))
		          return null !== key
		            ? null
		            : updateFragment(returnFiber, oldFiber, newChild, lanes, null);
		        if ("function" === typeof newChild.then)
		          return updateSlot(
		            returnFiber,
		            oldFiber,
		            unwrapThenable(newChild),
		            lanes
		          );
		        if (newChild.$$typeof === REACT_CONTEXT_TYPE)
		          return updateSlot(
		            returnFiber,
		            oldFiber,
		            readContextDuringReconciliation(returnFiber, newChild),
		            lanes
		          );
		        throwOnInvalidObjectType(returnFiber, newChild);
		      }
		      return null;
		    }
		    function updateFromMap(
		      existingChildren,
		      returnFiber,
		      newIdx,
		      newChild,
		      lanes
		    ) {
		      if (
		        ("string" === typeof newChild && "" !== newChild) ||
		        "number" === typeof newChild ||
		        "bigint" === typeof newChild
		      )
		        return (
		          (existingChildren = existingChildren.get(newIdx) || null),
		          updateTextNode(returnFiber, existingChildren, "" + newChild, lanes)
		        );
		      if ("object" === typeof newChild && null !== newChild) {
		        switch (newChild.$$typeof) {
		          case REACT_ELEMENT_TYPE:
		            return (
		              (existingChildren =
		                existingChildren.get(
		                  null === newChild.key ? newIdx : newChild.key
		                ) || null),
		              updateElement(returnFiber, existingChildren, newChild, lanes)
		            );
		          case REACT_PORTAL_TYPE:
		            return (
		              (existingChildren =
		                existingChildren.get(
		                  null === newChild.key ? newIdx : newChild.key
		                ) || null),
		              updatePortal(returnFiber, existingChildren, newChild, lanes)
		            );
		          case REACT_LAZY_TYPE:
		            var init = newChild._init;
		            newChild = init(newChild._payload);
		            return updateFromMap(
		              existingChildren,
		              returnFiber,
		              newIdx,
		              newChild,
		              lanes
		            );
		        }
		        if (isArrayImpl(newChild) || getIteratorFn(newChild))
		          return (
		            (existingChildren = existingChildren.get(newIdx) || null),
		            updateFragment(returnFiber, existingChildren, newChild, lanes, null)
		          );
		        if ("function" === typeof newChild.then)
		          return updateFromMap(
		            existingChildren,
		            returnFiber,
		            newIdx,
		            unwrapThenable(newChild),
		            lanes
		          );
		        if (newChild.$$typeof === REACT_CONTEXT_TYPE)
		          return updateFromMap(
		            existingChildren,
		            returnFiber,
		            newIdx,
		            readContextDuringReconciliation(returnFiber, newChild),
		            lanes
		          );
		        throwOnInvalidObjectType(returnFiber, newChild);
		      }
		      return null;
		    }
		    function reconcileChildrenArray(
		      returnFiber,
		      currentFirstChild,
		      newChildren,
		      lanes
		    ) {
		      for (
		        var resultingFirstChild = null,
		          previousNewFiber = null,
		          oldFiber = currentFirstChild,
		          newIdx = (currentFirstChild = 0),
		          nextOldFiber = null;
		        null !== oldFiber && newIdx < newChildren.length;
		        newIdx++
		      ) {
		        oldFiber.index > newIdx
		          ? ((nextOldFiber = oldFiber), (oldFiber = null))
		          : (nextOldFiber = oldFiber.sibling);
		        var newFiber = updateSlot(
		          returnFiber,
		          oldFiber,
		          newChildren[newIdx],
		          lanes
		        );
		        if (null === newFiber) {
		          null === oldFiber && (oldFiber = nextOldFiber);
		          break;
		        }
		        shouldTrackSideEffects &&
		          oldFiber &&
		          null === newFiber.alternate &&
		          deleteChild(returnFiber, oldFiber);
		        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
		        null === previousNewFiber
		          ? (resultingFirstChild = newFiber)
		          : (previousNewFiber.sibling = newFiber);
		        previousNewFiber = newFiber;
		        oldFiber = nextOldFiber;
		      }
		      if (newIdx === newChildren.length)
		        return (
		          deleteRemainingChildren(returnFiber, oldFiber),
		          isHydrating && pushTreeFork(returnFiber, newIdx),
		          resultingFirstChild
		        );
		      if (null === oldFiber) {
		        for (; newIdx < newChildren.length; newIdx++)
		          (oldFiber = createChild(returnFiber, newChildren[newIdx], lanes)),
		            null !== oldFiber &&
		              ((currentFirstChild = placeChild(
		                oldFiber,
		                currentFirstChild,
		                newIdx
		              )),
		              null === previousNewFiber
		                ? (resultingFirstChild = oldFiber)
		                : (previousNewFiber.sibling = oldFiber),
		              (previousNewFiber = oldFiber));
		        isHydrating && pushTreeFork(returnFiber, newIdx);
		        return resultingFirstChild;
		      }
		      for (
		        oldFiber = mapRemainingChildren(oldFiber);
		        newIdx < newChildren.length;
		        newIdx++
		      )
		        (nextOldFiber = updateFromMap(
		          oldFiber,
		          returnFiber,
		          newIdx,
		          newChildren[newIdx],
		          lanes
		        )),
		          null !== nextOldFiber &&
		            (shouldTrackSideEffects &&
		              null !== nextOldFiber.alternate &&
		              oldFiber.delete(
		                null === nextOldFiber.key ? newIdx : nextOldFiber.key
		              ),
		            (currentFirstChild = placeChild(
		              nextOldFiber,
		              currentFirstChild,
		              newIdx
		            )),
		            null === previousNewFiber
		              ? (resultingFirstChild = nextOldFiber)
		              : (previousNewFiber.sibling = nextOldFiber),
		            (previousNewFiber = nextOldFiber));
		      shouldTrackSideEffects &&
		        oldFiber.forEach(function (child) {
		          return deleteChild(returnFiber, child);
		        });
		      isHydrating && pushTreeFork(returnFiber, newIdx);
		      return resultingFirstChild;
		    }
		    function reconcileChildrenIterator(
		      returnFiber,
		      currentFirstChild,
		      newChildren,
		      lanes
		    ) {
		      if (null == newChildren) throw Error(formatProdErrorMessage(151));
		      for (
		        var resultingFirstChild = null,
		          previousNewFiber = null,
		          oldFiber = currentFirstChild,
		          newIdx = (currentFirstChild = 0),
		          nextOldFiber = null,
		          step = newChildren.next();
		        null !== oldFiber && !step.done;
		        newIdx++, step = newChildren.next()
		      ) {
		        oldFiber.index > newIdx
		          ? ((nextOldFiber = oldFiber), (oldFiber = null))
		          : (nextOldFiber = oldFiber.sibling);
		        var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
		        if (null === newFiber) {
		          null === oldFiber && (oldFiber = nextOldFiber);
		          break;
		        }
		        shouldTrackSideEffects &&
		          oldFiber &&
		          null === newFiber.alternate &&
		          deleteChild(returnFiber, oldFiber);
		        currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
		        null === previousNewFiber
		          ? (resultingFirstChild = newFiber)
		          : (previousNewFiber.sibling = newFiber);
		        previousNewFiber = newFiber;
		        oldFiber = nextOldFiber;
		      }
		      if (step.done)
		        return (
		          deleteRemainingChildren(returnFiber, oldFiber),
		          isHydrating && pushTreeFork(returnFiber, newIdx),
		          resultingFirstChild
		        );
		      if (null === oldFiber) {
		        for (; !step.done; newIdx++, step = newChildren.next())
		          (step = createChild(returnFiber, step.value, lanes)),
		            null !== step &&
		              ((currentFirstChild = placeChild(
		                step,
		                currentFirstChild,
		                newIdx
		              )),
		              null === previousNewFiber
		                ? (resultingFirstChild = step)
		                : (previousNewFiber.sibling = step),
		              (previousNewFiber = step));
		        isHydrating && pushTreeFork(returnFiber, newIdx);
		        return resultingFirstChild;
		      }
		      for (
		        oldFiber = mapRemainingChildren(oldFiber);
		        !step.done;
		        newIdx++, step = newChildren.next()
		      )
		        (step = updateFromMap(
		          oldFiber,
		          returnFiber,
		          newIdx,
		          step.value,
		          lanes
		        )),
		          null !== step &&
		            (shouldTrackSideEffects &&
		              null !== step.alternate &&
		              oldFiber.delete(null === step.key ? newIdx : step.key),
		            (currentFirstChild = placeChild(step, currentFirstChild, newIdx)),
		            null === previousNewFiber
		              ? (resultingFirstChild = step)
		              : (previousNewFiber.sibling = step),
		            (previousNewFiber = step));
		      shouldTrackSideEffects &&
		        oldFiber.forEach(function (child) {
		          return deleteChild(returnFiber, child);
		        });
		      isHydrating && pushTreeFork(returnFiber, newIdx);
		      return resultingFirstChild;
		    }
		    function reconcileChildFibersImpl(
		      returnFiber,
		      currentFirstChild,
		      newChild,
		      lanes
		    ) {
		      "object" === typeof newChild &&
		        null !== newChild &&
		        newChild.type === REACT_FRAGMENT_TYPE &&
		        null === newChild.key &&
		        (newChild = newChild.props.children);
		      if ("object" === typeof newChild && null !== newChild) {
		        switch (newChild.$$typeof) {
		          case REACT_ELEMENT_TYPE:
		            a: {
		              for (var key = newChild.key; null !== currentFirstChild; ) {
		                if (currentFirstChild.key === key) {
		                  key = newChild.type;
		                  if (key === REACT_FRAGMENT_TYPE) {
		                    if (7 === currentFirstChild.tag) {
		                      deleteRemainingChildren(
		                        returnFiber,
		                        currentFirstChild.sibling
		                      );
		                      lanes = useFiber(
		                        currentFirstChild,
		                        newChild.props.children
		                      );
		                      lanes.return = returnFiber;
		                      returnFiber = lanes;
		                      break a;
		                    }
		                  } else if (
		                    currentFirstChild.elementType === key ||
		                    ("object" === typeof key &&
		                      null !== key &&
		                      key.$$typeof === REACT_LAZY_TYPE &&
		                      resolveLazy(key) === currentFirstChild.type)
		                  ) {
		                    deleteRemainingChildren(
		                      returnFiber,
		                      currentFirstChild.sibling
		                    );
		                    lanes = useFiber(currentFirstChild, newChild.props);
		                    coerceRef(lanes, newChild);
		                    lanes.return = returnFiber;
		                    returnFiber = lanes;
		                    break a;
		                  }
		                  deleteRemainingChildren(returnFiber, currentFirstChild);
		                  break;
		                } else deleteChild(returnFiber, currentFirstChild);
		                currentFirstChild = currentFirstChild.sibling;
		              }
		              newChild.type === REACT_FRAGMENT_TYPE
		                ? ((lanes = createFiberFromFragment(
		                    newChild.props.children,
		                    returnFiber.mode,
		                    lanes,
		                    newChild.key
		                  )),
		                  (lanes.return = returnFiber),
		                  (returnFiber = lanes))
		                : ((lanes = createFiberFromTypeAndProps(
		                    newChild.type,
		                    newChild.key,
		                    newChild.props,
		                    null,
		                    returnFiber.mode,
		                    lanes
		                  )),
		                  coerceRef(lanes, newChild),
		                  (lanes.return = returnFiber),
		                  (returnFiber = lanes));
		            }
		            return placeSingleChild(returnFiber);
		          case REACT_PORTAL_TYPE:
		            a: {
		              for (key = newChild.key; null !== currentFirstChild; ) {
		                if (currentFirstChild.key === key)
		                  if (
		                    4 === currentFirstChild.tag &&
		                    currentFirstChild.stateNode.containerInfo ===
		                      newChild.containerInfo &&
		                    currentFirstChild.stateNode.implementation ===
		                      newChild.implementation
		                  ) {
		                    deleteRemainingChildren(
		                      returnFiber,
		                      currentFirstChild.sibling
		                    );
		                    lanes = useFiber(
		                      currentFirstChild,
		                      newChild.children || []
		                    );
		                    lanes.return = returnFiber;
		                    returnFiber = lanes;
		                    break a;
		                  } else {
		                    deleteRemainingChildren(returnFiber, currentFirstChild);
		                    break;
		                  }
		                else deleteChild(returnFiber, currentFirstChild);
		                currentFirstChild = currentFirstChild.sibling;
		              }
		              lanes = createFiberFromPortal(newChild, returnFiber.mode, lanes);
		              lanes.return = returnFiber;
		              returnFiber = lanes;
		            }
		            return placeSingleChild(returnFiber);
		          case REACT_LAZY_TYPE:
		            return (
		              (key = newChild._init),
		              (newChild = key(newChild._payload)),
		              reconcileChildFibersImpl(
		                returnFiber,
		                currentFirstChild,
		                newChild,
		                lanes
		              )
		            );
		        }
		        if (isArrayImpl(newChild))
		          return reconcileChildrenArray(
		            returnFiber,
		            currentFirstChild,
		            newChild,
		            lanes
		          );
		        if (getIteratorFn(newChild)) {
		          key = getIteratorFn(newChild);
		          if ("function" !== typeof key)
		            throw Error(formatProdErrorMessage(150));
		          newChild = key.call(newChild);
		          return reconcileChildrenIterator(
		            returnFiber,
		            currentFirstChild,
		            newChild,
		            lanes
		          );
		        }
		        if ("function" === typeof newChild.then)
		          return reconcileChildFibersImpl(
		            returnFiber,
		            currentFirstChild,
		            unwrapThenable(newChild),
		            lanes
		          );
		        if (newChild.$$typeof === REACT_CONTEXT_TYPE)
		          return reconcileChildFibersImpl(
		            returnFiber,
		            currentFirstChild,
		            readContextDuringReconciliation(returnFiber, newChild),
		            lanes
		          );
		        throwOnInvalidObjectType(returnFiber, newChild);
		      }
		      return ("string" === typeof newChild && "" !== newChild) ||
		        "number" === typeof newChild ||
		        "bigint" === typeof newChild
		        ? ((newChild = "" + newChild),
		          null !== currentFirstChild && 6 === currentFirstChild.tag
		            ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling),
		              (lanes = useFiber(currentFirstChild, newChild)),
		              (lanes.return = returnFiber),
		              (returnFiber = lanes))
		            : (deleteRemainingChildren(returnFiber, currentFirstChild),
		              (lanes = createFiberFromText(newChild, returnFiber.mode, lanes)),
		              (lanes.return = returnFiber),
		              (returnFiber = lanes)),
		          placeSingleChild(returnFiber))
		        : deleteRemainingChildren(returnFiber, currentFirstChild);
		    }
		    return function (returnFiber, currentFirstChild, newChild, lanes) {
		      try {
		        thenableIndexCounter$1 = 0;
		        var firstChildFiber = reconcileChildFibersImpl(
		          returnFiber,
		          currentFirstChild,
		          newChild,
		          lanes
		        );
		        thenableState$1 = null;
		        return firstChildFiber;
		      } catch (x) {
		        if (x === SuspenseException) throw x;
		        var fiber = createFiber(29, x, null, returnFiber.mode);
		        fiber.lanes = lanes;
		        fiber.return = returnFiber;
		        return fiber;
		      } finally {
		      }
		    };
		  }
		  function pushHiddenContext(fiber, context) {
		    fiber = entangledRenderLanes;
		    push(prevEntangledRenderLanesCursor, fiber);
		    push(currentTreeHiddenStackCursor, context);
		    entangledRenderLanes = fiber | context.baseLanes;
		  }
		  function reuseHiddenContextOnStack() {
		    push(prevEntangledRenderLanesCursor, entangledRenderLanes);
		    push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current);
		  }
		  function popHiddenContext() {
		    entangledRenderLanes = prevEntangledRenderLanesCursor.current;
		    pop(currentTreeHiddenStackCursor);
		    pop(prevEntangledRenderLanesCursor);
		  }
		  function pushPrimaryTreeSuspenseHandler(handler) {
		    var current = handler.alternate;
		    push(suspenseStackCursor, suspenseStackCursor.current & 1);
		    push(suspenseHandlerStackCursor, handler);
		    null === shellBoundary &&
		      (null === current || null !== currentTreeHiddenStackCursor.current
		        ? (shellBoundary = handler)
		        : null !== current.memoizedState && (shellBoundary = handler));
		  }
		  function pushOffscreenSuspenseHandler(fiber) {
		    if (22 === fiber.tag) {
		      if (
		        (push(suspenseStackCursor, suspenseStackCursor.current),
		        push(suspenseHandlerStackCursor, fiber),
		        null === shellBoundary)
		      ) {
		        var current = fiber.alternate;
		        null !== current &&
		          null !== current.memoizedState &&
		          (shellBoundary = fiber);
		      }
		    } else reuseSuspenseHandlerOnStack();
		  }
		  function reuseSuspenseHandlerOnStack() {
		    push(suspenseStackCursor, suspenseStackCursor.current);
		    push(suspenseHandlerStackCursor, suspenseHandlerStackCursor.current);
		  }
		  function popSuspenseHandler(fiber) {
		    pop(suspenseHandlerStackCursor);
		    shellBoundary === fiber && (shellBoundary = null);
		    pop(suspenseStackCursor);
		  }
		  function findFirstSuspended(row) {
		    for (var node = row; null !== node; ) {
		      if (13 === node.tag) {
		        var state = node.memoizedState;
		        if (
		          null !== state &&
		          ((state = state.dehydrated),
		          null === state ||
		            isSuspenseInstancePending(state) ||
		            isSuspenseInstanceFallback(state))
		        )
		          return node;
		      } else if (19 === node.tag && void 0 !== node.memoizedProps.revealOrder) {
		        if (0 !== (node.flags & 128)) return node;
		      } else if (null !== node.child) {
		        node.child.return = node;
		        node = node.child;
		        continue;
		      }
		      if (node === row) break;
		      for (; null === node.sibling; ) {
		        if (null === node.return || node.return === row) return null;
		        node = node.return;
		      }
		      node.sibling.return = node.return;
		      node = node.sibling;
		    }
		    return null;
		  }
		  function throwInvalidHookError() {
		    throw Error(formatProdErrorMessage(321));
		  }
		  function areHookInputsEqual(nextDeps, prevDeps) {
		    if (null === prevDeps) return !1;
		    for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
		      if (!objectIs(nextDeps[i], prevDeps[i])) return !1;
		    return !0;
		  }
		  function renderWithHooks(
		    current,
		    workInProgress,
		    Component,
		    props,
		    secondArg,
		    nextRenderLanes
		  ) {
		    renderLanes = nextRenderLanes;
		    currentlyRenderingFiber$1 = workInProgress;
		    workInProgress.memoizedState = null;
		    workInProgress.updateQueue = null;
		    workInProgress.lanes = 0;
		    ReactSharedInternals.H =
		      null === current || null === current.memoizedState
		        ? HooksDispatcherOnMount
		        : HooksDispatcherOnUpdate;
		    shouldDoubleInvokeUserFnsInHooksDEV = !1;
		    nextRenderLanes = Component(props, secondArg);
		    shouldDoubleInvokeUserFnsInHooksDEV = !1;
		    didScheduleRenderPhaseUpdateDuringThisPass &&
		      (nextRenderLanes = renderWithHooksAgain(
		        workInProgress,
		        Component,
		        props,
		        secondArg
		      ));
		    finishRenderingHooks(current);
		    return nextRenderLanes;
		  }
		  function finishRenderingHooks(current) {
		    ReactSharedInternals.H = ContextOnlyDispatcher;
		    var didRenderTooFewHooks =
		      null !== currentHook && null !== currentHook.next;
		    renderLanes = 0;
		    workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
		    didScheduleRenderPhaseUpdate = !1;
		    thenableIndexCounter = 0;
		    thenableState = null;
		    if (didRenderTooFewHooks) throw Error(formatProdErrorMessage(300));
		    null === current ||
		      didReceiveUpdate ||
		      ((current = current.dependencies),
		      null !== current &&
		        checkIfContextChanged(current) &&
		        (didReceiveUpdate = !0));
		  }
		  function renderWithHooksAgain(workInProgress, Component, props, secondArg) {
		    currentlyRenderingFiber$1 = workInProgress;
		    var numberOfReRenders = 0;
		    do {
		      didScheduleRenderPhaseUpdateDuringThisPass && (thenableState = null);
		      thenableIndexCounter = 0;
		      didScheduleRenderPhaseUpdateDuringThisPass = !1;
		      if (25 <= numberOfReRenders) throw Error(formatProdErrorMessage(301));
		      numberOfReRenders += 1;
		      workInProgressHook = currentHook = null;
		      if (null != workInProgress.updateQueue) {
		        var children = workInProgress.updateQueue;
		        children.lastEffect = null;
		        children.events = null;
		        children.stores = null;
		        null != children.memoCache && (children.memoCache.index = 0);
		      }
		      ReactSharedInternals.H = HooksDispatcherOnRerender;
		      children = Component(props, secondArg);
		    } while (didScheduleRenderPhaseUpdateDuringThisPass);
		    return children;
		  }
		  function TransitionAwareHostComponent() {
		    var dispatcher = ReactSharedInternals.H,
		      maybeThenable = dispatcher.useState()[0];
		    maybeThenable =
		      "function" === typeof maybeThenable.then
		        ? useThenable(maybeThenable)
		        : maybeThenable;
		    dispatcher = dispatcher.useState()[0];
		    (null !== currentHook ? currentHook.memoizedState : null) !== dispatcher &&
		      (currentlyRenderingFiber$1.flags |= 1024);
		    return maybeThenable;
		  }
		  function checkDidRenderIdHook() {
		    var didRenderIdHook = 0 !== localIdCounter;
		    localIdCounter = 0;
		    return didRenderIdHook;
		  }
		  function bailoutHooks(current, workInProgress, lanes) {
		    workInProgress.updateQueue = current.updateQueue;
		    workInProgress.flags &= -2053;
		    current.lanes &= ~lanes;
		  }
		  function resetHooksOnUnwind(workInProgress) {
		    if (didScheduleRenderPhaseUpdate) {
		      for (
		        workInProgress = workInProgress.memoizedState;
		        null !== workInProgress;

		      ) {
		        var queue = workInProgress.queue;
		        null !== queue && (queue.pending = null);
		        workInProgress = workInProgress.next;
		      }
		      didScheduleRenderPhaseUpdate = !1;
		    }
		    renderLanes = 0;
		    workInProgressHook = currentHook = currentlyRenderingFiber$1 = null;
		    didScheduleRenderPhaseUpdateDuringThisPass = !1;
		    thenableIndexCounter = localIdCounter = 0;
		    thenableState = null;
		  }
		  function mountWorkInProgressHook() {
		    var hook = {
		      memoizedState: null,
		      baseState: null,
		      baseQueue: null,
		      queue: null,
		      next: null
		    };
		    null === workInProgressHook
		      ? (currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook)
		      : (workInProgressHook = workInProgressHook.next = hook);
		    return workInProgressHook;
		  }
		  function updateWorkInProgressHook() {
		    if (null === currentHook) {
		      var nextCurrentHook = currentlyRenderingFiber$1.alternate;
		      nextCurrentHook =
		        null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
		    } else nextCurrentHook = currentHook.next;
		    var nextWorkInProgressHook =
		      null === workInProgressHook
		        ? currentlyRenderingFiber$1.memoizedState
		        : workInProgressHook.next;
		    if (null !== nextWorkInProgressHook)
		      (workInProgressHook = nextWorkInProgressHook),
		        (currentHook = nextCurrentHook);
		    else {
		      if (null === nextCurrentHook) {
		        if (null === currentlyRenderingFiber$1.alternate)
		          throw Error(formatProdErrorMessage(467));
		        throw Error(formatProdErrorMessage(310));
		      }
		      currentHook = nextCurrentHook;
		      nextCurrentHook = {
		        memoizedState: currentHook.memoizedState,
		        baseState: currentHook.baseState,
		        baseQueue: currentHook.baseQueue,
		        queue: currentHook.queue,
		        next: null
		      };
		      null === workInProgressHook
		        ? (currentlyRenderingFiber$1.memoizedState = workInProgressHook =
		            nextCurrentHook)
		        : (workInProgressHook = workInProgressHook.next = nextCurrentHook);
		    }
		    return workInProgressHook;
		  }
		  function useThenable(thenable) {
		    var index = thenableIndexCounter;
		    thenableIndexCounter += 1;
		    null === thenableState && (thenableState = []);
		    thenable = trackUsedThenable(thenableState, thenable, index);
		    index = currentlyRenderingFiber$1;
		    null ===
		      (null === workInProgressHook
		        ? index.memoizedState
		        : workInProgressHook.next) &&
		      ((index = index.alternate),
		      (ReactSharedInternals.H =
		        null === index || null === index.memoizedState
		          ? HooksDispatcherOnMount
		          : HooksDispatcherOnUpdate));
		    return thenable;
		  }
		  function use(usable) {
		    if (null !== usable && "object" === typeof usable) {
		      if ("function" === typeof usable.then) return useThenable(usable);
		      if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
		    }
		    throw Error(formatProdErrorMessage(438, String(usable)));
		  }
		  function useMemoCache(size) {
		    var memoCache = null,
		      updateQueue = currentlyRenderingFiber$1.updateQueue;
		    null !== updateQueue && (memoCache = updateQueue.memoCache);
		    if (null == memoCache) {
		      var current = currentlyRenderingFiber$1.alternate;
		      null !== current &&
		        ((current = current.updateQueue),
		        null !== current &&
		          ((current = current.memoCache),
		          null != current &&
		            (memoCache = {
		              data: current.data.map(function (array) {
		                return array.slice();
		              }),
		              index: 0
		            })));
		    }
		    null == memoCache && (memoCache = { data: [], index: 0 });
		    null === updateQueue &&
		      ((updateQueue = createFunctionComponentUpdateQueue()),
		      (currentlyRenderingFiber$1.updateQueue = updateQueue));
		    updateQueue.memoCache = memoCache;
		    updateQueue = memoCache.data[memoCache.index];
		    if (void 0 === updateQueue)
		      for (
		        updateQueue = memoCache.data[memoCache.index] = Array(size),
		          current = 0;
		        current < size;
		        current++
		      )
		        updateQueue[current] = REACT_MEMO_CACHE_SENTINEL;
		    memoCache.index++;
		    return updateQueue;
		  }
		  function basicStateReducer(state, action) {
		    return "function" === typeof action ? action(state) : action;
		  }
		  function updateReducer(reducer) {
		    var hook = updateWorkInProgressHook();
		    return updateReducerImpl(hook, currentHook, reducer);
		  }
		  function updateReducerImpl(hook, current, reducer) {
		    var queue = hook.queue;
		    if (null === queue) throw Error(formatProdErrorMessage(311));
		    queue.lastRenderedReducer = reducer;
		    var baseQueue = hook.baseQueue,
		      pendingQueue = queue.pending;
		    if (null !== pendingQueue) {
		      if (null !== baseQueue) {
		        var baseFirst = baseQueue.next;
		        baseQueue.next = pendingQueue.next;
		        pendingQueue.next = baseFirst;
		      }
		      current.baseQueue = baseQueue = pendingQueue;
		      queue.pending = null;
		    }
		    pendingQueue = hook.baseState;
		    if (null === baseQueue) hook.memoizedState = pendingQueue;
		    else {
		      current = baseQueue.next;
		      var newBaseQueueFirst = (baseFirst = null),
		        newBaseQueueLast = null,
		        update = current,
		        didReadFromEntangledAsyncAction$48 = !1;
		      do {
		        var updateLane = update.lane & -536870913;
		        if (
		          updateLane !== update.lane
		            ? (workInProgressRootRenderLanes & updateLane) === updateLane
		            : (renderLanes & updateLane) === updateLane
		        ) {
		          var revertLane = update.revertLane;
		          if (0 === revertLane)
		            null !== newBaseQueueLast &&
		              (newBaseQueueLast = newBaseQueueLast.next =
		                {
		                  lane: 0,
		                  revertLane: 0,
		                  action: update.action,
		                  hasEagerState: update.hasEagerState,
		                  eagerState: update.eagerState,
		                  next: null
		                }),
		              updateLane === currentEntangledLane &&
		                (didReadFromEntangledAsyncAction$48 = !0);
		          else if ((renderLanes & revertLane) === revertLane) {
		            update = update.next;
		            revertLane === currentEntangledLane &&
		              (didReadFromEntangledAsyncAction$48 = !0);
		            continue;
		          } else
		            (updateLane = {
		              lane: 0,
		              revertLane: update.revertLane,
		              action: update.action,
		              hasEagerState: update.hasEagerState,
		              eagerState: update.eagerState,
		              next: null
		            }),
		              null === newBaseQueueLast
		                ? ((newBaseQueueFirst = newBaseQueueLast = updateLane),
		                  (baseFirst = pendingQueue))
		                : (newBaseQueueLast = newBaseQueueLast.next = updateLane),
		              (currentlyRenderingFiber$1.lanes |= revertLane),
		              (workInProgressRootSkippedLanes |= revertLane);
		          updateLane = update.action;
		          shouldDoubleInvokeUserFnsInHooksDEV &&
		            reducer(pendingQueue, updateLane);
		          pendingQueue = update.hasEagerState
		            ? update.eagerState
		            : reducer(pendingQueue, updateLane);
		        } else
		          (revertLane = {
		            lane: updateLane,
		            revertLane: update.revertLane,
		            action: update.action,
		            hasEagerState: update.hasEagerState,
		            eagerState: update.eagerState,
		            next: null
		          }),
		            null === newBaseQueueLast
		              ? ((newBaseQueueFirst = newBaseQueueLast = revertLane),
		                (baseFirst = pendingQueue))
		              : (newBaseQueueLast = newBaseQueueLast.next = revertLane),
		            (currentlyRenderingFiber$1.lanes |= updateLane),
		            (workInProgressRootSkippedLanes |= updateLane);
		        update = update.next;
		      } while (null !== update && update !== current);
		      null === newBaseQueueLast
		        ? (baseFirst = pendingQueue)
		        : (newBaseQueueLast.next = newBaseQueueFirst);
		      if (
		        !objectIs(pendingQueue, hook.memoizedState) &&
		        ((didReceiveUpdate = !0),
		        didReadFromEntangledAsyncAction$48 &&
		          ((reducer = currentEntangledActionThenable), null !== reducer))
		      )
		        throw reducer;
		      hook.memoizedState = pendingQueue;
		      hook.baseState = baseFirst;
		      hook.baseQueue = newBaseQueueLast;
		      queue.lastRenderedState = pendingQueue;
		    }
		    null === baseQueue && (queue.lanes = 0);
		    return [hook.memoizedState, queue.dispatch];
		  }
		  function rerenderReducer(reducer) {
		    var hook = updateWorkInProgressHook(),
		      queue = hook.queue;
		    if (null === queue) throw Error(formatProdErrorMessage(311));
		    queue.lastRenderedReducer = reducer;
		    var dispatch = queue.dispatch,
		      lastRenderPhaseUpdate = queue.pending,
		      newState = hook.memoizedState;
		    if (null !== lastRenderPhaseUpdate) {
		      queue.pending = null;
		      var update = (lastRenderPhaseUpdate = lastRenderPhaseUpdate.next);
		      do (newState = reducer(newState, update.action)), (update = update.next);
		      while (update !== lastRenderPhaseUpdate);
		      objectIs(newState, hook.memoizedState) || (didReceiveUpdate = !0);
		      hook.memoizedState = newState;
		      null === hook.baseQueue && (hook.baseState = newState);
		      queue.lastRenderedState = newState;
		    }
		    return [newState, dispatch];
		  }
		  function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
		    var fiber = currentlyRenderingFiber$1,
		      hook = updateWorkInProgressHook(),
		      isHydrating$jscomp$0 = isHydrating;
		    if (isHydrating$jscomp$0) {
		      if (void 0 === getServerSnapshot)
		        throw Error(formatProdErrorMessage(407));
		      getServerSnapshot = getServerSnapshot();
		    } else getServerSnapshot = getSnapshot();
		    var snapshotChanged = !objectIs(
		      (currentHook || hook).memoizedState,
		      getServerSnapshot
		    );
		    snapshotChanged &&
		      ((hook.memoizedState = getServerSnapshot), (didReceiveUpdate = !0));
		    hook = hook.queue;
		    updateEffect(subscribeToStore.bind(null, fiber, hook, subscribe), [
		      subscribe
		    ]);
		    if (
		      hook.getSnapshot !== getSnapshot ||
		      snapshotChanged ||
		      (null !== workInProgressHook && workInProgressHook.memoizedState.tag & 1)
		    ) {
		      fiber.flags |= 2048;
		      pushEffect(
		        9,
		        updateStoreInstance.bind(
		          null,
		          fiber,
		          hook,
		          getServerSnapshot,
		          getSnapshot
		        ),
		        { destroy: void 0 },
		        null
		      );
		      if (null === workInProgressRoot) throw Error(formatProdErrorMessage(349));
		      isHydrating$jscomp$0 ||
		        0 !== (renderLanes & 60) ||
		        pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
		    }
		    return getServerSnapshot;
		  }
		  function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
		    fiber.flags |= 16384;
		    fiber = { getSnapshot: getSnapshot, value: renderedSnapshot };
		    getSnapshot = currentlyRenderingFiber$1.updateQueue;
		    null === getSnapshot
		      ? ((getSnapshot = createFunctionComponentUpdateQueue()),
		        (currentlyRenderingFiber$1.updateQueue = getSnapshot),
		        (getSnapshot.stores = [fiber]))
		      : ((renderedSnapshot = getSnapshot.stores),
		        null === renderedSnapshot
		          ? (getSnapshot.stores = [fiber])
		          : renderedSnapshot.push(fiber));
		  }
		  function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
		    inst.value = nextSnapshot;
		    inst.getSnapshot = getSnapshot;
		    checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
		  }
		  function subscribeToStore(fiber, inst, subscribe) {
		    return subscribe(function () {
		      checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
		    });
		  }
		  function checkIfSnapshotChanged(inst) {
		    var latestGetSnapshot = inst.getSnapshot;
		    inst = inst.value;
		    try {
		      var nextValue = latestGetSnapshot();
		      return !objectIs(inst, nextValue);
		    } catch (error) {
		      return !0;
		    }
		  }
		  function forceStoreRerender(fiber) {
		    var root = enqueueConcurrentRenderForLane(fiber, 2);
		    null !== root && scheduleUpdateOnFiber(root, fiber, 2);
		  }
		  function mountStateImpl(initialState) {
		    var hook = mountWorkInProgressHook();
		    if ("function" === typeof initialState) {
		      var initialStateInitializer = initialState;
		      initialState = initialStateInitializer();
		      if (shouldDoubleInvokeUserFnsInHooksDEV) {
		        setIsStrictModeForDevtools(!0);
		        try {
		          initialStateInitializer();
		        } finally {
		          setIsStrictModeForDevtools(!1);
		        }
		      }
		    }
		    hook.memoizedState = hook.baseState = initialState;
		    hook.queue = {
		      pending: null,
		      lanes: 0,
		      dispatch: null,
		      lastRenderedReducer: basicStateReducer,
		      lastRenderedState: initialState
		    };
		    return hook;
		  }
		  function updateOptimisticImpl(hook, current, passthrough, reducer) {
		    hook.baseState = passthrough;
		    return updateReducerImpl(
		      hook,
		      currentHook,
		      "function" === typeof reducer ? reducer : basicStateReducer
		    );
		  }
		  function dispatchActionState(
		    fiber,
		    actionQueue,
		    setPendingState,
		    setState,
		    payload
		  ) {
		    if (isRenderPhaseUpdate(fiber)) throw Error(formatProdErrorMessage(485));
		    fiber = actionQueue.action;
		    if (null !== fiber) {
		      var actionNode = {
		        payload: payload,
		        action: fiber,
		        next: null,
		        isTransition: !0,
		        status: "pending",
		        value: null,
		        reason: null,
		        listeners: [],
		        then: function (listener) {
		          actionNode.listeners.push(listener);
		        }
		      };
		      null !== ReactSharedInternals.T
		        ? setPendingState(!0)
		        : (actionNode.isTransition = !1);
		      setState(actionNode);
		      setPendingState = actionQueue.pending;
		      null === setPendingState
		        ? ((actionNode.next = actionQueue.pending = actionNode),
		          runActionStateAction(actionQueue, actionNode))
		        : ((actionNode.next = setPendingState.next),
		          (actionQueue.pending = setPendingState.next = actionNode));
		    }
		  }
		  function runActionStateAction(actionQueue, node) {
		    var action = node.action,
		      payload = node.payload,
		      prevState = actionQueue.state;
		    if (node.isTransition) {
		      var prevTransition = ReactSharedInternals.T,
		        currentTransition = {};
		      ReactSharedInternals.T = currentTransition;
		      try {
		        var returnValue = action(prevState, payload),
		          onStartTransitionFinish = ReactSharedInternals.S;
		        null !== onStartTransitionFinish &&
		          onStartTransitionFinish(currentTransition, returnValue);
		        handleActionReturnValue(actionQueue, node, returnValue);
		      } catch (error) {
		        onActionError(actionQueue, node, error);
		      } finally {
		        ReactSharedInternals.T = prevTransition;
		      }
		    } else
		      try {
		        (prevTransition = action(prevState, payload)),
		          handleActionReturnValue(actionQueue, node, prevTransition);
		      } catch (error$52) {
		        onActionError(actionQueue, node, error$52);
		      }
		  }
		  function handleActionReturnValue(actionQueue, node, returnValue) {
		    null !== returnValue &&
		    "object" === typeof returnValue &&
		    "function" === typeof returnValue.then
		      ? returnValue.then(
		          function (nextState) {
		            onActionSuccess(actionQueue, node, nextState);
		          },
		          function (error) {
		            return onActionError(actionQueue, node, error);
		          }
		        )
		      : onActionSuccess(actionQueue, node, returnValue);
		  }
		  function onActionSuccess(actionQueue, actionNode, nextState) {
		    actionNode.status = "fulfilled";
		    actionNode.value = nextState;
		    notifyActionListeners(actionNode);
		    actionQueue.state = nextState;
		    actionNode = actionQueue.pending;
		    null !== actionNode &&
		      ((nextState = actionNode.next),
		      nextState === actionNode
		        ? (actionQueue.pending = null)
		        : ((nextState = nextState.next),
		          (actionNode.next = nextState),
		          runActionStateAction(actionQueue, nextState)));
		  }
		  function onActionError(actionQueue, actionNode, error) {
		    var last = actionQueue.pending;
		    actionQueue.pending = null;
		    if (null !== last) {
		      last = last.next;
		      do
		        (actionNode.status = "rejected"),
		          (actionNode.reason = error),
		          notifyActionListeners(actionNode),
		          (actionNode = actionNode.next);
		      while (actionNode !== last);
		    }
		    actionQueue.action = null;
		  }
		  function notifyActionListeners(actionNode) {
		    actionNode = actionNode.listeners;
		    for (var i = 0; i < actionNode.length; i++) (0, actionNode[i])();
		  }
		  function actionStateReducer(oldState, newState) {
		    return newState;
		  }
		  function mountActionState(action, initialStateProp) {
		    if (isHydrating) {
		      var ssrFormState = workInProgressRoot.formState;
		      if (null !== ssrFormState) {
		        a: {
		          var JSCompiler_inline_result = currentlyRenderingFiber$1;
		          if (isHydrating) {
		            if (nextHydratableInstance) {
		              var markerInstance = canHydrateFormStateMarker(
		                nextHydratableInstance,
		                rootOrSingletonContext
		              );
		              if (markerInstance) {
		                nextHydratableInstance =
		                  getNextHydratableSibling(markerInstance);
		                JSCompiler_inline_result =
		                  isFormStateMarkerMatching(markerInstance);
		                break a;
		              }
		            }
		            throwOnHydrationMismatch(JSCompiler_inline_result);
		          }
		          JSCompiler_inline_result = !1;
		        }
		        JSCompiler_inline_result && (initialStateProp = ssrFormState[0]);
		      }
		    }
		    ssrFormState = mountWorkInProgressHook();
		    ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp;
		    JSCompiler_inline_result = {
		      pending: null,
		      lanes: 0,
		      dispatch: null,
		      lastRenderedReducer: actionStateReducer,
		      lastRenderedState: initialStateProp
		    };
		    ssrFormState.queue = JSCompiler_inline_result;
		    ssrFormState = dispatchSetState.bind(
		      null,
		      currentlyRenderingFiber$1,
		      JSCompiler_inline_result
		    );
		    JSCompiler_inline_result.dispatch = ssrFormState;
		    JSCompiler_inline_result = mountStateImpl(!1);
		    var setPendingState = dispatchOptimisticSetState.bind(
		      null,
		      currentlyRenderingFiber$1,
		      !1,
		      JSCompiler_inline_result.queue
		    );
		    JSCompiler_inline_result = mountWorkInProgressHook();
		    markerInstance = {
		      state: initialStateProp,
		      dispatch: null,
		      action: action,
		      pending: null
		    };
		    JSCompiler_inline_result.queue = markerInstance;
		    ssrFormState = dispatchActionState.bind(
		      null,
		      currentlyRenderingFiber$1,
		      markerInstance,
		      setPendingState,
		      ssrFormState
		    );
		    markerInstance.dispatch = ssrFormState;
		    JSCompiler_inline_result.memoizedState = action;
		    return [initialStateProp, ssrFormState, !1];
		  }
		  function updateActionState(action) {
		    var stateHook = updateWorkInProgressHook();
		    return updateActionStateImpl(stateHook, currentHook, action);
		  }
		  function updateActionStateImpl(stateHook, currentStateHook, action) {
		    currentStateHook = updateReducerImpl(
		      stateHook,
		      currentStateHook,
		      actionStateReducer
		    )[0];
		    stateHook = updateReducer(basicStateReducer)[0];
		    currentStateHook =
		      "object" === typeof currentStateHook &&
		      null !== currentStateHook &&
		      "function" === typeof currentStateHook.then
		        ? useThenable(currentStateHook)
		        : currentStateHook;
		    var actionQueueHook = updateWorkInProgressHook(),
		      actionQueue = actionQueueHook.queue,
		      dispatch = actionQueue.dispatch;
		    action !== actionQueueHook.memoizedState &&
		      ((currentlyRenderingFiber$1.flags |= 2048),
		      pushEffect(
		        9,
		        actionStateActionEffect.bind(null, actionQueue, action),
		        { destroy: void 0 },
		        null
		      ));
		    return [currentStateHook, dispatch, stateHook];
		  }
		  function actionStateActionEffect(actionQueue, action) {
		    actionQueue.action = action;
		  }
		  function rerenderActionState(action) {
		    var stateHook = updateWorkInProgressHook(),
		      currentStateHook = currentHook;
		    if (null !== currentStateHook)
		      return updateActionStateImpl(stateHook, currentStateHook, action);
		    updateWorkInProgressHook();
		    stateHook = stateHook.memoizedState;
		    currentStateHook = updateWorkInProgressHook();
		    var dispatch = currentStateHook.queue.dispatch;
		    currentStateHook.memoizedState = action;
		    return [stateHook, dispatch, !1];
		  }
		  function pushEffect(tag, create, inst, deps) {
		    tag = { tag: tag, create: create, inst: inst, deps: deps, next: null };
		    create = currentlyRenderingFiber$1.updateQueue;
		    null === create &&
		      ((create = createFunctionComponentUpdateQueue()),
		      (currentlyRenderingFiber$1.updateQueue = create));
		    inst = create.lastEffect;
		    null === inst
		      ? (create.lastEffect = tag.next = tag)
		      : ((deps = inst.next),
		        (inst.next = tag),
		        (tag.next = deps),
		        (create.lastEffect = tag));
		    return tag;
		  }
		  function updateRef() {
		    return updateWorkInProgressHook().memoizedState;
		  }
		  function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
		    var hook = mountWorkInProgressHook();
		    currentlyRenderingFiber$1.flags |= fiberFlags;
		    hook.memoizedState = pushEffect(
		      1 | hookFlags,
		      create,
		      { destroy: void 0 },
		      void 0 === deps ? null : deps
		    );
		  }
		  function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
		    var hook = updateWorkInProgressHook();
		    deps = void 0 === deps ? null : deps;
		    var inst = hook.memoizedState.inst;
		    null !== currentHook &&
		    null !== deps &&
		    areHookInputsEqual(deps, currentHook.memoizedState.deps)
		      ? (hook.memoizedState = pushEffect(hookFlags, create, inst, deps))
		      : ((currentlyRenderingFiber$1.flags |= fiberFlags),
		        (hook.memoizedState = pushEffect(1 | hookFlags, create, inst, deps)));
		  }
		  function mountEffect(create, deps) {
		    mountEffectImpl(8390656, 8, create, deps);
		  }
		  function updateEffect(create, deps) {
		    updateEffectImpl(2048, 8, create, deps);
		  }
		  function updateInsertionEffect(create, deps) {
		    return updateEffectImpl(4, 2, create, deps);
		  }
		  function updateLayoutEffect(create, deps) {
		    return updateEffectImpl(4, 4, create, deps);
		  }
		  function imperativeHandleEffect(create, ref) {
		    if ("function" === typeof ref) {
		      create = create();
		      var refCleanup = ref(create);
		      return function () {
		        "function" === typeof refCleanup ? refCleanup() : ref(null);
		      };
		    }
		    if (null !== ref && void 0 !== ref)
		      return (
		        (create = create()),
		        (ref.current = create),
		        function () {
		          ref.current = null;
		        }
		      );
		  }
		  function updateImperativeHandle(ref, create, deps) {
		    deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
		    updateEffectImpl(
		      4,
		      4,
		      imperativeHandleEffect.bind(null, create, ref),
		      deps
		    );
		  }
		  function mountDebugValue() {}
		  function updateCallback(callback, deps) {
		    var hook = updateWorkInProgressHook();
		    deps = void 0 === deps ? null : deps;
		    var prevState = hook.memoizedState;
		    if (null !== deps && areHookInputsEqual(deps, prevState[1]))
		      return prevState[0];
		    hook.memoizedState = [callback, deps];
		    return callback;
		  }
		  function updateMemo(nextCreate, deps) {
		    var hook = updateWorkInProgressHook();
		    deps = void 0 === deps ? null : deps;
		    var prevState = hook.memoizedState;
		    if (null !== deps && areHookInputsEqual(deps, prevState[1]))
		      return prevState[0];
		    prevState = nextCreate();
		    if (shouldDoubleInvokeUserFnsInHooksDEV) {
		      setIsStrictModeForDevtools(!0);
		      try {
		        nextCreate();
		      } finally {
		        setIsStrictModeForDevtools(!1);
		      }
		    }
		    hook.memoizedState = [prevState, deps];
		    return prevState;
		  }
		  function mountDeferredValueImpl(hook, value, initialValue) {
		    if (void 0 === initialValue || 0 !== (renderLanes & 1073741824))
		      return (hook.memoizedState = value);
		    hook.memoizedState = initialValue;
		    hook = requestDeferredLane();
		    currentlyRenderingFiber$1.lanes |= hook;
		    workInProgressRootSkippedLanes |= hook;
		    return initialValue;
		  }
		  function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
		    if (objectIs(value, prevValue)) return value;
		    if (null !== currentTreeHiddenStackCursor.current)
		      return (
		        (hook = mountDeferredValueImpl(hook, value, initialValue)),
		        objectIs(hook, prevValue) || (didReceiveUpdate = !0),
		        hook
		      );
		    if (0 === (renderLanes & 42))
		      return (didReceiveUpdate = !0), (hook.memoizedState = value);
		    hook = requestDeferredLane();
		    currentlyRenderingFiber$1.lanes |= hook;
		    workInProgressRootSkippedLanes |= hook;
		    return prevValue;
		  }
		  function startTransition(
		    fiber,
		    queue,
		    pendingState,
		    finishedState,
		    callback
		  ) {
		    var previousPriority = getCurrentUpdatePriority();
		    setCurrentUpdatePriority(
		      0 !== previousPriority && 8 > previousPriority ? previousPriority : 8
		    );
		    var prevTransition = ReactSharedInternals.T,
		      currentTransition = {};
		    ReactSharedInternals.T = currentTransition;
		    dispatchOptimisticSetState(fiber, !1, queue, pendingState);
		    try {
		      var returnValue = callback(),
		        onStartTransitionFinish = ReactSharedInternals.S;
		      null !== onStartTransitionFinish &&
		        onStartTransitionFinish(currentTransition, returnValue);
		      if (
		        null !== returnValue &&
		        "object" === typeof returnValue &&
		        "function" === typeof returnValue.then
		      ) {
		        var thenableForFinishedState = chainThenableValue(
		          returnValue,
		          finishedState
		        );
		        dispatchSetStateInternal(
		          fiber,
		          queue,
		          thenableForFinishedState,
		          requestUpdateLane(fiber)
		        );
		      } else
		        dispatchSetStateInternal(
		          fiber,
		          queue,
		          finishedState,
		          requestUpdateLane(fiber)
		        );
		    } catch (error) {
		      dispatchSetStateInternal(
		        fiber,
		        queue,
		        { then: function () {}, status: "rejected", reason: error },
		        requestUpdateLane()
		      );
		    } finally {
		      setCurrentUpdatePriority(previousPriority),
		        (ReactSharedInternals.T = prevTransition);
		    }
		  }
		  function ensureFormComponentIsStateful(formFiber) {
		    var existingStateHook = formFiber.memoizedState;
		    if (null !== existingStateHook) return existingStateHook;
		    existingStateHook = {
		      memoizedState: NotPendingTransition,
		      baseState: NotPendingTransition,
		      baseQueue: null,
		      queue: {
		        pending: null,
		        lanes: 0,
		        dispatch: null,
		        lastRenderedReducer: basicStateReducer,
		        lastRenderedState: NotPendingTransition
		      },
		      next: null
		    };
		    var initialResetState = {};
		    existingStateHook.next = {
		      memoizedState: initialResetState,
		      baseState: initialResetState,
		      baseQueue: null,
		      queue: {
		        pending: null,
		        lanes: 0,
		        dispatch: null,
		        lastRenderedReducer: basicStateReducer,
		        lastRenderedState: initialResetState
		      },
		      next: null
		    };
		    formFiber.memoizedState = existingStateHook;
		    formFiber = formFiber.alternate;
		    null !== formFiber && (formFiber.memoizedState = existingStateHook);
		    return existingStateHook;
		  }
		  function useHostTransitionStatus() {
		    return readContext(HostTransitionContext);
		  }
		  function updateId() {
		    return updateWorkInProgressHook().memoizedState;
		  }
		  function updateRefresh() {
		    return updateWorkInProgressHook().memoizedState;
		  }
		  function refreshCache(fiber) {
		    for (var provider = fiber.return; null !== provider; ) {
		      switch (provider.tag) {
		        case 24:
		        case 3:
		          var lane = requestUpdateLane();
		          fiber = createUpdate(lane);
		          var root = enqueueUpdate(provider, fiber, lane);
		          null !== root &&
		            (scheduleUpdateOnFiber(root, provider, lane),
		            entangleTransitions(root, provider, lane));
		          provider = { cache: createCache() };
		          fiber.payload = provider;
		          return;
		      }
		      provider = provider.return;
		    }
		  }
		  function dispatchReducerAction(fiber, queue, action) {
		    var lane = requestUpdateLane();
		    action = {
		      lane: lane,
		      revertLane: 0,
		      action: action,
		      hasEagerState: !1,
		      eagerState: null,
		      next: null
		    };
		    isRenderPhaseUpdate(fiber)
		      ? enqueueRenderPhaseUpdate(queue, action)
		      : ((action = enqueueConcurrentHookUpdate(fiber, queue, action, lane)),
		        null !== action &&
		          (scheduleUpdateOnFiber(action, fiber, lane),
		          entangleTransitionUpdate(action, queue, lane)));
		  }
		  function dispatchSetState(fiber, queue, action) {
		    var lane = requestUpdateLane();
		    dispatchSetStateInternal(fiber, queue, action, lane);
		  }
		  function dispatchSetStateInternal(fiber, queue, action, lane) {
		    var update = {
		      lane: lane,
		      revertLane: 0,
		      action: action,
		      hasEagerState: !1,
		      eagerState: null,
		      next: null
		    };
		    if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
		    else {
		      var alternate = fiber.alternate;
		      if (
		        0 === fiber.lanes &&
		        (null === alternate || 0 === alternate.lanes) &&
		        ((alternate = queue.lastRenderedReducer), null !== alternate)
		      )
		        try {
		          var currentState = queue.lastRenderedState,
		            eagerState = alternate(currentState, action);
		          update.hasEagerState = !0;
		          update.eagerState = eagerState;
		          if (objectIs(eagerState, currentState))
		            return (
		              enqueueUpdate$1(fiber, queue, update, 0),
		              null === workInProgressRoot && finishQueueingConcurrentUpdates(),
		              !1
		            );
		        } catch (error) {
		        } finally {
		        }
		      action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
		      if (null !== action)
		        return (
		          scheduleUpdateOnFiber(action, fiber, lane),
		          entangleTransitionUpdate(action, queue, lane),
		          !0
		        );
		    }
		    return !1;
		  }
		  function dispatchOptimisticSetState(
		    fiber,
		    throwIfDuringRender,
		    queue,
		    action
		  ) {
		    action = {
		      lane: 2,
		      revertLane: requestTransitionLane(),
		      action: action,
		      hasEagerState: !1,
		      eagerState: null,
		      next: null
		    };
		    if (isRenderPhaseUpdate(fiber)) {
		      if (throwIfDuringRender) throw Error(formatProdErrorMessage(479));
		    } else
		      (throwIfDuringRender = enqueueConcurrentHookUpdate(
		        fiber,
		        queue,
		        action,
		        2
		      )),
		        null !== throwIfDuringRender &&
		          scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
		  }
		  function isRenderPhaseUpdate(fiber) {
		    var alternate = fiber.alternate;
		    return (
		      fiber === currentlyRenderingFiber$1 ||
		      (null !== alternate && alternate === currentlyRenderingFiber$1)
		    );
		  }
		  function enqueueRenderPhaseUpdate(queue, update) {
		    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate =
		      !0;
		    var pending = queue.pending;
		    null === pending
		      ? (update.next = update)
		      : ((update.next = pending.next), (pending.next = update));
		    queue.pending = update;
		  }
		  function entangleTransitionUpdate(root, queue, lane) {
		    if (0 !== (lane & 4194176)) {
		      var queueLanes = queue.lanes;
		      queueLanes &= root.pendingLanes;
		      lane |= queueLanes;
		      queue.lanes = lane;
		      markRootEntangled(root, lane);
		    }
		  }
		  function applyDerivedStateFromProps(
		    workInProgress,
		    ctor,
		    getDerivedStateFromProps,
		    nextProps
		  ) {
		    ctor = workInProgress.memoizedState;
		    getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
		    getDerivedStateFromProps =
		      null === getDerivedStateFromProps || void 0 === getDerivedStateFromProps
		        ? ctor
		        : assign({}, ctor, getDerivedStateFromProps);
		    workInProgress.memoizedState = getDerivedStateFromProps;
		    0 === workInProgress.lanes &&
		      (workInProgress.updateQueue.baseState = getDerivedStateFromProps);
		  }
		  function checkShouldComponentUpdate(
		    workInProgress,
		    ctor,
		    oldProps,
		    newProps,
		    oldState,
		    newState,
		    nextContext
		  ) {
		    workInProgress = workInProgress.stateNode;
		    return "function" === typeof workInProgress.shouldComponentUpdate
		      ? workInProgress.shouldComponentUpdate(newProps, newState, nextContext)
		      : ctor.prototype && ctor.prototype.isPureReactComponent
		        ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)
		        : !0;
		  }
		  function callComponentWillReceiveProps(
		    workInProgress,
		    instance,
		    newProps,
		    nextContext
		  ) {
		    workInProgress = instance.state;
		    "function" === typeof instance.componentWillReceiveProps &&
		      instance.componentWillReceiveProps(newProps, nextContext);
		    "function" === typeof instance.UNSAFE_componentWillReceiveProps &&
		      instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
		    instance.state !== workInProgress &&
		      classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
		  }
		  function resolveClassComponentProps(Component, baseProps) {
		    var newProps = baseProps;
		    if ("ref" in baseProps) {
		      newProps = {};
		      for (var propName in baseProps)
		        "ref" !== propName && (newProps[propName] = baseProps[propName]);
		    }
		    if ((Component = Component.defaultProps)) {
		      newProps === baseProps && (newProps = assign({}, newProps));
		      for (var propName$54 in Component)
		        void 0 === newProps[propName$54] &&
		          (newProps[propName$54] = Component[propName$54]);
		    }
		    return newProps;
		  }
		  function logUncaughtError(root, errorInfo) {
		    try {
		      var onUncaughtError = root.onUncaughtError;
		      onUncaughtError(errorInfo.value, { componentStack: errorInfo.stack });
		    } catch (e) {
		      setTimeout(function () {
		        throw e;
		      });
		    }
		  }
		  function logCaughtError(root, boundary, errorInfo) {
		    try {
		      var onCaughtError = root.onCaughtError;
		      onCaughtError(errorInfo.value, {
		        componentStack: errorInfo.stack,
		        errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
		      });
		    } catch (e) {
		      setTimeout(function () {
		        throw e;
		      });
		    }
		  }
		  function createRootErrorUpdate(root, errorInfo, lane) {
		    lane = createUpdate(lane);
		    lane.tag = 3;
		    lane.payload = { element: null };
		    lane.callback = function () {
		      logUncaughtError(root, errorInfo);
		    };
		    return lane;
		  }
		  function createClassErrorUpdate(lane) {
		    lane = createUpdate(lane);
		    lane.tag = 3;
		    return lane;
		  }
		  function initializeClassErrorUpdate(update, root, fiber, errorInfo) {
		    var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
		    if ("function" === typeof getDerivedStateFromError) {
		      var error = errorInfo.value;
		      update.payload = function () {
		        return getDerivedStateFromError(error);
		      };
		      update.callback = function () {
		        logCaughtError(root, fiber, errorInfo);
		      };
		    }
		    var inst = fiber.stateNode;
		    null !== inst &&
		      "function" === typeof inst.componentDidCatch &&
		      (update.callback = function () {
		        logCaughtError(root, fiber, errorInfo);
		        "function" !== typeof getDerivedStateFromError &&
		          (null === legacyErrorBoundariesThatAlreadyFailed
		            ? (legacyErrorBoundariesThatAlreadyFailed = new Set([this]))
		            : legacyErrorBoundariesThatAlreadyFailed.add(this));
		        var stack = errorInfo.stack;
		        this.componentDidCatch(errorInfo.value, {
		          componentStack: null !== stack ? stack : ""
		        });
		      });
		  }
		  function throwException(
		    root,
		    returnFiber,
		    sourceFiber,
		    value,
		    rootRenderLanes
		  ) {
		    sourceFiber.flags |= 32768;
		    if (
		      null !== value &&
		      "object" === typeof value &&
		      "function" === typeof value.then
		    ) {
		      returnFiber = sourceFiber.alternate;
		      null !== returnFiber &&
		        propagateParentContextChanges(
		          returnFiber,
		          sourceFiber,
		          rootRenderLanes,
		          !0
		        );
		      sourceFiber = suspenseHandlerStackCursor.current;
		      if (null !== sourceFiber) {
		        switch (sourceFiber.tag) {
		          case 13:
		            return (
		              null === shellBoundary
		                ? renderDidSuspendDelayIfPossible()
		                : null === sourceFiber.alternate &&
		                  0 === workInProgressRootExitStatus &&
		                  (workInProgressRootExitStatus = 3),
		              (sourceFiber.flags &= -257),
		              (sourceFiber.flags |= 65536),
		              (sourceFiber.lanes = rootRenderLanes),
		              value === noopSuspenseyCommitThenable
		                ? (sourceFiber.flags |= 16384)
		                : ((returnFiber = sourceFiber.updateQueue),
		                  null === returnFiber
		                    ? (sourceFiber.updateQueue = new Set([value]))
		                    : returnFiber.add(value),
		                  attachPingListener(root, value, rootRenderLanes)),
		              !1
		            );
		          case 22:
		            return (
		              (sourceFiber.flags |= 65536),
		              value === noopSuspenseyCommitThenable
		                ? (sourceFiber.flags |= 16384)
		                : ((returnFiber = sourceFiber.updateQueue),
		                  null === returnFiber
		                    ? ((returnFiber = {
		                        transitions: null,
		                        markerInstances: null,
		                        retryQueue: new Set([value])
		                      }),
		                      (sourceFiber.updateQueue = returnFiber))
		                    : ((sourceFiber = returnFiber.retryQueue),
		                      null === sourceFiber
		                        ? (returnFiber.retryQueue = new Set([value]))
		                        : sourceFiber.add(value)),
		                  attachPingListener(root, value, rootRenderLanes)),
		              !1
		            );
		        }
		        throw Error(formatProdErrorMessage(435, sourceFiber.tag));
		      }
		      attachPingListener(root, value, rootRenderLanes);
		      renderDidSuspendDelayIfPossible();
		      return !1;
		    }
		    if (isHydrating)
		      return (
		        (returnFiber = suspenseHandlerStackCursor.current),
		        null !== returnFiber
		          ? (0 === (returnFiber.flags & 65536) && (returnFiber.flags |= 256),
		            (returnFiber.flags |= 65536),
		            (returnFiber.lanes = rootRenderLanes),
		            value !== HydrationMismatchException &&
		              ((root = Error(formatProdErrorMessage(422), { cause: value })),
		              queueHydrationError(
		                createCapturedValueAtFiber(root, sourceFiber)
		              )))
		          : (value !== HydrationMismatchException &&
		              ((returnFiber = Error(formatProdErrorMessage(423), {
		                cause: value
		              })),
		              queueHydrationError(
		                createCapturedValueAtFiber(returnFiber, sourceFiber)
		              )),
		            (root = root.current.alternate),
		            (root.flags |= 65536),
		            (rootRenderLanes &= -rootRenderLanes),
		            (root.lanes |= rootRenderLanes),
		            (value = createCapturedValueAtFiber(value, sourceFiber)),
		            (rootRenderLanes = createRootErrorUpdate(
		              root.stateNode,
		              value,
		              rootRenderLanes
		            )),
		            enqueueCapturedUpdate(root, rootRenderLanes),
		            4 !== workInProgressRootExitStatus &&
		              (workInProgressRootExitStatus = 2)),
		        !1
		      );
		    var wrapperError = Error(formatProdErrorMessage(520), { cause: value });
		    wrapperError = createCapturedValueAtFiber(wrapperError, sourceFiber);
		    null === workInProgressRootConcurrentErrors
		      ? (workInProgressRootConcurrentErrors = [wrapperError])
		      : workInProgressRootConcurrentErrors.push(wrapperError);
		    4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2);
		    if (null === returnFiber) return !0;
		    value = createCapturedValueAtFiber(value, sourceFiber);
		    sourceFiber = returnFiber;
		    do {
		      switch (sourceFiber.tag) {
		        case 3:
		          return (
		            (sourceFiber.flags |= 65536),
		            (root = rootRenderLanes & -rootRenderLanes),
		            (sourceFiber.lanes |= root),
		            (root = createRootErrorUpdate(sourceFiber.stateNode, value, root)),
		            enqueueCapturedUpdate(sourceFiber, root),
		            !1
		          );
		        case 1:
		          if (
		            ((returnFiber = sourceFiber.type),
		            (wrapperError = sourceFiber.stateNode),
		            0 === (sourceFiber.flags & 128) &&
		              ("function" === typeof returnFiber.getDerivedStateFromError ||
		                (null !== wrapperError &&
		                  "function" === typeof wrapperError.componentDidCatch &&
		                  (null === legacyErrorBoundariesThatAlreadyFailed ||
		                    !legacyErrorBoundariesThatAlreadyFailed.has(
		                      wrapperError
		                    )))))
		          )
		            return (
		              (sourceFiber.flags |= 65536),
		              (rootRenderLanes &= -rootRenderLanes),
		              (sourceFiber.lanes |= rootRenderLanes),
		              (rootRenderLanes = createClassErrorUpdate(rootRenderLanes)),
		              initializeClassErrorUpdate(
		                rootRenderLanes,
		                root,
		                sourceFiber,
		                value
		              ),
		              enqueueCapturedUpdate(sourceFiber, rootRenderLanes),
		              !1
		            );
		      }
		      sourceFiber = sourceFiber.return;
		    } while (null !== sourceFiber);
		    return !1;
		  }
		  function reconcileChildren(
		    current,
		    workInProgress,
		    nextChildren,
		    renderLanes
		  ) {
		    workInProgress.child =
		      null === current
		        ? mountChildFibers(workInProgress, null, nextChildren, renderLanes)
		        : reconcileChildFibers(
		            workInProgress,
		            current.child,
		            nextChildren,
		            renderLanes
		          );
		  }
		  function updateForwardRef(
		    current,
		    workInProgress,
		    Component,
		    nextProps,
		    renderLanes
		  ) {
		    Component = Component.render;
		    var ref = workInProgress.ref;
		    if ("ref" in nextProps) {
		      var propsWithoutRef = {};
		      for (var key in nextProps)
		        "ref" !== key && (propsWithoutRef[key] = nextProps[key]);
		    } else propsWithoutRef = nextProps;
		    prepareToReadContext(workInProgress);
		    nextProps = renderWithHooks(
		      current,
		      workInProgress,
		      Component,
		      propsWithoutRef,
		      ref,
		      renderLanes
		    );
		    key = checkDidRenderIdHook();
		    if (null !== current && !didReceiveUpdate)
		      return (
		        bailoutHooks(current, workInProgress, renderLanes),
		        bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
		      );
		    isHydrating && key && pushMaterializedTreeId(workInProgress);
		    workInProgress.flags |= 1;
		    reconcileChildren(current, workInProgress, nextProps, renderLanes);
		    return workInProgress.child;
		  }
		  function updateMemoComponent(
		    current,
		    workInProgress,
		    Component,
		    nextProps,
		    renderLanes
		  ) {
		    if (null === current) {
		      var type = Component.type;
		      if (
		        "function" === typeof type &&
		        !shouldConstruct(type) &&
		        void 0 === type.defaultProps &&
		        null === Component.compare
		      )
		        return (
		          (workInProgress.tag = 15),
		          (workInProgress.type = type),
		          updateSimpleMemoComponent(
		            current,
		            workInProgress,
		            type,
		            nextProps,
		            renderLanes
		          )
		        );
		      current = createFiberFromTypeAndProps(
		        Component.type,
		        null,
		        nextProps,
		        workInProgress,
		        workInProgress.mode,
		        renderLanes
		      );
		      current.ref = workInProgress.ref;
		      current.return = workInProgress;
		      return (workInProgress.child = current);
		    }
		    type = current.child;
		    if (!checkScheduledUpdateOrContext(current, renderLanes)) {
		      var prevProps = type.memoizedProps;
		      Component = Component.compare;
		      Component = null !== Component ? Component : shallowEqual;
		      if (Component(prevProps, nextProps) && current.ref === workInProgress.ref)
		        return bailoutOnAlreadyFinishedWork(
		          current,
		          workInProgress,
		          renderLanes
		        );
		    }
		    workInProgress.flags |= 1;
		    current = createWorkInProgress(type, nextProps);
		    current.ref = workInProgress.ref;
		    current.return = workInProgress;
		    return (workInProgress.child = current);
		  }
		  function updateSimpleMemoComponent(
		    current,
		    workInProgress,
		    Component,
		    nextProps,
		    renderLanes
		  ) {
		    if (null !== current) {
		      var prevProps = current.memoizedProps;
		      if (
		        shallowEqual(prevProps, nextProps) &&
		        current.ref === workInProgress.ref
		      )
		        if (
		          ((didReceiveUpdate = !1),
		          (workInProgress.pendingProps = nextProps = prevProps),
		          checkScheduledUpdateOrContext(current, renderLanes))
		        )
		          0 !== (current.flags & 131072) && (didReceiveUpdate = !0);
		        else
		          return (
		            (workInProgress.lanes = current.lanes),
		            bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
		          );
		    }
		    return updateFunctionComponent(
		      current,
		      workInProgress,
		      Component,
		      nextProps,
		      renderLanes
		    );
		  }
		  function updateOffscreenComponent(current, workInProgress, renderLanes) {
		    var nextProps = workInProgress.pendingProps,
		      nextChildren = nextProps.children,
		      nextIsDetached = 0 !== (workInProgress.stateNode._pendingVisibility & 2),
		      prevState = null !== current ? current.memoizedState : null;
		    markRef(current, workInProgress);
		    if ("hidden" === nextProps.mode || nextIsDetached) {
		      if (0 !== (workInProgress.flags & 128)) {
		        nextProps =
		          null !== prevState ? prevState.baseLanes | renderLanes : renderLanes;
		        if (null !== current) {
		          nextChildren = workInProgress.child = current.child;
		          for (nextIsDetached = 0; null !== nextChildren; )
		            (nextIsDetached =
		              nextIsDetached | nextChildren.lanes | nextChildren.childLanes),
		              (nextChildren = nextChildren.sibling);
		          workInProgress.childLanes = nextIsDetached & ~nextProps;
		        } else (workInProgress.childLanes = 0), (workInProgress.child = null);
		        return deferHiddenOffscreenComponent(
		          current,
		          workInProgress,
		          nextProps,
		          renderLanes
		        );
		      }
		      if (0 !== (renderLanes & 536870912))
		        (workInProgress.memoizedState = { baseLanes: 0, cachePool: null }),
		          null !== current &&
		            pushTransition(
		              workInProgress,
		              null !== prevState ? prevState.cachePool : null
		            ),
		          null !== prevState
		            ? pushHiddenContext(workInProgress, prevState)
		            : reuseHiddenContextOnStack(),
		          pushOffscreenSuspenseHandler(workInProgress);
		      else
		        return (
		          (workInProgress.lanes = workInProgress.childLanes = 536870912),
		          deferHiddenOffscreenComponent(
		            current,
		            workInProgress,
		            null !== prevState
		              ? prevState.baseLanes | renderLanes
		              : renderLanes,
		            renderLanes
		          )
		        );
		    } else
		      null !== prevState
		        ? (pushTransition(workInProgress, prevState.cachePool),
		          pushHiddenContext(workInProgress, prevState),
		          reuseSuspenseHandlerOnStack(),
		          (workInProgress.memoizedState = null))
		        : (null !== current && pushTransition(workInProgress, null),
		          reuseHiddenContextOnStack(),
		          reuseSuspenseHandlerOnStack());
		    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		    return workInProgress.child;
		  }
		  function deferHiddenOffscreenComponent(
		    current,
		    workInProgress,
		    nextBaseLanes,
		    renderLanes
		  ) {
		    var JSCompiler_inline_result = peekCacheFromPool();
		    JSCompiler_inline_result =
		      null === JSCompiler_inline_result
		        ? null
		        : {
		            parent: isPrimaryRenderer
		              ? CacheContext._currentValue
		              : CacheContext._currentValue2,
		            pool: JSCompiler_inline_result
		          };
		    workInProgress.memoizedState = {
		      baseLanes: nextBaseLanes,
		      cachePool: JSCompiler_inline_result
		    };
		    null !== current && pushTransition(workInProgress, null);
		    reuseHiddenContextOnStack();
		    pushOffscreenSuspenseHandler(workInProgress);
		    null !== current &&
		      propagateParentContextChanges(current, workInProgress, renderLanes, !0);
		    return null;
		  }
		  function markRef(current, workInProgress) {
		    var ref = workInProgress.ref;
		    if (null === ref)
		      null !== current &&
		        null !== current.ref &&
		        (workInProgress.flags |= 2097664);
		    else {
		      if ("function" !== typeof ref && "object" !== typeof ref)
		        throw Error(formatProdErrorMessage(284));
		      if (null === current || current.ref !== ref)
		        workInProgress.flags |= 2097664;
		    }
		  }
		  function updateFunctionComponent(
		    current,
		    workInProgress,
		    Component,
		    nextProps,
		    renderLanes
		  ) {
		    prepareToReadContext(workInProgress);
		    Component = renderWithHooks(
		      current,
		      workInProgress,
		      Component,
		      nextProps,
		      void 0,
		      renderLanes
		    );
		    nextProps = checkDidRenderIdHook();
		    if (null !== current && !didReceiveUpdate)
		      return (
		        bailoutHooks(current, workInProgress, renderLanes),
		        bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
		      );
		    isHydrating && nextProps && pushMaterializedTreeId(workInProgress);
		    workInProgress.flags |= 1;
		    reconcileChildren(current, workInProgress, Component, renderLanes);
		    return workInProgress.child;
		  }
		  function replayFunctionComponent(
		    current,
		    workInProgress,
		    nextProps,
		    Component,
		    secondArg,
		    renderLanes
		  ) {
		    prepareToReadContext(workInProgress);
		    workInProgress.updateQueue = null;
		    nextProps = renderWithHooksAgain(
		      workInProgress,
		      Component,
		      nextProps,
		      secondArg
		    );
		    finishRenderingHooks(current);
		    Component = checkDidRenderIdHook();
		    if (null !== current && !didReceiveUpdate)
		      return (
		        bailoutHooks(current, workInProgress, renderLanes),
		        bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
		      );
		    isHydrating && Component && pushMaterializedTreeId(workInProgress);
		    workInProgress.flags |= 1;
		    reconcileChildren(current, workInProgress, nextProps, renderLanes);
		    return workInProgress.child;
		  }
		  function updateClassComponent(
		    current,
		    workInProgress,
		    Component,
		    nextProps,
		    renderLanes
		  ) {
		    prepareToReadContext(workInProgress);
		    if (null === workInProgress.stateNode) {
		      var context = emptyContextObject,
		        contextType = Component.contextType;
		      "object" === typeof contextType &&
		        null !== contextType &&
		        (context = readContext(contextType));
		      context = new Component(nextProps, context);
		      workInProgress.memoizedState =
		        null !== context.state && void 0 !== context.state
		          ? context.state
		          : null;
		      context.updater = classComponentUpdater;
		      workInProgress.stateNode = context;
		      context._reactInternals = workInProgress;
		      context = workInProgress.stateNode;
		      context.props = nextProps;
		      context.state = workInProgress.memoizedState;
		      context.refs = {};
		      initializeUpdateQueue(workInProgress);
		      contextType = Component.contextType;
		      context.context =
		        "object" === typeof contextType && null !== contextType
		          ? readContext(contextType)
		          : emptyContextObject;
		      context.state = workInProgress.memoizedState;
		      contextType = Component.getDerivedStateFromProps;
		      "function" === typeof contextType &&
		        (applyDerivedStateFromProps(
		          workInProgress,
		          Component,
		          contextType,
		          nextProps
		        ),
		        (context.state = workInProgress.memoizedState));
		      "function" === typeof Component.getDerivedStateFromProps ||
		        "function" === typeof context.getSnapshotBeforeUpdate ||
		        ("function" !== typeof context.UNSAFE_componentWillMount &&
		          "function" !== typeof context.componentWillMount) ||
		        ((contextType = context.state),
		        "function" === typeof context.componentWillMount &&
		          context.componentWillMount(),
		        "function" === typeof context.UNSAFE_componentWillMount &&
		          context.UNSAFE_componentWillMount(),
		        contextType !== context.state &&
		          classComponentUpdater.enqueueReplaceState(
		            context,
		            context.state,
		            null
		          ),
		        processUpdateQueue(workInProgress, nextProps, context, renderLanes),
		        suspendIfUpdateReadFromEntangledAsyncAction(),
		        (context.state = workInProgress.memoizedState));
		      "function" === typeof context.componentDidMount &&
		        (workInProgress.flags |= 4194308);
		      nextProps = !0;
		    } else if (null === current) {
		      context = workInProgress.stateNode;
		      var unresolvedOldProps = workInProgress.memoizedProps,
		        oldProps = resolveClassComponentProps(Component, unresolvedOldProps);
		      context.props = oldProps;
		      var oldContext = context.context,
		        contextType$jscomp$0 = Component.contextType;
		      contextType = emptyContextObject;
		      "object" === typeof contextType$jscomp$0 &&
		        null !== contextType$jscomp$0 &&
		        (contextType = readContext(contextType$jscomp$0));
		      var getDerivedStateFromProps = Component.getDerivedStateFromProps;
		      contextType$jscomp$0 =
		        "function" === typeof getDerivedStateFromProps ||
		        "function" === typeof context.getSnapshotBeforeUpdate;
		      unresolvedOldProps = workInProgress.pendingProps !== unresolvedOldProps;
		      contextType$jscomp$0 ||
		        ("function" !== typeof context.UNSAFE_componentWillReceiveProps &&
		          "function" !== typeof context.componentWillReceiveProps) ||
		        ((unresolvedOldProps || oldContext !== contextType) &&
		          callComponentWillReceiveProps(
		            workInProgress,
		            context,
		            nextProps,
		            contextType
		          ));
		      hasForceUpdate = !1;
		      var oldState = workInProgress.memoizedState;
		      context.state = oldState;
		      processUpdateQueue(workInProgress, nextProps, context, renderLanes);
		      suspendIfUpdateReadFromEntangledAsyncAction();
		      oldContext = workInProgress.memoizedState;
		      unresolvedOldProps || oldState !== oldContext || hasForceUpdate
		        ? ("function" === typeof getDerivedStateFromProps &&
		            (applyDerivedStateFromProps(
		              workInProgress,
		              Component,
		              getDerivedStateFromProps,
		              nextProps
		            ),
		            (oldContext = workInProgress.memoizedState)),
		          (oldProps =
		            hasForceUpdate ||
		            checkShouldComponentUpdate(
		              workInProgress,
		              Component,
		              oldProps,
		              nextProps,
		              oldState,
		              oldContext,
		              contextType
		            ))
		            ? (contextType$jscomp$0 ||
		                ("function" !== typeof context.UNSAFE_componentWillMount &&
		                  "function" !== typeof context.componentWillMount) ||
		                ("function" === typeof context.componentWillMount &&
		                  context.componentWillMount(),
		                "function" === typeof context.UNSAFE_componentWillMount &&
		                  context.UNSAFE_componentWillMount()),
		              "function" === typeof context.componentDidMount &&
		                (workInProgress.flags |= 4194308))
		            : ("function" === typeof context.componentDidMount &&
		                (workInProgress.flags |= 4194308),
		              (workInProgress.memoizedProps = nextProps),
		              (workInProgress.memoizedState = oldContext)),
		          (context.props = nextProps),
		          (context.state = oldContext),
		          (context.context = contextType),
		          (nextProps = oldProps))
		        : ("function" === typeof context.componentDidMount &&
		            (workInProgress.flags |= 4194308),
		          (nextProps = !1));
		    } else {
		      context = workInProgress.stateNode;
		      cloneUpdateQueue(current, workInProgress);
		      contextType = workInProgress.memoizedProps;
		      contextType$jscomp$0 = resolveClassComponentProps(Component, contextType);
		      context.props = contextType$jscomp$0;
		      getDerivedStateFromProps = workInProgress.pendingProps;
		      oldState = context.context;
		      oldContext = Component.contextType;
		      oldProps = emptyContextObject;
		      "object" === typeof oldContext &&
		        null !== oldContext &&
		        (oldProps = readContext(oldContext));
		      unresolvedOldProps = Component.getDerivedStateFromProps;
		      (oldContext =
		        "function" === typeof unresolvedOldProps ||
		        "function" === typeof context.getSnapshotBeforeUpdate) ||
		        ("function" !== typeof context.UNSAFE_componentWillReceiveProps &&
		          "function" !== typeof context.componentWillReceiveProps) ||
		        ((contextType !== getDerivedStateFromProps || oldState !== oldProps) &&
		          callComponentWillReceiveProps(
		            workInProgress,
		            context,
		            nextProps,
		            oldProps
		          ));
		      hasForceUpdate = !1;
		      oldState = workInProgress.memoizedState;
		      context.state = oldState;
		      processUpdateQueue(workInProgress, nextProps, context, renderLanes);
		      suspendIfUpdateReadFromEntangledAsyncAction();
		      var newState = workInProgress.memoizedState;
		      contextType !== getDerivedStateFromProps ||
		      oldState !== newState ||
		      hasForceUpdate ||
		      (null !== current &&
		        null !== current.dependencies &&
		        checkIfContextChanged(current.dependencies))
		        ? ("function" === typeof unresolvedOldProps &&
		            (applyDerivedStateFromProps(
		              workInProgress,
		              Component,
		              unresolvedOldProps,
		              nextProps
		            ),
		            (newState = workInProgress.memoizedState)),
		          (contextType$jscomp$0 =
		            hasForceUpdate ||
		            checkShouldComponentUpdate(
		              workInProgress,
		              Component,
		              contextType$jscomp$0,
		              nextProps,
		              oldState,
		              newState,
		              oldProps
		            ) ||
		            (null !== current &&
		              null !== current.dependencies &&
		              checkIfContextChanged(current.dependencies)))
		            ? (oldContext ||
		                ("function" !== typeof context.UNSAFE_componentWillUpdate &&
		                  "function" !== typeof context.componentWillUpdate) ||
		                ("function" === typeof context.componentWillUpdate &&
		                  context.componentWillUpdate(nextProps, newState, oldProps),
		                "function" === typeof context.UNSAFE_componentWillUpdate &&
		                  context.UNSAFE_componentWillUpdate(
		                    nextProps,
		                    newState,
		                    oldProps
		                  )),
		              "function" === typeof context.componentDidUpdate &&
		                (workInProgress.flags |= 4),
		              "function" === typeof context.getSnapshotBeforeUpdate &&
		                (workInProgress.flags |= 1024))
		            : ("function" !== typeof context.componentDidUpdate ||
		                (contextType === current.memoizedProps &&
		                  oldState === current.memoizedState) ||
		                (workInProgress.flags |= 4),
		              "function" !== typeof context.getSnapshotBeforeUpdate ||
		                (contextType === current.memoizedProps &&
		                  oldState === current.memoizedState) ||
		                (workInProgress.flags |= 1024),
		              (workInProgress.memoizedProps = nextProps),
		              (workInProgress.memoizedState = newState)),
		          (context.props = nextProps),
		          (context.state = newState),
		          (context.context = oldProps),
		          (nextProps = contextType$jscomp$0))
		        : ("function" !== typeof context.componentDidUpdate ||
		            (contextType === current.memoizedProps &&
		              oldState === current.memoizedState) ||
		            (workInProgress.flags |= 4),
		          "function" !== typeof context.getSnapshotBeforeUpdate ||
		            (contextType === current.memoizedProps &&
		              oldState === current.memoizedState) ||
		            (workInProgress.flags |= 1024),
		          (nextProps = !1));
		    }
		    context = nextProps;
		    markRef(current, workInProgress);
		    nextProps = 0 !== (workInProgress.flags & 128);
		    context || nextProps
		      ? ((context = workInProgress.stateNode),
		        (Component =
		          nextProps && "function" !== typeof Component.getDerivedStateFromError
		            ? null
		            : context.render()),
		        (workInProgress.flags |= 1),
		        null !== current && nextProps
		          ? ((workInProgress.child = reconcileChildFibers(
		              workInProgress,
		              current.child,
		              null,
		              renderLanes
		            )),
		            (workInProgress.child = reconcileChildFibers(
		              workInProgress,
		              null,
		              Component,
		              renderLanes
		            )))
		          : reconcileChildren(current, workInProgress, Component, renderLanes),
		        (workInProgress.memoizedState = context.state),
		        (current = workInProgress.child))
		      : (current = bailoutOnAlreadyFinishedWork(
		          current,
		          workInProgress,
		          renderLanes
		        ));
		    return current;
		  }
		  function mountHostRootWithoutHydrating(
		    current,
		    workInProgress,
		    nextChildren,
		    renderLanes
		  ) {
		    resetHydrationState();
		    workInProgress.flags |= 256;
		    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		    return workInProgress.child;
		  }
		  function mountSuspenseOffscreenState(renderLanes) {
		    return { baseLanes: renderLanes, cachePool: getSuspendedCache() };
		  }
		  function getRemainingWorkInPrimaryTree(
		    current,
		    primaryTreeDidDefer,
		    renderLanes
		  ) {
		    current = null !== current ? current.childLanes & ~renderLanes : 0;
		    primaryTreeDidDefer && (current |= workInProgressDeferredLane);
		    return current;
		  }
		  function updateSuspenseComponent(current, workInProgress, renderLanes) {
		    var nextProps = workInProgress.pendingProps,
		      showFallback = !1,
		      didSuspend = 0 !== (workInProgress.flags & 128),
		      JSCompiler_temp;
		    (JSCompiler_temp = didSuspend) ||
		      (JSCompiler_temp =
		        null !== current && null === current.memoizedState
		          ? !1
		          : 0 !== (suspenseStackCursor.current & 2));
		    JSCompiler_temp && ((showFallback = !0), (workInProgress.flags &= -129));
		    JSCompiler_temp = 0 !== (workInProgress.flags & 32);
		    workInProgress.flags &= -33;
		    if (null === current) {
		      if (isHydrating) {
		        showFallback
		          ? pushPrimaryTreeSuspenseHandler(workInProgress)
		          : reuseSuspenseHandlerOnStack();
		        if (isHydrating) {
		          var nextInstance = nextHydratableInstance,
		            JSCompiler_temp$jscomp$0;
		          if ((JSCompiler_temp$jscomp$0 = nextInstance))
		            (nextInstance = canHydrateSuspenseInstance(
		              nextInstance,
		              rootOrSingletonContext
		            )),
		              null !== nextInstance
		                ? ((workInProgress.memoizedState = {
		                    dehydrated: nextInstance,
		                    treeContext:
		                      null !== treeContextProvider
		                        ? { id: treeContextId, overflow: treeContextOverflow }
		                        : null,
		                    retryLane: 536870912
		                  }),
		                  (JSCompiler_temp$jscomp$0 = createFiber(18, null, null, 0)),
		                  (JSCompiler_temp$jscomp$0.stateNode = nextInstance),
		                  (JSCompiler_temp$jscomp$0.return = workInProgress),
		                  (workInProgress.child = JSCompiler_temp$jscomp$0),
		                  (hydrationParentFiber = workInProgress),
		                  (nextHydratableInstance = null),
		                  (JSCompiler_temp$jscomp$0 = !0))
		                : (JSCompiler_temp$jscomp$0 = !1);
		          JSCompiler_temp$jscomp$0 || throwOnHydrationMismatch(workInProgress);
		        }
		        nextInstance = workInProgress.memoizedState;
		        if (
		          null !== nextInstance &&
		          ((nextInstance = nextInstance.dehydrated), null !== nextInstance)
		        )
		          return (
		            isSuspenseInstanceFallback(nextInstance)
		              ? (workInProgress.lanes = 16)
		              : (workInProgress.lanes = 536870912),
		            null
		          );
		        popSuspenseHandler(workInProgress);
		      }
		      nextInstance = nextProps.children;
		      nextProps = nextProps.fallback;
		      if (showFallback)
		        return (
		          reuseSuspenseHandlerOnStack(),
		          (showFallback = workInProgress.mode),
		          (nextInstance = mountWorkInProgressOffscreenFiber(
		            { mode: "hidden", children: nextInstance },
		            showFallback
		          )),
		          (nextProps = createFiberFromFragment(
		            nextProps,
		            showFallback,
		            renderLanes,
		            null
		          )),
		          (nextInstance.return = workInProgress),
		          (nextProps.return = workInProgress),
		          (nextInstance.sibling = nextProps),
		          (workInProgress.child = nextInstance),
		          (showFallback = workInProgress.child),
		          (showFallback.memoizedState =
		            mountSuspenseOffscreenState(renderLanes)),
		          (showFallback.childLanes = getRemainingWorkInPrimaryTree(
		            current,
		            JSCompiler_temp,
		            renderLanes
		          )),
		          (workInProgress.memoizedState = SUSPENDED_MARKER),
		          nextProps
		        );
		      pushPrimaryTreeSuspenseHandler(workInProgress);
		      return mountSuspensePrimaryChildren(workInProgress, nextInstance);
		    }
		    JSCompiler_temp$jscomp$0 = current.memoizedState;
		    if (
		      null !== JSCompiler_temp$jscomp$0 &&
		      ((nextInstance = JSCompiler_temp$jscomp$0.dehydrated),
		      null !== nextInstance)
		    ) {
		      if (didSuspend)
		        workInProgress.flags & 256
		          ? (pushPrimaryTreeSuspenseHandler(workInProgress),
		            (workInProgress.flags &= -257),
		            (workInProgress = retrySuspenseComponentWithoutHydrating(
		              current,
		              workInProgress,
		              renderLanes
		            )))
		          : null !== workInProgress.memoizedState
		            ? (reuseSuspenseHandlerOnStack(),
		              (workInProgress.child = current.child),
		              (workInProgress.flags |= 128),
		              (workInProgress = null))
		            : (reuseSuspenseHandlerOnStack(),
		              (showFallback = nextProps.fallback),
		              (nextInstance = workInProgress.mode),
		              (nextProps = mountWorkInProgressOffscreenFiber(
		                { mode: "visible", children: nextProps.children },
		                nextInstance
		              )),
		              (showFallback = createFiberFromFragment(
		                showFallback,
		                nextInstance,
		                renderLanes,
		                null
		              )),
		              (showFallback.flags |= 2),
		              (nextProps.return = workInProgress),
		              (showFallback.return = workInProgress),
		              (nextProps.sibling = showFallback),
		              (workInProgress.child = nextProps),
		              reconcileChildFibers(
		                workInProgress,
		                current.child,
		                null,
		                renderLanes
		              ),
		              (nextProps = workInProgress.child),
		              (nextProps.memoizedState =
		                mountSuspenseOffscreenState(renderLanes)),
		              (nextProps.childLanes = getRemainingWorkInPrimaryTree(
		                current,
		                JSCompiler_temp,
		                renderLanes
		              )),
		              (workInProgress.memoizedState = SUSPENDED_MARKER),
		              (workInProgress = showFallback));
		      else if (
		        (pushPrimaryTreeSuspenseHandler(workInProgress),
		        isSuspenseInstanceFallback(nextInstance))
		      )
		        (JSCompiler_temp =
		          getSuspenseInstanceFallbackErrorDetails(nextInstance).digest),
		          (nextProps = Error(formatProdErrorMessage(419))),
		          (nextProps.stack = ""),
		          (nextProps.digest = JSCompiler_temp),
		          queueHydrationError({ value: nextProps, source: null, stack: null }),
		          (workInProgress = retrySuspenseComponentWithoutHydrating(
		            current,
		            workInProgress,
		            renderLanes
		          ));
		      else if (
		        (didReceiveUpdate ||
		          propagateParentContextChanges(
		            current,
		            workInProgress,
		            renderLanes,
		            !1
		          ),
		        (JSCompiler_temp = 0 !== (renderLanes & current.childLanes)),
		        didReceiveUpdate || JSCompiler_temp)
		      ) {
		        JSCompiler_temp = workInProgressRoot;
		        if (null !== JSCompiler_temp) {
		          nextProps = renderLanes & -renderLanes;
		          if (0 !== (nextProps & 42)) nextProps = 1;
		          else
		            switch (nextProps) {
		              case 2:
		                nextProps = 1;
		                break;
		              case 8:
		                nextProps = 4;
		                break;
		              case 32:
		                nextProps = 16;
		                break;
		              case 128:
		              case 256:
		              case 512:
		              case 1024:
		              case 2048:
		              case 4096:
		              case 8192:
		              case 16384:
		              case 32768:
		              case 65536:
		              case 131072:
		              case 262144:
		              case 524288:
		              case 1048576:
		              case 2097152:
		              case 4194304:
		              case 8388608:
		              case 16777216:
		              case 33554432:
		                nextProps = 64;
		                break;
		              case 268435456:
		                nextProps = 134217728;
		                break;
		              default:
		                nextProps = 0;
		            }
		          nextProps =
		            0 !== (nextProps & (JSCompiler_temp.suspendedLanes | renderLanes))
		              ? 0
		              : nextProps;
		          if (
		            0 !== nextProps &&
		            nextProps !== JSCompiler_temp$jscomp$0.retryLane
		          )
		            throw (
		              ((JSCompiler_temp$jscomp$0.retryLane = nextProps),
		              enqueueConcurrentRenderForLane(current, nextProps),
		              scheduleUpdateOnFiber(JSCompiler_temp, current, nextProps),
		              SelectiveHydrationException)
		            );
		        }
		        isSuspenseInstancePending(nextInstance) ||
		          renderDidSuspendDelayIfPossible();
		        workInProgress = retrySuspenseComponentWithoutHydrating(
		          current,
		          workInProgress,
		          renderLanes
		        );
		      } else
		        isSuspenseInstancePending(nextInstance)
		          ? ((workInProgress.flags |= 128),
		            (workInProgress.child = current.child),
		            (workInProgress = retryDehydratedSuspenseBoundary.bind(
		              null,
		              current
		            )),
		            registerSuspenseInstanceRetry(nextInstance, workInProgress),
		            (workInProgress = null))
		          : ((current = JSCompiler_temp$jscomp$0.treeContext),
		            supportsHydration &&
		              ((nextHydratableInstance =
		                getFirstHydratableChildWithinSuspenseInstance(nextInstance)),
		              (hydrationParentFiber = workInProgress),
		              (isHydrating = !0),
		              (hydrationErrors = null),
		              (rootOrSingletonContext = !1),
		              null !== current &&
		                ((idStack[idStackIndex++] = treeContextId),
		                (idStack[idStackIndex++] = treeContextOverflow),
		                (idStack[idStackIndex++] = treeContextProvider),
		                (treeContextId = current.id),
		                (treeContextOverflow = current.overflow),
		                (treeContextProvider = workInProgress))),
		            (workInProgress = mountSuspensePrimaryChildren(
		              workInProgress,
		              nextProps.children
		            )),
		            (workInProgress.flags |= 4096));
		      return workInProgress;
		    }
		    if (showFallback)
		      return (
		        reuseSuspenseHandlerOnStack(),
		        (showFallback = nextProps.fallback),
		        (nextInstance = workInProgress.mode),
		        (JSCompiler_temp$jscomp$0 = current.child),
		        (didSuspend = JSCompiler_temp$jscomp$0.sibling),
		        (nextProps = createWorkInProgress(JSCompiler_temp$jscomp$0, {
		          mode: "hidden",
		          children: nextProps.children
		        })),
		        (nextProps.subtreeFlags =
		          JSCompiler_temp$jscomp$0.subtreeFlags & 31457280),
		        null !== didSuspend
		          ? (showFallback = createWorkInProgress(didSuspend, showFallback))
		          : ((showFallback = createFiberFromFragment(
		              showFallback,
		              nextInstance,
		              renderLanes,
		              null
		            )),
		            (showFallback.flags |= 2)),
		        (showFallback.return = workInProgress),
		        (nextProps.return = workInProgress),
		        (nextProps.sibling = showFallback),
		        (workInProgress.child = nextProps),
		        (nextProps = showFallback),
		        (showFallback = workInProgress.child),
		        (nextInstance = current.child.memoizedState),
		        null === nextInstance
		          ? (nextInstance = mountSuspenseOffscreenState(renderLanes))
		          : ((JSCompiler_temp$jscomp$0 = nextInstance.cachePool),
		            null !== JSCompiler_temp$jscomp$0
		              ? ((didSuspend = isPrimaryRenderer
		                  ? CacheContext._currentValue
		                  : CacheContext._currentValue2),
		                (JSCompiler_temp$jscomp$0 =
		                  JSCompiler_temp$jscomp$0.parent !== didSuspend
		                    ? { parent: didSuspend, pool: didSuspend }
		                    : JSCompiler_temp$jscomp$0))
		              : (JSCompiler_temp$jscomp$0 = getSuspendedCache()),
		            (nextInstance = {
		              baseLanes: nextInstance.baseLanes | renderLanes,
		              cachePool: JSCompiler_temp$jscomp$0
		            })),
		        (showFallback.memoizedState = nextInstance),
		        (showFallback.childLanes = getRemainingWorkInPrimaryTree(
		          current,
		          JSCompiler_temp,
		          renderLanes
		        )),
		        (workInProgress.memoizedState = SUSPENDED_MARKER),
		        nextProps
		      );
		    pushPrimaryTreeSuspenseHandler(workInProgress);
		    renderLanes = current.child;
		    current = renderLanes.sibling;
		    renderLanes = createWorkInProgress(renderLanes, {
		      mode: "visible",
		      children: nextProps.children
		    });
		    renderLanes.return = workInProgress;
		    renderLanes.sibling = null;
		    null !== current &&
		      ((JSCompiler_temp = workInProgress.deletions),
		      null === JSCompiler_temp
		        ? ((workInProgress.deletions = [current]), (workInProgress.flags |= 16))
		        : JSCompiler_temp.push(current));
		    workInProgress.child = renderLanes;
		    workInProgress.memoizedState = null;
		    return renderLanes;
		  }
		  function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {
		    primaryChildren = mountWorkInProgressOffscreenFiber(
		      { mode: "visible", children: primaryChildren },
		      workInProgress.mode
		    );
		    primaryChildren.return = workInProgress;
		    return (workInProgress.child = primaryChildren);
		  }
		  function mountWorkInProgressOffscreenFiber(offscreenProps, mode) {
		    return createFiberFromOffscreen(offscreenProps, mode, 0, null);
		  }
		  function retrySuspenseComponentWithoutHydrating(
		    current,
		    workInProgress,
		    renderLanes
		  ) {
		    reconcileChildFibers(workInProgress, current.child, null, renderLanes);
		    current = mountSuspensePrimaryChildren(
		      workInProgress,
		      workInProgress.pendingProps.children
		    );
		    current.flags |= 2;
		    workInProgress.memoizedState = null;
		    return current;
		  }
		  function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
		    fiber.lanes |= renderLanes;
		    var alternate = fiber.alternate;
		    null !== alternate && (alternate.lanes |= renderLanes);
		    scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
		  }
		  function initSuspenseListRenderState(
		    workInProgress,
		    isBackwards,
		    tail,
		    lastContentRow,
		    tailMode
		  ) {
		    var renderState = workInProgress.memoizedState;
		    null === renderState
		      ? (workInProgress.memoizedState = {
		          isBackwards: isBackwards,
		          rendering: null,
		          renderingStartTime: 0,
		          last: lastContentRow,
		          tail: tail,
		          tailMode: tailMode
		        })
		      : ((renderState.isBackwards = isBackwards),
		        (renderState.rendering = null),
		        (renderState.renderingStartTime = 0),
		        (renderState.last = lastContentRow),
		        (renderState.tail = tail),
		        (renderState.tailMode = tailMode));
		  }
		  function updateSuspenseListComponent(current, workInProgress, renderLanes) {
		    var nextProps = workInProgress.pendingProps,
		      revealOrder = nextProps.revealOrder,
		      tailMode = nextProps.tail;
		    reconcileChildren(current, workInProgress, nextProps.children, renderLanes);
		    nextProps = suspenseStackCursor.current;
		    if (0 !== (nextProps & 2))
		      (nextProps = (nextProps & 1) | 2), (workInProgress.flags |= 128);
		    else {
		      if (null !== current && 0 !== (current.flags & 128))
		        a: for (current = workInProgress.child; null !== current; ) {
		          if (13 === current.tag)
		            null !== current.memoizedState &&
		              scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
		          else if (19 === current.tag)
		            scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
		          else if (null !== current.child) {
		            current.child.return = current;
		            current = current.child;
		            continue;
		          }
		          if (current === workInProgress) break a;
		          for (; null === current.sibling; ) {
		            if (null === current.return || current.return === workInProgress)
		              break a;
		            current = current.return;
		          }
		          current.sibling.return = current.return;
		          current = current.sibling;
		        }
		      nextProps &= 1;
		    }
		    push(suspenseStackCursor, nextProps);
		    switch (revealOrder) {
		      case "forwards":
		        renderLanes = workInProgress.child;
		        for (revealOrder = null; null !== renderLanes; )
		          (current = renderLanes.alternate),
		            null !== current &&
		              null === findFirstSuspended(current) &&
		              (revealOrder = renderLanes),
		            (renderLanes = renderLanes.sibling);
		        renderLanes = revealOrder;
		        null === renderLanes
		          ? ((revealOrder = workInProgress.child),
		            (workInProgress.child = null))
		          : ((revealOrder = renderLanes.sibling), (renderLanes.sibling = null));
		        initSuspenseListRenderState(
		          workInProgress,
		          !1,
		          revealOrder,
		          renderLanes,
		          tailMode
		        );
		        break;
		      case "backwards":
		        renderLanes = null;
		        revealOrder = workInProgress.child;
		        for (workInProgress.child = null; null !== revealOrder; ) {
		          current = revealOrder.alternate;
		          if (null !== current && null === findFirstSuspended(current)) {
		            workInProgress.child = revealOrder;
		            break;
		          }
		          current = revealOrder.sibling;
		          revealOrder.sibling = renderLanes;
		          renderLanes = revealOrder;
		          revealOrder = current;
		        }
		        initSuspenseListRenderState(
		          workInProgress,
		          !0,
		          renderLanes,
		          null,
		          tailMode
		        );
		        break;
		      case "together":
		        initSuspenseListRenderState(workInProgress, !1, null, null, void 0);
		        break;
		      default:
		        workInProgress.memoizedState = null;
		    }
		    return workInProgress.child;
		  }
		  function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
		    null !== current && (workInProgress.dependencies = current.dependencies);
		    workInProgressRootSkippedLanes |= workInProgress.lanes;
		    if (0 === (renderLanes & workInProgress.childLanes))
		      if (null !== current) {
		        if (
		          (propagateParentContextChanges(
		            current,
		            workInProgress,
		            renderLanes,
		            !1
		          ),
		          0 === (renderLanes & workInProgress.childLanes))
		        )
		          return null;
		      } else return null;
		    if (null !== current && workInProgress.child !== current.child)
		      throw Error(formatProdErrorMessage(153));
		    if (null !== workInProgress.child) {
		      current = workInProgress.child;
		      renderLanes = createWorkInProgress(current, current.pendingProps);
		      workInProgress.child = renderLanes;
		      for (renderLanes.return = workInProgress; null !== current.sibling; )
		        (current = current.sibling),
		          (renderLanes = renderLanes.sibling =
		            createWorkInProgress(current, current.pendingProps)),
		          (renderLanes.return = workInProgress);
		      renderLanes.sibling = null;
		    }
		    return workInProgress.child;
		  }
		  function checkScheduledUpdateOrContext(current, renderLanes) {
		    if (0 !== (current.lanes & renderLanes)) return !0;
		    current = current.dependencies;
		    return null !== current && checkIfContextChanged(current) ? !0 : !1;
		  }
		  function attemptEarlyBailoutIfNoScheduledUpdate(
		    current,
		    workInProgress,
		    renderLanes
		  ) {
		    switch (workInProgress.tag) {
		      case 3:
		        pushHostContainer(
		          workInProgress,
		          workInProgress.stateNode.containerInfo
		        );
		        pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
		        resetHydrationState();
		        break;
		      case 27:
		      case 5:
		        pushHostContext(workInProgress);
		        break;
		      case 4:
		        pushHostContainer(
		          workInProgress,
		          workInProgress.stateNode.containerInfo
		        );
		        break;
		      case 10:
		        pushProvider(
		          workInProgress,
		          workInProgress.type,
		          workInProgress.memoizedProps.value
		        );
		        break;
		      case 13:
		        var state = workInProgress.memoizedState;
		        if (null !== state) {
		          if (null !== state.dehydrated)
		            return (
		              pushPrimaryTreeSuspenseHandler(workInProgress),
		              (workInProgress.flags |= 128),
		              null
		            );
		          if (0 !== (renderLanes & workInProgress.child.childLanes))
		            return updateSuspenseComponent(
		              current,
		              workInProgress,
		              renderLanes
		            );
		          pushPrimaryTreeSuspenseHandler(workInProgress);
		          current = bailoutOnAlreadyFinishedWork(
		            current,
		            workInProgress,
		            renderLanes
		          );
		          return null !== current ? current.sibling : null;
		        }
		        pushPrimaryTreeSuspenseHandler(workInProgress);
		        break;
		      case 19:
		        var didSuspendBefore = 0 !== (current.flags & 128);
		        state = 0 !== (renderLanes & workInProgress.childLanes);
		        state ||
		          (propagateParentContextChanges(
		            current,
		            workInProgress,
		            renderLanes,
		            !1
		          ),
		          (state = 0 !== (renderLanes & workInProgress.childLanes)));
		        if (didSuspendBefore) {
		          if (state)
		            return updateSuspenseListComponent(
		              current,
		              workInProgress,
		              renderLanes
		            );
		          workInProgress.flags |= 128;
		        }
		        didSuspendBefore = workInProgress.memoizedState;
		        null !== didSuspendBefore &&
		          ((didSuspendBefore.rendering = null),
		          (didSuspendBefore.tail = null),
		          (didSuspendBefore.lastEffect = null));
		        push(suspenseStackCursor, suspenseStackCursor.current);
		        if (state) break;
		        else return null;
		      case 22:
		      case 23:
		        return (
		          (workInProgress.lanes = 0),
		          updateOffscreenComponent(current, workInProgress, renderLanes)
		        );
		      case 24:
		        pushProvider(workInProgress, CacheContext, current.memoizedState.cache);
		    }
		    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
		  }
		  function beginWork(current, workInProgress, renderLanes) {
		    if (null !== current)
		      if (current.memoizedProps !== workInProgress.pendingProps)
		        didReceiveUpdate = !0;
		      else {
		        if (
		          !checkScheduledUpdateOrContext(current, renderLanes) &&
		          0 === (workInProgress.flags & 128)
		        )
		          return (
		            (didReceiveUpdate = !1),
		            attemptEarlyBailoutIfNoScheduledUpdate(
		              current,
		              workInProgress,
		              renderLanes
		            )
		          );
		        didReceiveUpdate = 0 !== (current.flags & 131072) ? !0 : !1;
		      }
		    else
		      (didReceiveUpdate = !1),
		        isHydrating &&
		          0 !== (workInProgress.flags & 1048576) &&
		          pushTreeId(workInProgress, treeForkCount, workInProgress.index);
		    workInProgress.lanes = 0;
		    switch (workInProgress.tag) {
		      case 16:
		        a: {
		          current = workInProgress.pendingProps;
		          var lazyComponent = workInProgress.elementType,
		            init = lazyComponent._init;
		          lazyComponent = init(lazyComponent._payload);
		          workInProgress.type = lazyComponent;
		          if ("function" === typeof lazyComponent)
		            shouldConstruct(lazyComponent)
		              ? ((current = resolveClassComponentProps(lazyComponent, current)),
		                (workInProgress.tag = 1),
		                (workInProgress = updateClassComponent(
		                  null,
		                  workInProgress,
		                  lazyComponent,
		                  current,
		                  renderLanes
		                )))
		              : ((workInProgress.tag = 0),
		                (workInProgress = updateFunctionComponent(
		                  null,
		                  workInProgress,
		                  lazyComponent,
		                  current,
		                  renderLanes
		                )));
		          else {
		            if (void 0 !== lazyComponent && null !== lazyComponent)
		              if (
		                ((init = lazyComponent.$$typeof),
		                init === REACT_FORWARD_REF_TYPE)
		              ) {
		                workInProgress.tag = 11;
		                workInProgress = updateForwardRef(
		                  null,
		                  workInProgress,
		                  lazyComponent,
		                  current,
		                  renderLanes
		                );
		                break a;
		              } else if (init === REACT_MEMO_TYPE) {
		                workInProgress.tag = 14;
		                workInProgress = updateMemoComponent(
		                  null,
		                  workInProgress,
		                  lazyComponent,
		                  current,
		                  renderLanes
		                );
		                break a;
		              }
		            workInProgress =
		              getComponentNameFromType(lazyComponent) || lazyComponent;
		            throw Error(formatProdErrorMessage(306, workInProgress, ""));
		          }
		        }
		        return workInProgress;
		      case 0:
		        return updateFunctionComponent(
		          current,
		          workInProgress,
		          workInProgress.type,
		          workInProgress.pendingProps,
		          renderLanes
		        );
		      case 1:
		        return (
		          (lazyComponent = workInProgress.type),
		          (init = resolveClassComponentProps(
		            lazyComponent,
		            workInProgress.pendingProps
		          )),
		          updateClassComponent(
		            current,
		            workInProgress,
		            lazyComponent,
		            init,
		            renderLanes
		          )
		        );
		      case 3:
		        a: {
		          pushHostContainer(
		            workInProgress,
		            workInProgress.stateNode.containerInfo
		          );
		          if (null === current) throw Error(formatProdErrorMessage(387));
		          var nextProps = workInProgress.pendingProps;
		          init = workInProgress.memoizedState;
		          lazyComponent = init.element;
		          cloneUpdateQueue(current, workInProgress);
		          processUpdateQueue(workInProgress, nextProps, null, renderLanes);
		          var nextState = workInProgress.memoizedState;
		          nextProps = nextState.cache;
		          pushProvider(workInProgress, CacheContext, nextProps);
		          nextProps !== init.cache &&
		            propagateContextChanges(
		              workInProgress,
		              [CacheContext],
		              renderLanes,
		              !0
		            );
		          suspendIfUpdateReadFromEntangledAsyncAction();
		          nextProps = nextState.element;
		          if (supportsHydration && init.isDehydrated)
		            if (
		              ((init = {
		                element: nextProps,
		                isDehydrated: !1,
		                cache: nextState.cache
		              }),
		              (workInProgress.updateQueue.baseState = init),
		              (workInProgress.memoizedState = init),
		              workInProgress.flags & 256)
		            ) {
		              workInProgress = mountHostRootWithoutHydrating(
		                current,
		                workInProgress,
		                nextProps,
		                renderLanes
		              );
		              break a;
		            } else if (nextProps !== lazyComponent) {
		              lazyComponent = createCapturedValueAtFiber(
		                Error(formatProdErrorMessage(424)),
		                workInProgress
		              );
		              queueHydrationError(lazyComponent);
		              workInProgress = mountHostRootWithoutHydrating(
		                current,
		                workInProgress,
		                nextProps,
		                renderLanes
		              );
		              break a;
		            } else
		              for (
		                supportsHydration &&
		                  ((nextHydratableInstance =
		                    getFirstHydratableChildWithinContainer(
		                      workInProgress.stateNode.containerInfo
		                    )),
		                  (hydrationParentFiber = workInProgress),
		                  (isHydrating = !0),
		                  (hydrationErrors = null),
		                  (rootOrSingletonContext = !0)),
		                  renderLanes = mountChildFibers(
		                    workInProgress,
		                    null,
		                    nextProps,
		                    renderLanes
		                  ),
		                  workInProgress.child = renderLanes;
		                renderLanes;

		              )
		                (renderLanes.flags = (renderLanes.flags & -3) | 4096),
		                  (renderLanes = renderLanes.sibling);
		          else {
		            resetHydrationState();
		            if (nextProps === lazyComponent) {
		              workInProgress = bailoutOnAlreadyFinishedWork(
		                current,
		                workInProgress,
		                renderLanes
		              );
		              break a;
		            }
		            reconcileChildren(current, workInProgress, nextProps, renderLanes);
		          }
		          workInProgress = workInProgress.child;
		        }
		        return workInProgress;
		      case 26:
		        if (supportsResources)
		          return (
		            markRef(current, workInProgress),
		            null === current
		              ? (renderLanes = getResource(
		                  workInProgress.type,
		                  null,
		                  workInProgress.pendingProps,
		                  null
		                ))
		                ? (workInProgress.memoizedState = renderLanes)
		                : isHydrating ||
		                  (workInProgress.stateNode = createHoistableInstance(
		                    workInProgress.type,
		                    workInProgress.pendingProps,
		                    rootInstanceStackCursor.current,
		                    workInProgress
		                  ))
		              : (workInProgress.memoizedState = getResource(
		                  workInProgress.type,
		                  current.memoizedProps,
		                  workInProgress.pendingProps,
		                  current.memoizedState
		                )),
		            null
		          );
		      case 27:
		        if (supportsSingletons)
		          return (
		            pushHostContext(workInProgress),
		            null === current &&
		              supportsSingletons &&
		              isHydrating &&
		              ((lazyComponent = workInProgress.stateNode =
		                resolveSingletonInstance(
		                  workInProgress.type,
		                  workInProgress.pendingProps,
		                  rootInstanceStackCursor.current,
		                  contextStackCursor.current,
		                  !1
		                )),
		              (hydrationParentFiber = workInProgress),
		              (rootOrSingletonContext = !0),
		              (nextHydratableInstance =
		                getFirstHydratableChild(lazyComponent))),
		            (lazyComponent = workInProgress.pendingProps.children),
		            null !== current || isHydrating
		              ? reconcileChildren(
		                  current,
		                  workInProgress,
		                  lazyComponent,
		                  renderLanes
		                )
		              : (workInProgress.child = reconcileChildFibers(
		                  workInProgress,
		                  null,
		                  lazyComponent,
		                  renderLanes
		                )),
		            markRef(current, workInProgress),
		            workInProgress.child
		          );
		      case 5:
		        if (null === current && isHydrating) {
		          validateHydratableInstance(
		            workInProgress.type,
		            workInProgress.pendingProps,
		            contextStackCursor.current
		          );
		          if ((init = lazyComponent = nextHydratableInstance))
		            (lazyComponent = canHydrateInstance(
		              lazyComponent,
		              workInProgress.type,
		              workInProgress.pendingProps,
		              rootOrSingletonContext
		            )),
		              null !== lazyComponent
		                ? ((workInProgress.stateNode = lazyComponent),
		                  (hydrationParentFiber = workInProgress),
		                  (nextHydratableInstance =
		                    getFirstHydratableChild(lazyComponent)),
		                  (rootOrSingletonContext = !1),
		                  (init = !0))
		                : (init = !1);
		          init || throwOnHydrationMismatch(workInProgress);
		        }
		        pushHostContext(workInProgress);
		        init = workInProgress.type;
		        nextProps = workInProgress.pendingProps;
		        nextState = null !== current ? current.memoizedProps : null;
		        lazyComponent = nextProps.children;
		        shouldSetTextContent(init, nextProps)
		          ? (lazyComponent = null)
		          : null !== nextState &&
		            shouldSetTextContent(init, nextState) &&
		            (workInProgress.flags |= 32);
		        null !== workInProgress.memoizedState &&
		          ((init = renderWithHooks(
		            current,
		            workInProgress,
		            TransitionAwareHostComponent,
		            null,
		            null,
		            renderLanes
		          )),
		          isPrimaryRenderer
		            ? (HostTransitionContext._currentValue = init)
		            : (HostTransitionContext._currentValue2 = init));
		        markRef(current, workInProgress);
		        reconcileChildren(current, workInProgress, lazyComponent, renderLanes);
		        return workInProgress.child;
		      case 6:
		        if (null === current && isHydrating) {
		          validateHydratableTextInstance(
		            workInProgress.pendingProps,
		            contextStackCursor.current
		          );
		          if ((current = renderLanes = nextHydratableInstance))
		            (renderLanes = canHydrateTextInstance(
		              renderLanes,
		              workInProgress.pendingProps,
		              rootOrSingletonContext
		            )),
		              null !== renderLanes
		                ? ((workInProgress.stateNode = renderLanes),
		                  (hydrationParentFiber = workInProgress),
		                  (nextHydratableInstance = null),
		                  (current = !0))
		                : (current = !1);
		          current || throwOnHydrationMismatch(workInProgress);
		        }
		        return null;
		      case 13:
		        return updateSuspenseComponent(current, workInProgress, renderLanes);
		      case 4:
		        return (
		          pushHostContainer(
		            workInProgress,
		            workInProgress.stateNode.containerInfo
		          ),
		          (lazyComponent = workInProgress.pendingProps),
		          null === current
		            ? (workInProgress.child = reconcileChildFibers(
		                workInProgress,
		                null,
		                lazyComponent,
		                renderLanes
		              ))
		            : reconcileChildren(
		                current,
		                workInProgress,
		                lazyComponent,
		                renderLanes
		              ),
		          workInProgress.child
		        );
		      case 11:
		        return updateForwardRef(
		          current,
		          workInProgress,
		          workInProgress.type,
		          workInProgress.pendingProps,
		          renderLanes
		        );
		      case 7:
		        return (
		          reconcileChildren(
		            current,
		            workInProgress,
		            workInProgress.pendingProps,
		            renderLanes
		          ),
		          workInProgress.child
		        );
		      case 8:
		        return (
		          reconcileChildren(
		            current,
		            workInProgress,
		            workInProgress.pendingProps.children,
		            renderLanes
		          ),
		          workInProgress.child
		        );
		      case 12:
		        return (
		          reconcileChildren(
		            current,
		            workInProgress,
		            workInProgress.pendingProps.children,
		            renderLanes
		          ),
		          workInProgress.child
		        );
		      case 10:
		        return (
		          (lazyComponent = workInProgress.pendingProps),
		          pushProvider(
		            workInProgress,
		            workInProgress.type,
		            lazyComponent.value
		          ),
		          reconcileChildren(
		            current,
		            workInProgress,
		            lazyComponent.children,
		            renderLanes
		          ),
		          workInProgress.child
		        );
		      case 9:
		        return (
		          (init = workInProgress.type._context),
		          (lazyComponent = workInProgress.pendingProps.children),
		          prepareToReadContext(workInProgress),
		          (init = readContext(init)),
		          (lazyComponent = lazyComponent(init)),
		          (workInProgress.flags |= 1),
		          reconcileChildren(
		            current,
		            workInProgress,
		            lazyComponent,
		            renderLanes
		          ),
		          workInProgress.child
		        );
		      case 14:
		        return updateMemoComponent(
		          current,
		          workInProgress,
		          workInProgress.type,
		          workInProgress.pendingProps,
		          renderLanes
		        );
		      case 15:
		        return updateSimpleMemoComponent(
		          current,
		          workInProgress,
		          workInProgress.type,
		          workInProgress.pendingProps,
		          renderLanes
		        );
		      case 19:
		        return updateSuspenseListComponent(
		          current,
		          workInProgress,
		          renderLanes
		        );
		      case 22:
		        return updateOffscreenComponent(current, workInProgress, renderLanes);
		      case 24:
		        return (
		          prepareToReadContext(workInProgress),
		          (lazyComponent = readContext(CacheContext)),
		          null === current
		            ? ((init = peekCacheFromPool()),
		              null === init &&
		                ((init = workInProgressRoot),
		                (nextProps = createCache()),
		                (init.pooledCache = nextProps),
		                nextProps.refCount++,
		                null !== nextProps && (init.pooledCacheLanes |= renderLanes),
		                (init = nextProps)),
		              (workInProgress.memoizedState = {
		                parent: lazyComponent,
		                cache: init
		              }),
		              initializeUpdateQueue(workInProgress),
		              pushProvider(workInProgress, CacheContext, init))
		            : (0 !== (current.lanes & renderLanes) &&
		                (cloneUpdateQueue(current, workInProgress),
		                processUpdateQueue(workInProgress, null, null, renderLanes),
		                suspendIfUpdateReadFromEntangledAsyncAction()),
		              (init = current.memoizedState),
		              (nextProps = workInProgress.memoizedState),
		              init.parent !== lazyComponent
		                ? ((init = { parent: lazyComponent, cache: lazyComponent }),
		                  (workInProgress.memoizedState = init),
		                  0 === workInProgress.lanes &&
		                    (workInProgress.memoizedState =
		                      workInProgress.updateQueue.baseState =
		                        init),
		                  pushProvider(workInProgress, CacheContext, lazyComponent))
		                : ((lazyComponent = nextProps.cache),
		                  pushProvider(workInProgress, CacheContext, lazyComponent),
		                  lazyComponent !== init.cache &&
		                    propagateContextChanges(
		                      workInProgress,
		                      [CacheContext],
		                      renderLanes,
		                      !0
		                    ))),
		          reconcileChildren(
		            current,
		            workInProgress,
		            workInProgress.pendingProps.children,
		            renderLanes
		          ),
		          workInProgress.child
		        );
		      case 29:
		        throw workInProgress.pendingProps;
		    }
		    throw Error(formatProdErrorMessage(156, workInProgress.tag));
		  }
		  function pushProvider(providerFiber, context, nextValue) {
		    isPrimaryRenderer
		      ? (push(valueCursor, context._currentValue),
		        (context._currentValue = nextValue))
		      : (push(valueCursor, context._currentValue2),
		        (context._currentValue2 = nextValue));
		  }
		  function popProvider(context) {
		    var currentValue = valueCursor.current;
		    isPrimaryRenderer
		      ? (context._currentValue = currentValue)
		      : (context._currentValue2 = currentValue);
		    pop(valueCursor);
		  }
		  function scheduleContextWorkOnParentPath(
		    parent,
		    renderLanes,
		    propagationRoot
		  ) {
		    for (; null !== parent; ) {
		      var alternate = parent.alternate;
		      (parent.childLanes & renderLanes) !== renderLanes
		        ? ((parent.childLanes |= renderLanes),
		          null !== alternate && (alternate.childLanes |= renderLanes))
		        : null !== alternate &&
		          (alternate.childLanes & renderLanes) !== renderLanes &&
		          (alternate.childLanes |= renderLanes);
		      if (parent === propagationRoot) break;
		      parent = parent.return;
		    }
		  }
		  function propagateContextChanges(
		    workInProgress,
		    contexts,
		    renderLanes,
		    forcePropagateEntireTree
		  ) {
		    var fiber = workInProgress.child;
		    null !== fiber && (fiber.return = workInProgress);
		    for (; null !== fiber; ) {
		      var list = fiber.dependencies;
		      if (null !== list) {
		        var nextFiber = fiber.child;
		        list = list.firstContext;
		        a: for (; null !== list; ) {
		          var dependency = list;
		          list = fiber;
		          for (var i = 0; i < contexts.length; i++)
		            if (dependency.context === contexts[i]) {
		              list.lanes |= renderLanes;
		              dependency = list.alternate;
		              null !== dependency && (dependency.lanes |= renderLanes);
		              scheduleContextWorkOnParentPath(
		                list.return,
		                renderLanes,
		                workInProgress
		              );
		              forcePropagateEntireTree || (nextFiber = null);
		              break a;
		            }
		          list = dependency.next;
		        }
		      } else if (18 === fiber.tag) {
		        nextFiber = fiber.return;
		        if (null === nextFiber) throw Error(formatProdErrorMessage(341));
		        nextFiber.lanes |= renderLanes;
		        list = nextFiber.alternate;
		        null !== list && (list.lanes |= renderLanes);
		        scheduleContextWorkOnParentPath(nextFiber, renderLanes, workInProgress);
		        nextFiber = null;
		      } else nextFiber = fiber.child;
		      if (null !== nextFiber) nextFiber.return = fiber;
		      else
		        for (nextFiber = fiber; null !== nextFiber; ) {
		          if (nextFiber === workInProgress) {
		            nextFiber = null;
		            break;
		          }
		          fiber = nextFiber.sibling;
		          if (null !== fiber) {
		            fiber.return = nextFiber.return;
		            nextFiber = fiber;
		            break;
		          }
		          nextFiber = nextFiber.return;
		        }
		      fiber = nextFiber;
		    }
		  }
		  function propagateParentContextChanges(
		    current,
		    workInProgress,
		    renderLanes,
		    forcePropagateEntireTree
		  ) {
		    current = null;
		    for (
		      var parent = workInProgress, isInsidePropagationBailout = !1;
		      null !== parent;

		    ) {
		      if (!isInsidePropagationBailout)
		        if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = !0;
		        else if (0 !== (parent.flags & 262144)) break;
		      if (10 === parent.tag) {
		        var currentParent = parent.alternate;
		        if (null === currentParent) throw Error(formatProdErrorMessage(387));
		        currentParent = currentParent.memoizedProps;
		        if (null !== currentParent) {
		          var context = parent.type;
		          objectIs(parent.pendingProps.value, currentParent.value) ||
		            (null !== current ? current.push(context) : (current = [context]));
		        }
		      } else if (parent === hostTransitionProviderCursor.current) {
		        currentParent = parent.alternate;
		        if (null === currentParent) throw Error(formatProdErrorMessage(387));
		        currentParent.memoizedState.memoizedState !==
		          parent.memoizedState.memoizedState &&
		          (null !== current
		            ? current.push(HostTransitionContext)
		            : (current = [HostTransitionContext]));
		      }
		      parent = parent.return;
		    }
		    null !== current &&
		      propagateContextChanges(
		        workInProgress,
		        current,
		        renderLanes,
		        forcePropagateEntireTree
		      );
		    workInProgress.flags |= 262144;
		  }
		  function checkIfContextChanged(currentDependencies) {
		    for (
		      currentDependencies = currentDependencies.firstContext;
		      null !== currentDependencies;

		    ) {
		      var context = currentDependencies.context;
		      if (
		        !objectIs(
		          isPrimaryRenderer ? context._currentValue : context._currentValue2,
		          currentDependencies.memoizedValue
		        )
		      )
		        return !0;
		      currentDependencies = currentDependencies.next;
		    }
		    return !1;
		  }
		  function prepareToReadContext(workInProgress) {
		    currentlyRenderingFiber = workInProgress;
		    lastContextDependency = null;
		    workInProgress = workInProgress.dependencies;
		    null !== workInProgress && (workInProgress.firstContext = null);
		  }
		  function readContext(context) {
		    return readContextForConsumer(currentlyRenderingFiber, context);
		  }
		  function readContextDuringReconciliation(consumer, context) {
		    null === currentlyRenderingFiber && prepareToReadContext(consumer);
		    return readContextForConsumer(consumer, context);
		  }
		  function readContextForConsumer(consumer, context) {
		    var value = isPrimaryRenderer
		      ? context._currentValue
		      : context._currentValue2;
		    context = { context: context, memoizedValue: value, next: null };
		    if (null === lastContextDependency) {
		      if (null === consumer) throw Error(formatProdErrorMessage(308));
		      lastContextDependency = context;
		      consumer.dependencies = { lanes: 0, firstContext: context };
		      consumer.flags |= 524288;
		    } else lastContextDependency = lastContextDependency.next = context;
		    return value;
		  }
		  function createCache() {
		    return {
		      controller: new AbortControllerLocal(),
		      data: new Map(),
		      refCount: 0
		    };
		  }
		  function releaseCache(cache) {
		    cache.refCount--;
		    0 === cache.refCount &&
		      scheduleCallback$1(NormalPriority, function () {
		        cache.controller.abort();
		      });
		  }
		  function peekCacheFromPool() {
		    var cacheResumedFromPreviousRender = resumedCache.current;
		    return null !== cacheResumedFromPreviousRender
		      ? cacheResumedFromPreviousRender
		      : workInProgressRoot.pooledCache;
		  }
		  function pushTransition(offscreenWorkInProgress, prevCachePool) {
		    null === prevCachePool
		      ? push(resumedCache, resumedCache.current)
		      : push(resumedCache, prevCachePool.pool);
		  }
		  function getSuspendedCache() {
		    var cacheFromPool = peekCacheFromPool();
		    return null === cacheFromPool
		      ? null
		      : {
		          parent: isPrimaryRenderer
		            ? CacheContext._currentValue
		            : CacheContext._currentValue2,
		          pool: cacheFromPool
		        };
		  }
		  function markUpdate(workInProgress) {
		    workInProgress.flags |= 4;
		  }
		  function doesRequireClone(current, completedWork) {
		    if (null !== current && current.child === completedWork.child) return !1;
		    if (0 !== (completedWork.flags & 16)) return !0;
		    for (current = completedWork.child; null !== current; ) {
		      if (0 !== (current.flags & 13878) || 0 !== (current.subtreeFlags & 13878))
		        return !0;
		      current = current.sibling;
		    }
		    return !1;
		  }
		  function appendAllChildren(
		    parent,
		    workInProgress,
		    needsVisibilityToggle,
		    isHidden
		  ) {
		    if (supportsMutation)
		      for (
		        needsVisibilityToggle = workInProgress.child;
		        null !== needsVisibilityToggle;

		      ) {
		        if (5 === needsVisibilityToggle.tag || 6 === needsVisibilityToggle.tag)
		          appendInitialChild(parent, needsVisibilityToggle.stateNode);
		        else if (
		          !(
		            4 === needsVisibilityToggle.tag ||
		            (supportsSingletons && 27 === needsVisibilityToggle.tag)
		          ) &&
		          null !== needsVisibilityToggle.child
		        ) {
		          needsVisibilityToggle.child.return = needsVisibilityToggle;
		          needsVisibilityToggle = needsVisibilityToggle.child;
		          continue;
		        }
		        if (needsVisibilityToggle === workInProgress) break;
		        for (; null === needsVisibilityToggle.sibling; ) {
		          if (
		            null === needsVisibilityToggle.return ||
		            needsVisibilityToggle.return === workInProgress
		          )
		            return;
		          needsVisibilityToggle = needsVisibilityToggle.return;
		        }
		        needsVisibilityToggle.sibling.return = needsVisibilityToggle.return;
		        needsVisibilityToggle = needsVisibilityToggle.sibling;
		      }
		    else if (supportsPersistence)
		      for (var node$91 = workInProgress.child; null !== node$91; ) {
		        if (5 === node$91.tag) {
		          var instance = node$91.stateNode;
		          needsVisibilityToggle &&
		            isHidden &&
		            (instance = cloneHiddenInstance(
		              instance,
		              node$91.type,
		              node$91.memoizedProps
		            ));
		          appendInitialChild(parent, instance);
		        } else if (6 === node$91.tag)
		          (instance = node$91.stateNode),
		            needsVisibilityToggle &&
		              isHidden &&
		              (instance = cloneHiddenTextInstance(
		                instance,
		                node$91.memoizedProps
		              )),
		            appendInitialChild(parent, instance);
		        else if (4 !== node$91.tag)
		          if (22 === node$91.tag && null !== node$91.memoizedState)
		            (instance = node$91.child),
		              null !== instance && (instance.return = node$91),
		              appendAllChildren(parent, node$91, !0, !0);
		          else if (null !== node$91.child) {
		            node$91.child.return = node$91;
		            node$91 = node$91.child;
		            continue;
		          }
		        if (node$91 === workInProgress) break;
		        for (; null === node$91.sibling; ) {
		          if (null === node$91.return || node$91.return === workInProgress)
		            return;
		          node$91 = node$91.return;
		        }
		        node$91.sibling.return = node$91.return;
		        node$91 = node$91.sibling;
		      }
		  }
		  function appendAllChildrenToContainer(
		    containerChildSet,
		    workInProgress,
		    needsVisibilityToggle,
		    isHidden
		  ) {
		    if (supportsPersistence)
		      for (var node = workInProgress.child; null !== node; ) {
		        if (5 === node.tag) {
		          var instance = node.stateNode;
		          needsVisibilityToggle &&
		            isHidden &&
		            (instance = cloneHiddenInstance(
		              instance,
		              node.type,
		              node.memoizedProps
		            ));
		          appendChildToContainerChildSet(containerChildSet, instance);
		        } else if (6 === node.tag)
		          (instance = node.stateNode),
		            needsVisibilityToggle &&
		              isHidden &&
		              (instance = cloneHiddenTextInstance(
		                instance,
		                node.memoizedProps
		              )),
		            appendChildToContainerChildSet(containerChildSet, instance);
		        else if (4 !== node.tag)
		          if (22 === node.tag && null !== node.memoizedState)
		            (instance = node.child),
		              null !== instance && (instance.return = node),
		              appendAllChildrenToContainer(
		                containerChildSet,
		                node,
		                !(
		                  null !== node.memoizedProps &&
		                  "manual" === node.memoizedProps.mode
		                ),
		                !0
		              );
		          else if (null !== node.child) {
		            node.child.return = node;
		            node = node.child;
		            continue;
		          }
		        if (node === workInProgress) break;
		        for (; null === node.sibling; ) {
		          if (null === node.return || node.return === workInProgress) return;
		          node = node.return;
		        }
		        node.sibling.return = node.return;
		        node = node.sibling;
		      }
		  }
		  function updateHostContainer(current, workInProgress) {
		    if (supportsPersistence && doesRequireClone(current, workInProgress)) {
		      current = workInProgress.stateNode;
		      var container = current.containerInfo,
		        newChildSet = createContainerChildSet();
		      appendAllChildrenToContainer(newChildSet, workInProgress, !1, !1);
		      current.pendingChildren = newChildSet;
		      markUpdate(workInProgress);
		      finalizeContainerChildren(container, newChildSet);
		    }
		  }
		  function updateHostComponent(current, workInProgress, type, newProps) {
		    if (supportsMutation)
		      current.memoizedProps !== newProps && markUpdate(workInProgress);
		    else if (supportsPersistence) {
		      var currentInstance = current.stateNode,
		        oldProps$94 = current.memoizedProps;
		      if (
		        (current = doesRequireClone(current, workInProgress)) ||
		        oldProps$94 !== newProps
		      ) {
		        var currentHostContext = contextStackCursor.current;
		        oldProps$94 = cloneInstance(
		          currentInstance,
		          type,
		          oldProps$94,
		          newProps,
		          !current,
		          null
		        );
		        oldProps$94 === currentInstance
		          ? (workInProgress.stateNode = currentInstance)
		          : (finalizeInitialChildren(
		              oldProps$94,
		              type,
		              newProps,
		              currentHostContext
		            ) && markUpdate(workInProgress),
		            (workInProgress.stateNode = oldProps$94),
		            current
		              ? appendAllChildren(oldProps$94, workInProgress, !1, !1)
		              : markUpdate(workInProgress));
		      } else workInProgress.stateNode = currentInstance;
		    }
		  }
		  function preloadInstanceAndSuspendIfNeeded(workInProgress, type, props) {
		    if (maySuspendCommit(type, props)) {
		      if (((workInProgress.flags |= 16777216), !preloadInstance(type, props)))
		        if (shouldRemainOnPreviousScreen()) workInProgress.flags |= 8192;
		        else
		          throw (
		            ((suspendedThenable = noopSuspenseyCommitThenable),
		            SuspenseyCommitException)
		          );
		    } else workInProgress.flags &= -16777217;
		  }
		  function preloadResourceAndSuspendIfNeeded(workInProgress, resource) {
		    if (mayResourceSuspendCommit(resource)) {
		      if (((workInProgress.flags |= 16777216), !preloadResource(resource)))
		        if (shouldRemainOnPreviousScreen()) workInProgress.flags |= 8192;
		        else
		          throw (
		            ((suspendedThenable = noopSuspenseyCommitThenable),
		            SuspenseyCommitException)
		          );
		    } else workInProgress.flags &= -16777217;
		  }
		  function scheduleRetryEffect(workInProgress, retryQueue) {
		    null !== retryQueue && (workInProgress.flags |= 4);
		    workInProgress.flags & 16384 &&
		      ((retryQueue =
		        22 !== workInProgress.tag ? claimNextRetryLane() : 536870912),
		      (workInProgress.lanes |= retryQueue),
		      (workInProgressSuspendedRetryLanes |= retryQueue));
		  }
		  function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
		    if (!isHydrating)
		      switch (renderState.tailMode) {
		        case "hidden":
		          hasRenderedATailFallback = renderState.tail;
		          for (var lastTailNode = null; null !== hasRenderedATailFallback; )
		            null !== hasRenderedATailFallback.alternate &&
		              (lastTailNode = hasRenderedATailFallback),
		              (hasRenderedATailFallback = hasRenderedATailFallback.sibling);
		          null === lastTailNode
		            ? (renderState.tail = null)
		            : (lastTailNode.sibling = null);
		          break;
		        case "collapsed":
		          lastTailNode = renderState.tail;
		          for (var lastTailNode$96 = null; null !== lastTailNode; )
		            null !== lastTailNode.alternate && (lastTailNode$96 = lastTailNode),
		              (lastTailNode = lastTailNode.sibling);
		          null === lastTailNode$96
		            ? hasRenderedATailFallback || null === renderState.tail
		              ? (renderState.tail = null)
		              : (renderState.tail.sibling = null)
		            : (lastTailNode$96.sibling = null);
		      }
		  }
		  function bubbleProperties(completedWork) {
		    var didBailout =
		        null !== completedWork.alternate &&
		        completedWork.alternate.child === completedWork.child,
		      newChildLanes = 0,
		      subtreeFlags = 0;
		    if (didBailout)
		      for (var child$97 = completedWork.child; null !== child$97; )
		        (newChildLanes |= child$97.lanes | child$97.childLanes),
		          (subtreeFlags |= child$97.subtreeFlags & 31457280),
		          (subtreeFlags |= child$97.flags & 31457280),
		          (child$97.return = completedWork),
		          (child$97 = child$97.sibling);
		    else
		      for (child$97 = completedWork.child; null !== child$97; )
		        (newChildLanes |= child$97.lanes | child$97.childLanes),
		          (subtreeFlags |= child$97.subtreeFlags),
		          (subtreeFlags |= child$97.flags),
		          (child$97.return = completedWork),
		          (child$97 = child$97.sibling);
		    completedWork.subtreeFlags |= subtreeFlags;
		    completedWork.childLanes = newChildLanes;
		    return didBailout;
		  }
		  function completeWork(current, workInProgress, renderLanes) {
		    var newProps = workInProgress.pendingProps;
		    popTreeContext(workInProgress);
		    switch (workInProgress.tag) {
		      case 16:
		      case 15:
		      case 0:
		      case 11:
		      case 7:
		      case 8:
		      case 12:
		      case 9:
		      case 14:
		        return bubbleProperties(workInProgress), null;
		      case 1:
		        return bubbleProperties(workInProgress), null;
		      case 3:
		        renderLanes = workInProgress.stateNode;
		        newProps = null;
		        null !== current && (newProps = current.memoizedState.cache);
		        workInProgress.memoizedState.cache !== newProps &&
		          (workInProgress.flags |= 2048);
		        popProvider(CacheContext);
		        popHostContainer();
		        renderLanes.pendingContext &&
		          ((renderLanes.context = renderLanes.pendingContext),
		          (renderLanes.pendingContext = null));
		        if (null === current || null === current.child)
		          popHydrationState(workInProgress)
		            ? markUpdate(workInProgress)
		            : null === current ||
		              (current.memoizedState.isDehydrated &&
		                0 === (workInProgress.flags & 256)) ||
		              ((workInProgress.flags |= 1024),
		              null !== hydrationErrors &&
		                (queueRecoverableErrors(hydrationErrors),
		                (hydrationErrors = null)));
		        updateHostContainer(current, workInProgress);
		        bubbleProperties(workInProgress);
		        return null;
		      case 26:
		        if (supportsResources) {
		          renderLanes = workInProgress.type;
		          var nextResource = workInProgress.memoizedState;
		          null === current
		            ? (markUpdate(workInProgress),
		              null !== nextResource
		                ? (bubbleProperties(workInProgress),
		                  preloadResourceAndSuspendIfNeeded(
		                    workInProgress,
		                    nextResource
		                  ))
		                : (bubbleProperties(workInProgress),
		                  preloadInstanceAndSuspendIfNeeded(
		                    workInProgress,
		                    renderLanes,
		                    newProps
		                  )))
		            : nextResource
		              ? nextResource !== current.memoizedState
		                ? (markUpdate(workInProgress),
		                  bubbleProperties(workInProgress),
		                  preloadResourceAndSuspendIfNeeded(
		                    workInProgress,
		                    nextResource
		                  ))
		                : (bubbleProperties(workInProgress),
		                  (workInProgress.flags &= -16777217))
		              : (supportsMutation
		                  ? current.memoizedProps !== newProps &&
		                    markUpdate(workInProgress)
		                  : updateHostComponent(
		                      current,
		                      workInProgress,
		                      renderLanes,
		                      newProps
		                    ),
		                bubbleProperties(workInProgress),
		                preloadInstanceAndSuspendIfNeeded(
		                  workInProgress,
		                  renderLanes,
		                  newProps
		                ));
		          return null;
		        }
		      case 27:
		        if (supportsSingletons) {
		          popHostContext(workInProgress);
		          renderLanes = rootInstanceStackCursor.current;
		          nextResource = workInProgress.type;
		          if (null !== current && null != workInProgress.stateNode)
		            supportsMutation
		              ? current.memoizedProps !== newProps && markUpdate(workInProgress)
		              : updateHostComponent(
		                  current,
		                  workInProgress,
		                  nextResource,
		                  newProps
		                );
		          else {
		            if (!newProps) {
		              if (null === workInProgress.stateNode)
		                throw Error(formatProdErrorMessage(166));
		              bubbleProperties(workInProgress);
		              return null;
		            }
		            current = contextStackCursor.current;
		            popHydrationState(workInProgress)
		              ? prepareToHydrateHostInstance(workInProgress, current)
		              : ((current = resolveSingletonInstance(
		                  nextResource,
		                  newProps,
		                  renderLanes,
		                  current,
		                  !0
		                )),
		                (workInProgress.stateNode = current),
		                markUpdate(workInProgress));
		          }
		          bubbleProperties(workInProgress);
		          return null;
		        }
		      case 5:
		        popHostContext(workInProgress);
		        renderLanes = workInProgress.type;
		        if (null !== current && null != workInProgress.stateNode)
		          updateHostComponent(current, workInProgress, renderLanes, newProps);
		        else {
		          if (!newProps) {
		            if (null === workInProgress.stateNode)
		              throw Error(formatProdErrorMessage(166));
		            bubbleProperties(workInProgress);
		            return null;
		          }
		          current = contextStackCursor.current;
		          popHydrationState(workInProgress)
		            ? prepareToHydrateHostInstance(workInProgress, current)
		            : ((nextResource = createInstance(
		                renderLanes,
		                newProps,
		                rootInstanceStackCursor.current,
		                current,
		                workInProgress
		              )),
		              appendAllChildren(nextResource, workInProgress, !1, !1),
		              (workInProgress.stateNode = nextResource),
		              finalizeInitialChildren(
		                nextResource,
		                renderLanes,
		                newProps,
		                current
		              ) && markUpdate(workInProgress));
		        }
		        bubbleProperties(workInProgress);
		        preloadInstanceAndSuspendIfNeeded(
		          workInProgress,
		          workInProgress.type,
		          workInProgress.pendingProps
		        );
		        return null;
		      case 6:
		        if (current && null != workInProgress.stateNode)
		          (renderLanes = current.memoizedProps),
		            supportsMutation
		              ? renderLanes !== newProps && markUpdate(workInProgress)
		              : supportsPersistence &&
		                (renderLanes !== newProps
		                  ? ((workInProgress.stateNode = createTextInstance(
		                      newProps,
		                      rootInstanceStackCursor.current,
		                      contextStackCursor.current,
		                      workInProgress
		                    )),
		                    markUpdate(workInProgress))
		                  : (workInProgress.stateNode = current.stateNode));
		        else {
		          if ("string" !== typeof newProps && null === workInProgress.stateNode)
		            throw Error(formatProdErrorMessage(166));
		          current = rootInstanceStackCursor.current;
		          renderLanes = contextStackCursor.current;
		          if (popHydrationState(workInProgress)) {
		            if (!supportsHydration) throw Error(formatProdErrorMessage(176));
		            current = workInProgress.stateNode;
		            renderLanes = workInProgress.memoizedProps;
		            newProps = null;
		            nextResource = hydrationParentFiber;
		            if (null !== nextResource)
		              switch (nextResource.tag) {
		                case 27:
		                case 5:
		                  newProps = nextResource.memoizedProps;
		              }
		            hydrateTextInstance(
		              current,
		              renderLanes,
		              workInProgress,
		              newProps
		            ) || throwOnHydrationMismatch(workInProgress);
		          } else
		            workInProgress.stateNode = createTextInstance(
		              newProps,
		              current,
		              renderLanes,
		              workInProgress
		            );
		        }
		        bubbleProperties(workInProgress);
		        return null;
		      case 13:
		        newProps = workInProgress.memoizedState;
		        if (
		          null === current ||
		          (null !== current.memoizedState &&
		            null !== current.memoizedState.dehydrated)
		        ) {
		          nextResource = popHydrationState(workInProgress);
		          if (null !== newProps && null !== newProps.dehydrated) {
		            if (null === current) {
		              if (!nextResource) throw Error(formatProdErrorMessage(318));
		              if (!supportsHydration) throw Error(formatProdErrorMessage(344));
		              nextResource = workInProgress.memoizedState;
		              nextResource =
		                null !== nextResource ? nextResource.dehydrated : null;
		              if (!nextResource) throw Error(formatProdErrorMessage(317));
		              hydrateSuspenseInstance(nextResource, workInProgress);
		            } else
		              resetHydrationState(),
		                0 === (workInProgress.flags & 128) &&
		                  (workInProgress.memoizedState = null),
		                (workInProgress.flags |= 4);
		            bubbleProperties(workInProgress);
		            nextResource = !1;
		          } else
		            null !== hydrationErrors &&
		              (queueRecoverableErrors(hydrationErrors),
		              (hydrationErrors = null)),
		              (nextResource = !0);
		          if (!nextResource) {
		            if (workInProgress.flags & 256)
		              return popSuspenseHandler(workInProgress), workInProgress;
		            popSuspenseHandler(workInProgress);
		            return null;
		          }
		        }
		        popSuspenseHandler(workInProgress);
		        if (0 !== (workInProgress.flags & 128))
		          return (workInProgress.lanes = renderLanes), workInProgress;
		        renderLanes = null !== newProps;
		        current = null !== current && null !== current.memoizedState;
		        if (renderLanes) {
		          newProps = workInProgress.child;
		          nextResource = null;
		          null !== newProps.alternate &&
		            null !== newProps.alternate.memoizedState &&
		            null !== newProps.alternate.memoizedState.cachePool &&
		            (nextResource = newProps.alternate.memoizedState.cachePool.pool);
		          var cache$110 = null;
		          null !== newProps.memoizedState &&
		            null !== newProps.memoizedState.cachePool &&
		            (cache$110 = newProps.memoizedState.cachePool.pool);
		          cache$110 !== nextResource && (newProps.flags |= 2048);
		        }
		        renderLanes !== current &&
		          renderLanes &&
		          (workInProgress.child.flags |= 8192);
		        scheduleRetryEffect(workInProgress, workInProgress.updateQueue);
		        bubbleProperties(workInProgress);
		        return null;
		      case 4:
		        return (
		          popHostContainer(),
		          updateHostContainer(current, workInProgress),
		          null === current &&
		            preparePortalMount(workInProgress.stateNode.containerInfo),
		          bubbleProperties(workInProgress),
		          null
		        );
		      case 10:
		        return (
		          popProvider(workInProgress.type),
		          bubbleProperties(workInProgress),
		          null
		        );
		      case 19:
		        pop(suspenseStackCursor);
		        nextResource = workInProgress.memoizedState;
		        if (null === nextResource)
		          return bubbleProperties(workInProgress), null;
		        newProps = 0 !== (workInProgress.flags & 128);
		        cache$110 = nextResource.rendering;
		        if (null === cache$110)
		          if (newProps) cutOffTailIfNeeded(nextResource, !1);
		          else {
		            if (
		              0 !== workInProgressRootExitStatus ||
		              (null !== current && 0 !== (current.flags & 128))
		            )
		              for (current = workInProgress.child; null !== current; ) {
		                cache$110 = findFirstSuspended(current);
		                if (null !== cache$110) {
		                  workInProgress.flags |= 128;
		                  cutOffTailIfNeeded(nextResource, !1);
		                  current = cache$110.updateQueue;
		                  workInProgress.updateQueue = current;
		                  scheduleRetryEffect(workInProgress, current);
		                  workInProgress.subtreeFlags = 0;
		                  current = renderLanes;
		                  for (
		                    renderLanes = workInProgress.child;
		                    null !== renderLanes;

		                  )
		                    resetWorkInProgress(renderLanes, current),
		                      (renderLanes = renderLanes.sibling);
		                  push(
		                    suspenseStackCursor,
		                    (suspenseStackCursor.current & 1) | 2
		                  );
		                  return workInProgress.child;
		                }
		                current = current.sibling;
		              }
		            null !== nextResource.tail &&
		              now() > workInProgressRootRenderTargetTime &&
		              ((workInProgress.flags |= 128),
		              (newProps = !0),
		              cutOffTailIfNeeded(nextResource, !1),
		              (workInProgress.lanes = 4194304));
		          }
		        else {
		          if (!newProps)
		            if (((current = findFirstSuspended(cache$110)), null !== current)) {
		              if (
		                ((workInProgress.flags |= 128),
		                (newProps = !0),
		                (current = current.updateQueue),
		                (workInProgress.updateQueue = current),
		                scheduleRetryEffect(workInProgress, current),
		                cutOffTailIfNeeded(nextResource, !0),
		                null === nextResource.tail &&
		                  "hidden" === nextResource.tailMode &&
		                  !cache$110.alternate &&
		                  !isHydrating)
		              )
		                return bubbleProperties(workInProgress), null;
		            } else
		              2 * now() - nextResource.renderingStartTime >
		                workInProgressRootRenderTargetTime &&
		                536870912 !== renderLanes &&
		                ((workInProgress.flags |= 128),
		                (newProps = !0),
		                cutOffTailIfNeeded(nextResource, !1),
		                (workInProgress.lanes = 4194304));
		          nextResource.isBackwards
		            ? ((cache$110.sibling = workInProgress.child),
		              (workInProgress.child = cache$110))
		            : ((current = nextResource.last),
		              null !== current
		                ? (current.sibling = cache$110)
		                : (workInProgress.child = cache$110),
		              (nextResource.last = cache$110));
		        }
		        if (null !== nextResource.tail)
		          return (
		            (workInProgress = nextResource.tail),
		            (nextResource.rendering = workInProgress),
		            (nextResource.tail = workInProgress.sibling),
		            (nextResource.renderingStartTime = now()),
		            (workInProgress.sibling = null),
		            (current = suspenseStackCursor.current),
		            push(
		              suspenseStackCursor,
		              newProps ? (current & 1) | 2 : current & 1
		            ),
		            workInProgress
		          );
		        bubbleProperties(workInProgress);
		        return null;
		      case 22:
		      case 23:
		        return (
		          popSuspenseHandler(workInProgress),
		          popHiddenContext(),
		          (newProps = null !== workInProgress.memoizedState),
		          null !== current
		            ? (null !== current.memoizedState) !== newProps &&
		              (workInProgress.flags |= 8192)
		            : newProps && (workInProgress.flags |= 8192),
		          newProps
		            ? 0 !== (renderLanes & 536870912) &&
		              0 === (workInProgress.flags & 128) &&
		              (bubbleProperties(workInProgress),
		              workInProgress.subtreeFlags & 6 && (workInProgress.flags |= 8192))
		            : bubbleProperties(workInProgress),
		          (renderLanes = workInProgress.updateQueue),
		          null !== renderLanes &&
		            scheduleRetryEffect(workInProgress, renderLanes.retryQueue),
		          (renderLanes = null),
		          null !== current &&
		            null !== current.memoizedState &&
		            null !== current.memoizedState.cachePool &&
		            (renderLanes = current.memoizedState.cachePool.pool),
		          (newProps = null),
		          null !== workInProgress.memoizedState &&
		            null !== workInProgress.memoizedState.cachePool &&
		            (newProps = workInProgress.memoizedState.cachePool.pool),
		          newProps !== renderLanes && (workInProgress.flags |= 2048),
		          null !== current && pop(resumedCache),
		          null
		        );
		      case 24:
		        return (
		          (renderLanes = null),
		          null !== current && (renderLanes = current.memoizedState.cache),
		          workInProgress.memoizedState.cache !== renderLanes &&
		            (workInProgress.flags |= 2048),
		          popProvider(CacheContext),
		          bubbleProperties(workInProgress),
		          null
		        );
		      case 25:
		        return null;
		    }
		    throw Error(formatProdErrorMessage(156, workInProgress.tag));
		  }
		  function unwindWork(current, workInProgress) {
		    popTreeContext(workInProgress);
		    switch (workInProgress.tag) {
		      case 1:
		        return (
		          (current = workInProgress.flags),
		          current & 65536
		            ? ((workInProgress.flags = (current & -65537) | 128),
		              workInProgress)
		            : null
		        );
		      case 3:
		        return (
		          popProvider(CacheContext),
		          popHostContainer(),
		          (current = workInProgress.flags),
		          0 !== (current & 65536) && 0 === (current & 128)
		            ? ((workInProgress.flags = (current & -65537) | 128),
		              workInProgress)
		            : null
		        );
		      case 26:
		      case 27:
		      case 5:
		        return popHostContext(workInProgress), null;
		      case 13:
		        popSuspenseHandler(workInProgress);
		        current = workInProgress.memoizedState;
		        if (null !== current && null !== current.dehydrated) {
		          if (null === workInProgress.alternate)
		            throw Error(formatProdErrorMessage(340));
		          resetHydrationState();
		        }
		        current = workInProgress.flags;
		        return current & 65536
		          ? ((workInProgress.flags = (current & -65537) | 128), workInProgress)
		          : null;
		      case 19:
		        return pop(suspenseStackCursor), null;
		      case 4:
		        return popHostContainer(), null;
		      case 10:
		        return popProvider(workInProgress.type), null;
		      case 22:
		      case 23:
		        return (
		          popSuspenseHandler(workInProgress),
		          popHiddenContext(),
		          null !== current && pop(resumedCache),
		          (current = workInProgress.flags),
		          current & 65536
		            ? ((workInProgress.flags = (current & -65537) | 128),
		              workInProgress)
		            : null
		        );
		      case 24:
		        return popProvider(CacheContext), null;
		      case 25:
		        return null;
		      default:
		        return null;
		    }
		  }
		  function unwindInterruptedWork(current, interruptedWork) {
		    popTreeContext(interruptedWork);
		    switch (interruptedWork.tag) {
		      case 3:
		        popProvider(CacheContext);
		        popHostContainer();
		        break;
		      case 26:
		      case 27:
		      case 5:
		        popHostContext(interruptedWork);
		        break;
		      case 4:
		        popHostContainer();
		        break;
		      case 13:
		        popSuspenseHandler(interruptedWork);
		        break;
		      case 19:
		        pop(suspenseStackCursor);
		        break;
		      case 10:
		        popProvider(interruptedWork.type);
		        break;
		      case 22:
		      case 23:
		        popSuspenseHandler(interruptedWork);
		        popHiddenContext();
		        null !== current && pop(resumedCache);
		        break;
		      case 24:
		        popProvider(CacheContext);
		    }
		  }
		  function commitHookEffectListMount(flags, finishedWork) {
		    try {
		      var updateQueue = finishedWork.updateQueue,
		        lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
		      if (null !== lastEffect) {
		        var firstEffect = lastEffect.next;
		        updateQueue = firstEffect;
		        do {
		          if ((updateQueue.tag & flags) === flags) {
		            lastEffect = void 0;
		            var create = updateQueue.create,
		              inst = updateQueue.inst;
		            lastEffect = create();
		            inst.destroy = lastEffect;
		          }
		          updateQueue = updateQueue.next;
		        } while (updateQueue !== firstEffect);
		      }
		    } catch (error) {
		      captureCommitPhaseError(finishedWork, finishedWork.return, error);
		    }
		  }
		  function commitHookEffectListUnmount(
		    flags,
		    finishedWork,
		    nearestMountedAncestor$jscomp$0
		  ) {
		    try {
		      var updateQueue = finishedWork.updateQueue,
		        lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
		      if (null !== lastEffect) {
		        var firstEffect = lastEffect.next;
		        updateQueue = firstEffect;
		        do {
		          if ((updateQueue.tag & flags) === flags) {
		            var inst = updateQueue.inst,
		              destroy = inst.destroy;
		            if (void 0 !== destroy) {
		              inst.destroy = void 0;
		              lastEffect = finishedWork;
		              var nearestMountedAncestor = nearestMountedAncestor$jscomp$0;
		              try {
		                destroy();
		              } catch (error) {
		                captureCommitPhaseError(
		                  lastEffect,
		                  nearestMountedAncestor,
		                  error
		                );
		              }
		            }
		          }
		          updateQueue = updateQueue.next;
		        } while (updateQueue !== firstEffect);
		      }
		    } catch (error) {
		      captureCommitPhaseError(finishedWork, finishedWork.return, error);
		    }
		  }
		  function commitClassCallbacks(finishedWork) {
		    var updateQueue = finishedWork.updateQueue;
		    if (null !== updateQueue) {
		      var instance = finishedWork.stateNode;
		      try {
		        commitCallbacks(updateQueue, instance);
		      } catch (error) {
		        captureCommitPhaseError(finishedWork, finishedWork.return, error);
		      }
		    }
		  }
		  function safelyCallComponentWillUnmount(
		    current,
		    nearestMountedAncestor,
		    instance
		  ) {
		    instance.props = resolveClassComponentProps(
		      current.type,
		      current.memoizedProps
		    );
		    instance.state = current.memoizedState;
		    try {
		      instance.componentWillUnmount();
		    } catch (error) {
		      captureCommitPhaseError(current, nearestMountedAncestor, error);
		    }
		  }
		  function safelyAttachRef(current, nearestMountedAncestor) {
		    try {
		      var ref = current.ref;
		      if (null !== ref) {
		        var instance = current.stateNode;
		        switch (current.tag) {
		          case 26:
		          case 27:
		          case 5:
		            var instanceToUse = getPublicInstance(instance);
		            break;
		          default:
		            instanceToUse = instance;
		        }
		        "function" === typeof ref
		          ? (current.refCleanup = ref(instanceToUse))
		          : (ref.current = instanceToUse);
		      }
		    } catch (error) {
		      captureCommitPhaseError(current, nearestMountedAncestor, error);
		    }
		  }
		  function safelyDetachRef(current, nearestMountedAncestor) {
		    var ref = current.ref,
		      refCleanup = current.refCleanup;
		    if (null !== ref)
		      if ("function" === typeof refCleanup)
		        try {
		          refCleanup();
		        } catch (error) {
		          captureCommitPhaseError(current, nearestMountedAncestor, error);
		        } finally {
		          (current.refCleanup = null),
		            (current = current.alternate),
		            null != current && (current.refCleanup = null);
		        }
		      else if ("function" === typeof ref)
		        try {
		          ref(null);
		        } catch (error$126) {
		          captureCommitPhaseError(current, nearestMountedAncestor, error$126);
		        }
		      else ref.current = null;
		  }
		  function commitHostMount(finishedWork) {
		    var type = finishedWork.type,
		      props = finishedWork.memoizedProps,
		      instance = finishedWork.stateNode;
		    try {
		      commitMount(instance, type, props, finishedWork);
		    } catch (error) {
		      captureCommitPhaseError(finishedWork, finishedWork.return, error);
		    }
		  }
		  function commitHostUpdate(finishedWork, newProps, oldProps) {
		    try {
		      commitUpdate(
		        finishedWork.stateNode,
		        finishedWork.type,
		        oldProps,
		        newProps,
		        finishedWork
		      );
		    } catch (error) {
		      captureCommitPhaseError(finishedWork, finishedWork.return, error);
		    }
		  }
		  function isHostParent(fiber) {
		    return (
		      5 === fiber.tag ||
		      3 === fiber.tag ||
		      (supportsResources ? 26 === fiber.tag : !1) ||
		      (supportsSingletons ? 27 === fiber.tag : !1) ||
		      4 === fiber.tag
		    );
		  }
		  function getHostSibling(fiber) {
		    a: for (;;) {
		      for (; null === fiber.sibling; ) {
		        if (null === fiber.return || isHostParent(fiber.return)) return null;
		        fiber = fiber.return;
		      }
		      fiber.sibling.return = fiber.return;
		      for (
		        fiber = fiber.sibling;
		        5 !== fiber.tag &&
		        6 !== fiber.tag &&
		        (supportsSingletons ? 27 !== fiber.tag : 1) &&
		        18 !== fiber.tag;

		      ) {
		        if (fiber.flags & 2) continue a;
		        if (null === fiber.child || 4 === fiber.tag) continue a;
		        else (fiber.child.return = fiber), (fiber = fiber.child);
		      }
		      if (!(fiber.flags & 2)) return fiber.stateNode;
		    }
		  }
		  function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
		    var tag = node.tag;
		    if (5 === tag || 6 === tag)
		      (node = node.stateNode),
		        before
		          ? insertInContainerBefore(parent, node, before)
		          : appendChildToContainer(parent, node);
		    else if (
		      !(4 === tag || (supportsSingletons && 27 === tag)) &&
		      ((node = node.child), null !== node)
		    )
		      for (
		        insertOrAppendPlacementNodeIntoContainer(node, before, parent),
		          node = node.sibling;
		        null !== node;

		      )
		        insertOrAppendPlacementNodeIntoContainer(node, before, parent),
		          (node = node.sibling);
		  }
		  function insertOrAppendPlacementNode(node, before, parent) {
		    var tag = node.tag;
		    if (5 === tag || 6 === tag)
		      (node = node.stateNode),
		        before ? insertBefore(parent, node, before) : appendChild(parent, node);
		    else if (
		      !(4 === tag || (supportsSingletons && 27 === tag)) &&
		      ((node = node.child), null !== node)
		    )
		      for (
		        insertOrAppendPlacementNode(node, before, parent), node = node.sibling;
		        null !== node;

		      )
		        insertOrAppendPlacementNode(node, before, parent),
		          (node = node.sibling);
		  }
		  function commitHostPortalContainerChildren(
		    portal,
		    finishedWork,
		    pendingChildren
		  ) {
		    portal = portal.containerInfo;
		    try {
		      replaceContainerChildren(portal, pendingChildren);
		    } catch (error) {
		      captureCommitPhaseError(finishedWork, finishedWork.return, error);
		    }
		  }
		  function commitBeforeMutationEffects(root, firstChild) {
		    prepareForCommit(root.containerInfo);
		    for (nextEffect = firstChild; null !== nextEffect; )
		      if (
		        ((root = nextEffect),
		        (firstChild = root.child),
		        0 !== (root.subtreeFlags & 1028) && null !== firstChild)
		      )
		        (firstChild.return = root), (nextEffect = firstChild);
		      else
		        for (; null !== nextEffect; ) {
		          root = nextEffect;
		          var current = root.alternate;
		          firstChild = root.flags;
		          switch (root.tag) {
		            case 0:
		              break;
		            case 11:
		            case 15:
		              break;
		            case 1:
		              if (0 !== (firstChild & 1024) && null !== current) {
		                firstChild = void 0;
		                var finishedWork = root,
		                  prevProps = current.memoizedProps;
		                current = current.memoizedState;
		                var instance = finishedWork.stateNode;
		                try {
		                  var resolvedPrevProps = resolveClassComponentProps(
		                    finishedWork.type,
		                    prevProps,
		                    finishedWork.elementType === finishedWork.type
		                  );
		                  firstChild = instance.getSnapshotBeforeUpdate(
		                    resolvedPrevProps,
		                    current
		                  );
		                  instance.__reactInternalSnapshotBeforeUpdate = firstChild;
		                } catch (error) {
		                  captureCommitPhaseError(
		                    finishedWork,
		                    finishedWork.return,
		                    error
		                  );
		                }
		              }
		              break;
		            case 3:
		              0 !== (firstChild & 1024) &&
		                supportsMutation &&
		                clearContainer(root.stateNode.containerInfo);
		              break;
		            case 5:
		            case 26:
		            case 27:
		            case 6:
		            case 4:
		            case 17:
		              break;
		            default:
		              if (0 !== (firstChild & 1024))
		                throw Error(formatProdErrorMessage(163));
		          }
		          firstChild = root.sibling;
		          if (null !== firstChild) {
		            firstChild.return = root.return;
		            nextEffect = firstChild;
		            break;
		          }
		          nextEffect = root.return;
		        }
		    resolvedPrevProps = shouldFireAfterActiveInstanceBlur;
		    shouldFireAfterActiveInstanceBlur = !1;
		    return resolvedPrevProps;
		  }
		  function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) {
		    var flags = finishedWork.flags;
		    switch (finishedWork.tag) {
		      case 0:
		      case 11:
		      case 15:
		        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		        flags & 4 && commitHookEffectListMount(5, finishedWork);
		        break;
		      case 1:
		        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		        if (flags & 4)
		          if (((finishedRoot = finishedWork.stateNode), null === current))
		            try {
		              finishedRoot.componentDidMount();
		            } catch (error) {
		              captureCommitPhaseError(finishedWork, finishedWork.return, error);
		            }
		          else {
		            var prevProps = resolveClassComponentProps(
		              finishedWork.type,
		              current.memoizedProps
		            );
		            current = current.memoizedState;
		            try {
		              finishedRoot.componentDidUpdate(
		                prevProps,
		                current,
		                finishedRoot.__reactInternalSnapshotBeforeUpdate
		              );
		            } catch (error$125) {
		              captureCommitPhaseError(
		                finishedWork,
		                finishedWork.return,
		                error$125
		              );
		            }
		          }
		        flags & 64 && commitClassCallbacks(finishedWork);
		        flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
		        break;
		      case 3:
		        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		        if (
		          flags & 64 &&
		          ((flags = finishedWork.updateQueue), null !== flags)
		        ) {
		          finishedRoot = null;
		          if (null !== finishedWork.child)
		            switch (finishedWork.child.tag) {
		              case 27:
		              case 5:
		                finishedRoot = getPublicInstance(finishedWork.child.stateNode);
		                break;
		              case 1:
		                finishedRoot = finishedWork.child.stateNode;
		            }
		          try {
		            commitCallbacks(flags, finishedRoot);
		          } catch (error) {
		            captureCommitPhaseError(finishedWork, finishedWork.return, error);
		          }
		        }
		        break;
		      case 26:
		        if (supportsResources) {
		          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		          flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
		          break;
		        }
		      case 27:
		      case 5:
		        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		        null === current && flags & 4 && commitHostMount(finishedWork);
		        flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
		        break;
		      case 12:
		        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		        break;
		      case 13:
		        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		        flags & 4 &&
		          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
		        break;
		      case 22:
		        prevProps =
		          null !== finishedWork.memoizedState || offscreenSubtreeIsHidden;
		        if (!prevProps) {
		          current =
		            (null !== current && null !== current.memoizedState) ||
		            offscreenSubtreeWasHidden;
		          var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden,
		            prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
		          offscreenSubtreeIsHidden = prevProps;
		          (offscreenSubtreeWasHidden = current) &&
		          !prevOffscreenSubtreeWasHidden
		            ? recursivelyTraverseReappearLayoutEffects(
		                finishedRoot,
		                finishedWork,
		                0 !== (finishedWork.subtreeFlags & 8772)
		              )
		            : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		          offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
		          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
		        }
		        flags & 512 &&
		          ("manual" === finishedWork.memoizedProps.mode
		            ? safelyAttachRef(finishedWork, finishedWork.return)
		            : safelyDetachRef(finishedWork, finishedWork.return));
		        break;
		      default:
		        recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		    }
		  }
		  function detachFiberAfterEffects(fiber) {
		    var alternate = fiber.alternate;
		    null !== alternate &&
		      ((fiber.alternate = null), detachFiberAfterEffects(alternate));
		    fiber.child = null;
		    fiber.deletions = null;
		    fiber.sibling = null;
		    5 === fiber.tag &&
		      ((alternate = fiber.stateNode),
		      null !== alternate && detachDeletedInstance(alternate));
		    fiber.stateNode = null;
		    fiber.return = null;
		    fiber.dependencies = null;
		    fiber.memoizedProps = null;
		    fiber.memoizedState = null;
		    fiber.pendingProps = null;
		    fiber.stateNode = null;
		    fiber.updateQueue = null;
		  }
		  function recursivelyTraverseDeletionEffects(
		    finishedRoot,
		    nearestMountedAncestor,
		    parent
		  ) {
		    for (parent = parent.child; null !== parent; )
		      commitDeletionEffectsOnFiber(
		        finishedRoot,
		        nearestMountedAncestor,
		        parent
		      ),
		        (parent = parent.sibling);
		  }
		  function commitDeletionEffectsOnFiber(
		    finishedRoot,
		    nearestMountedAncestor,
		    deletedFiber
		  ) {
		    if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount)
		      try {
		        injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
		      } catch (err) {}
		    switch (deletedFiber.tag) {
		      case 26:
		        if (supportsResources) {
		          offscreenSubtreeWasHidden ||
		            safelyDetachRef(deletedFiber, nearestMountedAncestor);
		          recursivelyTraverseDeletionEffects(
		            finishedRoot,
		            nearestMountedAncestor,
		            deletedFiber
		          );
		          deletedFiber.memoizedState
		            ? releaseResource(deletedFiber.memoizedState)
		            : deletedFiber.stateNode &&
		              unmountHoistable(deletedFiber.stateNode);
		          break;
		        }
		      case 27:
		        if (supportsSingletons) {
		          offscreenSubtreeWasHidden ||
		            safelyDetachRef(deletedFiber, nearestMountedAncestor);
		          var prevHostParent = hostParent,
		            prevHostParentIsContainer = hostParentIsContainer;
		          hostParent = deletedFiber.stateNode;
		          recursivelyTraverseDeletionEffects(
		            finishedRoot,
		            nearestMountedAncestor,
		            deletedFiber
		          );
		          releaseSingletonInstance(deletedFiber.stateNode);
		          hostParent = prevHostParent;
		          hostParentIsContainer = prevHostParentIsContainer;
		          break;
		        }
		      case 5:
		        offscreenSubtreeWasHidden ||
		          safelyDetachRef(deletedFiber, nearestMountedAncestor);
		      case 6:
		        if (supportsMutation) {
		          if (
		            ((prevHostParent = hostParent),
		            (prevHostParentIsContainer = hostParentIsContainer),
		            (hostParent = null),
		            recursivelyTraverseDeletionEffects(
		              finishedRoot,
		              nearestMountedAncestor,
		              deletedFiber
		            ),
		            (hostParent = prevHostParent),
		            (hostParentIsContainer = prevHostParentIsContainer),
		            null !== hostParent)
		          )
		            if (hostParentIsContainer)
		              try {
		                removeChildFromContainer(hostParent, deletedFiber.stateNode);
		              } catch (error) {
		                captureCommitPhaseError(
		                  deletedFiber,
		                  nearestMountedAncestor,
		                  error
		                );
		              }
		            else
		              try {
		                removeChild(hostParent, deletedFiber.stateNode);
		              } catch (error) {
		                captureCommitPhaseError(
		                  deletedFiber,
		                  nearestMountedAncestor,
		                  error
		                );
		              }
		        } else
		          recursivelyTraverseDeletionEffects(
		            finishedRoot,
		            nearestMountedAncestor,
		            deletedFiber
		          );
		        break;
		      case 18:
		        supportsMutation &&
		          null !== hostParent &&
		          (hostParentIsContainer
		            ? clearSuspenseBoundaryFromContainer(
		                hostParent,
		                deletedFiber.stateNode
		              )
		            : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));
		        break;
		      case 4:
		        supportsMutation
		          ? ((prevHostParent = hostParent),
		            (prevHostParentIsContainer = hostParentIsContainer),
		            (hostParent = deletedFiber.stateNode.containerInfo),
		            (hostParentIsContainer = !0),
		            recursivelyTraverseDeletionEffects(
		              finishedRoot,
		              nearestMountedAncestor,
		              deletedFiber
		            ),
		            (hostParent = prevHostParent),
		            (hostParentIsContainer = prevHostParentIsContainer))
		          : (supportsPersistence &&
		              commitHostPortalContainerChildren(
		                deletedFiber.stateNode,
		                deletedFiber,
		                createContainerChildSet()
		              ),
		            recursivelyTraverseDeletionEffects(
		              finishedRoot,
		              nearestMountedAncestor,
		              deletedFiber
		            ));
		        break;
		      case 0:
		      case 11:
		      case 14:
		      case 15:
		        offscreenSubtreeWasHidden ||
		          commitHookEffectListUnmount(2, deletedFiber, nearestMountedAncestor);
		        offscreenSubtreeWasHidden ||
		          commitHookEffectListUnmount(4, deletedFiber, nearestMountedAncestor);
		        recursivelyTraverseDeletionEffects(
		          finishedRoot,
		          nearestMountedAncestor,
		          deletedFiber
		        );
		        break;
		      case 1:
		        offscreenSubtreeWasHidden ||
		          (safelyDetachRef(deletedFiber, nearestMountedAncestor),
		          (prevHostParent = deletedFiber.stateNode),
		          "function" === typeof prevHostParent.componentWillUnmount &&
		            safelyCallComponentWillUnmount(
		              deletedFiber,
		              nearestMountedAncestor,
		              prevHostParent
		            ));
		        recursivelyTraverseDeletionEffects(
		          finishedRoot,
		          nearestMountedAncestor,
		          deletedFiber
		        );
		        break;
		      case 21:
		        recursivelyTraverseDeletionEffects(
		          finishedRoot,
		          nearestMountedAncestor,
		          deletedFiber
		        );
		        break;
		      case 22:
		        offscreenSubtreeWasHidden ||
		          safelyDetachRef(deletedFiber, nearestMountedAncestor);
		        offscreenSubtreeWasHidden =
		          (prevHostParent = offscreenSubtreeWasHidden) ||
		          null !== deletedFiber.memoizedState;
		        recursivelyTraverseDeletionEffects(
		          finishedRoot,
		          nearestMountedAncestor,
		          deletedFiber
		        );
		        offscreenSubtreeWasHidden = prevHostParent;
		        break;
		      default:
		        recursivelyTraverseDeletionEffects(
		          finishedRoot,
		          nearestMountedAncestor,
		          deletedFiber
		        );
		    }
		  }
		  function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
		    if (
		      supportsHydration &&
		      null === finishedWork.memoizedState &&
		      ((finishedRoot = finishedWork.alternate),
		      null !== finishedRoot &&
		        ((finishedRoot = finishedRoot.memoizedState),
		        null !== finishedRoot &&
		          ((finishedRoot = finishedRoot.dehydrated), null !== finishedRoot)))
		    )
		      try {
		        commitHydratedSuspenseInstance(finishedRoot);
		      } catch (error) {
		        captureCommitPhaseError(finishedWork, finishedWork.return, error);
		      }
		  }
		  function getRetryCache(finishedWork) {
		    switch (finishedWork.tag) {
		      case 13:
		      case 19:
		        var retryCache = finishedWork.stateNode;
		        null === retryCache &&
		          (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
		        return retryCache;
		      case 22:
		        return (
		          (finishedWork = finishedWork.stateNode),
		          (retryCache = finishedWork._retryCache),
		          null === retryCache &&
		            (retryCache = finishedWork._retryCache = new PossiblyWeakSet()),
		          retryCache
		        );
		      default:
		        throw Error(formatProdErrorMessage(435, finishedWork.tag));
		    }
		  }
		  function attachSuspenseRetryListeners(finishedWork, wakeables) {
		    var retryCache = getRetryCache(finishedWork);
		    wakeables.forEach(function (wakeable) {
		      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
		      retryCache.has(wakeable) ||
		        (retryCache.add(wakeable), wakeable.then(retry, retry));
		    });
		  }
		  function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
		    var deletions = parentFiber.deletions;
		    if (null !== deletions)
		      for (var i = 0; i < deletions.length; i++) {
		        var childToDelete = deletions[i],
		          root = root$jscomp$0,
		          returnFiber = parentFiber;
		        if (supportsMutation) {
		          var parent = returnFiber;
		          a: for (; null !== parent; ) {
		            switch (parent.tag) {
		              case 27:
		              case 5:
		                hostParent = parent.stateNode;
		                hostParentIsContainer = !1;
		                break a;
		              case 3:
		                hostParent = parent.stateNode.containerInfo;
		                hostParentIsContainer = !0;
		                break a;
		              case 4:
		                hostParent = parent.stateNode.containerInfo;
		                hostParentIsContainer = !0;
		                break a;
		            }
		            parent = parent.return;
		          }
		          if (null === hostParent) throw Error(formatProdErrorMessage(160));
		          commitDeletionEffectsOnFiber(root, returnFiber, childToDelete);
		          hostParent = null;
		          hostParentIsContainer = !1;
		        } else commitDeletionEffectsOnFiber(root, returnFiber, childToDelete);
		        root = childToDelete.alternate;
		        null !== root && (root.return = null);
		        childToDelete.return = null;
		      }
		    if (parentFiber.subtreeFlags & 13878)
		      for (parentFiber = parentFiber.child; null !== parentFiber; )
		        commitMutationEffectsOnFiber(parentFiber, root$jscomp$0),
		          (parentFiber = parentFiber.sibling);
		  }
		  function commitMutationEffectsOnFiber(finishedWork, root) {
		    var current = finishedWork.alternate,
		      flags = finishedWork.flags;
		    switch (finishedWork.tag) {
		      case 0:
		      case 11:
		      case 14:
		      case 15:
		        recursivelyTraverseMutationEffects(root, finishedWork);
		        commitReconciliationEffects(finishedWork);
		        flags & 4 &&
		          (commitHookEffectListUnmount(3, finishedWork, finishedWork.return),
		          commitHookEffectListMount(3, finishedWork),
		          commitHookEffectListUnmount(5, finishedWork, finishedWork.return));
		        break;
		      case 1:
		        recursivelyTraverseMutationEffects(root, finishedWork);
		        commitReconciliationEffects(finishedWork);
		        flags & 512 &&
		          (offscreenSubtreeWasHidden ||
		            null === current ||
		            safelyDetachRef(current, current.return));
		        flags & 64 &&
		          offscreenSubtreeIsHidden &&
		          ((finishedWork = finishedWork.updateQueue),
		          null !== finishedWork &&
		            ((flags = finishedWork.callbacks),
		            null !== flags &&
		              ((current = finishedWork.shared.hiddenCallbacks),
		              (finishedWork.shared.hiddenCallbacks =
		                null === current ? flags : current.concat(flags)))));
		        break;
		      case 26:
		        if (supportsResources) {
		          var hoistableRoot = currentHoistableRoot;
		          recursivelyTraverseMutationEffects(root, finishedWork);
		          commitReconciliationEffects(finishedWork);
		          flags & 512 &&
		            (offscreenSubtreeWasHidden ||
		              null === current ||
		              safelyDetachRef(current, current.return));
		          flags & 4 &&
		            ((flags = null !== current ? current.memoizedState : null),
		            (root = finishedWork.memoizedState),
		            null === current
		              ? null === root
		                ? null === finishedWork.stateNode
		                  ? (finishedWork.stateNode = hydrateHoistable(
		                      hoistableRoot,
		                      finishedWork.type,
		                      finishedWork.memoizedProps,
		                      finishedWork
		                    ))
		                  : mountHoistable(
		                      hoistableRoot,
		                      finishedWork.type,
		                      finishedWork.stateNode
		                    )
		                : (finishedWork.stateNode = acquireResource(
		                    hoistableRoot,
		                    root,
		                    finishedWork.memoizedProps
		                  ))
		              : flags !== root
		                ? (null === flags
		                    ? null !== current.stateNode &&
		                      unmountHoistable(current.stateNode)
		                    : releaseResource(flags),
		                  null === root
		                    ? mountHoistable(
		                        hoistableRoot,
		                        finishedWork.type,
		                        finishedWork.stateNode
		                      )
		                    : acquireResource(
		                        hoistableRoot,
		                        root,
		                        finishedWork.memoizedProps
		                      ))
		                : null === root &&
		                  null !== finishedWork.stateNode &&
		                  commitHostUpdate(
		                    finishedWork,
		                    finishedWork.memoizedProps,
		                    current.memoizedProps
		                  ));
		          break;
		        }
		      case 27:
		        if (
		          supportsSingletons &&
		          flags & 4 &&
		          null === finishedWork.alternate
		        ) {
		          hoistableRoot = finishedWork.stateNode;
		          var props = finishedWork.memoizedProps;
		          try {
		            clearSingleton(hoistableRoot),
		              acquireSingletonInstance(
		                finishedWork.type,
		                props,
		                hoistableRoot,
		                finishedWork
		              );
		          } catch (error) {
		            captureCommitPhaseError(finishedWork, finishedWork.return, error);
		          }
		        }
		      case 5:
		        recursivelyTraverseMutationEffects(root, finishedWork);
		        commitReconciliationEffects(finishedWork);
		        flags & 512 &&
		          (offscreenSubtreeWasHidden ||
		            null === current ||
		            safelyDetachRef(current, current.return));
		        if (supportsMutation) {
		          if (finishedWork.flags & 32) {
		            root = finishedWork.stateNode;
		            try {
		              resetTextContent(root);
		            } catch (error) {
		              captureCommitPhaseError(finishedWork, finishedWork.return, error);
		            }
		          }
		          flags & 4 &&
		            null != finishedWork.stateNode &&
		            ((root = finishedWork.memoizedProps),
		            commitHostUpdate(
		              finishedWork,
		              root,
		              null !== current ? current.memoizedProps : root
		            ));
		          flags & 1024 && (needsFormReset = !0);
		        }
		        break;
		      case 6:
		        recursivelyTraverseMutationEffects(root, finishedWork);
		        commitReconciliationEffects(finishedWork);
		        if (flags & 4 && supportsMutation) {
		          if (null === finishedWork.stateNode)
		            throw Error(formatProdErrorMessage(162));
		          flags = finishedWork.memoizedProps;
		          current = null !== current ? current.memoizedProps : flags;
		          root = finishedWork.stateNode;
		          try {
		            commitTextUpdate(root, current, flags);
		          } catch (error) {
		            captureCommitPhaseError(finishedWork, finishedWork.return, error);
		          }
		        }
		        break;
		      case 3:
		        supportsResources
		          ? (prepareToCommitHoistables(),
		            (hoistableRoot = currentHoistableRoot),
		            (currentHoistableRoot = getHoistableRoot(root.containerInfo)),
		            recursivelyTraverseMutationEffects(root, finishedWork),
		            (currentHoistableRoot = hoistableRoot))
		          : recursivelyTraverseMutationEffects(root, finishedWork);
		        commitReconciliationEffects(finishedWork);
		        if (flags & 4) {
		          if (
		            supportsMutation &&
		            supportsHydration &&
		            null !== current &&
		            current.memoizedState.isDehydrated
		          )
		            try {
		              commitHydratedContainer(root.containerInfo);
		            } catch (error) {
		              captureCommitPhaseError(finishedWork, finishedWork.return, error);
		            }
		          if (supportsPersistence) {
		            flags = root.containerInfo;
		            current = root.pendingChildren;
		            try {
		              replaceContainerChildren(flags, current);
		            } catch (error) {
		              captureCommitPhaseError(finishedWork, finishedWork.return, error);
		            }
		          }
		        }
		        needsFormReset &&
		          ((needsFormReset = !1), recursivelyResetForms(finishedWork));
		        break;
		      case 4:
		        supportsResources
		          ? ((current = currentHoistableRoot),
		            (currentHoistableRoot = getHoistableRoot(
		              finishedWork.stateNode.containerInfo
		            )),
		            recursivelyTraverseMutationEffects(root, finishedWork),
		            commitReconciliationEffects(finishedWork),
		            (currentHoistableRoot = current))
		          : (recursivelyTraverseMutationEffects(root, finishedWork),
		            commitReconciliationEffects(finishedWork));
		        flags & 4 &&
		          supportsPersistence &&
		          commitHostPortalContainerChildren(
		            finishedWork.stateNode,
		            finishedWork,
		            finishedWork.stateNode.pendingChildren
		          );
		        break;
		      case 12:
		        recursivelyTraverseMutationEffects(root, finishedWork);
		        commitReconciliationEffects(finishedWork);
		        break;
		      case 13:
		        recursivelyTraverseMutationEffects(root, finishedWork);
		        commitReconciliationEffects(finishedWork);
		        finishedWork.child.flags & 8192 &&
		          (null !== finishedWork.memoizedState) !==
		            (null !== current && null !== current.memoizedState) &&
		          (globalMostRecentFallbackTime = now());
		        flags & 4 &&
		          ((flags = finishedWork.updateQueue),
		          null !== flags &&
		            ((finishedWork.updateQueue = null),
		            attachSuspenseRetryListeners(finishedWork, flags)));
		        break;
		      case 22:
		        flags & 512 &&
		          (offscreenSubtreeWasHidden ||
		            null === current ||
		            safelyDetachRef(current, current.return));
		        hoistableRoot = null !== finishedWork.memoizedState;
		        var wasHidden = null !== current && null !== current.memoizedState,
		          prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden,
		          prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
		        offscreenSubtreeIsHidden =
		          prevOffscreenSubtreeIsHidden || hoistableRoot;
		        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;
		        recursivelyTraverseMutationEffects(root, finishedWork);
		        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
		        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
		        commitReconciliationEffects(finishedWork);
		        root = finishedWork.stateNode;
		        root._current = finishedWork;
		        root._visibility &= -3;
		        root._visibility |= root._pendingVisibility & 2;
		        if (
		          flags & 8192 &&
		          ((root._visibility = hoistableRoot
		            ? root._visibility & -2
		            : root._visibility | 1),
		          hoistableRoot &&
		            ((root = offscreenSubtreeIsHidden || offscreenSubtreeWasHidden),
		            null === current ||
		              wasHidden ||
		              root ||
		              recursivelyTraverseDisappearLayoutEffects(finishedWork)),
		          supportsMutation &&
		            (null === finishedWork.memoizedProps ||
		              "manual" !== finishedWork.memoizedProps.mode))
		        )
		          a: if (((current = null), supportsMutation))
		            for (root = finishedWork; ; ) {
		              if (
		                5 === root.tag ||
		                (supportsResources && 26 === root.tag) ||
		                (supportsSingletons && 27 === root.tag)
		              ) {
		                if (null === current) {
		                  wasHidden = current = root;
		                  try {
		                    (props = wasHidden.stateNode),
		                      hoistableRoot
		                        ? hideInstance(props)
		                        : unhideInstance(
		                            wasHidden.stateNode,
		                            wasHidden.memoizedProps
		                          );
		                  } catch (error) {
		                    captureCommitPhaseError(wasHidden, wasHidden.return, error);
		                  }
		                }
		              } else if (6 === root.tag) {
		                if (null === current) {
		                  wasHidden = root;
		                  try {
		                    var instance = wasHidden.stateNode;
		                    hoistableRoot
		                      ? hideTextInstance(instance)
		                      : unhideTextInstance(instance, wasHidden.memoizedProps);
		                  } catch (error) {
		                    captureCommitPhaseError(wasHidden, wasHidden.return, error);
		                  }
		                }
		              } else if (
		                ((22 !== root.tag && 23 !== root.tag) ||
		                  null === root.memoizedState ||
		                  root === finishedWork) &&
		                null !== root.child
		              ) {
		                root.child.return = root;
		                root = root.child;
		                continue;
		              }
		              if (root === finishedWork) break a;
		              for (; null === root.sibling; ) {
		                if (null === root.return || root.return === finishedWork)
		                  break a;
		                current === root && (current = null);
		                root = root.return;
		              }
		              current === root && (current = null);
		              root.sibling.return = root.return;
		              root = root.sibling;
		            }
		        flags & 4 &&
		          ((flags = finishedWork.updateQueue),
		          null !== flags &&
		            ((current = flags.retryQueue),
		            null !== current &&
		              ((flags.retryQueue = null),
		              attachSuspenseRetryListeners(finishedWork, current))));
		        break;
		      case 19:
		        recursivelyTraverseMutationEffects(root, finishedWork);
		        commitReconciliationEffects(finishedWork);
		        flags & 4 &&
		          ((flags = finishedWork.updateQueue),
		          null !== flags &&
		            ((finishedWork.updateQueue = null),
		            attachSuspenseRetryListeners(finishedWork, flags)));
		        break;
		      case 21:
		        break;
		      default:
		        recursivelyTraverseMutationEffects(root, finishedWork),
		          commitReconciliationEffects(finishedWork);
		    }
		  }
		  function commitReconciliationEffects(finishedWork) {
		    var flags = finishedWork.flags;
		    if (flags & 2) {
		      try {
		        if (
		          supportsMutation &&
		          (!supportsSingletons || 27 !== finishedWork.tag)
		        ) {
		          a: {
		            for (var parent = finishedWork.return; null !== parent; ) {
		              if (isHostParent(parent)) {
		                var JSCompiler_inline_result = parent;
		                break a;
		              }
		              parent = parent.return;
		            }
		            throw Error(formatProdErrorMessage(160));
		          }
		          switch (JSCompiler_inline_result.tag) {
		            case 27:
		              if (supportsSingletons) {
		                var parent$jscomp$0 = JSCompiler_inline_result.stateNode,
		                  before = getHostSibling(finishedWork);
		                insertOrAppendPlacementNode(
		                  finishedWork,
		                  before,
		                  parent$jscomp$0
		                );
		                break;
		              }
		            case 5:
		              var parent$127 = JSCompiler_inline_result.stateNode;
		              JSCompiler_inline_result.flags & 32 &&
		                (resetTextContent(parent$127),
		                (JSCompiler_inline_result.flags &= -33));
		              var before$128 = getHostSibling(finishedWork);
		              insertOrAppendPlacementNode(finishedWork, before$128, parent$127);
		              break;
		            case 3:
		            case 4:
		              var parent$129 = JSCompiler_inline_result.stateNode.containerInfo,
		                before$130 = getHostSibling(finishedWork);
		              insertOrAppendPlacementNodeIntoContainer(
		                finishedWork,
		                before$130,
		                parent$129
		              );
		              break;
		            default:
		              throw Error(formatProdErrorMessage(161));
		          }
		        }
		      } catch (error) {
		        captureCommitPhaseError(finishedWork, finishedWork.return, error);
		      }
		      finishedWork.flags &= -3;
		    }
		    flags & 4096 && (finishedWork.flags &= -4097);
		  }
		  function recursivelyResetForms(parentFiber) {
		    if (parentFiber.subtreeFlags & 1024)
		      for (parentFiber = parentFiber.child; null !== parentFiber; ) {
		        var fiber = parentFiber;
		        recursivelyResetForms(fiber);
		        5 === fiber.tag &&
		          fiber.flags & 1024 &&
		          resetFormInstance(fiber.stateNode);
		        parentFiber = parentFiber.sibling;
		      }
		  }
		  function recursivelyTraverseLayoutEffects(root, parentFiber) {
		    if (parentFiber.subtreeFlags & 8772)
		      for (parentFiber = parentFiber.child; null !== parentFiber; )
		        commitLayoutEffectOnFiber(root, parentFiber.alternate, parentFiber),
		          (parentFiber = parentFiber.sibling);
		  }
		  function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
		    for (parentFiber = parentFiber.child; null !== parentFiber; ) {
		      var finishedWork = parentFiber;
		      switch (finishedWork.tag) {
		        case 0:
		        case 11:
		        case 14:
		        case 15:
		          commitHookEffectListUnmount(4, finishedWork, finishedWork.return);
		          recursivelyTraverseDisappearLayoutEffects(finishedWork);
		          break;
		        case 1:
		          safelyDetachRef(finishedWork, finishedWork.return);
		          var instance = finishedWork.stateNode;
		          "function" === typeof instance.componentWillUnmount &&
		            safelyCallComponentWillUnmount(
		              finishedWork,
		              finishedWork.return,
		              instance
		            );
		          recursivelyTraverseDisappearLayoutEffects(finishedWork);
		          break;
		        case 26:
		        case 27:
		        case 5:
		          safelyDetachRef(finishedWork, finishedWork.return);
		          recursivelyTraverseDisappearLayoutEffects(finishedWork);
		          break;
		        case 22:
		          safelyDetachRef(finishedWork, finishedWork.return);
		          null === finishedWork.memoizedState &&
		            recursivelyTraverseDisappearLayoutEffects(finishedWork);
		          break;
		        default:
		          recursivelyTraverseDisappearLayoutEffects(finishedWork);
		      }
		      parentFiber = parentFiber.sibling;
		    }
		  }
		  function recursivelyTraverseReappearLayoutEffects(
		    finishedRoot$jscomp$0,
		    parentFiber,
		    includeWorkInProgressEffects
		  ) {
		    includeWorkInProgressEffects =
		      includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
		    for (parentFiber = parentFiber.child; null !== parentFiber; ) {
		      var current = parentFiber.alternate,
		        finishedRoot = finishedRoot$jscomp$0,
		        finishedWork = parentFiber,
		        flags = finishedWork.flags;
		      switch (finishedWork.tag) {
		        case 0:
		        case 11:
		        case 15:
		          recursivelyTraverseReappearLayoutEffects(
		            finishedRoot,
		            finishedWork,
		            includeWorkInProgressEffects
		          );
		          commitHookEffectListMount(4, finishedWork);
		          break;
		        case 1:
		          recursivelyTraverseReappearLayoutEffects(
		            finishedRoot,
		            finishedWork,
		            includeWorkInProgressEffects
		          );
		          current = finishedWork;
		          finishedRoot = current.stateNode;
		          if ("function" === typeof finishedRoot.componentDidMount)
		            try {
		              finishedRoot.componentDidMount();
		            } catch (error) {
		              captureCommitPhaseError(current, current.return, error);
		            }
		          current = finishedWork;
		          finishedRoot = current.updateQueue;
		          if (null !== finishedRoot) {
		            var instance = current.stateNode;
		            try {
		              var hiddenCallbacks = finishedRoot.shared.hiddenCallbacks;
		              if (null !== hiddenCallbacks)
		                for (
		                  finishedRoot.shared.hiddenCallbacks = null, finishedRoot = 0;
		                  finishedRoot < hiddenCallbacks.length;
		                  finishedRoot++
		                )
		                  callCallback(hiddenCallbacks[finishedRoot], instance);
		            } catch (error) {
		              captureCommitPhaseError(current, current.return, error);
		            }
		          }
		          includeWorkInProgressEffects &&
		            flags & 64 &&
		            commitClassCallbacks(finishedWork);
		          safelyAttachRef(finishedWork, finishedWork.return);
		          break;
		        case 26:
		        case 27:
		        case 5:
		          recursivelyTraverseReappearLayoutEffects(
		            finishedRoot,
		            finishedWork,
		            includeWorkInProgressEffects
		          );
		          includeWorkInProgressEffects &&
		            null === current &&
		            flags & 4 &&
		            commitHostMount(finishedWork);
		          safelyAttachRef(finishedWork, finishedWork.return);
		          break;
		        case 12:
		          recursivelyTraverseReappearLayoutEffects(
		            finishedRoot,
		            finishedWork,
		            includeWorkInProgressEffects
		          );
		          break;
		        case 13:
		          recursivelyTraverseReappearLayoutEffects(
		            finishedRoot,
		            finishedWork,
		            includeWorkInProgressEffects
		          );
		          includeWorkInProgressEffects &&
		            flags & 4 &&
		            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
		          break;
		        case 22:
		          null === finishedWork.memoizedState &&
		            recursivelyTraverseReappearLayoutEffects(
		              finishedRoot,
		              finishedWork,
		              includeWorkInProgressEffects
		            );
		          safelyAttachRef(finishedWork, finishedWork.return);
		          break;
		        default:
		          recursivelyTraverseReappearLayoutEffects(
		            finishedRoot,
		            finishedWork,
		            includeWorkInProgressEffects
		          );
		      }
		      parentFiber = parentFiber.sibling;
		    }
		  }
		  function commitOffscreenPassiveMountEffects(current, finishedWork) {
		    var previousCache = null;
		    null !== current &&
		      null !== current.memoizedState &&
		      null !== current.memoizedState.cachePool &&
		      (previousCache = current.memoizedState.cachePool.pool);
		    current = null;
		    null !== finishedWork.memoizedState &&
		      null !== finishedWork.memoizedState.cachePool &&
		      (current = finishedWork.memoizedState.cachePool.pool);
		    current !== previousCache &&
		      (null != current && current.refCount++,
		      null != previousCache && releaseCache(previousCache));
		  }
		  function commitCachePassiveMountEffect(current, finishedWork) {
		    current = null;
		    null !== finishedWork.alternate &&
		      (current = finishedWork.alternate.memoizedState.cache);
		    finishedWork = finishedWork.memoizedState.cache;
		    finishedWork !== current &&
		      (finishedWork.refCount++, null != current && releaseCache(current));
		  }
		  function recursivelyTraversePassiveMountEffects(
		    root,
		    parentFiber,
		    committedLanes,
		    committedTransitions
		  ) {
		    if (parentFiber.subtreeFlags & 10256)
		      for (parentFiber = parentFiber.child; null !== parentFiber; )
		        commitPassiveMountOnFiber(
		          root,
		          parentFiber,
		          committedLanes,
		          committedTransitions
		        ),
		          (parentFiber = parentFiber.sibling);
		  }
		  function commitPassiveMountOnFiber(
		    finishedRoot,
		    finishedWork,
		    committedLanes,
		    committedTransitions
		  ) {
		    var flags = finishedWork.flags;
		    switch (finishedWork.tag) {
		      case 0:
		      case 11:
		      case 15:
		        recursivelyTraversePassiveMountEffects(
		          finishedRoot,
		          finishedWork,
		          committedLanes,
		          committedTransitions
		        );
		        flags & 2048 && commitHookEffectListMount(9, finishedWork);
		        break;
		      case 3:
		        recursivelyTraversePassiveMountEffects(
		          finishedRoot,
		          finishedWork,
		          committedLanes,
		          committedTransitions
		        );
		        flags & 2048 &&
		          ((finishedRoot = null),
		          null !== finishedWork.alternate &&
		            (finishedRoot = finishedWork.alternate.memoizedState.cache),
		          (finishedWork = finishedWork.memoizedState.cache),
		          finishedWork !== finishedRoot &&
		            (finishedWork.refCount++,
		            null != finishedRoot && releaseCache(finishedRoot)));
		        break;
		      case 12:
		        if (flags & 2048) {
		          recursivelyTraversePassiveMountEffects(
		            finishedRoot,
		            finishedWork,
		            committedLanes,
		            committedTransitions
		          );
		          finishedRoot = finishedWork.stateNode;
		          try {
		            var _finishedWork$memoize2 = finishedWork.memoizedProps,
		              id = _finishedWork$memoize2.id,
		              onPostCommit = _finishedWork$memoize2.onPostCommit;
		            "function" === typeof onPostCommit &&
		              onPostCommit(
		                id,
		                null === finishedWork.alternate ? "mount" : "update",
		                finishedRoot.passiveEffectDuration,
		                -0
		              );
		          } catch (error) {
		            captureCommitPhaseError(finishedWork, finishedWork.return, error);
		          }
		        } else
		          recursivelyTraversePassiveMountEffects(
		            finishedRoot,
		            finishedWork,
		            committedLanes,
		            committedTransitions
		          );
		        break;
		      case 23:
		        break;
		      case 22:
		        _finishedWork$memoize2 = finishedWork.stateNode;
		        null !== finishedWork.memoizedState
		          ? _finishedWork$memoize2._visibility & 4
		            ? recursivelyTraversePassiveMountEffects(
		                finishedRoot,
		                finishedWork,
		                committedLanes,
		                committedTransitions
		              )
		            : recursivelyTraverseAtomicPassiveEffects(
		                finishedRoot,
		                finishedWork
		              )
		          : _finishedWork$memoize2._visibility & 4
		            ? recursivelyTraversePassiveMountEffects(
		                finishedRoot,
		                finishedWork,
		                committedLanes,
		                committedTransitions
		              )
		            : ((_finishedWork$memoize2._visibility |= 4),
		              recursivelyTraverseReconnectPassiveEffects(
		                finishedRoot,
		                finishedWork,
		                committedLanes,
		                committedTransitions,
		                0 !== (finishedWork.subtreeFlags & 10256)
		              ));
		        flags & 2048 &&
		          commitOffscreenPassiveMountEffects(
		            finishedWork.alternate,
		            finishedWork
		          );
		        break;
		      case 24:
		        recursivelyTraversePassiveMountEffects(
		          finishedRoot,
		          finishedWork,
		          committedLanes,
		          committedTransitions
		        );
		        flags & 2048 &&
		          commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
		        break;
		      default:
		        recursivelyTraversePassiveMountEffects(
		          finishedRoot,
		          finishedWork,
		          committedLanes,
		          committedTransitions
		        );
		    }
		  }
		  function recursivelyTraverseReconnectPassiveEffects(
		    finishedRoot$jscomp$0,
		    parentFiber,
		    committedLanes$jscomp$0,
		    committedTransitions$jscomp$0,
		    includeWorkInProgressEffects
		  ) {
		    includeWorkInProgressEffects =
		      includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 10256);
		    for (parentFiber = parentFiber.child; null !== parentFiber; ) {
		      var finishedRoot = finishedRoot$jscomp$0,
		        finishedWork = parentFiber,
		        committedLanes = committedLanes$jscomp$0,
		        committedTransitions = committedTransitions$jscomp$0,
		        flags = finishedWork.flags;
		      switch (finishedWork.tag) {
		        case 0:
		        case 11:
		        case 15:
		          recursivelyTraverseReconnectPassiveEffects(
		            finishedRoot,
		            finishedWork,
		            committedLanes,
		            committedTransitions,
		            includeWorkInProgressEffects
		          );
		          commitHookEffectListMount(8, finishedWork);
		          break;
		        case 23:
		          break;
		        case 22:
		          var instance = finishedWork.stateNode;
		          null !== finishedWork.memoizedState
		            ? instance._visibility & 4
		              ? recursivelyTraverseReconnectPassiveEffects(
		                  finishedRoot,
		                  finishedWork,
		                  committedLanes,
		                  committedTransitions,
		                  includeWorkInProgressEffects
		                )
		              : recursivelyTraverseAtomicPassiveEffects(
		                  finishedRoot,
		                  finishedWork
		                )
		            : ((instance._visibility |= 4),
		              recursivelyTraverseReconnectPassiveEffects(
		                finishedRoot,
		                finishedWork,
		                committedLanes,
		                committedTransitions,
		                includeWorkInProgressEffects
		              ));
		          includeWorkInProgressEffects &&
		            flags & 2048 &&
		            commitOffscreenPassiveMountEffects(
		              finishedWork.alternate,
		              finishedWork
		            );
		          break;
		        case 24:
		          recursivelyTraverseReconnectPassiveEffects(
		            finishedRoot,
		            finishedWork,
		            committedLanes,
		            committedTransitions,
		            includeWorkInProgressEffects
		          );
		          includeWorkInProgressEffects &&
		            flags & 2048 &&
		            commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
		          break;
		        default:
		          recursivelyTraverseReconnectPassiveEffects(
		            finishedRoot,
		            finishedWork,
		            committedLanes,
		            committedTransitions,
		            includeWorkInProgressEffects
		          );
		      }
		      parentFiber = parentFiber.sibling;
		    }
		  }
		  function recursivelyTraverseAtomicPassiveEffects(
		    finishedRoot$jscomp$0,
		    parentFiber
		  ) {
		    if (parentFiber.subtreeFlags & 10256)
		      for (parentFiber = parentFiber.child; null !== parentFiber; ) {
		        var finishedRoot = finishedRoot$jscomp$0,
		          finishedWork = parentFiber,
		          flags = finishedWork.flags;
		        switch (finishedWork.tag) {
		          case 22:
		            recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
		            flags & 2048 &&
		              commitOffscreenPassiveMountEffects(
		                finishedWork.alternate,
		                finishedWork
		              );
		            break;
		          case 24:
		            recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
		            flags & 2048 &&
		              commitCachePassiveMountEffect(
		                finishedWork.alternate,
		                finishedWork
		              );
		            break;
		          default:
		            recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
		        }
		        parentFiber = parentFiber.sibling;
		      }
		  }
		  function recursivelyAccumulateSuspenseyCommit(parentFiber) {
		    if (parentFiber.subtreeFlags & suspenseyCommitFlag)
		      for (parentFiber = parentFiber.child; null !== parentFiber; )
		        accumulateSuspenseyCommitOnFiber(parentFiber),
		          (parentFiber = parentFiber.sibling);
		  }
		  function accumulateSuspenseyCommitOnFiber(fiber) {
		    switch (fiber.tag) {
		      case 26:
		        recursivelyAccumulateSuspenseyCommit(fiber);
		        fiber.flags & suspenseyCommitFlag &&
		          (null !== fiber.memoizedState
		            ? suspendResource(
		                currentHoistableRoot,
		                fiber.memoizedState,
		                fiber.memoizedProps
		              )
		            : suspendInstance(fiber.type, fiber.memoizedProps));
		        break;
		      case 5:
		        recursivelyAccumulateSuspenseyCommit(fiber);
		        fiber.flags & suspenseyCommitFlag &&
		          suspendInstance(fiber.type, fiber.memoizedProps);
		        break;
		      case 3:
		      case 4:
		        if (supportsResources) {
		          var previousHoistableRoot = currentHoistableRoot;
		          currentHoistableRoot = getHoistableRoot(
		            fiber.stateNode.containerInfo
		          );
		          recursivelyAccumulateSuspenseyCommit(fiber);
		          currentHoistableRoot = previousHoistableRoot;
		        } else recursivelyAccumulateSuspenseyCommit(fiber);
		        break;
		      case 22:
		        null === fiber.memoizedState &&
		          ((previousHoistableRoot = fiber.alternate),
		          null !== previousHoistableRoot &&
		          null !== previousHoistableRoot.memoizedState
		            ? ((previousHoistableRoot = suspenseyCommitFlag),
		              (suspenseyCommitFlag = 16777216),
		              recursivelyAccumulateSuspenseyCommit(fiber),
		              (suspenseyCommitFlag = previousHoistableRoot))
		            : recursivelyAccumulateSuspenseyCommit(fiber));
		        break;
		      default:
		        recursivelyAccumulateSuspenseyCommit(fiber);
		    }
		  }
		  function detachAlternateSiblings(parentFiber) {
		    var previousFiber = parentFiber.alternate;
		    if (
		      null !== previousFiber &&
		      ((parentFiber = previousFiber.child), null !== parentFiber)
		    ) {
		      previousFiber.child = null;
		      do
		        (previousFiber = parentFiber.sibling),
		          (parentFiber.sibling = null),
		          (parentFiber = previousFiber);
		      while (null !== parentFiber);
		    }
		  }
		  function recursivelyTraversePassiveUnmountEffects(parentFiber) {
		    var deletions = parentFiber.deletions;
		    if (0 !== (parentFiber.flags & 16)) {
		      if (null !== deletions)
		        for (var i = 0; i < deletions.length; i++) {
		          var childToDelete = deletions[i];
		          nextEffect = childToDelete;
		          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
		            childToDelete,
		            parentFiber
		          );
		        }
		      detachAlternateSiblings(parentFiber);
		    }
		    if (parentFiber.subtreeFlags & 10256)
		      for (parentFiber = parentFiber.child; null !== parentFiber; )
		        commitPassiveUnmountOnFiber(parentFiber),
		          (parentFiber = parentFiber.sibling);
		  }
		  function commitPassiveUnmountOnFiber(finishedWork) {
		    switch (finishedWork.tag) {
		      case 0:
		      case 11:
		      case 15:
		        recursivelyTraversePassiveUnmountEffects(finishedWork);
		        finishedWork.flags & 2048 &&
		          commitHookEffectListUnmount(9, finishedWork, finishedWork.return);
		        break;
		      case 3:
		        recursivelyTraversePassiveUnmountEffects(finishedWork);
		        break;
		      case 12:
		        recursivelyTraversePassiveUnmountEffects(finishedWork);
		        break;
		      case 22:
		        var instance = finishedWork.stateNode;
		        null !== finishedWork.memoizedState &&
		        instance._visibility & 4 &&
		        (null === finishedWork.return || 13 !== finishedWork.return.tag)
		          ? ((instance._visibility &= -5),
		            recursivelyTraverseDisconnectPassiveEffects(finishedWork))
		          : recursivelyTraversePassiveUnmountEffects(finishedWork);
		        break;
		      default:
		        recursivelyTraversePassiveUnmountEffects(finishedWork);
		    }
		  }
		  function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
		    var deletions = parentFiber.deletions;
		    if (0 !== (parentFiber.flags & 16)) {
		      if (null !== deletions)
		        for (var i = 0; i < deletions.length; i++) {
		          var childToDelete = deletions[i];
		          nextEffect = childToDelete;
		          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
		            childToDelete,
		            parentFiber
		          );
		        }
		      detachAlternateSiblings(parentFiber);
		    }
		    for (parentFiber = parentFiber.child; null !== parentFiber; ) {
		      deletions = parentFiber;
		      switch (deletions.tag) {
		        case 0:
		        case 11:
		        case 15:
		          commitHookEffectListUnmount(8, deletions, deletions.return);
		          recursivelyTraverseDisconnectPassiveEffects(deletions);
		          break;
		        case 22:
		          i = deletions.stateNode;
		          i._visibility & 4 &&
		            ((i._visibility &= -5),
		            recursivelyTraverseDisconnectPassiveEffects(deletions));
		          break;
		        default:
		          recursivelyTraverseDisconnectPassiveEffects(deletions);
		      }
		      parentFiber = parentFiber.sibling;
		    }
		  }
		  function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
		    deletedSubtreeRoot,
		    nearestMountedAncestor
		  ) {
		    for (; null !== nextEffect; ) {
		      var fiber = nextEffect;
		      switch (fiber.tag) {
		        case 0:
		        case 11:
		        case 15:
		          commitHookEffectListUnmount(8, fiber, nearestMountedAncestor);
		          break;
		        case 23:
		        case 22:
		          if (
		            null !== fiber.memoizedState &&
		            null !== fiber.memoizedState.cachePool
		          ) {
		            var cache = fiber.memoizedState.cachePool.pool;
		            null != cache && cache.refCount++;
		          }
		          break;
		        case 24:
		          releaseCache(fiber.memoizedState.cache);
		      }
		      cache = fiber.child;
		      if (null !== cache) (cache.return = fiber), (nextEffect = cache);
		      else
		        a: for (fiber = deletedSubtreeRoot; null !== nextEffect; ) {
		          cache = nextEffect;
		          var sibling = cache.sibling,
		            returnFiber = cache.return;
		          detachFiberAfterEffects(cache);
		          if (cache === fiber) {
		            nextEffect = null;
		            break a;
		          }
		          if (null !== sibling) {
		            sibling.return = returnFiber;
		            nextEffect = sibling;
		            break a;
		          }
		          nextEffect = returnFiber;
		        }
		    }
		  }
		  function findFiberRootForHostRoot(hostRoot) {
		    var maybeFiber = getInstanceFromNode(hostRoot);
		    if (null != maybeFiber) {
		      if ("string" !== typeof maybeFiber.memoizedProps["data-testname"])
		        throw Error(formatProdErrorMessage(364));
		      return maybeFiber;
		    }
		    hostRoot = findFiberRoot(hostRoot);
		    if (null === hostRoot) throw Error(formatProdErrorMessage(362));
		    return hostRoot.stateNode.current;
		  }
		  function matchSelector(fiber$jscomp$0, selector) {
		    var tag = fiber$jscomp$0.tag;
		    switch (selector.$$typeof) {
		      case COMPONENT_TYPE:
		        if (fiber$jscomp$0.type === selector.value) return !0;
		        break;
		      case HAS_PSEUDO_CLASS_TYPE:
		        a: {
		          selector = selector.value;
		          fiber$jscomp$0 = [fiber$jscomp$0, 0];
		          for (tag = 0; tag < fiber$jscomp$0.length; ) {
		            var fiber = fiber$jscomp$0[tag++],
		              tag$jscomp$0 = fiber.tag,
		              selectorIndex = fiber$jscomp$0[tag++],
		              selector$jscomp$0 = selector[selectorIndex];
		            if (
		              (5 !== tag$jscomp$0 &&
		                26 !== tag$jscomp$0 &&
		                27 !== tag$jscomp$0) ||
		              !isHiddenSubtree(fiber)
		            ) {
		              for (
		                ;
		                null != selector$jscomp$0 &&
		                matchSelector(fiber, selector$jscomp$0);

		              )
		                selectorIndex++, (selector$jscomp$0 = selector[selectorIndex]);
		              if (selectorIndex === selector.length) {
		                selector = !0;
		                break a;
		              } else
		                for (fiber = fiber.child; null !== fiber; )
		                  fiber$jscomp$0.push(fiber, selectorIndex),
		                    (fiber = fiber.sibling);
		            }
		          }
		          selector = !1;
		        }
		        return selector;
		      case ROLE_TYPE:
		        if (
		          (5 === tag || 26 === tag || 27 === tag) &&
		          matchAccessibilityRole(fiber$jscomp$0.stateNode, selector.value)
		        )
		          return !0;
		        break;
		      case TEXT_TYPE:
		        if (5 === tag || 6 === tag || 26 === tag || 27 === tag)
		          if (
		            ((fiber$jscomp$0 = getTextContent(fiber$jscomp$0)),
		            null !== fiber$jscomp$0 &&
		              0 <= fiber$jscomp$0.indexOf(selector.value))
		          )
		            return !0;
		        break;
		      case TEST_NAME_TYPE:
		        if (5 === tag || 26 === tag || 27 === tag)
		          if (
		            ((fiber$jscomp$0 = fiber$jscomp$0.memoizedProps["data-testname"]),
		            "string" === typeof fiber$jscomp$0 &&
		              fiber$jscomp$0.toLowerCase() === selector.value.toLowerCase())
		          )
		            return !0;
		        break;
		      default:
		        throw Error(formatProdErrorMessage(365));
		    }
		    return !1;
		  }
		  function selectorToString(selector) {
		    switch (selector.$$typeof) {
		      case COMPONENT_TYPE:
		        return (
		          "<" + (getComponentNameFromType(selector.value) || "Unknown") + ">"
		        );
		      case HAS_PSEUDO_CLASS_TYPE:
		        return ":has(" + (selectorToString(selector) || "") + ")";
		      case ROLE_TYPE:
		        return '[role="' + selector.value + '"]';
		      case TEXT_TYPE:
		        return '"' + selector.value + '"';
		      case TEST_NAME_TYPE:
		        return '[data-testname="' + selector.value + '"]';
		      default:
		        throw Error(formatProdErrorMessage(365));
		    }
		  }
		  function findPaths(root, selectors) {
		    var matchingFibers = [];
		    root = [root, 0];
		    for (var index = 0; index < root.length; ) {
		      var fiber = root[index++],
		        tag = fiber.tag,
		        selectorIndex = root[index++],
		        selector = selectors[selectorIndex];
		      if ((5 !== tag && 26 !== tag && 27 !== tag) || !isHiddenSubtree(fiber)) {
		        for (; null != selector && matchSelector(fiber, selector); )
		          selectorIndex++, (selector = selectors[selectorIndex]);
		        if (selectorIndex === selectors.length) matchingFibers.push(fiber);
		        else
		          for (fiber = fiber.child; null !== fiber; )
		            root.push(fiber, selectorIndex), (fiber = fiber.sibling);
		      }
		    }
		    return matchingFibers;
		  }
		  function findAllNodes(hostRoot, selectors) {
		    if (!supportsTestSelectors) throw Error(formatProdErrorMessage(363));
		    hostRoot = findFiberRootForHostRoot(hostRoot);
		    hostRoot = findPaths(hostRoot, selectors);
		    selectors = [];
		    hostRoot = Array.from(hostRoot);
		    for (var index = 0; index < hostRoot.length; ) {
		      var node = hostRoot[index++],
		        tag = node.tag;
		      if (5 === tag || 26 === tag || 27 === tag)
		        isHiddenSubtree(node) || selectors.push(node.stateNode);
		      else
		        for (node = node.child; null !== node; )
		          hostRoot.push(node), (node = node.sibling);
		    }
		    return selectors;
		  }
		  function requestUpdateLane() {
		    if (0 !== (executionContext & 2) && 0 !== workInProgressRootRenderLanes)
		      return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
		    if (null !== ReactSharedInternals.T) {
		      var actionScopeLane = currentEntangledLane;
		      return 0 !== actionScopeLane ? actionScopeLane : requestTransitionLane();
		    }
		    return resolveUpdatePriority();
		  }
		  function requestDeferredLane() {
		    0 === workInProgressDeferredLane &&
		      (workInProgressDeferredLane =
		        0 === (workInProgressRootRenderLanes & 536870912) || isHydrating
		          ? claimNextTransitionLane()
		          : 536870912);
		    var suspenseHandler = suspenseHandlerStackCursor.current;
		    null !== suspenseHandler && (suspenseHandler.flags |= 32);
		    return workInProgressDeferredLane;
		  }
		  function scheduleUpdateOnFiber(root, fiber, lane) {
		    if (
		      (root === workInProgressRoot && 2 === workInProgressSuspendedReason) ||
		      null !== root.cancelPendingCommit
		    )
		      prepareFreshStack(root, 0),
		        markRootSuspended(
		          root,
		          workInProgressRootRenderLanes,
		          workInProgressDeferredLane,
		          !1
		        );
		    markRootUpdated$1(root, lane);
		    if (0 === (executionContext & 2) || root !== workInProgressRoot)
		      root === workInProgressRoot &&
		        (0 === (executionContext & 2) &&
		          (workInProgressRootInterleavedUpdatedLanes |= lane),
		        4 === workInProgressRootExitStatus &&
		          markRootSuspended(
		            root,
		            workInProgressRootRenderLanes,
		            workInProgressDeferredLane,
		            !1
		          )),
		        ensureRootIsScheduled(root);
		  }
		  function performWorkOnRoot(root$jscomp$0, lanes, forceSync) {
		    if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(327));
		    var shouldTimeSlice =
		        (!forceSync &&
		          0 === (lanes & 60) &&
		          0 === (lanes & root$jscomp$0.expiredLanes)) ||
		        checkIfRootIsPrerendering(root$jscomp$0, lanes),
		      exitStatus = shouldTimeSlice
		        ? renderRootConcurrent(root$jscomp$0, lanes)
		        : renderRootSync(root$jscomp$0, lanes, !0),
		      renderWasConcurrent = shouldTimeSlice;
		    do {
		      if (0 === exitStatus) {
		        workInProgressRootIsPrerendering &&
		          !shouldTimeSlice &&
		          markRootSuspended(root$jscomp$0, lanes, 0, !1);
		        break;
		      } else if (6 === exitStatus)
		        markRootSuspended(
		          root$jscomp$0,
		          lanes,
		          0,
		          !workInProgressRootDidSkipSuspendedSiblings
		        );
		      else {
		        forceSync = root$jscomp$0.current.alternate;
		        if (
		          renderWasConcurrent &&
		          !isRenderConsistentWithExternalStores(forceSync)
		        ) {
		          exitStatus = renderRootSync(root$jscomp$0, lanes, !1);
		          renderWasConcurrent = !1;
		          continue;
		        }
		        if (2 === exitStatus) {
		          renderWasConcurrent = lanes;
		          if (root$jscomp$0.errorRecoveryDisabledLanes & renderWasConcurrent)
		            var JSCompiler_inline_result = 0;
		          else
		            (JSCompiler_inline_result =
		              root$jscomp$0.pendingLanes & -536870913),
		              (JSCompiler_inline_result =
		                0 !== JSCompiler_inline_result
		                  ? JSCompiler_inline_result
		                  : JSCompiler_inline_result & 536870912
		                    ? 536870912
		                    : 0);
		          if (0 !== JSCompiler_inline_result) {
		            lanes = JSCompiler_inline_result;
		            a: {
		              var root = root$jscomp$0;
		              exitStatus = workInProgressRootConcurrentErrors;
		              var wasRootDehydrated =
		                supportsHydration && root.current.memoizedState.isDehydrated;
		              wasRootDehydrated &&
		                (prepareFreshStack(root, JSCompiler_inline_result).flags |=
		                  256);
		              JSCompiler_inline_result = renderRootSync(
		                root,
		                JSCompiler_inline_result,
		                !1
		              );
		              if (2 !== JSCompiler_inline_result) {
		                if (
		                  workInProgressRootDidAttachPingListener &&
		                  !wasRootDehydrated
		                ) {
		                  root.errorRecoveryDisabledLanes |= renderWasConcurrent;
		                  workInProgressRootInterleavedUpdatedLanes |=
		                    renderWasConcurrent;
		                  exitStatus = 4;
		                  break a;
		                }
		                renderWasConcurrent = workInProgressRootRecoverableErrors;
		                workInProgressRootRecoverableErrors = exitStatus;
		                null !== renderWasConcurrent &&
		                  queueRecoverableErrors(renderWasConcurrent);
		              }
		              exitStatus = JSCompiler_inline_result;
		            }
		            renderWasConcurrent = !1;
		            if (2 !== exitStatus) continue;
		          }
		        }
		        if (1 === exitStatus) {
		          prepareFreshStack(root$jscomp$0, 0);
		          markRootSuspended(root$jscomp$0, lanes, 0, !0);
		          break;
		        }
		        a: {
		          shouldTimeSlice = root$jscomp$0;
		          switch (exitStatus) {
		            case 0:
		            case 1:
		              throw Error(formatProdErrorMessage(345));
		            case 4:
		              if ((lanes & 4194176) === lanes) {
		                markRootSuspended(
		                  shouldTimeSlice,
		                  lanes,
		                  workInProgressDeferredLane,
		                  !workInProgressRootDidSkipSuspendedSiblings
		                );
		                break a;
		              }
		              break;
		            case 2:
		              workInProgressRootRecoverableErrors = null;
		              break;
		            case 3:
		            case 5:
		              break;
		            default:
		              throw Error(formatProdErrorMessage(329));
		          }
		          shouldTimeSlice.finishedWork = forceSync;
		          shouldTimeSlice.finishedLanes = lanes;
		          if (
		            (lanes & 62914560) === lanes &&
		            ((renderWasConcurrent = globalMostRecentFallbackTime + 300 - now()),
		            10 < renderWasConcurrent)
		          ) {
		            markRootSuspended(
		              shouldTimeSlice,
		              lanes,
		              workInProgressDeferredLane,
		              !workInProgressRootDidSkipSuspendedSiblings
		            );
		            if (0 !== getNextLanes(shouldTimeSlice, 0)) break a;
		            shouldTimeSlice.timeoutHandle = scheduleTimeout(
		              commitRootWhenReady.bind(
		                null,
		                shouldTimeSlice,
		                forceSync,
		                workInProgressRootRecoverableErrors,
		                workInProgressTransitions,
		                workInProgressRootDidIncludeRecursiveRenderUpdate,
		                lanes,
		                workInProgressDeferredLane,
		                workInProgressRootInterleavedUpdatedLanes,
		                workInProgressSuspendedRetryLanes,
		                workInProgressRootDidSkipSuspendedSiblings,
		                2,
		                -0,
		                0
		              ),
		              renderWasConcurrent
		            );
		            break a;
		          }
		          commitRootWhenReady(
		            shouldTimeSlice,
		            forceSync,
		            workInProgressRootRecoverableErrors,
		            workInProgressTransitions,
		            workInProgressRootDidIncludeRecursiveRenderUpdate,
		            lanes,
		            workInProgressDeferredLane,
		            workInProgressRootInterleavedUpdatedLanes,
		            workInProgressSuspendedRetryLanes,
		            workInProgressRootDidSkipSuspendedSiblings,
		            0,
		            -0,
		            0
		          );
		        }
		      }
		      break;
		    } while (1);
		    ensureRootIsScheduled(root$jscomp$0);
		  }
		  function queueRecoverableErrors(errors) {
		    null === workInProgressRootRecoverableErrors
		      ? (workInProgressRootRecoverableErrors = errors)
		      : workInProgressRootRecoverableErrors.push.apply(
		          workInProgressRootRecoverableErrors,
		          errors
		        );
		  }
		  function commitRootWhenReady(
		    root,
		    finishedWork,
		    recoverableErrors,
		    transitions,
		    didIncludeRenderPhaseUpdate,
		    lanes,
		    spawnedLane,
		    updatedLanes,
		    suspendedRetryLanes,
		    didSkipSuspendedSiblings,
		    suspendedCommitReason,
		    completedRenderStartTime,
		    completedRenderEndTime
		  ) {
		    var subtreeFlags = finishedWork.subtreeFlags;
		    if (subtreeFlags & 8192 || 16785408 === (subtreeFlags & 16785408))
		      if (
		        (startSuspendingCommit(),
		        accumulateSuspenseyCommitOnFiber(finishedWork),
		        (finishedWork = waitForCommitToBeReady()),
		        null !== finishedWork)
		      ) {
		        root.cancelPendingCommit = finishedWork(
		          commitRoot.bind(
		            null,
		            root,
		            recoverableErrors,
		            transitions,
		            didIncludeRenderPhaseUpdate,
		            spawnedLane,
		            updatedLanes,
		            suspendedRetryLanes,
		            1,
		            completedRenderStartTime,
		            completedRenderEndTime
		          )
		        );
		        markRootSuspended(root, lanes, spawnedLane, !didSkipSuspendedSiblings);
		        return;
		      }
		    commitRoot(
		      root,
		      recoverableErrors,
		      transitions,
		      didIncludeRenderPhaseUpdate,
		      spawnedLane,
		      updatedLanes,
		      suspendedRetryLanes,
		      suspendedCommitReason,
		      completedRenderStartTime,
		      completedRenderEndTime
		    );
		  }
		  function isRenderConsistentWithExternalStores(finishedWork) {
		    for (var node = finishedWork; ; ) {
		      var tag = node.tag;
		      if (
		        (0 === tag || 11 === tag || 15 === tag) &&
		        node.flags & 16384 &&
		        ((tag = node.updateQueue),
		        null !== tag && ((tag = tag.stores), null !== tag))
		      )
		        for (var i = 0; i < tag.length; i++) {
		          var check = tag[i],
		            getSnapshot = check.getSnapshot;
		          check = check.value;
		          try {
		            if (!objectIs(getSnapshot(), check)) return !1;
		          } catch (error) {
		            return !1;
		          }
		        }
		      tag = node.child;
		      if (node.subtreeFlags & 16384 && null !== tag)
		        (tag.return = node), (node = tag);
		      else {
		        if (node === finishedWork) break;
		        for (; null === node.sibling; ) {
		          if (null === node.return || node.return === finishedWork) return !0;
		          node = node.return;
		        }
		        node.sibling.return = node.return;
		        node = node.sibling;
		      }
		    }
		    return !0;
		  }
		  function markRootSuspended(
		    root,
		    suspendedLanes,
		    spawnedLane,
		    didAttemptEntireTree
		  ) {
		    suspendedLanes &= ~workInProgressRootPingedLanes;
		    suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
		    root.suspendedLanes |= suspendedLanes;
		    root.pingedLanes &= ~suspendedLanes;
		    didAttemptEntireTree && (root.warmLanes |= suspendedLanes);
		    didAttemptEntireTree = root.expirationTimes;
		    for (var lanes = suspendedLanes; 0 < lanes; ) {
		      var index$6 = 31 - clz32(lanes),
		        lane = 1 << index$6;
		      didAttemptEntireTree[index$6] = -1;
		      lanes &= ~lane;
		    }
		    0 !== spawnedLane &&
		      markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);
		  }
		  function flushSyncWork() {
		    return 0 === (executionContext & 6)
		      ? (flushSyncWorkAcrossRoots_impl(0, !1), !1)
		      : !0;
		  }
		  function resetWorkInProgressStack() {
		    if (null !== workInProgress) {
		      if (0 === workInProgressSuspendedReason)
		        var interruptedWork = workInProgress.return;
		      else
		        (interruptedWork = workInProgress),
		          (lastContextDependency = currentlyRenderingFiber = null),
		          resetHooksOnUnwind(interruptedWork),
		          (thenableState$1 = null),
		          (thenableIndexCounter$1 = 0),
		          (interruptedWork = workInProgress);
		      for (; null !== interruptedWork; )
		        unwindInterruptedWork(interruptedWork.alternate, interruptedWork),
		          (interruptedWork = interruptedWork.return);
		      workInProgress = null;
		    }
		  }
		  function prepareFreshStack(root, lanes) {
		    root.finishedWork = null;
		    root.finishedLanes = 0;
		    var timeoutHandle = root.timeoutHandle;
		    timeoutHandle !== noTimeout &&
		      ((root.timeoutHandle = noTimeout), cancelTimeout(timeoutHandle));
		    timeoutHandle = root.cancelPendingCommit;
		    null !== timeoutHandle &&
		      ((root.cancelPendingCommit = null), timeoutHandle());
		    resetWorkInProgressStack();
		    workInProgressRoot = root;
		    workInProgress = timeoutHandle = createWorkInProgress(root.current, null);
		    workInProgressRootRenderLanes = lanes;
		    workInProgressSuspendedReason = 0;
		    workInProgressThrownValue = null;
		    workInProgressRootDidSkipSuspendedSiblings = !1;
		    workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);
		    workInProgressRootDidAttachPingListener = !1;
		    workInProgressSuspendedRetryLanes =
		      workInProgressDeferredLane =
		      workInProgressRootPingedLanes =
		      workInProgressRootInterleavedUpdatedLanes =
		      workInProgressRootSkippedLanes =
		      workInProgressRootExitStatus =
		        0;
		    workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors =
		      null;
		    workInProgressRootDidIncludeRecursiveRenderUpdate = !1;
		    0 !== (lanes & 8) && (lanes |= lanes & 32);
		    var allEntangledLanes = root.entangledLanes;
		    if (0 !== allEntangledLanes)
		      for (
		        root = root.entanglements, allEntangledLanes &= lanes;
		        0 < allEntangledLanes;

		      ) {
		        var index$4 = 31 - clz32(allEntangledLanes),
		          lane = 1 << index$4;
		        lanes |= root[index$4];
		        allEntangledLanes &= ~lane;
		      }
		    entangledRenderLanes = lanes;
		    finishQueueingConcurrentUpdates();
		    return timeoutHandle;
		  }
		  function handleThrow(root, thrownValue) {
		    currentlyRenderingFiber$1 = null;
		    ReactSharedInternals.H = ContextOnlyDispatcher;
		    thrownValue === SuspenseException
		      ? ((thrownValue = getSuspendedThenable()),
		        (workInProgressSuspendedReason = 3))
		      : thrownValue === SuspenseyCommitException
		        ? ((thrownValue = getSuspendedThenable()),
		          (workInProgressSuspendedReason = 4))
		        : (workInProgressSuspendedReason =
		            thrownValue === SelectiveHydrationException
		              ? 8
		              : null !== thrownValue &&
		                  "object" === typeof thrownValue &&
		                  "function" === typeof thrownValue.then
		                ? 6
		                : 1);
		    workInProgressThrownValue = thrownValue;
		    null === workInProgress &&
		      ((workInProgressRootExitStatus = 1),
		      logUncaughtError(
		        root,
		        createCapturedValueAtFiber(thrownValue, root.current)
		      ));
		  }
		  function shouldRemainOnPreviousScreen() {
		    var handler = suspenseHandlerStackCursor.current;
		    return null === handler
		      ? !0
		      : (workInProgressRootRenderLanes & 4194176) ===
		          workInProgressRootRenderLanes
		        ? null === shellBoundary
		          ? !0
		          : !1
		        : (workInProgressRootRenderLanes & 62914560) ===
		              workInProgressRootRenderLanes ||
		            0 !== (workInProgressRootRenderLanes & 536870912)
		          ? handler === shellBoundary
		          : !1;
		  }
		  function pushDispatcher() {
		    var prevDispatcher = ReactSharedInternals.H;
		    ReactSharedInternals.H = ContextOnlyDispatcher;
		    return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
		  }
		  function pushAsyncDispatcher() {
		    var prevAsyncDispatcher = ReactSharedInternals.A;
		    ReactSharedInternals.A = DefaultAsyncDispatcher;
		    return prevAsyncDispatcher;
		  }
		  function renderDidSuspendDelayIfPossible() {
		    workInProgressRootExitStatus = 4;
		    workInProgressRootDidSkipSuspendedSiblings ||
		      ((workInProgressRootRenderLanes & 4194176) !==
		        workInProgressRootRenderLanes &&
		        null !== suspenseHandlerStackCursor.current) ||
		      (workInProgressRootIsPrerendering = !0);
		    (0 === (workInProgressRootSkippedLanes & 134217727) &&
		      0 === (workInProgressRootInterleavedUpdatedLanes & 134217727)) ||
		      null === workInProgressRoot ||
		      markRootSuspended(
		        workInProgressRoot,
		        workInProgressRootRenderLanes,
		        workInProgressDeferredLane,
		        !1
		      );
		  }
		  function renderRootSync(root, lanes, shouldYieldForPrerendering) {
		    var prevExecutionContext = executionContext;
		    executionContext |= 2;
		    var prevDispatcher = pushDispatcher(),
		      prevAsyncDispatcher = pushAsyncDispatcher();
		    if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes)
		      (workInProgressTransitions = null), prepareFreshStack(root, lanes);
		    lanes = !1;
		    var exitStatus = workInProgressRootExitStatus;
		    a: do
		      try {
		        if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
		          var unitOfWork = workInProgress,
		            thrownValue = workInProgressThrownValue;
		          switch (workInProgressSuspendedReason) {
		            case 8:
		              resetWorkInProgressStack();
		              exitStatus = 6;
		              break a;
		            case 3:
		            case 2:
		            case 6:
		              null === suspenseHandlerStackCursor.current && (lanes = !0);
		              var reason = workInProgressSuspendedReason;
		              workInProgressSuspendedReason = 0;
		              workInProgressThrownValue = null;
		              throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
		              if (
		                shouldYieldForPrerendering &&
		                workInProgressRootIsPrerendering
		              ) {
		                exitStatus = 0;
		                break a;
		              }
		              break;
		            default:
		              (reason = workInProgressSuspendedReason),
		                (workInProgressSuspendedReason = 0),
		                (workInProgressThrownValue = null),
		                throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
		          }
		        }
		        workLoopSync();
		        exitStatus = workInProgressRootExitStatus;
		        break;
		      } catch (thrownValue$151) {
		        handleThrow(root, thrownValue$151);
		      }
		    while (1);
		    lanes && root.shellSuspendCounter++;
		    lastContextDependency = currentlyRenderingFiber = null;
		    executionContext = prevExecutionContext;
		    ReactSharedInternals.H = prevDispatcher;
		    ReactSharedInternals.A = prevAsyncDispatcher;
		    null === workInProgress &&
		      ((workInProgressRoot = null),
		      (workInProgressRootRenderLanes = 0),
		      finishQueueingConcurrentUpdates());
		    return exitStatus;
		  }
		  function workLoopSync() {
		    for (; null !== workInProgress; ) performUnitOfWork(workInProgress);
		  }
		  function renderRootConcurrent(root, lanes) {
		    var prevExecutionContext = executionContext;
		    executionContext |= 2;
		    var prevDispatcher = pushDispatcher(),
		      prevAsyncDispatcher = pushAsyncDispatcher();
		    workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes
		      ? ((workInProgressTransitions = null),
		        (workInProgressRootRenderTargetTime = now() + 500),
		        prepareFreshStack(root, lanes))
		      : (workInProgressRootIsPrerendering = checkIfRootIsPrerendering(
		          root,
		          lanes
		        ));
		    a: do
		      try {
		        if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
		          lanes = workInProgress;
		          var thrownValue = workInProgressThrownValue;
		          b: switch (workInProgressSuspendedReason) {
		            case 1:
		              workInProgressSuspendedReason = 0;
		              workInProgressThrownValue = null;
		              throwAndUnwindWorkLoop(root, lanes, thrownValue, 1);
		              break;
		            case 2:
		              if (isThenableResolved(thrownValue)) {
		                workInProgressSuspendedReason = 0;
		                workInProgressThrownValue = null;
		                replaySuspendedUnitOfWork(lanes);
		                break;
		              }
		              lanes = function () {
		                2 === workInProgressSuspendedReason &&
		                  workInProgressRoot === root &&
		                  (workInProgressSuspendedReason = 7);
		                ensureRootIsScheduled(root);
		              };
		              thrownValue.then(lanes, lanes);
		              break a;
		            case 3:
		              workInProgressSuspendedReason = 7;
		              break a;
		            case 4:
		              workInProgressSuspendedReason = 5;
		              break a;
		            case 7:
		              isThenableResolved(thrownValue)
		                ? ((workInProgressSuspendedReason = 0),
		                  (workInProgressThrownValue = null),
		                  replaySuspendedUnitOfWork(lanes))
		                : ((workInProgressSuspendedReason = 0),
		                  (workInProgressThrownValue = null),
		                  throwAndUnwindWorkLoop(root, lanes, thrownValue, 7));
		              break;
		            case 5:
		              var resource = null;
		              switch (workInProgress.tag) {
		                case 26:
		                  resource = workInProgress.memoizedState;
		                case 5:
		                case 27:
		                  var hostFiber = workInProgress,
		                    type = hostFiber.type,
		                    props = hostFiber.pendingProps;
		                  if (
		                    resource
		                      ? preloadResource(resource)
		                      : preloadInstance(type, props)
		                  ) {
		                    workInProgressSuspendedReason = 0;
		                    workInProgressThrownValue = null;
		                    var sibling = hostFiber.sibling;
		                    if (null !== sibling) workInProgress = sibling;
		                    else {
		                      var returnFiber = hostFiber.return;
		                      null !== returnFiber
		                        ? ((workInProgress = returnFiber),
		                          completeUnitOfWork(returnFiber))
		                        : (workInProgress = null);
		                    }
		                    break b;
		                  }
		              }
		              workInProgressSuspendedReason = 0;
		              workInProgressThrownValue = null;
		              throwAndUnwindWorkLoop(root, lanes, thrownValue, 5);
		              break;
		            case 6:
		              workInProgressSuspendedReason = 0;
		              workInProgressThrownValue = null;
		              throwAndUnwindWorkLoop(root, lanes, thrownValue, 6);
		              break;
		            case 8:
		              resetWorkInProgressStack();
		              workInProgressRootExitStatus = 6;
		              break a;
		            default:
		              throw Error(formatProdErrorMessage(462));
		          }
		        }
		        workLoopConcurrent();
		        break;
		      } catch (thrownValue$153) {
		        handleThrow(root, thrownValue$153);
		      }
		    while (1);
		    lastContextDependency = currentlyRenderingFiber = null;
		    ReactSharedInternals.H = prevDispatcher;
		    ReactSharedInternals.A = prevAsyncDispatcher;
		    executionContext = prevExecutionContext;
		    if (null !== workInProgress) return 0;
		    workInProgressRoot = null;
		    workInProgressRootRenderLanes = 0;
		    finishQueueingConcurrentUpdates();
		    return workInProgressRootExitStatus;
		  }
		  function workLoopConcurrent() {
		    for (; null !== workInProgress && !shouldYield(); )
		      performUnitOfWork(workInProgress);
		  }
		  function performUnitOfWork(unitOfWork) {
		    var next = beginWork(
		      unitOfWork.alternate,
		      unitOfWork,
		      entangledRenderLanes
		    );
		    unitOfWork.memoizedProps = unitOfWork.pendingProps;
		    null === next ? completeUnitOfWork(unitOfWork) : (workInProgress = next);
		  }
		  function replaySuspendedUnitOfWork(unitOfWork) {
		    var next = unitOfWork;
		    var current = next.alternate;
		    switch (next.tag) {
		      case 15:
		      case 0:
		        next = replayFunctionComponent(
		          current,
		          next,
		          next.pendingProps,
		          next.type,
		          void 0,
		          workInProgressRootRenderLanes
		        );
		        break;
		      case 11:
		        next = replayFunctionComponent(
		          current,
		          next,
		          next.pendingProps,
		          next.type.render,
		          next.ref,
		          workInProgressRootRenderLanes
		        );
		        break;
		      case 5:
		        resetHooksOnUnwind(next);
		      default:
		        unwindInterruptedWork(current, next),
		          (next = workInProgress =
		            resetWorkInProgress(next, entangledRenderLanes)),
		          (next = beginWork(current, next, entangledRenderLanes));
		    }
		    unitOfWork.memoizedProps = unitOfWork.pendingProps;
		    null === next ? completeUnitOfWork(unitOfWork) : (workInProgress = next);
		  }
		  function throwAndUnwindWorkLoop(
		    root,
		    unitOfWork,
		    thrownValue,
		    suspendedReason
		  ) {
		    lastContextDependency = currentlyRenderingFiber = null;
		    resetHooksOnUnwind(unitOfWork);
		    thenableState$1 = null;
		    thenableIndexCounter$1 = 0;
		    var returnFiber = unitOfWork.return;
		    try {
		      if (
		        throwException(
		          root,
		          returnFiber,
		          unitOfWork,
		          thrownValue,
		          workInProgressRootRenderLanes
		        )
		      ) {
		        workInProgressRootExitStatus = 1;
		        logUncaughtError(
		          root,
		          createCapturedValueAtFiber(thrownValue, root.current)
		        );
		        workInProgress = null;
		        return;
		      }
		    } catch (error) {
		      if (null !== returnFiber) throw ((workInProgress = returnFiber), error);
		      workInProgressRootExitStatus = 1;
		      logUncaughtError(
		        root,
		        createCapturedValueAtFiber(thrownValue, root.current)
		      );
		      workInProgress = null;
		      return;
		    }
		    if (unitOfWork.flags & 32768) {
		      if (isHydrating || 1 === suspendedReason) root = !0;
		      else if (
		        workInProgressRootIsPrerendering ||
		        0 !== (workInProgressRootRenderLanes & 536870912)
		      )
		        root = !1;
		      else if (
		        ((workInProgressRootDidSkipSuspendedSiblings = root = !0),
		        2 === suspendedReason || 3 === suspendedReason || 6 === suspendedReason)
		      )
		        (suspendedReason = suspenseHandlerStackCursor.current),
		          null !== suspendedReason &&
		            13 === suspendedReason.tag &&
		            (suspendedReason.flags |= 16384);
		      unwindUnitOfWork(unitOfWork, root);
		    } else completeUnitOfWork(unitOfWork);
		  }
		  function completeUnitOfWork(unitOfWork) {
		    var completedWork = unitOfWork;
		    do {
		      if (0 !== (completedWork.flags & 32768)) {
		        unwindUnitOfWork(
		          completedWork,
		          workInProgressRootDidSkipSuspendedSiblings
		        );
		        return;
		      }
		      unitOfWork = completedWork.return;
		      var next = completeWork(
		        completedWork.alternate,
		        completedWork,
		        entangledRenderLanes
		      );
		      if (null !== next) {
		        workInProgress = next;
		        return;
		      }
		      completedWork = completedWork.sibling;
		      if (null !== completedWork) {
		        workInProgress = completedWork;
		        return;
		      }
		      workInProgress = completedWork = unitOfWork;
		    } while (null !== completedWork);
		    0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 5);
		  }
		  function unwindUnitOfWork(unitOfWork, skipSiblings) {
		    do {
		      var next = unwindWork(unitOfWork.alternate, unitOfWork);
		      if (null !== next) {
		        next.flags &= 32767;
		        workInProgress = next;
		        return;
		      }
		      next = unitOfWork.return;
		      null !== next &&
		        ((next.flags |= 32768),
		        (next.subtreeFlags = 0),
		        (next.deletions = null));
		      if (
		        !skipSiblings &&
		        ((unitOfWork = unitOfWork.sibling), null !== unitOfWork)
		      ) {
		        workInProgress = unitOfWork;
		        return;
		      }
		      workInProgress = unitOfWork = next;
		    } while (null !== unitOfWork);
		    workInProgressRootExitStatus = 6;
		    workInProgress = null;
		  }
		  function commitRoot(
		    root,
		    recoverableErrors,
		    transitions,
		    didIncludeRenderPhaseUpdate,
		    spawnedLane,
		    updatedLanes,
		    suspendedRetryLanes,
		    suspendedCommitReason,
		    completedRenderStartTime,
		    completedRenderEndTime
		  ) {
		    var prevTransition = ReactSharedInternals.T,
		      previousUpdateLanePriority = getCurrentUpdatePriority();
		    try {
		      setCurrentUpdatePriority(2),
		        (ReactSharedInternals.T = null),
		        commitRootImpl(
		          root,
		          recoverableErrors,
		          transitions,
		          didIncludeRenderPhaseUpdate,
		          previousUpdateLanePriority,
		          spawnedLane,
		          updatedLanes,
		          suspendedRetryLanes,
		          suspendedCommitReason,
		          completedRenderStartTime,
		          completedRenderEndTime
		        );
		    } finally {
		      (ReactSharedInternals.T = prevTransition),
		        setCurrentUpdatePriority(previousUpdateLanePriority);
		    }
		  }
		  function commitRootImpl(
		    root,
		    recoverableErrors,
		    transitions,
		    didIncludeRenderPhaseUpdate,
		    renderPriorityLevel,
		    spawnedLane,
		    updatedLanes,
		    suspendedRetryLanes
		  ) {
		    do flushPassiveEffects();
		    while (null !== rootWithPendingPassiveEffects);
		    if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage(327));
		    var finishedWork = root.finishedWork;
		    didIncludeRenderPhaseUpdate = root.finishedLanes;
		    if (null === finishedWork) return null;
		    root.finishedWork = null;
		    root.finishedLanes = 0;
		    if (finishedWork === root.current) throw Error(formatProdErrorMessage(177));
		    root.callbackNode = null;
		    root.callbackPriority = 0;
		    root.cancelPendingCommit = null;
		    var remainingLanes = finishedWork.lanes | finishedWork.childLanes;
		    remainingLanes |= concurrentlyUpdatedLanes;
		    markRootFinished(
		      root,
		      didIncludeRenderPhaseUpdate,
		      remainingLanes,
		      spawnedLane,
		      updatedLanes,
		      suspendedRetryLanes
		    );
		    root === workInProgressRoot &&
		      ((workInProgress = workInProgressRoot = null),
		      (workInProgressRootRenderLanes = 0));
		    (0 === (finishedWork.subtreeFlags & 10256) &&
		      0 === (finishedWork.flags & 10256)) ||
		      rootDoesHavePassiveEffects ||
		      ((rootDoesHavePassiveEffects = !0),
		      (pendingPassiveEffectsRemainingLanes = remainingLanes),
		      (pendingPassiveTransitions = transitions),
		      scheduleCallback(NormalPriority$1, function () {
		        flushPassiveEffects();
		        return null;
		      }));
		    transitions = 0 !== (finishedWork.flags & 15990);
		    0 !== (finishedWork.subtreeFlags & 15990) || transitions
		      ? ((transitions = ReactSharedInternals.T),
		        (ReactSharedInternals.T = null),
		        (spawnedLane = getCurrentUpdatePriority()),
		        setCurrentUpdatePriority(2),
		        (updatedLanes = executionContext),
		        (executionContext |= 4),
		        commitBeforeMutationEffects(root, finishedWork),
		        commitMutationEffectsOnFiber(finishedWork, root),
		        resetAfterCommit(root.containerInfo),
		        (root.current = finishedWork),
		        commitLayoutEffectOnFiber(root, finishedWork.alternate, finishedWork),
		        requestPaint(),
		        (executionContext = updatedLanes),
		        setCurrentUpdatePriority(spawnedLane),
		        (ReactSharedInternals.T = transitions))
		      : (root.current = finishedWork);
		    rootDoesHavePassiveEffects
		      ? ((rootDoesHavePassiveEffects = !1),
		        (rootWithPendingPassiveEffects = root),
		        (pendingPassiveEffectsLanes = didIncludeRenderPhaseUpdate))
		      : releaseRootPooledCache(root, remainingLanes);
		    remainingLanes = root.pendingLanes;
		    0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
		    onCommitRoot(finishedWork.stateNode);
		    ensureRootIsScheduled(root);
		    if (null !== recoverableErrors)
		      for (
		        renderPriorityLevel = root.onRecoverableError, finishedWork = 0;
		        finishedWork < recoverableErrors.length;
		        finishedWork++
		      )
		        (remainingLanes = recoverableErrors[finishedWork]),
		          renderPriorityLevel(remainingLanes.value, {
		            componentStack: remainingLanes.stack
		          });
		    0 !== (pendingPassiveEffectsLanes & 3) && flushPassiveEffects();
		    remainingLanes = root.pendingLanes;
		    0 !== (didIncludeRenderPhaseUpdate & 4194218) && 0 !== (remainingLanes & 42)
		      ? root === rootWithNestedUpdates
		        ? nestedUpdateCount++
		        : ((nestedUpdateCount = 0), (rootWithNestedUpdates = root))
		      : (nestedUpdateCount = 0);
		    flushSyncWorkAcrossRoots_impl(0, !1);
		    return null;
		  }
		  function releaseRootPooledCache(root, remainingLanes) {
		    0 === (root.pooledCacheLanes &= remainingLanes) &&
		      ((remainingLanes = root.pooledCache),
		      null != remainingLanes &&
		        ((root.pooledCache = null), releaseCache(remainingLanes)));
		  }
		  function flushPassiveEffects() {
		    if (null !== rootWithPendingPassiveEffects) {
		      var root = rootWithPendingPassiveEffects,
		        remainingLanes = pendingPassiveEffectsRemainingLanes;
		      pendingPassiveEffectsRemainingLanes = 0;
		      var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes),
		        priority = 32 > renderPriority ? 32 : renderPriority;
		      renderPriority = ReactSharedInternals.T;
		      var previousPriority = getCurrentUpdatePriority();
		      try {
		        setCurrentUpdatePriority(priority);
		        ReactSharedInternals.T = null;
		        if (null === rootWithPendingPassiveEffects)
		          var JSCompiler_inline_result = !1;
		        else {
		          priority = pendingPassiveTransitions;
		          pendingPassiveTransitions = null;
		          var root$jscomp$0 = rootWithPendingPassiveEffects,
		            lanes = pendingPassiveEffectsLanes;
		          rootWithPendingPassiveEffects = null;
		          pendingPassiveEffectsLanes = 0;
		          if (0 !== (executionContext & 6))
		            throw Error(formatProdErrorMessage(331));
		          var prevExecutionContext = executionContext;
		          executionContext |= 4;
		          commitPassiveUnmountOnFiber(root$jscomp$0.current);
		          commitPassiveMountOnFiber(
		            root$jscomp$0,
		            root$jscomp$0.current,
		            lanes,
		            priority
		          );
		          executionContext = prevExecutionContext;
		          flushSyncWorkAcrossRoots_impl(0, !1);
		          if (
		            injectedHook &&
		            "function" === typeof injectedHook.onPostCommitFiberRoot
		          )
		            try {
		              injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0);
		            } catch (err) {}
		          JSCompiler_inline_result = !0;
		        }
		        return JSCompiler_inline_result;
		      } finally {
		        setCurrentUpdatePriority(previousPriority),
		          (ReactSharedInternals.T = renderPriority),
		          releaseRootPooledCache(root, remainingLanes);
		      }
		    }
		    return !1;
		  }
		  function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
		    sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
		    sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
		    rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
		    null !== rootFiber &&
		      (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
		  }
		  function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
		    if (3 === sourceFiber.tag)
		      captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
		    else
		      for (; null !== nearestMountedAncestor; ) {
		        if (3 === nearestMountedAncestor.tag) {
		          captureCommitPhaseErrorOnRoot(
		            nearestMountedAncestor,
		            sourceFiber,
		            error
		          );
		          break;
		        } else if (1 === nearestMountedAncestor.tag) {
		          var instance = nearestMountedAncestor.stateNode;
		          if (
		            "function" ===
		              typeof nearestMountedAncestor.type.getDerivedStateFromError ||
		            ("function" === typeof instance.componentDidCatch &&
		              (null === legacyErrorBoundariesThatAlreadyFailed ||
		                !legacyErrorBoundariesThatAlreadyFailed.has(instance)))
		          ) {
		            sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
		            error = createClassErrorUpdate(2);
		            instance = enqueueUpdate(nearestMountedAncestor, error, 2);
		            null !== instance &&
		              (initializeClassErrorUpdate(
		                error,
		                instance,
		                nearestMountedAncestor,
		                sourceFiber
		              ),
		              markRootUpdated$1(instance, 2),
		              ensureRootIsScheduled(instance));
		            break;
		          }
		        }
		        nearestMountedAncestor = nearestMountedAncestor.return;
		      }
		  }
		  function attachPingListener(root, wakeable, lanes) {
		    var pingCache = root.pingCache;
		    if (null === pingCache) {
		      pingCache = root.pingCache = new PossiblyWeakMap();
		      var threadIDs = new Set();
		      pingCache.set(wakeable, threadIDs);
		    } else
		      (threadIDs = pingCache.get(wakeable)),
		        void 0 === threadIDs &&
		          ((threadIDs = new Set()), pingCache.set(wakeable, threadIDs));
		    threadIDs.has(lanes) ||
		      ((workInProgressRootDidAttachPingListener = !0),
		      threadIDs.add(lanes),
		      (root = pingSuspendedRoot.bind(null, root, wakeable, lanes)),
		      wakeable.then(root, root));
		  }
		  function pingSuspendedRoot(root, wakeable, pingedLanes) {
		    var pingCache = root.pingCache;
		    null !== pingCache && pingCache.delete(wakeable);
		    root.pingedLanes |= root.suspendedLanes & pingedLanes;
		    root.warmLanes &= ~pingedLanes;
		    workInProgressRoot === root &&
		      (workInProgressRootRenderLanes & pingedLanes) === pingedLanes &&
		      (4 === workInProgressRootExitStatus ||
		      (3 === workInProgressRootExitStatus &&
		        (workInProgressRootRenderLanes & 62914560) ===
		          workInProgressRootRenderLanes &&
		        300 > now() - globalMostRecentFallbackTime)
		        ? 0 === (executionContext & 2) && prepareFreshStack(root, 0)
		        : (workInProgressRootPingedLanes |= pingedLanes),
		      workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes &&
		        (workInProgressSuspendedRetryLanes = 0));
		    ensureRootIsScheduled(root);
		  }
		  function retryTimedOutBoundary(boundaryFiber, retryLane) {
		    0 === retryLane && (retryLane = claimNextRetryLane());
		    boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
		    null !== boundaryFiber &&
		      (markRootUpdated$1(boundaryFiber, retryLane),
		      ensureRootIsScheduled(boundaryFiber));
		  }
		  function retryDehydratedSuspenseBoundary(boundaryFiber) {
		    var suspenseState = boundaryFiber.memoizedState,
		      retryLane = 0;
		    null !== suspenseState && (retryLane = suspenseState.retryLane);
		    retryTimedOutBoundary(boundaryFiber, retryLane);
		  }
		  function resolveRetryWakeable(boundaryFiber, wakeable) {
		    var retryLane = 0;
		    switch (boundaryFiber.tag) {
		      case 13:
		        var retryCache = boundaryFiber.stateNode;
		        var suspenseState = boundaryFiber.memoizedState;
		        null !== suspenseState && (retryLane = suspenseState.retryLane);
		        break;
		      case 19:
		        retryCache = boundaryFiber.stateNode;
		        break;
		      case 22:
		        retryCache = boundaryFiber.stateNode._retryCache;
		        break;
		      default:
		        throw Error(formatProdErrorMessage(314));
		    }
		    null !== retryCache && retryCache.delete(wakeable);
		    retryTimedOutBoundary(boundaryFiber, retryLane);
		  }
		  function scheduleCallback(priorityLevel, callback) {
		    return scheduleCallback$3(priorityLevel, callback);
		  }
		  function FiberNode(tag, pendingProps, key, mode) {
		    this.tag = tag;
		    this.key = key;
		    this.sibling =
		      this.child =
		      this.return =
		      this.stateNode =
		      this.type =
		      this.elementType =
		        null;
		    this.index = 0;
		    this.refCleanup = this.ref = null;
		    this.pendingProps = pendingProps;
		    this.dependencies =
		      this.memoizedState =
		      this.updateQueue =
		      this.memoizedProps =
		        null;
		    this.mode = mode;
		    this.subtreeFlags = this.flags = 0;
		    this.deletions = null;
		    this.childLanes = this.lanes = 0;
		    this.alternate = null;
		  }
		  function shouldConstruct(Component) {
		    Component = Component.prototype;
		    return !(!Component || !Component.isReactComponent);
		  }
		  function createWorkInProgress(current, pendingProps) {
		    var workInProgress = current.alternate;
		    null === workInProgress
		      ? ((workInProgress = createFiber(
		          current.tag,
		          pendingProps,
		          current.key,
		          current.mode
		        )),
		        (workInProgress.elementType = current.elementType),
		        (workInProgress.type = current.type),
		        (workInProgress.stateNode = current.stateNode),
		        (workInProgress.alternate = current),
		        (current.alternate = workInProgress))
		      : ((workInProgress.pendingProps = pendingProps),
		        (workInProgress.type = current.type),
		        (workInProgress.flags = 0),
		        (workInProgress.subtreeFlags = 0),
		        (workInProgress.deletions = null));
		    workInProgress.flags = current.flags & 31457280;
		    workInProgress.childLanes = current.childLanes;
		    workInProgress.lanes = current.lanes;
		    workInProgress.child = current.child;
		    workInProgress.memoizedProps = current.memoizedProps;
		    workInProgress.memoizedState = current.memoizedState;
		    workInProgress.updateQueue = current.updateQueue;
		    pendingProps = current.dependencies;
		    workInProgress.dependencies =
		      null === pendingProps
		        ? null
		        : {
		            lanes: pendingProps.lanes,
		            firstContext: pendingProps.firstContext
		          };
		    workInProgress.sibling = current.sibling;
		    workInProgress.index = current.index;
		    workInProgress.ref = current.ref;
		    workInProgress.refCleanup = current.refCleanup;
		    return workInProgress;
		  }
		  function resetWorkInProgress(workInProgress, renderLanes) {
		    workInProgress.flags &= 31457282;
		    var current = workInProgress.alternate;
		    null === current
		      ? ((workInProgress.childLanes = 0),
		        (workInProgress.lanes = renderLanes),
		        (workInProgress.child = null),
		        (workInProgress.subtreeFlags = 0),
		        (workInProgress.memoizedProps = null),
		        (workInProgress.memoizedState = null),
		        (workInProgress.updateQueue = null),
		        (workInProgress.dependencies = null),
		        (workInProgress.stateNode = null))
		      : ((workInProgress.childLanes = current.childLanes),
		        (workInProgress.lanes = current.lanes),
		        (workInProgress.child = current.child),
		        (workInProgress.subtreeFlags = 0),
		        (workInProgress.deletions = null),
		        (workInProgress.memoizedProps = current.memoizedProps),
		        (workInProgress.memoizedState = current.memoizedState),
		        (workInProgress.updateQueue = current.updateQueue),
		        (workInProgress.type = current.type),
		        (renderLanes = current.dependencies),
		        (workInProgress.dependencies =
		          null === renderLanes
		            ? null
		            : {
		                lanes: renderLanes.lanes,
		                firstContext: renderLanes.firstContext
		              }));
		    return workInProgress;
		  }
		  function createFiberFromTypeAndProps(
		    type,
		    key,
		    pendingProps,
		    owner,
		    mode,
		    lanes
		  ) {
		    var fiberTag = 0;
		    owner = type;
		    if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);
		    else if ("string" === typeof type)
		      fiberTag =
		        supportsResources && supportsSingletons
		          ? isHostHoistableType(type, pendingProps, contextStackCursor.current)
		            ? 26
		            : isHostSingletonType(type)
		              ? 27
		              : 5
		          : supportsResources
		            ? isHostHoistableType(
		                type,
		                pendingProps,
		                contextStackCursor.current
		              )
		              ? 26
		              : 5
		            : supportsSingletons
		              ? isHostSingletonType(type)
		                ? 27
		                : 5
		              : 5;
		    else
		      a: switch (type) {
		        case REACT_FRAGMENT_TYPE:
		          return createFiberFromFragment(
		            pendingProps.children,
		            mode,
		            lanes,
		            key
		          );
		        case REACT_STRICT_MODE_TYPE:
		          fiberTag = 8;
		          mode |= 24;
		          break;
		        case REACT_PROFILER_TYPE:
		          return (
		            (type = createFiber(12, pendingProps, key, mode | 2)),
		            (type.elementType = REACT_PROFILER_TYPE),
		            (type.lanes = lanes),
		            type
		          );
		        case REACT_SUSPENSE_TYPE:
		          return (
		            (type = createFiber(13, pendingProps, key, mode)),
		            (type.elementType = REACT_SUSPENSE_TYPE),
		            (type.lanes = lanes),
		            type
		          );
		        case REACT_SUSPENSE_LIST_TYPE:
		          return (
		            (type = createFiber(19, pendingProps, key, mode)),
		            (type.elementType = REACT_SUSPENSE_LIST_TYPE),
		            (type.lanes = lanes),
		            type
		          );
		        case REACT_OFFSCREEN_TYPE:
		          return createFiberFromOffscreen(pendingProps, mode, lanes, key);
		        default:
		          if ("object" === typeof type && null !== type)
		            switch (type.$$typeof) {
		              case REACT_PROVIDER_TYPE:
		              case REACT_CONTEXT_TYPE:
		                fiberTag = 10;
		                break a;
		              case REACT_CONSUMER_TYPE:
		                fiberTag = 9;
		                break a;
		              case REACT_FORWARD_REF_TYPE:
		                fiberTag = 11;
		                break a;
		              case REACT_MEMO_TYPE:
		                fiberTag = 14;
		                break a;
		              case REACT_LAZY_TYPE:
		                fiberTag = 16;
		                owner = null;
		                break a;
		            }
		          fiberTag = 29;
		          pendingProps = Error(
		            formatProdErrorMessage(
		              130,
		              null === type ? "null" : typeof type,
		              ""
		            )
		          );
		          owner = null;
		      }
		    key = createFiber(fiberTag, pendingProps, key, mode);
		    key.elementType = type;
		    key.type = owner;
		    key.lanes = lanes;
		    return key;
		  }
		  function createFiberFromFragment(elements, mode, lanes, key) {
		    elements = createFiber(7, elements, key, mode);
		    elements.lanes = lanes;
		    return elements;
		  }
		  function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
		    pendingProps = createFiber(22, pendingProps, key, mode);
		    pendingProps.elementType = REACT_OFFSCREEN_TYPE;
		    pendingProps.lanes = lanes;
		    var primaryChildInstance = {
		      _visibility: 1,
		      _pendingVisibility: 1,
		      _pendingMarkers: null,
		      _retryCache: null,
		      _transitions: null,
		      _current: null,
		      detach: function () {
		        var fiber = primaryChildInstance._current;
		        if (null === fiber) throw Error(formatProdErrorMessage(456));
		        if (0 === (primaryChildInstance._pendingVisibility & 2)) {
		          var root = enqueueConcurrentRenderForLane(fiber, 2);
		          null !== root &&
		            ((primaryChildInstance._pendingVisibility |= 2),
		            scheduleUpdateOnFiber(root, fiber, 2));
		        }
		      },
		      attach: function () {
		        var fiber = primaryChildInstance._current;
		        if (null === fiber) throw Error(formatProdErrorMessage(456));
		        if (0 !== (primaryChildInstance._pendingVisibility & 2)) {
		          var root = enqueueConcurrentRenderForLane(fiber, 2);
		          null !== root &&
		            ((primaryChildInstance._pendingVisibility &= -3),
		            scheduleUpdateOnFiber(root, fiber, 2));
		        }
		      }
		    };
		    pendingProps.stateNode = primaryChildInstance;
		    return pendingProps;
		  }
		  function createFiberFromText(content, mode, lanes) {
		    content = createFiber(6, content, null, mode);
		    content.lanes = lanes;
		    return content;
		  }
		  function createFiberFromPortal(portal, mode, lanes) {
		    mode = createFiber(
		      4,
		      null !== portal.children ? portal.children : [],
		      portal.key,
		      mode
		    );
		    mode.lanes = lanes;
		    mode.stateNode = {
		      containerInfo: portal.containerInfo,
		      pendingChildren: null,
		      implementation: portal.implementation
		    };
		    return mode;
		  }
		  function FiberRootNode(
		    containerInfo,
		    tag,
		    hydrate,
		    identifierPrefix,
		    onUncaughtError,
		    onCaughtError,
		    onRecoverableError,
		    formState
		  ) {
		    this.tag = 1;
		    this.containerInfo = containerInfo;
		    this.finishedWork =
		      this.pingCache =
		      this.current =
		      this.pendingChildren =
		        null;
		    this.timeoutHandle = noTimeout;
		    this.callbackNode =
		      this.next =
		      this.pendingContext =
		      this.context =
		      this.cancelPendingCommit =
		        null;
		    this.callbackPriority = 0;
		    this.expirationTimes = createLaneMap(-1);
		    this.entangledLanes =
		      this.shellSuspendCounter =
		      this.errorRecoveryDisabledLanes =
		      this.finishedLanes =
		      this.expiredLanes =
		      this.warmLanes =
		      this.pingedLanes =
		      this.suspendedLanes =
		      this.pendingLanes =
		        0;
		    this.entanglements = createLaneMap(0);
		    this.hiddenUpdates = createLaneMap(null);
		    this.identifierPrefix = identifierPrefix;
		    this.onUncaughtError = onUncaughtError;
		    this.onCaughtError = onCaughtError;
		    this.onRecoverableError = onRecoverableError;
		    this.pooledCache = null;
		    this.pooledCacheLanes = 0;
		    this.formState = formState;
		    this.incompleteTransitions = new Map();
		  }
		  function createFiberRoot(
		    containerInfo,
		    tag,
		    hydrate,
		    initialChildren,
		    hydrationCallbacks,
		    isStrictMode,
		    identifierPrefix,
		    onUncaughtError,
		    onCaughtError,
		    onRecoverableError,
		    transitionCallbacks,
		    formState
		  ) {
		    containerInfo = new FiberRootNode(
		      containerInfo,
		      tag,
		      hydrate,
		      identifierPrefix,
		      onUncaughtError,
		      onCaughtError,
		      onRecoverableError,
		      formState
		    );
		    tag = 1;
		    !0 === isStrictMode && (tag |= 24);
		    isStrictMode = createFiber(3, null, null, tag);
		    containerInfo.current = isStrictMode;
		    isStrictMode.stateNode = containerInfo;
		    tag = createCache();
		    tag.refCount++;
		    containerInfo.pooledCache = tag;
		    tag.refCount++;
		    isStrictMode.memoizedState = {
		      element: initialChildren,
		      isDehydrated: hydrate,
		      cache: tag
		    };
		    initializeUpdateQueue(isStrictMode);
		    return containerInfo;
		  }
		  function getContextForSubtree(parentComponent) {
		    if (!parentComponent) return emptyContextObject;
		    parentComponent = emptyContextObject;
		    return parentComponent;
		  }
		  function findHostInstance(component) {
		    var fiber = component._reactInternals;
		    if (void 0 === fiber) {
		      if ("function" === typeof component.render)
		        throw Error(formatProdErrorMessage(188));
		      component = Object.keys(component).join(",");
		      throw Error(formatProdErrorMessage(268, component));
		    }
		    component = findCurrentFiberUsingSlowPath(fiber);
		    component = null !== component ? findCurrentHostFiberImpl(component) : null;
		    return null === component ? null : getPublicInstance(component.stateNode);
		  }
		  function updateContainerImpl(
		    rootFiber,
		    lane,
		    element,
		    container,
		    parentComponent,
		    callback
		  ) {
		    parentComponent = getContextForSubtree(parentComponent);
		    null === container.context
		      ? (container.context = parentComponent)
		      : (container.pendingContext = parentComponent);
		    container = createUpdate(lane);
		    container.payload = { element: element };
		    callback = void 0 === callback ? null : callback;
		    null !== callback && (container.callback = callback);
		    element = enqueueUpdate(rootFiber, container, lane);
		    null !== element &&
		      (scheduleUpdateOnFiber(element, rootFiber, lane),
		      entangleTransitions(element, rootFiber, lane));
		  }
		  function markRetryLaneImpl(fiber, retryLane) {
		    fiber = fiber.memoizedState;
		    if (null !== fiber && null !== fiber.dehydrated) {
		      var a = fiber.retryLane;
		      fiber.retryLane = 0 !== a && a < retryLane ? a : retryLane;
		    }
		  }
		  function markRetryLaneIfNotHydrated(fiber, retryLane) {
		    markRetryLaneImpl(fiber, retryLane);
		    (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);
		  }
		  var exports = {};
		  var React = React__default,
		    Scheduler = requireScheduler$1(),
		    assign = Object.assign,
		    REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"),
		    REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
		    REACT_PORTAL_TYPE = Symbol.for("react.portal"),
		    REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
		    REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
		    REACT_PROFILER_TYPE = Symbol.for("react.profiler"),
		    REACT_PROVIDER_TYPE = Symbol.for("react.provider"),
		    REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
		    REACT_CONTEXT_TYPE = Symbol.for("react.context"),
		    REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
		    REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
		    REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
		    REACT_MEMO_TYPE = Symbol.for("react.memo"),
		    REACT_LAZY_TYPE = Symbol.for("react.lazy");
		  var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
		  var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel"),
		    MAYBE_ITERATOR_SYMBOL = Symbol.iterator,
		    REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"),
		    ReactSharedInternals =
		      React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
		    prefix,
		    suffix,
		    reentry = !1,
		    isArrayImpl = Array.isArray,
		    rendererVersion = $$$config.rendererVersion,
		    rendererPackageName = $$$config.rendererPackageName,
		    extraDevToolsConfig = $$$config.extraDevToolsConfig,
		    getPublicInstance = $$$config.getPublicInstance,
		    getRootHostContext = $$$config.getRootHostContext,
		    getChildHostContext = $$$config.getChildHostContext,
		    prepareForCommit = $$$config.prepareForCommit,
		    resetAfterCommit = $$$config.resetAfterCommit,
		    createInstance = $$$config.createInstance,
		    appendInitialChild = $$$config.appendInitialChild,
		    finalizeInitialChildren = $$$config.finalizeInitialChildren,
		    shouldSetTextContent = $$$config.shouldSetTextContent,
		    createTextInstance = $$$config.createTextInstance,
		    scheduleTimeout = $$$config.scheduleTimeout,
		    cancelTimeout = $$$config.cancelTimeout,
		    noTimeout = $$$config.noTimeout,
		    isPrimaryRenderer = $$$config.isPrimaryRenderer;
		  $$$config.warnsIfNotActing;
		  var supportsMutation = $$$config.supportsMutation,
		    supportsPersistence = $$$config.supportsPersistence,
		    supportsHydration = $$$config.supportsHydration,
		    getInstanceFromNode = $$$config.getInstanceFromNode;
		  $$$config.beforeActiveInstanceBlur;
		  $$$config.afterActiveInstanceBlur;
		  var preparePortalMount = $$$config.preparePortalMount;
		  $$$config.prepareScopeUpdate;
		  $$$config.getInstanceFromScope;
		  var setCurrentUpdatePriority = $$$config.setCurrentUpdatePriority,
		    getCurrentUpdatePriority = $$$config.getCurrentUpdatePriority,
		    resolveUpdatePriority = $$$config.resolveUpdatePriority;
		  $$$config.resolveEventType;
		  $$$config.resolveEventTimeStamp;
		  var shouldAttemptEagerTransition = $$$config.shouldAttemptEagerTransition,
		    detachDeletedInstance = $$$config.detachDeletedInstance;
		  $$$config.requestPostPaintCallback;
		  var maySuspendCommit = $$$config.maySuspendCommit,
		    preloadInstance = $$$config.preloadInstance,
		    startSuspendingCommit = $$$config.startSuspendingCommit,
		    suspendInstance = $$$config.suspendInstance,
		    waitForCommitToBeReady = $$$config.waitForCommitToBeReady,
		    NotPendingTransition = $$$config.NotPendingTransition,
		    HostTransitionContext = $$$config.HostTransitionContext,
		    resetFormInstance = $$$config.resetFormInstance;
		  $$$config.bindToConsole;
		  var supportsMicrotasks = $$$config.supportsMicrotasks,
		    scheduleMicrotask = $$$config.scheduleMicrotask,
		    supportsTestSelectors = $$$config.supportsTestSelectors,
		    findFiberRoot = $$$config.findFiberRoot,
		    getBoundingRect = $$$config.getBoundingRect,
		    getTextContent = $$$config.getTextContent,
		    isHiddenSubtree = $$$config.isHiddenSubtree,
		    matchAccessibilityRole = $$$config.matchAccessibilityRole,
		    setFocusIfFocusable = $$$config.setFocusIfFocusable,
		    setupIntersectionObserver = $$$config.setupIntersectionObserver,
		    appendChild = $$$config.appendChild,
		    appendChildToContainer = $$$config.appendChildToContainer,
		    commitTextUpdate = $$$config.commitTextUpdate,
		    commitMount = $$$config.commitMount,
		    commitUpdate = $$$config.commitUpdate,
		    insertBefore = $$$config.insertBefore,
		    insertInContainerBefore = $$$config.insertInContainerBefore,
		    removeChild = $$$config.removeChild,
		    removeChildFromContainer = $$$config.removeChildFromContainer,
		    resetTextContent = $$$config.resetTextContent,
		    hideInstance = $$$config.hideInstance,
		    hideTextInstance = $$$config.hideTextInstance,
		    unhideInstance = $$$config.unhideInstance,
		    unhideTextInstance = $$$config.unhideTextInstance,
		    clearContainer = $$$config.clearContainer,
		    cloneInstance = $$$config.cloneInstance,
		    createContainerChildSet = $$$config.createContainerChildSet,
		    appendChildToContainerChildSet = $$$config.appendChildToContainerChildSet,
		    finalizeContainerChildren = $$$config.finalizeContainerChildren,
		    replaceContainerChildren = $$$config.replaceContainerChildren,
		    cloneHiddenInstance = $$$config.cloneHiddenInstance,
		    cloneHiddenTextInstance = $$$config.cloneHiddenTextInstance,
		    isSuspenseInstancePending = $$$config.isSuspenseInstancePending,
		    isSuspenseInstanceFallback = $$$config.isSuspenseInstanceFallback,
		    getSuspenseInstanceFallbackErrorDetails =
		      $$$config.getSuspenseInstanceFallbackErrorDetails,
		    registerSuspenseInstanceRetry = $$$config.registerSuspenseInstanceRetry,
		    canHydrateFormStateMarker = $$$config.canHydrateFormStateMarker,
		    isFormStateMarkerMatching = $$$config.isFormStateMarkerMatching,
		    getNextHydratableSibling = $$$config.getNextHydratableSibling,
		    getFirstHydratableChild = $$$config.getFirstHydratableChild,
		    getFirstHydratableChildWithinContainer =
		      $$$config.getFirstHydratableChildWithinContainer,
		    getFirstHydratableChildWithinSuspenseInstance =
		      $$$config.getFirstHydratableChildWithinSuspenseInstance,
		    canHydrateInstance = $$$config.canHydrateInstance,
		    canHydrateTextInstance = $$$config.canHydrateTextInstance,
		    canHydrateSuspenseInstance = $$$config.canHydrateSuspenseInstance,
		    hydrateInstance = $$$config.hydrateInstance,
		    hydrateTextInstance = $$$config.hydrateTextInstance,
		    hydrateSuspenseInstance = $$$config.hydrateSuspenseInstance,
		    getNextHydratableInstanceAfterSuspenseInstance =
		      $$$config.getNextHydratableInstanceAfterSuspenseInstance,
		    commitHydratedContainer = $$$config.commitHydratedContainer,
		    commitHydratedSuspenseInstance = $$$config.commitHydratedSuspenseInstance,
		    clearSuspenseBoundary = $$$config.clearSuspenseBoundary,
		    clearSuspenseBoundaryFromContainer =
		      $$$config.clearSuspenseBoundaryFromContainer,
		    shouldDeleteUnhydratedTailInstances =
		      $$$config.shouldDeleteUnhydratedTailInstances;
		  $$$config.diffHydratedPropsForDevWarnings;
		  $$$config.diffHydratedTextForDevWarnings;
		  $$$config.describeHydratableInstanceForDevWarnings;
		  var validateHydratableInstance = $$$config.validateHydratableInstance,
		    validateHydratableTextInstance = $$$config.validateHydratableTextInstance,
		    supportsResources = $$$config.supportsResources,
		    isHostHoistableType = $$$config.isHostHoistableType,
		    getHoistableRoot = $$$config.getHoistableRoot,
		    getResource = $$$config.getResource,
		    acquireResource = $$$config.acquireResource,
		    releaseResource = $$$config.releaseResource,
		    hydrateHoistable = $$$config.hydrateHoistable,
		    mountHoistable = $$$config.mountHoistable,
		    unmountHoistable = $$$config.unmountHoistable,
		    createHoistableInstance = $$$config.createHoistableInstance,
		    prepareToCommitHoistables = $$$config.prepareToCommitHoistables,
		    mayResourceSuspendCommit = $$$config.mayResourceSuspendCommit,
		    preloadResource = $$$config.preloadResource,
		    suspendResource = $$$config.suspendResource,
		    supportsSingletons = $$$config.supportsSingletons,
		    resolveSingletonInstance = $$$config.resolveSingletonInstance,
		    clearSingleton = $$$config.clearSingleton,
		    acquireSingletonInstance = $$$config.acquireSingletonInstance,
		    releaseSingletonInstance = $$$config.releaseSingletonInstance,
		    isHostSingletonType = $$$config.isHostSingletonType,
		    valueStack = [],
		    index$jscomp$0 = -1,
		    emptyContextObject = {},
		    clz32 = Math.clz32 ? Math.clz32 : clz32Fallback,
		    log$1 = Math.log,
		    LN2 = Math.LN2,
		    nextTransitionLane = 128,
		    nextRetryLane = 4194304,
		    scheduleCallback$3 = Scheduler.unstable_scheduleCallback,
		    cancelCallback$1 = Scheduler.unstable_cancelCallback,
		    shouldYield = Scheduler.unstable_shouldYield,
		    requestPaint = Scheduler.unstable_requestPaint,
		    now = Scheduler.unstable_now,
		    ImmediatePriority = Scheduler.unstable_ImmediatePriority,
		    UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
		    NormalPriority$1 = Scheduler.unstable_NormalPriority,
		    IdlePriority = Scheduler.unstable_IdlePriority,
		    log = Scheduler.log,
		    unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue,
		    rendererID = null,
		    injectedHook = null,
		    objectIs = "function" === typeof Object.is ? Object.is : is,
		    CapturedStacks = new WeakMap(),
		    forkStack = [],
		    forkStackIndex = 0,
		    treeForkProvider = null,
		    treeForkCount = 0,
		    idStack = [],
		    idStackIndex = 0,
		    treeContextProvider = null,
		    treeContextId = 1,
		    treeContextOverflow = "",
		    contextStackCursor = createCursor(null),
		    contextFiberStackCursor = createCursor(null),
		    rootInstanceStackCursor = createCursor(null),
		    hostTransitionProviderCursor = createCursor(null),
		    hydrationParentFiber = null,
		    nextHydratableInstance = null,
		    isHydrating = !1,
		    hydrationErrors = null,
		    rootOrSingletonContext = !1,
		    HydrationMismatchException = Error(formatProdErrorMessage(519)),
		    concurrentQueues = [],
		    concurrentQueuesIndex = 0,
		    concurrentlyUpdatedLanes = 0,
		    firstScheduledRoot = null,
		    lastScheduledRoot = null,
		    didScheduleMicrotask = !1,
		    mightHavePendingSyncWork = !1,
		    isFlushingWork = !1,
		    currentEventTransitionLane = 0,
		    currentEntangledListeners = null,
		    currentEntangledPendingCount = 0,
		    currentEntangledLane = 0,
		    currentEntangledActionThenable = null,
		    hasForceUpdate = !1,
		    didReadFromEntangledAsyncAction = !1,
		    hasOwnProperty = Object.prototype.hasOwnProperty,
		    SuspenseException = Error(formatProdErrorMessage(460)),
		    SuspenseyCommitException = Error(formatProdErrorMessage(474)),
		    noopSuspenseyCommitThenable = { then: function () {} },
		    suspendedThenable = null,
		    thenableState$1 = null,
		    thenableIndexCounter$1 = 0,
		    reconcileChildFibers = createChildReconciler(!0),
		    mountChildFibers = createChildReconciler(!1),
		    currentTreeHiddenStackCursor = createCursor(null),
		    prevEntangledRenderLanesCursor = createCursor(0),
		    suspenseHandlerStackCursor = createCursor(null),
		    shellBoundary = null,
		    suspenseStackCursor = createCursor(0),
		    renderLanes = 0,
		    currentlyRenderingFiber$1 = null,
		    currentHook = null,
		    workInProgressHook = null,
		    didScheduleRenderPhaseUpdate = !1,
		    didScheduleRenderPhaseUpdateDuringThisPass = !1,
		    shouldDoubleInvokeUserFnsInHooksDEV = !1,
		    localIdCounter = 0,
		    thenableIndexCounter = 0,
		    thenableState = null,
		    globalClientIdCounter = 0;
		  var createFunctionComponentUpdateQueue = function () {
		    return { lastEffect: null, events: null, stores: null, memoCache: null };
		  };
		  var ContextOnlyDispatcher = {
		    readContext: readContext,
		    use: use,
		    useCallback: throwInvalidHookError,
		    useContext: throwInvalidHookError,
		    useEffect: throwInvalidHookError,
		    useImperativeHandle: throwInvalidHookError,
		    useLayoutEffect: throwInvalidHookError,
		    useInsertionEffect: throwInvalidHookError,
		    useMemo: throwInvalidHookError,
		    useReducer: throwInvalidHookError,
		    useRef: throwInvalidHookError,
		    useState: throwInvalidHookError,
		    useDebugValue: throwInvalidHookError,
		    useDeferredValue: throwInvalidHookError,
		    useTransition: throwInvalidHookError,
		    useSyncExternalStore: throwInvalidHookError,
		    useId: throwInvalidHookError
		  };
		  ContextOnlyDispatcher.useCacheRefresh = throwInvalidHookError;
		  ContextOnlyDispatcher.useMemoCache = throwInvalidHookError;
		  ContextOnlyDispatcher.useHostTransitionStatus = throwInvalidHookError;
		  ContextOnlyDispatcher.useFormState = throwInvalidHookError;
		  ContextOnlyDispatcher.useActionState = throwInvalidHookError;
		  ContextOnlyDispatcher.useOptimistic = throwInvalidHookError;
		  var HooksDispatcherOnMount = {
		    readContext: readContext,
		    use: use,
		    useCallback: function (callback, deps) {
		      mountWorkInProgressHook().memoizedState = [
		        callback,
		        void 0 === deps ? null : deps
		      ];
		      return callback;
		    },
		    useContext: readContext,
		    useEffect: mountEffect,
		    useImperativeHandle: function (ref, create, deps) {
		      deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
		      mountEffectImpl(
		        4194308,
		        4,
		        imperativeHandleEffect.bind(null, create, ref),
		        deps
		      );
		    },
		    useLayoutEffect: function (create, deps) {
		      return mountEffectImpl(4194308, 4, create, deps);
		    },
		    useInsertionEffect: function (create, deps) {
		      mountEffectImpl(4, 2, create, deps);
		    },
		    useMemo: function (nextCreate, deps) {
		      var hook = mountWorkInProgressHook();
		      deps = void 0 === deps ? null : deps;
		      var nextValue = nextCreate();
		      if (shouldDoubleInvokeUserFnsInHooksDEV) {
		        setIsStrictModeForDevtools(!0);
		        try {
		          nextCreate();
		        } finally {
		          setIsStrictModeForDevtools(!1);
		        }
		      }
		      hook.memoizedState = [nextValue, deps];
		      return nextValue;
		    },
		    useReducer: function (reducer, initialArg, init) {
		      var hook = mountWorkInProgressHook();
		      if (void 0 !== init) {
		        var initialState = init(initialArg);
		        if (shouldDoubleInvokeUserFnsInHooksDEV) {
		          setIsStrictModeForDevtools(!0);
		          try {
		            init(initialArg);
		          } finally {
		            setIsStrictModeForDevtools(!1);
		          }
		        }
		      } else initialState = initialArg;
		      hook.memoizedState = hook.baseState = initialState;
		      reducer = {
		        pending: null,
		        lanes: 0,
		        dispatch: null,
		        lastRenderedReducer: reducer,
		        lastRenderedState: initialState
		      };
		      hook.queue = reducer;
		      reducer = reducer.dispatch = dispatchReducerAction.bind(
		        null,
		        currentlyRenderingFiber$1,
		        reducer
		      );
		      return [hook.memoizedState, reducer];
		    },
		    useRef: function (initialValue) {
		      var hook = mountWorkInProgressHook();
		      initialValue = { current: initialValue };
		      return (hook.memoizedState = initialValue);
		    },
		    useState: function (initialState) {
		      initialState = mountStateImpl(initialState);
		      var queue = initialState.queue,
		        dispatch = dispatchSetState.bind(
		          null,
		          currentlyRenderingFiber$1,
		          queue
		        );
		      queue.dispatch = dispatch;
		      return [initialState.memoizedState, dispatch];
		    },
		    useDebugValue: mountDebugValue,
		    useDeferredValue: function (value, initialValue) {
		      var hook = mountWorkInProgressHook();
		      return mountDeferredValueImpl(hook, value, initialValue);
		    },
		    useTransition: function () {
		      var stateHook = mountStateImpl(!1);
		      stateHook = startTransition.bind(
		        null,
		        currentlyRenderingFiber$1,
		        stateHook.queue,
		        !0,
		        !1
		      );
		      mountWorkInProgressHook().memoizedState = stateHook;
		      return [!1, stateHook];
		    },
		    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
		      var fiber = currentlyRenderingFiber$1,
		        hook = mountWorkInProgressHook();
		      if (isHydrating) {
		        if (void 0 === getServerSnapshot)
		          throw Error(formatProdErrorMessage(407));
		        getServerSnapshot = getServerSnapshot();
		      } else {
		        getServerSnapshot = getSnapshot();
		        if (null === workInProgressRoot)
		          throw Error(formatProdErrorMessage(349));
		        0 !== (workInProgressRootRenderLanes & 60) ||
		          pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
		      }
		      hook.memoizedState = getServerSnapshot;
		      var inst = { value: getServerSnapshot, getSnapshot: getSnapshot };
		      hook.queue = inst;
		      mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
		        subscribe
		      ]);
		      fiber.flags |= 2048;
		      pushEffect(
		        9,
		        updateStoreInstance.bind(
		          null,
		          fiber,
		          inst,
		          getServerSnapshot,
		          getSnapshot
		        ),
		        { destroy: void 0 },
		        null
		      );
		      return getServerSnapshot;
		    },
		    useId: function () {
		      var hook = mountWorkInProgressHook(),
		        identifierPrefix = workInProgressRoot.identifierPrefix;
		      if (isHydrating) {
		        var JSCompiler_inline_result = treeContextOverflow;
		        var idWithLeadingBit = treeContextId;
		        JSCompiler_inline_result =
		          (
		            idWithLeadingBit & ~(1 << (32 - clz32(idWithLeadingBit) - 1))
		          ).toString(32) + JSCompiler_inline_result;
		        identifierPrefix =
		          ":" + identifierPrefix + "R" + JSCompiler_inline_result;
		        JSCompiler_inline_result = localIdCounter++;
		        0 < JSCompiler_inline_result &&
		          (identifierPrefix += "H" + JSCompiler_inline_result.toString(32));
		        identifierPrefix += ":";
		      } else
		        (JSCompiler_inline_result = globalClientIdCounter++),
		          (identifierPrefix =
		            ":" +
		            identifierPrefix +
		            "r" +
		            JSCompiler_inline_result.toString(32) +
		            ":");
		      return (hook.memoizedState = identifierPrefix);
		    },
		    useCacheRefresh: function () {
		      return (mountWorkInProgressHook().memoizedState = refreshCache.bind(
		        null,
		        currentlyRenderingFiber$1
		      ));
		    }
		  };
		  HooksDispatcherOnMount.useMemoCache = useMemoCache;
		  HooksDispatcherOnMount.useHostTransitionStatus = useHostTransitionStatus;
		  HooksDispatcherOnMount.useFormState = mountActionState;
		  HooksDispatcherOnMount.useActionState = mountActionState;
		  HooksDispatcherOnMount.useOptimistic = function (passthrough) {
		    var hook = mountWorkInProgressHook();
		    hook.memoizedState = hook.baseState = passthrough;
		    var queue = {
		      pending: null,
		      lanes: 0,
		      dispatch: null,
		      lastRenderedReducer: null,
		      lastRenderedState: null
		    };
		    hook.queue = queue;
		    hook = dispatchOptimisticSetState.bind(
		      null,
		      currentlyRenderingFiber$1,
		      !0,
		      queue
		    );
		    queue.dispatch = hook;
		    return [passthrough, hook];
		  };
		  var HooksDispatcherOnUpdate = {
		    readContext: readContext,
		    use: use,
		    useCallback: updateCallback,
		    useContext: readContext,
		    useEffect: updateEffect,
		    useImperativeHandle: updateImperativeHandle,
		    useInsertionEffect: updateInsertionEffect,
		    useLayoutEffect: updateLayoutEffect,
		    useMemo: updateMemo,
		    useReducer: updateReducer,
		    useRef: updateRef,
		    useState: function () {
		      return updateReducer(basicStateReducer);
		    },
		    useDebugValue: mountDebugValue,
		    useDeferredValue: function (value, initialValue) {
		      var hook = updateWorkInProgressHook();
		      return updateDeferredValueImpl(
		        hook,
		        currentHook.memoizedState,
		        value,
		        initialValue
		      );
		    },
		    useTransition: function () {
		      var booleanOrThenable = updateReducer(basicStateReducer)[0],
		        start = updateWorkInProgressHook().memoizedState;
		      return [
		        "boolean" === typeof booleanOrThenable
		          ? booleanOrThenable
		          : useThenable(booleanOrThenable),
		        start
		      ];
		    },
		    useSyncExternalStore: updateSyncExternalStore,
		    useId: updateId
		  };
		  HooksDispatcherOnUpdate.useCacheRefresh = updateRefresh;
		  HooksDispatcherOnUpdate.useMemoCache = useMemoCache;
		  HooksDispatcherOnUpdate.useHostTransitionStatus = useHostTransitionStatus;
		  HooksDispatcherOnUpdate.useFormState = updateActionState;
		  HooksDispatcherOnUpdate.useActionState = updateActionState;
		  HooksDispatcherOnUpdate.useOptimistic = function (passthrough, reducer) {
		    var hook = updateWorkInProgressHook();
		    return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
		  };
		  var HooksDispatcherOnRerender = {
		    readContext: readContext,
		    use: use,
		    useCallback: updateCallback,
		    useContext: readContext,
		    useEffect: updateEffect,
		    useImperativeHandle: updateImperativeHandle,
		    useInsertionEffect: updateInsertionEffect,
		    useLayoutEffect: updateLayoutEffect,
		    useMemo: updateMemo,
		    useReducer: rerenderReducer,
		    useRef: updateRef,
		    useState: function () {
		      return rerenderReducer(basicStateReducer);
		    },
		    useDebugValue: mountDebugValue,
		    useDeferredValue: function (value, initialValue) {
		      var hook = updateWorkInProgressHook();
		      return null === currentHook
		        ? mountDeferredValueImpl(hook, value, initialValue)
		        : updateDeferredValueImpl(
		            hook,
		            currentHook.memoizedState,
		            value,
		            initialValue
		          );
		    },
		    useTransition: function () {
		      var booleanOrThenable = rerenderReducer(basicStateReducer)[0],
		        start = updateWorkInProgressHook().memoizedState;
		      return [
		        "boolean" === typeof booleanOrThenable
		          ? booleanOrThenable
		          : useThenable(booleanOrThenable),
		        start
		      ];
		    },
		    useSyncExternalStore: updateSyncExternalStore,
		    useId: updateId
		  };
		  HooksDispatcherOnRerender.useCacheRefresh = updateRefresh;
		  HooksDispatcherOnRerender.useMemoCache = useMemoCache;
		  HooksDispatcherOnRerender.useHostTransitionStatus = useHostTransitionStatus;
		  HooksDispatcherOnRerender.useFormState = rerenderActionState;
		  HooksDispatcherOnRerender.useActionState = rerenderActionState;
		  HooksDispatcherOnRerender.useOptimistic = function (passthrough, reducer) {
		    var hook = updateWorkInProgressHook();
		    if (null !== currentHook)
		      return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
		    hook.baseState = passthrough;
		    return [passthrough, hook.queue.dispatch];
		  };
		  var classComponentUpdater = {
		      isMounted: function (component) {
		        return (component = component._reactInternals)
		          ? getNearestMountedFiber(component) === component
		          : !1;
		      },
		      enqueueSetState: function (inst, payload, callback) {
		        inst = inst._reactInternals;
		        var lane = requestUpdateLane(),
		          update = createUpdate(lane);
		        update.payload = payload;
		        void 0 !== callback &&
		          null !== callback &&
		          (update.callback = callback);
		        payload = enqueueUpdate(inst, update, lane);
		        null !== payload &&
		          (scheduleUpdateOnFiber(payload, inst, lane),
		          entangleTransitions(payload, inst, lane));
		      },
		      enqueueReplaceState: function (inst, payload, callback) {
		        inst = inst._reactInternals;
		        var lane = requestUpdateLane(),
		          update = createUpdate(lane);
		        update.tag = 1;
		        update.payload = payload;
		        void 0 !== callback &&
		          null !== callback &&
		          (update.callback = callback);
		        payload = enqueueUpdate(inst, update, lane);
		        null !== payload &&
		          (scheduleUpdateOnFiber(payload, inst, lane),
		          entangleTransitions(payload, inst, lane));
		      },
		      enqueueForceUpdate: function (inst, callback) {
		        inst = inst._reactInternals;
		        var lane = requestUpdateLane(),
		          update = createUpdate(lane);
		        update.tag = 2;
		        void 0 !== callback &&
		          null !== callback &&
		          (update.callback = callback);
		        callback = enqueueUpdate(inst, update, lane);
		        null !== callback &&
		          (scheduleUpdateOnFiber(callback, inst, lane),
		          entangleTransitions(callback, inst, lane));
		      }
		    },
		    reportGlobalError =
		      "function" === typeof reportError
		        ? reportError
		        : function (error) {
		            if (
		              "object" === typeof window &&
		              "function" === typeof window.ErrorEvent
		            ) {
		              var event = new window.ErrorEvent("error", {
		                bubbles: !0,
		                cancelable: !0,
		                message:
		                  "object" === typeof error &&
		                  null !== error &&
		                  "string" === typeof error.message
		                    ? String(error.message)
		                    : String(error),
		                error: error
		              });
		              if (!window.dispatchEvent(event)) return;
		            } else if (
		              "object" === typeof process &&
		              "function" === typeof process.emit
		            ) {
		              process.emit("uncaughtException", error);
		              return;
		            }
		            console.error(error);
		          },
		    SelectiveHydrationException = Error(formatProdErrorMessage(461)),
		    didReceiveUpdate = !1,
		    SUSPENDED_MARKER = { dehydrated: null, treeContext: null, retryLane: 0 },
		    valueCursor = createCursor(null),
		    currentlyRenderingFiber = null,
		    lastContextDependency = null,
		    AbortControllerLocal =
		      "undefined" !== typeof AbortController
		        ? AbortController
		        : function () {
		            var listeners = [],
		              signal = (this.signal = {
		                aborted: !1,
		                addEventListener: function (type, listener) {
		                  listeners.push(listener);
		                }
		              });
		            this.abort = function () {
		              signal.aborted = !0;
		              listeners.forEach(function (listener) {
		                return listener();
		              });
		            };
		          },
		    scheduleCallback$1 = Scheduler.unstable_scheduleCallback,
		    NormalPriority = Scheduler.unstable_NormalPriority,
		    CacheContext = {
		      $$typeof: REACT_CONTEXT_TYPE,
		      Consumer: null,
		      Provider: null,
		      _currentValue: null,
		      _currentValue2: null,
		      _threadCount: 0
		    },
		    prevOnStartTransitionFinish = ReactSharedInternals.S;
		  ReactSharedInternals.S = function (transition, returnValue) {
		    "object" === typeof returnValue &&
		      null !== returnValue &&
		      "function" === typeof returnValue.then &&
		      entangleAsyncAction(transition, returnValue);
		    null !== prevOnStartTransitionFinish &&
		      prevOnStartTransitionFinish(transition, returnValue);
		  };
		  var resumedCache = createCursor(null),
		    offscreenSubtreeIsHidden = !1,
		    offscreenSubtreeWasHidden = !1,
		    needsFormReset = !1,
		    PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set,
		    nextEffect = null,
		    shouldFireAfterActiveInstanceBlur = !1,
		    hostParent = null,
		    hostParentIsContainer = !1,
		    currentHoistableRoot = null,
		    suspenseyCommitFlag = 8192,
		    DefaultAsyncDispatcher = {
		      getCacheForType: function (resourceType) {
		        var cache = readContext(CacheContext),
		          cacheForType = cache.data.get(resourceType);
		        void 0 === cacheForType &&
		          ((cacheForType = resourceType()),
		          cache.data.set(resourceType, cacheForType));
		        return cacheForType;
		      }
		    },
		    COMPONENT_TYPE = 0,
		    HAS_PSEUDO_CLASS_TYPE = 1,
		    ROLE_TYPE = 2,
		    TEST_NAME_TYPE = 3,
		    TEXT_TYPE = 4;
		  if ("function" === typeof Symbol && Symbol.for) {
		    var symbolFor = Symbol.for;
		    COMPONENT_TYPE = symbolFor("selector.component");
		    HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
		    ROLE_TYPE = symbolFor("selector.role");
		    TEST_NAME_TYPE = symbolFor("selector.test_id");
		    TEXT_TYPE = symbolFor("selector.text");
		  }
		  var PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map,
		    executionContext = 0,
		    workInProgressRoot = null,
		    workInProgress = null,
		    workInProgressRootRenderLanes = 0,
		    workInProgressSuspendedReason = 0,
		    workInProgressThrownValue = null,
		    workInProgressRootDidSkipSuspendedSiblings = !1,
		    workInProgressRootIsPrerendering = !1,
		    workInProgressRootDidAttachPingListener = !1,
		    entangledRenderLanes = 0,
		    workInProgressRootExitStatus = 0,
		    workInProgressRootSkippedLanes = 0,
		    workInProgressRootInterleavedUpdatedLanes = 0,
		    workInProgressRootPingedLanes = 0,
		    workInProgressDeferredLane = 0,
		    workInProgressSuspendedRetryLanes = 0,
		    workInProgressRootConcurrentErrors = null,
		    workInProgressRootRecoverableErrors = null,
		    workInProgressRootDidIncludeRecursiveRenderUpdate = !1,
		    globalMostRecentFallbackTime = 0,
		    workInProgressRootRenderTargetTime = Infinity,
		    workInProgressTransitions = null,
		    legacyErrorBoundariesThatAlreadyFailed = null,
		    rootDoesHavePassiveEffects = !1,
		    rootWithPendingPassiveEffects = null,
		    pendingPassiveEffectsLanes = 0,
		    pendingPassiveEffectsRemainingLanes = 0,
		    pendingPassiveTransitions = null,
		    nestedUpdateCount = 0,
		    rootWithNestedUpdates = null;
		  exports.attemptContinuousHydration = function (fiber) {
		    if (13 === fiber.tag) {
		      var root = enqueueConcurrentRenderForLane(fiber, 67108864);
		      null !== root && scheduleUpdateOnFiber(root, fiber, 67108864);
		      markRetryLaneIfNotHydrated(fiber, 67108864);
		    }
		  };
		  exports.attemptHydrationAtCurrentPriority = function (fiber) {
		    if (13 === fiber.tag) {
		      var lane = requestUpdateLane(),
		        root = enqueueConcurrentRenderForLane(fiber, lane);
		      null !== root && scheduleUpdateOnFiber(root, fiber, lane);
		      markRetryLaneIfNotHydrated(fiber, lane);
		    }
		  };
		  exports.attemptSynchronousHydration = function (fiber) {
		    switch (fiber.tag) {
		      case 3:
		        fiber = fiber.stateNode;
		        if (fiber.current.memoizedState.isDehydrated) {
		          var lanes = getHighestPriorityLanes(fiber.pendingLanes);
		          if (0 !== lanes) {
		            fiber.pendingLanes |= 2;
		            for (fiber.entangledLanes |= 2; lanes; ) {
		              var lane = 1 << (31 - clz32(lanes));
		              fiber.entanglements[1] |= lane;
		              lanes &= ~lane;
		            }
		            ensureRootIsScheduled(fiber);
		            0 === (executionContext & 6) &&
		              ((workInProgressRootRenderTargetTime = now() + 500),
		              flushSyncWorkAcrossRoots_impl(0, !1));
		          }
		        }
		        break;
		      case 13:
		        (lanes = enqueueConcurrentRenderForLane(fiber, 2)),
		          null !== lanes && scheduleUpdateOnFiber(lanes, fiber, 2),
		          flushSyncWork(),
		          markRetryLaneIfNotHydrated(fiber, 2);
		    }
		  };
		  exports.batchedUpdates = function (fn, a) {
		    return fn(a);
		  };
		  exports.createComponentSelector = function (component) {
		    return { $$typeof: COMPONENT_TYPE, value: component };
		  };
		  exports.createContainer = function (
		    containerInfo,
		    tag,
		    hydrationCallbacks,
		    isStrictMode,
		    concurrentUpdatesByDefaultOverride,
		    identifierPrefix,
		    onUncaughtError,
		    onCaughtError,
		    onRecoverableError,
		    transitionCallbacks
		  ) {
		    return createFiberRoot(
		      containerInfo,
		      tag,
		      !1,
		      null,
		      hydrationCallbacks,
		      isStrictMode,
		      identifierPrefix,
		      onUncaughtError,
		      onCaughtError,
		      onRecoverableError,
		      transitionCallbacks,
		      null
		    );
		  };
		  exports.createHasPseudoClassSelector = function (selectors) {
		    return { $$typeof: HAS_PSEUDO_CLASS_TYPE, value: selectors };
		  };
		  exports.createHydrationContainer = function (
		    initialChildren,
		    callback,
		    containerInfo,
		    tag,
		    hydrationCallbacks,
		    isStrictMode,
		    concurrentUpdatesByDefaultOverride,
		    identifierPrefix,
		    onUncaughtError,
		    onCaughtError,
		    onRecoverableError,
		    transitionCallbacks,
		    formState
		  ) {
		    initialChildren = createFiberRoot(
		      containerInfo,
		      tag,
		      !0,
		      initialChildren,
		      hydrationCallbacks,
		      isStrictMode,
		      identifierPrefix,
		      onUncaughtError,
		      onCaughtError,
		      onRecoverableError,
		      transitionCallbacks,
		      formState
		    );
		    initialChildren.context = getContextForSubtree(null);
		    containerInfo = initialChildren.current;
		    tag = requestUpdateLane();
		    hydrationCallbacks = createUpdate(tag);
		    hydrationCallbacks.callback =
		      void 0 !== callback && null !== callback ? callback : null;
		    enqueueUpdate(containerInfo, hydrationCallbacks, tag);
		    initialChildren.current.lanes = tag;
		    markRootUpdated$1(initialChildren, tag);
		    ensureRootIsScheduled(initialChildren);
		    return initialChildren;
		  };
		  exports.createPortal = function (children, containerInfo, implementation) {
		    var key =
		      3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
		    return {
		      $$typeof: REACT_PORTAL_TYPE,
		      key: null == key ? null : "" + key,
		      children: children,
		      containerInfo: containerInfo,
		      implementation: implementation
		    };
		  };
		  exports.createRoleSelector = function (role) {
		    return { $$typeof: ROLE_TYPE, value: role };
		  };
		  exports.createTestNameSelector = function (id) {
		    return { $$typeof: TEST_NAME_TYPE, value: id };
		  };
		  exports.createTextSelector = function (text) {
		    return { $$typeof: TEXT_TYPE, value: text };
		  };
		  exports.defaultOnCaughtError = function (error) {
		    console.error(error);
		  };
		  exports.defaultOnRecoverableError = function (error) {
		    reportGlobalError(error);
		  };
		  exports.defaultOnUncaughtError = function (error) {
		    reportGlobalError(error);
		  };
		  exports.deferredUpdates = function (fn) {
		    var prevTransition = ReactSharedInternals.T,
		      previousPriority = getCurrentUpdatePriority();
		    try {
		      return (
		        setCurrentUpdatePriority(32), (ReactSharedInternals.T = null), fn()
		      );
		    } finally {
		      setCurrentUpdatePriority(previousPriority),
		        (ReactSharedInternals.T = prevTransition);
		    }
		  };
		  exports.discreteUpdates = function (fn, a, b, c, d) {
		    var prevTransition = ReactSharedInternals.T,
		      previousPriority = getCurrentUpdatePriority();
		    try {
		      return (
		        setCurrentUpdatePriority(2),
		        (ReactSharedInternals.T = null),
		        fn(a, b, c, d)
		      );
		    } finally {
		      setCurrentUpdatePriority(previousPriority),
		        (ReactSharedInternals.T = prevTransition),
		        0 === executionContext &&
		          (workInProgressRootRenderTargetTime = now() + 500);
		    }
		  };
		  exports.findAllNodes = findAllNodes;
		  exports.findBoundingRects = function (hostRoot, selectors) {
		    if (!supportsTestSelectors) throw Error(formatProdErrorMessage(363));
		    selectors = findAllNodes(hostRoot, selectors);
		    hostRoot = [];
		    for (var i = 0; i < selectors.length; i++)
		      hostRoot.push(getBoundingRect(selectors[i]));
		    for (selectors = hostRoot.length - 1; 0 < selectors; selectors--) {
		      i = hostRoot[selectors];
		      for (
		        var targetLeft = i.x,
		          targetRight = targetLeft + i.width,
		          targetTop = i.y,
		          targetBottom = targetTop + i.height,
		          j = selectors - 1;
		        0 <= j;
		        j--
		      )
		        if (selectors !== j) {
		          var otherRect = hostRoot[j],
		            otherLeft = otherRect.x,
		            otherRight = otherLeft + otherRect.width,
		            otherTop = otherRect.y,
		            otherBottom = otherTop + otherRect.height;
		          if (
		            targetLeft >= otherLeft &&
		            targetTop >= otherTop &&
		            targetRight <= otherRight &&
		            targetBottom <= otherBottom
		          ) {
		            hostRoot.splice(selectors, 1);
		            break;
		          } else if (
		            !(
		              targetLeft !== otherLeft ||
		              i.width !== otherRect.width ||
		              otherBottom < targetTop ||
		              otherTop > targetBottom
		            )
		          ) {
		            otherTop > targetTop &&
		              ((otherRect.height += otherTop - targetTop),
		              (otherRect.y = targetTop));
		            otherBottom < targetBottom &&
		              (otherRect.height = targetBottom - otherTop);
		            hostRoot.splice(selectors, 1);
		            break;
		          } else if (
		            !(
		              targetTop !== otherTop ||
		              i.height !== otherRect.height ||
		              otherRight < targetLeft ||
		              otherLeft > targetRight
		            )
		          ) {
		            otherLeft > targetLeft &&
		              ((otherRect.width += otherLeft - targetLeft),
		              (otherRect.x = targetLeft));
		            otherRight < targetRight &&
		              (otherRect.width = targetRight - otherLeft);
		            hostRoot.splice(selectors, 1);
		            break;
		          }
		        }
		    }
		    return hostRoot;
		  };
		  exports.findHostInstance = findHostInstance;
		  exports.findHostInstanceWithNoPortals = function (fiber) {
		    fiber = findCurrentFiberUsingSlowPath(fiber);
		    fiber =
		      null !== fiber ? findCurrentHostFiberWithNoPortalsImpl(fiber) : null;
		    return null === fiber ? null : getPublicInstance(fiber.stateNode);
		  };
		  exports.findHostInstanceWithWarning = function (component) {
		    return findHostInstance(component);
		  };
		  exports.flushPassiveEffects = flushPassiveEffects;
		  exports.flushSyncFromReconciler = function (fn) {
		    var prevExecutionContext = executionContext;
		    executionContext |= 1;
		    var prevTransition = ReactSharedInternals.T,
		      previousPriority = getCurrentUpdatePriority();
		    try {
		      if ((setCurrentUpdatePriority(2), (ReactSharedInternals.T = null), fn))
		        return fn();
		    } finally {
		      setCurrentUpdatePriority(previousPriority),
		        (ReactSharedInternals.T = prevTransition),
		        (executionContext = prevExecutionContext),
		        0 === (executionContext & 6) && flushSyncWorkAcrossRoots_impl(0, !1);
		    }
		  };
		  exports.flushSyncWork = flushSyncWork;
		  exports.focusWithin = function (hostRoot, selectors) {
		    if (!supportsTestSelectors) throw Error(formatProdErrorMessage(363));
		    hostRoot = findFiberRootForHostRoot(hostRoot);
		    selectors = findPaths(hostRoot, selectors);
		    selectors = Array.from(selectors);
		    for (hostRoot = 0; hostRoot < selectors.length; ) {
		      var fiber = selectors[hostRoot++],
		        tag = fiber.tag;
		      if (!isHiddenSubtree(fiber)) {
		        if (
		          (5 === tag || 26 === tag || 27 === tag) &&
		          setFocusIfFocusable(fiber.stateNode)
		        )
		          return !0;
		        for (fiber = fiber.child; null !== fiber; )
		          selectors.push(fiber), (fiber = fiber.sibling);
		      }
		    }
		    return !1;
		  };
		  exports.getFindAllNodesFailureDescription = function (hostRoot, selectors) {
		    if (!supportsTestSelectors) throw Error(formatProdErrorMessage(363));
		    var maxSelectorIndex = 0,
		      matchedNames = [];
		    hostRoot = [findFiberRootForHostRoot(hostRoot), 0];
		    for (var index = 0; index < hostRoot.length; ) {
		      var fiber = hostRoot[index++],
		        tag = fiber.tag,
		        selectorIndex = hostRoot[index++],
		        selector = selectors[selectorIndex];
		      if ((5 !== tag && 26 !== tag && 27 !== tag) || !isHiddenSubtree(fiber))
		        if (
		          (matchSelector(fiber, selector) &&
		            (matchedNames.push(selectorToString(selector)),
		            selectorIndex++,
		            selectorIndex > maxSelectorIndex &&
		              (maxSelectorIndex = selectorIndex)),
		          selectorIndex < selectors.length)
		        )
		          for (fiber = fiber.child; null !== fiber; )
		            hostRoot.push(fiber, selectorIndex), (fiber = fiber.sibling);
		    }
		    if (maxSelectorIndex < selectors.length) {
		      for (
		        hostRoot = [];
		        maxSelectorIndex < selectors.length;
		        maxSelectorIndex++
		      )
		        hostRoot.push(selectorToString(selectors[maxSelectorIndex]));
		      return (
		        "findAllNodes was able to match part of the selector:\n  " +
		        (matchedNames.join(" > ") +
		          "\n\nNo matching component was found for:\n  ") +
		        hostRoot.join(" > ")
		      );
		    }
		    return null;
		  };
		  exports.getPublicRootInstance = function (container) {
		    container = container.current;
		    if (!container.child) return null;
		    switch (container.child.tag) {
		      case 27:
		      case 5:
		        return getPublicInstance(container.child.stateNode);
		      default:
		        return container.child.stateNode;
		    }
		  };
		  exports.injectIntoDevTools = function () {
		    var internals = {
		      bundleType: 0,
		      version: rendererVersion,
		      rendererPackageName: rendererPackageName,
		      currentDispatcherRef: ReactSharedInternals,
		      findFiberByHostInstance: getInstanceFromNode,
		      reconcilerVersion: "19.0.0"
		    };
		    null !== extraDevToolsConfig &&
		      (internals.rendererConfig = extraDevToolsConfig);
		    if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) internals = !1;
		    else {
		      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
		      if (hook.isDisabled || !hook.supportsFiber) internals = !0;
		      else {
		        try {
		          (rendererID = hook.inject(internals)), (injectedHook = hook);
		        } catch (err) {}
		        internals = hook.checkDCE ? !0 : !1;
		      }
		    }
		    return internals;
		  };
		  exports.isAlreadyRendering = function () {
		    return !1;
		  };
		  exports.observeVisibleRects = function (
		    hostRoot,
		    selectors,
		    callback,
		    options
		  ) {
		    if (!supportsTestSelectors) throw Error(formatProdErrorMessage(363));
		    hostRoot = findAllNodes(hostRoot, selectors);
		    var disconnect = setupIntersectionObserver(
		      hostRoot,
		      callback,
		      options
		    ).disconnect;
		    return {
		      disconnect: function () {
		        disconnect();
		      }
		    };
		  };
		  exports.shouldError = function () {
		    return null;
		  };
		  exports.shouldSuspend = function () {
		    return !1;
		  };
		  exports.startHostTransition = function (
		    formFiber,
		    pendingState,
		    action,
		    formData
		  ) {
		    if (5 !== formFiber.tag) throw Error(formatProdErrorMessage(476));
		    var queue = ensureFormComponentIsStateful(formFiber).queue;
		    startTransition(
		      formFiber,
		      queue,
		      pendingState,
		      NotPendingTransition,
		      null === action
		        ? noop
		        : function () {
		            var resetStateQueue =
		              ensureFormComponentIsStateful(formFiber).next.queue;
		            dispatchSetStateInternal(
		              formFiber,
		              resetStateQueue,
		              {},
		              requestUpdateLane()
		            );
		            return action(formData);
		          }
		    );
		  };
		  exports.updateContainer = function (
		    element,
		    container,
		    parentComponent,
		    callback
		  ) {
		    var current = container.current,
		      lane = requestUpdateLane();
		    updateContainerImpl(
		      current,
		      lane,
		      element,
		      container,
		      parentComponent,
		      callback
		    );
		    return lane;
		  };
		  exports.updateContainerSync = function (
		    element,
		    container,
		    parentComponent,
		    callback
		  ) {
		    0 === container.tag && flushPassiveEffects();
		    updateContainerImpl(
		      container.current,
		      2,
		      element,
		      container,
		      parentComponent,
		      callback
		    );
		    return 2;
		  };
		  return exports;
		};
		module.exports.default = module.exports;
		Object.defineProperty(module.exports, "__esModule", { value: !0 }); 
	} (reactReconciler_production));
	return reactReconciler_production.exports;
}

var reactReconciler_development = {exports: {}};

/**
 * @license React
 * react-reconciler.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactReconciler_development;

function requireReactReconciler_development () {
	if (hasRequiredReactReconciler_development) return reactReconciler_development.exports;
	hasRequiredReactReconciler_development = 1;
	(function (module) {
		"production" !== process.env.NODE_ENV &&
		  ((module.exports = function ($$$config) {
		    function findHook(fiber, id) {
		      for (fiber = fiber.memoizedState; null !== fiber && 0 < id; )
		        (fiber = fiber.next), id--;
		      return fiber;
		    }
		    function copyWithSetImpl(obj, path, index, value) {
		      if (index >= path.length) return value;
		      var key = path[index],
		        updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
		      updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
		      return updated;
		    }
		    function copyWithRename(obj, oldPath, newPath) {
		      if (oldPath.length !== newPath.length)
		        console.warn("copyWithRename() expects paths of the same length");
		      else {
		        for (var i = 0; i < newPath.length - 1; i++)
		          if (oldPath[i] !== newPath[i]) {
		            console.warn(
		              "copyWithRename() expects paths to be the same except for the deepest key"
		            );
		            return;
		          }
		        return copyWithRenameImpl(obj, oldPath, newPath, 0);
		      }
		    }
		    function copyWithRenameImpl(obj, oldPath, newPath, index) {
		      var oldKey = oldPath[index],
		        updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
		      index + 1 === oldPath.length
		        ? ((updated[newPath[index]] = updated[oldKey]),
		          isArrayImpl(updated)
		            ? updated.splice(oldKey, 1)
		            : delete updated[oldKey])
		        : (updated[oldKey] = copyWithRenameImpl(
		            obj[oldKey],
		            oldPath,
		            newPath,
		            index + 1
		          ));
		      return updated;
		    }
		    function copyWithDeleteImpl(obj, path, index) {
		      var key = path[index],
		        updated = isArrayImpl(obj) ? obj.slice() : assign({}, obj);
		      if (index + 1 === path.length)
		        return (
		          isArrayImpl(updated) ? updated.splice(key, 1) : delete updated[key],
		          updated
		        );
		      updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
		      return updated;
		    }
		    function shouldSuspendImpl() {
		      return !1;
		    }
		    function shouldErrorImpl() {
		      return null;
		    }
		    function createFiber(tag, pendingProps, key, mode) {
		      return new FiberNode(tag, pendingProps, key, mode);
		    }
		    function scheduleRoot(root, element) {
		      root.context === emptyContextObject &&
		        (updateContainerSync(element, root, null, null), flushSyncWork());
		    }
		    function scheduleRefresh(root, update) {
		      if (null !== resolveFamily) {
		        var staleFamilies = update.staleFamilies;
		        update = update.updatedFamilies;
		        flushPassiveEffects();
		        scheduleFibersWithFamiliesRecursively(
		          root.current,
		          update,
		          staleFamilies
		        );
		        flushSyncWork();
		      }
		    }
		    function setRefreshHandler(handler) {
		      resolveFamily = handler;
		    }
		    function warnInvalidHookAccess() {
		      console.error(
		        "Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://react.dev/link/rules-of-hooks"
		      );
		    }
		    function warnInvalidContextAccess() {
		      console.error(
		        "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
		      );
		    }
		    function noop() {}
		    function warnForMissingKey() {}
		    function setToSortedString(set) {
		      var array = [];
		      set.forEach(function (value) {
		        array.push(value);
		      });
		      return array.sort().join(", ");
		    }
		    function getIteratorFn(maybeIterable) {
		      if (null === maybeIterable || "object" !== typeof maybeIterable)
		        return null;
		      maybeIterable =
		        (MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL]) ||
		        maybeIterable["@@iterator"];
		      return "function" === typeof maybeIterable ? maybeIterable : null;
		    }
		    function getComponentNameFromType(type) {
		      if (null == type) return null;
		      if ("function" === typeof type)
		        return type.$$typeof === REACT_CLIENT_REFERENCE
		          ? null
		          : type.displayName || type.name || null;
		      if ("string" === typeof type) return type;
		      switch (type) {
		        case REACT_FRAGMENT_TYPE:
		          return "Fragment";
		        case REACT_PORTAL_TYPE:
		          return "Portal";
		        case REACT_PROFILER_TYPE:
		          return "Profiler";
		        case REACT_STRICT_MODE_TYPE:
		          return "StrictMode";
		        case REACT_SUSPENSE_TYPE:
		          return "Suspense";
		        case REACT_SUSPENSE_LIST_TYPE:
		          return "SuspenseList";
		      }
		      if ("object" === typeof type)
		        switch (
		          ("number" === typeof type.tag &&
		            console.error(
		              "Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."
		            ),
		          type.$$typeof)
		        ) {
		          case REACT_CONTEXT_TYPE:
		            return (type.displayName || "Context") + ".Provider";
		          case REACT_CONSUMER_TYPE:
		            return (type._context.displayName || "Context") + ".Consumer";
		          case REACT_FORWARD_REF_TYPE:
		            var innerType = type.render;
		            type = type.displayName;
		            type ||
		              ((type = innerType.displayName || innerType.name || ""),
		              (type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef"));
		            return type;
		          case REACT_MEMO_TYPE:
		            return (
		              (innerType = type.displayName || null),
		              null !== innerType
		                ? innerType
		                : getComponentNameFromType(type.type) || "Memo"
		            );
		          case REACT_LAZY_TYPE:
		            innerType = type._payload;
		            type = type._init;
		            try {
		              return getComponentNameFromType(type(innerType));
		            } catch (x) {}
		        }
		      return null;
		    }
		    function getComponentNameFromFiber(fiber) {
		      var type = fiber.type;
		      switch (fiber.tag) {
		        case 24:
		          return "Cache";
		        case 9:
		          return (type._context.displayName || "Context") + ".Consumer";
		        case 10:
		          return (type.displayName || "Context") + ".Provider";
		        case 18:
		          return "DehydratedFragment";
		        case 11:
		          return (
		            (fiber = type.render),
		            (fiber = fiber.displayName || fiber.name || ""),
		            type.displayName ||
		              ("" !== fiber ? "ForwardRef(" + fiber + ")" : "ForwardRef")
		          );
		        case 7:
		          return "Fragment";
		        case 26:
		        case 27:
		        case 5:
		          return type;
		        case 4:
		          return "Portal";
		        case 3:
		          return "Root";
		        case 6:
		          return "Text";
		        case 16:
		          return getComponentNameFromType(type);
		        case 8:
		          return type === REACT_STRICT_MODE_TYPE ? "StrictMode" : "Mode";
		        case 22:
		          return "Offscreen";
		        case 12:
		          return "Profiler";
		        case 21:
		          return "Scope";
		        case 13:
		          return "Suspense";
		        case 19:
		          return "SuspenseList";
		        case 25:
		          return "TracingMarker";
		        case 1:
		        case 0:
		        case 14:
		        case 15:
		          if ("function" === typeof type)
		            return type.displayName || type.name || null;
		          if ("string" === typeof type) return type;
		          break;
		        case 29:
		          type = fiber._debugInfo;
		          if (null != type)
		            for (var i = type.length - 1; 0 <= i; i--)
		              if ("string" === typeof type[i].name) return type[i].name;
		          if (null !== fiber.return)
		            return getComponentNameFromFiber(fiber.return);
		      }
		      return null;
		    }
		    function disabledLog() {}
		    function disableLogs() {
		      if (0 === disabledDepth) {
		        prevLog = console.log;
		        prevInfo = console.info;
		        prevWarn = console.warn;
		        prevError = console.error;
		        prevGroup = console.group;
		        prevGroupCollapsed = console.groupCollapsed;
		        prevGroupEnd = console.groupEnd;
		        var props = {
		          configurable: !0,
		          enumerable: !0,
		          value: disabledLog,
		          writable: !0
		        };
		        Object.defineProperties(console, {
		          info: props,
		          log: props,
		          warn: props,
		          error: props,
		          group: props,
		          groupCollapsed: props,
		          groupEnd: props
		        });
		      }
		      disabledDepth++;
		    }
		    function reenableLogs() {
		      disabledDepth--;
		      if (0 === disabledDepth) {
		        var props = { configurable: !0, enumerable: !0, writable: !0 };
		        Object.defineProperties(console, {
		          log: assign({}, props, { value: prevLog }),
		          info: assign({}, props, { value: prevInfo }),
		          warn: assign({}, props, { value: prevWarn }),
		          error: assign({}, props, { value: prevError }),
		          group: assign({}, props, { value: prevGroup }),
		          groupCollapsed: assign({}, props, { value: prevGroupCollapsed }),
		          groupEnd: assign({}, props, { value: prevGroupEnd })
		        });
		      }
		      0 > disabledDepth &&
		        console.error(
		          "disabledDepth fell below zero. This is a bug in React. Please file an issue."
		        );
		    }
		    function describeBuiltInComponentFrame(name) {
		      if (void 0 === prefix)
		        try {
		          throw Error();
		        } catch (x) {
		          var match = x.stack.trim().match(/\n( *(at )?)/);
		          prefix = (match && match[1]) || "";
		          suffix =
		            -1 < x.stack.indexOf("\n    at")
		              ? " (<anonymous>)"
		              : -1 < x.stack.indexOf("@")
		                ? "@unknown:0:0"
		                : "";
		        }
		      return "\n" + prefix + name + suffix;
		    }
		    function describeNativeComponentFrame(fn, construct) {
		      if (!fn || reentry) return "";
		      var frame = componentFrameCache.get(fn);
		      if (void 0 !== frame) return frame;
		      reentry = !0;
		      frame = Error.prepareStackTrace;
		      Error.prepareStackTrace = void 0;
		      var previousDispatcher = null;
		      previousDispatcher = ReactSharedInternals.H;
		      ReactSharedInternals.H = null;
		      disableLogs();
		      try {
		        var RunInRootFrame = {
		          DetermineComponentFrameRoot: function () {
		            try {
		              if (construct) {
		                var Fake = function () {
		                  throw Error();
		                };
		                Object.defineProperty(Fake.prototype, "props", {
		                  set: function () {
		                    throw Error();
		                  }
		                });
		                if ("object" === typeof Reflect && Reflect.construct) {
		                  try {
		                    Reflect.construct(Fake, []);
		                  } catch (x) {
		                    var control = x;
		                  }
		                  Reflect.construct(fn, [], Fake);
		                } else {
		                  try {
		                    Fake.call();
		                  } catch (x$0) {
		                    control = x$0;
		                  }
		                  fn.call(Fake.prototype);
		                }
		              } else {
		                try {
		                  throw Error();
		                } catch (x$1) {
		                  control = x$1;
		                }
		                (Fake = fn()) &&
		                  "function" === typeof Fake.catch &&
		                  Fake.catch(function () {});
		              }
		            } catch (sample) {
		              if (sample && control && "string" === typeof sample.stack)
		                return [sample.stack, control.stack];
		            }
		            return [null, null];
		          }
		        };
		        RunInRootFrame.DetermineComponentFrameRoot.displayName =
		          "DetermineComponentFrameRoot";
		        var namePropDescriptor = Object.getOwnPropertyDescriptor(
		          RunInRootFrame.DetermineComponentFrameRoot,
		          "name"
		        );
		        namePropDescriptor &&
		          namePropDescriptor.configurable &&
		          Object.defineProperty(
		            RunInRootFrame.DetermineComponentFrameRoot,
		            "name",
		            { value: "DetermineComponentFrameRoot" }
		          );
		        var _RunInRootFrame$Deter =
		            RunInRootFrame.DetermineComponentFrameRoot(),
		          sampleStack = _RunInRootFrame$Deter[0],
		          controlStack = _RunInRootFrame$Deter[1];
		        if (sampleStack && controlStack) {
		          var sampleLines = sampleStack.split("\n"),
		            controlLines = controlStack.split("\n");
		          for (
		            _RunInRootFrame$Deter = namePropDescriptor = 0;
		            namePropDescriptor < sampleLines.length &&
		            !sampleLines[namePropDescriptor].includes(
		              "DetermineComponentFrameRoot"
		            );

		          )
		            namePropDescriptor++;
		          for (
		            ;
		            _RunInRootFrame$Deter < controlLines.length &&
		            !controlLines[_RunInRootFrame$Deter].includes(
		              "DetermineComponentFrameRoot"
		            );

		          )
		            _RunInRootFrame$Deter++;
		          if (
		            namePropDescriptor === sampleLines.length ||
		            _RunInRootFrame$Deter === controlLines.length
		          )
		            for (
		              namePropDescriptor = sampleLines.length - 1,
		                _RunInRootFrame$Deter = controlLines.length - 1;
		              1 <= namePropDescriptor &&
		              0 <= _RunInRootFrame$Deter &&
		              sampleLines[namePropDescriptor] !==
		                controlLines[_RunInRootFrame$Deter];

		            )
		              _RunInRootFrame$Deter--;
		          for (
		            ;
		            1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter;
		            namePropDescriptor--, _RunInRootFrame$Deter--
		          )
		            if (
		              sampleLines[namePropDescriptor] !==
		              controlLines[_RunInRootFrame$Deter]
		            ) {
		              if (1 !== namePropDescriptor || 1 !== _RunInRootFrame$Deter) {
		                do
		                  if (
		                    (namePropDescriptor--,
		                    _RunInRootFrame$Deter--,
		                    0 > _RunInRootFrame$Deter ||
		                      sampleLines[namePropDescriptor] !==
		                        controlLines[_RunInRootFrame$Deter])
		                  ) {
		                    var _frame =
		                      "\n" +
		                      sampleLines[namePropDescriptor].replace(
		                        " at new ",
		                        " at "
		                      );
		                    fn.displayName &&
		                      _frame.includes("<anonymous>") &&
		                      (_frame = _frame.replace("<anonymous>", fn.displayName));
		                    "function" === typeof fn &&
		                      componentFrameCache.set(fn, _frame);
		                    return _frame;
		                  }
		                while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter);
		              }
		              break;
		            }
		        }
		      } finally {
		        (reentry = !1),
		          (ReactSharedInternals.H = previousDispatcher),
		          reenableLogs(),
		          (Error.prepareStackTrace = frame);
		      }
		      sampleLines = (sampleLines = fn ? fn.displayName || fn.name : "")
		        ? describeBuiltInComponentFrame(sampleLines)
		        : "";
		      "function" === typeof fn && componentFrameCache.set(fn, sampleLines);
		      return sampleLines;
		    }
		    function describeFiber(fiber) {
		      switch (fiber.tag) {
		        case 26:
		        case 27:
		        case 5:
		          return describeBuiltInComponentFrame(fiber.type);
		        case 16:
		          return describeBuiltInComponentFrame("Lazy");
		        case 13:
		          return describeBuiltInComponentFrame("Suspense");
		        case 19:
		          return describeBuiltInComponentFrame("SuspenseList");
		        case 0:
		        case 15:
		          return (fiber = describeNativeComponentFrame(fiber.type, !1)), fiber;
		        case 11:
		          return (
		            (fiber = describeNativeComponentFrame(fiber.type.render, !1)), fiber
		          );
		        case 1:
		          return (fiber = describeNativeComponentFrame(fiber.type, !0)), fiber;
		        default:
		          return "";
		      }
		    }
		    function getStackByFiberInDevAndProd(workInProgress) {
		      try {
		        var info = "";
		        do {
		          info += describeFiber(workInProgress);
		          var debugInfo = workInProgress._debugInfo;
		          if (debugInfo)
		            for (var i = debugInfo.length - 1; 0 <= i; i--) {
		              var entry = debugInfo[i];
		              if ("string" === typeof entry.name) {
		                var JSCompiler_temp_const = info,
		                  env = entry.env;
		                var JSCompiler_inline_result = describeBuiltInComponentFrame(
		                  entry.name + (env ? " [" + env + "]" : "")
		                );
		                info = JSCompiler_temp_const + JSCompiler_inline_result;
		              }
		            }
		          workInProgress = workInProgress.return;
		        } while (workInProgress);
		        return info;
		      } catch (x) {
		        return "\nError generating stack: " + x.message + "\n" + x.stack;
		      }
		    }
		    function getCurrentFiberStackInDev() {
		      return null === current ? "" : getStackByFiberInDevAndProd(current);
		    }
		    function runWithFiberInDEV(fiber, callback, arg0, arg1, arg2, arg3, arg4) {
		      var previousFiber = current;
		      ReactSharedInternals.getCurrentStack =
		        null === fiber ? null : getCurrentFiberStackInDev;
		      isRendering = !1;
		      current = fiber;
		      try {
		        return callback(arg0, arg1, arg2, arg3, arg4);
		      } finally {
		        current = previousFiber;
		      }
		      throw Error(
		        "runWithFiberInDEV should never be called in production. This is a bug in React."
		      );
		    }
		    function getNearestMountedFiber(fiber) {
		      var node = fiber,
		        nearestMounted = fiber;
		      if (fiber.alternate) for (; node.return; ) node = node.return;
		      else {
		        fiber = node;
		        do
		          (node = fiber),
		            0 !== (node.flags & 4098) && (nearestMounted = node.return),
		            (fiber = node.return);
		        while (fiber);
		      }
		      return 3 === node.tag ? nearestMounted : null;
		    }
		    function assertIsMounted(fiber) {
		      if (getNearestMountedFiber(fiber) !== fiber)
		        throw Error("Unable to find node on an unmounted component.");
		    }
		    function findCurrentFiberUsingSlowPath(fiber) {
		      var alternate = fiber.alternate;
		      if (!alternate) {
		        alternate = getNearestMountedFiber(fiber);
		        if (null === alternate)
		          throw Error("Unable to find node on an unmounted component.");
		        return alternate !== fiber ? null : fiber;
		      }
		      for (var a = fiber, b = alternate; ; ) {
		        var parentA = a.return;
		        if (null === parentA) break;
		        var parentB = parentA.alternate;
		        if (null === parentB) {
		          b = parentA.return;
		          if (null !== b) {
		            a = b;
		            continue;
		          }
		          break;
		        }
		        if (parentA.child === parentB.child) {
		          for (parentB = parentA.child; parentB; ) {
		            if (parentB === a) return assertIsMounted(parentA), fiber;
		            if (parentB === b) return assertIsMounted(parentA), alternate;
		            parentB = parentB.sibling;
		          }
		          throw Error("Unable to find node on an unmounted component.");
		        }
		        if (a.return !== b.return) (a = parentA), (b = parentB);
		        else {
		          for (var didFindChild = !1, _child = parentA.child; _child; ) {
		            if (_child === a) {
		              didFindChild = !0;
		              a = parentA;
		              b = parentB;
		              break;
		            }
		            if (_child === b) {
		              didFindChild = !0;
		              b = parentA;
		              a = parentB;
		              break;
		            }
		            _child = _child.sibling;
		          }
		          if (!didFindChild) {
		            for (_child = parentB.child; _child; ) {
		              if (_child === a) {
		                didFindChild = !0;
		                a = parentB;
		                b = parentA;
		                break;
		              }
		              if (_child === b) {
		                didFindChild = !0;
		                b = parentB;
		                a = parentA;
		                break;
		              }
		              _child = _child.sibling;
		            }
		            if (!didFindChild)
		              throw Error(
		                "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue."
		              );
		          }
		        }
		        if (a.alternate !== b)
		          throw Error(
		            "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue."
		          );
		      }
		      if (3 !== a.tag)
		        throw Error("Unable to find node on an unmounted component.");
		      return a.stateNode.current === a ? fiber : alternate;
		    }
		    function findCurrentHostFiber(parent) {
		      parent = findCurrentFiberUsingSlowPath(parent);
		      return null !== parent ? findCurrentHostFiberImpl(parent) : null;
		    }
		    function findCurrentHostFiberImpl(node) {
		      var tag = node.tag;
		      if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;
		      for (node = node.child; null !== node; ) {
		        tag = findCurrentHostFiberImpl(node);
		        if (null !== tag) return tag;
		        node = node.sibling;
		      }
		      return null;
		    }
		    function findCurrentHostFiberWithNoPortalsImpl(node) {
		      var tag = node.tag;
		      if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;
		      for (node = node.child; null !== node; ) {
		        if (
		          4 !== node.tag &&
		          ((tag = findCurrentHostFiberWithNoPortalsImpl(node)), null !== tag)
		        )
		          return tag;
		        node = node.sibling;
		      }
		      return null;
		    }
		    function createCursor(defaultValue) {
		      return { current: defaultValue };
		    }
		    function pop(cursor, fiber) {
		      0 > index$jscomp$0
		        ? console.error("Unexpected pop.")
		        : (fiber !== fiberStack[index$jscomp$0] &&
		            console.error("Unexpected Fiber popped."),
		          (cursor.current = valueStack[index$jscomp$0]),
		          (valueStack[index$jscomp$0] = null),
		          (fiberStack[index$jscomp$0] = null),
		          index$jscomp$0--);
		    }
		    function push(cursor, value, fiber) {
		      index$jscomp$0++;
		      valueStack[index$jscomp$0] = cursor.current;
		      fiberStack[index$jscomp$0] = fiber;
		      cursor.current = value;
		    }
		    function clz32Fallback(x) {
		      x >>>= 0;
		      return 0 === x ? 32 : (31 - ((log$1(x) / LN2) | 0)) | 0;
		    }
		    function getLabelForLane(lane) {
		      if (lane & 1) return "SyncHydrationLane";
		      if (lane & 2) return "Sync";
		      if (lane & 4) return "InputContinuousHydration";
		      if (lane & 8) return "InputContinuous";
		      if (lane & 16) return "DefaultHydration";
		      if (lane & 32) return "Default";
		      if (lane & 64) return "TransitionHydration";
		      if (lane & 4194176) return "Transition";
		      if (lane & 62914560) return "Retry";
		      if (lane & 67108864) return "SelectiveHydration";
		      if (lane & 134217728) return "IdleHydration";
		      if (lane & 268435456) return "Idle";
		      if (lane & 536870912) return "Offscreen";
		      if (lane & 1073741824) return "Deferred";
		    }
		    function getHighestPriorityLanes(lanes) {
		      var pendingSyncLanes = lanes & 42;
		      if (0 !== pendingSyncLanes) return pendingSyncLanes;
		      switch (lanes & -lanes) {
		        case 1:
		          return 1;
		        case 2:
		          return 2;
		        case 4:
		          return 4;
		        case 8:
		          return 8;
		        case 16:
		          return 16;
		        case 32:
		          return 32;
		        case 64:
		          return 64;
		        case 128:
		        case 256:
		        case 512:
		        case 1024:
		        case 2048:
		        case 4096:
		        case 8192:
		        case 16384:
		        case 32768:
		        case 65536:
		        case 131072:
		        case 262144:
		        case 524288:
		        case 1048576:
		        case 2097152:
		          return lanes & 4194176;
		        case 4194304:
		        case 8388608:
		        case 16777216:
		        case 33554432:
		          return lanes & 62914560;
		        case 67108864:
		          return 67108864;
		        case 134217728:
		          return 134217728;
		        case 268435456:
		          return 268435456;
		        case 536870912:
		          return 536870912;
		        case 1073741824:
		          return 0;
		        default:
		          return (
		            console.error(
		              "Should have found matching lanes. This is a bug in React."
		            ),
		            lanes
		          );
		      }
		    }
		    function getNextLanes(root, wipLanes) {
		      var pendingLanes = root.pendingLanes;
		      if (0 === pendingLanes) return 0;
		      var nextLanes = 0,
		        suspendedLanes = root.suspendedLanes,
		        pingedLanes = root.pingedLanes,
		        warmLanes = root.warmLanes;
		      root = 0 !== root.finishedLanes;
		      var nonIdlePendingLanes = pendingLanes & 134217727;
		      0 !== nonIdlePendingLanes
		        ? ((pendingLanes = nonIdlePendingLanes & ~suspendedLanes),
		          0 !== pendingLanes
		            ? (nextLanes = getHighestPriorityLanes(pendingLanes))
		            : ((pingedLanes &= nonIdlePendingLanes),
		              0 !== pingedLanes
		                ? (nextLanes = getHighestPriorityLanes(pingedLanes))
		                : root ||
		                  ((warmLanes = nonIdlePendingLanes & ~warmLanes),
		                  0 !== warmLanes &&
		                    (nextLanes = getHighestPriorityLanes(warmLanes)))))
		        : ((nonIdlePendingLanes = pendingLanes & ~suspendedLanes),
		          0 !== nonIdlePendingLanes
		            ? (nextLanes = getHighestPriorityLanes(nonIdlePendingLanes))
		            : 0 !== pingedLanes
		              ? (nextLanes = getHighestPriorityLanes(pingedLanes))
		              : root ||
		                ((warmLanes = pendingLanes & ~warmLanes),
		                0 !== warmLanes &&
		                  (nextLanes = getHighestPriorityLanes(warmLanes))));
		      return 0 === nextLanes
		        ? 0
		        : 0 !== wipLanes &&
		            wipLanes !== nextLanes &&
		            0 === (wipLanes & suspendedLanes) &&
		            ((suspendedLanes = nextLanes & -nextLanes),
		            (warmLanes = wipLanes & -wipLanes),
		            suspendedLanes >= warmLanes ||
		              (32 === suspendedLanes && 0 !== (warmLanes & 4194176)))
		          ? wipLanes
		          : nextLanes;
		    }
		    function checkIfRootIsPrerendering(root, renderLanes) {
		      return (
		        0 ===
		        (root.pendingLanes &
		          ~(root.suspendedLanes & ~root.pingedLanes) &
		          renderLanes)
		      );
		    }
		    function computeExpirationTime(lane, currentTime) {
		      switch (lane) {
		        case 1:
		        case 2:
		        case 4:
		        case 8:
		          return currentTime + 250;
		        case 16:
		        case 32:
		        case 64:
		        case 128:
		        case 256:
		        case 512:
		        case 1024:
		        case 2048:
		        case 4096:
		        case 8192:
		        case 16384:
		        case 32768:
		        case 65536:
		        case 131072:
		        case 262144:
		        case 524288:
		        case 1048576:
		        case 2097152:
		          return currentTime + 5e3;
		        case 4194304:
		        case 8388608:
		        case 16777216:
		        case 33554432:
		          return -1;
		        case 67108864:
		        case 134217728:
		        case 268435456:
		        case 536870912:
		        case 1073741824:
		          return -1;
		        default:
		          return (
		            console.error(
		              "Should have found matching lanes. This is a bug in React."
		            ),
		            -1
		          );
		      }
		    }
		    function claimNextTransitionLane() {
		      var lane = nextTransitionLane;
		      nextTransitionLane <<= 1;
		      0 === (nextTransitionLane & 4194176) && (nextTransitionLane = 128);
		      return lane;
		    }
		    function claimNextRetryLane() {
		      var lane = nextRetryLane;
		      nextRetryLane <<= 1;
		      0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
		      return lane;
		    }
		    function createLaneMap(initial) {
		      for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial);
		      return laneMap;
		    }
		    function markRootUpdated$1(root, updateLane) {
		      root.pendingLanes |= updateLane;
		      268435456 !== updateLane &&
		        ((root.suspendedLanes = 0),
		        (root.pingedLanes = 0),
		        (root.warmLanes = 0));
		    }
		    function markRootFinished(
		      root,
		      finishedLanes,
		      remainingLanes,
		      spawnedLane,
		      updatedLanes,
		      suspendedRetryLanes
		    ) {
		      var previouslyPendingLanes = root.pendingLanes;
		      root.pendingLanes = remainingLanes;
		      root.suspendedLanes = 0;
		      root.pingedLanes = 0;
		      root.warmLanes = 0;
		      root.expiredLanes &= remainingLanes;
		      root.entangledLanes &= remainingLanes;
		      root.errorRecoveryDisabledLanes &= remainingLanes;
		      root.shellSuspendCounter = 0;
		      var entanglements = root.entanglements,
		        expirationTimes = root.expirationTimes,
		        hiddenUpdates = root.hiddenUpdates;
		      for (
		        remainingLanes = previouslyPendingLanes & ~remainingLanes;
		        0 < remainingLanes;

		      ) {
		        var index = 31 - clz32(remainingLanes),
		          lane = 1 << index;
		        entanglements[index] = 0;
		        expirationTimes[index] = -1;
		        var hiddenUpdatesForLane = hiddenUpdates[index];
		        if (null !== hiddenUpdatesForLane)
		          for (
		            hiddenUpdates[index] = null, index = 0;
		            index < hiddenUpdatesForLane.length;
		            index++
		          ) {
		            var update = hiddenUpdatesForLane[index];
		            null !== update && (update.lane &= -536870913);
		          }
		        remainingLanes &= ~lane;
		      }
		      0 !== spawnedLane && markSpawnedDeferredLane(root, spawnedLane, 0);
		      0 !== suspendedRetryLanes &&
		        0 === updatedLanes &&
		        0 !== root.tag &&
		        (root.suspendedLanes |=
		          suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
		    }
		    function markSpawnedDeferredLane(root, spawnedLane, entangledLanes) {
		      root.pendingLanes |= spawnedLane;
		      root.suspendedLanes &= ~spawnedLane;
		      var spawnedLaneIndex = 31 - clz32(spawnedLane);
		      root.entangledLanes |= spawnedLane;
		      root.entanglements[spawnedLaneIndex] =
		        root.entanglements[spawnedLaneIndex] |
		        1073741824 |
		        (entangledLanes & 4194218);
		    }
		    function markRootEntangled(root, entangledLanes) {
		      var rootEntangledLanes = (root.entangledLanes |= entangledLanes);
		      for (root = root.entanglements; rootEntangledLanes; ) {
		        var index = 31 - clz32(rootEntangledLanes),
		          lane = 1 << index;
		        (lane & entangledLanes) | (root[index] & entangledLanes) &&
		          (root[index] |= entangledLanes);
		        rootEntangledLanes &= ~lane;
		      }
		    }
		    function addFiberToLanesMap(root, fiber, lanes) {
		      if (isDevToolsPresent)
		        for (root = root.pendingUpdatersLaneMap; 0 < lanes; ) {
		          var index = 31 - clz32(lanes),
		            lane = 1 << index;
		          root[index].add(fiber);
		          lanes &= ~lane;
		        }
		    }
		    function movePendingFibersToMemoized(root, lanes) {
		      if (isDevToolsPresent)
		        for (
		          var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap,
		            memoizedUpdaters = root.memoizedUpdaters;
		          0 < lanes;

		        ) {
		          var index = 31 - clz32(lanes);
		          root = 1 << index;
		          index = pendingUpdatersLaneMap[index];
		          0 < index.size &&
		            (index.forEach(function (fiber) {
		              var alternate = fiber.alternate;
		              (null !== alternate && memoizedUpdaters.has(alternate)) ||
		                memoizedUpdaters.add(fiber);
		            }),
		            index.clear());
		          lanes &= ~root;
		        }
		    }
		    function lanesToEventPriority(lanes) {
		      lanes &= -lanes;
		      return 2 < lanes
		        ? 8 < lanes
		          ? 0 !== (lanes & 134217727)
		            ? 32
		            : 268435456
		          : 8
		        : 2;
		    }
		    function injectInternals(internals) {
		      if ("undefined" === typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) return !1;
		      var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
		      if (hook.isDisabled) return !0;
		      if (!hook.supportsFiber)
		        return (
		          console.error(
		            "The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://react.dev/link/react-devtools"
		          ),
		          !0
		        );
		      try {
		        (rendererID = hook.inject(internals)), (injectedHook = hook);
		      } catch (err) {
		        console.error("React instrumentation encountered an error: %s.", err);
		      }
		      return hook.checkDCE ? !0 : !1;
		    }
		    function onCommitRoot$1(root, eventPriority) {
		      if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot)
		        try {
		          var didError = 128 === (root.current.flags & 128);
		          switch (eventPriority) {
		            case 2:
		              var schedulerPriority = ImmediatePriority;
		              break;
		            case 8:
		              schedulerPriority = UserBlockingPriority;
		              break;
		            case 32:
		              schedulerPriority = NormalPriority$1;
		              break;
		            case 268435456:
		              schedulerPriority = IdlePriority;
		              break;
		            default:
		              schedulerPriority = NormalPriority$1;
		          }
		          injectedHook.onCommitFiberRoot(
		            rendererID,
		            root,
		            schedulerPriority,
		            didError
		          );
		        } catch (err) {
		          hasLoggedError ||
		            ((hasLoggedError = !0),
		            console.error(
		              "React instrumentation encountered an error: %s",
		              err
		            ));
		        }
		    }
		    function setIsStrictModeForDevtools(newIsStrictMode) {
		      "function" === typeof log &&
		        unstable_setDisableYieldValue(newIsStrictMode);
		      if (injectedHook && "function" === typeof injectedHook.setStrictMode)
		        try {
		          injectedHook.setStrictMode(rendererID, newIsStrictMode);
		        } catch (err) {
		          hasLoggedError ||
		            ((hasLoggedError = !0),
		            console.error(
		              "React instrumentation encountered an error: %s",
		              err
		            ));
		        }
		    }
		    function injectProfilingHooks(profilingHooks) {
		      injectedProfilingHooks = profilingHooks;
		    }
		    function markCommitStopped() {
		      null !== injectedProfilingHooks &&
		        "function" === typeof injectedProfilingHooks.markCommitStopped &&
		        injectedProfilingHooks.markCommitStopped();
		    }
		    function markComponentRenderStarted(fiber) {
		      null !== injectedProfilingHooks &&
		        "function" ===
		          typeof injectedProfilingHooks.markComponentRenderStarted &&
		        injectedProfilingHooks.markComponentRenderStarted(fiber);
		    }
		    function markComponentRenderStopped() {
		      null !== injectedProfilingHooks &&
		        "function" ===
		          typeof injectedProfilingHooks.markComponentRenderStopped &&
		        injectedProfilingHooks.markComponentRenderStopped();
		    }
		    function markRenderStarted(lanes) {
		      null !== injectedProfilingHooks &&
		        "function" === typeof injectedProfilingHooks.markRenderStarted &&
		        injectedProfilingHooks.markRenderStarted(lanes);
		    }
		    function markRenderStopped() {
		      null !== injectedProfilingHooks &&
		        "function" === typeof injectedProfilingHooks.markRenderStopped &&
		        injectedProfilingHooks.markRenderStopped();
		    }
		    function markStateUpdateScheduled(fiber, lane) {
		      null !== injectedProfilingHooks &&
		        "function" === typeof injectedProfilingHooks.markStateUpdateScheduled &&
		        injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
		    }
		    function is(x, y) {
		      return (x === y && (0 !== x || 1 / x === 1 / y)) || (x !== x && y !== y);
		    }
		    function createCapturedValueAtFiber(value, source) {
		      if ("object" === typeof value && null !== value) {
		        var existing = CapturedStacks.get(value);
		        if (void 0 !== existing) return existing;
		        source = {
		          value: value,
		          source: source,
		          stack: getStackByFiberInDevAndProd(source)
		        };
		        CapturedStacks.set(value, source);
		        return source;
		      }
		      return {
		        value: value,
		        source: source,
		        stack: getStackByFiberInDevAndProd(source)
		      };
		    }
		    function pushTreeFork(workInProgress, totalChildren) {
		      warnIfNotHydrating();
		      forkStack[forkStackIndex++] = treeForkCount;
		      forkStack[forkStackIndex++] = treeForkProvider;
		      treeForkProvider = workInProgress;
		      treeForkCount = totalChildren;
		    }
		    function pushTreeId(workInProgress, totalChildren, index) {
		      warnIfNotHydrating();
		      idStack[idStackIndex++] = treeContextId;
		      idStack[idStackIndex++] = treeContextOverflow;
		      idStack[idStackIndex++] = treeContextProvider;
		      treeContextProvider = workInProgress;
		      var baseIdWithLeadingBit = treeContextId;
		      workInProgress = treeContextOverflow;
		      var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
		      baseIdWithLeadingBit &= ~(1 << baseLength);
		      index += 1;
		      var length = 32 - clz32(totalChildren) + baseLength;
		      if (30 < length) {
		        var numberOfOverflowBits = baseLength - (baseLength % 5);
		        length = (
		          baseIdWithLeadingBit &
		          ((1 << numberOfOverflowBits) - 1)
		        ).toString(32);
		        baseIdWithLeadingBit >>= numberOfOverflowBits;
		        baseLength -= numberOfOverflowBits;
		        treeContextId =
		          (1 << (32 - clz32(totalChildren) + baseLength)) |
		          (index << baseLength) |
		          baseIdWithLeadingBit;
		        treeContextOverflow = length + workInProgress;
		      } else
		        (treeContextId =
		          (1 << length) | (index << baseLength) | baseIdWithLeadingBit),
		          (treeContextOverflow = workInProgress);
		    }
		    function pushMaterializedTreeId(workInProgress) {
		      warnIfNotHydrating();
		      null !== workInProgress.return &&
		        (pushTreeFork(workInProgress, 1), pushTreeId(workInProgress, 1, 0));
		    }
		    function popTreeContext(workInProgress) {
		      for (; workInProgress === treeForkProvider; )
		        (treeForkProvider = forkStack[--forkStackIndex]),
		          (forkStack[forkStackIndex] = null),
		          (treeForkCount = forkStack[--forkStackIndex]),
		          (forkStack[forkStackIndex] = null);
		      for (; workInProgress === treeContextProvider; )
		        (treeContextProvider = idStack[--idStackIndex]),
		          (idStack[idStackIndex] = null),
		          (treeContextOverflow = idStack[--idStackIndex]),
		          (idStack[idStackIndex] = null),
		          (treeContextId = idStack[--idStackIndex]),
		          (idStack[idStackIndex] = null);
		    }
		    function warnIfNotHydrating() {
		      isHydrating ||
		        console.error(
		          "Expected to be hydrating. This is a bug in React. Please file an issue."
		        );
		    }
		    function requiredContext(c) {
		      null === c &&
		        console.error(
		          "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue."
		        );
		      return c;
		    }
		    function pushHostContainer(fiber, nextRootInstance) {
		      push(rootInstanceStackCursor, nextRootInstance, fiber);
		      push(contextFiberStackCursor, fiber, fiber);
		      push(contextStackCursor, null, fiber);
		      nextRootInstance = getRootHostContext(nextRootInstance);
		      pop(contextStackCursor, fiber);
		      push(contextStackCursor, nextRootInstance, fiber);
		    }
		    function popHostContainer(fiber) {
		      pop(contextStackCursor, fiber);
		      pop(contextFiberStackCursor, fiber);
		      pop(rootInstanceStackCursor, fiber);
		    }
		    function getHostContext() {
		      return requiredContext(contextStackCursor.current);
		    }
		    function pushHostContext(fiber) {
		      null !== fiber.memoizedState &&
		        push(hostTransitionProviderCursor, fiber, fiber);
		      var context = requiredContext(contextStackCursor.current),
		        nextContext = getChildHostContext(context, fiber.type);
		      context !== nextContext &&
		        (push(contextFiberStackCursor, fiber, fiber),
		        push(contextStackCursor, nextContext, fiber));
		    }
		    function popHostContext(fiber) {
		      contextFiberStackCursor.current === fiber &&
		        (pop(contextStackCursor, fiber), pop(contextFiberStackCursor, fiber));
		      hostTransitionProviderCursor.current === fiber &&
		        (pop(hostTransitionProviderCursor, fiber),
		        isPrimaryRenderer
		          ? (HostTransitionContext._currentValue = NotPendingTransition)
		          : (HostTransitionContext._currentValue2 = NotPendingTransition));
		    }
		    function findNotableNode(node, indent) {
		      return void 0 === node.serverProps &&
		        0 === node.serverTail.length &&
		        1 === node.children.length &&
		        3 < node.distanceFromLeaf &&
		        node.distanceFromLeaf > 15 - indent
		        ? findNotableNode(node.children[0], indent)
		        : node;
		    }
		    function indentation(indent) {
		      return "  " + "  ".repeat(indent);
		    }
		    function added(indent) {
		      return "+ " + "  ".repeat(indent);
		    }
		    function removed(indent) {
		      return "- " + "  ".repeat(indent);
		    }
		    function describeFiberType(fiber) {
		      switch (fiber.tag) {
		        case 26:
		        case 27:
		        case 5:
		          return fiber.type;
		        case 16:
		          return "Lazy";
		        case 13:
		          return "Suspense";
		        case 19:
		          return "SuspenseList";
		        case 0:
		        case 15:
		          return (fiber = fiber.type), fiber.displayName || fiber.name || null;
		        case 11:
		          return (
		            (fiber = fiber.type.render), fiber.displayName || fiber.name || null
		          );
		        case 1:
		          return (fiber = fiber.type), fiber.displayName || fiber.name || null;
		        default:
		          return null;
		      }
		    }
		    function describeTextNode(content, maxLength) {
		      return needsEscaping.test(content)
		        ? ((content = JSON.stringify(content)),
		          content.length > maxLength - 2
		            ? 8 > maxLength
		              ? '{"..."}'
		              : "{" + content.slice(0, maxLength - 7) + '..."}'
		            : "{" + content + "}")
		        : content.length > maxLength
		          ? 5 > maxLength
		            ? '{"..."}'
		            : content.slice(0, maxLength - 3) + "..."
		          : content;
		    }
		    function describeTextDiff(clientText, serverProps, indent) {
		      var maxLength = 120 - 2 * indent;
		      if (null === serverProps)
		        return added(indent) + describeTextNode(clientText, maxLength) + "\n";
		      if ("string" === typeof serverProps) {
		        for (
		          var firstDiff = 0;
		          firstDiff < serverProps.length &&
		          firstDiff < clientText.length &&
		          serverProps.charCodeAt(firstDiff) ===
		            clientText.charCodeAt(firstDiff);
		          firstDiff++
		        );
		        firstDiff > maxLength - 8 &&
		          10 < firstDiff &&
		          ((clientText = "..." + clientText.slice(firstDiff - 8)),
		          (serverProps = "..." + serverProps.slice(firstDiff - 8)));
		        return (
		          added(indent) +
		          describeTextNode(clientText, maxLength) +
		          "\n" +
		          removed(indent) +
		          describeTextNode(serverProps, maxLength) +
		          "\n"
		        );
		      }
		      return (
		        indentation(indent) + describeTextNode(clientText, maxLength) + "\n"
		      );
		    }
		    function objectName(object) {
		      return Object.prototype.toString
		        .call(object)
		        .replace(/^\[object (.*)\]$/, function (m, p0) {
		          return p0;
		        });
		    }
		    function describeValue(value, maxLength) {
		      switch (typeof value) {
		        case "string":
		          return (
		            (value = JSON.stringify(value)),
		            value.length > maxLength
		              ? 5 > maxLength
		                ? '"..."'
		                : value.slice(0, maxLength - 4) + '..."'
		              : value
		          );
		        case "object":
		          if (null === value) return "null";
		          if (isArrayImpl(value)) return "[...]";
		          if (value.$$typeof === REACT_ELEMENT_TYPE)
		            return (maxLength = getComponentNameFromType(value.type))
		              ? "<" + maxLength + ">"
		              : "<...>";
		          var name = objectName(value);
		          if ("Object" === name) {
		            name = "";
		            maxLength -= 2;
		            for (var propName in value)
		              if (value.hasOwnProperty(propName)) {
		                var jsonPropName = JSON.stringify(propName);
		                jsonPropName !== '"' + propName + '"' &&
		                  (propName = jsonPropName);
		                maxLength -= propName.length - 2;
		                jsonPropName = describeValue(
		                  value[propName],
		                  15 > maxLength ? maxLength : 15
		                );
		                maxLength -= jsonPropName.length;
		                if (0 > maxLength) {
		                  name += "" === name ? "..." : ", ...";
		                  break;
		                }
		                name +=
		                  ("" === name ? "" : ",") + propName + ":" + jsonPropName;
		              }
		            return "{" + name + "}";
		          }
		          return name;
		        case "function":
		          return (maxLength = value.displayName || value.name)
		            ? "function " + maxLength
		            : "function";
		        default:
		          return String(value);
		      }
		    }
		    function describePropValue(value, maxLength) {
		      return "string" !== typeof value || needsEscaping.test(value)
		        ? "{" + describeValue(value, maxLength - 2) + "}"
		        : value.length > maxLength - 2
		          ? 5 > maxLength
		            ? '"..."'
		            : '"' + value.slice(0, maxLength - 5) + '..."'
		          : '"' + value + '"';
		    }
		    function describeExpandedElement(type, props, rowPrefix) {
		      var remainingRowLength = 120 - rowPrefix.length - type.length,
		        properties = [],
		        propName;
		      for (propName in props)
		        if (props.hasOwnProperty(propName) && "children" !== propName) {
		          var propValue = describePropValue(
		            props[propName],
		            120 - rowPrefix.length - propName.length - 1
		          );
		          remainingRowLength -= propName.length + propValue.length + 2;
		          properties.push(propName + "=" + propValue);
		        }
		      return 0 === properties.length
		        ? rowPrefix + "<" + type + ">\n"
		        : 0 < remainingRowLength
		          ? rowPrefix + "<" + type + " " + properties.join(" ") + ">\n"
		          : rowPrefix +
		            "<" +
		            type +
		            "\n" +
		            rowPrefix +
		            "  " +
		            properties.join("\n" + rowPrefix + "  ") +
		            "\n" +
		            rowPrefix +
		            ">\n";
		    }
		    function describePropertiesDiff(clientObject, serverObject, indent) {
		      var properties = "",
		        remainingServerProperties = assign({}, serverObject),
		        propName;
		      for (propName in clientObject)
		        if (clientObject.hasOwnProperty(propName)) {
		          delete remainingServerProperties[propName];
		          var maxLength = 120 - 2 * indent - propName.length - 2,
		            clientPropValue = describeValue(clientObject[propName], maxLength);
		          serverObject.hasOwnProperty(propName)
		            ? ((maxLength = describeValue(serverObject[propName], maxLength)),
		              (properties +=
		                added(indent) + propName + ": " + clientPropValue + "\n"),
		              (properties +=
		                removed(indent) + propName + ": " + maxLength + "\n"))
		            : (properties +=
		                added(indent) + propName + ": " + clientPropValue + "\n");
		        }
		      for (var _propName in remainingServerProperties)
		        remainingServerProperties.hasOwnProperty(_propName) &&
		          ((clientObject = describeValue(
		            remainingServerProperties[_propName],
		            120 - 2 * indent - _propName.length - 2
		          )),
		          (properties +=
		            removed(indent) + _propName + ": " + clientObject + "\n"));
		      return properties;
		    }
		    function describeElementDiff(type, clientProps, serverProps, indent) {
		      var content = "",
		        serverPropNames = new Map();
		      for (propName$jscomp$0 in serverProps)
		        serverProps.hasOwnProperty(propName$jscomp$0) &&
		          serverPropNames.set(
		            propName$jscomp$0.toLowerCase(),
		            propName$jscomp$0
		          );
		      if (1 === serverPropNames.size && serverPropNames.has("children"))
		        content += describeExpandedElement(
		          type,
		          clientProps,
		          indentation(indent)
		        );
		      else {
		        for (var _propName2 in clientProps)
		          if (
		            clientProps.hasOwnProperty(_propName2) &&
		            "children" !== _propName2
		          ) {
		            var maxLength$jscomp$0 =
		                120 - 2 * (indent + 1) - _propName2.length - 1,
		              serverPropName = serverPropNames.get(_propName2.toLowerCase());
		            if (void 0 !== serverPropName) {
		              serverPropNames.delete(_propName2.toLowerCase());
		              var propName$jscomp$0 = clientProps[_propName2];
		              serverPropName = serverProps[serverPropName];
		              var clientPropValue = describePropValue(
		                propName$jscomp$0,
		                maxLength$jscomp$0
		              );
		              maxLength$jscomp$0 = describePropValue(
		                serverPropName,
		                maxLength$jscomp$0
		              );
		              "object" === typeof propName$jscomp$0 &&
		              null !== propName$jscomp$0 &&
		              "object" === typeof serverPropName &&
		              null !== serverPropName &&
		              "Object" === objectName(propName$jscomp$0) &&
		              "Object" === objectName(serverPropName) &&
		              (2 < Object.keys(propName$jscomp$0).length ||
		                2 < Object.keys(serverPropName).length ||
		                -1 < clientPropValue.indexOf("...") ||
		                -1 < maxLength$jscomp$0.indexOf("..."))
		                ? (content +=
		                    indentation(indent + 1) +
		                    _propName2 +
		                    "={{\n" +
		                    describePropertiesDiff(
		                      propName$jscomp$0,
		                      serverPropName,
		                      indent + 2
		                    ) +
		                    indentation(indent + 1) +
		                    "}}\n")
		                : ((content +=
		                    added(indent + 1) +
		                    _propName2 +
		                    "=" +
		                    clientPropValue +
		                    "\n"),
		                  (content +=
		                    removed(indent + 1) +
		                    _propName2 +
		                    "=" +
		                    maxLength$jscomp$0 +
		                    "\n"));
		            } else
		              content +=
		                indentation(indent + 1) +
		                _propName2 +
		                "=" +
		                describePropValue(clientProps[_propName2], maxLength$jscomp$0) +
		                "\n";
		          }
		        serverPropNames.forEach(function (propName) {
		          if ("children" !== propName) {
		            var maxLength = 120 - 2 * (indent + 1) - propName.length - 1;
		            content +=
		              removed(indent + 1) +
		              propName +
		              "=" +
		              describePropValue(serverProps[propName], maxLength) +
		              "\n";
		          }
		        });
		        content =
		          "" === content
		            ? indentation(indent) + "<" + type + ">\n"
		            : indentation(indent) +
		              "<" +
		              type +
		              "\n" +
		              content +
		              indentation(indent) +
		              ">\n";
		      }
		      type = serverProps.children;
		      clientProps = clientProps.children;
		      if (
		        "string" === typeof type ||
		        "number" === typeof type ||
		        "bigint" === typeof type
		      ) {
		        serverPropNames = "";
		        if (
		          "string" === typeof clientProps ||
		          "number" === typeof clientProps ||
		          "bigint" === typeof clientProps
		        )
		          serverPropNames = "" + clientProps;
		        content += describeTextDiff(serverPropNames, "" + type, indent + 1);
		      } else if (
		        "string" === typeof clientProps ||
		        "number" === typeof clientProps ||
		        "bigint" === typeof clientProps
		      )
		        content =
		          null == type
		            ? content + describeTextDiff("" + clientProps, null, indent + 1)
		            : content + describeTextDiff("" + clientProps, void 0, indent + 1);
		      return content;
		    }
		    function describeSiblingFiber(fiber, indent) {
		      var type = describeFiberType(fiber);
		      if (null === type) {
		        type = "";
		        for (fiber = fiber.child; fiber; )
		          (type += describeSiblingFiber(fiber, indent)),
		            (fiber = fiber.sibling);
		        return type;
		      }
		      return indentation(indent) + "<" + type + ">\n";
		    }
		    function describeNode(node, indent) {
		      var skipToNode = findNotableNode(node, indent);
		      if (
		        skipToNode !== node &&
		        (1 !== node.children.length || node.children[0] !== skipToNode)
		      )
		        return (
		          indentation(indent) + "...\n" + describeNode(skipToNode, indent + 1)
		        );
		      skipToNode = "";
		      var debugInfo = node.fiber._debugInfo;
		      if (debugInfo)
		        for (var i = 0; i < debugInfo.length; i++) {
		          var serverComponentName = debugInfo[i].name;
		          "string" === typeof serverComponentName &&
		            ((skipToNode +=
		              indentation(indent) + "<" + serverComponentName + ">\n"),
		            indent++);
		        }
		      debugInfo = "";
		      i = node.fiber.pendingProps;
		      if (6 === node.fiber.tag)
		        (debugInfo = describeTextDiff(i, node.serverProps, indent)), indent++;
		      else if (
		        ((serverComponentName = describeFiberType(node.fiber)),
		        null !== serverComponentName)
		      )
		        if (void 0 === node.serverProps) {
		          debugInfo = indent;
		          var maxLength = 120 - 2 * debugInfo - serverComponentName.length - 2,
		            content = "";
		          for (propName in i)
		            if (i.hasOwnProperty(propName) && "children" !== propName) {
		              var propValue = describePropValue(i[propName], 15);
		              maxLength -= propName.length + propValue.length + 2;
		              if (0 > maxLength) {
		                content += " ...";
		                break;
		              }
		              content += " " + propName + "=" + propValue;
		            }
		          debugInfo =
		            indentation(debugInfo) +
		            "<" +
		            serverComponentName +
		            content +
		            ">\n";
		          indent++;
		        } else
		          null === node.serverProps
		            ? ((debugInfo = describeExpandedElement(
		                serverComponentName,
		                i,
		                added(indent)
		              )),
		              indent++)
		            : "string" === typeof node.serverProps
		              ? console.error(
		                  "Should not have matched a non HostText fiber to a Text node. This is a bug in React."
		                )
		              : ((debugInfo = describeElementDiff(
		                  serverComponentName,
		                  i,
		                  node.serverProps,
		                  indent
		                )),
		                indent++);
		      var propName = "";
		      i = node.fiber.child;
		      for (
		        serverComponentName = 0;
		        i && serverComponentName < node.children.length;

		      )
		        (maxLength = node.children[serverComponentName]),
		          maxLength.fiber === i
		            ? ((propName += describeNode(maxLength, indent)),
		              serverComponentName++)
		            : (propName += describeSiblingFiber(i, indent)),
		          (i = i.sibling);
		      i &&
		        0 < node.children.length &&
		        (propName += indentation(indent) + "...\n");
		      i = node.serverTail;
		      null === node.serverProps && indent--;
		      for (node = 0; node < i.length; node++)
		        (serverComponentName = i[node]),
		          (propName =
		            "string" === typeof serverComponentName
		              ? propName +
		                (removed(indent) +
		                  describeTextNode(serverComponentName, 120 - 2 * indent) +
		                  "\n")
		              : propName +
		                describeExpandedElement(
		                  serverComponentName.type,
		                  serverComponentName.props,
		                  removed(indent)
		                ));
		      return skipToNode + debugInfo + propName;
		    }
		    function describeDiff(rootNode) {
		      try {
		        return "\n\n" + describeNode(rootNode, 0);
		      } catch (x) {
		        return "";
		      }
		    }
		    function buildHydrationDiffNode(fiber, distanceFromLeaf) {
		      if (null === fiber.return) {
		        if (null === hydrationDiffRootDEV)
		          hydrationDiffRootDEV = {
		            fiber: fiber,
		            children: [],
		            serverProps: void 0,
		            serverTail: [],
		            distanceFromLeaf: distanceFromLeaf
		          };
		        else {
		          if (hydrationDiffRootDEV.fiber !== fiber)
		            throw Error(
		              "Saw multiple hydration diff roots in a pass. This is a bug in React."
		            );
		          hydrationDiffRootDEV.distanceFromLeaf > distanceFromLeaf &&
		            (hydrationDiffRootDEV.distanceFromLeaf = distanceFromLeaf);
		        }
		        return hydrationDiffRootDEV;
		      }
		      var siblings = buildHydrationDiffNode(
		        fiber.return,
		        distanceFromLeaf + 1
		      ).children;
		      if (0 < siblings.length && siblings[siblings.length - 1].fiber === fiber)
		        return (
		          (siblings = siblings[siblings.length - 1]),
		          siblings.distanceFromLeaf > distanceFromLeaf &&
		            (siblings.distanceFromLeaf = distanceFromLeaf),
		          siblings
		        );
		      distanceFromLeaf = {
		        fiber: fiber,
		        children: [],
		        serverProps: void 0,
		        serverTail: [],
		        distanceFromLeaf: distanceFromLeaf
		      };
		      siblings.push(distanceFromLeaf);
		      return distanceFromLeaf;
		    }
		    function warnNonHydratedInstance(fiber, rejectedCandidate) {
		      didSuspendOrErrorDEV ||
		        ((fiber = buildHydrationDiffNode(fiber, 0)),
		        (fiber.serverProps = null),
		        null !== rejectedCandidate &&
		          ((rejectedCandidate =
		            describeHydratableInstanceForDevWarnings(rejectedCandidate)),
		          fiber.serverTail.push(rejectedCandidate)));
		    }
		    function throwOnHydrationMismatch(fiber) {
		      var diff = "",
		        diffRoot = hydrationDiffRootDEV;
		      null !== diffRoot &&
		        ((hydrationDiffRootDEV = null), (diff = describeDiff(diffRoot)));
		      queueHydrationError(
		        createCapturedValueAtFiber(
		          Error(
		            "Hydration failed because the server rendered HTML didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\nhttps://react.dev/link/hydration-mismatch" +
		              diff
		          ),
		          fiber
		        )
		      );
		      throw HydrationMismatchException;
		    }
		    function prepareToHydrateHostInstance(fiber, hostContext) {
		      if (!supportsHydration)
		        throw Error(
		          "Expected prepareToHydrateHostInstance() to never be called. This error is likely caused by a bug in React. Please file an issue."
		        );
		      hydrateInstance(
		        fiber.stateNode,
		        fiber.type,
		        fiber.memoizedProps,
		        hostContext,
		        fiber
		      ) || throwOnHydrationMismatch(fiber);
		    }
		    function popToNextHostParent(fiber) {
		      for (hydrationParentFiber = fiber.return; hydrationParentFiber; )
		        switch (hydrationParentFiber.tag) {
		          case 3:
		          case 27:
		            rootOrSingletonContext = !0;
		            return;
		          case 5:
		          case 13:
		            rootOrSingletonContext = !1;
		            return;
		          default:
		            hydrationParentFiber = hydrationParentFiber.return;
		        }
		    }
		    function popHydrationState(fiber) {
		      if (!supportsHydration || fiber !== hydrationParentFiber) return !1;
		      if (!isHydrating)
		        return popToNextHostParent(fiber), (isHydrating = !0), !1;
		      var shouldClear = !1;
		      supportsSingletons
		        ? 3 !== fiber.tag &&
		          27 !== fiber.tag &&
		          (5 !== fiber.tag ||
		            (shouldDeleteUnhydratedTailInstances(fiber.type) &&
		              !shouldSetTextContent(fiber.type, fiber.memoizedProps))) &&
		          (shouldClear = !0)
		        : 3 !== fiber.tag &&
		          (5 !== fiber.tag ||
		            (shouldDeleteUnhydratedTailInstances(fiber.type) &&
		              !shouldSetTextContent(fiber.type, fiber.memoizedProps))) &&
		          (shouldClear = !0);
		      if (shouldClear && nextHydratableInstance) {
		        for (shouldClear = nextHydratableInstance; shouldClear; ) {
		          var diffNode = buildHydrationDiffNode(fiber, 0),
		            description = describeHydratableInstanceForDevWarnings(shouldClear);
		          diffNode.serverTail.push(description);
		          shouldClear =
		            "Suspense" === description.type
		              ? getNextHydratableInstanceAfterSuspenseInstance(shouldClear)
		              : getNextHydratableSibling(shouldClear);
		        }
		        throwOnHydrationMismatch(fiber);
		      }
		      popToNextHostParent(fiber);
		      if (13 === fiber.tag) {
		        if (!supportsHydration)
		          throw Error(
		            "Expected skipPastDehydratedSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue."
		          );
		        fiber = fiber.memoizedState;
		        fiber = null !== fiber ? fiber.dehydrated : null;
		        if (!fiber)
		          throw Error(
		            "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."
		          );
		        nextHydratableInstance =
		          getNextHydratableInstanceAfterSuspenseInstance(fiber);
		      } else
		        nextHydratableInstance = hydrationParentFiber
		          ? getNextHydratableSibling(fiber.stateNode)
		          : null;
		      return !0;
		    }
		    function resetHydrationState() {
		      supportsHydration &&
		        ((nextHydratableInstance = hydrationParentFiber = null),
		        (didSuspendOrErrorDEV = isHydrating = !1));
		    }
		    function queueHydrationError(error) {
		      null === hydrationErrors
		        ? (hydrationErrors = [error])
		        : hydrationErrors.push(error);
		    }
		    function emitPendingHydrationWarnings() {
		      var diffRoot = hydrationDiffRootDEV;
		      null !== diffRoot &&
		        ((hydrationDiffRootDEV = null),
		        (diffRoot = describeDiff(diffRoot)),
		        console.error(
		          "A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. This can happen if a SSR-ed Client Component used:\n\n- A server/client branch `if (typeof window !== 'undefined')`.\n- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n- Date formatting in a user's locale which doesn't match the server.\n- External changing data without sending a snapshot of it along with the HTML.\n- Invalid HTML tag nesting.\n\nIt can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n\n%s%s",
		          "https://react.dev/link/hydration-mismatch",
		          diffRoot
		        ));
		    }
		    function finishQueueingConcurrentUpdates() {
		      for (
		        var endIndex = concurrentQueuesIndex,
		          i = (concurrentlyUpdatedLanes = concurrentQueuesIndex = 0);
		        i < endIndex;

		      ) {
		        var fiber = concurrentQueues[i];
		        concurrentQueues[i++] = null;
		        var queue = concurrentQueues[i];
		        concurrentQueues[i++] = null;
		        var update = concurrentQueues[i];
		        concurrentQueues[i++] = null;
		        var lane = concurrentQueues[i];
		        concurrentQueues[i++] = null;
		        if (null !== queue && null !== update) {
		          var pending = queue.pending;
		          null === pending
		            ? (update.next = update)
		            : ((update.next = pending.next), (pending.next = update));
		          queue.pending = update;
		        }
		        0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
		      }
		    }
		    function enqueueUpdate$1(fiber, queue, update, lane) {
		      concurrentQueues[concurrentQueuesIndex++] = fiber;
		      concurrentQueues[concurrentQueuesIndex++] = queue;
		      concurrentQueues[concurrentQueuesIndex++] = update;
		      concurrentQueues[concurrentQueuesIndex++] = lane;
		      concurrentlyUpdatedLanes |= lane;
		      fiber.lanes |= lane;
		      fiber = fiber.alternate;
		      null !== fiber && (fiber.lanes |= lane);
		    }
		    function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
		      enqueueUpdate$1(fiber, queue, update, lane);
		      return getRootForUpdatedFiber(fiber);
		    }
		    function enqueueConcurrentRenderForLane(fiber, lane) {
		      enqueueUpdate$1(fiber, null, null, lane);
		      return getRootForUpdatedFiber(fiber);
		    }
		    function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
		      sourceFiber.lanes |= lane;
		      var alternate = sourceFiber.alternate;
		      null !== alternate && (alternate.lanes |= lane);
		      for (var isHidden = !1, parent = sourceFiber.return; null !== parent; )
		        (parent.childLanes |= lane),
		          (alternate = parent.alternate),
		          null !== alternate && (alternate.childLanes |= lane),
		          22 === parent.tag &&
		            ((sourceFiber = parent.stateNode),
		            null === sourceFiber ||
		              sourceFiber._visibility & 1 ||
		              (isHidden = !0)),
		          (sourceFiber = parent),
		          (parent = parent.return);
		      isHidden &&
		        null !== update &&
		        3 === sourceFiber.tag &&
		        ((parent = sourceFiber.stateNode),
		        (isHidden = 31 - clz32(lane)),
		        (parent = parent.hiddenUpdates),
		        (sourceFiber = parent[isHidden]),
		        null === sourceFiber
		          ? (parent[isHidden] = [update])
		          : sourceFiber.push(update),
		        (update.lane = lane | 536870912));
		    }
		    function getRootForUpdatedFiber(sourceFiber) {
		      if (nestedUpdateCount > NESTED_UPDATE_LIMIT)
		        throw (
		          ((nestedPassiveUpdateCount = nestedUpdateCount = 0),
		          (rootWithPassiveNestedUpdates = rootWithNestedUpdates = null),
		          Error(
		            "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops."
		          ))
		        );
		      nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT &&
		        ((nestedPassiveUpdateCount = 0),
		        (rootWithPassiveNestedUpdates = null),
		        console.error(
		          "Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render."
		        ));
		      null === sourceFiber.alternate &&
		        0 !== (sourceFiber.flags & 4098) &&
		        warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
		      for (var node = sourceFiber, parent = node.return; null !== parent; )
		        null === node.alternate &&
		          0 !== (node.flags & 4098) &&
		          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber),
		          (node = parent),
		          (parent = node.return);
		      return 3 === node.tag ? node.stateNode : null;
		    }
		    function pushNestedEffectDurations() {
		      var prevEffectDuration = profilerEffectDuration;
		      profilerEffectDuration = 0;
		      return prevEffectDuration;
		    }
		    function popNestedEffectDurations(prevEffectDuration) {
		      var elapsedTime = profilerEffectDuration;
		      profilerEffectDuration = prevEffectDuration;
		      return elapsedTime;
		    }
		    function bubbleNestedEffectDurations(prevEffectDuration) {
		      var elapsedTime = profilerEffectDuration;
		      profilerEffectDuration += prevEffectDuration;
		      return elapsedTime;
		    }
		    function startProfilerTimer(fiber) {
		      profilerStartTime = now();
		      0 > fiber.actualStartTime && (fiber.actualStartTime = profilerStartTime);
		    }
		    function stopProfilerTimerIfRunningAndRecordDuration(fiber) {
		      if (0 <= profilerStartTime) {
		        var elapsedTime = now() - profilerStartTime;
		        fiber.actualDuration += elapsedTime;
		        fiber.selfBaseDuration = elapsedTime;
		        profilerStartTime = -1;
		      }
		    }
		    function stopProfilerTimerIfRunningAndRecordIncompleteDuration(fiber) {
		      if (0 <= profilerStartTime) {
		        var elapsedTime = now() - profilerStartTime;
		        fiber.actualDuration += elapsedTime;
		        profilerStartTime = -1;
		      }
		    }
		    function recordEffectDuration() {
		      if (0 <= profilerStartTime) {
		        var elapsedTime = now() - profilerStartTime;
		        profilerStartTime = -1;
		        profilerEffectDuration += elapsedTime;
		      }
		    }
		    function startEffectTimer() {
		      profilerStartTime = now();
		    }
		    function transferActualDuration(fiber) {
		      for (var child = fiber.child; child; )
		        (fiber.actualDuration += child.actualDuration), (child = child.sibling);
		    }
		    function ensureRootIsScheduled(root) {
		      root !== lastScheduledRoot &&
		        null === root.next &&
		        (null === lastScheduledRoot
		          ? (firstScheduledRoot = lastScheduledRoot = root)
		          : (lastScheduledRoot = lastScheduledRoot.next = root));
		      mightHavePendingSyncWork = !0;
		      null !== ReactSharedInternals.actQueue
		        ? didScheduleMicrotask_act ||
		          ((didScheduleMicrotask_act = !0),
		          scheduleImmediateTask(processRootScheduleInMicrotask))
		        : didScheduleMicrotask ||
		          ((didScheduleMicrotask = !0),
		          scheduleImmediateTask(processRootScheduleInMicrotask));
		    }
		    function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
		      if (!isFlushingWork && mightHavePendingSyncWork) {
		        isFlushingWork = !0;
		        do {
		          var didPerformSomeWork = !1;
		          for (var root = firstScheduledRoot; null !== root; ) {
		            if (!onlyLegacy)
		              if (0 !== syncTransitionLanes) {
		                var pendingLanes = root.pendingLanes;
		                if (0 === pendingLanes) var nextLanes = 0;
		                else {
		                  var suspendedLanes = root.suspendedLanes,
		                    pingedLanes = root.pingedLanes;
		                  nextLanes =
		                    (1 << (31 - clz32(42 | syncTransitionLanes) + 1)) - 1;
		                  nextLanes &= pendingLanes & ~(suspendedLanes & ~pingedLanes);
		                  nextLanes =
		                    nextLanes & 201326677
		                      ? (nextLanes & 201326677) | 1
		                      : nextLanes
		                        ? nextLanes | 2
		                        : 0;
		                }
		                0 !== nextLanes &&
		                  ((didPerformSomeWork = !0),
		                  performSyncWorkOnRoot(root, nextLanes));
		              } else
		                (nextLanes = workInProgressRootRenderLanes),
		                  (nextLanes = getNextLanes(
		                    root,
		                    root === workInProgressRoot ? nextLanes : 0
		                  )),
		                  0 === (nextLanes & 3) ||
		                    checkIfRootIsPrerendering(root, nextLanes) ||
		                    ((didPerformSomeWork = !0),
		                    performSyncWorkOnRoot(root, nextLanes));
		            root = root.next;
		          }
		        } while (didPerformSomeWork);
		        isFlushingWork = !1;
		      }
		    }
		    function processRootScheduleInMicrotask() {
		      mightHavePendingSyncWork =
		        didScheduleMicrotask_act =
		        didScheduleMicrotask =
		          !1;
		      var syncTransitionLanes = 0;
		      0 !== currentEventTransitionLane &&
		        (shouldAttemptEagerTransition() &&
		          (syncTransitionLanes = currentEventTransitionLane),
		        (currentEventTransitionLane = 0));
		      for (
		        var currentTime = now$1(), prev = null, root = firstScheduledRoot;
		        null !== root;

		      ) {
		        var next = root.next,
		          nextLanes = scheduleTaskForRootDuringMicrotask(root, currentTime);
		        if (0 === nextLanes)
		          (root.next = null),
		            null === prev ? (firstScheduledRoot = next) : (prev.next = next),
		            null === next && (lastScheduledRoot = prev);
		        else if (
		          ((prev = root), 0 !== syncTransitionLanes || 0 !== (nextLanes & 3))
		        )
		          mightHavePendingSyncWork = !0;
		        root = next;
		      }
		      flushSyncWorkAcrossRoots_impl(syncTransitionLanes, !1);
		    }
		    function scheduleTaskForRootDuringMicrotask(root, currentTime) {
		      for (
		        var suspendedLanes = root.suspendedLanes,
		          pingedLanes = root.pingedLanes,
		          expirationTimes = root.expirationTimes,
		          lanes = root.pendingLanes & -62914561;
		        0 < lanes;

		      ) {
		        var index = 31 - clz32(lanes),
		          lane = 1 << index,
		          expirationTime = expirationTimes[index];
		        if (-1 === expirationTime) {
		          if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes))
		            expirationTimes[index] = computeExpirationTime(lane, currentTime);
		        } else expirationTime <= currentTime && (root.expiredLanes |= lane);
		        lanes &= ~lane;
		      }
		      currentTime = workInProgressRoot;
		      suspendedLanes = workInProgressRootRenderLanes;
		      suspendedLanes = getNextLanes(
		        root,
		        root === currentTime ? suspendedLanes : 0
		      );
		      pingedLanes = root.callbackNode;
		      if (
		        0 === suspendedLanes ||
		        (root === currentTime &&
		          workInProgressSuspendedReason === SuspendedOnData) ||
		        null !== root.cancelPendingCommit
		      )
		        return (
		          null !== pingedLanes && cancelCallback(pingedLanes),
		          (root.callbackNode = null),
		          (root.callbackPriority = 0)
		        );
		      if (
		        0 === (suspendedLanes & 3) ||
		        checkIfRootIsPrerendering(root, suspendedLanes)
		      ) {
		        currentTime = suspendedLanes & -suspendedLanes;
		        if (
		          currentTime !== root.callbackPriority ||
		          (null !== ReactSharedInternals.actQueue &&
		            pingedLanes !== fakeActCallbackNode$1)
		        )
		          cancelCallback(pingedLanes);
		        else return currentTime;
		        switch (lanesToEventPriority(suspendedLanes)) {
		          case 2:
		          case 8:
		            suspendedLanes = UserBlockingPriority;
		            break;
		          case 32:
		            suspendedLanes = NormalPriority$1;
		            break;
		          case 268435456:
		            suspendedLanes = IdlePriority;
		            break;
		          default:
		            suspendedLanes = NormalPriority$1;
		        }
		        pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root);
		        null !== ReactSharedInternals.actQueue
		          ? (ReactSharedInternals.actQueue.push(pingedLanes),
		            (suspendedLanes = fakeActCallbackNode$1))
		          : (suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes));
		        root.callbackPriority = currentTime;
		        root.callbackNode = suspendedLanes;
		        return currentTime;
		      }
		      null !== pingedLanes && cancelCallback(pingedLanes);
		      root.callbackPriority = 2;
		      root.callbackNode = null;
		      return 2;
		    }
		    function performWorkOnRootViaSchedulerTask(root, didTimeout) {
		      nestedUpdateScheduled = currentUpdateIsNested = !1;
		      var originalCallbackNode = root.callbackNode;
		      if (flushPassiveEffects() && root.callbackNode !== originalCallbackNode)
		        return null;
		      var workInProgressRootRenderLanes$jscomp$0 =
		        workInProgressRootRenderLanes;
		      workInProgressRootRenderLanes$jscomp$0 = getNextLanes(
		        root,
		        root === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0
		      );
		      if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
		      performWorkOnRoot(
		        root,
		        workInProgressRootRenderLanes$jscomp$0,
		        didTimeout
		      );
		      scheduleTaskForRootDuringMicrotask(root, now$1());
		      return null != root.callbackNode &&
		        root.callbackNode === originalCallbackNode
		        ? performWorkOnRootViaSchedulerTask.bind(null, root)
		        : null;
		    }
		    function performSyncWorkOnRoot(root, lanes) {
		      if (flushPassiveEffects()) return null;
		      currentUpdateIsNested = nestedUpdateScheduled;
		      nestedUpdateScheduled = !1;
		      performWorkOnRoot(root, lanes, !0);
		    }
		    function cancelCallback(callbackNode) {
		      callbackNode !== fakeActCallbackNode$1 &&
		        null !== callbackNode &&
		        cancelCallback$1(callbackNode);
		    }
		    function scheduleImmediateTask(cb) {
		      null !== ReactSharedInternals.actQueue &&
		        ReactSharedInternals.actQueue.push(function () {
		          cb();
		          return null;
		        });
		      supportsMicrotasks
		        ? scheduleMicrotask(function () {
		            (executionContext & (RenderContext | CommitContext)) !== NoContext
		              ? scheduleCallback$3(ImmediatePriority, cb)
		              : cb();
		          })
		        : scheduleCallback$3(ImmediatePriority, cb);
		    }
		    function requestTransitionLane() {
		      0 === currentEventTransitionLane &&
		        (currentEventTransitionLane = claimNextTransitionLane());
		      return currentEventTransitionLane;
		    }
		    function entangleAsyncAction(transition, thenable) {
		      if (null === currentEntangledListeners) {
		        var entangledListeners = (currentEntangledListeners = []);
		        currentEntangledPendingCount = 0;
		        currentEntangledLane = requestTransitionLane();
		        currentEntangledActionThenable = {
		          status: "pending",
		          value: void 0,
		          then: function (resolve) {
		            entangledListeners.push(resolve);
		          }
		        };
		      }
		      currentEntangledPendingCount++;
		      thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
		      return thenable;
		    }
		    function pingEngtangledActionScope() {
		      if (
		        0 === --currentEntangledPendingCount &&
		        null !== currentEntangledListeners
		      ) {
		        null !== currentEntangledActionThenable &&
		          (currentEntangledActionThenable.status = "fulfilled");
		        var listeners = currentEntangledListeners;
		        currentEntangledListeners = null;
		        currentEntangledLane = 0;
		        currentEntangledActionThenable = null;
		        for (var i = 0; i < listeners.length; i++) (0, listeners[i])();
		      }
		    }
		    function chainThenableValue(thenable, result) {
		      var listeners = [],
		        thenableWithOverride = {
		          status: "pending",
		          value: null,
		          reason: null,
		          then: function (resolve) {
		            listeners.push(resolve);
		          }
		        };
		      thenable.then(
		        function () {
		          thenableWithOverride.status = "fulfilled";
		          thenableWithOverride.value = result;
		          for (var i = 0; i < listeners.length; i++) (0, listeners[i])(result);
		        },
		        function (error) {
		          thenableWithOverride.status = "rejected";
		          thenableWithOverride.reason = error;
		          for (error = 0; error < listeners.length; error++)
		            (0, listeners[error])(void 0);
		        }
		      );
		      return thenableWithOverride;
		    }
		    function initializeUpdateQueue(fiber) {
		      fiber.updateQueue = {
		        baseState: fiber.memoizedState,
		        firstBaseUpdate: null,
		        lastBaseUpdate: null,
		        shared: { pending: null, lanes: 0, hiddenCallbacks: null },
		        callbacks: null
		      };
		    }
		    function cloneUpdateQueue(current, workInProgress) {
		      current = current.updateQueue;
		      workInProgress.updateQueue === current &&
		        (workInProgress.updateQueue = {
		          baseState: current.baseState,
		          firstBaseUpdate: current.firstBaseUpdate,
		          lastBaseUpdate: current.lastBaseUpdate,
		          shared: current.shared,
		          callbacks: null
		        });
		    }
		    function createUpdate(lane) {
		      return {
		        lane: lane,
		        tag: UpdateState,
		        payload: null,
		        callback: null,
		        next: null
		      };
		    }
		    function enqueueUpdate(fiber, update, lane) {
		      var updateQueue = fiber.updateQueue;
		      if (null === updateQueue) return null;
		      updateQueue = updateQueue.shared;
		      if (
		        currentlyProcessingQueue === updateQueue &&
		        !didWarnUpdateInsideUpdate
		      ) {
		        var componentName = getComponentNameFromFiber(fiber);
		        console.error(
		          "An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.\n\nPlease update the following component: %s",
		          componentName
		        );
		        didWarnUpdateInsideUpdate = !0;
		      }
		      if ((executionContext & RenderContext) !== NoContext)
		        return (
		          (componentName = updateQueue.pending),
		          null === componentName
		            ? (update.next = update)
		            : ((update.next = componentName.next),
		              (componentName.next = update)),
		          (updateQueue.pending = update),
		          (update = getRootForUpdatedFiber(fiber)),
		          markUpdateLaneFromFiberToRoot(fiber, null, lane),
		          update
		        );
		      enqueueUpdate$1(fiber, updateQueue, update, lane);
		      return getRootForUpdatedFiber(fiber);
		    }
		    function entangleTransitions(root, fiber, lane) {
		      fiber = fiber.updateQueue;
		      if (null !== fiber && ((fiber = fiber.shared), 0 !== (lane & 4194176))) {
		        var queueLanes = fiber.lanes;
		        queueLanes &= root.pendingLanes;
		        lane |= queueLanes;
		        fiber.lanes = lane;
		        markRootEntangled(root, lane);
		      }
		    }
		    function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
		      var queue = workInProgress.updateQueue,
		        current = workInProgress.alternate;
		      if (
		        null !== current &&
		        ((current = current.updateQueue), queue === current)
		      ) {
		        var newFirst = null,
		          newLast = null;
		        queue = queue.firstBaseUpdate;
		        if (null !== queue) {
		          do {
		            var clone = {
		              lane: queue.lane,
		              tag: queue.tag,
		              payload: queue.payload,
		              callback: null,
		              next: null
		            };
		            null === newLast
		              ? (newFirst = newLast = clone)
		              : (newLast = newLast.next = clone);
		            queue = queue.next;
		          } while (null !== queue);
		          null === newLast
		            ? (newFirst = newLast = capturedUpdate)
		            : (newLast = newLast.next = capturedUpdate);
		        } else newFirst = newLast = capturedUpdate;
		        queue = {
		          baseState: current.baseState,
		          firstBaseUpdate: newFirst,
		          lastBaseUpdate: newLast,
		          shared: current.shared,
		          callbacks: current.callbacks
		        };
		        workInProgress.updateQueue = queue;
		        return;
		      }
		      workInProgress = queue.lastBaseUpdate;
		      null === workInProgress
		        ? (queue.firstBaseUpdate = capturedUpdate)
		        : (workInProgress.next = capturedUpdate);
		      queue.lastBaseUpdate = capturedUpdate;
		    }
		    function suspendIfUpdateReadFromEntangledAsyncAction() {
		      if (didReadFromEntangledAsyncAction) {
		        var entangledActionThenable = currentEntangledActionThenable;
		        if (null !== entangledActionThenable) throw entangledActionThenable;
		      }
		    }
		    function processUpdateQueue(
		      workInProgress,
		      props,
		      instance$jscomp$0,
		      renderLanes
		    ) {
		      didReadFromEntangledAsyncAction = !1;
		      var queue = workInProgress.updateQueue;
		      hasForceUpdate = !1;
		      currentlyProcessingQueue = queue.shared;
		      var firstBaseUpdate = queue.firstBaseUpdate,
		        lastBaseUpdate = queue.lastBaseUpdate,
		        pendingQueue = queue.shared.pending;
		      if (null !== pendingQueue) {
		        queue.shared.pending = null;
		        var lastPendingUpdate = pendingQueue,
		          firstPendingUpdate = lastPendingUpdate.next;
		        lastPendingUpdate.next = null;
		        null === lastBaseUpdate
		          ? (firstBaseUpdate = firstPendingUpdate)
		          : (lastBaseUpdate.next = firstPendingUpdate);
		        lastBaseUpdate = lastPendingUpdate;
		        var current = workInProgress.alternate;
		        null !== current &&
		          ((current = current.updateQueue),
		          (pendingQueue = current.lastBaseUpdate),
		          pendingQueue !== lastBaseUpdate &&
		            (null === pendingQueue
		              ? (current.firstBaseUpdate = firstPendingUpdate)
		              : (pendingQueue.next = firstPendingUpdate),
		            (current.lastBaseUpdate = lastPendingUpdate)));
		      }
		      if (null !== firstBaseUpdate) {
		        var newState = queue.baseState;
		        lastBaseUpdate = 0;
		        current = firstPendingUpdate = lastPendingUpdate = null;
		        pendingQueue = firstBaseUpdate;
		        do {
		          var updateLane = pendingQueue.lane & -536870913,
		            isHiddenUpdate = updateLane !== pendingQueue.lane;
		          if (
		            isHiddenUpdate
		              ? (workInProgressRootRenderLanes & updateLane) === updateLane
		              : (renderLanes & updateLane) === updateLane
		          ) {
		            0 !== updateLane &&
		              updateLane === currentEntangledLane &&
		              (didReadFromEntangledAsyncAction = !0);
		            null !== current &&
		              (current = current.next =
		                {
		                  lane: 0,
		                  tag: pendingQueue.tag,
		                  payload: pendingQueue.payload,
		                  callback: null,
		                  next: null
		                });
		            a: {
		              updateLane = workInProgress;
		              var partialState = pendingQueue;
		              var nextProps = props,
		                instance = instance$jscomp$0;
		              switch (partialState.tag) {
		                case ReplaceState:
		                  partialState = partialState.payload;
		                  if ("function" === typeof partialState) {
		                    isDisallowedContextReadInDEV = !0;
		                    var nextState = partialState.call(
		                      instance,
		                      newState,
		                      nextProps
		                    );
		                    if (updateLane.mode & 8) {
		                      setIsStrictModeForDevtools(!0);
		                      try {
		                        partialState.call(instance, newState, nextProps);
		                      } finally {
		                        setIsStrictModeForDevtools(!1);
		                      }
		                    }
		                    isDisallowedContextReadInDEV = !1;
		                    newState = nextState;
		                    break a;
		                  }
		                  newState = partialState;
		                  break a;
		                case CaptureUpdate:
		                  updateLane.flags = (updateLane.flags & -65537) | 128;
		                case UpdateState:
		                  nextState = partialState.payload;
		                  if ("function" === typeof nextState) {
		                    isDisallowedContextReadInDEV = !0;
		                    partialState = nextState.call(
		                      instance,
		                      newState,
		                      nextProps
		                    );
		                    if (updateLane.mode & 8) {
		                      setIsStrictModeForDevtools(!0);
		                      try {
		                        nextState.call(instance, newState, nextProps);
		                      } finally {
		                        setIsStrictModeForDevtools(!1);
		                      }
		                    }
		                    isDisallowedContextReadInDEV = !1;
		                  } else partialState = nextState;
		                  if (null === partialState || void 0 === partialState) break a;
		                  newState = assign({}, newState, partialState);
		                  break a;
		                case ForceUpdate:
		                  hasForceUpdate = !0;
		              }
		            }
		            updateLane = pendingQueue.callback;
		            null !== updateLane &&
		              ((workInProgress.flags |= 64),
		              isHiddenUpdate && (workInProgress.flags |= 8192),
		              (isHiddenUpdate = queue.callbacks),
		              null === isHiddenUpdate
		                ? (queue.callbacks = [updateLane])
		                : isHiddenUpdate.push(updateLane));
		          } else
		            (isHiddenUpdate = {
		              lane: updateLane,
		              tag: pendingQueue.tag,
		              payload: pendingQueue.payload,
		              callback: pendingQueue.callback,
		              next: null
		            }),
		              null === current
		                ? ((firstPendingUpdate = current = isHiddenUpdate),
		                  (lastPendingUpdate = newState))
		                : (current = current.next = isHiddenUpdate),
		              (lastBaseUpdate |= updateLane);
		          pendingQueue = pendingQueue.next;
		          if (null === pendingQueue)
		            if (((pendingQueue = queue.shared.pending), null === pendingQueue))
		              break;
		            else
		              (isHiddenUpdate = pendingQueue),
		                (pendingQueue = isHiddenUpdate.next),
		                (isHiddenUpdate.next = null),
		                (queue.lastBaseUpdate = isHiddenUpdate),
		                (queue.shared.pending = null);
		        } while (1);
		        null === current && (lastPendingUpdate = newState);
		        queue.baseState = lastPendingUpdate;
		        queue.firstBaseUpdate = firstPendingUpdate;
		        queue.lastBaseUpdate = current;
		        null === firstBaseUpdate && (queue.shared.lanes = 0);
		        workInProgressRootSkippedLanes |= lastBaseUpdate;
		        workInProgress.lanes = lastBaseUpdate;
		        workInProgress.memoizedState = newState;
		      }
		      currentlyProcessingQueue = null;
		    }
		    function callCallback(callback, context) {
		      if ("function" !== typeof callback)
		        throw Error(
		          "Invalid argument passed as callback. Expected a function. Instead received: " +
		            callback
		        );
		      callback.call(context);
		    }
		    function commitHiddenCallbacks(updateQueue, context) {
		      var hiddenCallbacks = updateQueue.shared.hiddenCallbacks;
		      if (null !== hiddenCallbacks)
		        for (
		          updateQueue.shared.hiddenCallbacks = null, updateQueue = 0;
		          updateQueue < hiddenCallbacks.length;
		          updateQueue++
		        )
		          callCallback(hiddenCallbacks[updateQueue], context);
		    }
		    function commitCallbacks(updateQueue, context) {
		      var callbacks = updateQueue.callbacks;
		      if (null !== callbacks)
		        for (
		          updateQueue.callbacks = null, updateQueue = 0;
		          updateQueue < callbacks.length;
		          updateQueue++
		        )
		          callCallback(callbacks[updateQueue], context);
		    }
		    function shallowEqual(objA, objB) {
		      if (objectIs(objA, objB)) return !0;
		      if (
		        "object" !== typeof objA ||
		        null === objA ||
		        "object" !== typeof objB ||
		        null === objB
		      )
		        return !1;
		      var keysA = Object.keys(objA),
		        keysB = Object.keys(objB);
		      if (keysA.length !== keysB.length) return !1;
		      for (keysB = 0; keysB < keysA.length; keysB++) {
		        var currentKey = keysA[keysB];
		        if (
		          !hasOwnProperty.call(objB, currentKey) ||
		          !objectIs(objA[currentKey], objB[currentKey])
		        )
		          return !1;
		      }
		      return !0;
		    }
		    function createThenableState() {
		      return { didWarnAboutUncachedPromise: !1, thenables: [] };
		    }
		    function isThenableResolved(thenable) {
		      thenable = thenable.status;
		      return "fulfilled" === thenable || "rejected" === thenable;
		    }
		    function noop$1() {}
		    function trackUsedThenable(thenableState, thenable, index) {
		      null !== ReactSharedInternals.actQueue &&
		        (ReactSharedInternals.didUsePromise = !0);
		      var trackedThenables = thenableState.thenables;
		      index = trackedThenables[index];
		      void 0 === index
		        ? trackedThenables.push(thenable)
		        : index !== thenable &&
		          (thenableState.didWarnAboutUncachedPromise ||
		            ((thenableState.didWarnAboutUncachedPromise = !0),
		            console.error(
		              "A component was suspended by an uncached promise. Creating promises inside a Client Component or hook is not yet supported, except via a Suspense-compatible library or framework."
		            )),
		          thenable.then(noop$1, noop$1),
		          (thenable = index));
		      switch (thenable.status) {
		        case "fulfilled":
		          return thenable.value;
		        case "rejected":
		          throw (
		            ((thenableState = thenable.reason),
		            checkIfUseWrappedInAsyncCatch(thenableState),
		            thenableState)
		          );
		        default:
		          if ("string" === typeof thenable.status)
		            thenable.then(noop$1, noop$1);
		          else {
		            thenableState = workInProgressRoot;
		            if (
		              null !== thenableState &&
		              100 < thenableState.shellSuspendCounter
		            )
		              throw Error(
		                "async/await is not yet supported in Client Components, only Server Components. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
		              );
		            thenableState = thenable;
		            thenableState.status = "pending";
		            thenableState.then(
		              function (fulfilledValue) {
		                if ("pending" === thenable.status) {
		                  var fulfilledThenable = thenable;
		                  fulfilledThenable.status = "fulfilled";
		                  fulfilledThenable.value = fulfilledValue;
		                }
		              },
		              function (error) {
		                if ("pending" === thenable.status) {
		                  var rejectedThenable = thenable;
		                  rejectedThenable.status = "rejected";
		                  rejectedThenable.reason = error;
		                }
		              }
		            );
		          }
		          switch (thenable.status) {
		            case "fulfilled":
		              return thenable.value;
		            case "rejected":
		              throw (
		                ((thenableState = thenable.reason),
		                checkIfUseWrappedInAsyncCatch(thenableState),
		                thenableState)
		              );
		          }
		          suspendedThenable = thenable;
		          needsToResetSuspendedThenableDEV = !0;
		          throw SuspenseException;
		      }
		    }
		    function getSuspendedThenable() {
		      if (null === suspendedThenable)
		        throw Error(
		          "Expected a suspended thenable. This is a bug in React. Please file an issue."
		        );
		      var thenable = suspendedThenable;
		      suspendedThenable = null;
		      needsToResetSuspendedThenableDEV = !1;
		      return thenable;
		    }
		    function checkIfUseWrappedInAsyncCatch(rejectedReason) {
		      if (rejectedReason === SuspenseException)
		        throw Error(
		          "Hooks are not supported inside an async component. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
		        );
		    }
		    function pushDebugInfo(debugInfo) {
		      var previousDebugInfo = currentDebugInfo;
		      null != debugInfo &&
		        (currentDebugInfo =
		          null === previousDebugInfo
		            ? debugInfo
		            : previousDebugInfo.concat(debugInfo));
		      return previousDebugInfo;
		    }
		    function validateFragmentProps(element, fiber, returnFiber) {
		      for (var keys = Object.keys(element.props), i = 0; i < keys.length; i++) {
		        var key = keys[i];
		        if ("children" !== key && "key" !== key) {
		          null === fiber &&
		            ((fiber = createFiberFromElement(element, returnFiber.mode, 0)),
		            (fiber._debugInfo = currentDebugInfo),
		            (fiber.return = returnFiber));
		          runWithFiberInDEV(
		            fiber,
		            function (erroredKey) {
		              console.error(
		                "Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.",
		                erroredKey
		              );
		            },
		            key
		          );
		          break;
		        }
		      }
		    }
		    function unwrapThenable(thenable) {
		      var index = thenableIndexCounter$1;
		      thenableIndexCounter$1 += 1;
		      null === thenableState$1 && (thenableState$1 = createThenableState());
		      return trackUsedThenable(thenableState$1, thenable, index);
		    }
		    function coerceRef(workInProgress, element) {
		      element = element.props.ref;
		      workInProgress.ref = void 0 !== element ? element : null;
		    }
		    function throwOnInvalidObjectType(returnFiber, newChild) {
		      if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE)
		        throw Error(
		          'A React Element from an older version of React was rendered. This is not supported. It can happen if:\n- Multiple copies of the "react" package is used.\n- A library pre-bundled an old copy of "react" or "react/jsx-runtime".\n- A compiler tries to "inline" JSX instead of using the runtime.'
		        );
		      returnFiber = Object.prototype.toString.call(newChild);
		      throw Error(
		        "Objects are not valid as a React child (found: " +
		          ("[object Object]" === returnFiber
		            ? "object with keys {" + Object.keys(newChild).join(", ") + "}"
		            : returnFiber) +
		          "). If you meant to render a collection of children, use an array instead."
		      );
		    }
		    function warnOnFunctionType(returnFiber, invalidChild) {
		      var parentName = getComponentNameFromFiber(returnFiber) || "Component";
		      ownerHasFunctionTypeWarning[parentName] ||
		        ((ownerHasFunctionTypeWarning[parentName] = !0),
		        (invalidChild =
		          invalidChild.displayName || invalidChild.name || "Component"),
		        3 === returnFiber.tag
		          ? console.error(
		              "Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  root.render(%s)",
		              invalidChild,
		              invalidChild,
		              invalidChild
		            )
		          : console.error(
		              "Functions are not valid as a React child. This may happen if you return %s instead of <%s /> from render. Or maybe you meant to call this function rather than return it.\n  <%s>{%s}</%s>",
		              invalidChild,
		              invalidChild,
		              parentName,
		              invalidChild,
		              parentName
		            ));
		    }
		    function warnOnSymbolType(returnFiber, invalidChild) {
		      var parentName = getComponentNameFromFiber(returnFiber) || "Component";
		      ownerHasSymbolTypeWarning[parentName] ||
		        ((ownerHasSymbolTypeWarning[parentName] = !0),
		        (invalidChild = String(invalidChild)),
		        3 === returnFiber.tag
		          ? console.error(
		              "Symbols are not valid as a React child.\n  root.render(%s)",
		              invalidChild
		            )
		          : console.error(
		              "Symbols are not valid as a React child.\n  <%s>%s</%s>",
		              parentName,
		              invalidChild,
		              parentName
		            ));
		    }
		    function createChildReconciler(shouldTrackSideEffects) {
		      function deleteChild(returnFiber, childToDelete) {
		        if (shouldTrackSideEffects) {
		          var deletions = returnFiber.deletions;
		          null === deletions
		            ? ((returnFiber.deletions = [childToDelete]),
		              (returnFiber.flags |= 16))
		            : deletions.push(childToDelete);
		        }
		      }
		      function deleteRemainingChildren(returnFiber, currentFirstChild) {
		        if (!shouldTrackSideEffects) return null;
		        for (; null !== currentFirstChild; )
		          deleteChild(returnFiber, currentFirstChild),
		            (currentFirstChild = currentFirstChild.sibling);
		        return null;
		      }
		      function mapRemainingChildren(currentFirstChild) {
		        for (var existingChildren = new Map(); null !== currentFirstChild; )
		          null !== currentFirstChild.key
		            ? existingChildren.set(currentFirstChild.key, currentFirstChild)
		            : existingChildren.set(currentFirstChild.index, currentFirstChild),
		            (currentFirstChild = currentFirstChild.sibling);
		        return existingChildren;
		      }
		      function useFiber(fiber, pendingProps) {
		        fiber = createWorkInProgress(fiber, pendingProps);
		        fiber.index = 0;
		        fiber.sibling = null;
		        return fiber;
		      }
		      function placeChild(newFiber, lastPlacedIndex, newIndex) {
		        newFiber.index = newIndex;
		        if (!shouldTrackSideEffects)
		          return (newFiber.flags |= 1048576), lastPlacedIndex;
		        newIndex = newFiber.alternate;
		        if (null !== newIndex)
		          return (
		            (newIndex = newIndex.index),
		            newIndex < lastPlacedIndex
		              ? ((newFiber.flags |= 33554434), lastPlacedIndex)
		              : newIndex
		          );
		        newFiber.flags |= 33554434;
		        return lastPlacedIndex;
		      }
		      function placeSingleChild(newFiber) {
		        shouldTrackSideEffects &&
		          null === newFiber.alternate &&
		          (newFiber.flags |= 33554434);
		        return newFiber;
		      }
		      function updateTextNode(returnFiber, current, textContent, lanes) {
		        if (null === current || 6 !== current.tag)
		          return (
		            (current = createFiberFromText(
		              textContent,
		              returnFiber.mode,
		              lanes
		            )),
		            (current.return = returnFiber),
		            (current._debugOwner = returnFiber),
		            (current._debugInfo = currentDebugInfo),
		            current
		          );
		        current = useFiber(current, textContent);
		        current.return = returnFiber;
		        current._debugInfo = currentDebugInfo;
		        return current;
		      }
		      function updateElement(returnFiber, current, element, lanes) {
		        var elementType = element.type;
		        if (elementType === REACT_FRAGMENT_TYPE)
		          return (
		            (current = updateFragment(
		              returnFiber,
		              current,
		              element.props.children,
		              lanes,
		              element.key
		            )),
		            validateFragmentProps(element, current, returnFiber),
		            current
		          );
		        if (
		          null !== current &&
		          (current.elementType === elementType ||
		            isCompatibleFamilyForHotReloading(current, element) ||
		            ("object" === typeof elementType &&
		              null !== elementType &&
		              elementType.$$typeof === REACT_LAZY_TYPE &&
		              callLazyInitInDEV(elementType) === current.type))
		        )
		          return (
		            (current = useFiber(current, element.props)),
		            coerceRef(current, element),
		            (current.return = returnFiber),
		            (current._debugOwner = element._owner),
		            (current._debugInfo = currentDebugInfo),
		            current
		          );
		        current = createFiberFromElement(element, returnFiber.mode, lanes);
		        coerceRef(current, element);
		        current.return = returnFiber;
		        current._debugInfo = currentDebugInfo;
		        return current;
		      }
		      function updatePortal(returnFiber, current, portal, lanes) {
		        if (
		          null === current ||
		          4 !== current.tag ||
		          current.stateNode.containerInfo !== portal.containerInfo ||
		          current.stateNode.implementation !== portal.implementation
		        )
		          return (
		            (current = createFiberFromPortal(portal, returnFiber.mode, lanes)),
		            (current.return = returnFiber),
		            (current._debugInfo = currentDebugInfo),
		            current
		          );
		        current = useFiber(current, portal.children || []);
		        current.return = returnFiber;
		        current._debugInfo = currentDebugInfo;
		        return current;
		      }
		      function updateFragment(returnFiber, current, fragment, lanes, key) {
		        if (null === current || 7 !== current.tag)
		          return (
		            (current = createFiberFromFragment(
		              fragment,
		              returnFiber.mode,
		              lanes,
		              key
		            )),
		            (current.return = returnFiber),
		            (current._debugOwner = returnFiber),
		            (current._debugInfo = currentDebugInfo),
		            current
		          );
		        current = useFiber(current, fragment);
		        current.return = returnFiber;
		        current._debugInfo = currentDebugInfo;
		        return current;
		      }
		      function createChild(returnFiber, newChild, lanes) {
		        if (
		          ("string" === typeof newChild && "" !== newChild) ||
		          "number" === typeof newChild ||
		          "bigint" === typeof newChild
		        )
		          return (
		            (newChild = createFiberFromText(
		              "" + newChild,
		              returnFiber.mode,
		              lanes
		            )),
		            (newChild.return = returnFiber),
		            (newChild._debugOwner = returnFiber),
		            (newChild._debugInfo = currentDebugInfo),
		            newChild
		          );
		        if ("object" === typeof newChild && null !== newChild) {
		          switch (newChild.$$typeof) {
		            case REACT_ELEMENT_TYPE:
		              return (
		                (lanes = createFiberFromElement(
		                  newChild,
		                  returnFiber.mode,
		                  lanes
		                )),
		                coerceRef(lanes, newChild),
		                (lanes.return = returnFiber),
		                (returnFiber = pushDebugInfo(newChild._debugInfo)),
		                (lanes._debugInfo = currentDebugInfo),
		                (currentDebugInfo = returnFiber),
		                lanes
		              );
		            case REACT_PORTAL_TYPE:
		              return (
		                (newChild = createFiberFromPortal(
		                  newChild,
		                  returnFiber.mode,
		                  lanes
		                )),
		                (newChild.return = returnFiber),
		                (newChild._debugInfo = currentDebugInfo),
		                newChild
		              );
		            case REACT_LAZY_TYPE:
		              var _prevDebugInfo = pushDebugInfo(newChild._debugInfo);
		              newChild = callLazyInitInDEV(newChild);
		              returnFiber = createChild(returnFiber, newChild, lanes);
		              currentDebugInfo = _prevDebugInfo;
		              return returnFiber;
		          }
		          if (isArrayImpl(newChild) || getIteratorFn(newChild))
		            return (
		              (lanes = createFiberFromFragment(
		                newChild,
		                returnFiber.mode,
		                lanes,
		                null
		              )),
		              (lanes.return = returnFiber),
		              (lanes._debugOwner = returnFiber),
		              (returnFiber = pushDebugInfo(newChild._debugInfo)),
		              (lanes._debugInfo = currentDebugInfo),
		              (currentDebugInfo = returnFiber),
		              lanes
		            );
		          if ("function" === typeof newChild.then)
		            return (
		              (_prevDebugInfo = pushDebugInfo(newChild._debugInfo)),
		              (returnFiber = createChild(
		                returnFiber,
		                unwrapThenable(newChild),
		                lanes
		              )),
		              (currentDebugInfo = _prevDebugInfo),
		              returnFiber
		            );
		          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
		            return createChild(
		              returnFiber,
		              readContextDuringReconciliation(returnFiber, newChild),
		              lanes
		            );
		          throwOnInvalidObjectType(returnFiber, newChild);
		        }
		        "function" === typeof newChild &&
		          warnOnFunctionType(returnFiber, newChild);
		        "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
		        return null;
		      }
		      function updateSlot(returnFiber, oldFiber, newChild, lanes) {
		        var key = null !== oldFiber ? oldFiber.key : null;
		        if (
		          ("string" === typeof newChild && "" !== newChild) ||
		          "number" === typeof newChild ||
		          "bigint" === typeof newChild
		        )
		          return null !== key
		            ? null
		            : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
		        if ("object" === typeof newChild && null !== newChild) {
		          switch (newChild.$$typeof) {
		            case REACT_ELEMENT_TYPE:
		              return newChild.key === key
		                ? ((key = pushDebugInfo(newChild._debugInfo)),
		                  (returnFiber = updateElement(
		                    returnFiber,
		                    oldFiber,
		                    newChild,
		                    lanes
		                  )),
		                  (currentDebugInfo = key),
		                  returnFiber)
		                : null;
		            case REACT_PORTAL_TYPE:
		              return newChild.key === key
		                ? updatePortal(returnFiber, oldFiber, newChild, lanes)
		                : null;
		            case REACT_LAZY_TYPE:
		              return (
		                (key = pushDebugInfo(newChild._debugInfo)),
		                (newChild = callLazyInitInDEV(newChild)),
		                (returnFiber = updateSlot(
		                  returnFiber,
		                  oldFiber,
		                  newChild,
		                  lanes
		                )),
		                (currentDebugInfo = key),
		                returnFiber
		              );
		          }
		          if (isArrayImpl(newChild) || getIteratorFn(newChild)) {
		            if (null !== key) return null;
		            key = pushDebugInfo(newChild._debugInfo);
		            returnFiber = updateFragment(
		              returnFiber,
		              oldFiber,
		              newChild,
		              lanes,
		              null
		            );
		            currentDebugInfo = key;
		            return returnFiber;
		          }
		          if ("function" === typeof newChild.then)
		            return (
		              (key = pushDebugInfo(newChild._debugInfo)),
		              (returnFiber = updateSlot(
		                returnFiber,
		                oldFiber,
		                unwrapThenable(newChild),
		                lanes
		              )),
		              (currentDebugInfo = key),
		              returnFiber
		            );
		          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
		            return updateSlot(
		              returnFiber,
		              oldFiber,
		              readContextDuringReconciliation(returnFiber, newChild),
		              lanes
		            );
		          throwOnInvalidObjectType(returnFiber, newChild);
		        }
		        "function" === typeof newChild &&
		          warnOnFunctionType(returnFiber, newChild);
		        "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
		        return null;
		      }
		      function updateFromMap(
		        existingChildren,
		        returnFiber,
		        newIdx,
		        newChild,
		        lanes
		      ) {
		        if (
		          ("string" === typeof newChild && "" !== newChild) ||
		          "number" === typeof newChild ||
		          "bigint" === typeof newChild
		        )
		          return (
		            (existingChildren = existingChildren.get(newIdx) || null),
		            updateTextNode(returnFiber, existingChildren, "" + newChild, lanes)
		          );
		        if ("object" === typeof newChild && null !== newChild) {
		          switch (newChild.$$typeof) {
		            case REACT_ELEMENT_TYPE:
		              return (
		                (newIdx =
		                  existingChildren.get(
		                    null === newChild.key ? newIdx : newChild.key
		                  ) || null),
		                (existingChildren = pushDebugInfo(newChild._debugInfo)),
		                (returnFiber = updateElement(
		                  returnFiber,
		                  newIdx,
		                  newChild,
		                  lanes
		                )),
		                (currentDebugInfo = existingChildren),
		                returnFiber
		              );
		            case REACT_PORTAL_TYPE:
		              return (
		                (existingChildren =
		                  existingChildren.get(
		                    null === newChild.key ? newIdx : newChild.key
		                  ) || null),
		                updatePortal(returnFiber, existingChildren, newChild, lanes)
		              );
		            case REACT_LAZY_TYPE:
		              var _prevDebugInfo7 = pushDebugInfo(newChild._debugInfo);
		              newChild = callLazyInitInDEV(newChild);
		              returnFiber = updateFromMap(
		                existingChildren,
		                returnFiber,
		                newIdx,
		                newChild,
		                lanes
		              );
		              currentDebugInfo = _prevDebugInfo7;
		              return returnFiber;
		          }
		          if (isArrayImpl(newChild) || getIteratorFn(newChild))
		            return (
		              (newIdx = existingChildren.get(newIdx) || null),
		              (existingChildren = pushDebugInfo(newChild._debugInfo)),
		              (returnFiber = updateFragment(
		                returnFiber,
		                newIdx,
		                newChild,
		                lanes,
		                null
		              )),
		              (currentDebugInfo = existingChildren),
		              returnFiber
		            );
		          if ("function" === typeof newChild.then)
		            return (
		              (_prevDebugInfo7 = pushDebugInfo(newChild._debugInfo)),
		              (returnFiber = updateFromMap(
		                existingChildren,
		                returnFiber,
		                newIdx,
		                unwrapThenable(newChild),
		                lanes
		              )),
		              (currentDebugInfo = _prevDebugInfo7),
		              returnFiber
		            );
		          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
		            return updateFromMap(
		              existingChildren,
		              returnFiber,
		              newIdx,
		              readContextDuringReconciliation(returnFiber, newChild),
		              lanes
		            );
		          throwOnInvalidObjectType(returnFiber, newChild);
		        }
		        "function" === typeof newChild &&
		          warnOnFunctionType(returnFiber, newChild);
		        "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
		        return null;
		      }
		      function warnOnInvalidKey(returnFiber, workInProgress, child, knownKeys) {
		        if ("object" !== typeof child || null === child) return knownKeys;
		        switch (child.$$typeof) {
		          case REACT_ELEMENT_TYPE:
		          case REACT_PORTAL_TYPE:
		            warnForMissingKey(returnFiber, workInProgress, child);
		            var key = child.key;
		            if ("string" !== typeof key) break;
		            if (null === knownKeys) {
		              knownKeys = new Set();
		              knownKeys.add(key);
		              break;
		            }
		            if (!knownKeys.has(key)) {
		              knownKeys.add(key);
		              break;
		            }
		            runWithFiberInDEV(workInProgress, function () {
		              console.error(
		                "Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted \u2014 the behavior is unsupported and could change in a future version.",
		                key
		              );
		            });
		            break;
		          case REACT_LAZY_TYPE:
		            (child = callLazyInitInDEV(child)),
		              warnOnInvalidKey(returnFiber, workInProgress, child, knownKeys);
		        }
		        return knownKeys;
		      }
		      function reconcileChildrenArray(
		        returnFiber,
		        currentFirstChild,
		        newChildren,
		        lanes
		      ) {
		        for (
		          var knownKeys = null,
		            resultingFirstChild = null,
		            previousNewFiber = null,
		            oldFiber = currentFirstChild,
		            newIdx = (currentFirstChild = 0),
		            nextOldFiber = null;
		          null !== oldFiber && newIdx < newChildren.length;
		          newIdx++
		        ) {
		          oldFiber.index > newIdx
		            ? ((nextOldFiber = oldFiber), (oldFiber = null))
		            : (nextOldFiber = oldFiber.sibling);
		          var newFiber = updateSlot(
		            returnFiber,
		            oldFiber,
		            newChildren[newIdx],
		            lanes
		          );
		          if (null === newFiber) {
		            null === oldFiber && (oldFiber = nextOldFiber);
		            break;
		          }
		          knownKeys = warnOnInvalidKey(
		            returnFiber,
		            newFiber,
		            newChildren[newIdx],
		            knownKeys
		          );
		          shouldTrackSideEffects &&
		            oldFiber &&
		            null === newFiber.alternate &&
		            deleteChild(returnFiber, oldFiber);
		          currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
		          null === previousNewFiber
		            ? (resultingFirstChild = newFiber)
		            : (previousNewFiber.sibling = newFiber);
		          previousNewFiber = newFiber;
		          oldFiber = nextOldFiber;
		        }
		        if (newIdx === newChildren.length)
		          return (
		            deleteRemainingChildren(returnFiber, oldFiber),
		            isHydrating && pushTreeFork(returnFiber, newIdx),
		            resultingFirstChild
		          );
		        if (null === oldFiber) {
		          for (; newIdx < newChildren.length; newIdx++)
		            (oldFiber = createChild(returnFiber, newChildren[newIdx], lanes)),
		              null !== oldFiber &&
		                ((knownKeys = warnOnInvalidKey(
		                  returnFiber,
		                  oldFiber,
		                  newChildren[newIdx],
		                  knownKeys
		                )),
		                (currentFirstChild = placeChild(
		                  oldFiber,
		                  currentFirstChild,
		                  newIdx
		                )),
		                null === previousNewFiber
		                  ? (resultingFirstChild = oldFiber)
		                  : (previousNewFiber.sibling = oldFiber),
		                (previousNewFiber = oldFiber));
		          isHydrating && pushTreeFork(returnFiber, newIdx);
		          return resultingFirstChild;
		        }
		        for (
		          oldFiber = mapRemainingChildren(oldFiber);
		          newIdx < newChildren.length;
		          newIdx++
		        )
		          (nextOldFiber = updateFromMap(
		            oldFiber,
		            returnFiber,
		            newIdx,
		            newChildren[newIdx],
		            lanes
		          )),
		            null !== nextOldFiber &&
		              ((knownKeys = warnOnInvalidKey(
		                returnFiber,
		                nextOldFiber,
		                newChildren[newIdx],
		                knownKeys
		              )),
		              shouldTrackSideEffects &&
		                null !== nextOldFiber.alternate &&
		                oldFiber.delete(
		                  null === nextOldFiber.key ? newIdx : nextOldFiber.key
		                ),
		              (currentFirstChild = placeChild(
		                nextOldFiber,
		                currentFirstChild,
		                newIdx
		              )),
		              null === previousNewFiber
		                ? (resultingFirstChild = nextOldFiber)
		                : (previousNewFiber.sibling = nextOldFiber),
		              (previousNewFiber = nextOldFiber));
		        shouldTrackSideEffects &&
		          oldFiber.forEach(function (child) {
		            return deleteChild(returnFiber, child);
		          });
		        isHydrating && pushTreeFork(returnFiber, newIdx);
		        return resultingFirstChild;
		      }
		      function reconcileChildrenIterator(
		        returnFiber,
		        currentFirstChild,
		        newChildren,
		        lanes
		      ) {
		        if (null == newChildren)
		          throw Error("An iterable object provided no iterator.");
		        for (
		          var resultingFirstChild = null,
		            previousNewFiber = null,
		            oldFiber = currentFirstChild,
		            newIdx = (currentFirstChild = 0),
		            nextOldFiber = null,
		            knownKeys = null,
		            step = newChildren.next();
		          null !== oldFiber && !step.done;
		          newIdx++, step = newChildren.next()
		        ) {
		          oldFiber.index > newIdx
		            ? ((nextOldFiber = oldFiber), (oldFiber = null))
		            : (nextOldFiber = oldFiber.sibling);
		          var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
		          if (null === newFiber) {
		            null === oldFiber && (oldFiber = nextOldFiber);
		            break;
		          }
		          knownKeys = warnOnInvalidKey(
		            returnFiber,
		            newFiber,
		            step.value,
		            knownKeys
		          );
		          shouldTrackSideEffects &&
		            oldFiber &&
		            null === newFiber.alternate &&
		            deleteChild(returnFiber, oldFiber);
		          currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
		          null === previousNewFiber
		            ? (resultingFirstChild = newFiber)
		            : (previousNewFiber.sibling = newFiber);
		          previousNewFiber = newFiber;
		          oldFiber = nextOldFiber;
		        }
		        if (step.done)
		          return (
		            deleteRemainingChildren(returnFiber, oldFiber),
		            isHydrating && pushTreeFork(returnFiber, newIdx),
		            resultingFirstChild
		          );
		        if (null === oldFiber) {
		          for (; !step.done; newIdx++, step = newChildren.next())
		            (oldFiber = createChild(returnFiber, step.value, lanes)),
		              null !== oldFiber &&
		                ((knownKeys = warnOnInvalidKey(
		                  returnFiber,
		                  oldFiber,
		                  step.value,
		                  knownKeys
		                )),
		                (currentFirstChild = placeChild(
		                  oldFiber,
		                  currentFirstChild,
		                  newIdx
		                )),
		                null === previousNewFiber
		                  ? (resultingFirstChild = oldFiber)
		                  : (previousNewFiber.sibling = oldFiber),
		                (previousNewFiber = oldFiber));
		          isHydrating && pushTreeFork(returnFiber, newIdx);
		          return resultingFirstChild;
		        }
		        for (
		          oldFiber = mapRemainingChildren(oldFiber);
		          !step.done;
		          newIdx++, step = newChildren.next()
		        )
		          (nextOldFiber = updateFromMap(
		            oldFiber,
		            returnFiber,
		            newIdx,
		            step.value,
		            lanes
		          )),
		            null !== nextOldFiber &&
		              ((knownKeys = warnOnInvalidKey(
		                returnFiber,
		                nextOldFiber,
		                step.value,
		                knownKeys
		              )),
		              shouldTrackSideEffects &&
		                null !== nextOldFiber.alternate &&
		                oldFiber.delete(
		                  null === nextOldFiber.key ? newIdx : nextOldFiber.key
		                ),
		              (currentFirstChild = placeChild(
		                nextOldFiber,
		                currentFirstChild,
		                newIdx
		              )),
		              null === previousNewFiber
		                ? (resultingFirstChild = nextOldFiber)
		                : (previousNewFiber.sibling = nextOldFiber),
		              (previousNewFiber = nextOldFiber));
		        shouldTrackSideEffects &&
		          oldFiber.forEach(function (child) {
		            return deleteChild(returnFiber, child);
		          });
		        isHydrating && pushTreeFork(returnFiber, newIdx);
		        return resultingFirstChild;
		      }
		      function reconcileChildFibersImpl(
		        returnFiber,
		        currentFirstChild,
		        newChild,
		        lanes
		      ) {
		        "object" === typeof newChild &&
		          null !== newChild &&
		          newChild.type === REACT_FRAGMENT_TYPE &&
		          null === newChild.key &&
		          (validateFragmentProps(newChild, null, returnFiber),
		          (newChild = newChild.props.children));
		        if ("object" === typeof newChild && null !== newChild) {
		          switch (newChild.$$typeof) {
		            case REACT_ELEMENT_TYPE:
		              var prevDebugInfo = pushDebugInfo(newChild._debugInfo);
		              a: {
		                for (var key = newChild.key; null !== currentFirstChild; ) {
		                  if (currentFirstChild.key === key) {
		                    key = newChild.type;
		                    if (key === REACT_FRAGMENT_TYPE) {
		                      if (7 === currentFirstChild.tag) {
		                        deleteRemainingChildren(
		                          returnFiber,
		                          currentFirstChild.sibling
		                        );
		                        lanes = useFiber(
		                          currentFirstChild,
		                          newChild.props.children
		                        );
		                        lanes.return = returnFiber;
		                        lanes._debugOwner = newChild._owner;
		                        lanes._debugInfo = currentDebugInfo;
		                        validateFragmentProps(newChild, lanes, returnFiber);
		                        returnFiber = lanes;
		                        break a;
		                      }
		                    } else if (
		                      currentFirstChild.elementType === key ||
		                      isCompatibleFamilyForHotReloading(
		                        currentFirstChild,
		                        newChild
		                      ) ||
		                      ("object" === typeof key &&
		                        null !== key &&
		                        key.$$typeof === REACT_LAZY_TYPE &&
		                        callLazyInitInDEV(key) === currentFirstChild.type)
		                    ) {
		                      deleteRemainingChildren(
		                        returnFiber,
		                        currentFirstChild.sibling
		                      );
		                      lanes = useFiber(currentFirstChild, newChild.props);
		                      coerceRef(lanes, newChild);
		                      lanes.return = returnFiber;
		                      lanes._debugOwner = newChild._owner;
		                      lanes._debugInfo = currentDebugInfo;
		                      returnFiber = lanes;
		                      break a;
		                    }
		                    deleteRemainingChildren(returnFiber, currentFirstChild);
		                    break;
		                  } else deleteChild(returnFiber, currentFirstChild);
		                  currentFirstChild = currentFirstChild.sibling;
		                }
		                newChild.type === REACT_FRAGMENT_TYPE
		                  ? ((lanes = createFiberFromFragment(
		                      newChild.props.children,
		                      returnFiber.mode,
		                      lanes,
		                      newChild.key
		                    )),
		                    (lanes.return = returnFiber),
		                    (lanes._debugOwner = returnFiber),
		                    (lanes._debugInfo = currentDebugInfo),
		                    validateFragmentProps(newChild, lanes, returnFiber),
		                    (returnFiber = lanes))
		                  : ((lanes = createFiberFromElement(
		                      newChild,
		                      returnFiber.mode,
		                      lanes
		                    )),
		                    coerceRef(lanes, newChild),
		                    (lanes.return = returnFiber),
		                    (lanes._debugInfo = currentDebugInfo),
		                    (returnFiber = lanes));
		              }
		              returnFiber = placeSingleChild(returnFiber);
		              currentDebugInfo = prevDebugInfo;
		              return returnFiber;
		            case REACT_PORTAL_TYPE:
		              a: {
		                prevDebugInfo = newChild;
		                for (
		                  newChild = prevDebugInfo.key;
		                  null !== currentFirstChild;

		                ) {
		                  if (currentFirstChild.key === newChild)
		                    if (
		                      4 === currentFirstChild.tag &&
		                      currentFirstChild.stateNode.containerInfo ===
		                        prevDebugInfo.containerInfo &&
		                      currentFirstChild.stateNode.implementation ===
		                        prevDebugInfo.implementation
		                    ) {
		                      deleteRemainingChildren(
		                        returnFiber,
		                        currentFirstChild.sibling
		                      );
		                      lanes = useFiber(
		                        currentFirstChild,
		                        prevDebugInfo.children || []
		                      );
		                      lanes.return = returnFiber;
		                      returnFiber = lanes;
		                      break a;
		                    } else {
		                      deleteRemainingChildren(returnFiber, currentFirstChild);
		                      break;
		                    }
		                  else deleteChild(returnFiber, currentFirstChild);
		                  currentFirstChild = currentFirstChild.sibling;
		                }
		                lanes = createFiberFromPortal(
		                  prevDebugInfo,
		                  returnFiber.mode,
		                  lanes
		                );
		                lanes.return = returnFiber;
		                returnFiber = lanes;
		              }
		              return placeSingleChild(returnFiber);
		            case REACT_LAZY_TYPE:
		              return (
		                (prevDebugInfo = pushDebugInfo(newChild._debugInfo)),
		                (newChild = callLazyInitInDEV(newChild)),
		                (returnFiber = reconcileChildFibersImpl(
		                  returnFiber,
		                  currentFirstChild,
		                  newChild,
		                  lanes
		                )),
		                (currentDebugInfo = prevDebugInfo),
		                returnFiber
		              );
		          }
		          if (isArrayImpl(newChild))
		            return (
		              (prevDebugInfo = pushDebugInfo(newChild._debugInfo)),
		              (returnFiber = reconcileChildrenArray(
		                returnFiber,
		                currentFirstChild,
		                newChild,
		                lanes
		              )),
		              (currentDebugInfo = prevDebugInfo),
		              returnFiber
		            );
		          if (getIteratorFn(newChild)) {
		            prevDebugInfo = pushDebugInfo(newChild._debugInfo);
		            key = getIteratorFn(newChild);
		            if ("function" !== typeof key)
		              throw Error(
		                "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue."
		              );
		            var newChildren = key.call(newChild);
		            if (newChildren === newChild) {
		              if (
		                0 !== returnFiber.tag ||
		                "[object GeneratorFunction]" !==
		                  Object.prototype.toString.call(returnFiber.type) ||
		                "[object Generator]" !==
		                  Object.prototype.toString.call(newChildren)
		              )
		                didWarnAboutGenerators ||
		                  console.error(
		                    "Using Iterators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. You can also use an Iterable that can iterate multiple times over the same items."
		                  ),
		                  (didWarnAboutGenerators = !0);
		            } else
		              newChild.entries !== key ||
		                didWarnAboutMaps ||
		                (console.error(
		                  "Using Maps as children is not supported. Use an array of keyed ReactElements instead."
		                ),
		                (didWarnAboutMaps = !0));
		            returnFiber = reconcileChildrenIterator(
		              returnFiber,
		              currentFirstChild,
		              newChildren,
		              lanes
		            );
		            currentDebugInfo = prevDebugInfo;
		            return returnFiber;
		          }
		          if ("function" === typeof newChild.then)
		            return (
		              (prevDebugInfo = pushDebugInfo(newChild._debugInfo)),
		              (returnFiber = reconcileChildFibersImpl(
		                returnFiber,
		                currentFirstChild,
		                unwrapThenable(newChild),
		                lanes
		              )),
		              (currentDebugInfo = prevDebugInfo),
		              returnFiber
		            );
		          if (newChild.$$typeof === REACT_CONTEXT_TYPE)
		            return reconcileChildFibersImpl(
		              returnFiber,
		              currentFirstChild,
		              readContextDuringReconciliation(returnFiber, newChild),
		              lanes
		            );
		          throwOnInvalidObjectType(returnFiber, newChild);
		        }
		        if (
		          ("string" === typeof newChild && "" !== newChild) ||
		          "number" === typeof newChild ||
		          "bigint" === typeof newChild
		        )
		          return (
		            (prevDebugInfo = "" + newChild),
		            null !== currentFirstChild && 6 === currentFirstChild.tag
		              ? (deleteRemainingChildren(
		                  returnFiber,
		                  currentFirstChild.sibling
		                ),
		                (lanes = useFiber(currentFirstChild, prevDebugInfo)),
		                (lanes.return = returnFiber),
		                (returnFiber = lanes))
		              : (deleteRemainingChildren(returnFiber, currentFirstChild),
		                (lanes = createFiberFromText(
		                  prevDebugInfo,
		                  returnFiber.mode,
		                  lanes
		                )),
		                (lanes.return = returnFiber),
		                (lanes._debugOwner = returnFiber),
		                (lanes._debugInfo = currentDebugInfo),
		                (returnFiber = lanes)),
		            placeSingleChild(returnFiber)
		          );
		        "function" === typeof newChild &&
		          warnOnFunctionType(returnFiber, newChild);
		        "symbol" === typeof newChild && warnOnSymbolType(returnFiber, newChild);
		        return deleteRemainingChildren(returnFiber, currentFirstChild);
		      }
		      return function (returnFiber, currentFirstChild, newChild, lanes) {
		        var prevDebugInfo = currentDebugInfo;
		        currentDebugInfo = null;
		        try {
		          thenableIndexCounter$1 = 0;
		          var firstChildFiber = reconcileChildFibersImpl(
		            returnFiber,
		            currentFirstChild,
		            newChild,
		            lanes
		          );
		          thenableState$1 = null;
		          return firstChildFiber;
		        } catch (x) {
		          if (x === SuspenseException) throw x;
		          var fiber = createFiber(29, x, null, returnFiber.mode);
		          fiber.lanes = lanes;
		          fiber.return = returnFiber;
		          var debugInfo = (fiber._debugInfo = currentDebugInfo);
		          fiber._debugOwner = returnFiber._debugOwner;
		          if (null != debugInfo)
		            for (var i = debugInfo.length - 1; 0 <= i; i--)
		              if ("string" === typeof debugInfo[i].stack) {
		                fiber._debugOwner = debugInfo[i];
		                break;
		              }
		          return fiber;
		        } finally {
		          currentDebugInfo = prevDebugInfo;
		        }
		      };
		    }
		    function pushHiddenContext(fiber, context) {
		      var prevEntangledRenderLanes = entangledRenderLanes;
		      push(prevEntangledRenderLanesCursor, prevEntangledRenderLanes, fiber);
		      push(currentTreeHiddenStackCursor, context, fiber);
		      entangledRenderLanes = prevEntangledRenderLanes | context.baseLanes;
		    }
		    function reuseHiddenContextOnStack(fiber) {
		      push(prevEntangledRenderLanesCursor, entangledRenderLanes, fiber);
		      push(
		        currentTreeHiddenStackCursor,
		        currentTreeHiddenStackCursor.current,
		        fiber
		      );
		    }
		    function popHiddenContext(fiber) {
		      entangledRenderLanes = prevEntangledRenderLanesCursor.current;
		      pop(currentTreeHiddenStackCursor, fiber);
		      pop(prevEntangledRenderLanesCursor, fiber);
		    }
		    function pushPrimaryTreeSuspenseHandler(handler) {
		      var current = handler.alternate;
		      push(
		        suspenseStackCursor,
		        suspenseStackCursor.current & SubtreeSuspenseContextMask,
		        handler
		      );
		      push(suspenseHandlerStackCursor, handler, handler);
		      null === shellBoundary &&
		        (null === current || null !== currentTreeHiddenStackCursor.current
		          ? (shellBoundary = handler)
		          : null !== current.memoizedState && (shellBoundary = handler));
		    }
		    function pushOffscreenSuspenseHandler(fiber) {
		      if (22 === fiber.tag) {
		        if (
		          (push(suspenseStackCursor, suspenseStackCursor.current, fiber),
		          push(suspenseHandlerStackCursor, fiber, fiber),
		          null === shellBoundary)
		        ) {
		          var current = fiber.alternate;
		          null !== current &&
		            null !== current.memoizedState &&
		            (shellBoundary = fiber);
		        }
		      } else reuseSuspenseHandlerOnStack(fiber);
		    }
		    function reuseSuspenseHandlerOnStack(fiber) {
		      push(suspenseStackCursor, suspenseStackCursor.current, fiber);
		      push(
		        suspenseHandlerStackCursor,
		        suspenseHandlerStackCursor.current,
		        fiber
		      );
		    }
		    function popSuspenseHandler(fiber) {
		      pop(suspenseHandlerStackCursor, fiber);
		      shellBoundary === fiber && (shellBoundary = null);
		      pop(suspenseStackCursor, fiber);
		    }
		    function findFirstSuspended(row) {
		      for (var node = row; null !== node; ) {
		        if (13 === node.tag) {
		          var state = node.memoizedState;
		          if (
		            null !== state &&
		            ((state = state.dehydrated),
		            null === state ||
		              isSuspenseInstancePending(state) ||
		              isSuspenseInstanceFallback(state))
		          )
		            return node;
		        } else if (
		          19 === node.tag &&
		          void 0 !== node.memoizedProps.revealOrder
		        ) {
		          if (0 !== (node.flags & 128)) return node;
		        } else if (null !== node.child) {
		          node.child.return = node;
		          node = node.child;
		          continue;
		        }
		        if (node === row) break;
		        for (; null === node.sibling; ) {
		          if (null === node.return || node.return === row) return null;
		          node = node.return;
		        }
		        node.sibling.return = node.return;
		        node = node.sibling;
		      }
		      return null;
		    }
		    function mountHookTypesDev() {
		      var hookName = currentHookNameInDev;
		      null === hookTypesDev
		        ? (hookTypesDev = [hookName])
		        : hookTypesDev.push(hookName);
		    }
		    function updateHookTypesDev() {
		      var hookName = currentHookNameInDev;
		      if (
		        null !== hookTypesDev &&
		        (hookTypesUpdateIndexDev++,
		        hookTypesDev[hookTypesUpdateIndexDev] !== hookName)
		      ) {
		        var componentName = getComponentNameFromFiber(
		          currentlyRenderingFiber$1
		        );
		        if (
		          !didWarnAboutMismatchedHooksForComponent.has(componentName) &&
		          (didWarnAboutMismatchedHooksForComponent.add(componentName),
		          null !== hookTypesDev)
		        ) {
		          for (var table = "", i = 0; i <= hookTypesUpdateIndexDev; i++) {
		            var oldHookName = hookTypesDev[i],
		              newHookName =
		                i === hookTypesUpdateIndexDev ? hookName : oldHookName;
		            for (
		              oldHookName = i + 1 + ". " + oldHookName;
		              30 > oldHookName.length;

		            )
		              oldHookName += " ";
		            oldHookName += newHookName + "\n";
		            table += oldHookName;
		          }
		          console.error(
		            "React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://react.dev/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n",
		            componentName,
		            table
		          );
		        }
		      }
		    }
		    function checkDepsAreArrayDev(deps) {
		      void 0 === deps ||
		        null === deps ||
		        isArrayImpl(deps) ||
		        console.error(
		          "%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.",
		          currentHookNameInDev,
		          typeof deps
		        );
		    }
		    function warnOnUseFormStateInDev() {
		      var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
		      didWarnAboutUseFormState.has(componentName) ||
		        (didWarnAboutUseFormState.add(componentName),
		        console.error(
		          "ReactDOM.useFormState has been renamed to React.useActionState. Please update %s to use React.useActionState.",
		          componentName
		        ));
		    }
		    function throwInvalidHookError() {
		      throw Error(
		        "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem."
		      );
		    }
		    function areHookInputsEqual(nextDeps, prevDeps) {
		      if (ignorePreviousDependencies) return !1;
		      if (null === prevDeps)
		        return (
		          console.error(
		            "%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.",
		            currentHookNameInDev
		          ),
		          !1
		        );
		      nextDeps.length !== prevDeps.length &&
		        console.error(
		          "The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s",
		          currentHookNameInDev,
		          "[" + prevDeps.join(", ") + "]",
		          "[" + nextDeps.join(", ") + "]"
		        );
		      for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
		        if (!objectIs(nextDeps[i], prevDeps[i])) return !1;
		      return !0;
		    }
		    function renderWithHooks(
		      current,
		      workInProgress,
		      Component,
		      props,
		      secondArg,
		      nextRenderLanes
		    ) {
		      renderLanes = nextRenderLanes;
		      currentlyRenderingFiber$1 = workInProgress;
		      hookTypesDev = null !== current ? current._debugHookTypes : null;
		      hookTypesUpdateIndexDev = -1;
		      ignorePreviousDependencies =
		        null !== current && current.type !== workInProgress.type;
		      if (
		        "[object AsyncFunction]" ===
		          Object.prototype.toString.call(Component) ||
		        "[object AsyncGeneratorFunction]" ===
		          Object.prototype.toString.call(Component)
		      )
		        (nextRenderLanes = getComponentNameFromFiber(
		          currentlyRenderingFiber$1
		        )),
		          didWarnAboutAsyncClientComponent.has(nextRenderLanes) ||
		            (didWarnAboutAsyncClientComponent.add(nextRenderLanes),
		            console.error(
		              "async/await is not yet supported in Client Components, only Server Components. This error is often caused by accidentally adding `'use client'` to a module that was originally written for the server."
		            ));
		      workInProgress.memoizedState = null;
		      workInProgress.updateQueue = null;
		      workInProgress.lanes = 0;
		      ReactSharedInternals.H =
		        null !== current && null !== current.memoizedState
		          ? HooksDispatcherOnUpdateInDEV
		          : null !== hookTypesDev
		            ? HooksDispatcherOnMountWithHookTypesInDEV
		            : HooksDispatcherOnMountInDEV;
		      shouldDoubleInvokeUserFnsInHooksDEV = nextRenderLanes =
		        (workInProgress.mode & 8) !== NoMode;
		      var children = callComponentInDEV(Component, props, secondArg);
		      shouldDoubleInvokeUserFnsInHooksDEV = !1;
		      didScheduleRenderPhaseUpdateDuringThisPass &&
		        (children = renderWithHooksAgain(
		          workInProgress,
		          Component,
		          props,
		          secondArg
		        ));
		      if (nextRenderLanes) {
		        setIsStrictModeForDevtools(!0);
		        try {
		          children = renderWithHooksAgain(
		            workInProgress,
		            Component,
		            props,
		            secondArg
		          );
		        } finally {
		          setIsStrictModeForDevtools(!1);
		        }
		      }
		      finishRenderingHooks(current, workInProgress);
		      return children;
		    }
		    function finishRenderingHooks(current, workInProgress) {
		      workInProgress._debugHookTypes = hookTypesDev;
		      null === workInProgress.dependencies
		        ? null !== thenableState &&
		          (workInProgress.dependencies = {
		            lanes: 0,
		            firstContext: null,
		            _debugThenableState: thenableState
		          })
		        : (workInProgress.dependencies._debugThenableState = thenableState);
		      ReactSharedInternals.H = ContextOnlyDispatcher;
		      var didRenderTooFewHooks =
		        null !== currentHook && null !== currentHook.next;
		      renderLanes = 0;
		      hookTypesDev =
		        currentHookNameInDev =
		        workInProgressHook =
		        currentHook =
		        currentlyRenderingFiber$1 =
		          null;
		      hookTypesUpdateIndexDev = -1;
		      null !== current &&
		        (current.flags & 31457280) !== (workInProgress.flags & 31457280) &&
		        console.error(
		          "Internal React error: Expected static flag was missing. Please notify the React team."
		        );
		      didScheduleRenderPhaseUpdate = !1;
		      thenableIndexCounter = 0;
		      thenableState = null;
		      if (didRenderTooFewHooks)
		        throw Error(
		          "Rendered fewer hooks than expected. This may be caused by an accidental early return statement."
		        );
		      null === current ||
		        didReceiveUpdate ||
		        ((current = current.dependencies),
		        null !== current &&
		          checkIfContextChanged(current) &&
		          (didReceiveUpdate = !0));
		      needsToResetSuspendedThenableDEV
		        ? ((needsToResetSuspendedThenableDEV = !1), (current = !0))
		        : (current = !1);
		      current &&
		        ((workInProgress =
		          getComponentNameFromFiber(workInProgress) || "Unknown"),
		        didWarnAboutUseWrappedInTryCatch.has(workInProgress) ||
		          didWarnAboutAsyncClientComponent.has(workInProgress) ||
		          (didWarnAboutUseWrappedInTryCatch.add(workInProgress),
		          console.error(
		            "`use` was called from inside a try/catch block. This is not allowed and can lead to unexpected behavior. To handle errors triggered by `use`, wrap your component in a error boundary."
		          )));
		    }
		    function renderWithHooksAgain(workInProgress, Component, props, secondArg) {
		      currentlyRenderingFiber$1 = workInProgress;
		      var numberOfReRenders = 0;
		      do {
		        didScheduleRenderPhaseUpdateDuringThisPass && (thenableState = null);
		        thenableIndexCounter = 0;
		        didScheduleRenderPhaseUpdateDuringThisPass = !1;
		        if (numberOfReRenders >= RE_RENDER_LIMIT)
		          throw Error(
		            "Too many re-renders. React limits the number of renders to prevent an infinite loop."
		          );
		        numberOfReRenders += 1;
		        ignorePreviousDependencies = !1;
		        workInProgressHook = currentHook = null;
		        if (null != workInProgress.updateQueue) {
		          var children = workInProgress.updateQueue;
		          children.lastEffect = null;
		          children.events = null;
		          children.stores = null;
		          null != children.memoCache && (children.memoCache.index = 0);
		        }
		        hookTypesUpdateIndexDev = -1;
		        ReactSharedInternals.H = HooksDispatcherOnRerenderInDEV;
		        children = callComponentInDEV(Component, props, secondArg);
		      } while (didScheduleRenderPhaseUpdateDuringThisPass);
		      return children;
		    }
		    function TransitionAwareHostComponent() {
		      var dispatcher = ReactSharedInternals.H,
		        maybeThenable = dispatcher.useState()[0];
		      maybeThenable =
		        "function" === typeof maybeThenable.then
		          ? useThenable(maybeThenable)
		          : maybeThenable;
		      dispatcher = dispatcher.useState()[0];
		      (null !== currentHook ? currentHook.memoizedState : null) !==
		        dispatcher && (currentlyRenderingFiber$1.flags |= 1024);
		      return maybeThenable;
		    }
		    function checkDidRenderIdHook() {
		      var didRenderIdHook = 0 !== localIdCounter;
		      localIdCounter = 0;
		      return didRenderIdHook;
		    }
		    function bailoutHooks(current, workInProgress, lanes) {
		      workInProgress.updateQueue = current.updateQueue;
		      workInProgress.flags =
		        (workInProgress.mode & 16) !== NoMode
		          ? workInProgress.flags & -201328645
		          : workInProgress.flags & -2053;
		      current.lanes &= ~lanes;
		    }
		    function resetHooksOnUnwind(workInProgress) {
		      if (didScheduleRenderPhaseUpdate) {
		        for (
		          workInProgress = workInProgress.memoizedState;
		          null !== workInProgress;

		        ) {
		          var queue = workInProgress.queue;
		          null !== queue && (queue.pending = null);
		          workInProgress = workInProgress.next;
		        }
		        didScheduleRenderPhaseUpdate = !1;
		      }
		      renderLanes = 0;
		      hookTypesDev =
		        workInProgressHook =
		        currentHook =
		        currentlyRenderingFiber$1 =
		          null;
		      hookTypesUpdateIndexDev = -1;
		      currentHookNameInDev = null;
		      didScheduleRenderPhaseUpdateDuringThisPass = !1;
		      thenableIndexCounter = localIdCounter = 0;
		      thenableState = null;
		    }
		    function mountWorkInProgressHook() {
		      var hook = {
		        memoizedState: null,
		        baseState: null,
		        baseQueue: null,
		        queue: null,
		        next: null
		      };
		      null === workInProgressHook
		        ? (currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook)
		        : (workInProgressHook = workInProgressHook.next = hook);
		      return workInProgressHook;
		    }
		    function updateWorkInProgressHook() {
		      if (null === currentHook) {
		        var nextCurrentHook = currentlyRenderingFiber$1.alternate;
		        nextCurrentHook =
		          null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
		      } else nextCurrentHook = currentHook.next;
		      var nextWorkInProgressHook =
		        null === workInProgressHook
		          ? currentlyRenderingFiber$1.memoizedState
		          : workInProgressHook.next;
		      if (null !== nextWorkInProgressHook)
		        (workInProgressHook = nextWorkInProgressHook),
		          (currentHook = nextCurrentHook);
		      else {
		        if (null === nextCurrentHook) {
		          if (null === currentlyRenderingFiber$1.alternate)
		            throw Error(
		              "Update hook called on initial render. This is likely a bug in React. Please file an issue."
		            );
		          throw Error("Rendered more hooks than during the previous render.");
		        }
		        currentHook = nextCurrentHook;
		        nextCurrentHook = {
		          memoizedState: currentHook.memoizedState,
		          baseState: currentHook.baseState,
		          baseQueue: currentHook.baseQueue,
		          queue: currentHook.queue,
		          next: null
		        };
		        null === workInProgressHook
		          ? (currentlyRenderingFiber$1.memoizedState = workInProgressHook =
		              nextCurrentHook)
		          : (workInProgressHook = workInProgressHook.next = nextCurrentHook);
		      }
		      return workInProgressHook;
		    }
		    function useThenable(thenable) {
		      var index = thenableIndexCounter;
		      thenableIndexCounter += 1;
		      null === thenableState && (thenableState = createThenableState());
		      thenable = trackUsedThenable(thenableState, thenable, index);
		      index = currentlyRenderingFiber$1;
		      null ===
		        (null === workInProgressHook
		          ? index.memoizedState
		          : workInProgressHook.next) &&
		        ((index = index.alternate),
		        (ReactSharedInternals.H =
		          null !== index && null !== index.memoizedState
		            ? HooksDispatcherOnUpdateInDEV
		            : HooksDispatcherOnMountInDEV));
		      return thenable;
		    }
		    function use(usable) {
		      if (null !== usable && "object" === typeof usable) {
		        if ("function" === typeof usable.then) return useThenable(usable);
		        if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
		      }
		      throw Error("An unsupported type was passed to use(): " + String(usable));
		    }
		    function useMemoCache(size) {
		      var memoCache = null,
		        updateQueue = currentlyRenderingFiber$1.updateQueue;
		      null !== updateQueue && (memoCache = updateQueue.memoCache);
		      if (null == memoCache) {
		        var current = currentlyRenderingFiber$1.alternate;
		        null !== current &&
		          ((current = current.updateQueue),
		          null !== current &&
		            ((current = current.memoCache),
		            null != current &&
		              (memoCache = {
		                data: current.data.map(function (array) {
		                  return array.slice();
		                }),
		                index: 0
		              })));
		      }
		      null == memoCache && (memoCache = { data: [], index: 0 });
		      null === updateQueue &&
		        ((updateQueue = createFunctionComponentUpdateQueue()),
		        (currentlyRenderingFiber$1.updateQueue = updateQueue));
		      updateQueue.memoCache = memoCache;
		      updateQueue = memoCache.data[memoCache.index];
		      if (void 0 === updateQueue || ignorePreviousDependencies)
		        for (
		          updateQueue = memoCache.data[memoCache.index] = Array(size),
		            current = 0;
		          current < size;
		          current++
		        )
		          updateQueue[current] = REACT_MEMO_CACHE_SENTINEL;
		      else
		        updateQueue.length !== size &&
		          console.error(
		            "Expected a constant size argument for each invocation of useMemoCache. The previous cache was allocated with size %s but size %s was requested.",
		            updateQueue.length,
		            size
		          );
		      memoCache.index++;
		      return updateQueue;
		    }
		    function basicStateReducer(state, action) {
		      return "function" === typeof action ? action(state) : action;
		    }
		    function mountReducer(reducer, initialArg, init) {
		      var hook = mountWorkInProgressHook();
		      if (void 0 !== init) {
		        var initialState = init(initialArg);
		        if (shouldDoubleInvokeUserFnsInHooksDEV) {
		          setIsStrictModeForDevtools(!0);
		          try {
		            init(initialArg);
		          } finally {
		            setIsStrictModeForDevtools(!1);
		          }
		        }
		      } else initialState = initialArg;
		      hook.memoizedState = hook.baseState = initialState;
		      reducer = {
		        pending: null,
		        lanes: 0,
		        dispatch: null,
		        lastRenderedReducer: reducer,
		        lastRenderedState: initialState
		      };
		      hook.queue = reducer;
		      reducer = reducer.dispatch = dispatchReducerAction.bind(
		        null,
		        currentlyRenderingFiber$1,
		        reducer
		      );
		      return [hook.memoizedState, reducer];
		    }
		    function updateReducer(reducer) {
		      var hook = updateWorkInProgressHook();
		      return updateReducerImpl(hook, currentHook, reducer);
		    }
		    function updateReducerImpl(hook, current, reducer) {
		      var queue = hook.queue;
		      if (null === queue)
		        throw Error(
		          "Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)"
		        );
		      queue.lastRenderedReducer = reducer;
		      var baseQueue = hook.baseQueue,
		        pendingQueue = queue.pending;
		      if (null !== pendingQueue) {
		        if (null !== baseQueue) {
		          var baseFirst = baseQueue.next;
		          baseQueue.next = pendingQueue.next;
		          pendingQueue.next = baseFirst;
		        }
		        current.baseQueue !== baseQueue &&
		          console.error(
		            "Internal error: Expected work-in-progress queue to be a clone. This is a bug in React."
		          );
		        current.baseQueue = baseQueue = pendingQueue;
		        queue.pending = null;
		      }
		      pendingQueue = hook.baseState;
		      if (null === baseQueue) hook.memoizedState = pendingQueue;
		      else {
		        current = baseQueue.next;
		        var newBaseQueueFirst = (baseFirst = null),
		          newBaseQueueLast = null,
		          update = current,
		          didReadFromEntangledAsyncAction = !1;
		        do {
		          var updateLane = update.lane & -536870913;
		          if (
		            updateLane !== update.lane
		              ? (workInProgressRootRenderLanes & updateLane) === updateLane
		              : (renderLanes & updateLane) === updateLane
		          ) {
		            var revertLane = update.revertLane;
		            if (0 === revertLane)
		              null !== newBaseQueueLast &&
		                (newBaseQueueLast = newBaseQueueLast.next =
		                  {
		                    lane: 0,
		                    revertLane: 0,
		                    action: update.action,
		                    hasEagerState: update.hasEagerState,
		                    eagerState: update.eagerState,
		                    next: null
		                  }),
		                updateLane === currentEntangledLane &&
		                  (didReadFromEntangledAsyncAction = !0);
		            else if ((renderLanes & revertLane) === revertLane) {
		              update = update.next;
		              revertLane === currentEntangledLane &&
		                (didReadFromEntangledAsyncAction = !0);
		              continue;
		            } else
		              (updateLane = {
		                lane: 0,
		                revertLane: update.revertLane,
		                action: update.action,
		                hasEagerState: update.hasEagerState,
		                eagerState: update.eagerState,
		                next: null
		              }),
		                null === newBaseQueueLast
		                  ? ((newBaseQueueFirst = newBaseQueueLast = updateLane),
		                    (baseFirst = pendingQueue))
		                  : (newBaseQueueLast = newBaseQueueLast.next = updateLane),
		                (currentlyRenderingFiber$1.lanes |= revertLane),
		                (workInProgressRootSkippedLanes |= revertLane);
		            updateLane = update.action;
		            shouldDoubleInvokeUserFnsInHooksDEV &&
		              reducer(pendingQueue, updateLane);
		            pendingQueue = update.hasEagerState
		              ? update.eagerState
		              : reducer(pendingQueue, updateLane);
		          } else
		            (revertLane = {
		              lane: updateLane,
		              revertLane: update.revertLane,
		              action: update.action,
		              hasEagerState: update.hasEagerState,
		              eagerState: update.eagerState,
		              next: null
		            }),
		              null === newBaseQueueLast
		                ? ((newBaseQueueFirst = newBaseQueueLast = revertLane),
		                  (baseFirst = pendingQueue))
		                : (newBaseQueueLast = newBaseQueueLast.next = revertLane),
		              (currentlyRenderingFiber$1.lanes |= updateLane),
		              (workInProgressRootSkippedLanes |= updateLane);
		          update = update.next;
		        } while (null !== update && update !== current);
		        null === newBaseQueueLast
		          ? (baseFirst = pendingQueue)
		          : (newBaseQueueLast.next = newBaseQueueFirst);
		        if (
		          !objectIs(pendingQueue, hook.memoizedState) &&
		          ((didReceiveUpdate = !0),
		          didReadFromEntangledAsyncAction &&
		            ((reducer = currentEntangledActionThenable), null !== reducer))
		        )
		          throw reducer;
		        hook.memoizedState = pendingQueue;
		        hook.baseState = baseFirst;
		        hook.baseQueue = newBaseQueueLast;
		        queue.lastRenderedState = pendingQueue;
		      }
		      null === baseQueue && (queue.lanes = 0);
		      return [hook.memoizedState, queue.dispatch];
		    }
		    function rerenderReducer(reducer) {
		      var hook = updateWorkInProgressHook(),
		        queue = hook.queue;
		      if (null === queue)
		        throw Error(
		          "Should have a queue. You are likely calling Hooks conditionally, which is not allowed. (https://react.dev/link/invalid-hook-call)"
		        );
		      queue.lastRenderedReducer = reducer;
		      var dispatch = queue.dispatch,
		        lastRenderPhaseUpdate = queue.pending,
		        newState = hook.memoizedState;
		      if (null !== lastRenderPhaseUpdate) {
		        queue.pending = null;
		        var update = (lastRenderPhaseUpdate = lastRenderPhaseUpdate.next);
		        do
		          (newState = reducer(newState, update.action)), (update = update.next);
		        while (update !== lastRenderPhaseUpdate);
		        objectIs(newState, hook.memoizedState) || (didReceiveUpdate = !0);
		        hook.memoizedState = newState;
		        null === hook.baseQueue && (hook.baseState = newState);
		        queue.lastRenderedState = newState;
		      }
		      return [newState, dispatch];
		    }
		    function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
		      var fiber = currentlyRenderingFiber$1,
		        hook = mountWorkInProgressHook();
		      if (isHydrating) {
		        if (void 0 === getServerSnapshot)
		          throw Error(
		            "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
		          );
		        var nextSnapshot = getServerSnapshot();
		        didWarnUncachedGetSnapshot ||
		          nextSnapshot === getServerSnapshot() ||
		          (console.error(
		            "The result of getServerSnapshot should be cached to avoid an infinite loop"
		          ),
		          (didWarnUncachedGetSnapshot = !0));
		      } else {
		        nextSnapshot = getSnapshot();
		        didWarnUncachedGetSnapshot ||
		          ((getServerSnapshot = getSnapshot()),
		          objectIs(nextSnapshot, getServerSnapshot) ||
		            (console.error(
		              "The result of getSnapshot should be cached to avoid an infinite loop"
		            ),
		            (didWarnUncachedGetSnapshot = !0)));
		        if (null === workInProgressRoot)
		          throw Error(
		            "Expected a work-in-progress root. This is a bug in React. Please file an issue."
		          );
		        0 !== (workInProgressRootRenderLanes & 60) ||
		          pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
		      }
		      hook.memoizedState = nextSnapshot;
		      getServerSnapshot = { value: nextSnapshot, getSnapshot: getSnapshot };
		      hook.queue = getServerSnapshot;
		      mountEffect(
		        subscribeToStore.bind(null, fiber, getServerSnapshot, subscribe),
		        [subscribe]
		      );
		      fiber.flags |= 2048;
		      pushEffect(
		        HasEffect | Passive,
		        updateStoreInstance.bind(
		          null,
		          fiber,
		          getServerSnapshot,
		          nextSnapshot,
		          getSnapshot
		        ),
		        { destroy: void 0 },
		        null
		      );
		      return nextSnapshot;
		    }
		    function updateSyncExternalStore(
		      subscribe,
		      getSnapshot,
		      getServerSnapshot
		    ) {
		      var fiber = currentlyRenderingFiber$1,
		        hook = updateWorkInProgressHook(),
		        isHydrating$jscomp$0 = isHydrating;
		      if (isHydrating$jscomp$0) {
		        if (void 0 === getServerSnapshot)
		          throw Error(
		            "Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering."
		          );
		        getServerSnapshot = getServerSnapshot();
		      } else if (
		        ((getServerSnapshot = getSnapshot()), !didWarnUncachedGetSnapshot)
		      ) {
		        var cachedSnapshot = getSnapshot();
		        objectIs(getServerSnapshot, cachedSnapshot) ||
		          (console.error(
		            "The result of getSnapshot should be cached to avoid an infinite loop"
		          ),
		          (didWarnUncachedGetSnapshot = !0));
		      }
		      if (
		        (cachedSnapshot = !objectIs(
		          (currentHook || hook).memoizedState,
		          getServerSnapshot
		        ))
		      )
		        (hook.memoizedState = getServerSnapshot), (didReceiveUpdate = !0);
		      hook = hook.queue;
		      var create = subscribeToStore.bind(null, fiber, hook, subscribe);
		      updateEffectImpl(2048, Passive, create, [subscribe]);
		      if (
		        hook.getSnapshot !== getSnapshot ||
		        cachedSnapshot ||
		        (null !== workInProgressHook &&
		          workInProgressHook.memoizedState.tag & HasEffect)
		      ) {
		        fiber.flags |= 2048;
		        pushEffect(
		          HasEffect | Passive,
		          updateStoreInstance.bind(
		            null,
		            fiber,
		            hook,
		            getServerSnapshot,
		            getSnapshot
		          ),
		          { destroy: void 0 },
		          null
		        );
		        if (null === workInProgressRoot)
		          throw Error(
		            "Expected a work-in-progress root. This is a bug in React. Please file an issue."
		          );
		        isHydrating$jscomp$0 ||
		          0 !== (renderLanes & 60) ||
		          pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
		      }
		      return getServerSnapshot;
		    }
		    function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
		      fiber.flags |= 16384;
		      fiber = { getSnapshot: getSnapshot, value: renderedSnapshot };
		      getSnapshot = currentlyRenderingFiber$1.updateQueue;
		      null === getSnapshot
		        ? ((getSnapshot = createFunctionComponentUpdateQueue()),
		          (currentlyRenderingFiber$1.updateQueue = getSnapshot),
		          (getSnapshot.stores = [fiber]))
		        : ((renderedSnapshot = getSnapshot.stores),
		          null === renderedSnapshot
		            ? (getSnapshot.stores = [fiber])
		            : renderedSnapshot.push(fiber));
		    }
		    function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
		      inst.value = nextSnapshot;
		      inst.getSnapshot = getSnapshot;
		      checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
		    }
		    function subscribeToStore(fiber, inst, subscribe) {
		      return subscribe(function () {
		        checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
		      });
		    }
		    function checkIfSnapshotChanged(inst) {
		      var latestGetSnapshot = inst.getSnapshot;
		      inst = inst.value;
		      try {
		        var nextValue = latestGetSnapshot();
		        return !objectIs(inst, nextValue);
		      } catch (error) {
		        return !0;
		      }
		    }
		    function forceStoreRerender(fiber) {
		      var root = enqueueConcurrentRenderForLane(fiber, 2);
		      null !== root && scheduleUpdateOnFiber(root, fiber, 2);
		    }
		    function mountStateImpl(initialState) {
		      var hook = mountWorkInProgressHook();
		      if ("function" === typeof initialState) {
		        var initialStateInitializer = initialState;
		        initialState = initialStateInitializer();
		        if (shouldDoubleInvokeUserFnsInHooksDEV) {
		          setIsStrictModeForDevtools(!0);
		          try {
		            initialStateInitializer();
		          } finally {
		            setIsStrictModeForDevtools(!1);
		          }
		        }
		      }
		      hook.memoizedState = hook.baseState = initialState;
		      hook.queue = {
		        pending: null,
		        lanes: 0,
		        dispatch: null,
		        lastRenderedReducer: basicStateReducer,
		        lastRenderedState: initialState
		      };
		      return hook;
		    }
		    function mountState(initialState) {
		      initialState = mountStateImpl(initialState);
		      var queue = initialState.queue,
		        dispatch = dispatchSetState.bind(
		          null,
		          currentlyRenderingFiber$1,
		          queue
		        );
		      queue.dispatch = dispatch;
		      return [initialState.memoizedState, dispatch];
		    }
		    function mountOptimistic(passthrough) {
		      var hook = mountWorkInProgressHook();
		      hook.memoizedState = hook.baseState = passthrough;
		      var queue = {
		        pending: null,
		        lanes: 0,
		        dispatch: null,
		        lastRenderedReducer: null,
		        lastRenderedState: null
		      };
		      hook.queue = queue;
		      hook = dispatchOptimisticSetState.bind(
		        null,
		        currentlyRenderingFiber$1,
		        !0,
		        queue
		      );
		      queue.dispatch = hook;
		      return [passthrough, hook];
		    }
		    function updateOptimistic(passthrough, reducer) {
		      var hook = updateWorkInProgressHook();
		      return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
		    }
		    function updateOptimisticImpl(hook, current, passthrough, reducer) {
		      hook.baseState = passthrough;
		      return updateReducerImpl(
		        hook,
		        currentHook,
		        "function" === typeof reducer ? reducer : basicStateReducer
		      );
		    }
		    function rerenderOptimistic(passthrough, reducer) {
		      var hook = updateWorkInProgressHook();
		      if (null !== currentHook)
		        return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
		      hook.baseState = passthrough;
		      return [passthrough, hook.queue.dispatch];
		    }
		    function dispatchActionState(
		      fiber,
		      actionQueue,
		      setPendingState,
		      setState,
		      payload
		    ) {
		      if (isRenderPhaseUpdate(fiber))
		        throw Error("Cannot update form state while rendering.");
		      fiber = actionQueue.action;
		      if (null !== fiber) {
		        var actionNode = {
		          payload: payload,
		          action: fiber,
		          next: null,
		          isTransition: !0,
		          status: "pending",
		          value: null,
		          reason: null,
		          listeners: [],
		          then: function (listener) {
		            actionNode.listeners.push(listener);
		          }
		        };
		        null !== ReactSharedInternals.T
		          ? setPendingState(!0)
		          : (actionNode.isTransition = !1);
		        setState(actionNode);
		        setPendingState = actionQueue.pending;
		        null === setPendingState
		          ? ((actionNode.next = actionQueue.pending = actionNode),
		            runActionStateAction(actionQueue, actionNode))
		          : ((actionNode.next = setPendingState.next),
		            (actionQueue.pending = setPendingState.next = actionNode));
		      }
		    }
		    function runActionStateAction(actionQueue, node) {
		      var action = node.action,
		        payload = node.payload,
		        prevState = actionQueue.state;
		      if (node.isTransition) {
		        var prevTransition = ReactSharedInternals.T,
		          currentTransition = {};
		        ReactSharedInternals.T = currentTransition;
		        ReactSharedInternals.T._updatedFibers = new Set();
		        try {
		          var returnValue = action(prevState, payload),
		            onStartTransitionFinish = ReactSharedInternals.S;
		          null !== onStartTransitionFinish &&
		            onStartTransitionFinish(currentTransition, returnValue);
		          handleActionReturnValue(actionQueue, node, returnValue);
		        } catch (error) {
		          onActionError(actionQueue, node, error);
		        } finally {
		          (ReactSharedInternals.T = prevTransition),
		            null === prevTransition &&
		              currentTransition._updatedFibers &&
		              ((actionQueue = currentTransition._updatedFibers.size),
		              currentTransition._updatedFibers.clear(),
		              10 < actionQueue &&
		                console.warn(
		                  "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
		                ));
		        }
		      } else
		        try {
		          (currentTransition = action(prevState, payload)),
		            handleActionReturnValue(actionQueue, node, currentTransition);
		        } catch (error$2) {
		          onActionError(actionQueue, node, error$2);
		        }
		    }
		    function handleActionReturnValue(actionQueue, node, returnValue) {
		      null !== returnValue &&
		      "object" === typeof returnValue &&
		      "function" === typeof returnValue.then
		        ? (returnValue.then(
		            function (nextState) {
		              onActionSuccess(actionQueue, node, nextState);
		            },
		            function (error) {
		              return onActionError(actionQueue, node, error);
		            }
		          ),
		          node.isTransition ||
		            console.error(
		              "An async function was passed to useActionState, but it was dispatched outside of an action context. This is likely not what you intended. Either pass the dispatch function to an `action` prop, or dispatch manually inside `startTransition`"
		            ))
		        : onActionSuccess(actionQueue, node, returnValue);
		    }
		    function onActionSuccess(actionQueue, actionNode, nextState) {
		      actionNode.status = "fulfilled";
		      actionNode.value = nextState;
		      notifyActionListeners(actionNode);
		      actionQueue.state = nextState;
		      actionNode = actionQueue.pending;
		      null !== actionNode &&
		        ((nextState = actionNode.next),
		        nextState === actionNode
		          ? (actionQueue.pending = null)
		          : ((nextState = nextState.next),
		            (actionNode.next = nextState),
		            runActionStateAction(actionQueue, nextState)));
		    }
		    function onActionError(actionQueue, actionNode, error) {
		      var last = actionQueue.pending;
		      actionQueue.pending = null;
		      if (null !== last) {
		        last = last.next;
		        do
		          (actionNode.status = "rejected"),
		            (actionNode.reason = error),
		            notifyActionListeners(actionNode),
		            (actionNode = actionNode.next);
		        while (actionNode !== last);
		      }
		      actionQueue.action = null;
		    }
		    function notifyActionListeners(actionNode) {
		      actionNode = actionNode.listeners;
		      for (var i = 0; i < actionNode.length; i++) (0, actionNode[i])();
		    }
		    function actionStateReducer(oldState, newState) {
		      return newState;
		    }
		    function mountActionState(action, initialStateProp) {
		      if (isHydrating) {
		        var ssrFormState = workInProgressRoot.formState;
		        if (null !== ssrFormState) {
		          a: {
		            var isMatching = currentlyRenderingFiber$1;
		            if (isHydrating) {
		              if (nextHydratableInstance) {
		                var markerInstance = canHydrateFormStateMarker(
		                  nextHydratableInstance,
		                  rootOrSingletonContext
		                );
		                if (markerInstance) {
		                  nextHydratableInstance =
		                    getNextHydratableSibling(markerInstance);
		                  isMatching = isFormStateMarkerMatching(markerInstance);
		                  break a;
		                }
		              }
		              throwOnHydrationMismatch(isMatching);
		            }
		            isMatching = !1;
		          }
		          isMatching && (initialStateProp = ssrFormState[0]);
		        }
		      }
		      ssrFormState = mountWorkInProgressHook();
		      ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp;
		      isMatching = {
		        pending: null,
		        lanes: 0,
		        dispatch: null,
		        lastRenderedReducer: actionStateReducer,
		        lastRenderedState: initialStateProp
		      };
		      ssrFormState.queue = isMatching;
		      ssrFormState = dispatchSetState.bind(
		        null,
		        currentlyRenderingFiber$1,
		        isMatching
		      );
		      isMatching.dispatch = ssrFormState;
		      isMatching = mountStateImpl(!1);
		      var setPendingState = dispatchOptimisticSetState.bind(
		        null,
		        currentlyRenderingFiber$1,
		        !1,
		        isMatching.queue
		      );
		      isMatching = mountWorkInProgressHook();
		      markerInstance = {
		        state: initialStateProp,
		        dispatch: null,
		        action: action,
		        pending: null
		      };
		      isMatching.queue = markerInstance;
		      ssrFormState = dispatchActionState.bind(
		        null,
		        currentlyRenderingFiber$1,
		        markerInstance,
		        setPendingState,
		        ssrFormState
		      );
		      markerInstance.dispatch = ssrFormState;
		      isMatching.memoizedState = action;
		      return [initialStateProp, ssrFormState, !1];
		    }
		    function updateActionState(action) {
		      var stateHook = updateWorkInProgressHook();
		      return updateActionStateImpl(stateHook, currentHook, action);
		    }
		    function updateActionStateImpl(stateHook, currentStateHook, action) {
		      currentStateHook = updateReducerImpl(
		        stateHook,
		        currentStateHook,
		        actionStateReducer
		      )[0];
		      stateHook = updateReducer(basicStateReducer)[0];
		      currentStateHook =
		        "object" === typeof currentStateHook &&
		        null !== currentStateHook &&
		        "function" === typeof currentStateHook.then
		          ? useThenable(currentStateHook)
		          : currentStateHook;
		      var actionQueueHook = updateWorkInProgressHook(),
		        actionQueue = actionQueueHook.queue,
		        dispatch = actionQueue.dispatch;
		      action !== actionQueueHook.memoizedState &&
		        ((currentlyRenderingFiber$1.flags |= 2048),
		        pushEffect(
		          HasEffect | Passive,
		          actionStateActionEffect.bind(null, actionQueue, action),
		          { destroy: void 0 },
		          null
		        ));
		      return [currentStateHook, dispatch, stateHook];
		    }
		    function actionStateActionEffect(actionQueue, action) {
		      actionQueue.action = action;
		    }
		    function rerenderActionState(action) {
		      var stateHook = updateWorkInProgressHook(),
		        currentStateHook = currentHook;
		      if (null !== currentStateHook)
		        return updateActionStateImpl(stateHook, currentStateHook, action);
		      updateWorkInProgressHook();
		      stateHook = stateHook.memoizedState;
		      currentStateHook = updateWorkInProgressHook();
		      var dispatch = currentStateHook.queue.dispatch;
		      currentStateHook.memoizedState = action;
		      return [stateHook, dispatch, !1];
		    }
		    function pushEffect(tag, create, inst, deps) {
		      tag = { tag: tag, create: create, inst: inst, deps: deps, next: null };
		      create = currentlyRenderingFiber$1.updateQueue;
		      null === create &&
		        ((create = createFunctionComponentUpdateQueue()),
		        (currentlyRenderingFiber$1.updateQueue = create));
		      inst = create.lastEffect;
		      null === inst
		        ? (create.lastEffect = tag.next = tag)
		        : ((deps = inst.next),
		          (inst.next = tag),
		          (tag.next = deps),
		          (create.lastEffect = tag));
		      return tag;
		    }
		    function mountRef(initialValue) {
		      var hook = mountWorkInProgressHook();
		      initialValue = { current: initialValue };
		      return (hook.memoizedState = initialValue);
		    }
		    function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
		      var hook = mountWorkInProgressHook();
		      currentlyRenderingFiber$1.flags |= fiberFlags;
		      hook.memoizedState = pushEffect(
		        HasEffect | hookFlags,
		        create,
		        { destroy: void 0 },
		        void 0 === deps ? null : deps
		      );
		    }
		    function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
		      var hook = updateWorkInProgressHook();
		      deps = void 0 === deps ? null : deps;
		      var inst = hook.memoizedState.inst;
		      null !== currentHook &&
		      null !== deps &&
		      areHookInputsEqual(deps, currentHook.memoizedState.deps)
		        ? (hook.memoizedState = pushEffect(hookFlags, create, inst, deps))
		        : ((currentlyRenderingFiber$1.flags |= fiberFlags),
		          (hook.memoizedState = pushEffect(
		            HasEffect | hookFlags,
		            create,
		            inst,
		            deps
		          )));
		    }
		    function mountEffect(create, deps) {
		      (currentlyRenderingFiber$1.mode & 16) !== NoMode &&
		      (currentlyRenderingFiber$1.mode & 64) === NoMode
		        ? mountEffectImpl(142608384, Passive, create, deps)
		        : mountEffectImpl(8390656, Passive, create, deps);
		    }
		    function mountLayoutEffect(create, deps) {
		      var fiberFlags = 4194308;
		      (currentlyRenderingFiber$1.mode & 16) !== NoMode &&
		        (fiberFlags |= 67108864);
		      return mountEffectImpl(fiberFlags, Layout, create, deps);
		    }
		    function imperativeHandleEffect(create, ref) {
		      if ("function" === typeof ref) {
		        create = create();
		        var refCleanup = ref(create);
		        return function () {
		          "function" === typeof refCleanup ? refCleanup() : ref(null);
		        };
		      }
		      if (null !== ref && void 0 !== ref)
		        return (
		          ref.hasOwnProperty("current") ||
		            console.error(
		              "Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.",
		              "an object with keys {" + Object.keys(ref).join(", ") + "}"
		            ),
		          (create = create()),
		          (ref.current = create),
		          function () {
		            ref.current = null;
		          }
		        );
		    }
		    function mountImperativeHandle(ref, create, deps) {
		      "function" !== typeof create &&
		        console.error(
		          "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
		          null !== create ? typeof create : "null"
		        );
		      deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
		      var fiberFlags = 4194308;
		      (currentlyRenderingFiber$1.mode & 16) !== NoMode &&
		        (fiberFlags |= 67108864);
		      mountEffectImpl(
		        fiberFlags,
		        Layout,
		        imperativeHandleEffect.bind(null, create, ref),
		        deps
		      );
		    }
		    function updateImperativeHandle(ref, create, deps) {
		      "function" !== typeof create &&
		        console.error(
		          "Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.",
		          null !== create ? typeof create : "null"
		        );
		      deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
		      updateEffectImpl(
		        4,
		        Layout,
		        imperativeHandleEffect.bind(null, create, ref),
		        deps
		      );
		    }
		    function mountCallback(callback, deps) {
		      mountWorkInProgressHook().memoizedState = [
		        callback,
		        void 0 === deps ? null : deps
		      ];
		      return callback;
		    }
		    function updateCallback(callback, deps) {
		      var hook = updateWorkInProgressHook();
		      deps = void 0 === deps ? null : deps;
		      var prevState = hook.memoizedState;
		      if (null !== deps && areHookInputsEqual(deps, prevState[1]))
		        return prevState[0];
		      hook.memoizedState = [callback, deps];
		      return callback;
		    }
		    function mountMemo(nextCreate, deps) {
		      var hook = mountWorkInProgressHook();
		      deps = void 0 === deps ? null : deps;
		      var nextValue = nextCreate();
		      if (shouldDoubleInvokeUserFnsInHooksDEV) {
		        setIsStrictModeForDevtools(!0);
		        try {
		          nextCreate();
		        } finally {
		          setIsStrictModeForDevtools(!1);
		        }
		      }
		      hook.memoizedState = [nextValue, deps];
		      return nextValue;
		    }
		    function updateMemo(nextCreate, deps) {
		      var hook = updateWorkInProgressHook();
		      deps = void 0 === deps ? null : deps;
		      var prevState = hook.memoizedState;
		      if (null !== deps && areHookInputsEqual(deps, prevState[1]))
		        return prevState[0];
		      prevState = nextCreate();
		      if (shouldDoubleInvokeUserFnsInHooksDEV) {
		        setIsStrictModeForDevtools(!0);
		        try {
		          nextCreate();
		        } finally {
		          setIsStrictModeForDevtools(!1);
		        }
		      }
		      hook.memoizedState = [prevState, deps];
		      return prevState;
		    }
		    function mountDeferredValue(value, initialValue) {
		      var hook = mountWorkInProgressHook();
		      return mountDeferredValueImpl(hook, value, initialValue);
		    }
		    function updateDeferredValue(value, initialValue) {
		      var hook = updateWorkInProgressHook();
		      return updateDeferredValueImpl(
		        hook,
		        currentHook.memoizedState,
		        value,
		        initialValue
		      );
		    }
		    function rerenderDeferredValue(value, initialValue) {
		      var hook = updateWorkInProgressHook();
		      return null === currentHook
		        ? mountDeferredValueImpl(hook, value, initialValue)
		        : updateDeferredValueImpl(
		            hook,
		            currentHook.memoizedState,
		            value,
		            initialValue
		          );
		    }
		    function mountDeferredValueImpl(hook, value, initialValue) {
		      if (void 0 === initialValue || 0 !== (renderLanes & 1073741824))
		        return (hook.memoizedState = value);
		      hook.memoizedState = initialValue;
		      hook = requestDeferredLane();
		      currentlyRenderingFiber$1.lanes |= hook;
		      workInProgressRootSkippedLanes |= hook;
		      return initialValue;
		    }
		    function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
		      if (objectIs(value, prevValue)) return value;
		      if (null !== currentTreeHiddenStackCursor.current)
		        return (
		          (hook = mountDeferredValueImpl(hook, value, initialValue)),
		          objectIs(hook, prevValue) || (didReceiveUpdate = !0),
		          hook
		        );
		      if (0 === (renderLanes & 42))
		        return (didReceiveUpdate = !0), (hook.memoizedState = value);
		      hook = requestDeferredLane();
		      currentlyRenderingFiber$1.lanes |= hook;
		      workInProgressRootSkippedLanes |= hook;
		      return prevValue;
		    }
		    function startTransition(
		      fiber,
		      queue,
		      pendingState,
		      finishedState,
		      callback
		    ) {
		      var previousPriority = getCurrentUpdatePriority();
		      setCurrentUpdatePriority(
		        0 !== previousPriority && 8 > previousPriority ? previousPriority : 8
		      );
		      var prevTransition = ReactSharedInternals.T,
		        currentTransition = {};
		      ReactSharedInternals.T = currentTransition;
		      dispatchOptimisticSetState(fiber, !1, queue, pendingState);
		      currentTransition._updatedFibers = new Set();
		      try {
		        var returnValue = callback(),
		          onStartTransitionFinish = ReactSharedInternals.S;
		        null !== onStartTransitionFinish &&
		          onStartTransitionFinish(currentTransition, returnValue);
		        if (
		          null !== returnValue &&
		          "object" === typeof returnValue &&
		          "function" === typeof returnValue.then
		        ) {
		          var thenableForFinishedState = chainThenableValue(
		            returnValue,
		            finishedState
		          );
		          dispatchSetStateInternal(
		            fiber,
		            queue,
		            thenableForFinishedState,
		            requestUpdateLane(fiber)
		          );
		        } else
		          dispatchSetStateInternal(
		            fiber,
		            queue,
		            finishedState,
		            requestUpdateLane(fiber)
		          );
		      } catch (error) {
		        dispatchSetStateInternal(
		          fiber,
		          queue,
		          { then: function () {}, status: "rejected", reason: error },
		          requestUpdateLane(fiber)
		        );
		      } finally {
		        setCurrentUpdatePriority(previousPriority),
		          (ReactSharedInternals.T = prevTransition),
		          null === prevTransition &&
		            currentTransition._updatedFibers &&
		            ((fiber = currentTransition._updatedFibers.size),
		            currentTransition._updatedFibers.clear(),
		            10 < fiber &&
		              console.warn(
		                "Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table."
		              ));
		      }
		    }
		    function ensureFormComponentIsStateful(formFiber) {
		      var existingStateHook = formFiber.memoizedState;
		      if (null !== existingStateHook) return existingStateHook;
		      existingStateHook = {
		        memoizedState: NotPendingTransition,
		        baseState: NotPendingTransition,
		        baseQueue: null,
		        queue: {
		          pending: null,
		          lanes: 0,
		          dispatch: null,
		          lastRenderedReducer: basicStateReducer,
		          lastRenderedState: NotPendingTransition
		        },
		        next: null
		      };
		      var initialResetState = {};
		      existingStateHook.next = {
		        memoizedState: initialResetState,
		        baseState: initialResetState,
		        baseQueue: null,
		        queue: {
		          pending: null,
		          lanes: 0,
		          dispatch: null,
		          lastRenderedReducer: basicStateReducer,
		          lastRenderedState: initialResetState
		        },
		        next: null
		      };
		      formFiber.memoizedState = existingStateHook;
		      formFiber = formFiber.alternate;
		      null !== formFiber && (formFiber.memoizedState = existingStateHook);
		      return existingStateHook;
		    }
		    function mountTransition() {
		      var stateHook = mountStateImpl(!1);
		      stateHook = startTransition.bind(
		        null,
		        currentlyRenderingFiber$1,
		        stateHook.queue,
		        !0,
		        !1
		      );
		      mountWorkInProgressHook().memoizedState = stateHook;
		      return [!1, stateHook];
		    }
		    function updateTransition() {
		      var booleanOrThenable = updateReducer(basicStateReducer)[0],
		        start = updateWorkInProgressHook().memoizedState;
		      return [
		        "boolean" === typeof booleanOrThenable
		          ? booleanOrThenable
		          : useThenable(booleanOrThenable),
		        start
		      ];
		    }
		    function rerenderTransition() {
		      var booleanOrThenable = rerenderReducer(basicStateReducer)[0],
		        start = updateWorkInProgressHook().memoizedState;
		      return [
		        "boolean" === typeof booleanOrThenable
		          ? booleanOrThenable
		          : useThenable(booleanOrThenable),
		        start
		      ];
		    }
		    function useHostTransitionStatus() {
		      return readContext(HostTransitionContext);
		    }
		    function mountId() {
		      var hook = mountWorkInProgressHook(),
		        identifierPrefix = workInProgressRoot.identifierPrefix;
		      if (isHydrating) {
		        var treeId = treeContextOverflow;
		        var idWithLeadingBit = treeContextId;
		        treeId =
		          (
		            idWithLeadingBit & ~(1 << (32 - clz32(idWithLeadingBit) - 1))
		          ).toString(32) + treeId;
		        identifierPrefix = ":" + identifierPrefix + "R" + treeId;
		        treeId = localIdCounter++;
		        0 < treeId && (identifierPrefix += "H" + treeId.toString(32));
		        identifierPrefix += ":";
		      } else
		        (treeId = globalClientIdCounter++),
		          (identifierPrefix =
		            ":" + identifierPrefix + "r" + treeId.toString(32) + ":");
		      return (hook.memoizedState = identifierPrefix);
		    }
		    function mountRefresh() {
		      return (mountWorkInProgressHook().memoizedState = refreshCache.bind(
		        null,
		        currentlyRenderingFiber$1
		      ));
		    }
		    function refreshCache(fiber, seedKey) {
		      for (var provider = fiber.return; null !== provider; ) {
		        switch (provider.tag) {
		          case 24:
		          case 3:
		            var lane = requestUpdateLane(provider);
		            fiber = createUpdate(lane);
		            var root = enqueueUpdate(provider, fiber, lane);
		            null !== root &&
		              (scheduleUpdateOnFiber(root, provider, lane),
		              entangleTransitions(root, provider, lane));
		            provider = createCache();
		            null !== seedKey &&
		              void 0 !== seedKey &&
		              null !== root &&
		              console.error(
		                "The seed argument is not enabled outside experimental channels."
		              );
		            fiber.payload = { cache: provider };
		            return;
		        }
		        provider = provider.return;
		      }
		    }
		    function dispatchReducerAction(
		      fiber,
		      queue,
		      action,
		      JSCompiler_OptimizeArgumentsArray_p0
		    ) {
		      "function" === typeof JSCompiler_OptimizeArgumentsArray_p0 &&
		        console.error(
		          "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
		        );
		      JSCompiler_OptimizeArgumentsArray_p0 = requestUpdateLane(fiber);
		      action = {
		        lane: JSCompiler_OptimizeArgumentsArray_p0,
		        revertLane: 0,
		        action: action,
		        hasEagerState: !1,
		        eagerState: null,
		        next: null
		      };
		      isRenderPhaseUpdate(fiber)
		        ? enqueueRenderPhaseUpdate(queue, action)
		        : ((action = enqueueConcurrentHookUpdate(
		            fiber,
		            queue,
		            action,
		            JSCompiler_OptimizeArgumentsArray_p0
		          )),
		          null !== action &&
		            (scheduleUpdateOnFiber(
		              action,
		              fiber,
		              JSCompiler_OptimizeArgumentsArray_p0
		            ),
		            entangleTransitionUpdate(
		              action,
		              queue,
		              JSCompiler_OptimizeArgumentsArray_p0
		            )));
		      markStateUpdateScheduled(fiber, JSCompiler_OptimizeArgumentsArray_p0);
		    }
		    function dispatchSetState(
		      fiber,
		      queue,
		      action,
		      JSCompiler_OptimizeArgumentsArray_p1
		    ) {
		      "function" === typeof JSCompiler_OptimizeArgumentsArray_p1 &&
		        console.error(
		          "State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect()."
		        );
		      JSCompiler_OptimizeArgumentsArray_p1 = requestUpdateLane(fiber);
		      dispatchSetStateInternal(
		        fiber,
		        queue,
		        action,
		        JSCompiler_OptimizeArgumentsArray_p1
		      );
		      markStateUpdateScheduled(fiber, JSCompiler_OptimizeArgumentsArray_p1);
		    }
		    function dispatchSetStateInternal(fiber, queue, action, lane) {
		      var update = {
		        lane: lane,
		        revertLane: 0,
		        action: action,
		        hasEagerState: !1,
		        eagerState: null,
		        next: null
		      };
		      if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
		      else {
		        var alternate = fiber.alternate;
		        if (
		          0 === fiber.lanes &&
		          (null === alternate || 0 === alternate.lanes) &&
		          ((alternate = queue.lastRenderedReducer), null !== alternate)
		        ) {
		          var prevDispatcher = ReactSharedInternals.H;
		          ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
		          try {
		            var currentState = queue.lastRenderedState,
		              eagerState = alternate(currentState, action);
		            update.hasEagerState = !0;
		            update.eagerState = eagerState;
		            if (objectIs(eagerState, currentState))
		              return (
		                enqueueUpdate$1(fiber, queue, update, 0),
		                null === workInProgressRoot &&
		                  finishQueueingConcurrentUpdates(),
		                !1
		              );
		          } catch (error) {
		          } finally {
		            ReactSharedInternals.H = prevDispatcher;
		          }
		        }
		        action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
		        if (null !== action)
		          return (
		            scheduleUpdateOnFiber(action, fiber, lane),
		            entangleTransitionUpdate(action, queue, lane),
		            !0
		          );
		      }
		      return !1;
		    }
		    function dispatchOptimisticSetState(
		      fiber,
		      throwIfDuringRender,
		      queue,
		      action
		    ) {
		      null === ReactSharedInternals.T &&
		        0 === currentEntangledLane &&
		        console.error(
		          "An optimistic state update occurred outside a transition or action. To fix, move the update to an action, or wrap with startTransition."
		        );
		      action = {
		        lane: 2,
		        revertLane: requestTransitionLane(),
		        action: action,
		        hasEagerState: !1,
		        eagerState: null,
		        next: null
		      };
		      if (isRenderPhaseUpdate(fiber)) {
		        if (throwIfDuringRender)
		          throw Error("Cannot update optimistic state while rendering.");
		        console.error("Cannot call startTransition while rendering.");
		      } else
		        (throwIfDuringRender = enqueueConcurrentHookUpdate(
		          fiber,
		          queue,
		          action,
		          2
		        )),
		          null !== throwIfDuringRender &&
		            scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
		      markStateUpdateScheduled(fiber, 2);
		    }
		    function isRenderPhaseUpdate(fiber) {
		      var alternate = fiber.alternate;
		      return (
		        fiber === currentlyRenderingFiber$1 ||
		        (null !== alternate && alternate === currentlyRenderingFiber$1)
		      );
		    }
		    function enqueueRenderPhaseUpdate(queue, update) {
		      didScheduleRenderPhaseUpdateDuringThisPass =
		        didScheduleRenderPhaseUpdate = !0;
		      var pending = queue.pending;
		      null === pending
		        ? (update.next = update)
		        : ((update.next = pending.next), (pending.next = update));
		      queue.pending = update;
		    }
		    function entangleTransitionUpdate(root, queue, lane) {
		      if (0 !== (lane & 4194176)) {
		        var queueLanes = queue.lanes;
		        queueLanes &= root.pendingLanes;
		        lane |= queueLanes;
		        queue.lanes = lane;
		        markRootEntangled(root, lane);
		      }
		    }
		    function warnOnInvalidCallback(callback) {
		      if (null !== callback && "function" !== typeof callback) {
		        var key = String(callback);
		        didWarnOnInvalidCallback.has(key) ||
		          (didWarnOnInvalidCallback.add(key),
		          console.error(
		            "Expected the last optional `callback` argument to be a function. Instead received: %s.",
		            callback
		          ));
		      }
		    }
		    function applyDerivedStateFromProps(
		      workInProgress,
		      ctor,
		      getDerivedStateFromProps,
		      nextProps
		    ) {
		      var prevState = workInProgress.memoizedState,
		        partialState = getDerivedStateFromProps(nextProps, prevState);
		      if (workInProgress.mode & 8) {
		        setIsStrictModeForDevtools(!0);
		        try {
		          partialState = getDerivedStateFromProps(nextProps, prevState);
		        } finally {
		          setIsStrictModeForDevtools(!1);
		        }
		      }
		      void 0 === partialState &&
		        ((ctor = getComponentNameFromType(ctor) || "Component"),
		        didWarnAboutUndefinedDerivedState.has(ctor) ||
		          (didWarnAboutUndefinedDerivedState.add(ctor),
		          console.error(
		            "%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.",
		            ctor
		          )));
		      prevState =
		        null === partialState || void 0 === partialState
		          ? prevState
		          : assign({}, prevState, partialState);
		      workInProgress.memoizedState = prevState;
		      0 === workInProgress.lanes &&
		        (workInProgress.updateQueue.baseState = prevState);
		    }
		    function checkShouldComponentUpdate(
		      workInProgress,
		      ctor,
		      oldProps,
		      newProps,
		      oldState,
		      newState,
		      nextContext
		    ) {
		      var instance = workInProgress.stateNode;
		      if ("function" === typeof instance.shouldComponentUpdate) {
		        oldProps = instance.shouldComponentUpdate(
		          newProps,
		          newState,
		          nextContext
		        );
		        if (workInProgress.mode & 8) {
		          setIsStrictModeForDevtools(!0);
		          try {
		            oldProps = instance.shouldComponentUpdate(
		              newProps,
		              newState,
		              nextContext
		            );
		          } finally {
		            setIsStrictModeForDevtools(!1);
		          }
		        }
		        void 0 === oldProps &&
		          console.error(
		            "%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.",
		            getComponentNameFromType(ctor) || "Component"
		          );
		        return oldProps;
		      }
		      return ctor.prototype && ctor.prototype.isPureReactComponent
		        ? !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState)
		        : !0;
		    }
		    function callComponentWillReceiveProps(
		      workInProgress,
		      instance,
		      newProps,
		      nextContext
		    ) {
		      var oldState = instance.state;
		      "function" === typeof instance.componentWillReceiveProps &&
		        instance.componentWillReceiveProps(newProps, nextContext);
		      "function" === typeof instance.UNSAFE_componentWillReceiveProps &&
		        instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
		      instance.state !== oldState &&
		        ((workInProgress =
		          getComponentNameFromFiber(workInProgress) || "Component"),
		        didWarnAboutStateAssignmentForComponent.has(workInProgress) ||
		          (didWarnAboutStateAssignmentForComponent.add(workInProgress),
		          console.error(
		            "%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
		            workInProgress
		          )),
		        classComponentUpdater.enqueueReplaceState(
		          instance,
		          instance.state,
		          null
		        ));
		    }
		    function resolveClassComponentProps(Component, baseProps) {
		      var newProps = baseProps;
		      if ("ref" in baseProps) {
		        newProps = {};
		        for (var propName in baseProps)
		          "ref" !== propName && (newProps[propName] = baseProps[propName]);
		      }
		      if ((Component = Component.defaultProps)) {
		        newProps === baseProps && (newProps = assign({}, newProps));
		        for (var _propName in Component)
		          void 0 === newProps[_propName] &&
		            (newProps[_propName] = Component[_propName]);
		      }
		      return newProps;
		    }
		    function logUncaughtError(root, errorInfo) {
		      try {
		        componentName = errorInfo.source
		          ? getComponentNameFromFiber(errorInfo.source)
		          : null;
		        errorBoundaryName = null;
		        var error = errorInfo.value;
		        if (null !== ReactSharedInternals.actQueue)
		          ReactSharedInternals.thrownErrors.push(error);
		        else {
		          var onUncaughtError = root.onUncaughtError;
		          onUncaughtError(error, { componentStack: errorInfo.stack });
		        }
		      } catch (e) {
		        setTimeout(function () {
		          throw e;
		        });
		      }
		    }
		    function logCaughtError(root, boundary, errorInfo) {
		      try {
		        componentName = errorInfo.source
		          ? getComponentNameFromFiber(errorInfo.source)
		          : null;
		        errorBoundaryName = getComponentNameFromFiber(boundary);
		        var onCaughtError = root.onCaughtError;
		        onCaughtError(errorInfo.value, {
		          componentStack: errorInfo.stack,
		          errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
		        });
		      } catch (e) {
		        setTimeout(function () {
		          throw e;
		        });
		      }
		    }
		    function createRootErrorUpdate(root, errorInfo, lane) {
		      lane = createUpdate(lane);
		      lane.tag = CaptureUpdate;
		      lane.payload = { element: null };
		      lane.callback = function () {
		        runWithFiberInDEV(errorInfo.source, logUncaughtError, root, errorInfo);
		      };
		      return lane;
		    }
		    function createClassErrorUpdate(lane) {
		      lane = createUpdate(lane);
		      lane.tag = CaptureUpdate;
		      return lane;
		    }
		    function initializeClassErrorUpdate(update, root, fiber, errorInfo) {
		      var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
		      if ("function" === typeof getDerivedStateFromError) {
		        var error = errorInfo.value;
		        update.payload = function () {
		          return getDerivedStateFromError(error);
		        };
		        update.callback = function () {
		          markFailedErrorBoundaryForHotReloading(fiber);
		          runWithFiberInDEV(
		            errorInfo.source,
		            logCaughtError,
		            root,
		            fiber,
		            errorInfo
		          );
		        };
		      }
		      var inst = fiber.stateNode;
		      null !== inst &&
		        "function" === typeof inst.componentDidCatch &&
		        (update.callback = function () {
		          markFailedErrorBoundaryForHotReloading(fiber);
		          runWithFiberInDEV(
		            errorInfo.source,
		            logCaughtError,
		            root,
		            fiber,
		            errorInfo
		          );
		          "function" !== typeof getDerivedStateFromError &&
		            (null === legacyErrorBoundariesThatAlreadyFailed
		              ? (legacyErrorBoundariesThatAlreadyFailed = new Set([this]))
		              : legacyErrorBoundariesThatAlreadyFailed.add(this));
		          callComponentDidCatchInDEV(this, errorInfo);
		          "function" === typeof getDerivedStateFromError ||
		            (0 === (fiber.lanes & 2) &&
		              console.error(
		                "%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.",
		                getComponentNameFromFiber(fiber) || "Unknown"
		              ));
		        });
		    }
		    function throwException(
		      root,
		      returnFiber,
		      sourceFiber,
		      value,
		      rootRenderLanes
		    ) {
		      sourceFiber.flags |= 32768;
		      isDevToolsPresent && restorePendingUpdaters(root, rootRenderLanes);
		      if (
		        null !== value &&
		        "object" === typeof value &&
		        "function" === typeof value.then
		      ) {
		        returnFiber = sourceFiber.alternate;
		        null !== returnFiber &&
		          propagateParentContextChanges(
		            returnFiber,
		            sourceFiber,
		            rootRenderLanes,
		            !0
		          );
		        isHydrating && (didSuspendOrErrorDEV = !0);
		        sourceFiber = suspenseHandlerStackCursor.current;
		        if (null !== sourceFiber) {
		          switch (sourceFiber.tag) {
		            case 13:
		              return (
		                null === shellBoundary
		                  ? renderDidSuspendDelayIfPossible()
		                  : null === sourceFiber.alternate &&
		                    workInProgressRootExitStatus === RootInProgress &&
		                    (workInProgressRootExitStatus = RootSuspended),
		                (sourceFiber.flags &= -257),
		                (sourceFiber.flags |= 65536),
		                (sourceFiber.lanes = rootRenderLanes),
		                value === noopSuspenseyCommitThenable
		                  ? (sourceFiber.flags |= 16384)
		                  : ((returnFiber = sourceFiber.updateQueue),
		                    null === returnFiber
		                      ? (sourceFiber.updateQueue = new Set([value]))
		                      : returnFiber.add(value),
		                    attachPingListener(root, value, rootRenderLanes)),
		                !1
		              );
		            case 22:
		              return (
		                (sourceFiber.flags |= 65536),
		                value === noopSuspenseyCommitThenable
		                  ? (sourceFiber.flags |= 16384)
		                  : ((returnFiber = sourceFiber.updateQueue),
		                    null === returnFiber
		                      ? ((returnFiber = {
		                          transitions: null,
		                          markerInstances: null,
		                          retryQueue: new Set([value])
		                        }),
		                        (sourceFiber.updateQueue = returnFiber))
		                      : ((sourceFiber = returnFiber.retryQueue),
		                        null === sourceFiber
		                          ? (returnFiber.retryQueue = new Set([value]))
		                          : sourceFiber.add(value)),
		                    attachPingListener(root, value, rootRenderLanes)),
		                !1
		              );
		          }
		          throw Error(
		            "Unexpected Suspense handler tag (" +
		              sourceFiber.tag +
		              "). This is a bug in React."
		          );
		        }
		        attachPingListener(root, value, rootRenderLanes);
		        renderDidSuspendDelayIfPossible();
		        return !1;
		      }
		      if (isHydrating)
		        return (
		          (didSuspendOrErrorDEV = !0),
		          (returnFiber = suspenseHandlerStackCursor.current),
		          null !== returnFiber
		            ? (0 === (returnFiber.flags & 65536) && (returnFiber.flags |= 256),
		              (returnFiber.flags |= 65536),
		              (returnFiber.lanes = rootRenderLanes),
		              value !== HydrationMismatchException &&
		                queueHydrationError(
		                  createCapturedValueAtFiber(
		                    Error(
		                      "There was an error while hydrating but React was able to recover by instead client rendering from the nearest Suspense boundary.",
		                      { cause: value }
		                    ),
		                    sourceFiber
		                  )
		                ))
		            : (value !== HydrationMismatchException &&
		                queueHydrationError(
		                  createCapturedValueAtFiber(
		                    Error(
		                      "There was an error while hydrating but React was able to recover by instead client rendering the entire root.",
		                      { cause: value }
		                    ),
		                    sourceFiber
		                  )
		                ),
		              (root = root.current.alternate),
		              (root.flags |= 65536),
		              (rootRenderLanes &= -rootRenderLanes),
		              (root.lanes |= rootRenderLanes),
		              (value = createCapturedValueAtFiber(value, sourceFiber)),
		              (rootRenderLanes = createRootErrorUpdate(
		                root.stateNode,
		                value,
		                rootRenderLanes
		              )),
		              enqueueCapturedUpdate(root, rootRenderLanes),
		              workInProgressRootExitStatus !== RootSuspendedWithDelay &&
		                (workInProgressRootExitStatus = RootErrored)),
		          !1
		        );
		      var error = createCapturedValueAtFiber(
		        Error(
		          "There was an error during concurrent rendering but React was able to recover by instead synchronously rendering the entire root.",
		          { cause: value }
		        ),
		        sourceFiber
		      );
		      null === workInProgressRootConcurrentErrors
		        ? (workInProgressRootConcurrentErrors = [error])
		        : workInProgressRootConcurrentErrors.push(error);
		      workInProgressRootExitStatus !== RootSuspendedWithDelay &&
		        (workInProgressRootExitStatus = RootErrored);
		      if (null === returnFiber) return !0;
		      value = createCapturedValueAtFiber(value, sourceFiber);
		      sourceFiber = returnFiber;
		      do {
		        switch (sourceFiber.tag) {
		          case 3:
		            return (
		              (sourceFiber.flags |= 65536),
		              (root = rootRenderLanes & -rootRenderLanes),
		              (sourceFiber.lanes |= root),
		              (root = createRootErrorUpdate(
		                sourceFiber.stateNode,
		                value,
		                root
		              )),
		              enqueueCapturedUpdate(sourceFiber, root),
		              !1
		            );
		          case 1:
		            if (
		              ((returnFiber = sourceFiber.type),
		              (error = sourceFiber.stateNode),
		              0 === (sourceFiber.flags & 128) &&
		                ("function" === typeof returnFiber.getDerivedStateFromError ||
		                  (null !== error &&
		                    "function" === typeof error.componentDidCatch &&
		                    (null === legacyErrorBoundariesThatAlreadyFailed ||
		                      !legacyErrorBoundariesThatAlreadyFailed.has(error)))))
		            )
		              return (
		                (sourceFiber.flags |= 65536),
		                (rootRenderLanes &= -rootRenderLanes),
		                (sourceFiber.lanes |= rootRenderLanes),
		                (rootRenderLanes = createClassErrorUpdate(rootRenderLanes)),
		                initializeClassErrorUpdate(
		                  rootRenderLanes,
		                  root,
		                  sourceFiber,
		                  value
		                ),
		                enqueueCapturedUpdate(sourceFiber, rootRenderLanes),
		                !1
		              );
		        }
		        sourceFiber = sourceFiber.return;
		      } while (null !== sourceFiber);
		      return !1;
		    }
		    function reconcileChildren(
		      current,
		      workInProgress,
		      nextChildren,
		      renderLanes
		    ) {
		      workInProgress.child =
		        null === current
		          ? mountChildFibers(workInProgress, null, nextChildren, renderLanes)
		          : reconcileChildFibers(
		              workInProgress,
		              current.child,
		              nextChildren,
		              renderLanes
		            );
		    }
		    function updateForwardRef(
		      current,
		      workInProgress,
		      Component,
		      nextProps,
		      renderLanes
		    ) {
		      Component = Component.render;
		      var ref = workInProgress.ref;
		      if ("ref" in nextProps) {
		        var propsWithoutRef = {};
		        for (var key in nextProps)
		          "ref" !== key && (propsWithoutRef[key] = nextProps[key]);
		      } else propsWithoutRef = nextProps;
		      prepareToReadContext(workInProgress);
		      markComponentRenderStarted(workInProgress);
		      nextProps = renderWithHooks(
		        current,
		        workInProgress,
		        Component,
		        propsWithoutRef,
		        ref,
		        renderLanes
		      );
		      key = checkDidRenderIdHook();
		      markComponentRenderStopped();
		      if (null !== current && !didReceiveUpdate)
		        return (
		          bailoutHooks(current, workInProgress, renderLanes),
		          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
		        );
		      isHydrating && key && pushMaterializedTreeId(workInProgress);
		      workInProgress.flags |= 1;
		      reconcileChildren(current, workInProgress, nextProps, renderLanes);
		      return workInProgress.child;
		    }
		    function updateMemoComponent(
		      current,
		      workInProgress,
		      Component,
		      nextProps,
		      renderLanes
		    ) {
		      if (null === current) {
		        var type = Component.type;
		        if (
		          "function" === typeof type &&
		          !shouldConstruct(type) &&
		          void 0 === type.defaultProps &&
		          null === Component.compare
		        )
		          return (
		            (Component = resolveFunctionForHotReloading(type)),
		            (workInProgress.tag = 15),
		            (workInProgress.type = Component),
		            validateFunctionComponentInDev(workInProgress, type),
		            updateSimpleMemoComponent(
		              current,
		              workInProgress,
		              Component,
		              nextProps,
		              renderLanes
		            )
		          );
		        current = createFiberFromTypeAndProps(
		          Component.type,
		          null,
		          nextProps,
		          workInProgress,
		          workInProgress.mode,
		          renderLanes
		        );
		        current.ref = workInProgress.ref;
		        current.return = workInProgress;
		        return (workInProgress.child = current);
		      }
		      type = current.child;
		      if (!checkScheduledUpdateOrContext(current, renderLanes)) {
		        var prevProps = type.memoizedProps;
		        Component = Component.compare;
		        Component = null !== Component ? Component : shallowEqual;
		        if (
		          Component(prevProps, nextProps) &&
		          current.ref === workInProgress.ref
		        )
		          return bailoutOnAlreadyFinishedWork(
		            current,
		            workInProgress,
		            renderLanes
		          );
		      }
		      workInProgress.flags |= 1;
		      current = createWorkInProgress(type, nextProps);
		      current.ref = workInProgress.ref;
		      current.return = workInProgress;
		      return (workInProgress.child = current);
		    }
		    function updateSimpleMemoComponent(
		      current,
		      workInProgress,
		      Component,
		      nextProps,
		      renderLanes
		    ) {
		      if (null !== current) {
		        var prevProps = current.memoizedProps;
		        if (
		          shallowEqual(prevProps, nextProps) &&
		          current.ref === workInProgress.ref &&
		          workInProgress.type === current.type
		        )
		          if (
		            ((didReceiveUpdate = !1),
		            (workInProgress.pendingProps = nextProps = prevProps),
		            checkScheduledUpdateOrContext(current, renderLanes))
		          )
		            0 !== (current.flags & 131072) && (didReceiveUpdate = !0);
		          else
		            return (
		              (workInProgress.lanes = current.lanes),
		              bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
		            );
		      }
		      return updateFunctionComponent(
		        current,
		        workInProgress,
		        Component,
		        nextProps,
		        renderLanes
		      );
		    }
		    function updateOffscreenComponent(current, workInProgress, renderLanes) {
		      var nextProps = workInProgress.pendingProps,
		        nextChildren = nextProps.children,
		        nextIsDetached =
		          0 !== (workInProgress.stateNode._pendingVisibility & 2),
		        prevState = null !== current ? current.memoizedState : null;
		      markRef(current, workInProgress);
		      if ("hidden" === nextProps.mode || nextIsDetached) {
		        if (0 !== (workInProgress.flags & 128)) {
		          nextProps =
		            null !== prevState
		              ? prevState.baseLanes | renderLanes
		              : renderLanes;
		          if (null !== current) {
		            nextChildren = workInProgress.child = current.child;
		            for (nextIsDetached = 0; null !== nextChildren; )
		              (nextIsDetached =
		                nextIsDetached | nextChildren.lanes | nextChildren.childLanes),
		                (nextChildren = nextChildren.sibling);
		            workInProgress.childLanes = nextIsDetached & ~nextProps;
		          } else (workInProgress.childLanes = 0), (workInProgress.child = null);
		          return deferHiddenOffscreenComponent(
		            current,
		            workInProgress,
		            nextProps,
		            renderLanes
		          );
		        }
		        if (0 !== (renderLanes & 536870912))
		          (workInProgress.memoizedState = { baseLanes: 0, cachePool: null }),
		            null !== current &&
		              pushTransition(
		                workInProgress,
		                null !== prevState ? prevState.cachePool : null
		              ),
		            null !== prevState
		              ? pushHiddenContext(workInProgress, prevState)
		              : reuseHiddenContextOnStack(workInProgress),
		            pushOffscreenSuspenseHandler(workInProgress);
		        else
		          return (
		            (workInProgress.lanes = workInProgress.childLanes = 536870912),
		            deferHiddenOffscreenComponent(
		              current,
		              workInProgress,
		              null !== prevState
		                ? prevState.baseLanes | renderLanes
		                : renderLanes,
		              renderLanes
		            )
		          );
		      } else
		        null !== prevState
		          ? (pushTransition(workInProgress, prevState.cachePool),
		            pushHiddenContext(workInProgress, prevState),
		            reuseSuspenseHandlerOnStack(workInProgress),
		            (workInProgress.memoizedState = null))
		          : (null !== current && pushTransition(workInProgress, null),
		            reuseHiddenContextOnStack(workInProgress),
		            reuseSuspenseHandlerOnStack(workInProgress));
		      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		      return workInProgress.child;
		    }
		    function deferHiddenOffscreenComponent(
		      current,
		      workInProgress,
		      nextBaseLanes,
		      renderLanes
		    ) {
		      var JSCompiler_inline_result = peekCacheFromPool();
		      JSCompiler_inline_result =
		        null === JSCompiler_inline_result
		          ? null
		          : {
		              parent: isPrimaryRenderer
		                ? CacheContext._currentValue
		                : CacheContext._currentValue2,
		              pool: JSCompiler_inline_result
		            };
		      workInProgress.memoizedState = {
		        baseLanes: nextBaseLanes,
		        cachePool: JSCompiler_inline_result
		      };
		      null !== current && pushTransition(workInProgress, null);
		      reuseHiddenContextOnStack(workInProgress);
		      pushOffscreenSuspenseHandler(workInProgress);
		      null !== current &&
		        propagateParentContextChanges(current, workInProgress, renderLanes, !0);
		      return null;
		    }
		    function markRef(current, workInProgress) {
		      var ref = workInProgress.ref;
		      if (null === ref)
		        null !== current &&
		          null !== current.ref &&
		          (workInProgress.flags |= 2097664);
		      else {
		        if ("function" !== typeof ref && "object" !== typeof ref)
		          throw Error(
		            "Expected ref to be a function, an object returned by React.createRef(), or undefined/null."
		          );
		        if (null === current || current.ref !== ref)
		          workInProgress.flags |= 2097664;
		      }
		    }
		    function updateFunctionComponent(
		      current,
		      workInProgress,
		      Component,
		      nextProps,
		      renderLanes
		    ) {
		      if (
		        Component.prototype &&
		        "function" === typeof Component.prototype.render
		      ) {
		        var componentName = getComponentNameFromType(Component) || "Unknown";
		        didWarnAboutBadClass[componentName] ||
		          (console.error(
		            "The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.",
		            componentName,
		            componentName
		          ),
		          (didWarnAboutBadClass[componentName] = !0));
		      }
		      workInProgress.mode & 8 &&
		        ReactStrictModeWarnings.recordLegacyContextWarning(
		          workInProgress,
		          null
		        );
		      null === current &&
		        (validateFunctionComponentInDev(workInProgress, workInProgress.type),
		        Component.contextTypes &&
		          ((componentName = getComponentNameFromType(Component) || "Unknown"),
		          didWarnAboutContextTypes[componentName] ||
		            ((didWarnAboutContextTypes[componentName] = !0),
		            console.error(
		              "%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with React.useContext() instead. (https://react.dev/link/legacy-context)",
		              componentName
		            ))));
		      prepareToReadContext(workInProgress);
		      markComponentRenderStarted(workInProgress);
		      Component = renderWithHooks(
		        current,
		        workInProgress,
		        Component,
		        nextProps,
		        void 0,
		        renderLanes
		      );
		      nextProps = checkDidRenderIdHook();
		      markComponentRenderStopped();
		      if (null !== current && !didReceiveUpdate)
		        return (
		          bailoutHooks(current, workInProgress, renderLanes),
		          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
		        );
		      isHydrating && nextProps && pushMaterializedTreeId(workInProgress);
		      workInProgress.flags |= 1;
		      reconcileChildren(current, workInProgress, Component, renderLanes);
		      return workInProgress.child;
		    }
		    function replayFunctionComponent(
		      current,
		      workInProgress,
		      nextProps,
		      Component,
		      secondArg,
		      renderLanes
		    ) {
		      prepareToReadContext(workInProgress);
		      markComponentRenderStarted(workInProgress);
		      hookTypesUpdateIndexDev = -1;
		      ignorePreviousDependencies =
		        null !== current && current.type !== workInProgress.type;
		      workInProgress.updateQueue = null;
		      nextProps = renderWithHooksAgain(
		        workInProgress,
		        Component,
		        nextProps,
		        secondArg
		      );
		      finishRenderingHooks(current, workInProgress);
		      Component = checkDidRenderIdHook();
		      markComponentRenderStopped();
		      if (null !== current && !didReceiveUpdate)
		        return (
		          bailoutHooks(current, workInProgress, renderLanes),
		          bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes)
		        );
		      isHydrating && Component && pushMaterializedTreeId(workInProgress);
		      workInProgress.flags |= 1;
		      reconcileChildren(current, workInProgress, nextProps, renderLanes);
		      return workInProgress.child;
		    }
		    function updateClassComponent(
		      current$jscomp$0,
		      workInProgress,
		      Component,
		      nextProps,
		      renderLanes
		    ) {
		      switch (shouldErrorImpl(workInProgress)) {
		        case !1:
		          var _instance = workInProgress.stateNode,
		            state = new workInProgress.type(
		              workInProgress.memoizedProps,
		              _instance.context
		            ).state;
		          _instance.updater.enqueueSetState(_instance, state, null);
		          break;
		        case !0:
		          workInProgress.flags |= 128;
		          workInProgress.flags |= 65536;
		          _instance = Error("Simulated error coming from DevTools");
		          var lane = renderLanes & -renderLanes;
		          workInProgress.lanes |= lane;
		          state = workInProgressRoot;
		          if (null === state)
		            throw Error(
		              "Expected a work-in-progress root. This is a bug in React. Please file an issue."
		            );
		          lane = createClassErrorUpdate(lane);
		          initializeClassErrorUpdate(
		            lane,
		            state,
		            workInProgress,
		            createCapturedValueAtFiber(_instance, workInProgress)
		          );
		          enqueueCapturedUpdate(workInProgress, lane);
		      }
		      prepareToReadContext(workInProgress);
		      if (null === workInProgress.stateNode) {
		        state = emptyContextObject;
		        _instance = Component.contextType;
		        "contextType" in Component &&
		          null !== _instance &&
		          (void 0 === _instance || _instance.$$typeof !== REACT_CONTEXT_TYPE) &&
		          !didWarnAboutInvalidateContextType.has(Component) &&
		          (didWarnAboutInvalidateContextType.add(Component),
		          (lane =
		            void 0 === _instance
		              ? " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file."
		              : "object" !== typeof _instance
		                ? " However, it is set to a " + typeof _instance + "."
		                : _instance.$$typeof === REACT_CONSUMER_TYPE
		                  ? " Did you accidentally pass the Context.Consumer instead?"
		                  : " However, it is set to an object with keys {" +
		                    Object.keys(_instance).join(", ") +
		                    "}."),
		          console.error(
		            "%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s",
		            getComponentNameFromType(Component) || "Component",
		            lane
		          ));
		        "object" === typeof _instance &&
		          null !== _instance &&
		          (state = readContext(_instance));
		        _instance = new Component(nextProps, state);
		        if (workInProgress.mode & 8) {
		          setIsStrictModeForDevtools(!0);
		          try {
		            _instance = new Component(nextProps, state);
		          } finally {
		            setIsStrictModeForDevtools(!1);
		          }
		        }
		        state = workInProgress.memoizedState =
		          null !== _instance.state && void 0 !== _instance.state
		            ? _instance.state
		            : null;
		        _instance.updater = classComponentUpdater;
		        workInProgress.stateNode = _instance;
		        _instance._reactInternals = workInProgress;
		        _instance._reactInternalInstance = fakeInternalInstance;
		        "function" === typeof Component.getDerivedStateFromProps &&
		          null === state &&
		          ((state = getComponentNameFromType(Component) || "Component"),
		          didWarnAboutUninitializedState.has(state) ||
		            (didWarnAboutUninitializedState.add(state),
		            console.error(
		              "`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.",
		              state,
		              null === _instance.state ? "null" : "undefined",
		              state
		            )));
		        if (
		          "function" === typeof Component.getDerivedStateFromProps ||
		          "function" === typeof _instance.getSnapshotBeforeUpdate
		        ) {
		          var foundWillUpdateName = (lane = state = null);
		          "function" === typeof _instance.componentWillMount &&
		          !0 !== _instance.componentWillMount.__suppressDeprecationWarning
		            ? (state = "componentWillMount")
		            : "function" === typeof _instance.UNSAFE_componentWillMount &&
		              (state = "UNSAFE_componentWillMount");
		          "function" === typeof _instance.componentWillReceiveProps &&
		          !0 !==
		            _instance.componentWillReceiveProps.__suppressDeprecationWarning
		            ? (lane = "componentWillReceiveProps")
		            : "function" ===
		                typeof _instance.UNSAFE_componentWillReceiveProps &&
		              (lane = "UNSAFE_componentWillReceiveProps");
		          "function" === typeof _instance.componentWillUpdate &&
		          !0 !== _instance.componentWillUpdate.__suppressDeprecationWarning
		            ? (foundWillUpdateName = "componentWillUpdate")
		            : "function" === typeof _instance.UNSAFE_componentWillUpdate &&
		              (foundWillUpdateName = "UNSAFE_componentWillUpdate");
		          if (null !== state || null !== lane || null !== foundWillUpdateName) {
		            _instance = getComponentNameFromType(Component) || "Component";
		            var newApiName =
		              "function" === typeof Component.getDerivedStateFromProps
		                ? "getDerivedStateFromProps()"
		                : "getSnapshotBeforeUpdate()";
		            didWarnAboutLegacyLifecyclesAndDerivedState.has(_instance) ||
		              (didWarnAboutLegacyLifecyclesAndDerivedState.add(_instance),
		              console.error(
		                "Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://react.dev/link/unsafe-component-lifecycles",
		                _instance,
		                newApiName,
		                null !== state ? "\n  " + state : "",
		                null !== lane ? "\n  " + lane : "",
		                null !== foundWillUpdateName ? "\n  " + foundWillUpdateName : ""
		              ));
		          }
		        }
		        _instance = workInProgress.stateNode;
		        state = getComponentNameFromType(Component) || "Component";
		        _instance.render ||
		          (Component.prototype &&
		          "function" === typeof Component.prototype.render
		            ? console.error(
		                "No `render` method found on the %s instance: did you accidentally return an object from the constructor?",
		                state
		              )
		            : console.error(
		                "No `render` method found on the %s instance: you may have forgotten to define `render`.",
		                state
		              ));
		        !_instance.getInitialState ||
		          _instance.getInitialState.isReactClassApproved ||
		          _instance.state ||
		          console.error(
		            "getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?",
		            state
		          );
		        _instance.getDefaultProps &&
		          !_instance.getDefaultProps.isReactClassApproved &&
		          console.error(
		            "getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.",
		            state
		          );
		        _instance.contextType &&
		          console.error(
		            "contextType was defined as an instance property on %s. Use a static property to define contextType instead.",
		            state
		          );
		        Component.childContextTypes &&
		          !didWarnAboutChildContextTypes.has(Component) &&
		          (didWarnAboutChildContextTypes.add(Component),
		          console.error(
		            "%s uses the legacy childContextTypes API which was removed in React 19. Use React.createContext() instead. (https://react.dev/link/legacy-context)",
		            state
		          ));
		        Component.contextTypes &&
		          !didWarnAboutContextTypes$1.has(Component) &&
		          (didWarnAboutContextTypes$1.add(Component),
		          console.error(
		            "%s uses the legacy contextTypes API which was removed in React 19. Use React.createContext() with static contextType instead. (https://react.dev/link/legacy-context)",
		            state
		          ));
		        "function" === typeof _instance.componentShouldUpdate &&
		          console.error(
		            "%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.",
		            state
		          );
		        Component.prototype &&
		          Component.prototype.isPureReactComponent &&
		          "undefined" !== typeof _instance.shouldComponentUpdate &&
		          console.error(
		            "%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.",
		            getComponentNameFromType(Component) || "A pure component"
		          );
		        "function" === typeof _instance.componentDidUnmount &&
		          console.error(
		            "%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?",
		            state
		          );
		        "function" === typeof _instance.componentDidReceiveProps &&
		          console.error(
		            "%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().",
		            state
		          );
		        "function" === typeof _instance.componentWillRecieveProps &&
		          console.error(
		            "%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?",
		            state
		          );
		        "function" === typeof _instance.UNSAFE_componentWillRecieveProps &&
		          console.error(
		            "%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?",
		            state
		          );
		        lane = _instance.props !== nextProps;
		        void 0 !== _instance.props &&
		          lane &&
		          console.error(
		            "When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.",
		            state
		          );
		        _instance.defaultProps &&
		          console.error(
		            "Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.",
		            state,
		            state
		          );
		        "function" !== typeof _instance.getSnapshotBeforeUpdate ||
		          "function" === typeof _instance.componentDidUpdate ||
		          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(Component) ||
		          (didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(Component),
		          console.error(
		            "%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.",
		            getComponentNameFromType(Component)
		          ));
		        "function" === typeof _instance.getDerivedStateFromProps &&
		          console.error(
		            "%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
		            state
		          );
		        "function" === typeof _instance.getDerivedStateFromError &&
		          console.error(
		            "%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.",
		            state
		          );
		        "function" === typeof Component.getSnapshotBeforeUpdate &&
		          console.error(
		            "%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.",
		            state
		          );
		        (lane = _instance.state) &&
		          ("object" !== typeof lane || isArrayImpl(lane)) &&
		          console.error("%s.state: must be set to an object or null", state);
		        "function" === typeof _instance.getChildContext &&
		          "object" !== typeof Component.childContextTypes &&
		          console.error(
		            "%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().",
		            state
		          );
		        _instance = workInProgress.stateNode;
		        _instance.props = nextProps;
		        _instance.state = workInProgress.memoizedState;
		        _instance.refs = {};
		        initializeUpdateQueue(workInProgress);
		        state = Component.contextType;
		        _instance.context =
		          "object" === typeof state && null !== state
		            ? readContext(state)
		            : emptyContextObject;
		        _instance.state === nextProps &&
		          ((state = getComponentNameFromType(Component) || "Component"),
		          didWarnAboutDirectlyAssigningPropsToState.has(state) ||
		            (didWarnAboutDirectlyAssigningPropsToState.add(state),
		            console.error(
		              "%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.",
		              state
		            )));
		        workInProgress.mode & 8 &&
		          ReactStrictModeWarnings.recordLegacyContextWarning(
		            workInProgress,
		            _instance
		          );
		        ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(
		          workInProgress,
		          _instance
		        );
		        _instance.state = workInProgress.memoizedState;
		        state = Component.getDerivedStateFromProps;
		        "function" === typeof state &&
		          (applyDerivedStateFromProps(
		            workInProgress,
		            Component,
		            state,
		            nextProps
		          ),
		          (_instance.state = workInProgress.memoizedState));
		        "function" === typeof Component.getDerivedStateFromProps ||
		          "function" === typeof _instance.getSnapshotBeforeUpdate ||
		          ("function" !== typeof _instance.UNSAFE_componentWillMount &&
		            "function" !== typeof _instance.componentWillMount) ||
		          ((state = _instance.state),
		          "function" === typeof _instance.componentWillMount &&
		            _instance.componentWillMount(),
		          "function" === typeof _instance.UNSAFE_componentWillMount &&
		            _instance.UNSAFE_componentWillMount(),
		          state !== _instance.state &&
		            (console.error(
		              "%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.",
		              getComponentNameFromFiber(workInProgress) || "Component"
		            ),
		            classComponentUpdater.enqueueReplaceState(
		              _instance,
		              _instance.state,
		              null
		            )),
		          processUpdateQueue(workInProgress, nextProps, _instance, renderLanes),
		          suspendIfUpdateReadFromEntangledAsyncAction(),
		          (_instance.state = workInProgress.memoizedState));
		        "function" === typeof _instance.componentDidMount &&
		          (workInProgress.flags |= 4194308);
		        (workInProgress.mode & 16) !== NoMode &&
		          (workInProgress.flags |= 67108864);
		        _instance = !0;
		      } else if (null === current$jscomp$0) {
		        _instance = workInProgress.stateNode;
		        var unresolvedOldProps = workInProgress.memoizedProps;
		        lane = resolveClassComponentProps(Component, unresolvedOldProps);
		        _instance.props = lane;
		        var oldContext = _instance.context;
		        foundWillUpdateName = Component.contextType;
		        state = emptyContextObject;
		        "object" === typeof foundWillUpdateName &&
		          null !== foundWillUpdateName &&
		          (state = readContext(foundWillUpdateName));
		        newApiName = Component.getDerivedStateFromProps;
		        foundWillUpdateName =
		          "function" === typeof newApiName ||
		          "function" === typeof _instance.getSnapshotBeforeUpdate;
		        unresolvedOldProps = workInProgress.pendingProps !== unresolvedOldProps;
		        foundWillUpdateName ||
		          ("function" !== typeof _instance.UNSAFE_componentWillReceiveProps &&
		            "function" !== typeof _instance.componentWillReceiveProps) ||
		          ((unresolvedOldProps || oldContext !== state) &&
		            callComponentWillReceiveProps(
		              workInProgress,
		              _instance,
		              nextProps,
		              state
		            ));
		        hasForceUpdate = !1;
		        var oldState = workInProgress.memoizedState;
		        _instance.state = oldState;
		        processUpdateQueue(workInProgress, nextProps, _instance, renderLanes);
		        suspendIfUpdateReadFromEntangledAsyncAction();
		        oldContext = workInProgress.memoizedState;
		        unresolvedOldProps || oldState !== oldContext || hasForceUpdate
		          ? ("function" === typeof newApiName &&
		              (applyDerivedStateFromProps(
		                workInProgress,
		                Component,
		                newApiName,
		                nextProps
		              ),
		              (oldContext = workInProgress.memoizedState)),
		            (lane =
		              hasForceUpdate ||
		              checkShouldComponentUpdate(
		                workInProgress,
		                Component,
		                lane,
		                nextProps,
		                oldState,
		                oldContext,
		                state
		              ))
		              ? (foundWillUpdateName ||
		                  ("function" !== typeof _instance.UNSAFE_componentWillMount &&
		                    "function" !== typeof _instance.componentWillMount) ||
		                  ("function" === typeof _instance.componentWillMount &&
		                    _instance.componentWillMount(),
		                  "function" === typeof _instance.UNSAFE_componentWillMount &&
		                    _instance.UNSAFE_componentWillMount()),
		                "function" === typeof _instance.componentDidMount &&
		                  (workInProgress.flags |= 4194308),
		                (workInProgress.mode & 16) !== NoMode &&
		                  (workInProgress.flags |= 67108864))
		              : ("function" === typeof _instance.componentDidMount &&
		                  (workInProgress.flags |= 4194308),
		                (workInProgress.mode & 16) !== NoMode &&
		                  (workInProgress.flags |= 67108864),
		                (workInProgress.memoizedProps = nextProps),
		                (workInProgress.memoizedState = oldContext)),
		            (_instance.props = nextProps),
		            (_instance.state = oldContext),
		            (_instance.context = state),
		            (_instance = lane))
		          : ("function" === typeof _instance.componentDidMount &&
		              (workInProgress.flags |= 4194308),
		            (workInProgress.mode & 16) !== NoMode &&
		              (workInProgress.flags |= 67108864),
		            (_instance = !1));
		      } else {
		        _instance = workInProgress.stateNode;
		        cloneUpdateQueue(current$jscomp$0, workInProgress);
		        state = workInProgress.memoizedProps;
		        foundWillUpdateName = resolveClassComponentProps(Component, state);
		        _instance.props = foundWillUpdateName;
		        newApiName = workInProgress.pendingProps;
		        oldState = _instance.context;
		        oldContext = Component.contextType;
		        lane = emptyContextObject;
		        "object" === typeof oldContext &&
		          null !== oldContext &&
		          (lane = readContext(oldContext));
		        unresolvedOldProps = Component.getDerivedStateFromProps;
		        (oldContext =
		          "function" === typeof unresolvedOldProps ||
		          "function" === typeof _instance.getSnapshotBeforeUpdate) ||
		          ("function" !== typeof _instance.UNSAFE_componentWillReceiveProps &&
		            "function" !== typeof _instance.componentWillReceiveProps) ||
		          ((state !== newApiName || oldState !== lane) &&
		            callComponentWillReceiveProps(
		              workInProgress,
		              _instance,
		              nextProps,
		              lane
		            ));
		        hasForceUpdate = !1;
		        oldState = workInProgress.memoizedState;
		        _instance.state = oldState;
		        processUpdateQueue(workInProgress, nextProps, _instance, renderLanes);
		        suspendIfUpdateReadFromEntangledAsyncAction();
		        var newState = workInProgress.memoizedState;
		        state !== newApiName ||
		        oldState !== newState ||
		        hasForceUpdate ||
		        (null !== current$jscomp$0 &&
		          null !== current$jscomp$0.dependencies &&
		          checkIfContextChanged(current$jscomp$0.dependencies))
		          ? ("function" === typeof unresolvedOldProps &&
		              (applyDerivedStateFromProps(
		                workInProgress,
		                Component,
		                unresolvedOldProps,
		                nextProps
		              ),
		              (newState = workInProgress.memoizedState)),
		            (foundWillUpdateName =
		              hasForceUpdate ||
		              checkShouldComponentUpdate(
		                workInProgress,
		                Component,
		                foundWillUpdateName,
		                nextProps,
		                oldState,
		                newState,
		                lane
		              ) ||
		              (null !== current$jscomp$0 &&
		                null !== current$jscomp$0.dependencies &&
		                checkIfContextChanged(current$jscomp$0.dependencies)))
		              ? (oldContext ||
		                  ("function" !== typeof _instance.UNSAFE_componentWillUpdate &&
		                    "function" !== typeof _instance.componentWillUpdate) ||
		                  ("function" === typeof _instance.componentWillUpdate &&
		                    _instance.componentWillUpdate(nextProps, newState, lane),
		                  "function" === typeof _instance.UNSAFE_componentWillUpdate &&
		                    _instance.UNSAFE_componentWillUpdate(
		                      nextProps,
		                      newState,
		                      lane
		                    )),
		                "function" === typeof _instance.componentDidUpdate &&
		                  (workInProgress.flags |= 4),
		                "function" === typeof _instance.getSnapshotBeforeUpdate &&
		                  (workInProgress.flags |= 1024))
		              : ("function" !== typeof _instance.componentDidUpdate ||
		                  (state === current$jscomp$0.memoizedProps &&
		                    oldState === current$jscomp$0.memoizedState) ||
		                  (workInProgress.flags |= 4),
		                "function" !== typeof _instance.getSnapshotBeforeUpdate ||
		                  (state === current$jscomp$0.memoizedProps &&
		                    oldState === current$jscomp$0.memoizedState) ||
		                  (workInProgress.flags |= 1024),
		                (workInProgress.memoizedProps = nextProps),
		                (workInProgress.memoizedState = newState)),
		            (_instance.props = nextProps),
		            (_instance.state = newState),
		            (_instance.context = lane),
		            (_instance = foundWillUpdateName))
		          : ("function" !== typeof _instance.componentDidUpdate ||
		              (state === current$jscomp$0.memoizedProps &&
		                oldState === current$jscomp$0.memoizedState) ||
		              (workInProgress.flags |= 4),
		            "function" !== typeof _instance.getSnapshotBeforeUpdate ||
		              (state === current$jscomp$0.memoizedProps &&
		                oldState === current$jscomp$0.memoizedState) ||
		              (workInProgress.flags |= 1024),
		            (_instance = !1));
		      }
		      lane = _instance;
		      markRef(current$jscomp$0, workInProgress);
		      state = 0 !== (workInProgress.flags & 128);
		      if (lane || state) {
		        lane = workInProgress.stateNode;
		        ReactSharedInternals.getCurrentStack =
		          null === workInProgress ? null : getCurrentFiberStackInDev;
		        isRendering = !1;
		        current = workInProgress;
		        if (state && "function" !== typeof Component.getDerivedStateFromError)
		          (Component = null), (profilerStartTime = -1);
		        else {
		          markComponentRenderStarted(workInProgress);
		          Component = callRenderInDEV(lane);
		          if (workInProgress.mode & 8) {
		            setIsStrictModeForDevtools(!0);
		            try {
		              callRenderInDEV(lane);
		            } finally {
		              setIsStrictModeForDevtools(!1);
		            }
		          }
		          markComponentRenderStopped();
		        }
		        workInProgress.flags |= 1;
		        null !== current$jscomp$0 && state
		          ? ((workInProgress.child = reconcileChildFibers(
		              workInProgress,
		              current$jscomp$0.child,
		              null,
		              renderLanes
		            )),
		            (workInProgress.child = reconcileChildFibers(
		              workInProgress,
		              null,
		              Component,
		              renderLanes
		            )))
		          : reconcileChildren(
		              current$jscomp$0,
		              workInProgress,
		              Component,
		              renderLanes
		            );
		        workInProgress.memoizedState = lane.state;
		        current$jscomp$0 = workInProgress.child;
		      } else
		        current$jscomp$0 = bailoutOnAlreadyFinishedWork(
		          current$jscomp$0,
		          workInProgress,
		          renderLanes
		        );
		      renderLanes = workInProgress.stateNode;
		      _instance &&
		        renderLanes.props !== nextProps &&
		        (didWarnAboutReassigningProps ||
		          console.error(
		            "It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.",
		            getComponentNameFromFiber(workInProgress) || "a component"
		          ),
		        (didWarnAboutReassigningProps = !0));
		      return current$jscomp$0;
		    }
		    function mountHostRootWithoutHydrating(
		      current,
		      workInProgress,
		      nextChildren,
		      renderLanes
		    ) {
		      resetHydrationState();
		      workInProgress.flags |= 256;
		      reconcileChildren(current, workInProgress, nextChildren, renderLanes);
		      return workInProgress.child;
		    }
		    function validateFunctionComponentInDev(workInProgress, Component) {
		      Component &&
		        Component.childContextTypes &&
		        console.error(
		          "childContextTypes cannot be defined on a function component.\n  %s.childContextTypes = ...",
		          Component.displayName || Component.name || "Component"
		        );
		      "function" === typeof Component.getDerivedStateFromProps &&
		        ((workInProgress = getComponentNameFromType(Component) || "Unknown"),
		        didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress] ||
		          (console.error(
		            "%s: Function components do not support getDerivedStateFromProps.",
		            workInProgress
		          ),
		          (didWarnAboutGetDerivedStateOnFunctionComponent[workInProgress] =
		            !0)));
		      "object" === typeof Component.contextType &&
		        null !== Component.contextType &&
		        ((Component = getComponentNameFromType(Component) || "Unknown"),
		        didWarnAboutContextTypeOnFunctionComponent[Component] ||
		          (console.error(
		            "%s: Function components do not support contextType.",
		            Component
		          ),
		          (didWarnAboutContextTypeOnFunctionComponent[Component] = !0)));
		    }
		    function mountSuspenseOffscreenState(renderLanes) {
		      return { baseLanes: renderLanes, cachePool: getSuspendedCache() };
		    }
		    function getRemainingWorkInPrimaryTree(
		      current,
		      primaryTreeDidDefer,
		      renderLanes
		    ) {
		      current = null !== current ? current.childLanes & ~renderLanes : 0;
		      primaryTreeDidDefer && (current |= workInProgressDeferredLane);
		      return current;
		    }
		    function updateSuspenseComponent(current, workInProgress, renderLanes) {
		      var nextProps = workInProgress.pendingProps;
		      shouldSuspendImpl(workInProgress) && (workInProgress.flags |= 128);
		      var showFallback = !1,
		        didSuspend = 0 !== (workInProgress.flags & 128),
		        JSCompiler_temp;
		      (JSCompiler_temp = didSuspend) ||
		        (JSCompiler_temp =
		          null !== current && null === current.memoizedState
		            ? !1
		            : 0 !== (suspenseStackCursor.current & ForceSuspenseFallback));
		      JSCompiler_temp && ((showFallback = !0), (workInProgress.flags &= -129));
		      JSCompiler_temp = 0 !== (workInProgress.flags & 32);
		      workInProgress.flags &= -33;
		      if (null === current) {
		        if (isHydrating) {
		          showFallback
		            ? pushPrimaryTreeSuspenseHandler(workInProgress)
		            : reuseSuspenseHandlerOnStack(workInProgress);
		          if (isHydrating) {
		            var nextInstance = nextHydratableInstance,
		              JSCompiler_temp$jscomp$0;
		            (JSCompiler_temp$jscomp$0 = !nextInstance) ||
		              ((JSCompiler_temp$jscomp$0 = canHydrateSuspenseInstance(
		                nextInstance,
		                rootOrSingletonContext
		              )),
		              null !== JSCompiler_temp$jscomp$0
		                ? (warnIfNotHydrating(),
		                  (workInProgress.memoizedState = {
		                    dehydrated: JSCompiler_temp$jscomp$0,
		                    treeContext:
		                      null !== treeContextProvider
		                        ? { id: treeContextId, overflow: treeContextOverflow }
		                        : null,
		                    retryLane: 536870912
		                  }),
		                  (didSuspend = createFiber(18, null, null, NoMode)),
		                  (didSuspend.stateNode = JSCompiler_temp$jscomp$0),
		                  (didSuspend.return = workInProgress),
		                  (workInProgress.child = didSuspend),
		                  (hydrationParentFiber = workInProgress),
		                  (nextHydratableInstance = null),
		                  (JSCompiler_temp$jscomp$0 = !0))
		                : (JSCompiler_temp$jscomp$0 = !1),
		              (JSCompiler_temp$jscomp$0 = !JSCompiler_temp$jscomp$0));
		            JSCompiler_temp$jscomp$0 &&
		              (warnNonHydratedInstance(workInProgress, nextInstance),
		              throwOnHydrationMismatch(workInProgress));
		          }
		          nextInstance = workInProgress.memoizedState;
		          if (
		            null !== nextInstance &&
		            ((nextInstance = nextInstance.dehydrated), null !== nextInstance)
		          )
		            return (
		              isSuspenseInstanceFallback(nextInstance)
		                ? (workInProgress.lanes = 16)
		                : (workInProgress.lanes = 536870912),
		              null
		            );
		          popSuspenseHandler(workInProgress);
		        }
		        nextInstance = nextProps.children;
		        nextProps = nextProps.fallback;
		        if (showFallback)
		          return (
		            reuseSuspenseHandlerOnStack(workInProgress),
		            (showFallback = workInProgress.mode),
		            (nextInstance = mountWorkInProgressOffscreenFiber(
		              { mode: "hidden", children: nextInstance },
		              showFallback
		            )),
		            (nextProps = createFiberFromFragment(
		              nextProps,
		              showFallback,
		              renderLanes,
		              null
		            )),
		            (nextInstance.return = workInProgress),
		            (nextProps.return = workInProgress),
		            (nextInstance.sibling = nextProps),
		            (workInProgress.child = nextInstance),
		            (showFallback = workInProgress.child),
		            (showFallback.memoizedState =
		              mountSuspenseOffscreenState(renderLanes)),
		            (showFallback.childLanes = getRemainingWorkInPrimaryTree(
		              current,
		              JSCompiler_temp,
		              renderLanes
		            )),
		            (workInProgress.memoizedState = SUSPENDED_MARKER),
		            nextProps
		          );
		        pushPrimaryTreeSuspenseHandler(workInProgress);
		        return mountSuspensePrimaryChildren(workInProgress, nextInstance);
		      }
		      JSCompiler_temp$jscomp$0 = current.memoizedState;
		      if (
		        null !== JSCompiler_temp$jscomp$0 &&
		        ((nextInstance = JSCompiler_temp$jscomp$0.dehydrated),
		        null !== nextInstance)
		      ) {
		        if (didSuspend)
		          workInProgress.flags & 256
		            ? (pushPrimaryTreeSuspenseHandler(workInProgress),
		              (workInProgress.flags &= -257),
		              (workInProgress = retrySuspenseComponentWithoutHydrating(
		                current,
		                workInProgress,
		                renderLanes
		              )))
		            : null !== workInProgress.memoizedState
		              ? (reuseSuspenseHandlerOnStack(workInProgress),
		                (workInProgress.child = current.child),
		                (workInProgress.flags |= 128),
		                (workInProgress = null))
		              : (reuseSuspenseHandlerOnStack(workInProgress),
		                (showFallback = nextProps.fallback),
		                (nextInstance = workInProgress.mode),
		                (nextProps = mountWorkInProgressOffscreenFiber(
		                  { mode: "visible", children: nextProps.children },
		                  nextInstance
		                )),
		                (showFallback = createFiberFromFragment(
		                  showFallback,
		                  nextInstance,
		                  renderLanes,
		                  null
		                )),
		                (showFallback.flags |= 2),
		                (nextProps.return = workInProgress),
		                (showFallback.return = workInProgress),
		                (nextProps.sibling = showFallback),
		                (workInProgress.child = nextProps),
		                reconcileChildFibers(
		                  workInProgress,
		                  current.child,
		                  null,
		                  renderLanes
		                ),
		                (nextProps = workInProgress.child),
		                (nextProps.memoizedState =
		                  mountSuspenseOffscreenState(renderLanes)),
		                (nextProps.childLanes = getRemainingWorkInPrimaryTree(
		                  current,
		                  JSCompiler_temp,
		                  renderLanes
		                )),
		                (workInProgress.memoizedState = SUSPENDED_MARKER),
		                (workInProgress = showFallback));
		        else if (
		          (pushPrimaryTreeSuspenseHandler(workInProgress),
		          isHydrating &&
		            console.error(
		              "We should not be hydrating here. This is a bug in React. Please file a bug."
		            ),
		          isSuspenseInstanceFallback(nextInstance))
		        )
		          (nextInstance =
		            getSuspenseInstanceFallbackErrorDetails(nextInstance)),
		            (JSCompiler_temp = nextInstance.digest),
		            (showFallback = nextInstance.message),
		            (nextProps = nextInstance.stack),
		            (nextInstance = nextInstance.componentStack),
		            (showFallback = showFallback
		              ? Error(showFallback)
		              : Error(
		                  "The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering."
		                )),
		            (showFallback.stack = nextProps || ""),
		            (showFallback.digest = JSCompiler_temp),
		            (JSCompiler_temp = void 0 === nextInstance ? null : nextInstance),
		            (nextProps = {
		              value: showFallback,
		              source: null,
		              stack: JSCompiler_temp
		            }),
		            "string" === typeof JSCompiler_temp &&
		              CapturedStacks.set(showFallback, nextProps),
		            queueHydrationError(nextProps),
		            (workInProgress = retrySuspenseComponentWithoutHydrating(
		              current,
		              workInProgress,
		              renderLanes
		            ));
		        else if (
		          (didReceiveUpdate ||
		            propagateParentContextChanges(
		              current,
		              workInProgress,
		              renderLanes,
		              !1
		            ),
		          (JSCompiler_temp = 0 !== (renderLanes & current.childLanes)),
		          didReceiveUpdate || JSCompiler_temp)
		        ) {
		          JSCompiler_temp = workInProgressRoot;
		          if (null !== JSCompiler_temp) {
		            nextProps = renderLanes & -renderLanes;
		            if (0 !== (nextProps & 42)) nextProps = 1;
		            else
		              switch (nextProps) {
		                case 2:
		                  nextProps = 1;
		                  break;
		                case 8:
		                  nextProps = 4;
		                  break;
		                case 32:
		                  nextProps = 16;
		                  break;
		                case 128:
		                case 256:
		                case 512:
		                case 1024:
		                case 2048:
		                case 4096:
		                case 8192:
		                case 16384:
		                case 32768:
		                case 65536:
		                case 131072:
		                case 262144:
		                case 524288:
		                case 1048576:
		                case 2097152:
		                case 4194304:
		                case 8388608:
		                case 16777216:
		                case 33554432:
		                  nextProps = 64;
		                  break;
		                case 268435456:
		                  nextProps = 134217728;
		                  break;
		                default:
		                  nextProps = 0;
		              }
		            nextProps =
		              0 !== (nextProps & (JSCompiler_temp.suspendedLanes | renderLanes))
		                ? 0
		                : nextProps;
		            if (
		              0 !== nextProps &&
		              nextProps !== JSCompiler_temp$jscomp$0.retryLane
		            )
		              throw (
		                ((JSCompiler_temp$jscomp$0.retryLane = nextProps),
		                enqueueConcurrentRenderForLane(current, nextProps),
		                scheduleUpdateOnFiber(JSCompiler_temp, current, nextProps),
		                SelectiveHydrationException)
		              );
		          }
		          isSuspenseInstancePending(nextInstance) ||
		            renderDidSuspendDelayIfPossible();
		          workInProgress = retrySuspenseComponentWithoutHydrating(
		            current,
		            workInProgress,
		            renderLanes
		          );
		        } else
		          isSuspenseInstancePending(nextInstance)
		            ? ((workInProgress.flags |= 128),
		              (workInProgress.child = current.child),
		              (workInProgress = retryDehydratedSuspenseBoundary.bind(
		                null,
		                current
		              )),
		              registerSuspenseInstanceRetry(nextInstance, workInProgress),
		              (workInProgress = null))
		            : ((current = JSCompiler_temp$jscomp$0.treeContext),
		              supportsHydration &&
		                ((nextHydratableInstance =
		                  getFirstHydratableChildWithinSuspenseInstance(nextInstance)),
		                (hydrationParentFiber = workInProgress),
		                (isHydrating = !0),
		                (hydrationErrors = null),
		                (didSuspendOrErrorDEV = !1),
		                (hydrationDiffRootDEV = null),
		                (rootOrSingletonContext = !1),
		                null !== current &&
		                  (warnIfNotHydrating(),
		                  (idStack[idStackIndex++] = treeContextId),
		                  (idStack[idStackIndex++] = treeContextOverflow),
		                  (idStack[idStackIndex++] = treeContextProvider),
		                  (treeContextId = current.id),
		                  (treeContextOverflow = current.overflow),
		                  (treeContextProvider = workInProgress))),
		              (workInProgress = mountSuspensePrimaryChildren(
		                workInProgress,
		                nextProps.children
		              )),
		              (workInProgress.flags |= 4096));
		        return workInProgress;
		      }
		      if (showFallback)
		        return (
		          reuseSuspenseHandlerOnStack(workInProgress),
		          (showFallback = nextProps.fallback),
		          (nextInstance = workInProgress.mode),
		          (JSCompiler_temp$jscomp$0 = current.child),
		          (didSuspend = JSCompiler_temp$jscomp$0.sibling),
		          (nextProps = createWorkInProgress(JSCompiler_temp$jscomp$0, {
		            mode: "hidden",
		            children: nextProps.children
		          })),
		          (nextProps.subtreeFlags =
		            JSCompiler_temp$jscomp$0.subtreeFlags & 31457280),
		          null !== didSuspend
		            ? (showFallback = createWorkInProgress(didSuspend, showFallback))
		            : ((showFallback = createFiberFromFragment(
		                showFallback,
		                nextInstance,
		                renderLanes,
		                null
		              )),
		              (showFallback.flags |= 2)),
		          (showFallback.return = workInProgress),
		          (nextProps.return = workInProgress),
		          (nextProps.sibling = showFallback),
		          (workInProgress.child = nextProps),
		          (nextProps = showFallback),
		          (showFallback = workInProgress.child),
		          (nextInstance = current.child.memoizedState),
		          null === nextInstance
		            ? (nextInstance = mountSuspenseOffscreenState(renderLanes))
		            : ((JSCompiler_temp$jscomp$0 = nextInstance.cachePool),
		              null !== JSCompiler_temp$jscomp$0
		                ? ((didSuspend = isPrimaryRenderer
		                    ? CacheContext._currentValue
		                    : CacheContext._currentValue2),
		                  (JSCompiler_temp$jscomp$0 =
		                    JSCompiler_temp$jscomp$0.parent !== didSuspend
		                      ? { parent: didSuspend, pool: didSuspend }
		                      : JSCompiler_temp$jscomp$0))
		                : (JSCompiler_temp$jscomp$0 = getSuspendedCache()),
		              (nextInstance = {
		                baseLanes: nextInstance.baseLanes | renderLanes,
		                cachePool: JSCompiler_temp$jscomp$0
		              })),
		          (showFallback.memoizedState = nextInstance),
		          (showFallback.childLanes = getRemainingWorkInPrimaryTree(
		            current,
		            JSCompiler_temp,
		            renderLanes
		          )),
		          (workInProgress.memoizedState = SUSPENDED_MARKER),
		          nextProps
		        );
		      pushPrimaryTreeSuspenseHandler(workInProgress);
		      renderLanes = current.child;
		      current = renderLanes.sibling;
		      renderLanes = createWorkInProgress(renderLanes, {
		        mode: "visible",
		        children: nextProps.children
		      });
		      renderLanes.return = workInProgress;
		      renderLanes.sibling = null;
		      null !== current &&
		        ((JSCompiler_temp = workInProgress.deletions),
		        null === JSCompiler_temp
		          ? ((workInProgress.deletions = [current]),
		            (workInProgress.flags |= 16))
		          : JSCompiler_temp.push(current));
		      workInProgress.child = renderLanes;
		      workInProgress.memoizedState = null;
		      return renderLanes;
		    }
		    function mountSuspensePrimaryChildren(workInProgress, primaryChildren) {
		      primaryChildren = mountWorkInProgressOffscreenFiber(
		        { mode: "visible", children: primaryChildren },
		        workInProgress.mode
		      );
		      primaryChildren.return = workInProgress;
		      return (workInProgress.child = primaryChildren);
		    }
		    function mountWorkInProgressOffscreenFiber(offscreenProps, mode) {
		      return createFiberFromOffscreen(offscreenProps, mode, 0, null);
		    }
		    function retrySuspenseComponentWithoutHydrating(
		      current,
		      workInProgress,
		      renderLanes
		    ) {
		      reconcileChildFibers(workInProgress, current.child, null, renderLanes);
		      current = mountSuspensePrimaryChildren(
		        workInProgress,
		        workInProgress.pendingProps.children
		      );
		      current.flags |= 2;
		      workInProgress.memoizedState = null;
		      return current;
		    }
		    function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
		      fiber.lanes |= renderLanes;
		      var alternate = fiber.alternate;
		      null !== alternate && (alternate.lanes |= renderLanes);
		      scheduleContextWorkOnParentPath(
		        fiber.return,
		        renderLanes,
		        propagationRoot
		      );
		    }
		    function validateSuspenseListNestedChild(childSlot, index) {
		      var isAnArray = isArrayImpl(childSlot);
		      childSlot = !isAnArray && "function" === typeof getIteratorFn(childSlot);
		      return isAnArray || childSlot
		        ? ((isAnArray = isAnArray ? "array" : "iterable"),
		          console.error(
		            "A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>",
		            isAnArray,
		            index,
		            isAnArray
		          ),
		          !1)
		        : !0;
		    }
		    function initSuspenseListRenderState(
		      workInProgress,
		      isBackwards,
		      tail,
		      lastContentRow,
		      tailMode
		    ) {
		      var renderState = workInProgress.memoizedState;
		      null === renderState
		        ? (workInProgress.memoizedState = {
		            isBackwards: isBackwards,
		            rendering: null,
		            renderingStartTime: 0,
		            last: lastContentRow,
		            tail: tail,
		            tailMode: tailMode
		          })
		        : ((renderState.isBackwards = isBackwards),
		          (renderState.rendering = null),
		          (renderState.renderingStartTime = 0),
		          (renderState.last = lastContentRow),
		          (renderState.tail = tail),
		          (renderState.tailMode = tailMode));
		    }
		    function updateSuspenseListComponent(current, workInProgress, renderLanes) {
		      var nextProps = workInProgress.pendingProps,
		        revealOrder = nextProps.revealOrder,
		        tailMode = nextProps.tail;
		      nextProps = nextProps.children;
		      if (
		        void 0 !== revealOrder &&
		        "forwards" !== revealOrder &&
		        "backwards" !== revealOrder &&
		        "together" !== revealOrder &&
		        !didWarnAboutRevealOrder[revealOrder]
		      )
		        if (
		          ((didWarnAboutRevealOrder[revealOrder] = !0),
		          "string" === typeof revealOrder)
		        )
		          switch (revealOrder.toLowerCase()) {
		            case "together":
		            case "forwards":
		            case "backwards":
		              console.error(
		                '"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.',
		                revealOrder,
		                revealOrder.toLowerCase()
		              );
		              break;
		            case "forward":
		            case "backward":
		              console.error(
		                '"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.',
		                revealOrder,
		                revealOrder.toLowerCase()
		              );
		              break;
		            default:
		              console.error(
		                '"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
		                revealOrder
		              );
		          }
		        else
		          console.error(
		            '%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?',
		            revealOrder
		          );
		      void 0 === tailMode ||
		        didWarnAboutTailOptions[tailMode] ||
		        ("collapsed" !== tailMode && "hidden" !== tailMode
		          ? ((didWarnAboutTailOptions[tailMode] = !0),
		            console.error(
		              '"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?',
		              tailMode
		            ))
		          : "forwards" !== revealOrder &&
		            "backwards" !== revealOrder &&
		            ((didWarnAboutTailOptions[tailMode] = !0),
		            console.error(
		              '<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?',
		              tailMode
		            )));
		      a: if (
		        ("forwards" === revealOrder || "backwards" === revealOrder) &&
		        void 0 !== nextProps &&
		        null !== nextProps &&
		        !1 !== nextProps
		      )
		        if (isArrayImpl(nextProps))
		          for (var i = 0; i < nextProps.length; i++) {
		            if (!validateSuspenseListNestedChild(nextProps[i], i)) break a;
		          }
		        else if (((i = getIteratorFn(nextProps)), "function" === typeof i)) {
		          if ((i = i.call(nextProps)))
		            for (var step = i.next(), _i = 0; !step.done; step = i.next()) {
		              if (!validateSuspenseListNestedChild(step.value, _i)) break a;
		              _i++;
		            }
		        } else
		          console.error(
		            'A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?',
		            revealOrder
		          );
		      reconcileChildren(current, workInProgress, nextProps, renderLanes);
		      nextProps = suspenseStackCursor.current;
		      if (0 !== (nextProps & ForceSuspenseFallback))
		        (nextProps =
		          (nextProps & SubtreeSuspenseContextMask) | ForceSuspenseFallback),
		          (workInProgress.flags |= 128);
		      else {
		        if (null !== current && 0 !== (current.flags & 128))
		          a: for (current = workInProgress.child; null !== current; ) {
		            if (13 === current.tag)
		              null !== current.memoizedState &&
		                scheduleSuspenseWorkOnFiber(
		                  current,
		                  renderLanes,
		                  workInProgress
		                );
		            else if (19 === current.tag)
		              scheduleSuspenseWorkOnFiber(current, renderLanes, workInProgress);
		            else if (null !== current.child) {
		              current.child.return = current;
		              current = current.child;
		              continue;
		            }
		            if (current === workInProgress) break a;
		            for (; null === current.sibling; ) {
		              if (null === current.return || current.return === workInProgress)
		                break a;
		              current = current.return;
		            }
		            current.sibling.return = current.return;
		            current = current.sibling;
		          }
		        nextProps &= SubtreeSuspenseContextMask;
		      }
		      push(suspenseStackCursor, nextProps, workInProgress);
		      switch (revealOrder) {
		        case "forwards":
		          renderLanes = workInProgress.child;
		          for (revealOrder = null; null !== renderLanes; )
		            (current = renderLanes.alternate),
		              null !== current &&
		                null === findFirstSuspended(current) &&
		                (revealOrder = renderLanes),
		              (renderLanes = renderLanes.sibling);
		          renderLanes = revealOrder;
		          null === renderLanes
		            ? ((revealOrder = workInProgress.child),
		              (workInProgress.child = null))
		            : ((revealOrder = renderLanes.sibling),
		              (renderLanes.sibling = null));
		          initSuspenseListRenderState(
		            workInProgress,
		            !1,
		            revealOrder,
		            renderLanes,
		            tailMode
		          );
		          break;
		        case "backwards":
		          renderLanes = null;
		          revealOrder = workInProgress.child;
		          for (workInProgress.child = null; null !== revealOrder; ) {
		            current = revealOrder.alternate;
		            if (null !== current && null === findFirstSuspended(current)) {
		              workInProgress.child = revealOrder;
		              break;
		            }
		            current = revealOrder.sibling;
		            revealOrder.sibling = renderLanes;
		            renderLanes = revealOrder;
		            revealOrder = current;
		          }
		          initSuspenseListRenderState(
		            workInProgress,
		            !0,
		            renderLanes,
		            null,
		            tailMode
		          );
		          break;
		        case "together":
		          initSuspenseListRenderState(workInProgress, !1, null, null, void 0);
		          break;
		        default:
		          workInProgress.memoizedState = null;
		      }
		      return workInProgress.child;
		    }
		    function bailoutOnAlreadyFinishedWork(
		      current,
		      workInProgress,
		      renderLanes
		    ) {
		      null !== current && (workInProgress.dependencies = current.dependencies);
		      profilerStartTime = -1;
		      workInProgressRootSkippedLanes |= workInProgress.lanes;
		      if (0 === (renderLanes & workInProgress.childLanes))
		        if (null !== current) {
		          if (
		            (propagateParentContextChanges(
		              current,
		              workInProgress,
		              renderLanes,
		              !1
		            ),
		            0 === (renderLanes & workInProgress.childLanes))
		          )
		            return null;
		        } else return null;
		      if (null !== current && workInProgress.child !== current.child)
		        throw Error("Resuming work not yet implemented.");
		      if (null !== workInProgress.child) {
		        current = workInProgress.child;
		        renderLanes = createWorkInProgress(current, current.pendingProps);
		        workInProgress.child = renderLanes;
		        for (renderLanes.return = workInProgress; null !== current.sibling; )
		          (current = current.sibling),
		            (renderLanes = renderLanes.sibling =
		              createWorkInProgress(current, current.pendingProps)),
		            (renderLanes.return = workInProgress);
		        renderLanes.sibling = null;
		      }
		      return workInProgress.child;
		    }
		    function checkScheduledUpdateOrContext(current, renderLanes) {
		      if (0 !== (current.lanes & renderLanes)) return !0;
		      current = current.dependencies;
		      return null !== current && checkIfContextChanged(current) ? !0 : !1;
		    }
		    function attemptEarlyBailoutIfNoScheduledUpdate(
		      current,
		      workInProgress,
		      renderLanes
		    ) {
		      switch (workInProgress.tag) {
		        case 3:
		          pushHostContainer(
		            workInProgress,
		            workInProgress.stateNode.containerInfo
		          );
		          pushProvider(
		            workInProgress,
		            CacheContext,
		            current.memoizedState.cache
		          );
		          resetHydrationState();
		          break;
		        case 27:
		        case 5:
		          pushHostContext(workInProgress);
		          break;
		        case 4:
		          pushHostContainer(
		            workInProgress,
		            workInProgress.stateNode.containerInfo
		          );
		          break;
		        case 10:
		          pushProvider(
		            workInProgress,
		            workInProgress.type,
		            workInProgress.memoizedProps.value
		          );
		          break;
		        case 12:
		          0 !== (renderLanes & workInProgress.childLanes) &&
		            (workInProgress.flags |= 4);
		          workInProgress.flags |= 2048;
		          var stateNode = workInProgress.stateNode;
		          stateNode.effectDuration = -0;
		          stateNode.passiveEffectDuration = -0;
		          break;
		        case 13:
		          stateNode = workInProgress.memoizedState;
		          if (null !== stateNode) {
		            if (null !== stateNode.dehydrated)
		              return (
		                pushPrimaryTreeSuspenseHandler(workInProgress),
		                (workInProgress.flags |= 128),
		                null
		              );
		            if (0 !== (renderLanes & workInProgress.child.childLanes))
		              return updateSuspenseComponent(
		                current,
		                workInProgress,
		                renderLanes
		              );
		            pushPrimaryTreeSuspenseHandler(workInProgress);
		            current = bailoutOnAlreadyFinishedWork(
		              current,
		              workInProgress,
		              renderLanes
		            );
		            return null !== current ? current.sibling : null;
		          }
		          pushPrimaryTreeSuspenseHandler(workInProgress);
		          break;
		        case 19:
		          var didSuspendBefore = 0 !== (current.flags & 128);
		          stateNode = 0 !== (renderLanes & workInProgress.childLanes);
		          stateNode ||
		            (propagateParentContextChanges(
		              current,
		              workInProgress,
		              renderLanes,
		              !1
		            ),
		            (stateNode = 0 !== (renderLanes & workInProgress.childLanes)));
		          if (didSuspendBefore) {
		            if (stateNode)
		              return updateSuspenseListComponent(
		                current,
		                workInProgress,
		                renderLanes
		              );
		            workInProgress.flags |= 128;
		          }
		          didSuspendBefore = workInProgress.memoizedState;
		          null !== didSuspendBefore &&
		            ((didSuspendBefore.rendering = null),
		            (didSuspendBefore.tail = null),
		            (didSuspendBefore.lastEffect = null));
		          push(
		            suspenseStackCursor,
		            suspenseStackCursor.current,
		            workInProgress
		          );
		          if (stateNode) break;
		          else return null;
		        case 22:
		        case 23:
		          return (
		            (workInProgress.lanes = 0),
		            updateOffscreenComponent(current, workInProgress, renderLanes)
		          );
		        case 24:
		          pushProvider(
		            workInProgress,
		            CacheContext,
		            current.memoizedState.cache
		          );
		      }
		      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
		    }
		    function beginWork(current, workInProgress, renderLanes) {
		      if (workInProgress._debugNeedsRemount && null !== current) {
		        renderLanes = createFiberFromTypeAndProps(
		          workInProgress.type,
		          workInProgress.key,
		          workInProgress.pendingProps,
		          workInProgress._debugOwner || null,
		          workInProgress.mode,
		          workInProgress.lanes
		        );
		        var returnFiber = workInProgress.return;
		        if (null === returnFiber) throw Error("Cannot swap the root fiber.");
		        current.alternate = null;
		        workInProgress.alternate = null;
		        renderLanes.index = workInProgress.index;
		        renderLanes.sibling = workInProgress.sibling;
		        renderLanes.return = workInProgress.return;
		        renderLanes.ref = workInProgress.ref;
		        renderLanes._debugInfo = workInProgress._debugInfo;
		        if (workInProgress === returnFiber.child)
		          returnFiber.child = renderLanes;
		        else {
		          var prevSibling = returnFiber.child;
		          if (null === prevSibling)
		            throw Error("Expected parent to have a child.");
		          for (; prevSibling.sibling !== workInProgress; )
		            if (((prevSibling = prevSibling.sibling), null === prevSibling))
		              throw Error("Expected to find the previous sibling.");
		          prevSibling.sibling = renderLanes;
		        }
		        workInProgress = returnFiber.deletions;
		        null === workInProgress
		          ? ((returnFiber.deletions = [current]), (returnFiber.flags |= 16))
		          : workInProgress.push(current);
		        renderLanes.flags |= 2;
		        return renderLanes;
		      }
		      if (null !== current)
		        if (
		          current.memoizedProps !== workInProgress.pendingProps ||
		          workInProgress.type !== current.type
		        )
		          didReceiveUpdate = !0;
		        else {
		          if (
		            !checkScheduledUpdateOrContext(current, renderLanes) &&
		            0 === (workInProgress.flags & 128)
		          )
		            return (
		              (didReceiveUpdate = !1),
		              attemptEarlyBailoutIfNoScheduledUpdate(
		                current,
		                workInProgress,
		                renderLanes
		              )
		            );
		          didReceiveUpdate = 0 !== (current.flags & 131072) ? !0 : !1;
		        }
		      else {
		        didReceiveUpdate = !1;
		        if ((returnFiber = isHydrating))
		          warnIfNotHydrating(),
		            (returnFiber = 0 !== (workInProgress.flags & 1048576));
		        returnFiber &&
		          ((returnFiber = workInProgress.index),
		          warnIfNotHydrating(),
		          pushTreeId(workInProgress, treeForkCount, returnFiber));
		      }
		      workInProgress.lanes = 0;
		      switch (workInProgress.tag) {
		        case 16:
		          a: if (
		            ((returnFiber = workInProgress.pendingProps),
		            (current = callLazyInitInDEV(workInProgress.elementType)),
		            (workInProgress.type = current),
		            "function" === typeof current)
		          )
		            shouldConstruct(current)
		              ? ((returnFiber = resolveClassComponentProps(
		                  current,
		                  returnFiber
		                )),
		                (workInProgress.tag = 1),
		                (workInProgress.type = current =
		                  resolveFunctionForHotReloading(current)),
		                (workInProgress = updateClassComponent(
		                  null,
		                  workInProgress,
		                  current,
		                  returnFiber,
		                  renderLanes
		                )))
		              : ((workInProgress.tag = 0),
		                validateFunctionComponentInDev(workInProgress, current),
		                (workInProgress.type = current =
		                  resolveFunctionForHotReloading(current)),
		                (workInProgress = updateFunctionComponent(
		                  null,
		                  workInProgress,
		                  current,
		                  returnFiber,
		                  renderLanes
		                )));
		          else {
		            if (void 0 !== current && null !== current)
		              if (
		                ((prevSibling = current.$$typeof),
		                prevSibling === REACT_FORWARD_REF_TYPE)
		              ) {
		                workInProgress.tag = 11;
		                workInProgress.type = current =
		                  resolveForwardRefForHotReloading(current);
		                workInProgress = updateForwardRef(
		                  null,
		                  workInProgress,
		                  current,
		                  returnFiber,
		                  renderLanes
		                );
		                break a;
		              } else if (prevSibling === REACT_MEMO_TYPE) {
		                workInProgress.tag = 14;
		                workInProgress = updateMemoComponent(
		                  null,
		                  workInProgress,
		                  current,
		                  returnFiber,
		                  renderLanes
		                );
		                break a;
		              }
		            workInProgress = "";
		            null !== current &&
		              "object" === typeof current &&
		              current.$$typeof === REACT_LAZY_TYPE &&
		              (workInProgress =
		                " Did you wrap a component in React.lazy() more than once?");
		            current = getComponentNameFromType(current) || current;
		            throw Error(
		              "Element type is invalid. Received a promise that resolves to: " +
		                current +
		                ". Lazy element type must resolve to a class or function." +
		                workInProgress
		            );
		          }
		          return workInProgress;
		        case 0:
		          return updateFunctionComponent(
		            current,
		            workInProgress,
		            workInProgress.type,
		            workInProgress.pendingProps,
		            renderLanes
		          );
		        case 1:
		          return (
		            (returnFiber = workInProgress.type),
		            (prevSibling = resolveClassComponentProps(
		              returnFiber,
		              workInProgress.pendingProps
		            )),
		            updateClassComponent(
		              current,
		              workInProgress,
		              returnFiber,
		              prevSibling,
		              renderLanes
		            )
		          );
		        case 3:
		          a: {
		            pushHostContainer(
		              workInProgress,
		              workInProgress.stateNode.containerInfo
		            );
		            if (null === current)
		              throw Error(
		                "Should have a current fiber. This is a bug in React."
		              );
		            var nextProps = workInProgress.pendingProps;
		            prevSibling = workInProgress.memoizedState;
		            returnFiber = prevSibling.element;
		            cloneUpdateQueue(current, workInProgress);
		            processUpdateQueue(workInProgress, nextProps, null, renderLanes);
		            var nextState = workInProgress.memoizedState;
		            nextProps = nextState.cache;
		            pushProvider(workInProgress, CacheContext, nextProps);
		            nextProps !== prevSibling.cache &&
		              propagateContextChanges(
		                workInProgress,
		                [CacheContext],
		                renderLanes,
		                !0
		              );
		            suspendIfUpdateReadFromEntangledAsyncAction();
		            nextProps = nextState.element;
		            if (supportsHydration && prevSibling.isDehydrated)
		              if (
		                ((prevSibling = {
		                  element: nextProps,
		                  isDehydrated: !1,
		                  cache: nextState.cache
		                }),
		                (workInProgress.updateQueue.baseState = prevSibling),
		                (workInProgress.memoizedState = prevSibling),
		                workInProgress.flags & 256)
		              ) {
		                workInProgress = mountHostRootWithoutHydrating(
		                  current,
		                  workInProgress,
		                  nextProps,
		                  renderLanes
		                );
		                break a;
		              } else if (nextProps !== returnFiber) {
		                returnFiber = createCapturedValueAtFiber(
		                  Error(
		                    "This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."
		                  ),
		                  workInProgress
		                );
		                queueHydrationError(returnFiber);
		                workInProgress = mountHostRootWithoutHydrating(
		                  current,
		                  workInProgress,
		                  nextProps,
		                  renderLanes
		                );
		                break a;
		              } else
		                for (
		                  supportsHydration &&
		                    ((nextHydratableInstance =
		                      getFirstHydratableChildWithinContainer(
		                        workInProgress.stateNode.containerInfo
		                      )),
		                    (hydrationParentFiber = workInProgress),
		                    (isHydrating = !0),
		                    (hydrationErrors = null),
		                    (didSuspendOrErrorDEV = !1),
		                    (hydrationDiffRootDEV = null),
		                    (rootOrSingletonContext = !0)),
		                    current = mountChildFibers(
		                      workInProgress,
		                      null,
		                      nextProps,
		                      renderLanes
		                    ),
		                    workInProgress.child = current;
		                  current;

		                )
		                  (current.flags = (current.flags & -3) | 4096),
		                    (current = current.sibling);
		            else {
		              resetHydrationState();
		              if (nextProps === returnFiber) {
		                workInProgress = bailoutOnAlreadyFinishedWork(
		                  current,
		                  workInProgress,
		                  renderLanes
		                );
		                break a;
		              }
		              reconcileChildren(
		                current,
		                workInProgress,
		                nextProps,
		                renderLanes
		              );
		            }
		            workInProgress = workInProgress.child;
		          }
		          return workInProgress;
		        case 26:
		          if (supportsResources)
		            return (
		              markRef(current, workInProgress),
		              null === current
		                ? (current = getResource(
		                    workInProgress.type,
		                    null,
		                    workInProgress.pendingProps,
		                    null
		                  ))
		                  ? (workInProgress.memoizedState = current)
		                  : isHydrating ||
		                    (workInProgress.stateNode = createHoistableInstance(
		                      workInProgress.type,
		                      workInProgress.pendingProps,
		                      requiredContext(rootInstanceStackCursor.current),
		                      workInProgress
		                    ))
		                : (workInProgress.memoizedState = getResource(
		                    workInProgress.type,
		                    current.memoizedProps,
		                    workInProgress.pendingProps,
		                    current.memoizedState
		                  )),
		              null
		            );
		        case 27:
		          if (supportsSingletons)
		            return (
		              pushHostContext(workInProgress),
		              null === current &&
		                supportsSingletons &&
		                isHydrating &&
		                ((prevSibling = requiredContext(
		                  rootInstanceStackCursor.current
		                )),
		                (returnFiber = getHostContext()),
		                (prevSibling = workInProgress.stateNode =
		                  resolveSingletonInstance(
		                    workInProgress.type,
		                    workInProgress.pendingProps,
		                    prevSibling,
		                    returnFiber,
		                    !1
		                  )),
		                didSuspendOrErrorDEV ||
		                  ((returnFiber = diffHydratedPropsForDevWarnings(
		                    prevSibling,
		                    workInProgress.type,
		                    workInProgress.pendingProps,
		                    returnFiber
		                  )),
		                  null !== returnFiber &&
		                    (buildHydrationDiffNode(workInProgress, 0).serverProps =
		                      returnFiber)),
		                (hydrationParentFiber = workInProgress),
		                (rootOrSingletonContext = !0),
		                (nextHydratableInstance =
		                  getFirstHydratableChild(prevSibling))),
		              (returnFiber = workInProgress.pendingProps.children),
		              null !== current || isHydrating
		                ? reconcileChildren(
		                    current,
		                    workInProgress,
		                    returnFiber,
		                    renderLanes
		                  )
		                : (workInProgress.child = reconcileChildFibers(
		                    workInProgress,
		                    null,
		                    returnFiber,
		                    renderLanes
		                  )),
		              markRef(current, workInProgress),
		              workInProgress.child
		            );
		        case 5:
		          return (
		            null === current &&
		              isHydrating &&
		              ((nextProps = getHostContext()),
		              (returnFiber = validateHydratableInstance(
		                workInProgress.type,
		                workInProgress.pendingProps,
		                nextProps
		              )),
		              (prevSibling = nextHydratableInstance),
		              (nextState = !prevSibling) ||
		                ((nextState = canHydrateInstance(
		                  prevSibling,
		                  workInProgress.type,
		                  workInProgress.pendingProps,
		                  rootOrSingletonContext
		                )),
		                null !== nextState
		                  ? ((workInProgress.stateNode = nextState),
		                    didSuspendOrErrorDEV ||
		                      ((nextProps = diffHydratedPropsForDevWarnings(
		                        nextState,
		                        workInProgress.type,
		                        workInProgress.pendingProps,
		                        nextProps
		                      )),
		                      null !== nextProps &&
		                        (buildHydrationDiffNode(workInProgress, 0).serverProps =
		                          nextProps)),
		                    (hydrationParentFiber = workInProgress),
		                    (nextHydratableInstance =
		                      getFirstHydratableChild(nextState)),
		                    (rootOrSingletonContext = !1),
		                    (nextProps = !0))
		                  : (nextProps = !1),
		                (nextState = !nextProps)),
		              nextState &&
		                (returnFiber &&
		                  warnNonHydratedInstance(workInProgress, prevSibling),
		                throwOnHydrationMismatch(workInProgress))),
		            pushHostContext(workInProgress),
		            (prevSibling = workInProgress.type),
		            (nextProps = workInProgress.pendingProps),
		            (nextState = null !== current ? current.memoizedProps : null),
		            (returnFiber = nextProps.children),
		            shouldSetTextContent(prevSibling, nextProps)
		              ? (returnFiber = null)
		              : null !== nextState &&
		                shouldSetTextContent(prevSibling, nextState) &&
		                (workInProgress.flags |= 32),
		            null !== workInProgress.memoizedState &&
		              ((prevSibling = renderWithHooks(
		                current,
		                workInProgress,
		                TransitionAwareHostComponent,
		                null,
		                null,
		                renderLanes
		              )),
		              isPrimaryRenderer
		                ? (HostTransitionContext._currentValue = prevSibling)
		                : (HostTransitionContext._currentValue2 = prevSibling)),
		            markRef(current, workInProgress),
		            reconcileChildren(
		              current,
		              workInProgress,
		              returnFiber,
		              renderLanes
		            ),
		            workInProgress.child
		          );
		        case 6:
		          return (
		            null === current &&
		              isHydrating &&
		              ((current = workInProgress.pendingProps),
		              (renderLanes = getHostContext()),
		              (current = validateHydratableTextInstance(current, renderLanes)),
		              (renderLanes = nextHydratableInstance),
		              (returnFiber = !renderLanes) ||
		                ((returnFiber = canHydrateTextInstance(
		                  renderLanes,
		                  workInProgress.pendingProps,
		                  rootOrSingletonContext
		                )),
		                null !== returnFiber
		                  ? ((workInProgress.stateNode = returnFiber),
		                    (hydrationParentFiber = workInProgress),
		                    (nextHydratableInstance = null),
		                    (returnFiber = !0))
		                  : (returnFiber = !1),
		                (returnFiber = !returnFiber)),
		              returnFiber &&
		                (current &&
		                  warnNonHydratedInstance(workInProgress, renderLanes),
		                throwOnHydrationMismatch(workInProgress))),
		            null
		          );
		        case 13:
		          return updateSuspenseComponent(current, workInProgress, renderLanes);
		        case 4:
		          return (
		            pushHostContainer(
		              workInProgress,
		              workInProgress.stateNode.containerInfo
		            ),
		            (returnFiber = workInProgress.pendingProps),
		            null === current
		              ? (workInProgress.child = reconcileChildFibers(
		                  workInProgress,
		                  null,
		                  returnFiber,
		                  renderLanes
		                ))
		              : reconcileChildren(
		                  current,
		                  workInProgress,
		                  returnFiber,
		                  renderLanes
		                ),
		            workInProgress.child
		          );
		        case 11:
		          return updateForwardRef(
		            current,
		            workInProgress,
		            workInProgress.type,
		            workInProgress.pendingProps,
		            renderLanes
		          );
		        case 7:
		          return (
		            reconcileChildren(
		              current,
		              workInProgress,
		              workInProgress.pendingProps,
		              renderLanes
		            ),
		            workInProgress.child
		          );
		        case 8:
		          return (
		            reconcileChildren(
		              current,
		              workInProgress,
		              workInProgress.pendingProps.children,
		              renderLanes
		            ),
		            workInProgress.child
		          );
		        case 12:
		          return (
		            (workInProgress.flags |= 4),
		            (workInProgress.flags |= 2048),
		            (returnFiber = workInProgress.stateNode),
		            (returnFiber.effectDuration = -0),
		            (returnFiber.passiveEffectDuration = -0),
		            reconcileChildren(
		              current,
		              workInProgress,
		              workInProgress.pendingProps.children,
		              renderLanes
		            ),
		            workInProgress.child
		          );
		        case 10:
		          return (
		            (returnFiber = workInProgress.type),
		            (prevSibling = workInProgress.pendingProps),
		            (nextProps = prevSibling.value),
		            "value" in prevSibling ||
		              hasWarnedAboutUsingNoValuePropOnContextProvider ||
		              ((hasWarnedAboutUsingNoValuePropOnContextProvider = !0),
		              console.error(
		                "The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?"
		              )),
		            pushProvider(workInProgress, returnFiber, nextProps),
		            reconcileChildren(
		              current,
		              workInProgress,
		              prevSibling.children,
		              renderLanes
		            ),
		            workInProgress.child
		          );
		        case 9:
		          return (
		            (prevSibling = workInProgress.type._context),
		            (returnFiber = workInProgress.pendingProps.children),
		            "function" !== typeof returnFiber &&
		              console.error(
		                "A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it."
		              ),
		            prepareToReadContext(workInProgress),
		            (prevSibling = readContext(prevSibling)),
		            markComponentRenderStarted(workInProgress),
		            (returnFiber = callComponentInDEV(
		              returnFiber,
		              prevSibling,
		              void 0
		            )),
		            markComponentRenderStopped(),
		            (workInProgress.flags |= 1),
		            reconcileChildren(
		              current,
		              workInProgress,
		              returnFiber,
		              renderLanes
		            ),
		            workInProgress.child
		          );
		        case 14:
		          return updateMemoComponent(
		            current,
		            workInProgress,
		            workInProgress.type,
		            workInProgress.pendingProps,
		            renderLanes
		          );
		        case 15:
		          return updateSimpleMemoComponent(
		            current,
		            workInProgress,
		            workInProgress.type,
		            workInProgress.pendingProps,
		            renderLanes
		          );
		        case 19:
		          return updateSuspenseListComponent(
		            current,
		            workInProgress,
		            renderLanes
		          );
		        case 22:
		          return updateOffscreenComponent(current, workInProgress, renderLanes);
		        case 24:
		          return (
		            prepareToReadContext(workInProgress),
		            (returnFiber = readContext(CacheContext)),
		            null === current
		              ? ((prevSibling = peekCacheFromPool()),
		                null === prevSibling &&
		                  ((prevSibling = workInProgressRoot),
		                  (nextProps = createCache()),
		                  (prevSibling.pooledCache = nextProps),
		                  retainCache(nextProps),
		                  null !== nextProps &&
		                    (prevSibling.pooledCacheLanes |= renderLanes),
		                  (prevSibling = nextProps)),
		                (workInProgress.memoizedState = {
		                  parent: returnFiber,
		                  cache: prevSibling
		                }),
		                initializeUpdateQueue(workInProgress),
		                pushProvider(workInProgress, CacheContext, prevSibling))
		              : (0 !== (current.lanes & renderLanes) &&
		                  (cloneUpdateQueue(current, workInProgress),
		                  processUpdateQueue(workInProgress, null, null, renderLanes),
		                  suspendIfUpdateReadFromEntangledAsyncAction()),
		                (prevSibling = current.memoizedState),
		                (nextProps = workInProgress.memoizedState),
		                prevSibling.parent !== returnFiber
		                  ? ((prevSibling = {
		                      parent: returnFiber,
		                      cache: returnFiber
		                    }),
		                    (workInProgress.memoizedState = prevSibling),
		                    0 === workInProgress.lanes &&
		                      (workInProgress.memoizedState =
		                        workInProgress.updateQueue.baseState =
		                          prevSibling),
		                    pushProvider(workInProgress, CacheContext, returnFiber))
		                  : ((returnFiber = nextProps.cache),
		                    pushProvider(workInProgress, CacheContext, returnFiber),
		                    returnFiber !== prevSibling.cache &&
		                      propagateContextChanges(
		                        workInProgress,
		                        [CacheContext],
		                        renderLanes,
		                        !0
		                      ))),
		            reconcileChildren(
		              current,
		              workInProgress,
		              workInProgress.pendingProps.children,
		              renderLanes
		            ),
		            workInProgress.child
		          );
		        case 29:
		          throw workInProgress.pendingProps;
		      }
		      throw Error(
		        "Unknown unit of work tag (" +
		          workInProgress.tag +
		          "). This error is likely caused by a bug in React. Please file an issue."
		      );
		    }
		    function resetContextDependencies() {
		      lastContextDependency = currentlyRenderingFiber = null;
		      isDisallowedContextReadInDEV = !1;
		    }
		    function pushProvider(providerFiber, context, nextValue) {
		      isPrimaryRenderer
		        ? (push(valueCursor, context._currentValue, providerFiber),
		          (context._currentValue = nextValue),
		          push(rendererCursorDEV, context._currentRenderer, providerFiber),
		          void 0 !== context._currentRenderer &&
		            null !== context._currentRenderer &&
		            context._currentRenderer !== rendererSigil &&
		            console.error(
		              "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."
		            ),
		          (context._currentRenderer = rendererSigil))
		        : (push(valueCursor, context._currentValue2, providerFiber),
		          (context._currentValue2 = nextValue),
		          push(renderer2CursorDEV, context._currentRenderer2, providerFiber),
		          void 0 !== context._currentRenderer2 &&
		            null !== context._currentRenderer2 &&
		            context._currentRenderer2 !== rendererSigil &&
		            console.error(
		              "Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported."
		            ),
		          (context._currentRenderer2 = rendererSigil));
		    }
		    function popProvider(context, providerFiber) {
		      var currentValue = valueCursor.current;
		      isPrimaryRenderer
		        ? ((context._currentValue = currentValue),
		          (currentValue = rendererCursorDEV.current),
		          pop(rendererCursorDEV, providerFiber),
		          (context._currentRenderer = currentValue))
		        : ((context._currentValue2 = currentValue),
		          (currentValue = renderer2CursorDEV.current),
		          pop(renderer2CursorDEV, providerFiber),
		          (context._currentRenderer2 = currentValue));
		      pop(valueCursor, providerFiber);
		    }
		    function scheduleContextWorkOnParentPath(
		      parent,
		      renderLanes,
		      propagationRoot
		    ) {
		      for (; null !== parent; ) {
		        var alternate = parent.alternate;
		        (parent.childLanes & renderLanes) !== renderLanes
		          ? ((parent.childLanes |= renderLanes),
		            null !== alternate && (alternate.childLanes |= renderLanes))
		          : null !== alternate &&
		            (alternate.childLanes & renderLanes) !== renderLanes &&
		            (alternate.childLanes |= renderLanes);
		        if (parent === propagationRoot) break;
		        parent = parent.return;
		      }
		      parent !== propagationRoot &&
		        console.error(
		          "Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue."
		        );
		    }
		    function propagateContextChanges(
		      workInProgress,
		      contexts,
		      renderLanes,
		      forcePropagateEntireTree
		    ) {
		      var fiber = workInProgress.child;
		      null !== fiber && (fiber.return = workInProgress);
		      for (; null !== fiber; ) {
		        var list = fiber.dependencies;
		        if (null !== list) {
		          var nextFiber = fiber.child;
		          list = list.firstContext;
		          a: for (; null !== list; ) {
		            var dependency = list;
		            list = fiber;
		            for (var i = 0; i < contexts.length; i++)
		              if (dependency.context === contexts[i]) {
		                list.lanes |= renderLanes;
		                dependency = list.alternate;
		                null !== dependency && (dependency.lanes |= renderLanes);
		                scheduleContextWorkOnParentPath(
		                  list.return,
		                  renderLanes,
		                  workInProgress
		                );
		                forcePropagateEntireTree || (nextFiber = null);
		                break a;
		              }
		            list = dependency.next;
		          }
		        } else if (18 === fiber.tag) {
		          nextFiber = fiber.return;
		          if (null === nextFiber)
		            throw Error(
		              "We just came from a parent so we must have had a parent. This is a bug in React."
		            );
		          nextFiber.lanes |= renderLanes;
		          list = nextFiber.alternate;
		          null !== list && (list.lanes |= renderLanes);
		          scheduleContextWorkOnParentPath(
		            nextFiber,
		            renderLanes,
		            workInProgress
		          );
		          nextFiber = null;
		        } else nextFiber = fiber.child;
		        if (null !== nextFiber) nextFiber.return = fiber;
		        else
		          for (nextFiber = fiber; null !== nextFiber; ) {
		            if (nextFiber === workInProgress) {
		              nextFiber = null;
		              break;
		            }
		            fiber = nextFiber.sibling;
		            if (null !== fiber) {
		              fiber.return = nextFiber.return;
		              nextFiber = fiber;
		              break;
		            }
		            nextFiber = nextFiber.return;
		          }
		        fiber = nextFiber;
		      }
		    }
		    function propagateParentContextChanges(
		      current,
		      workInProgress,
		      renderLanes,
		      forcePropagateEntireTree
		    ) {
		      current = null;
		      for (
		        var parent = workInProgress, isInsidePropagationBailout = !1;
		        null !== parent;

		      ) {
		        if (!isInsidePropagationBailout)
		          if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = !0;
		          else if (0 !== (parent.flags & 262144)) break;
		        if (10 === parent.tag) {
		          var currentParent = parent.alternate;
		          if (null === currentParent)
		            throw Error("Should have a current fiber. This is a bug in React.");
		          currentParent = currentParent.memoizedProps;
		          if (null !== currentParent) {
		            var context = parent.type;
		            objectIs(parent.pendingProps.value, currentParent.value) ||
		              (null !== current
		                ? current.push(context)
		                : (current = [context]));
		          }
		        } else if (parent === hostTransitionProviderCursor.current) {
		          currentParent = parent.alternate;
		          if (null === currentParent)
		            throw Error("Should have a current fiber. This is a bug in React.");
		          currentParent.memoizedState.memoizedState !==
		            parent.memoizedState.memoizedState &&
		            (null !== current
		              ? current.push(HostTransitionContext)
		              : (current = [HostTransitionContext]));
		        }
		        parent = parent.return;
		      }
		      null !== current &&
		        propagateContextChanges(
		          workInProgress,
		          current,
		          renderLanes,
		          forcePropagateEntireTree
		        );
		      workInProgress.flags |= 262144;
		    }
		    function checkIfContextChanged(currentDependencies) {
		      for (
		        currentDependencies = currentDependencies.firstContext;
		        null !== currentDependencies;

		      ) {
		        var context = currentDependencies.context;
		        if (
		          !objectIs(
		            isPrimaryRenderer ? context._currentValue : context._currentValue2,
		            currentDependencies.memoizedValue
		          )
		        )
		          return !0;
		        currentDependencies = currentDependencies.next;
		      }
		      return !1;
		    }
		    function prepareToReadContext(workInProgress) {
		      currentlyRenderingFiber = workInProgress;
		      lastContextDependency = null;
		      workInProgress = workInProgress.dependencies;
		      null !== workInProgress && (workInProgress.firstContext = null);
		    }
		    function readContext(context) {
		      isDisallowedContextReadInDEV &&
		        console.error(
		          "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
		        );
		      return readContextForConsumer(currentlyRenderingFiber, context);
		    }
		    function readContextDuringReconciliation(consumer, context) {
		      null === currentlyRenderingFiber && prepareToReadContext(consumer);
		      return readContextForConsumer(consumer, context);
		    }
		    function readContextForConsumer(consumer, context) {
		      var value = isPrimaryRenderer
		        ? context._currentValue
		        : context._currentValue2;
		      context = { context: context, memoizedValue: value, next: null };
		      if (null === lastContextDependency) {
		        if (null === consumer)
		          throw Error(
		            "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()."
		          );
		        lastContextDependency = context;
		        consumer.dependencies = {
		          lanes: 0,
		          firstContext: context,
		          _debugThenableState: null
		        };
		        consumer.flags |= 524288;
		      } else lastContextDependency = lastContextDependency.next = context;
		      return value;
		    }
		    function createCache() {
		      return {
		        controller: new AbortControllerLocal(),
		        data: new Map(),
		        refCount: 0
		      };
		    }
		    function retainCache(cache) {
		      cache.controller.signal.aborted &&
		        console.warn(
		          "A cache instance was retained after it was already freed. This likely indicates a bug in React."
		        );
		      cache.refCount++;
		    }
		    function releaseCache(cache) {
		      cache.refCount--;
		      0 > cache.refCount &&
		        console.warn(
		          "A cache instance was released after it was already freed. This likely indicates a bug in React."
		        );
		      0 === cache.refCount &&
		        scheduleCallback$1(NormalPriority, function () {
		          cache.controller.abort();
		        });
		    }
		    function peekCacheFromPool() {
		      var cacheResumedFromPreviousRender = resumedCache.current;
		      return null !== cacheResumedFromPreviousRender
		        ? cacheResumedFromPreviousRender
		        : workInProgressRoot.pooledCache;
		    }
		    function pushTransition(offscreenWorkInProgress, prevCachePool) {
		      null === prevCachePool
		        ? push(resumedCache, resumedCache.current, offscreenWorkInProgress)
		        : push(resumedCache, prevCachePool.pool, offscreenWorkInProgress);
		    }
		    function getSuspendedCache() {
		      var cacheFromPool = peekCacheFromPool();
		      return null === cacheFromPool
		        ? null
		        : {
		            parent: isPrimaryRenderer
		              ? CacheContext._currentValue
		              : CacheContext._currentValue2,
		            pool: cacheFromPool
		          };
		    }
		    function markUpdate(workInProgress) {
		      workInProgress.flags |= 4;
		    }
		    function doesRequireClone(current, completedWork) {
		      if (null !== current && current.child === completedWork.child) return !1;
		      if (0 !== (completedWork.flags & 16)) return !0;
		      for (current = completedWork.child; null !== current; ) {
		        if (
		          0 !== (current.flags & 13878) ||
		          0 !== (current.subtreeFlags & 13878)
		        )
		          return !0;
		        current = current.sibling;
		      }
		      return !1;
		    }
		    function appendAllChildren(
		      parent,
		      workInProgress,
		      needsVisibilityToggle,
		      isHidden
		    ) {
		      if (supportsMutation)
		        for (
		          needsVisibilityToggle = workInProgress.child;
		          null !== needsVisibilityToggle;

		        ) {
		          if (
		            5 === needsVisibilityToggle.tag ||
		            6 === needsVisibilityToggle.tag
		          )
		            appendInitialChild(parent, needsVisibilityToggle.stateNode);
		          else if (
		            !(
		              4 === needsVisibilityToggle.tag ||
		              (supportsSingletons && 27 === needsVisibilityToggle.tag)
		            ) &&
		            null !== needsVisibilityToggle.child
		          ) {
		            needsVisibilityToggle.child.return = needsVisibilityToggle;
		            needsVisibilityToggle = needsVisibilityToggle.child;
		            continue;
		          }
		          if (needsVisibilityToggle === workInProgress) break;
		          for (; null === needsVisibilityToggle.sibling; ) {
		            if (
		              null === needsVisibilityToggle.return ||
		              needsVisibilityToggle.return === workInProgress
		            )
		              return;
		            needsVisibilityToggle = needsVisibilityToggle.return;
		          }
		          needsVisibilityToggle.sibling.return = needsVisibilityToggle.return;
		          needsVisibilityToggle = needsVisibilityToggle.sibling;
		        }
		      else if (supportsPersistence)
		        for (var _node = workInProgress.child; null !== _node; ) {
		          if (5 === _node.tag) {
		            var instance = _node.stateNode;
		            needsVisibilityToggle &&
		              isHidden &&
		              (instance = cloneHiddenInstance(
		                instance,
		                _node.type,
		                _node.memoizedProps
		              ));
		            appendInitialChild(parent, instance);
		          } else if (6 === _node.tag)
		            (instance = _node.stateNode),
		              needsVisibilityToggle &&
		                isHidden &&
		                (instance = cloneHiddenTextInstance(
		                  instance,
		                  _node.memoizedProps
		                )),
		              appendInitialChild(parent, instance);
		          else if (4 !== _node.tag)
		            if (22 === _node.tag && null !== _node.memoizedState)
		              (instance = _node.child),
		                null !== instance && (instance.return = _node),
		                appendAllChildren(parent, _node, !0, !0);
		            else if (null !== _node.child) {
		              _node.child.return = _node;
		              _node = _node.child;
		              continue;
		            }
		          if (_node === workInProgress) break;
		          for (; null === _node.sibling; ) {
		            if (null === _node.return || _node.return === workInProgress)
		              return;
		            _node = _node.return;
		          }
		          _node.sibling.return = _node.return;
		          _node = _node.sibling;
		        }
		    }
		    function appendAllChildrenToContainer(
		      containerChildSet,
		      workInProgress,
		      needsVisibilityToggle,
		      isHidden
		    ) {
		      if (supportsPersistence)
		        for (var node = workInProgress.child; null !== node; ) {
		          if (5 === node.tag) {
		            var instance = node.stateNode;
		            needsVisibilityToggle &&
		              isHidden &&
		              (instance = cloneHiddenInstance(
		                instance,
		                node.type,
		                node.memoizedProps
		              ));
		            appendChildToContainerChildSet(containerChildSet, instance);
		          } else if (6 === node.tag)
		            (instance = node.stateNode),
		              needsVisibilityToggle &&
		                isHidden &&
		                (instance = cloneHiddenTextInstance(
		                  instance,
		                  node.memoizedProps
		                )),
		              appendChildToContainerChildSet(containerChildSet, instance);
		          else if (4 !== node.tag)
		            if (22 === node.tag && null !== node.memoizedState)
		              (instance = node.child),
		                null !== instance && (instance.return = node),
		                appendAllChildrenToContainer(
		                  containerChildSet,
		                  node,
		                  !(
		                    null !== node.memoizedProps &&
		                    "manual" === node.memoizedProps.mode
		                  ),
		                  !0
		                );
		            else if (null !== node.child) {
		              node.child.return = node;
		              node = node.child;
		              continue;
		            }
		          if (node === workInProgress) break;
		          for (; null === node.sibling; ) {
		            if (null === node.return || node.return === workInProgress) return;
		            node = node.return;
		          }
		          node.sibling.return = node.return;
		          node = node.sibling;
		        }
		    }
		    function updateHostContainer(current, workInProgress) {
		      if (supportsPersistence && doesRequireClone(current, workInProgress)) {
		        current = workInProgress.stateNode;
		        var container = current.containerInfo,
		          newChildSet = createContainerChildSet();
		        appendAllChildrenToContainer(newChildSet, workInProgress, !1, !1);
		        current.pendingChildren = newChildSet;
		        markUpdate(workInProgress);
		        finalizeContainerChildren(container, newChildSet);
		      }
		    }
		    function updateHostComponent(current, workInProgress, type, newProps) {
		      if (supportsMutation)
		        current.memoizedProps !== newProps && markUpdate(workInProgress);
		      else if (supportsPersistence) {
		        var currentInstance = current.stateNode,
		          _oldProps = current.memoizedProps;
		        if (
		          (current = doesRequireClone(current, workInProgress)) ||
		          _oldProps !== newProps
		        ) {
		          var currentHostContext = getHostContext();
		          _oldProps = cloneInstance(
		            currentInstance,
		            type,
		            _oldProps,
		            newProps,
		            !current,
		            null
		          );
		          _oldProps === currentInstance
		            ? (workInProgress.stateNode = currentInstance)
		            : (finalizeInitialChildren(
		                _oldProps,
		                type,
		                newProps,
		                currentHostContext
		              ) && markUpdate(workInProgress),
		              (workInProgress.stateNode = _oldProps),
		              current
		                ? appendAllChildren(_oldProps, workInProgress, !1, !1)
		                : markUpdate(workInProgress));
		        } else workInProgress.stateNode = currentInstance;
		      }
		    }
		    function preloadInstanceAndSuspendIfNeeded(workInProgress, type, props) {
		      if (maySuspendCommit(type, props)) {
		        if (((workInProgress.flags |= 16777216), !preloadInstance(type, props)))
		          if (shouldRemainOnPreviousScreen()) workInProgress.flags |= 8192;
		          else
		            throw (
		              ((suspendedThenable = noopSuspenseyCommitThenable),
		              SuspenseyCommitException)
		            );
		      } else workInProgress.flags &= -16777217;
		    }
		    function preloadResourceAndSuspendIfNeeded(workInProgress, resource) {
		      if (mayResourceSuspendCommit(resource)) {
		        if (((workInProgress.flags |= 16777216), !preloadResource(resource)))
		          if (shouldRemainOnPreviousScreen()) workInProgress.flags |= 8192;
		          else
		            throw (
		              ((suspendedThenable = noopSuspenseyCommitThenable),
		              SuspenseyCommitException)
		            );
		      } else workInProgress.flags &= -16777217;
		    }
		    function scheduleRetryEffect(workInProgress, retryQueue) {
		      null !== retryQueue && (workInProgress.flags |= 4);
		      workInProgress.flags & 16384 &&
		        ((retryQueue =
		          22 !== workInProgress.tag ? claimNextRetryLane() : 536870912),
		        (workInProgress.lanes |= retryQueue),
		        (workInProgressSuspendedRetryLanes |= retryQueue));
		    }
		    function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
		      if (!isHydrating)
		        switch (renderState.tailMode) {
		          case "hidden":
		            hasRenderedATailFallback = renderState.tail;
		            for (var lastTailNode = null; null !== hasRenderedATailFallback; )
		              null !== hasRenderedATailFallback.alternate &&
		                (lastTailNode = hasRenderedATailFallback),
		                (hasRenderedATailFallback = hasRenderedATailFallback.sibling);
		            null === lastTailNode
		              ? (renderState.tail = null)
		              : (lastTailNode.sibling = null);
		            break;
		          case "collapsed":
		            lastTailNode = renderState.tail;
		            for (var _lastTailNode = null; null !== lastTailNode; )
		              null !== lastTailNode.alternate && (_lastTailNode = lastTailNode),
		                (lastTailNode = lastTailNode.sibling);
		            null === _lastTailNode
		              ? hasRenderedATailFallback || null === renderState.tail
		                ? (renderState.tail = null)
		                : (renderState.tail.sibling = null)
		              : (_lastTailNode.sibling = null);
		        }
		    }
		    function bubbleProperties(completedWork) {
		      var didBailout =
		          null !== completedWork.alternate &&
		          completedWork.alternate.child === completedWork.child,
		        newChildLanes = 0,
		        subtreeFlags = 0;
		      if (didBailout)
		        if ((completedWork.mode & 2) !== NoMode) {
		          for (
		            var _treeBaseDuration = completedWork.selfBaseDuration,
		              _child2 = completedWork.child;
		            null !== _child2;

		          )
		            (newChildLanes |= _child2.lanes | _child2.childLanes),
		              (subtreeFlags |= _child2.subtreeFlags & 31457280),
		              (subtreeFlags |= _child2.flags & 31457280),
		              (_treeBaseDuration += _child2.treeBaseDuration),
		              (_child2 = _child2.sibling);
		          completedWork.treeBaseDuration = _treeBaseDuration;
		        } else
		          for (
		            _treeBaseDuration = completedWork.child;
		            null !== _treeBaseDuration;

		          )
		            (newChildLanes |=
		              _treeBaseDuration.lanes | _treeBaseDuration.childLanes),
		              (subtreeFlags |= _treeBaseDuration.subtreeFlags & 31457280),
		              (subtreeFlags |= _treeBaseDuration.flags & 31457280),
		              (_treeBaseDuration.return = completedWork),
		              (_treeBaseDuration = _treeBaseDuration.sibling);
		      else if ((completedWork.mode & 2) !== NoMode) {
		        _treeBaseDuration = completedWork.actualDuration;
		        _child2 = completedWork.selfBaseDuration;
		        for (var child = completedWork.child; null !== child; )
		          (newChildLanes |= child.lanes | child.childLanes),
		            (subtreeFlags |= child.subtreeFlags),
		            (subtreeFlags |= child.flags),
		            (_treeBaseDuration += child.actualDuration),
		            (_child2 += child.treeBaseDuration),
		            (child = child.sibling);
		        completedWork.actualDuration = _treeBaseDuration;
		        completedWork.treeBaseDuration = _child2;
		      } else
		        for (
		          _treeBaseDuration = completedWork.child;
		          null !== _treeBaseDuration;

		        )
		          (newChildLanes |=
		            _treeBaseDuration.lanes | _treeBaseDuration.childLanes),
		            (subtreeFlags |= _treeBaseDuration.subtreeFlags),
		            (subtreeFlags |= _treeBaseDuration.flags),
		            (_treeBaseDuration.return = completedWork),
		            (_treeBaseDuration = _treeBaseDuration.sibling);
		      completedWork.subtreeFlags |= subtreeFlags;
		      completedWork.childLanes = newChildLanes;
		      return didBailout;
		    }
		    function completeWork(current, workInProgress, renderLanes) {
		      var newProps = workInProgress.pendingProps;
		      popTreeContext(workInProgress);
		      switch (workInProgress.tag) {
		        case 16:
		        case 15:
		        case 0:
		        case 11:
		        case 7:
		        case 8:
		        case 12:
		        case 9:
		        case 14:
		          return bubbleProperties(workInProgress), null;
		        case 1:
		          return bubbleProperties(workInProgress), null;
		        case 3:
		          renderLanes = workInProgress.stateNode;
		          newProps = null;
		          null !== current && (newProps = current.memoizedState.cache);
		          workInProgress.memoizedState.cache !== newProps &&
		            (workInProgress.flags |= 2048);
		          popProvider(CacheContext, workInProgress);
		          popHostContainer(workInProgress);
		          renderLanes.pendingContext &&
		            ((renderLanes.context = renderLanes.pendingContext),
		            (renderLanes.pendingContext = null));
		          if (null === current || null === current.child)
		            popHydrationState(workInProgress)
		              ? (emitPendingHydrationWarnings(), markUpdate(workInProgress))
		              : null === current ||
		                (current.memoizedState.isDehydrated &&
		                  0 === (workInProgress.flags & 256)) ||
		                ((workInProgress.flags |= 1024),
		                null !== hydrationErrors &&
		                  (queueRecoverableErrors(hydrationErrors),
		                  (hydrationErrors = null)));
		          updateHostContainer(current, workInProgress);
		          bubbleProperties(workInProgress);
		          return null;
		        case 26:
		          if (supportsResources) {
		            renderLanes = workInProgress.type;
		            var nextResource = workInProgress.memoizedState;
		            null === current
		              ? (markUpdate(workInProgress),
		                null !== nextResource
		                  ? (bubbleProperties(workInProgress),
		                    preloadResourceAndSuspendIfNeeded(
		                      workInProgress,
		                      nextResource
		                    ))
		                  : (bubbleProperties(workInProgress),
		                    preloadInstanceAndSuspendIfNeeded(
		                      workInProgress,
		                      renderLanes,
		                      newProps
		                    )))
		              : nextResource
		                ? nextResource !== current.memoizedState
		                  ? (markUpdate(workInProgress),
		                    bubbleProperties(workInProgress),
		                    preloadResourceAndSuspendIfNeeded(
		                      workInProgress,
		                      nextResource
		                    ))
		                  : (bubbleProperties(workInProgress),
		                    (workInProgress.flags &= -16777217))
		                : (supportsMutation
		                    ? current.memoizedProps !== newProps &&
		                      markUpdate(workInProgress)
		                    : updateHostComponent(
		                        current,
		                        workInProgress,
		                        renderLanes,
		                        newProps
		                      ),
		                  bubbleProperties(workInProgress),
		                  preloadInstanceAndSuspendIfNeeded(
		                    workInProgress,
		                    renderLanes,
		                    newProps
		                  ));
		            return null;
		          }
		        case 27:
		          if (supportsSingletons) {
		            popHostContext(workInProgress);
		            renderLanes = requiredContext(rootInstanceStackCursor.current);
		            nextResource = workInProgress.type;
		            if (null !== current && null != workInProgress.stateNode)
		              supportsMutation
		                ? current.memoizedProps !== newProps &&
		                  markUpdate(workInProgress)
		                : updateHostComponent(
		                    current,
		                    workInProgress,
		                    nextResource,
		                    newProps
		                  );
		            else {
		              if (!newProps) {
		                if (null === workInProgress.stateNode)
		                  throw Error(
		                    "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
		                  );
		                bubbleProperties(workInProgress);
		                return null;
		              }
		              current = getHostContext();
		              popHydrationState(workInProgress)
		                ? prepareToHydrateHostInstance(workInProgress, current)
		                : ((current = resolveSingletonInstance(
		                    nextResource,
		                    newProps,
		                    renderLanes,
		                    current,
		                    !0
		                  )),
		                  (workInProgress.stateNode = current),
		                  markUpdate(workInProgress));
		            }
		            bubbleProperties(workInProgress);
		            return null;
		          }
		        case 5:
		          popHostContext(workInProgress);
		          renderLanes = workInProgress.type;
		          if (null !== current && null != workInProgress.stateNode)
		            updateHostComponent(current, workInProgress, renderLanes, newProps);
		          else {
		            if (!newProps) {
		              if (null === workInProgress.stateNode)
		                throw Error(
		                  "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
		                );
		              bubbleProperties(workInProgress);
		              return null;
		            }
		            current = getHostContext();
		            popHydrationState(workInProgress)
		              ? prepareToHydrateHostInstance(workInProgress, current)
		              : ((nextResource = requiredContext(
		                  rootInstanceStackCursor.current
		                )),
		                (nextResource = createInstance(
		                  renderLanes,
		                  newProps,
		                  nextResource,
		                  current,
		                  workInProgress
		                )),
		                appendAllChildren(nextResource, workInProgress, !1, !1),
		                (workInProgress.stateNode = nextResource),
		                finalizeInitialChildren(
		                  nextResource,
		                  renderLanes,
		                  newProps,
		                  current
		                ) && markUpdate(workInProgress));
		          }
		          bubbleProperties(workInProgress);
		          preloadInstanceAndSuspendIfNeeded(
		            workInProgress,
		            workInProgress.type,
		            workInProgress.pendingProps
		          );
		          return null;
		        case 6:
		          if (current && null != workInProgress.stateNode)
		            (renderLanes = current.memoizedProps),
		              supportsMutation
		                ? renderLanes !== newProps && markUpdate(workInProgress)
		                : supportsPersistence &&
		                  (renderLanes !== newProps
		                    ? ((current = requiredContext(
		                        rootInstanceStackCursor.current
		                      )),
		                      (renderLanes = getHostContext()),
		                      (workInProgress.stateNode = createTextInstance(
		                        newProps,
		                        current,
		                        renderLanes,
		                        workInProgress
		                      )),
		                      markUpdate(workInProgress))
		                    : (workInProgress.stateNode = current.stateNode));
		          else {
		            if (
		              "string" !== typeof newProps &&
		              null === workInProgress.stateNode
		            )
		              throw Error(
		                "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue."
		              );
		            current = requiredContext(rootInstanceStackCursor.current);
		            renderLanes = getHostContext();
		            if (popHydrationState(workInProgress)) {
		              if (!supportsHydration)
		                throw Error(
		                  "Expected prepareToHydrateHostTextInstance() to never be called. This error is likely caused by a bug in React. Please file an issue."
		                );
		              current = workInProgress.stateNode;
		              renderLanes = workInProgress.memoizedProps;
		              nextResource = !didSuspendOrErrorDEV;
		              newProps = null;
		              var returnFiber = hydrationParentFiber;
		              if (null !== returnFiber)
		                switch (returnFiber.tag) {
		                  case 3:
		                    nextResource &&
		                      ((nextResource = diffHydratedTextForDevWarnings(
		                        current,
		                        renderLanes,
		                        newProps
		                      )),
		                      null !== nextResource &&
		                        (buildHydrationDiffNode(workInProgress, 0).serverProps =
		                          nextResource));
		                    break;
		                  case 27:
		                  case 5:
		                    (newProps = returnFiber.memoizedProps),
		                      nextResource &&
		                        ((nextResource = diffHydratedTextForDevWarnings(
		                          current,
		                          renderLanes,
		                          newProps
		                        )),
		                        null !== nextResource &&
		                          (buildHydrationDiffNode(
		                            workInProgress,
		                            0
		                          ).serverProps = nextResource));
		                }
		              hydrateTextInstance(
		                current,
		                renderLanes,
		                workInProgress,
		                newProps
		              ) || throwOnHydrationMismatch(workInProgress);
		            } else
		              workInProgress.stateNode = createTextInstance(
		                newProps,
		                current,
		                renderLanes,
		                workInProgress
		              );
		          }
		          bubbleProperties(workInProgress);
		          return null;
		        case 13:
		          newProps = workInProgress.memoizedState;
		          if (
		            null === current ||
		            (null !== current.memoizedState &&
		              null !== current.memoizedState.dehydrated)
		          ) {
		            nextResource = popHydrationState(workInProgress);
		            if (null !== newProps && null !== newProps.dehydrated) {
		              if (null === current) {
		                if (!nextResource)
		                  throw Error(
		                    "A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React."
		                  );
		                if (!supportsHydration)
		                  throw Error(
		                    "Expected prepareToHydrateHostSuspenseInstance() to never be called. This error is likely caused by a bug in React. Please file an issue."
		                  );
		                nextResource = workInProgress.memoizedState;
		                nextResource =
		                  null !== nextResource ? nextResource.dehydrated : null;
		                if (!nextResource)
		                  throw Error(
		                    "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue."
		                  );
		                hydrateSuspenseInstance(nextResource, workInProgress);
		                bubbleProperties(workInProgress);
		                (workInProgress.mode & 2) !== NoMode &&
		                  null !== newProps &&
		                  ((nextResource = workInProgress.child),
		                  null !== nextResource &&
		                    (workInProgress.treeBaseDuration -=
		                      nextResource.treeBaseDuration));
		              } else
		                emitPendingHydrationWarnings(),
		                  resetHydrationState(),
		                  0 === (workInProgress.flags & 128) &&
		                    (workInProgress.memoizedState = null),
		                  (workInProgress.flags |= 4),
		                  bubbleProperties(workInProgress),
		                  (workInProgress.mode & 2) !== NoMode &&
		                    null !== newProps &&
		                    ((nextResource = workInProgress.child),
		                    null !== nextResource &&
		                      (workInProgress.treeBaseDuration -=
		                        nextResource.treeBaseDuration));
		              nextResource = !1;
		            } else
		              null !== hydrationErrors &&
		                (queueRecoverableErrors(hydrationErrors),
		                (hydrationErrors = null)),
		                (nextResource = !0);
		            if (!nextResource) {
		              if (workInProgress.flags & 256)
		                return popSuspenseHandler(workInProgress), workInProgress;
		              popSuspenseHandler(workInProgress);
		              return null;
		            }
		          }
		          popSuspenseHandler(workInProgress);
		          if (0 !== (workInProgress.flags & 128))
		            return (
		              (workInProgress.lanes = renderLanes),
		              (workInProgress.mode & 2) !== NoMode &&
		                transferActualDuration(workInProgress),
		              workInProgress
		            );
		          renderLanes = null !== newProps;
		          current = null !== current && null !== current.memoizedState;
		          renderLanes &&
		            ((newProps = workInProgress.child),
		            (nextResource = null),
		            null !== newProps.alternate &&
		              null !== newProps.alternate.memoizedState &&
		              null !== newProps.alternate.memoizedState.cachePool &&
		              (nextResource = newProps.alternate.memoizedState.cachePool.pool),
		            (returnFiber = null),
		            null !== newProps.memoizedState &&
		              null !== newProps.memoizedState.cachePool &&
		              (returnFiber = newProps.memoizedState.cachePool.pool),
		            returnFiber !== nextResource && (newProps.flags |= 2048));
		          renderLanes !== current &&
		            renderLanes &&
		            (workInProgress.child.flags |= 8192);
		          scheduleRetryEffect(workInProgress, workInProgress.updateQueue);
		          bubbleProperties(workInProgress);
		          (workInProgress.mode & 2) !== NoMode &&
		            renderLanes &&
		            ((current = workInProgress.child),
		            null !== current &&
		              (workInProgress.treeBaseDuration -= current.treeBaseDuration));
		          return null;
		        case 4:
		          return (
		            popHostContainer(workInProgress),
		            updateHostContainer(current, workInProgress),
		            null === current &&
		              preparePortalMount(workInProgress.stateNode.containerInfo),
		            bubbleProperties(workInProgress),
		            null
		          );
		        case 10:
		          return (
		            popProvider(workInProgress.type, workInProgress),
		            bubbleProperties(workInProgress),
		            null
		          );
		        case 19:
		          pop(suspenseStackCursor, workInProgress);
		          nextResource = workInProgress.memoizedState;
		          if (null === nextResource)
		            return bubbleProperties(workInProgress), null;
		          newProps = 0 !== (workInProgress.flags & 128);
		          returnFiber = nextResource.rendering;
		          if (null === returnFiber)
		            if (newProps) cutOffTailIfNeeded(nextResource, !1);
		            else {
		              if (
		                workInProgressRootExitStatus !== RootInProgress ||
		                (null !== current && 0 !== (current.flags & 128))
		              )
		                for (current = workInProgress.child; null !== current; ) {
		                  returnFiber = findFirstSuspended(current);
		                  if (null !== returnFiber) {
		                    workInProgress.flags |= 128;
		                    cutOffTailIfNeeded(nextResource, !1);
		                    current = returnFiber.updateQueue;
		                    workInProgress.updateQueue = current;
		                    scheduleRetryEffect(workInProgress, current);
		                    workInProgress.subtreeFlags = 0;
		                    current = renderLanes;
		                    for (
		                      renderLanes = workInProgress.child;
		                      null !== renderLanes;

		                    )
		                      resetWorkInProgress(renderLanes, current),
		                        (renderLanes = renderLanes.sibling);
		                    push(
		                      suspenseStackCursor,
		                      (suspenseStackCursor.current &
		                        SubtreeSuspenseContextMask) |
		                        ForceSuspenseFallback,
		                      workInProgress
		                    );
		                    return workInProgress.child;
		                  }
		                  current = current.sibling;
		                }
		              null !== nextResource.tail &&
		                now$1() > workInProgressRootRenderTargetTime &&
		                ((workInProgress.flags |= 128),
		                (newProps = !0),
		                cutOffTailIfNeeded(nextResource, !1),
		                (workInProgress.lanes = 4194304));
		            }
		          else {
		            if (!newProps)
		              if (
		                ((current = findFirstSuspended(returnFiber)), null !== current)
		              ) {
		                if (
		                  ((workInProgress.flags |= 128),
		                  (newProps = !0),
		                  (current = current.updateQueue),
		                  (workInProgress.updateQueue = current),
		                  scheduleRetryEffect(workInProgress, current),
		                  cutOffTailIfNeeded(nextResource, !0),
		                  null === nextResource.tail &&
		                    "hidden" === nextResource.tailMode &&
		                    !returnFiber.alternate &&
		                    !isHydrating)
		                )
		                  return bubbleProperties(workInProgress), null;
		              } else
		                2 * now$1() - nextResource.renderingStartTime >
		                  workInProgressRootRenderTargetTime &&
		                  536870912 !== renderLanes &&
		                  ((workInProgress.flags |= 128),
		                  (newProps = !0),
		                  cutOffTailIfNeeded(nextResource, !1),
		                  (workInProgress.lanes = 4194304));
		            nextResource.isBackwards
		              ? ((returnFiber.sibling = workInProgress.child),
		                (workInProgress.child = returnFiber))
		              : ((current = nextResource.last),
		                null !== current
		                  ? (current.sibling = returnFiber)
		                  : (workInProgress.child = returnFiber),
		                (nextResource.last = returnFiber));
		          }
		          if (null !== nextResource.tail)
		            return (
		              (current = nextResource.tail),
		              (nextResource.rendering = current),
		              (nextResource.tail = current.sibling),
		              (nextResource.renderingStartTime = now$1()),
		              (current.sibling = null),
		              (renderLanes = suspenseStackCursor.current),
		              (renderLanes = newProps
		                ? (renderLanes & SubtreeSuspenseContextMask) |
		                  ForceSuspenseFallback
		                : renderLanes & SubtreeSuspenseContextMask),
		              push(suspenseStackCursor, renderLanes, workInProgress),
		              current
		            );
		          bubbleProperties(workInProgress);
		          return null;
		        case 22:
		        case 23:
		          return (
		            popSuspenseHandler(workInProgress),
		            popHiddenContext(workInProgress),
		            (newProps = null !== workInProgress.memoizedState),
		            null !== current
		              ? (null !== current.memoizedState) !== newProps &&
		                (workInProgress.flags |= 8192)
		              : newProps && (workInProgress.flags |= 8192),
		            newProps
		              ? 0 !== (renderLanes & 536870912) &&
		                0 === (workInProgress.flags & 128) &&
		                (bubbleProperties(workInProgress),
		                workInProgress.subtreeFlags & 6 &&
		                  (workInProgress.flags |= 8192))
		              : bubbleProperties(workInProgress),
		            (renderLanes = workInProgress.updateQueue),
		            null !== renderLanes &&
		              scheduleRetryEffect(workInProgress, renderLanes.retryQueue),
		            (renderLanes = null),
		            null !== current &&
		              null !== current.memoizedState &&
		              null !== current.memoizedState.cachePool &&
		              (renderLanes = current.memoizedState.cachePool.pool),
		            (newProps = null),
		            null !== workInProgress.memoizedState &&
		              null !== workInProgress.memoizedState.cachePool &&
		              (newProps = workInProgress.memoizedState.cachePool.pool),
		            newProps !== renderLanes && (workInProgress.flags |= 2048),
		            null !== current && pop(resumedCache, workInProgress),
		            null
		          );
		        case 24:
		          return (
		            (renderLanes = null),
		            null !== current && (renderLanes = current.memoizedState.cache),
		            workInProgress.memoizedState.cache !== renderLanes &&
		              (workInProgress.flags |= 2048),
		            popProvider(CacheContext, workInProgress),
		            bubbleProperties(workInProgress),
		            null
		          );
		        case 25:
		          return null;
		      }
		      throw Error(
		        "Unknown unit of work tag (" +
		          workInProgress.tag +
		          "). This error is likely caused by a bug in React. Please file an issue."
		      );
		    }
		    function unwindWork(current, workInProgress) {
		      popTreeContext(workInProgress);
		      switch (workInProgress.tag) {
		        case 1:
		          return (
		            (current = workInProgress.flags),
		            current & 65536
		              ? ((workInProgress.flags = (current & -65537) | 128),
		                (workInProgress.mode & 2) !== NoMode &&
		                  transferActualDuration(workInProgress),
		                workInProgress)
		              : null
		          );
		        case 3:
		          return (
		            popProvider(CacheContext, workInProgress),
		            popHostContainer(workInProgress),
		            (current = workInProgress.flags),
		            0 !== (current & 65536) && 0 === (current & 128)
		              ? ((workInProgress.flags = (current & -65537) | 128),
		                workInProgress)
		              : null
		          );
		        case 26:
		        case 27:
		        case 5:
		          return popHostContext(workInProgress), null;
		        case 13:
		          popSuspenseHandler(workInProgress);
		          current = workInProgress.memoizedState;
		          if (null !== current && null !== current.dehydrated) {
		            if (null === workInProgress.alternate)
		              throw Error(
		                "Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue."
		              );
		            resetHydrationState();
		          }
		          current = workInProgress.flags;
		          return current & 65536
		            ? ((workInProgress.flags = (current & -65537) | 128),
		              (workInProgress.mode & 2) !== NoMode &&
		                transferActualDuration(workInProgress),
		              workInProgress)
		            : null;
		        case 19:
		          return pop(suspenseStackCursor, workInProgress), null;
		        case 4:
		          return popHostContainer(workInProgress), null;
		        case 10:
		          return popProvider(workInProgress.type, workInProgress), null;
		        case 22:
		        case 23:
		          return (
		            popSuspenseHandler(workInProgress),
		            popHiddenContext(workInProgress),
		            null !== current && pop(resumedCache, workInProgress),
		            (current = workInProgress.flags),
		            current & 65536
		              ? ((workInProgress.flags = (current & -65537) | 128),
		                (workInProgress.mode & 2) !== NoMode &&
		                  transferActualDuration(workInProgress),
		                workInProgress)
		              : null
		          );
		        case 24:
		          return popProvider(CacheContext, workInProgress), null;
		        case 25:
		          return null;
		        default:
		          return null;
		      }
		    }
		    function unwindInterruptedWork(current, interruptedWork) {
		      popTreeContext(interruptedWork);
		      switch (interruptedWork.tag) {
		        case 3:
		          popProvider(CacheContext, interruptedWork);
		          popHostContainer(interruptedWork);
		          break;
		        case 26:
		        case 27:
		        case 5:
		          popHostContext(interruptedWork);
		          break;
		        case 4:
		          popHostContainer(interruptedWork);
		          break;
		        case 13:
		          popSuspenseHandler(interruptedWork);
		          break;
		        case 19:
		          pop(suspenseStackCursor, interruptedWork);
		          break;
		        case 10:
		          popProvider(interruptedWork.type, interruptedWork);
		          break;
		        case 22:
		        case 23:
		          popSuspenseHandler(interruptedWork);
		          popHiddenContext(interruptedWork);
		          null !== current && pop(resumedCache, interruptedWork);
		          break;
		        case 24:
		          popProvider(CacheContext, interruptedWork);
		      }
		    }
		    function shouldProfile(current) {
		      return (current.mode & 2) !== NoMode;
		    }
		    function commitHookLayoutEffects(finishedWork, hookFlags) {
		      shouldProfile(finishedWork)
		        ? (startEffectTimer(),
		          commitHookEffectListMount(hookFlags, finishedWork),
		          recordEffectDuration())
		        : commitHookEffectListMount(hookFlags, finishedWork);
		    }
		    function commitHookLayoutUnmountEffects(
		      finishedWork,
		      nearestMountedAncestor,
		      hookFlags
		    ) {
		      shouldProfile(finishedWork)
		        ? (startEffectTimer(),
		          commitHookEffectListUnmount(
		            hookFlags,
		            finishedWork,
		            nearestMountedAncestor
		          ),
		          recordEffectDuration())
		        : commitHookEffectListUnmount(
		            hookFlags,
		            finishedWork,
		            nearestMountedAncestor
		          );
		    }
		    function commitHookEffectListMount(flags, finishedWork) {
		      try {
		        var updateQueue = finishedWork.updateQueue,
		          lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
		        if (null !== lastEffect) {
		          var firstEffect = lastEffect.next;
		          updateQueue = firstEffect;
		          do {
		            if (
		              (updateQueue.tag & flags) === flags &&
		              ((flags & Passive) !== NoFlags
		                ? null !== injectedProfilingHooks &&
		                  "function" ===
		                    typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted &&
		                  injectedProfilingHooks.markComponentPassiveEffectMountStarted(
		                    finishedWork
		                  )
		                : (flags & Layout) !== NoFlags &&
		                  null !== injectedProfilingHooks &&
		                  "function" ===
		                    typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted &&
		                  injectedProfilingHooks.markComponentLayoutEffectMountStarted(
		                    finishedWork
		                  ),
		              (lastEffect = void 0),
		              (flags & Insertion) !== NoFlags &&
		                (isRunningInsertionEffect = !0),
		              (lastEffect = runWithFiberInDEV(
		                finishedWork,
		                callCreateInDEV,
		                updateQueue
		              )),
		              (flags & Insertion) !== NoFlags &&
		                (isRunningInsertionEffect = !1),
		              (flags & Passive) !== NoFlags
		                ? null !== injectedProfilingHooks &&
		                  "function" ===
		                    typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped &&
		                  injectedProfilingHooks.markComponentPassiveEffectMountStopped()
		                : (flags & Layout) !== NoFlags &&
		                  null !== injectedProfilingHooks &&
		                  "function" ===
		                    typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped &&
		                  injectedProfilingHooks.markComponentLayoutEffectMountStopped(),
		              void 0 !== lastEffect && "function" !== typeof lastEffect)
		            ) {
		              var hookName = void 0;
		              hookName =
		                0 !== (updateQueue.tag & Layout)
		                  ? "useLayoutEffect"
		                  : 0 !== (updateQueue.tag & Insertion)
		                    ? "useInsertionEffect"
		                    : "useEffect";
		              var addendum = void 0;
		              addendum =
		                null === lastEffect
		                  ? " You returned null. If your effect does not require clean up, return undefined (or nothing)."
		                  : "function" === typeof lastEffect.then
		                    ? "\n\nIt looks like you wrote " +
		                      hookName +
		                      "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" +
		                      hookName +
		                      "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://react.dev/link/hooks-data-fetching"
		                    : " You returned: " + lastEffect;
		              runWithFiberInDEV(
		                finishedWork,
		                function (n, a) {
		                  console.error(
		                    "%s must not return anything besides a function, which is used for clean-up.%s",
		                    n,
		                    a
		                  );
		                },
		                hookName,
		                addendum
		              );
		            }
		            updateQueue = updateQueue.next;
		          } while (updateQueue !== firstEffect);
		        }
		      } catch (error) {
		        captureCommitPhaseError(finishedWork, finishedWork.return, error);
		      }
		    }
		    function commitHookEffectListUnmount(
		      flags,
		      finishedWork,
		      nearestMountedAncestor
		    ) {
		      try {
		        var updateQueue = finishedWork.updateQueue,
		          lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
		        if (null !== lastEffect) {
		          var firstEffect = lastEffect.next;
		          updateQueue = firstEffect;
		          do {
		            if ((updateQueue.tag & flags) === flags) {
		              var inst = updateQueue.inst,
		                destroy = inst.destroy;
		              void 0 !== destroy &&
		                ((inst.destroy = void 0),
		                (flags & Passive) !== NoFlags
		                  ? null !== injectedProfilingHooks &&
		                    "function" ===
		                      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted &&
		                    injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(
		                      finishedWork
		                    )
		                  : (flags & Layout) !== NoFlags &&
		                    null !== injectedProfilingHooks &&
		                    "function" ===
		                      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted &&
		                    injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(
		                      finishedWork
		                    ),
		                (flags & Insertion) !== NoFlags &&
		                  (isRunningInsertionEffect = !0),
		                runWithFiberInDEV(
		                  finishedWork,
		                  callDestroyInDEV,
		                  finishedWork,
		                  nearestMountedAncestor,
		                  destroy
		                ),
		                (flags & Insertion) !== NoFlags &&
		                  (isRunningInsertionEffect = !1),
		                (flags & Passive) !== NoFlags
		                  ? null !== injectedProfilingHooks &&
		                    "function" ===
		                      typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped &&
		                    injectedProfilingHooks.markComponentPassiveEffectUnmountStopped()
		                  : (flags & Layout) !== NoFlags &&
		                    null !== injectedProfilingHooks &&
		                    "function" ===
		                      typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped &&
		                    injectedProfilingHooks.markComponentLayoutEffectUnmountStopped());
		            }
		            updateQueue = updateQueue.next;
		          } while (updateQueue !== firstEffect);
		        }
		      } catch (error) {
		        captureCommitPhaseError(finishedWork, finishedWork.return, error);
		      }
		    }
		    function commitHookPassiveMountEffects(finishedWork, hookFlags) {
		      shouldProfile(finishedWork)
		        ? (startEffectTimer(),
		          commitHookEffectListMount(hookFlags, finishedWork),
		          recordEffectDuration())
		        : commitHookEffectListMount(hookFlags, finishedWork);
		    }
		    function commitHookPassiveUnmountEffects(
		      finishedWork,
		      nearestMountedAncestor,
		      hookFlags
		    ) {
		      shouldProfile(finishedWork)
		        ? (startEffectTimer(),
		          commitHookEffectListUnmount(
		            hookFlags,
		            finishedWork,
		            nearestMountedAncestor
		          ),
		          recordEffectDuration())
		        : commitHookEffectListUnmount(
		            hookFlags,
		            finishedWork,
		            nearestMountedAncestor
		          );
		    }
		    function commitClassCallbacks(finishedWork) {
		      var updateQueue = finishedWork.updateQueue;
		      if (null !== updateQueue) {
		        var instance = finishedWork.stateNode;
		        finishedWork.type.defaultProps ||
		          "ref" in finishedWork.memoizedProps ||
		          didWarnAboutReassigningProps ||
		          (instance.props !== finishedWork.memoizedProps &&
		            console.error(
		              "Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
		              getComponentNameFromFiber(finishedWork) || "instance"
		            ),
		          instance.state !== finishedWork.memoizedState &&
		            console.error(
		              "Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
		              getComponentNameFromFiber(finishedWork) || "instance"
		            ));
		        try {
		          runWithFiberInDEV(
		            finishedWork,
		            commitCallbacks,
		            updateQueue,
		            instance
		          );
		        } catch (error) {
		          captureCommitPhaseError(finishedWork, finishedWork.return, error);
		        }
		      }
		    }
		    function callGetSnapshotBeforeUpdates(instance, prevProps, prevState) {
		      return instance.getSnapshotBeforeUpdate(prevProps, prevState);
		    }
		    function commitClassSnapshot(finishedWork, current) {
		      var prevProps = current.memoizedProps,
		        prevState = current.memoizedState;
		      current = finishedWork.stateNode;
		      finishedWork.type.defaultProps ||
		        "ref" in finishedWork.memoizedProps ||
		        didWarnAboutReassigningProps ||
		        (current.props !== finishedWork.memoizedProps &&
		          console.error(
		            "Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
		            getComponentNameFromFiber(finishedWork) || "instance"
		          ),
		        current.state !== finishedWork.memoizedState &&
		          console.error(
		            "Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
		            getComponentNameFromFiber(finishedWork) || "instance"
		          ));
		      try {
		        var resolvedPrevProps = resolveClassComponentProps(
		          finishedWork.type,
		          prevProps,
		          finishedWork.elementType === finishedWork.type
		        );
		        var snapshot = runWithFiberInDEV(
		          finishedWork,
		          callGetSnapshotBeforeUpdates,
		          current,
		          resolvedPrevProps,
		          prevState
		        );
		        prevProps = didWarnAboutUndefinedSnapshotBeforeUpdate;
		        void 0 !== snapshot ||
		          prevProps.has(finishedWork.type) ||
		          (prevProps.add(finishedWork.type),
		          runWithFiberInDEV(finishedWork, function () {
		            console.error(
		              "%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.",
		              getComponentNameFromFiber(finishedWork)
		            );
		          }));
		        current.__reactInternalSnapshotBeforeUpdate = snapshot;
		      } catch (error) {
		        captureCommitPhaseError(finishedWork, finishedWork.return, error);
		      }
		    }
		    function safelyCallComponentWillUnmount(
		      current,
		      nearestMountedAncestor,
		      instance
		    ) {
		      instance.props = resolveClassComponentProps(
		        current.type,
		        current.memoizedProps
		      );
		      instance.state = current.memoizedState;
		      shouldProfile(current)
		        ? (startEffectTimer(),
		          runWithFiberInDEV(
		            current,
		            callComponentWillUnmountInDEV,
		            current,
		            nearestMountedAncestor,
		            instance
		          ),
		          recordEffectDuration())
		        : runWithFiberInDEV(
		            current,
		            callComponentWillUnmountInDEV,
		            current,
		            nearestMountedAncestor,
		            instance
		          );
		    }
		    function commitAttachRef(finishedWork) {
		      var ref = finishedWork.ref;
		      if (null !== ref) {
		        var instance = finishedWork.stateNode;
		        switch (finishedWork.tag) {
		          case 26:
		          case 27:
		          case 5:
		            instance = getPublicInstance(instance);
		        }
		        if ("function" === typeof ref)
		          if (shouldProfile(finishedWork))
		            try {
		              startEffectTimer(), (finishedWork.refCleanup = ref(instance));
		            } finally {
		              recordEffectDuration();
		            }
		          else finishedWork.refCleanup = ref(instance);
		        else
		          "string" === typeof ref
		            ? console.error("String refs are no longer supported.")
		            : ref.hasOwnProperty("current") ||
		              console.error(
		                "Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().",
		                getComponentNameFromFiber(finishedWork)
		              ),
		            (ref.current = instance);
		      }
		    }
		    function safelyAttachRef(current, nearestMountedAncestor) {
		      try {
		        runWithFiberInDEV(current, commitAttachRef, current);
		      } catch (error) {
		        captureCommitPhaseError(current, nearestMountedAncestor, error);
		      }
		    }
		    function safelyDetachRef(current, nearestMountedAncestor) {
		      var ref = current.ref,
		        refCleanup = current.refCleanup;
		      if (null !== ref)
		        if ("function" === typeof refCleanup)
		          try {
		            if (shouldProfile(current))
		              try {
		                startEffectTimer(), runWithFiberInDEV(current, refCleanup);
		              } finally {
		                recordEffectDuration(current);
		              }
		            else runWithFiberInDEV(current, refCleanup);
		          } catch (error) {
		            captureCommitPhaseError(current, nearestMountedAncestor, error);
		          } finally {
		            (current.refCleanup = null),
		              (current = current.alternate),
		              null != current && (current.refCleanup = null);
		          }
		        else if ("function" === typeof ref)
		          try {
		            if (shouldProfile(current))
		              try {
		                startEffectTimer(), runWithFiberInDEV(current, ref, null);
		              } finally {
		                recordEffectDuration(current);
		              }
		            else runWithFiberInDEV(current, ref, null);
		          } catch (error$3) {
		            captureCommitPhaseError(current, nearestMountedAncestor, error$3);
		          }
		        else ref.current = null;
		    }
		    function commitProfiler(
		      finishedWork,
		      current,
		      commitStartTime,
		      effectDuration
		    ) {
		      var _finishedWork$memoize = finishedWork.memoizedProps,
		        id = _finishedWork$memoize.id,
		        onCommit = _finishedWork$memoize.onCommit;
		      _finishedWork$memoize = _finishedWork$memoize.onRender;
		      current = null === current ? "mount" : "update";
		      currentUpdateIsNested && (current = "nested-update");
		      "function" === typeof _finishedWork$memoize &&
		        _finishedWork$memoize(
		          id,
		          current,
		          finishedWork.actualDuration,
		          finishedWork.treeBaseDuration,
		          finishedWork.actualStartTime,
		          commitStartTime
		        );
		      "function" === typeof onCommit &&
		        onCommit(
		          finishedWork.memoizedProps.id,
		          current,
		          effectDuration,
		          commitStartTime
		        );
		    }
		    function commitProfilerPostCommitImpl(
		      finishedWork,
		      current,
		      commitStartTime,
		      passiveEffectDuration
		    ) {
		      var _finishedWork$memoize2 = finishedWork.memoizedProps;
		      finishedWork = _finishedWork$memoize2.id;
		      _finishedWork$memoize2 = _finishedWork$memoize2.onPostCommit;
		      current = null === current ? "mount" : "update";
		      currentUpdateIsNested && (current = "nested-update");
		      "function" === typeof _finishedWork$memoize2 &&
		        _finishedWork$memoize2(
		          finishedWork,
		          current,
		          passiveEffectDuration,
		          commitStartTime
		        );
		    }
		    function commitHostMount(finishedWork) {
		      var type = finishedWork.type,
		        props = finishedWork.memoizedProps,
		        instance = finishedWork.stateNode;
		      try {
		        runWithFiberInDEV(
		          finishedWork,
		          commitMount,
		          instance,
		          type,
		          props,
		          finishedWork
		        );
		      } catch (error) {
		        captureCommitPhaseError(finishedWork, finishedWork.return, error);
		      }
		    }
		    function commitHostUpdate(finishedWork, newProps, oldProps) {
		      try {
		        runWithFiberInDEV(
		          finishedWork,
		          commitUpdate,
		          finishedWork.stateNode,
		          finishedWork.type,
		          oldProps,
		          newProps,
		          finishedWork
		        );
		      } catch (error) {
		        captureCommitPhaseError(finishedWork, finishedWork.return, error);
		      }
		    }
		    function isHostParent(fiber) {
		      return (
		        5 === fiber.tag ||
		        3 === fiber.tag ||
		        (supportsResources ? 26 === fiber.tag : !1) ||
		        (supportsSingletons ? 27 === fiber.tag : !1) ||
		        4 === fiber.tag
		      );
		    }
		    function getHostSibling(fiber) {
		      a: for (;;) {
		        for (; null === fiber.sibling; ) {
		          if (null === fiber.return || isHostParent(fiber.return)) return null;
		          fiber = fiber.return;
		        }
		        fiber.sibling.return = fiber.return;
		        for (
		          fiber = fiber.sibling;
		          5 !== fiber.tag &&
		          6 !== fiber.tag &&
		          (supportsSingletons ? 27 !== fiber.tag : 1) &&
		          18 !== fiber.tag;

		        ) {
		          if (fiber.flags & 2) continue a;
		          if (null === fiber.child || 4 === fiber.tag) continue a;
		          else (fiber.child.return = fiber), (fiber = fiber.child);
		        }
		        if (!(fiber.flags & 2)) return fiber.stateNode;
		      }
		    }
		    function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
		      var tag = node.tag;
		      if (5 === tag || 6 === tag)
		        (node = node.stateNode),
		          before
		            ? insertInContainerBefore(parent, node, before)
		            : appendChildToContainer(parent, node);
		      else if (
		        !(4 === tag || (supportsSingletons && 27 === tag)) &&
		        ((node = node.child), null !== node)
		      )
		        for (
		          insertOrAppendPlacementNodeIntoContainer(node, before, parent),
		            node = node.sibling;
		          null !== node;

		        )
		          insertOrAppendPlacementNodeIntoContainer(node, before, parent),
		            (node = node.sibling);
		    }
		    function insertOrAppendPlacementNode(node, before, parent) {
		      var tag = node.tag;
		      if (5 === tag || 6 === tag)
		        (node = node.stateNode),
		          before
		            ? insertBefore(parent, node, before)
		            : appendChild(parent, node);
		      else if (
		        !(4 === tag || (supportsSingletons && 27 === tag)) &&
		        ((node = node.child), null !== node)
		      )
		        for (
		          insertOrAppendPlacementNode(node, before, parent),
		            node = node.sibling;
		          null !== node;

		        )
		          insertOrAppendPlacementNode(node, before, parent),
		            (node = node.sibling);
		    }
		    function commitPlacement(finishedWork) {
		      if (
		        supportsMutation &&
		        (!supportsSingletons || 27 !== finishedWork.tag)
		      ) {
		        a: {
		          for (var parent = finishedWork.return; null !== parent; ) {
		            if (isHostParent(parent)) {
		              var parentFiber = parent;
		              break a;
		            }
		            parent = parent.return;
		          }
		          throw Error(
		            "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
		          );
		        }
		        switch (parentFiber.tag) {
		          case 27:
		            if (supportsSingletons) {
		              parent = parentFiber.stateNode;
		              parentFiber = getHostSibling(finishedWork);
		              insertOrAppendPlacementNode(finishedWork, parentFiber, parent);
		              break;
		            }
		          case 5:
		            parent = parentFiber.stateNode;
		            parentFiber.flags & 32 &&
		              (resetTextContent(parent), (parentFiber.flags &= -33));
		            parentFiber = getHostSibling(finishedWork);
		            insertOrAppendPlacementNode(finishedWork, parentFiber, parent);
		            break;
		          case 3:
		          case 4:
		            parent = parentFiber.stateNode.containerInfo;
		            parentFiber = getHostSibling(finishedWork);
		            insertOrAppendPlacementNodeIntoContainer(
		              finishedWork,
		              parentFiber,
		              parent
		            );
		            break;
		          default:
		            throw Error(
		              "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue."
		            );
		        }
		      }
		    }
		    function commitHostPortalContainerChildren(
		      portal,
		      finishedWork,
		      pendingChildren
		    ) {
		      portal = portal.containerInfo;
		      try {
		        runWithFiberInDEV(
		          finishedWork,
		          replaceContainerChildren,
		          portal,
		          pendingChildren
		        );
		      } catch (error) {
		        captureCommitPhaseError(finishedWork, finishedWork.return, error);
		      }
		    }
		    function commitBeforeMutationEffects(root, firstChild) {
		      prepareForCommit(root.containerInfo);
		      for (nextEffect = firstChild; null !== nextEffect; )
		        if (
		          ((root = nextEffect),
		          (firstChild = root.child),
		          0 !== (root.subtreeFlags & 1028) && null !== firstChild)
		        )
		          (firstChild.return = root), (nextEffect = firstChild);
		        else
		          for (; null !== nextEffect; ) {
		            firstChild = root = nextEffect;
		            var current = firstChild.alternate,
		              flags = firstChild.flags;
		            switch (firstChild.tag) {
		              case 0:
		                break;
		              case 11:
		              case 15:
		                break;
		              case 1:
		                0 !== (flags & 1024) &&
		                  null !== current &&
		                  commitClassSnapshot(firstChild, current);
		                break;
		              case 3:
		                0 !== (flags & 1024) &&
		                  supportsMutation &&
		                  clearContainer(firstChild.stateNode.containerInfo);
		                break;
		              case 5:
		              case 26:
		              case 27:
		              case 6:
		              case 4:
		              case 17:
		                break;
		              default:
		                if (0 !== (flags & 1024))
		                  throw Error(
		                    "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue."
		                  );
		            }
		            firstChild = root.sibling;
		            if (null !== firstChild) {
		              firstChild.return = root.return;
		              nextEffect = firstChild;
		              break;
		            }
		            nextEffect = root.return;
		          }
		      root = shouldFireAfterActiveInstanceBlur;
		      shouldFireAfterActiveInstanceBlur = !1;
		      return root;
		    }
		    function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork) {
		      var flags = finishedWork.flags;
		      switch (finishedWork.tag) {
		        case 0:
		        case 11:
		        case 15:
		          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		          flags & 4 &&
		            commitHookLayoutEffects(finishedWork, Layout | HasEffect);
		          break;
		        case 1:
		          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		          if (flags & 4)
		            if (((finishedRoot = finishedWork.stateNode), null === current))
		              finishedWork.type.defaultProps ||
		                "ref" in finishedWork.memoizedProps ||
		                didWarnAboutReassigningProps ||
		                (finishedRoot.props !== finishedWork.memoizedProps &&
		                  console.error(
		                    "Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
		                    getComponentNameFromFiber(finishedWork) || "instance"
		                  ),
		                finishedRoot.state !== finishedWork.memoizedState &&
		                  console.error(
		                    "Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
		                    getComponentNameFromFiber(finishedWork) || "instance"
		                  )),
		                shouldProfile(finishedWork)
		                  ? (startEffectTimer(),
		                    runWithFiberInDEV(
		                      finishedWork,
		                      callComponentDidMountInDEV,
		                      finishedWork,
		                      finishedRoot
		                    ),
		                    recordEffectDuration())
		                  : runWithFiberInDEV(
		                      finishedWork,
		                      callComponentDidMountInDEV,
		                      finishedWork,
		                      finishedRoot
		                    );
		            else {
		              var prevProps = resolveClassComponentProps(
		                finishedWork.type,
		                current.memoizedProps
		              );
		              current = current.memoizedState;
		              finishedWork.type.defaultProps ||
		                "ref" in finishedWork.memoizedProps ||
		                didWarnAboutReassigningProps ||
		                (finishedRoot.props !== finishedWork.memoizedProps &&
		                  console.error(
		                    "Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.",
		                    getComponentNameFromFiber(finishedWork) || "instance"
		                  ),
		                finishedRoot.state !== finishedWork.memoizedState &&
		                  console.error(
		                    "Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.",
		                    getComponentNameFromFiber(finishedWork) || "instance"
		                  ));
		              shouldProfile(finishedWork)
		                ? (startEffectTimer(),
		                  runWithFiberInDEV(
		                    finishedWork,
		                    callComponentDidUpdateInDEV,
		                    finishedWork,
		                    finishedRoot,
		                    prevProps,
		                    current,
		                    finishedRoot.__reactInternalSnapshotBeforeUpdate
		                  ),
		                  recordEffectDuration())
		                : runWithFiberInDEV(
		                    finishedWork,
		                    callComponentDidUpdateInDEV,
		                    finishedWork,
		                    finishedRoot,
		                    prevProps,
		                    current,
		                    finishedRoot.__reactInternalSnapshotBeforeUpdate
		                  );
		            }
		          flags & 64 && commitClassCallbacks(finishedWork);
		          flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
		          break;
		        case 3:
		          current = pushNestedEffectDurations();
		          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		          if (
		            flags & 64 &&
		            ((flags = finishedWork.updateQueue), null !== flags)
		          ) {
		            prevProps = null;
		            if (null !== finishedWork.child)
		              switch (finishedWork.child.tag) {
		                case 27:
		                case 5:
		                  prevProps = getPublicInstance(finishedWork.child.stateNode);
		                  break;
		                case 1:
		                  prevProps = finishedWork.child.stateNode;
		              }
		            try {
		              runWithFiberInDEV(
		                finishedWork,
		                commitCallbacks,
		                flags,
		                prevProps
		              );
		            } catch (error) {
		              captureCommitPhaseError(finishedWork, finishedWork.return, error);
		            }
		          }
		          finishedRoot.effectDuration += popNestedEffectDurations(current);
		          break;
		        case 26:
		          if (supportsResources) {
		            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		            flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
		            break;
		          }
		        case 27:
		        case 5:
		          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		          null === current && flags & 4 && commitHostMount(finishedWork);
		          flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
		          break;
		        case 12:
		          if (flags & 4) {
		            flags = pushNestedEffectDurations();
		            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		            finishedRoot = finishedWork.stateNode;
		            finishedRoot.effectDuration += bubbleNestedEffectDurations(flags);
		            try {
		              runWithFiberInDEV(
		                finishedWork,
		                commitProfiler,
		                finishedWork,
		                current,
		                commitStartTime,
		                finishedRoot.effectDuration
		              );
		            } catch (error) {
		              captureCommitPhaseError(finishedWork, finishedWork.return, error);
		            }
		          } else recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		          break;
		        case 13:
		          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		          flags & 4 &&
		            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
		          break;
		        case 22:
		          prevProps =
		            null !== finishedWork.memoizedState || offscreenSubtreeIsHidden;
		          if (!prevProps) {
		            current =
		              (null !== current && null !== current.memoizedState) ||
		              offscreenSubtreeWasHidden;
		            var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden,
		              prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
		            offscreenSubtreeIsHidden = prevProps;
		            (offscreenSubtreeWasHidden = current) &&
		            !prevOffscreenSubtreeWasHidden
		              ? recursivelyTraverseReappearLayoutEffects(
		                  finishedRoot,
		                  finishedWork,
		                  0 !== (finishedWork.subtreeFlags & 8772)
		                )
		              : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
		            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
		          }
		          flags & 512 &&
		            ("manual" === finishedWork.memoizedProps.mode
		              ? safelyAttachRef(finishedWork, finishedWork.return)
		              : safelyDetachRef(finishedWork, finishedWork.return));
		          break;
		        default:
		          recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
		      }
		    }
		    function detachFiberAfterEffects(fiber) {
		      var alternate = fiber.alternate;
		      null !== alternate &&
		        ((fiber.alternate = null), detachFiberAfterEffects(alternate));
		      fiber.child = null;
		      fiber.deletions = null;
		      fiber.sibling = null;
		      5 === fiber.tag &&
		        ((alternate = fiber.stateNode),
		        null !== alternate && detachDeletedInstance(alternate));
		      fiber.stateNode = null;
		      fiber._debugOwner = null;
		      fiber.return = null;
		      fiber.dependencies = null;
		      fiber.memoizedProps = null;
		      fiber.memoizedState = null;
		      fiber.pendingProps = null;
		      fiber.stateNode = null;
		      fiber.updateQueue = null;
		    }
		    function recursivelyTraverseDeletionEffects(
		      finishedRoot,
		      nearestMountedAncestor,
		      parent
		    ) {
		      for (parent = parent.child; null !== parent; )
		        commitDeletionEffectsOnFiber(
		          finishedRoot,
		          nearestMountedAncestor,
		          parent
		        ),
		          (parent = parent.sibling);
		    }
		    function commitDeletionEffectsOnFiber(
		      finishedRoot,
		      nearestMountedAncestor,
		      deletedFiber
		    ) {
		      if (
		        injectedHook &&
		        "function" === typeof injectedHook.onCommitFiberUnmount
		      )
		        try {
		          injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
		        } catch (err) {
		          hasLoggedError ||
		            ((hasLoggedError = !0),
		            console.error(
		              "React instrumentation encountered an error: %s",
		              err
		            ));
		        }
		      switch (deletedFiber.tag) {
		        case 26:
		          if (supportsResources) {
		            offscreenSubtreeWasHidden ||
		              safelyDetachRef(deletedFiber, nearestMountedAncestor);
		            recursivelyTraverseDeletionEffects(
		              finishedRoot,
		              nearestMountedAncestor,
		              deletedFiber
		            );
		            deletedFiber.memoizedState
		              ? releaseResource(deletedFiber.memoizedState)
		              : deletedFiber.stateNode &&
		                unmountHoistable(deletedFiber.stateNode);
		            break;
		          }
		        case 27:
		          if (supportsSingletons) {
		            offscreenSubtreeWasHidden ||
		              safelyDetachRef(deletedFiber, nearestMountedAncestor);
		            var prevHostParent = hostParent,
		              prevHostParentIsContainer = hostParentIsContainer;
		            hostParent = deletedFiber.stateNode;
		            recursivelyTraverseDeletionEffects(
		              finishedRoot,
		              nearestMountedAncestor,
		              deletedFiber
		            );
		            releaseSingletonInstance(deletedFiber.stateNode);
		            hostParent = prevHostParent;
		            hostParentIsContainer = prevHostParentIsContainer;
		            break;
		          }
		        case 5:
		          offscreenSubtreeWasHidden ||
		            safelyDetachRef(deletedFiber, nearestMountedAncestor);
		        case 6:
		          if (supportsMutation) {
		            if (
		              ((prevHostParent = hostParent),
		              (prevHostParentIsContainer = hostParentIsContainer),
		              (hostParent = null),
		              recursivelyTraverseDeletionEffects(
		                finishedRoot,
		                nearestMountedAncestor,
		                deletedFiber
		              ),
		              (hostParent = prevHostParent),
		              (hostParentIsContainer = prevHostParentIsContainer),
		              null !== hostParent)
		            )
		              if (hostParentIsContainer)
		                try {
		                  runWithFiberInDEV(
		                    deletedFiber,
		                    removeChildFromContainer,
		                    hostParent,
		                    deletedFiber.stateNode
		                  );
		                } catch (error) {
		                  captureCommitPhaseError(
		                    deletedFiber,
		                    nearestMountedAncestor,
		                    error
		                  );
		                }
		              else
		                try {
		                  runWithFiberInDEV(
		                    deletedFiber,
		                    removeChild,
		                    hostParent,
		                    deletedFiber.stateNode
		                  );
		                } catch (error) {
		                  captureCommitPhaseError(
		                    deletedFiber,
		                    nearestMountedAncestor,
		                    error
		                  );
		                }
		          } else
		            recursivelyTraverseDeletionEffects(
		              finishedRoot,
		              nearestMountedAncestor,
		              deletedFiber
		            );
		          break;
		        case 18:
		          supportsMutation &&
		            null !== hostParent &&
		            (hostParentIsContainer
		              ? clearSuspenseBoundaryFromContainer(
		                  hostParent,
		                  deletedFiber.stateNode
		                )
		              : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));
		          break;
		        case 4:
		          supportsMutation
		            ? ((prevHostParent = hostParent),
		              (prevHostParentIsContainer = hostParentIsContainer),
		              (hostParent = deletedFiber.stateNode.containerInfo),
		              (hostParentIsContainer = !0),
		              recursivelyTraverseDeletionEffects(
		                finishedRoot,
		                nearestMountedAncestor,
		                deletedFiber
		              ),
		              (hostParent = prevHostParent),
		              (hostParentIsContainer = prevHostParentIsContainer))
		            : (supportsPersistence &&
		                commitHostPortalContainerChildren(
		                  deletedFiber.stateNode,
		                  deletedFiber,
		                  createContainerChildSet()
		                ),
		              recursivelyTraverseDeletionEffects(
		                finishedRoot,
		                nearestMountedAncestor,
		                deletedFiber
		              ));
		          break;
		        case 0:
		        case 11:
		        case 14:
		        case 15:
		          offscreenSubtreeWasHidden ||
		            commitHookEffectListUnmount(
		              Insertion,
		              deletedFiber,
		              nearestMountedAncestor
		            );
		          offscreenSubtreeWasHidden ||
		            commitHookLayoutUnmountEffects(
		              deletedFiber,
		              nearestMountedAncestor,
		              Layout
		            );
		          recursivelyTraverseDeletionEffects(
		            finishedRoot,
		            nearestMountedAncestor,
		            deletedFiber
		          );
		          break;
		        case 1:
		          offscreenSubtreeWasHidden ||
		            (safelyDetachRef(deletedFiber, nearestMountedAncestor),
		            (prevHostParent = deletedFiber.stateNode),
		            "function" === typeof prevHostParent.componentWillUnmount &&
		              safelyCallComponentWillUnmount(
		                deletedFiber,
		                nearestMountedAncestor,
		                prevHostParent
		              ));
		          recursivelyTraverseDeletionEffects(
		            finishedRoot,
		            nearestMountedAncestor,
		            deletedFiber
		          );
		          break;
		        case 21:
		          recursivelyTraverseDeletionEffects(
		            finishedRoot,
		            nearestMountedAncestor,
		            deletedFiber
		          );
		          break;
		        case 22:
		          offscreenSubtreeWasHidden ||
		            safelyDetachRef(deletedFiber, nearestMountedAncestor);
		          offscreenSubtreeWasHidden =
		            (prevHostParent = offscreenSubtreeWasHidden) ||
		            null !== deletedFiber.memoizedState;
		          recursivelyTraverseDeletionEffects(
		            finishedRoot,
		            nearestMountedAncestor,
		            deletedFiber
		          );
		          offscreenSubtreeWasHidden = prevHostParent;
		          break;
		        default:
		          recursivelyTraverseDeletionEffects(
		            finishedRoot,
		            nearestMountedAncestor,
		            deletedFiber
		          );
		      }
		    }
		    function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
		      if (
		        supportsHydration &&
		        null === finishedWork.memoizedState &&
		        ((finishedRoot = finishedWork.alternate),
		        null !== finishedRoot &&
		          ((finishedRoot = finishedRoot.memoizedState),
		          null !== finishedRoot &&
		            ((finishedRoot = finishedRoot.dehydrated), null !== finishedRoot)))
		      )
		        try {
		          runWithFiberInDEV(
		            finishedWork,
		            commitHydratedSuspenseInstance,
		            finishedRoot
		          );
		        } catch (error) {
		          captureCommitPhaseError(finishedWork, finishedWork.return, error);
		        }
		    }
		    function getRetryCache(finishedWork) {
		      switch (finishedWork.tag) {
		        case 13:
		        case 19:
		          var retryCache = finishedWork.stateNode;
		          null === retryCache &&
		            (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
		          return retryCache;
		        case 22:
		          return (
		            (finishedWork = finishedWork.stateNode),
		            (retryCache = finishedWork._retryCache),
		            null === retryCache &&
		              (retryCache = finishedWork._retryCache = new PossiblyWeakSet()),
		            retryCache
		          );
		        default:
		          throw Error(
		            "Unexpected Suspense handler tag (" +
		              finishedWork.tag +
		              "). This is a bug in React."
		          );
		      }
		    }
		    function attachSuspenseRetryListeners(finishedWork, wakeables) {
		      var retryCache = getRetryCache(finishedWork);
		      wakeables.forEach(function (wakeable) {
		        var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
		        if (!retryCache.has(wakeable)) {
		          retryCache.add(wakeable);
		          if (isDevToolsPresent)
		            if (null !== inProgressLanes && null !== inProgressRoot)
		              restorePendingUpdaters(inProgressRoot, inProgressLanes);
		            else
		              throw Error(
		                "Expected finished root and lanes to be set. This is a bug in React."
		              );
		          wakeable.then(retry, retry);
		        }
		      });
		    }
		    function commitMutationEffects(root, finishedWork, committedLanes) {
		      inProgressLanes = committedLanes;
		      inProgressRoot = root;
		      commitMutationEffectsOnFiber(finishedWork, root);
		      inProgressRoot = inProgressLanes = null;
		    }
		    function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
		      var deletions = parentFiber.deletions;
		      if (null !== deletions)
		        for (var i = 0; i < deletions.length; i++) {
		          var root = root$jscomp$0,
		            returnFiber = parentFiber,
		            deletedFiber = deletions[i];
		          if (supportsMutation) {
		            var parent = returnFiber;
		            a: for (; null !== parent; ) {
		              switch (parent.tag) {
		                case 27:
		                case 5:
		                  hostParent = parent.stateNode;
		                  hostParentIsContainer = !1;
		                  break a;
		                case 3:
		                  hostParent = parent.stateNode.containerInfo;
		                  hostParentIsContainer = !0;
		                  break a;
		                case 4:
		                  hostParent = parent.stateNode.containerInfo;
		                  hostParentIsContainer = !0;
		                  break a;
		              }
		              parent = parent.return;
		            }
		            if (null === hostParent)
		              throw Error(
		                "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue."
		              );
		            commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
		            hostParent = null;
		            hostParentIsContainer = !1;
		          } else commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
		          root = deletedFiber;
		          returnFiber = root.alternate;
		          null !== returnFiber && (returnFiber.return = null);
		          root.return = null;
		        }
		      if (parentFiber.subtreeFlags & 13878)
		        for (parentFiber = parentFiber.child; null !== parentFiber; )
		          commitMutationEffectsOnFiber(parentFiber, root$jscomp$0),
		            (parentFiber = parentFiber.sibling);
		    }
		    function commitMutationEffectsOnFiber(finishedWork, root) {
		      var current = finishedWork.alternate,
		        flags = finishedWork.flags;
		      switch (finishedWork.tag) {
		        case 0:
		        case 11:
		        case 14:
		        case 15:
		          recursivelyTraverseMutationEffects(root, finishedWork);
		          commitReconciliationEffects(finishedWork);
		          flags & 4 &&
		            (commitHookEffectListUnmount(
		              Insertion | HasEffect,
		              finishedWork,
		              finishedWork.return
		            ),
		            commitHookEffectListMount(Insertion | HasEffect, finishedWork),
		            commitHookLayoutUnmountEffects(
		              finishedWork,
		              finishedWork.return,
		              Layout | HasEffect
		            ));
		          break;
		        case 1:
		          recursivelyTraverseMutationEffects(root, finishedWork);
		          commitReconciliationEffects(finishedWork);
		          flags & 512 &&
		            (offscreenSubtreeWasHidden ||
		              null === current ||
		              safelyDetachRef(current, current.return));
		          flags & 64 &&
		            offscreenSubtreeIsHidden &&
		            ((finishedWork = finishedWork.updateQueue),
		            null !== finishedWork &&
		              ((flags = finishedWork.callbacks),
		              null !== flags &&
		                ((current = finishedWork.shared.hiddenCallbacks),
		                (finishedWork.shared.hiddenCallbacks =
		                  null === current ? flags : current.concat(flags)))));
		          break;
		        case 26:
		          if (supportsResources) {
		            var hoistableRoot = currentHoistableRoot;
		            recursivelyTraverseMutationEffects(root, finishedWork);
		            commitReconciliationEffects(finishedWork);
		            flags & 512 &&
		              (offscreenSubtreeWasHidden ||
		                null === current ||
		                safelyDetachRef(current, current.return));
		            flags & 4 &&
		              ((flags = null !== current ? current.memoizedState : null),
		              (root = finishedWork.memoizedState),
		              null === current
		                ? null === root
		                  ? null === finishedWork.stateNode
		                    ? (finishedWork.stateNode = hydrateHoistable(
		                        hoistableRoot,
		                        finishedWork.type,
		                        finishedWork.memoizedProps,
		                        finishedWork
		                      ))
		                    : mountHoistable(
		                        hoistableRoot,
		                        finishedWork.type,
		                        finishedWork.stateNode
		                      )
		                  : (finishedWork.stateNode = acquireResource(
		                      hoistableRoot,
		                      root,
		                      finishedWork.memoizedProps
		                    ))
		                : flags !== root
		                  ? (null === flags
		                      ? null !== current.stateNode &&
		                        unmountHoistable(current.stateNode)
		                      : releaseResource(flags),
		                    null === root
		                      ? mountHoistable(
		                          hoistableRoot,
		                          finishedWork.type,
		                          finishedWork.stateNode
		                        )
		                      : acquireResource(
		                          hoistableRoot,
		                          root,
		                          finishedWork.memoizedProps
		                        ))
		                  : null === root &&
		                    null !== finishedWork.stateNode &&
		                    commitHostUpdate(
		                      finishedWork,
		                      finishedWork.memoizedProps,
		                      current.memoizedProps
		                    ));
		            break;
		          }
		        case 27:
		          if (
		            supportsSingletons &&
		            flags & 4 &&
		            null === finishedWork.alternate
		          ) {
		            hoistableRoot = finishedWork.stateNode;
		            var props = finishedWork.memoizedProps;
		            try {
		              clearSingleton(hoistableRoot),
		                runWithFiberInDEV(
		                  finishedWork,
		                  acquireSingletonInstance,
		                  finishedWork.type,
		                  props,
		                  hoistableRoot,
		                  finishedWork
		                );
		            } catch (error) {
		              captureCommitPhaseError(finishedWork, finishedWork.return, error);
		            }
		          }
		        case 5:
		          recursivelyTraverseMutationEffects(root, finishedWork);
		          commitReconciliationEffects(finishedWork);
		          flags & 512 &&
		            (offscreenSubtreeWasHidden ||
		              null === current ||
		              safelyDetachRef(current, current.return));
		          if (supportsMutation) {
		            if (finishedWork.flags & 32) {
		              root = finishedWork.stateNode;
		              try {
		                runWithFiberInDEV(finishedWork, resetTextContent, root);
		              } catch (error) {
		                captureCommitPhaseError(
		                  finishedWork,
		                  finishedWork.return,
		                  error
		                );
		              }
		            }
		            flags & 4 &&
		              null != finishedWork.stateNode &&
		              ((root = finishedWork.memoizedProps),
		              commitHostUpdate(
		                finishedWork,
		                root,
		                null !== current ? current.memoizedProps : root
		              ));
		            flags & 1024 &&
		              ((needsFormReset = !0),
		              "form" !== finishedWork.type &&
		                console.error(
		                  "Unexpected host component type. Expected a form. This is a bug in React."
		                ));
		          }
		          break;
		        case 6:
		          recursivelyTraverseMutationEffects(root, finishedWork);
		          commitReconciliationEffects(finishedWork);
		          if (flags & 4 && supportsMutation) {
		            if (null === finishedWork.stateNode)
		              throw Error(
		                "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue."
		              );
		            flags = finishedWork.memoizedProps;
		            current = null !== current ? current.memoizedProps : flags;
		            root = finishedWork.stateNode;
		            try {
		              runWithFiberInDEV(
		                finishedWork,
		                commitTextUpdate,
		                root,
		                current,
		                flags
		              );
		            } catch (error) {
		              captureCommitPhaseError(finishedWork, finishedWork.return, error);
		            }
		          }
		          break;
		        case 3:
		          hoistableRoot = pushNestedEffectDurations();
		          supportsResources
		            ? (prepareToCommitHoistables(),
		              (props = currentHoistableRoot),
		              (currentHoistableRoot = getHoistableRoot(root.containerInfo)),
		              recursivelyTraverseMutationEffects(root, finishedWork),
		              (currentHoistableRoot = props))
		            : recursivelyTraverseMutationEffects(root, finishedWork);
		          commitReconciliationEffects(finishedWork);
		          if (flags & 4) {
		            if (
		              supportsMutation &&
		              supportsHydration &&
		              null !== current &&
		              current.memoizedState.isDehydrated
		            )
		              try {
		                runWithFiberInDEV(
		                  finishedWork,
		                  commitHydratedContainer,
		                  root.containerInfo
		                );
		              } catch (error) {
		                captureCommitPhaseError(
		                  finishedWork,
		                  finishedWork.return,
		                  error
		                );
		              }
		            if (supportsPersistence) {
		              flags = root.containerInfo;
		              current = root.pendingChildren;
		              try {
		                runWithFiberInDEV(
		                  finishedWork,
		                  replaceContainerChildren,
		                  flags,
		                  current
		                );
		              } catch (error) {
		                captureCommitPhaseError(
		                  finishedWork,
		                  finishedWork.return,
		                  error
		                );
		              }
		            }
		          }
		          needsFormReset &&
		            ((needsFormReset = !1), recursivelyResetForms(finishedWork));
		          root.effectDuration += popNestedEffectDurations(hoistableRoot);
		          break;
		        case 4:
		          supportsResources
		            ? ((current = currentHoistableRoot),
		              (currentHoistableRoot = getHoistableRoot(
		                finishedWork.stateNode.containerInfo
		              )),
		              recursivelyTraverseMutationEffects(root, finishedWork),
		              commitReconciliationEffects(finishedWork),
		              (currentHoistableRoot = current))
		            : (recursivelyTraverseMutationEffects(root, finishedWork),
		              commitReconciliationEffects(finishedWork));
		          flags & 4 &&
		            supportsPersistence &&
		            commitHostPortalContainerChildren(
		              finishedWork.stateNode,
		              finishedWork,
		              finishedWork.stateNode.pendingChildren
		            );
		          break;
		        case 12:
		          flags = pushNestedEffectDurations();
		          recursivelyTraverseMutationEffects(root, finishedWork);
		          commitReconciliationEffects(finishedWork);
		          finishedWork.stateNode.effectDuration +=
		            bubbleNestedEffectDurations(flags);
		          break;
		        case 13:
		          recursivelyTraverseMutationEffects(root, finishedWork);
		          commitReconciliationEffects(finishedWork);
		          finishedWork.child.flags & 8192 &&
		            (null !== finishedWork.memoizedState) !==
		              (null !== current && null !== current.memoizedState) &&
		            (globalMostRecentFallbackTime = now$1());
		          flags & 4 &&
		            ((flags = finishedWork.updateQueue),
		            null !== flags &&
		              ((finishedWork.updateQueue = null),
		              attachSuspenseRetryListeners(finishedWork, flags)));
		          break;
		        case 22:
		          flags & 512 &&
		            (offscreenSubtreeWasHidden ||
		              null === current ||
		              safelyDetachRef(current, current.return));
		          hoistableRoot = null !== finishedWork.memoizedState;
		          var wasHidden = null !== current && null !== current.memoizedState,
		            prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden,
		            prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
		          offscreenSubtreeIsHidden =
		            prevOffscreenSubtreeIsHidden || hoistableRoot;
		          offscreenSubtreeWasHidden =
		            prevOffscreenSubtreeWasHidden || wasHidden;
		          recursivelyTraverseMutationEffects(root, finishedWork);
		          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
		          offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
		          commitReconciliationEffects(finishedWork);
		          root = finishedWork.stateNode;
		          root._current = finishedWork;
		          root._visibility &= -3;
		          root._visibility |= root._pendingVisibility & 2;
		          if (
		            flags & 8192 &&
		            ((root._visibility = hoistableRoot
		              ? root._visibility & -2
		              : root._visibility | 1),
		            hoistableRoot &&
		              ((root = offscreenSubtreeIsHidden || offscreenSubtreeWasHidden),
		              null === current ||
		                wasHidden ||
		                root ||
		                recursivelyTraverseDisappearLayoutEffects(finishedWork)),
		            supportsMutation &&
		              (null === finishedWork.memoizedProps ||
		                "manual" !== finishedWork.memoizedProps.mode))
		          )
		            a: if (((current = null), supportsMutation))
		              for (root = finishedWork; ; ) {
		                if (
		                  5 === root.tag ||
		                  (supportsResources && 26 === root.tag) ||
		                  (supportsSingletons && 27 === root.tag)
		                ) {
		                  if (null === current) {
		                    wasHidden = current = root;
		                    try {
		                      (props = wasHidden.stateNode),
		                        hoistableRoot
		                          ? runWithFiberInDEV(wasHidden, hideInstance, props)
		                          : runWithFiberInDEV(
		                              wasHidden,
		                              unhideInstance,
		                              wasHidden.stateNode,
		                              wasHidden.memoizedProps
		                            );
		                    } catch (error) {
		                      captureCommitPhaseError(
		                        wasHidden,
		                        wasHidden.return,
		                        error
		                      );
		                    }
		                  }
		                } else if (6 === root.tag) {
		                  if (null === current) {
		                    wasHidden = root;
		                    try {
		                      var instance = wasHidden.stateNode;
		                      hoistableRoot
		                        ? runWithFiberInDEV(
		                            wasHidden,
		                            hideTextInstance,
		                            instance
		                          )
		                        : runWithFiberInDEV(
		                            wasHidden,
		                            unhideTextInstance,
		                            instance,
		                            wasHidden.memoizedProps
		                          );
		                    } catch (error) {
		                      captureCommitPhaseError(
		                        wasHidden,
		                        wasHidden.return,
		                        error
		                      );
		                    }
		                  }
		                } else if (
		                  ((22 !== root.tag && 23 !== root.tag) ||
		                    null === root.memoizedState ||
		                    root === finishedWork) &&
		                  null !== root.child
		                ) {
		                  root.child.return = root;
		                  root = root.child;
		                  continue;
		                }
		                if (root === finishedWork) break a;
		                for (; null === root.sibling; ) {
		                  if (null === root.return || root.return === finishedWork)
		                    break a;
		                  current === root && (current = null);
		                  root = root.return;
		                }
		                current === root && (current = null);
		                root.sibling.return = root.return;
		                root = root.sibling;
		              }
		          flags & 4 &&
		            ((flags = finishedWork.updateQueue),
		            null !== flags &&
		              ((current = flags.retryQueue),
		              null !== current &&
		                ((flags.retryQueue = null),
		                attachSuspenseRetryListeners(finishedWork, current))));
		          break;
		        case 19:
		          recursivelyTraverseMutationEffects(root, finishedWork);
		          commitReconciliationEffects(finishedWork);
		          flags & 4 &&
		            ((flags = finishedWork.updateQueue),
		            null !== flags &&
		              ((finishedWork.updateQueue = null),
		              attachSuspenseRetryListeners(finishedWork, flags)));
		          break;
		        case 21:
		          break;
		        default:
		          recursivelyTraverseMutationEffects(root, finishedWork),
		            commitReconciliationEffects(finishedWork);
		      }
		    }
		    function commitReconciliationEffects(finishedWork) {
		      var flags = finishedWork.flags;
		      if (flags & 2) {
		        try {
		          runWithFiberInDEV(finishedWork, commitPlacement, finishedWork);
		        } catch (error) {
		          captureCommitPhaseError(finishedWork, finishedWork.return, error);
		        }
		        finishedWork.flags &= -3;
		      }
		      flags & 4096 && (finishedWork.flags &= -4097);
		    }
		    function recursivelyResetForms(parentFiber) {
		      if (parentFiber.subtreeFlags & 1024)
		        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
		          var fiber = parentFiber;
		          recursivelyResetForms(fiber);
		          5 === fiber.tag &&
		            fiber.flags & 1024 &&
		            resetFormInstance(fiber.stateNode);
		          parentFiber = parentFiber.sibling;
		        }
		    }
		    function commitLayoutEffects(finishedWork, root, committedLanes) {
		      inProgressLanes = committedLanes;
		      inProgressRoot = root;
		      commitLayoutEffectOnFiber(root, finishedWork.alternate, finishedWork);
		      inProgressRoot = inProgressLanes = null;
		    }
		    function recursivelyTraverseLayoutEffects(root, parentFiber) {
		      if (parentFiber.subtreeFlags & 8772)
		        for (parentFiber = parentFiber.child; null !== parentFiber; )
		          commitLayoutEffectOnFiber(root, parentFiber.alternate, parentFiber),
		            (parentFiber = parentFiber.sibling);
		    }
		    function disappearLayoutEffects(finishedWork) {
		      switch (finishedWork.tag) {
		        case 0:
		        case 11:
		        case 14:
		        case 15:
		          commitHookLayoutUnmountEffects(
		            finishedWork,
		            finishedWork.return,
		            Layout
		          );
		          recursivelyTraverseDisappearLayoutEffects(finishedWork);
		          break;
		        case 1:
		          safelyDetachRef(finishedWork, finishedWork.return);
		          var instance = finishedWork.stateNode;
		          "function" === typeof instance.componentWillUnmount &&
		            safelyCallComponentWillUnmount(
		              finishedWork,
		              finishedWork.return,
		              instance
		            );
		          recursivelyTraverseDisappearLayoutEffects(finishedWork);
		          break;
		        case 26:
		        case 27:
		        case 5:
		          safelyDetachRef(finishedWork, finishedWork.return);
		          recursivelyTraverseDisappearLayoutEffects(finishedWork);
		          break;
		        case 22:
		          safelyDetachRef(finishedWork, finishedWork.return);
		          null === finishedWork.memoizedState &&
		            recursivelyTraverseDisappearLayoutEffects(finishedWork);
		          break;
		        default:
		          recursivelyTraverseDisappearLayoutEffects(finishedWork);
		      }
		    }
		    function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
		      for (parentFiber = parentFiber.child; null !== parentFiber; )
		        disappearLayoutEffects(parentFiber),
		          (parentFiber = parentFiber.sibling);
		    }
		    function reappearLayoutEffects(
		      finishedRoot,
		      current,
		      finishedWork,
		      includeWorkInProgressEffects
		    ) {
		      var flags = finishedWork.flags;
		      switch (finishedWork.tag) {
		        case 0:
		        case 11:
		        case 15:
		          recursivelyTraverseReappearLayoutEffects(
		            finishedRoot,
		            finishedWork,
		            includeWorkInProgressEffects
		          );
		          commitHookLayoutEffects(finishedWork, Layout);
		          break;
		        case 1:
		          recursivelyTraverseReappearLayoutEffects(
		            finishedRoot,
		            finishedWork,
		            includeWorkInProgressEffects
		          );
		          current = finishedWork.stateNode;
		          "function" === typeof current.componentDidMount &&
		            runWithFiberInDEV(
		              finishedWork,
		              callComponentDidMountInDEV,
		              finishedWork,
		              current
		            );
		          current = finishedWork.updateQueue;
		          if (null !== current) {
		            finishedRoot = finishedWork.stateNode;
		            try {
		              runWithFiberInDEV(
		                finishedWork,
		                commitHiddenCallbacks,
		                current,
		                finishedRoot
		              );
		            } catch (error) {
		              captureCommitPhaseError(finishedWork, finishedWork.return, error);
		            }
		          }
		          includeWorkInProgressEffects &&
		            flags & 64 &&
		            commitClassCallbacks(finishedWork);
		          safelyAttachRef(finishedWork, finishedWork.return);
		          break;
		        case 26:
		        case 27:
		        case 5:
		          recursivelyTraverseReappearLayoutEffects(
		            finishedRoot,
		            finishedWork,
		            includeWorkInProgressEffects
		          );
		          includeWorkInProgressEffects &&
		            null === current &&
		            flags & 4 &&
		            commitHostMount(finishedWork);
		          safelyAttachRef(finishedWork, finishedWork.return);
		          break;
		        case 12:
		          if (includeWorkInProgressEffects && flags & 4) {
		            flags = pushNestedEffectDurations();
		            recursivelyTraverseReappearLayoutEffects(
		              finishedRoot,
		              finishedWork,
		              includeWorkInProgressEffects
		            );
		            includeWorkInProgressEffects = finishedWork.stateNode;
		            includeWorkInProgressEffects.effectDuration +=
		              bubbleNestedEffectDurations(flags);
		            try {
		              runWithFiberInDEV(
		                finishedWork,
		                commitProfiler,
		                finishedWork,
		                current,
		                commitStartTime,
		                includeWorkInProgressEffects.effectDuration
		              );
		            } catch (error) {
		              captureCommitPhaseError(finishedWork, finishedWork.return, error);
		            }
		          } else
		            recursivelyTraverseReappearLayoutEffects(
		              finishedRoot,
		              finishedWork,
		              includeWorkInProgressEffects
		            );
		          break;
		        case 13:
		          recursivelyTraverseReappearLayoutEffects(
		            finishedRoot,
		            finishedWork,
		            includeWorkInProgressEffects
		          );
		          includeWorkInProgressEffects &&
		            flags & 4 &&
		            commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
		          break;
		        case 22:
		          null === finishedWork.memoizedState &&
		            recursivelyTraverseReappearLayoutEffects(
		              finishedRoot,
		              finishedWork,
		              includeWorkInProgressEffects
		            );
		          safelyAttachRef(finishedWork, finishedWork.return);
		          break;
		        default:
		          recursivelyTraverseReappearLayoutEffects(
		            finishedRoot,
		            finishedWork,
		            includeWorkInProgressEffects
		          );
		      }
		    }
		    function recursivelyTraverseReappearLayoutEffects(
		      finishedRoot,
		      parentFiber,
		      includeWorkInProgressEffects
		    ) {
		      includeWorkInProgressEffects =
		        includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
		      for (parentFiber = parentFiber.child; null !== parentFiber; )
		        reappearLayoutEffects(
		          finishedRoot,
		          parentFiber.alternate,
		          parentFiber,
		          includeWorkInProgressEffects
		        ),
		          (parentFiber = parentFiber.sibling);
		    }
		    function commitOffscreenPassiveMountEffects(current, finishedWork) {
		      var previousCache = null;
		      null !== current &&
		        null !== current.memoizedState &&
		        null !== current.memoizedState.cachePool &&
		        (previousCache = current.memoizedState.cachePool.pool);
		      current = null;
		      null !== finishedWork.memoizedState &&
		        null !== finishedWork.memoizedState.cachePool &&
		        (current = finishedWork.memoizedState.cachePool.pool);
		      current !== previousCache &&
		        (null != current && retainCache(current),
		        null != previousCache && releaseCache(previousCache));
		    }
		    function commitCachePassiveMountEffect(current, finishedWork) {
		      current = null;
		      null !== finishedWork.alternate &&
		        (current = finishedWork.alternate.memoizedState.cache);
		      finishedWork = finishedWork.memoizedState.cache;
		      finishedWork !== current &&
		        (retainCache(finishedWork), null != current && releaseCache(current));
		    }
		    function recursivelyTraversePassiveMountEffects(
		      root,
		      parentFiber,
		      committedLanes,
		      committedTransitions
		    ) {
		      if (parentFiber.subtreeFlags & 10256)
		        for (parentFiber = parentFiber.child; null !== parentFiber; )
		          commitPassiveMountOnFiber(
		            root,
		            parentFiber,
		            committedLanes,
		            committedTransitions
		          ),
		            (parentFiber = parentFiber.sibling);
		    }
		    function commitPassiveMountOnFiber(
		      finishedRoot,
		      finishedWork,
		      committedLanes,
		      committedTransitions
		    ) {
		      var flags = finishedWork.flags;
		      switch (finishedWork.tag) {
		        case 0:
		        case 11:
		        case 15:
		          recursivelyTraversePassiveMountEffects(
		            finishedRoot,
		            finishedWork,
		            committedLanes,
		            committedTransitions
		          );
		          flags & 2048 &&
		            commitHookPassiveMountEffects(finishedWork, Passive | HasEffect);
		          break;
		        case 3:
		          var prevEffectDuration = pushNestedEffectDurations();
		          recursivelyTraversePassiveMountEffects(
		            finishedRoot,
		            finishedWork,
		            committedLanes,
		            committedTransitions
		          );
		          flags & 2048 &&
		            ((committedLanes = null),
		            null !== finishedWork.alternate &&
		              (committedLanes = finishedWork.alternate.memoizedState.cache),
		            (finishedWork = finishedWork.memoizedState.cache),
		            finishedWork !== committedLanes &&
		              (retainCache(finishedWork),
		              null != committedLanes && releaseCache(committedLanes)));
		          finishedRoot.passiveEffectDuration +=
		            popNestedEffectDurations(prevEffectDuration);
		          break;
		        case 12:
		          if (flags & 2048) {
		            prevEffectDuration = pushNestedEffectDurations();
		            recursivelyTraversePassiveMountEffects(
		              finishedRoot,
		              finishedWork,
		              committedLanes,
		              committedTransitions
		            );
		            finishedRoot = finishedWork.stateNode;
		            finishedRoot.passiveEffectDuration +=
		              bubbleNestedEffectDurations(prevEffectDuration);
		            try {
		              runWithFiberInDEV(
		                finishedWork,
		                commitProfilerPostCommitImpl,
		                finishedWork,
		                finishedWork.alternate,
		                commitStartTime,
		                finishedRoot.passiveEffectDuration
		              );
		            } catch (error) {
		              captureCommitPhaseError(finishedWork, finishedWork.return, error);
		            }
		          } else
		            recursivelyTraversePassiveMountEffects(
		              finishedRoot,
		              finishedWork,
		              committedLanes,
		              committedTransitions
		            );
		          break;
		        case 23:
		          break;
		        case 22:
		          prevEffectDuration = finishedWork.stateNode;
		          null !== finishedWork.memoizedState
		            ? prevEffectDuration._visibility & 4
		              ? recursivelyTraversePassiveMountEffects(
		                  finishedRoot,
		                  finishedWork,
		                  committedLanes,
		                  committedTransitions
		                )
		              : recursivelyTraverseAtomicPassiveEffects(
		                  finishedRoot,
		                  finishedWork
		                )
		            : prevEffectDuration._visibility & 4
		              ? recursivelyTraversePassiveMountEffects(
		                  finishedRoot,
		                  finishedWork,
		                  committedLanes,
		                  committedTransitions
		                )
		              : ((prevEffectDuration._visibility |= 4),
		                recursivelyTraverseReconnectPassiveEffects(
		                  finishedRoot,
		                  finishedWork,
		                  committedLanes,
		                  committedTransitions,
		                  0 !== (finishedWork.subtreeFlags & 10256)
		                ));
		          flags & 2048 &&
		            commitOffscreenPassiveMountEffects(
		              finishedWork.alternate,
		              finishedWork
		            );
		          break;
		        case 24:
		          recursivelyTraversePassiveMountEffects(
		            finishedRoot,
		            finishedWork,
		            committedLanes,
		            committedTransitions
		          );
		          flags & 2048 &&
		            commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
		          break;
		        default:
		          recursivelyTraversePassiveMountEffects(
		            finishedRoot,
		            finishedWork,
		            committedLanes,
		            committedTransitions
		          );
		      }
		    }
		    function recursivelyTraverseReconnectPassiveEffects(
		      finishedRoot,
		      parentFiber,
		      committedLanes,
		      committedTransitions,
		      includeWorkInProgressEffects
		    ) {
		      includeWorkInProgressEffects =
		        includeWorkInProgressEffects &&
		        0 !== (parentFiber.subtreeFlags & 10256);
		      for (parentFiber = parentFiber.child; null !== parentFiber; )
		        reconnectPassiveEffects(
		          finishedRoot,
		          parentFiber,
		          committedLanes,
		          committedTransitions,
		          includeWorkInProgressEffects
		        ),
		          (parentFiber = parentFiber.sibling);
		    }
		    function reconnectPassiveEffects(
		      finishedRoot,
		      finishedWork,
		      committedLanes,
		      committedTransitions,
		      includeWorkInProgressEffects
		    ) {
		      var flags = finishedWork.flags;
		      switch (finishedWork.tag) {
		        case 0:
		        case 11:
		        case 15:
		          recursivelyTraverseReconnectPassiveEffects(
		            finishedRoot,
		            finishedWork,
		            committedLanes,
		            committedTransitions,
		            includeWorkInProgressEffects
		          );
		          commitHookPassiveMountEffects(finishedWork, Passive);
		          break;
		        case 23:
		          break;
		        case 22:
		          var _instance2 = finishedWork.stateNode;
		          null !== finishedWork.memoizedState
		            ? _instance2._visibility & 4
		              ? recursivelyTraverseReconnectPassiveEffects(
		                  finishedRoot,
		                  finishedWork,
		                  committedLanes,
		                  committedTransitions,
		                  includeWorkInProgressEffects
		                )
		              : recursivelyTraverseAtomicPassiveEffects(
		                  finishedRoot,
		                  finishedWork
		                )
		            : ((_instance2._visibility |= 4),
		              recursivelyTraverseReconnectPassiveEffects(
		                finishedRoot,
		                finishedWork,
		                committedLanes,
		                committedTransitions,
		                includeWorkInProgressEffects
		              ));
		          includeWorkInProgressEffects &&
		            flags & 2048 &&
		            commitOffscreenPassiveMountEffects(
		              finishedWork.alternate,
		              finishedWork
		            );
		          break;
		        case 24:
		          recursivelyTraverseReconnectPassiveEffects(
		            finishedRoot,
		            finishedWork,
		            committedLanes,
		            committedTransitions,
		            includeWorkInProgressEffects
		          );
		          includeWorkInProgressEffects &&
		            flags & 2048 &&
		            commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
		          break;
		        default:
		          recursivelyTraverseReconnectPassiveEffects(
		            finishedRoot,
		            finishedWork,
		            committedLanes,
		            committedTransitions,
		            includeWorkInProgressEffects
		          );
		      }
		    }
		    function recursivelyTraverseAtomicPassiveEffects(
		      finishedRoot$jscomp$0,
		      parentFiber
		    ) {
		      if (parentFiber.subtreeFlags & 10256)
		        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
		          var finishedRoot = finishedRoot$jscomp$0,
		            finishedWork = parentFiber,
		            flags = finishedWork.flags;
		          switch (finishedWork.tag) {
		            case 22:
		              recursivelyTraverseAtomicPassiveEffects(
		                finishedRoot,
		                finishedWork
		              );
		              flags & 2048 &&
		                commitOffscreenPassiveMountEffects(
		                  finishedWork.alternate,
		                  finishedWork
		                );
		              break;
		            case 24:
		              recursivelyTraverseAtomicPassiveEffects(
		                finishedRoot,
		                finishedWork
		              );
		              flags & 2048 &&
		                commitCachePassiveMountEffect(
		                  finishedWork.alternate,
		                  finishedWork
		                );
		              break;
		            default:
		              recursivelyTraverseAtomicPassiveEffects(
		                finishedRoot,
		                finishedWork
		              );
		          }
		          parentFiber = parentFiber.sibling;
		        }
		    }
		    function recursivelyAccumulateSuspenseyCommit(parentFiber) {
		      if (parentFiber.subtreeFlags & suspenseyCommitFlag)
		        for (parentFiber = parentFiber.child; null !== parentFiber; )
		          accumulateSuspenseyCommitOnFiber(parentFiber),
		            (parentFiber = parentFiber.sibling);
		    }
		    function accumulateSuspenseyCommitOnFiber(fiber) {
		      switch (fiber.tag) {
		        case 26:
		          recursivelyAccumulateSuspenseyCommit(fiber);
		          fiber.flags & suspenseyCommitFlag &&
		            (null !== fiber.memoizedState
		              ? suspendResource(
		                  currentHoistableRoot,
		                  fiber.memoizedState,
		                  fiber.memoizedProps
		                )
		              : suspendInstance(fiber.type, fiber.memoizedProps));
		          break;
		        case 5:
		          recursivelyAccumulateSuspenseyCommit(fiber);
		          fiber.flags & suspenseyCommitFlag &&
		            suspendInstance(fiber.type, fiber.memoizedProps);
		          break;
		        case 3:
		        case 4:
		          if (supportsResources) {
		            var previousHoistableRoot = currentHoistableRoot;
		            currentHoistableRoot = getHoistableRoot(
		              fiber.stateNode.containerInfo
		            );
		            recursivelyAccumulateSuspenseyCommit(fiber);
		            currentHoistableRoot = previousHoistableRoot;
		          } else recursivelyAccumulateSuspenseyCommit(fiber);
		          break;
		        case 22:
		          null === fiber.memoizedState &&
		            ((previousHoistableRoot = fiber.alternate),
		            null !== previousHoistableRoot &&
		            null !== previousHoistableRoot.memoizedState
		              ? ((previousHoistableRoot = suspenseyCommitFlag),
		                (suspenseyCommitFlag = 16777216),
		                recursivelyAccumulateSuspenseyCommit(fiber),
		                (suspenseyCommitFlag = previousHoistableRoot))
		              : recursivelyAccumulateSuspenseyCommit(fiber));
		          break;
		        default:
		          recursivelyAccumulateSuspenseyCommit(fiber);
		      }
		    }
		    function detachAlternateSiblings(parentFiber) {
		      var previousFiber = parentFiber.alternate;
		      if (
		        null !== previousFiber &&
		        ((parentFiber = previousFiber.child), null !== parentFiber)
		      ) {
		        previousFiber.child = null;
		        do
		          (previousFiber = parentFiber.sibling),
		            (parentFiber.sibling = null),
		            (parentFiber = previousFiber);
		        while (null !== parentFiber);
		      }
		    }
		    function recursivelyTraversePassiveUnmountEffects(parentFiber) {
		      var deletions = parentFiber.deletions;
		      if (0 !== (parentFiber.flags & 16)) {
		        if (null !== deletions)
		          for (var i = 0; i < deletions.length; i++) {
		            var childToDelete = deletions[i];
		            nextEffect = childToDelete;
		            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
		              childToDelete,
		              parentFiber
		            );
		          }
		        detachAlternateSiblings(parentFiber);
		      }
		      if (parentFiber.subtreeFlags & 10256)
		        for (parentFiber = parentFiber.child; null !== parentFiber; )
		          commitPassiveUnmountOnFiber(parentFiber),
		            (parentFiber = parentFiber.sibling);
		    }
		    function commitPassiveUnmountOnFiber(finishedWork) {
		      switch (finishedWork.tag) {
		        case 0:
		        case 11:
		        case 15:
		          recursivelyTraversePassiveUnmountEffects(finishedWork);
		          finishedWork.flags & 2048 &&
		            commitHookPassiveUnmountEffects(
		              finishedWork,
		              finishedWork.return,
		              Passive | HasEffect
		            );
		          break;
		        case 3:
		          var prevEffectDuration = pushNestedEffectDurations();
		          recursivelyTraversePassiveUnmountEffects(finishedWork);
		          finishedWork.stateNode.passiveEffectDuration +=
		            popNestedEffectDurations(prevEffectDuration);
		          break;
		        case 12:
		          prevEffectDuration = pushNestedEffectDurations();
		          recursivelyTraversePassiveUnmountEffects(finishedWork);
		          finishedWork.stateNode.passiveEffectDuration +=
		            bubbleNestedEffectDurations(prevEffectDuration);
		          break;
		        case 22:
		          prevEffectDuration = finishedWork.stateNode;
		          null !== finishedWork.memoizedState &&
		          prevEffectDuration._visibility & 4 &&
		          (null === finishedWork.return || 13 !== finishedWork.return.tag)
		            ? ((prevEffectDuration._visibility &= -5),
		              recursivelyTraverseDisconnectPassiveEffects(finishedWork))
		            : recursivelyTraversePassiveUnmountEffects(finishedWork);
		          break;
		        default:
		          recursivelyTraversePassiveUnmountEffects(finishedWork);
		      }
		    }
		    function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
		      var deletions = parentFiber.deletions;
		      if (0 !== (parentFiber.flags & 16)) {
		        if (null !== deletions)
		          for (var i = 0; i < deletions.length; i++) {
		            var childToDelete = deletions[i];
		            nextEffect = childToDelete;
		            commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
		              childToDelete,
		              parentFiber
		            );
		          }
		        detachAlternateSiblings(parentFiber);
		      }
		      for (parentFiber = parentFiber.child; null !== parentFiber; )
		        disconnectPassiveEffect(parentFiber),
		          (parentFiber = parentFiber.sibling);
		    }
		    function disconnectPassiveEffect(finishedWork) {
		      switch (finishedWork.tag) {
		        case 0:
		        case 11:
		        case 15:
		          commitHookPassiveUnmountEffects(
		            finishedWork,
		            finishedWork.return,
		            Passive
		          );
		          recursivelyTraverseDisconnectPassiveEffects(finishedWork);
		          break;
		        case 22:
		          var instance = finishedWork.stateNode;
		          instance._visibility & 4 &&
		            ((instance._visibility &= -5),
		            recursivelyTraverseDisconnectPassiveEffects(finishedWork));
		          break;
		        default:
		          recursivelyTraverseDisconnectPassiveEffects(finishedWork);
		      }
		    }
		    function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
		      deletedSubtreeRoot,
		      nearestMountedAncestor
		    ) {
		      for (; null !== nextEffect; ) {
		        var fiber = nextEffect,
		          current = fiber;
		        switch (current.tag) {
		          case 0:
		          case 11:
		          case 15:
		            commitHookPassiveUnmountEffects(
		              current,
		              nearestMountedAncestor,
		              Passive
		            );
		            break;
		          case 23:
		          case 22:
		            null !== current.memoizedState &&
		              null !== current.memoizedState.cachePool &&
		              ((current = current.memoizedState.cachePool.pool),
		              null != current && retainCache(current));
		            break;
		          case 24:
		            releaseCache(current.memoizedState.cache);
		        }
		        current = fiber.child;
		        if (null !== current) (current.return = fiber), (nextEffect = current);
		        else
		          a: for (fiber = deletedSubtreeRoot; null !== nextEffect; ) {
		            current = nextEffect;
		            var sibling = current.sibling,
		              returnFiber = current.return;
		            detachFiberAfterEffects(current);
		            if (current === fiber) {
		              nextEffect = null;
		              break a;
		            }
		            if (null !== sibling) {
		              sibling.return = returnFiber;
		              nextEffect = sibling;
		              break a;
		            }
		            nextEffect = returnFiber;
		          }
		      }
		    }
		    function findFiberRootForHostRoot(hostRoot) {
		      var maybeFiber = getInstanceFromNode(hostRoot);
		      if (null != maybeFiber) {
		        if ("string" !== typeof maybeFiber.memoizedProps["data-testname"])
		          throw Error(
		            "Invalid host root specified. Should be either a React container or a node with a testname attribute."
		          );
		        return maybeFiber;
		      }
		      hostRoot = findFiberRoot(hostRoot);
		      if (null === hostRoot)
		        throw Error(
		          "Could not find React container within specified host subtree."
		        );
		      return hostRoot.stateNode.current;
		    }
		    function matchSelector(fiber$jscomp$0, selector) {
		      var tag = fiber$jscomp$0.tag;
		      switch (selector.$$typeof) {
		        case COMPONENT_TYPE:
		          if (fiber$jscomp$0.type === selector.value) return !0;
		          break;
		        case HAS_PSEUDO_CLASS_TYPE:
		          a: {
		            selector = selector.value;
		            fiber$jscomp$0 = [fiber$jscomp$0, 0];
		            for (tag = 0; tag < fiber$jscomp$0.length; ) {
		              var fiber = fiber$jscomp$0[tag++],
		                tag$jscomp$0 = fiber.tag,
		                selectorIndex = fiber$jscomp$0[tag++],
		                selector$jscomp$0 = selector[selectorIndex];
		              if (
		                (5 !== tag$jscomp$0 &&
		                  26 !== tag$jscomp$0 &&
		                  27 !== tag$jscomp$0) ||
		                !isHiddenSubtree(fiber)
		              ) {
		                for (
		                  ;
		                  null != selector$jscomp$0 &&
		                  matchSelector(fiber, selector$jscomp$0);

		                )
		                  selectorIndex++,
		                    (selector$jscomp$0 = selector[selectorIndex]);
		                if (selectorIndex === selector.length) {
		                  selector = !0;
		                  break a;
		                } else
		                  for (fiber = fiber.child; null !== fiber; )
		                    fiber$jscomp$0.push(fiber, selectorIndex),
		                      (fiber = fiber.sibling);
		              }
		            }
		            selector = !1;
		          }
		          return selector;
		        case ROLE_TYPE:
		          if (
		            (5 === tag || 26 === tag || 27 === tag) &&
		            matchAccessibilityRole(fiber$jscomp$0.stateNode, selector.value)
		          )
		            return !0;
		          break;
		        case TEXT_TYPE:
		          if (5 === tag || 6 === tag || 26 === tag || 27 === tag)
		            if (
		              ((fiber$jscomp$0 = getTextContent(fiber$jscomp$0)),
		              null !== fiber$jscomp$0 &&
		                0 <= fiber$jscomp$0.indexOf(selector.value))
		            )
		              return !0;
		          break;
		        case TEST_NAME_TYPE:
		          if (5 === tag || 26 === tag || 27 === tag)
		            if (
		              ((fiber$jscomp$0 = fiber$jscomp$0.memoizedProps["data-testname"]),
		              "string" === typeof fiber$jscomp$0 &&
		                fiber$jscomp$0.toLowerCase() === selector.value.toLowerCase())
		            )
		              return !0;
		          break;
		        default:
		          throw Error("Invalid selector type specified.");
		      }
		      return !1;
		    }
		    function selectorToString(selector) {
		      switch (selector.$$typeof) {
		        case COMPONENT_TYPE:
		          return (
		            "<" + (getComponentNameFromType(selector.value) || "Unknown") + ">"
		          );
		        case HAS_PSEUDO_CLASS_TYPE:
		          return ":has(" + (selectorToString(selector) || "") + ")";
		        case ROLE_TYPE:
		          return '[role="' + selector.value + '"]';
		        case TEXT_TYPE:
		          return '"' + selector.value + '"';
		        case TEST_NAME_TYPE:
		          return '[data-testname="' + selector.value + '"]';
		        default:
		          throw Error("Invalid selector type specified.");
		      }
		    }
		    function findPaths(root, selectors) {
		      var matchingFibers = [];
		      root = [root, 0];
		      for (var index = 0; index < root.length; ) {
		        var fiber = root[index++],
		          tag = fiber.tag,
		          selectorIndex = root[index++],
		          selector = selectors[selectorIndex];
		        if (
		          (5 !== tag && 26 !== tag && 27 !== tag) ||
		          !isHiddenSubtree(fiber)
		        ) {
		          for (; null != selector && matchSelector(fiber, selector); )
		            selectorIndex++, (selector = selectors[selectorIndex]);
		          if (selectorIndex === selectors.length) matchingFibers.push(fiber);
		          else
		            for (fiber = fiber.child; null !== fiber; )
		              root.push(fiber, selectorIndex), (fiber = fiber.sibling);
		        }
		      }
		      return matchingFibers;
		    }
		    function findAllNodes(hostRoot, selectors) {
		      if (!supportsTestSelectors)
		        throw Error("Test selector API is not supported by this renderer.");
		      hostRoot = findFiberRootForHostRoot(hostRoot);
		      hostRoot = findPaths(hostRoot, selectors);
		      selectors = [];
		      hostRoot = Array.from(hostRoot);
		      for (var index = 0; index < hostRoot.length; ) {
		        var node = hostRoot[index++],
		          tag = node.tag;
		        if (5 === tag || 26 === tag || 27 === tag)
		          isHiddenSubtree(node) || selectors.push(node.stateNode);
		        else
		          for (node = node.child; null !== node; )
		            hostRoot.push(node), (node = node.sibling);
		      }
		      return selectors;
		    }
		    function onCommitRoot() {
		      supportsTestSelectors &&
		        commitHooks.forEach(function (commitHook) {
		          return commitHook();
		        });
		    }
		    function isConcurrentActEnvironment() {
		      var isReactActEnvironmentGlobal =
		        "undefined" !== typeof IS_REACT_ACT_ENVIRONMENT
		          ? IS_REACT_ACT_ENVIRONMENT
		          : void 0;
		      isReactActEnvironmentGlobal ||
		        null === ReactSharedInternals.actQueue ||
		        console.error(
		          "The current testing environment is not configured to support act(...)"
		        );
		      return isReactActEnvironmentGlobal;
		    }
		    function requestUpdateLane(fiber) {
		      if (
		        (executionContext & RenderContext) !== NoContext &&
		        0 !== workInProgressRootRenderLanes
		      )
		        return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
		      var transition = ReactSharedInternals.T;
		      return null !== transition
		        ? (transition._updatedFibers || (transition._updatedFibers = new Set()),
		          transition._updatedFibers.add(fiber),
		          (fiber = currentEntangledLane),
		          0 !== fiber ? fiber : requestTransitionLane())
		        : resolveUpdatePriority();
		    }
		    function requestDeferredLane() {
		      0 === workInProgressDeferredLane &&
		        (workInProgressDeferredLane =
		          0 === (workInProgressRootRenderLanes & 536870912) || isHydrating
		            ? claimNextTransitionLane()
		            : 536870912);
		      var suspenseHandler = suspenseHandlerStackCursor.current;
		      null !== suspenseHandler && (suspenseHandler.flags |= 32);
		      return workInProgressDeferredLane;
		    }
		    function scheduleUpdateOnFiber(root, fiber, lane) {
		      isRunningInsertionEffect &&
		        console.error("useInsertionEffect must not schedule updates.");
		      isFlushingPassiveEffects && (didScheduleUpdateDuringPassiveEffects = !0);
		      if (
		        (root === workInProgressRoot &&
		          workInProgressSuspendedReason === SuspendedOnData) ||
		        null !== root.cancelPendingCommit
		      )
		        prepareFreshStack(root, 0),
		          markRootSuspended(
		            root,
		            workInProgressRootRenderLanes,
		            workInProgressDeferredLane,
		            !1
		          );
		      markRootUpdated$1(root, lane);
		      if (
		        0 !== (executionContext & RenderContext) &&
		        root === workInProgressRoot
		      ) {
		        if (isRendering)
		          switch (fiber.tag) {
		            case 0:
		            case 11:
		            case 15:
		              root =
		                (workInProgress && getComponentNameFromFiber(workInProgress)) ||
		                "Unknown";
		              didWarnAboutUpdateInRenderForAnotherComponent.has(root) ||
		                (didWarnAboutUpdateInRenderForAnotherComponent.add(root),
		                (fiber = getComponentNameFromFiber(fiber) || "Unknown"),
		                console.error(
		                  "Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://react.dev/link/setstate-in-render",
		                  fiber,
		                  root,
		                  root
		                ));
		              break;
		            case 1:
		              didWarnAboutUpdateInRender ||
		                (console.error(
		                  "Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state."
		                ),
		                (didWarnAboutUpdateInRender = !0));
		          }
		      } else
		        isDevToolsPresent && addFiberToLanesMap(root, fiber, lane),
		          warnIfUpdatesNotWrappedWithActDEV(fiber),
		          root === workInProgressRoot &&
		            ((executionContext & RenderContext) === NoContext &&
		              (workInProgressRootInterleavedUpdatedLanes |= lane),
		            workInProgressRootExitStatus === RootSuspendedWithDelay &&
		              markRootSuspended(
		                root,
		                workInProgressRootRenderLanes,
		                workInProgressDeferredLane,
		                !1
		              )),
		          ensureRootIsScheduled(root);
		    }
		    function performWorkOnRoot(root, lanes, forceSync) {
		      if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
		        throw Error("Should not already be working.");
		      var shouldTimeSlice =
		          (!forceSync &&
		            0 === (lanes & 60) &&
		            0 === (lanes & root.expiredLanes)) ||
		          checkIfRootIsPrerendering(root, lanes),
		        exitStatus = shouldTimeSlice
		          ? renderRootConcurrent(root, lanes)
		          : renderRootSync(root, lanes, !0),
		        renderWasConcurrent = shouldTimeSlice;
		      do {
		        if (exitStatus === RootInProgress) {
		          workInProgressRootIsPrerendering &&
		            !shouldTimeSlice &&
		            markRootSuspended(root, lanes, 0, !1);
		          break;
		        } else if (exitStatus === RootDidNotComplete)
		          markRootSuspended(
		            root,
		            lanes,
		            0,
		            !workInProgressRootDidSkipSuspendedSiblings
		          );
		        else {
		          forceSync = root.current.alternate;
		          if (
		            renderWasConcurrent &&
		            !isRenderConsistentWithExternalStores(forceSync)
		          ) {
		            exitStatus = renderRootSync(root, lanes, !1);
		            renderWasConcurrent = !1;
		            continue;
		          }
		          if (exitStatus === RootErrored) {
		            renderWasConcurrent = lanes;
		            if (root.errorRecoveryDisabledLanes & renderWasConcurrent)
		              var errorRetryLanes = 0;
		            else
		              (errorRetryLanes = root.pendingLanes & -536870913),
		                (errorRetryLanes =
		                  0 !== errorRetryLanes
		                    ? errorRetryLanes
		                    : errorRetryLanes & 536870912
		                      ? 536870912
		                      : 0);
		            if (0 !== errorRetryLanes) {
		              lanes = errorRetryLanes;
		              a: {
		                exitStatus = root;
		                var errorRetryLanes$jscomp$0 = errorRetryLanes;
		                errorRetryLanes = workInProgressRootConcurrentErrors;
		                var wasRootDehydrated =
		                  supportsHydration &&
		                  exitStatus.current.memoizedState.isDehydrated;
		                wasRootDehydrated &&
		                  (prepareFreshStack(
		                    exitStatus,
		                    errorRetryLanes$jscomp$0
		                  ).flags |= 256);
		                errorRetryLanes$jscomp$0 = renderRootSync(
		                  exitStatus,
		                  errorRetryLanes$jscomp$0,
		                  !1
		                );
		                if (errorRetryLanes$jscomp$0 !== RootErrored) {
		                  if (
		                    workInProgressRootDidAttachPingListener &&
		                    !wasRootDehydrated
		                  ) {
		                    exitStatus.errorRecoveryDisabledLanes |=
		                      renderWasConcurrent;
		                    workInProgressRootInterleavedUpdatedLanes |=
		                      renderWasConcurrent;
		                    exitStatus = RootSuspendedWithDelay;
		                    break a;
		                  }
		                  exitStatus = workInProgressRootRecoverableErrors;
		                  workInProgressRootRecoverableErrors = errorRetryLanes;
		                  null !== exitStatus && queueRecoverableErrors(exitStatus);
		                }
		                exitStatus = errorRetryLanes$jscomp$0;
		              }
		              renderWasConcurrent = !1;
		              if (exitStatus !== RootErrored) continue;
		            }
		          }
		          if (exitStatus === RootFatalErrored) {
		            prepareFreshStack(root, 0);
		            markRootSuspended(root, lanes, 0, !0);
		            break;
		          }
		          a: {
		            shouldTimeSlice = root;
		            switch (exitStatus) {
		              case RootInProgress:
		              case RootFatalErrored:
		                throw Error("Root did not complete. This is a bug in React.");
		              case RootSuspendedWithDelay:
		                if ((lanes & 4194176) === lanes) {
		                  markRootSuspended(
		                    shouldTimeSlice,
		                    lanes,
		                    workInProgressDeferredLane,
		                    !workInProgressRootDidSkipSuspendedSiblings
		                  );
		                  break a;
		                }
		                break;
		              case RootErrored:
		                workInProgressRootRecoverableErrors = null;
		                break;
		              case RootSuspended:
		              case RootCompleted:
		                break;
		              default:
		                throw Error("Unknown root exit status.");
		            }
		            shouldTimeSlice.finishedWork = forceSync;
		            shouldTimeSlice.finishedLanes = lanes;
		            if (null !== ReactSharedInternals.actQueue)
		              commitRoot(
		                shouldTimeSlice,
		                workInProgressRootRecoverableErrors,
		                workInProgressTransitions,
		                workInProgressRootDidIncludeRecursiveRenderUpdate,
		                workInProgressDeferredLane,
		                workInProgressRootInterleavedUpdatedLanes,
		                workInProgressSuspendedRetryLanes,
		                IMMEDIATE_COMMIT,
		                -0,
		                0
		              );
		            else {
		              if (
		                (lanes & 62914560) === lanes &&
		                ((exitStatus =
		                  globalMostRecentFallbackTime +
		                  FALLBACK_THROTTLE_MS -
		                  now$1()),
		                10 < exitStatus)
		              ) {
		                markRootSuspended(
		                  shouldTimeSlice,
		                  lanes,
		                  workInProgressDeferredLane,
		                  !workInProgressRootDidSkipSuspendedSiblings
		                );
		                if (0 !== getNextLanes(shouldTimeSlice, 0)) break a;
		                shouldTimeSlice.timeoutHandle = scheduleTimeout(
		                  commitRootWhenReady.bind(
		                    null,
		                    shouldTimeSlice,
		                    forceSync,
		                    workInProgressRootRecoverableErrors,
		                    workInProgressTransitions,
		                    workInProgressRootDidIncludeRecursiveRenderUpdate,
		                    lanes,
		                    workInProgressDeferredLane,
		                    workInProgressRootInterleavedUpdatedLanes,
		                    workInProgressSuspendedRetryLanes,
		                    workInProgressRootDidSkipSuspendedSiblings,
		                    THROTTLED_COMMIT,
		                    -0,
		                    0
		                  ),
		                  exitStatus
		                );
		                break a;
		              }
		              commitRootWhenReady(
		                shouldTimeSlice,
		                forceSync,
		                workInProgressRootRecoverableErrors,
		                workInProgressTransitions,
		                workInProgressRootDidIncludeRecursiveRenderUpdate,
		                lanes,
		                workInProgressDeferredLane,
		                workInProgressRootInterleavedUpdatedLanes,
		                workInProgressSuspendedRetryLanes,
		                workInProgressRootDidSkipSuspendedSiblings,
		                IMMEDIATE_COMMIT,
		                -0,
		                0
		              );
		            }
		          }
		        }
		        break;
		      } while (1);
		      ensureRootIsScheduled(root);
		    }
		    function queueRecoverableErrors(errors) {
		      null === workInProgressRootRecoverableErrors
		        ? (workInProgressRootRecoverableErrors = errors)
		        : workInProgressRootRecoverableErrors.push.apply(
		            workInProgressRootRecoverableErrors,
		            errors
		          );
		    }
		    function commitRootWhenReady(
		      root,
		      finishedWork,
		      recoverableErrors,
		      transitions,
		      didIncludeRenderPhaseUpdate,
		      lanes,
		      spawnedLane,
		      updatedLanes,
		      suspendedRetryLanes,
		      didSkipSuspendedSiblings,
		      suspendedCommitReason,
		      completedRenderStartTime,
		      completedRenderEndTime
		    ) {
		      var subtreeFlags = finishedWork.subtreeFlags;
		      if (subtreeFlags & 8192 || 16785408 === (subtreeFlags & 16785408))
		        if (
		          (startSuspendingCommit(),
		          accumulateSuspenseyCommitOnFiber(finishedWork),
		          (finishedWork = waitForCommitToBeReady()),
		          null !== finishedWork)
		        ) {
		          root.cancelPendingCommit = finishedWork(
		            commitRoot.bind(
		              null,
		              root,
		              recoverableErrors,
		              transitions,
		              didIncludeRenderPhaseUpdate,
		              spawnedLane,
		              updatedLanes,
		              suspendedRetryLanes,
		              SUSPENDED_COMMIT,
		              completedRenderStartTime,
		              completedRenderEndTime
		            )
		          );
		          markRootSuspended(
		            root,
		            lanes,
		            spawnedLane,
		            !didSkipSuspendedSiblings
		          );
		          return;
		        }
		      commitRoot(
		        root,
		        recoverableErrors,
		        transitions,
		        didIncludeRenderPhaseUpdate,
		        spawnedLane,
		        updatedLanes,
		        suspendedRetryLanes,
		        suspendedCommitReason,
		        completedRenderStartTime,
		        completedRenderEndTime
		      );
		    }
		    function isRenderConsistentWithExternalStores(finishedWork) {
		      for (var node = finishedWork; ; ) {
		        var tag = node.tag;
		        if (
		          (0 === tag || 11 === tag || 15 === tag) &&
		          node.flags & 16384 &&
		          ((tag = node.updateQueue),
		          null !== tag && ((tag = tag.stores), null !== tag))
		        )
		          for (var i = 0; i < tag.length; i++) {
		            var check = tag[i],
		              getSnapshot = check.getSnapshot;
		            check = check.value;
		            try {
		              if (!objectIs(getSnapshot(), check)) return !1;
		            } catch (error) {
		              return !1;
		            }
		          }
		        tag = node.child;
		        if (node.subtreeFlags & 16384 && null !== tag)
		          (tag.return = node), (node = tag);
		        else {
		          if (node === finishedWork) break;
		          for (; null === node.sibling; ) {
		            if (null === node.return || node.return === finishedWork) return !0;
		            node = node.return;
		          }
		          node.sibling.return = node.return;
		          node = node.sibling;
		        }
		      }
		      return !0;
		    }
		    function markRootSuspended(
		      root,
		      suspendedLanes,
		      spawnedLane,
		      didAttemptEntireTree
		    ) {
		      suspendedLanes &= ~workInProgressRootPingedLanes;
		      suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
		      root.suspendedLanes |= suspendedLanes;
		      root.pingedLanes &= ~suspendedLanes;
		      didAttemptEntireTree && (root.warmLanes |= suspendedLanes);
		      didAttemptEntireTree = root.expirationTimes;
		      for (var lanes = suspendedLanes; 0 < lanes; ) {
		        var index = 31 - clz32(lanes),
		          lane = 1 << index;
		        didAttemptEntireTree[index] = -1;
		        lanes &= ~lane;
		      }
		      0 !== spawnedLane &&
		        markSpawnedDeferredLane(root, spawnedLane, suspendedLanes);
		    }
		    function flushSyncWork() {
		      return (executionContext & (RenderContext | CommitContext)) === NoContext
		        ? (flushSyncWorkAcrossRoots_impl(0, !1), !1)
		        : !0;
		    }
		    function resetWorkInProgressStack() {
		      if (null !== workInProgress) {
		        if (workInProgressSuspendedReason === NotSuspended)
		          var interruptedWork = workInProgress.return;
		        else
		          (interruptedWork = workInProgress),
		            resetContextDependencies(),
		            resetHooksOnUnwind(interruptedWork),
		            (thenableState$1 = null),
		            (thenableIndexCounter$1 = 0),
		            (interruptedWork = workInProgress);
		        for (; null !== interruptedWork; )
		          unwindInterruptedWork(interruptedWork.alternate, interruptedWork),
		            (interruptedWork = interruptedWork.return);
		        workInProgress = null;
		      }
		    }
		    function prepareFreshStack(root, lanes) {
		      root.finishedWork = null;
		      root.finishedLanes = 0;
		      var timeoutHandle = root.timeoutHandle;
		      timeoutHandle !== noTimeout &&
		        ((root.timeoutHandle = noTimeout), cancelTimeout(timeoutHandle));
		      timeoutHandle = root.cancelPendingCommit;
		      null !== timeoutHandle &&
		        ((root.cancelPendingCommit = null), timeoutHandle());
		      resetWorkInProgressStack();
		      workInProgressRoot = root;
		      workInProgress = timeoutHandle = createWorkInProgress(root.current, null);
		      workInProgressRootRenderLanes = lanes;
		      workInProgressSuspendedReason = NotSuspended;
		      workInProgressThrownValue = null;
		      workInProgressRootDidSkipSuspendedSiblings = !1;
		      workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root, lanes);
		      workInProgressRootDidAttachPingListener = !1;
		      workInProgressRootExitStatus = RootInProgress;
		      workInProgressSuspendedRetryLanes =
		        workInProgressDeferredLane =
		        workInProgressRootPingedLanes =
		        workInProgressRootInterleavedUpdatedLanes =
		        workInProgressRootSkippedLanes =
		          0;
		      workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors =
		        null;
		      workInProgressRootDidIncludeRecursiveRenderUpdate = !1;
		      0 !== (lanes & 8) && (lanes |= lanes & 32);
		      var allEntangledLanes = root.entangledLanes;
		      if (0 !== allEntangledLanes)
		        for (
		          root = root.entanglements, allEntangledLanes &= lanes;
		          0 < allEntangledLanes;

		        ) {
		          var index = 31 - clz32(allEntangledLanes),
		            lane = 1 << index;
		          lanes |= root[index];
		          allEntangledLanes &= ~lane;
		        }
		      entangledRenderLanes = lanes;
		      finishQueueingConcurrentUpdates();
		      ReactStrictModeWarnings.discardPendingWarnings();
		      return timeoutHandle;
		    }
		    function handleThrow(root, thrownValue) {
		      currentlyRenderingFiber$1 = null;
		      ReactSharedInternals.H = ContextOnlyDispatcher;
		      ReactSharedInternals.getCurrentStack = null;
		      isRendering = !1;
		      current = null;
		      thrownValue === SuspenseException
		        ? ((thrownValue = getSuspendedThenable()),
		          (workInProgressSuspendedReason = SuspendedOnImmediate))
		        : thrownValue === SuspenseyCommitException
		          ? ((thrownValue = getSuspendedThenable()),
		            (workInProgressSuspendedReason = SuspendedOnInstance))
		          : (workInProgressSuspendedReason =
		              thrownValue === SelectiveHydrationException
		                ? SuspendedOnHydration
		                : null !== thrownValue &&
		                    "object" === typeof thrownValue &&
		                    "function" === typeof thrownValue.then
		                  ? SuspendedOnDeprecatedThrowPromise
		                  : SuspendedOnError);
		      workInProgressThrownValue = thrownValue;
		      var erroredWork = workInProgress;
		      if (null === erroredWork)
		        (workInProgressRootExitStatus = RootFatalErrored),
		          logUncaughtError(
		            root,
		            createCapturedValueAtFiber(thrownValue, root.current)
		          );
		      else
		        switch (
		          (erroredWork.mode & 2 &&
		            stopProfilerTimerIfRunningAndRecordDuration(erroredWork),
		          markComponentRenderStopped(),
		          workInProgressSuspendedReason)
		        ) {
		          case SuspendedOnError:
		            null !== injectedProfilingHooks &&
		              "function" ===
		                typeof injectedProfilingHooks.markComponentErrored &&
		              injectedProfilingHooks.markComponentErrored(
		                erroredWork,
		                thrownValue,
		                workInProgressRootRenderLanes
		              );
		            break;
		          case SuspendedOnData:
		          case SuspendedOnImmediate:
		          case SuspendedOnDeprecatedThrowPromise:
		          case SuspendedAndReadyToContinue:
		            null !== injectedProfilingHooks &&
		              "function" ===
		                typeof injectedProfilingHooks.markComponentSuspended &&
		              injectedProfilingHooks.markComponentSuspended(
		                erroredWork,
		                thrownValue,
		                workInProgressRootRenderLanes
		              );
		        }
		    }
		    function shouldRemainOnPreviousScreen() {
		      var handler = suspenseHandlerStackCursor.current;
		      return null === handler
		        ? !0
		        : (workInProgressRootRenderLanes & 4194176) ===
		            workInProgressRootRenderLanes
		          ? null === shellBoundary
		            ? !0
		            : !1
		          : (workInProgressRootRenderLanes & 62914560) ===
		                workInProgressRootRenderLanes ||
		              0 !== (workInProgressRootRenderLanes & 536870912)
		            ? handler === shellBoundary
		            : !1;
		    }
		    function pushDispatcher() {
		      var prevDispatcher = ReactSharedInternals.H;
		      ReactSharedInternals.H = ContextOnlyDispatcher;
		      return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
		    }
		    function pushAsyncDispatcher() {
		      var prevAsyncDispatcher = ReactSharedInternals.A;
		      ReactSharedInternals.A = DefaultAsyncDispatcher;
		      return prevAsyncDispatcher;
		    }
		    function renderDidSuspendDelayIfPossible() {
		      workInProgressRootExitStatus = RootSuspendedWithDelay;
		      workInProgressRootDidSkipSuspendedSiblings ||
		        ((workInProgressRootRenderLanes & 4194176) !==
		          workInProgressRootRenderLanes &&
		          null !== suspenseHandlerStackCursor.current) ||
		        (workInProgressRootIsPrerendering = !0);
		      (0 === (workInProgressRootSkippedLanes & 134217727) &&
		        0 === (workInProgressRootInterleavedUpdatedLanes & 134217727)) ||
		        null === workInProgressRoot ||
		        markRootSuspended(
		          workInProgressRoot,
		          workInProgressRootRenderLanes,
		          workInProgressDeferredLane,
		          !1
		        );
		    }
		    function renderRootSync(root, lanes, shouldYieldForPrerendering) {
		      var prevExecutionContext = executionContext;
		      executionContext |= RenderContext;
		      var prevDispatcher = pushDispatcher(),
		        prevAsyncDispatcher = pushAsyncDispatcher();
		      if (
		        workInProgressRoot !== root ||
		        workInProgressRootRenderLanes !== lanes
		      ) {
		        if (isDevToolsPresent) {
		          var memoizedUpdaters = root.memoizedUpdaters;
		          0 < memoizedUpdaters.size &&
		            (restorePendingUpdaters(root, workInProgressRootRenderLanes),
		            memoizedUpdaters.clear());
		          movePendingFibersToMemoized(root, lanes);
		        }
		        workInProgressTransitions = null;
		        prepareFreshStack(root, lanes);
		      }
		      markRenderStarted(lanes);
		      lanes = !1;
		      memoizedUpdaters = workInProgressRootExitStatus;
		      a: do
		        try {
		          if (
		            workInProgressSuspendedReason !== NotSuspended &&
		            null !== workInProgress
		          ) {
		            var unitOfWork = workInProgress,
		              thrownValue = workInProgressThrownValue;
		            switch (workInProgressSuspendedReason) {
		              case SuspendedOnHydration:
		                resetWorkInProgressStack();
		                memoizedUpdaters = RootDidNotComplete;
		                break a;
		              case SuspendedOnImmediate:
		              case SuspendedOnData:
		              case SuspendedOnDeprecatedThrowPromise:
		                null === suspenseHandlerStackCursor.current && (lanes = !0);
		                var reason = workInProgressSuspendedReason;
		                workInProgressSuspendedReason = NotSuspended;
		                workInProgressThrownValue = null;
		                throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
		                if (
		                  shouldYieldForPrerendering &&
		                  workInProgressRootIsPrerendering
		                ) {
		                  memoizedUpdaters = RootInProgress;
		                  break a;
		                }
		                break;
		              default:
		                (reason = workInProgressSuspendedReason),
		                  (workInProgressSuspendedReason = NotSuspended),
		                  (workInProgressThrownValue = null),
		                  throwAndUnwindWorkLoop(root, unitOfWork, thrownValue, reason);
		            }
		          }
		          workLoopSync();
		          memoizedUpdaters = workInProgressRootExitStatus;
		          break;
		        } catch (thrownValue$4) {
		          handleThrow(root, thrownValue$4);
		        }
		      while (1);
		      lanes && root.shellSuspendCounter++;
		      resetContextDependencies();
		      executionContext = prevExecutionContext;
		      ReactSharedInternals.H = prevDispatcher;
		      ReactSharedInternals.A = prevAsyncDispatcher;
		      markRenderStopped();
		      null === workInProgress &&
		        ((workInProgressRoot = null),
		        (workInProgressRootRenderLanes = 0),
		        finishQueueingConcurrentUpdates());
		      return memoizedUpdaters;
		    }
		    function workLoopSync() {
		      for (; null !== workInProgress; ) performUnitOfWork(workInProgress);
		    }
		    function renderRootConcurrent(root, lanes) {
		      var prevExecutionContext = executionContext;
		      executionContext |= RenderContext;
		      var prevDispatcher = pushDispatcher(),
		        prevAsyncDispatcher = pushAsyncDispatcher();
		      if (
		        workInProgressRoot !== root ||
		        workInProgressRootRenderLanes !== lanes
		      ) {
		        if (isDevToolsPresent) {
		          var memoizedUpdaters = root.memoizedUpdaters;
		          0 < memoizedUpdaters.size &&
		            (restorePendingUpdaters(root, workInProgressRootRenderLanes),
		            memoizedUpdaters.clear());
		          movePendingFibersToMemoized(root, lanes);
		        }
		        workInProgressTransitions = null;
		        workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS;
		        prepareFreshStack(root, lanes);
		      } else
		        workInProgressRootIsPrerendering = checkIfRootIsPrerendering(
		          root,
		          lanes
		        );
		      markRenderStarted(lanes);
		      a: do
		        try {
		          if (
		            workInProgressSuspendedReason !== NotSuspended &&
		            null !== workInProgress
		          )
		            b: switch (
		              ((lanes = workInProgress),
		              (memoizedUpdaters = workInProgressThrownValue),
		              workInProgressSuspendedReason)
		            ) {
		              case SuspendedOnError:
		                workInProgressSuspendedReason = NotSuspended;
		                workInProgressThrownValue = null;
		                throwAndUnwindWorkLoop(
		                  root,
		                  lanes,
		                  memoizedUpdaters,
		                  SuspendedOnError
		                );
		                break;
		              case SuspendedOnData:
		                if (isThenableResolved(memoizedUpdaters)) {
		                  workInProgressSuspendedReason = NotSuspended;
		                  workInProgressThrownValue = null;
		                  replaySuspendedUnitOfWork(lanes);
		                  break;
		                }
		                lanes = function () {
		                  workInProgressSuspendedReason === SuspendedOnData &&
		                    workInProgressRoot === root &&
		                    (workInProgressSuspendedReason =
		                      SuspendedAndReadyToContinue);
		                  ensureRootIsScheduled(root);
		                };
		                memoizedUpdaters.then(lanes, lanes);
		                break a;
		              case SuspendedOnImmediate:
		                workInProgressSuspendedReason = SuspendedAndReadyToContinue;
		                break a;
		              case SuspendedOnInstance:
		                workInProgressSuspendedReason =
		                  SuspendedOnInstanceAndReadyToContinue;
		                break a;
		              case SuspendedAndReadyToContinue:
		                isThenableResolved(memoizedUpdaters)
		                  ? ((workInProgressSuspendedReason = NotSuspended),
		                    (workInProgressThrownValue = null),
		                    replaySuspendedUnitOfWork(lanes))
		                  : ((workInProgressSuspendedReason = NotSuspended),
		                    (workInProgressThrownValue = null),
		                    throwAndUnwindWorkLoop(
		                      root,
		                      lanes,
		                      memoizedUpdaters,
		                      SuspendedAndReadyToContinue
		                    ));
		                break;
		              case SuspendedOnInstanceAndReadyToContinue:
		                var resource = null;
		                switch (workInProgress.tag) {
		                  case 26:
		                    resource = workInProgress.memoizedState;
		                  case 5:
		                  case 27:
		                    var hostFiber = workInProgress,
		                      type = hostFiber.type,
		                      props = hostFiber.pendingProps;
		                    if (
		                      resource
		                        ? preloadResource(resource)
		                        : preloadInstance(type, props)
		                    ) {
		                      workInProgressSuspendedReason = NotSuspended;
		                      workInProgressThrownValue = null;
		                      var sibling = hostFiber.sibling;
		                      if (null !== sibling) workInProgress = sibling;
		                      else {
		                        var returnFiber = hostFiber.return;
		                        null !== returnFiber
		                          ? ((workInProgress = returnFiber),
		                            completeUnitOfWork(returnFiber))
		                          : (workInProgress = null);
		                      }
		                      break b;
		                    }
		                    break;
		                  default:
		                    console.error(
		                      "Unexpected type of fiber triggered a suspensey commit. This is a bug in React."
		                    );
		                }
		                workInProgressSuspendedReason = NotSuspended;
		                workInProgressThrownValue = null;
		                throwAndUnwindWorkLoop(
		                  root,
		                  lanes,
		                  memoizedUpdaters,
		                  SuspendedOnInstanceAndReadyToContinue
		                );
		                break;
		              case SuspendedOnDeprecatedThrowPromise:
		                workInProgressSuspendedReason = NotSuspended;
		                workInProgressThrownValue = null;
		                throwAndUnwindWorkLoop(
		                  root,
		                  lanes,
		                  memoizedUpdaters,
		                  SuspendedOnDeprecatedThrowPromise
		                );
		                break;
		              case SuspendedOnHydration:
		                resetWorkInProgressStack();
		                workInProgressRootExitStatus = RootDidNotComplete;
		                break a;
		              default:
		                throw Error(
		                  "Unexpected SuspendedReason. This is a bug in React."
		                );
		            }
		          null !== ReactSharedInternals.actQueue
		            ? workLoopSync()
		            : workLoopConcurrent();
		          break;
		        } catch (thrownValue$5) {
		          handleThrow(root, thrownValue$5);
		        }
		      while (1);
		      resetContextDependencies();
		      ReactSharedInternals.H = prevDispatcher;
		      ReactSharedInternals.A = prevAsyncDispatcher;
		      executionContext = prevExecutionContext;
		      if (null !== workInProgress)
		        return (
		          null !== injectedProfilingHooks &&
		            "function" === typeof injectedProfilingHooks.markRenderYielded &&
		            injectedProfilingHooks.markRenderYielded(),
		          RootInProgress
		        );
		      markRenderStopped();
		      workInProgressRoot = null;
		      workInProgressRootRenderLanes = 0;
		      finishQueueingConcurrentUpdates();
		      return workInProgressRootExitStatus;
		    }
		    function workLoopConcurrent() {
		      for (; null !== workInProgress && !shouldYield(); )
		        performUnitOfWork(workInProgress);
		    }
		    function performUnitOfWork(unitOfWork) {
		      var current = unitOfWork.alternate;
		      (unitOfWork.mode & 2) !== NoMode
		        ? (startProfilerTimer(unitOfWork),
		          (current = runWithFiberInDEV(
		            unitOfWork,
		            beginWork,
		            current,
		            unitOfWork,
		            entangledRenderLanes
		          )),
		          stopProfilerTimerIfRunningAndRecordDuration(unitOfWork))
		        : (current = runWithFiberInDEV(
		            unitOfWork,
		            beginWork,
		            current,
		            unitOfWork,
		            entangledRenderLanes
		          ));
		      unitOfWork.memoizedProps = unitOfWork.pendingProps;
		      null === current
		        ? completeUnitOfWork(unitOfWork)
		        : (workInProgress = current);
		    }
		    function replaySuspendedUnitOfWork(unitOfWork) {
		      var next = runWithFiberInDEV(unitOfWork, replayBeginWork, unitOfWork);
		      unitOfWork.memoizedProps = unitOfWork.pendingProps;
		      null === next ? completeUnitOfWork(unitOfWork) : (workInProgress = next);
		    }
		    function replayBeginWork(unitOfWork) {
		      var current = unitOfWork.alternate,
		        isProfilingMode = (unitOfWork.mode & 2) !== NoMode;
		      isProfilingMode && startProfilerTimer(unitOfWork);
		      switch (unitOfWork.tag) {
		        case 15:
		        case 0:
		          current = replayFunctionComponent(
		            current,
		            unitOfWork,
		            unitOfWork.pendingProps,
		            unitOfWork.type,
		            void 0,
		            workInProgressRootRenderLanes
		          );
		          break;
		        case 11:
		          current = replayFunctionComponent(
		            current,
		            unitOfWork,
		            unitOfWork.pendingProps,
		            unitOfWork.type.render,
		            unitOfWork.ref,
		            workInProgressRootRenderLanes
		          );
		          break;
		        case 5:
		          resetHooksOnUnwind(unitOfWork);
		        default:
		          unwindInterruptedWork(current, unitOfWork),
		            (unitOfWork = workInProgress =
		              resetWorkInProgress(unitOfWork, entangledRenderLanes)),
		            (current = beginWork(current, unitOfWork, entangledRenderLanes));
		      }
		      isProfilingMode &&
		        stopProfilerTimerIfRunningAndRecordDuration(unitOfWork);
		      return current;
		    }
		    function throwAndUnwindWorkLoop(
		      root,
		      unitOfWork,
		      thrownValue,
		      suspendedReason
		    ) {
		      resetContextDependencies();
		      resetHooksOnUnwind(unitOfWork);
		      thenableState$1 = null;
		      thenableIndexCounter$1 = 0;
		      var returnFiber = unitOfWork.return;
		      try {
		        if (
		          throwException(
		            root,
		            returnFiber,
		            unitOfWork,
		            thrownValue,
		            workInProgressRootRenderLanes
		          )
		        ) {
		          workInProgressRootExitStatus = RootFatalErrored;
		          logUncaughtError(
		            root,
		            createCapturedValueAtFiber(thrownValue, root.current)
		          );
		          workInProgress = null;
		          return;
		        }
		      } catch (error) {
		        if (null !== returnFiber) throw ((workInProgress = returnFiber), error);
		        workInProgressRootExitStatus = RootFatalErrored;
		        logUncaughtError(
		          root,
		          createCapturedValueAtFiber(thrownValue, root.current)
		        );
		        workInProgress = null;
		        return;
		      }
		      if (unitOfWork.flags & 32768) {
		        if (isHydrating || suspendedReason === SuspendedOnError) root = !0;
		        else if (
		          workInProgressRootIsPrerendering ||
		          0 !== (workInProgressRootRenderLanes & 536870912)
		        )
		          root = !1;
		        else if (
		          ((workInProgressRootDidSkipSuspendedSiblings = root = !0),
		          suspendedReason === SuspendedOnData ||
		            suspendedReason === SuspendedOnImmediate ||
		            suspendedReason === SuspendedOnDeprecatedThrowPromise)
		        )
		          (suspendedReason = suspenseHandlerStackCursor.current),
		            null !== suspendedReason &&
		              13 === suspendedReason.tag &&
		              (suspendedReason.flags |= 16384);
		        unwindUnitOfWork(unitOfWork, root);
		      } else completeUnitOfWork(unitOfWork);
		    }
		    function completeUnitOfWork(unitOfWork) {
		      var completedWork = unitOfWork;
		      do {
		        if (0 !== (completedWork.flags & 32768)) {
		          unwindUnitOfWork(
		            completedWork,
		            workInProgressRootDidSkipSuspendedSiblings
		          );
		          return;
		        }
		        var current = completedWork.alternate;
		        unitOfWork = completedWork.return;
		        startProfilerTimer(completedWork);
		        current = runWithFiberInDEV(
		          completedWork,
		          completeWork,
		          current,
		          completedWork,
		          entangledRenderLanes
		        );
		        (completedWork.mode & 2) !== NoMode &&
		          stopProfilerTimerIfRunningAndRecordIncompleteDuration(completedWork);
		        if (null !== current) {
		          workInProgress = current;
		          return;
		        }
		        completedWork = completedWork.sibling;
		        if (null !== completedWork) {
		          workInProgress = completedWork;
		          return;
		        }
		        workInProgress = completedWork = unitOfWork;
		      } while (null !== completedWork);
		      workInProgressRootExitStatus === RootInProgress &&
		        (workInProgressRootExitStatus = RootCompleted);
		    }
		    function unwindUnitOfWork(unitOfWork, skipSiblings) {
		      do {
		        var next = unwindWork(unitOfWork.alternate, unitOfWork);
		        if (null !== next) {
		          next.flags &= 32767;
		          workInProgress = next;
		          return;
		        }
		        if ((unitOfWork.mode & 2) !== NoMode) {
		          stopProfilerTimerIfRunningAndRecordIncompleteDuration(unitOfWork);
		          next = unitOfWork.actualDuration;
		          for (var child = unitOfWork.child; null !== child; )
		            (next += child.actualDuration), (child = child.sibling);
		          unitOfWork.actualDuration = next;
		        }
		        next = unitOfWork.return;
		        null !== next &&
		          ((next.flags |= 32768),
		          (next.subtreeFlags = 0),
		          (next.deletions = null));
		        if (
		          !skipSiblings &&
		          ((unitOfWork = unitOfWork.sibling), null !== unitOfWork)
		        ) {
		          workInProgress = unitOfWork;
		          return;
		        }
		        workInProgress = unitOfWork = next;
		      } while (null !== unitOfWork);
		      workInProgressRootExitStatus = RootDidNotComplete;
		      workInProgress = null;
		    }
		    function commitRoot(
		      root,
		      recoverableErrors,
		      transitions,
		      didIncludeRenderPhaseUpdate,
		      spawnedLane,
		      updatedLanes,
		      suspendedRetryLanes,
		      suspendedCommitReason,
		      completedRenderStartTime,
		      completedRenderEndTime
		    ) {
		      var prevTransition = ReactSharedInternals.T,
		        previousUpdateLanePriority = getCurrentUpdatePriority();
		      try {
		        setCurrentUpdatePriority(2),
		          (ReactSharedInternals.T = null),
		          commitRootImpl(
		            root,
		            recoverableErrors,
		            transitions,
		            didIncludeRenderPhaseUpdate,
		            previousUpdateLanePriority,
		            spawnedLane,
		            updatedLanes,
		            suspendedRetryLanes,
		            suspendedCommitReason,
		            completedRenderStartTime,
		            completedRenderEndTime
		          );
		      } finally {
		        (ReactSharedInternals.T = prevTransition),
		          setCurrentUpdatePriority(previousUpdateLanePriority);
		      }
		    }
		    function commitRootImpl(
		      root,
		      recoverableErrors,
		      transitions,
		      didIncludeRenderPhaseUpdate,
		      renderPriorityLevel,
		      spawnedLane,
		      updatedLanes,
		      suspendedRetryLanes
		    ) {
		      do flushPassiveEffects();
		      while (null !== rootWithPendingPassiveEffects);
		      ReactStrictModeWarnings.flushLegacyContextWarning();
		      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
		      if ((executionContext & (RenderContext | CommitContext)) !== NoContext)
		        throw Error("Should not already be working.");
		      var finishedWork = root.finishedWork;
		      didIncludeRenderPhaseUpdate = root.finishedLanes;
		      null !== injectedProfilingHooks &&
		        "function" === typeof injectedProfilingHooks.markCommitStarted &&
		        injectedProfilingHooks.markCommitStarted(didIncludeRenderPhaseUpdate);
		      if (null === finishedWork) return markCommitStopped(), null;
		      0 === didIncludeRenderPhaseUpdate &&
		        console.error(
		          "root.finishedLanes should not be empty during a commit. This is a bug in React."
		        );
		      root.finishedWork = null;
		      root.finishedLanes = 0;
		      if (finishedWork === root.current)
		        throw Error(
		          "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue."
		        );
		      root.callbackNode = null;
		      root.callbackPriority = 0;
		      root.cancelPendingCommit = null;
		      var remainingLanes = finishedWork.lanes | finishedWork.childLanes;
		      remainingLanes |= concurrentlyUpdatedLanes;
		      markRootFinished(
		        root,
		        didIncludeRenderPhaseUpdate,
		        remainingLanes,
		        spawnedLane,
		        updatedLanes,
		        suspendedRetryLanes
		      );
		      root === workInProgressRoot &&
		        ((workInProgress = workInProgressRoot = null),
		        (workInProgressRootRenderLanes = 0));
		      (0 === (finishedWork.subtreeFlags & 10256) &&
		        0 === (finishedWork.flags & 10256)) ||
		        rootDoesHavePassiveEffects ||
		        ((rootDoesHavePassiveEffects = !0),
		        (pendingPassiveEffectsRemainingLanes = remainingLanes),
		        (pendingPassiveTransitions = transitions),
		        scheduleCallback(NormalPriority$1, function () {
		          flushPassiveEffects();
		          return null;
		        }));
		      commitStartTime = now();
		      transitions = 0 !== (finishedWork.flags & 15990);
		      0 !== (finishedWork.subtreeFlags & 15990) || transitions
		        ? ((transitions = ReactSharedInternals.T),
		          (ReactSharedInternals.T = null),
		          (spawnedLane = getCurrentUpdatePriority()),
		          setCurrentUpdatePriority(2),
		          (updatedLanes = executionContext),
		          (executionContext |= CommitContext),
		          commitBeforeMutationEffects(root, finishedWork),
		          commitMutationEffects(
		            root,
		            finishedWork,
		            didIncludeRenderPhaseUpdate
		          ),
		          resetAfterCommit(root.containerInfo),
		          (root.current = finishedWork),
		          null !== injectedProfilingHooks &&
		            "function" ===
		              typeof injectedProfilingHooks.markLayoutEffectsStarted &&
		            injectedProfilingHooks.markLayoutEffectsStarted(
		              didIncludeRenderPhaseUpdate
		            ),
		          commitLayoutEffects(finishedWork, root, didIncludeRenderPhaseUpdate),
		          null !== injectedProfilingHooks &&
		            "function" ===
		              typeof injectedProfilingHooks.markLayoutEffectsStopped &&
		            injectedProfilingHooks.markLayoutEffectsStopped(),
		          requestPaint(),
		          (executionContext = updatedLanes),
		          setCurrentUpdatePriority(spawnedLane),
		          (ReactSharedInternals.T = transitions))
		        : (root.current = finishedWork);
		      (transitions = rootDoesHavePassiveEffects)
		        ? ((rootDoesHavePassiveEffects = !1),
		          (rootWithPendingPassiveEffects = root),
		          (pendingPassiveEffectsLanes = didIncludeRenderPhaseUpdate))
		        : (releaseRootPooledCache(root, remainingLanes),
		          (nestedPassiveUpdateCount = 0),
		          (rootWithPassiveNestedUpdates = null));
		      remainingLanes = root.pendingLanes;
		      0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
		      transitions || commitDoubleInvokeEffectsInDEV(root);
		      onCommitRoot$1(finishedWork.stateNode, renderPriorityLevel);
		      isDevToolsPresent && root.memoizedUpdaters.clear();
		      onCommitRoot();
		      ensureRootIsScheduled(root);
		      if (null !== recoverableErrors)
		        for (
		          renderPriorityLevel = root.onRecoverableError, finishedWork = 0;
		          finishedWork < recoverableErrors.length;
		          finishedWork++
		        )
		          (remainingLanes = recoverableErrors[finishedWork]),
		            (transitions = makeErrorInfo(remainingLanes.stack)),
		            runWithFiberInDEV(
		              remainingLanes.source,
		              renderPriorityLevel,
		              remainingLanes.value,
		              transitions
		            );
		      0 !== (pendingPassiveEffectsLanes & 3) && flushPassiveEffects();
		      remainingLanes = root.pendingLanes;
		      0 !== (didIncludeRenderPhaseUpdate & 4194218) &&
		      0 !== (remainingLanes & 42)
		        ? ((nestedUpdateScheduled = !0),
		          root === rootWithNestedUpdates
		            ? nestedUpdateCount++
		            : ((nestedUpdateCount = 0), (rootWithNestedUpdates = root)))
		        : (nestedUpdateCount = 0);
		      flushSyncWorkAcrossRoots_impl(0, !1);
		      markCommitStopped();
		      return null;
		    }
		    function makeErrorInfo(componentStack) {
		      componentStack = { componentStack: componentStack };
		      Object.defineProperty(componentStack, "digest", {
		        get: function () {
		          console.error(
		            'You are accessing "digest" from the errorInfo object passed to onRecoverableError. This property is no longer provided as part of errorInfo but can be accessed as a property of the Error instance itself.'
		          );
		        }
		      });
		      return componentStack;
		    }
		    function releaseRootPooledCache(root, remainingLanes) {
		      0 === (root.pooledCacheLanes &= remainingLanes) &&
		        ((remainingLanes = root.pooledCache),
		        null != remainingLanes &&
		          ((root.pooledCache = null), releaseCache(remainingLanes)));
		    }
		    function flushPassiveEffects() {
		      if (null !== rootWithPendingPassiveEffects) {
		        var root = rootWithPendingPassiveEffects,
		          remainingLanes = pendingPassiveEffectsRemainingLanes;
		        pendingPassiveEffectsRemainingLanes = 0;
		        var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes),
		          priority = 32 > renderPriority ? 32 : renderPriority;
		        renderPriority = ReactSharedInternals.T;
		        var previousPriority = getCurrentUpdatePriority();
		        try {
		          setCurrentUpdatePriority(priority);
		          ReactSharedInternals.T = null;
		          if (null === rootWithPendingPassiveEffects)
		            var JSCompiler_inline_result = !1;
		          else {
		            priority = pendingPassiveTransitions;
		            pendingPassiveTransitions = null;
		            var root$jscomp$0 = rootWithPendingPassiveEffects,
		              lanes = pendingPassiveEffectsLanes;
		            rootWithPendingPassiveEffects = null;
		            pendingPassiveEffectsLanes = 0;
		            if (
		              (executionContext & (RenderContext | CommitContext)) !==
		              NoContext
		            )
		              throw Error(
		                "Cannot flush passive effects while already rendering."
		              );
		            isFlushingPassiveEffects = !0;
		            didScheduleUpdateDuringPassiveEffects = !1;
		            null !== injectedProfilingHooks &&
		              "function" ===
		                typeof injectedProfilingHooks.markPassiveEffectsStarted &&
		              injectedProfilingHooks.markPassiveEffectsStarted(lanes);
		            var prevExecutionContext = executionContext;
		            executionContext |= CommitContext;
		            commitPassiveUnmountOnFiber(root$jscomp$0.current);
		            commitPassiveMountOnFiber(
		              root$jscomp$0,
		              root$jscomp$0.current,
		              lanes,
		              priority
		            );
		            null !== injectedProfilingHooks &&
		              "function" ===
		                typeof injectedProfilingHooks.markPassiveEffectsStopped &&
		              injectedProfilingHooks.markPassiveEffectsStopped();
		            commitDoubleInvokeEffectsInDEV(root$jscomp$0);
		            executionContext = prevExecutionContext;
		            flushSyncWorkAcrossRoots_impl(0, !1);
		            didScheduleUpdateDuringPassiveEffects
		              ? root$jscomp$0 === rootWithPassiveNestedUpdates
		                ? nestedPassiveUpdateCount++
		                : ((nestedPassiveUpdateCount = 0),
		                  (rootWithPassiveNestedUpdates = root$jscomp$0))
		              : (nestedPassiveUpdateCount = 0);
		            didScheduleUpdateDuringPassiveEffects = isFlushingPassiveEffects =
		              !1;
		            if (
		              injectedHook &&
		              "function" === typeof injectedHook.onPostCommitFiberRoot
		            )
		              try {
		                injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0);
		              } catch (err) {
		                hasLoggedError ||
		                  ((hasLoggedError = !0),
		                  console.error(
		                    "React instrumentation encountered an error: %s",
		                    err
		                  ));
		              }
		            var stateNode = root$jscomp$0.current.stateNode;
		            stateNode.effectDuration = 0;
		            stateNode.passiveEffectDuration = 0;
		            JSCompiler_inline_result = !0;
		          }
		          return JSCompiler_inline_result;
		        } finally {
		          setCurrentUpdatePriority(previousPriority),
		            (ReactSharedInternals.T = renderPriority),
		            releaseRootPooledCache(root, remainingLanes);
		        }
		      }
		      return !1;
		    }
		    function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
		      sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
		      sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
		      rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
		      null !== rootFiber &&
		        (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
		    }
		    function captureCommitPhaseError(
		      sourceFiber,
		      nearestMountedAncestor,
		      error
		    ) {
		      isRunningInsertionEffect = !1;
		      if (3 === sourceFiber.tag)
		        captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
		      else {
		        for (; null !== nearestMountedAncestor; ) {
		          if (3 === nearestMountedAncestor.tag) {
		            captureCommitPhaseErrorOnRoot(
		              nearestMountedAncestor,
		              sourceFiber,
		              error
		            );
		            return;
		          }
		          if (1 === nearestMountedAncestor.tag) {
		            var instance = nearestMountedAncestor.stateNode;
		            if (
		              "function" ===
		                typeof nearestMountedAncestor.type.getDerivedStateFromError ||
		              ("function" === typeof instance.componentDidCatch &&
		                (null === legacyErrorBoundariesThatAlreadyFailed ||
		                  !legacyErrorBoundariesThatAlreadyFailed.has(instance)))
		            ) {
		              sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
		              error = createClassErrorUpdate(2);
		              instance = enqueueUpdate(nearestMountedAncestor, error, 2);
		              null !== instance &&
		                (initializeClassErrorUpdate(
		                  error,
		                  instance,
		                  nearestMountedAncestor,
		                  sourceFiber
		                ),
		                markRootUpdated$1(instance, 2),
		                ensureRootIsScheduled(instance));
		              return;
		            }
		          }
		          nearestMountedAncestor = nearestMountedAncestor.return;
		        }
		        console.error(
		          "Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Potential causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s",
		          error
		        );
		      }
		    }
		    function attachPingListener(root, wakeable, lanes) {
		      var pingCache = root.pingCache;
		      if (null === pingCache) {
		        pingCache = root.pingCache = new PossiblyWeakMap();
		        var threadIDs = new Set();
		        pingCache.set(wakeable, threadIDs);
		      } else
		        (threadIDs = pingCache.get(wakeable)),
		          void 0 === threadIDs &&
		            ((threadIDs = new Set()), pingCache.set(wakeable, threadIDs));
		      threadIDs.has(lanes) ||
		        ((workInProgressRootDidAttachPingListener = !0),
		        threadIDs.add(lanes),
		        (pingCache = pingSuspendedRoot.bind(null, root, wakeable, lanes)),
		        isDevToolsPresent && restorePendingUpdaters(root, lanes),
		        wakeable.then(pingCache, pingCache));
		    }
		    function pingSuspendedRoot(root, wakeable, pingedLanes) {
		      var pingCache = root.pingCache;
		      null !== pingCache && pingCache.delete(wakeable);
		      root.pingedLanes |= root.suspendedLanes & pingedLanes;
		      root.warmLanes &= ~pingedLanes;
		      isConcurrentActEnvironment() &&
		        null === ReactSharedInternals.actQueue &&
		        console.error(
		          "A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act"
		        );
		      workInProgressRoot === root &&
		        (workInProgressRootRenderLanes & pingedLanes) === pingedLanes &&
		        (workInProgressRootExitStatus === RootSuspendedWithDelay ||
		        (workInProgressRootExitStatus === RootSuspended &&
		          (workInProgressRootRenderLanes & 62914560) ===
		            workInProgressRootRenderLanes &&
		          now$1() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS)
		          ? (executionContext & RenderContext) === NoContext &&
		            prepareFreshStack(root, 0)
		          : (workInProgressRootPingedLanes |= pingedLanes),
		        workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes &&
		          (workInProgressSuspendedRetryLanes = 0));
		      ensureRootIsScheduled(root);
		    }
		    function retryTimedOutBoundary(boundaryFiber, retryLane) {
		      0 === retryLane && (retryLane = claimNextRetryLane());
		      boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
		      null !== boundaryFiber &&
		        (markRootUpdated$1(boundaryFiber, retryLane),
		        ensureRootIsScheduled(boundaryFiber));
		    }
		    function retryDehydratedSuspenseBoundary(boundaryFiber) {
		      var suspenseState = boundaryFiber.memoizedState,
		        retryLane = 0;
		      null !== suspenseState && (retryLane = suspenseState.retryLane);
		      retryTimedOutBoundary(boundaryFiber, retryLane);
		    }
		    function resolveRetryWakeable(boundaryFiber, wakeable) {
		      var retryLane = 0;
		      switch (boundaryFiber.tag) {
		        case 13:
		          var retryCache = boundaryFiber.stateNode;
		          var suspenseState = boundaryFiber.memoizedState;
		          null !== suspenseState && (retryLane = suspenseState.retryLane);
		          break;
		        case 19:
		          retryCache = boundaryFiber.stateNode;
		          break;
		        case 22:
		          retryCache = boundaryFiber.stateNode._retryCache;
		          break;
		        default:
		          throw Error(
		            "Pinged unknown suspense boundary type. This is probably a bug in React."
		          );
		      }
		      null !== retryCache && retryCache.delete(wakeable);
		      retryTimedOutBoundary(boundaryFiber, retryLane);
		    }
		    function recursivelyTraverseAndDoubleInvokeEffectsInDEV(
		      root$jscomp$0,
		      parentFiber,
		      isInStrictMode
		    ) {
		      if (0 !== (parentFiber.subtreeFlags & 33562624))
		        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
		          var root = root$jscomp$0,
		            fiber = parentFiber,
		            isStrictModeFiber = fiber.type === REACT_STRICT_MODE_TYPE;
		          isStrictModeFiber = isInStrictMode || isStrictModeFiber;
		          22 !== fiber.tag
		            ? fiber.flags & 33554432
		              ? isStrictModeFiber &&
		                runWithFiberInDEV(
		                  fiber,
		                  doubleInvokeEffectsOnFiber,
		                  root,
		                  fiber,
		                  (fiber.mode & 64) === NoMode
		                )
		              : recursivelyTraverseAndDoubleInvokeEffectsInDEV(
		                  root,
		                  fiber,
		                  isStrictModeFiber
		                )
		            : null === fiber.memoizedState &&
		              (isStrictModeFiber && fiber.flags & 8192
		                ? runWithFiberInDEV(
		                    fiber,
		                    doubleInvokeEffectsOnFiber,
		                    root,
		                    fiber
		                  )
		                : fiber.subtreeFlags & 33554432 &&
		                  runWithFiberInDEV(
		                    fiber,
		                    recursivelyTraverseAndDoubleInvokeEffectsInDEV,
		                    root,
		                    fiber,
		                    isStrictModeFiber
		                  ));
		          parentFiber = parentFiber.sibling;
		        }
		    }
		    function doubleInvokeEffectsOnFiber(root, fiber) {
		      var shouldDoubleInvokePassiveEffects =
		        2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : !0;
		      setIsStrictModeForDevtools(!0);
		      try {
		        disappearLayoutEffects(fiber),
		          shouldDoubleInvokePassiveEffects && disconnectPassiveEffect(fiber),
		          reappearLayoutEffects(root, fiber.alternate, fiber, !1),
		          shouldDoubleInvokePassiveEffects &&
		            reconnectPassiveEffects(root, fiber, 0, null, !1);
		      } finally {
		        setIsStrictModeForDevtools(!1);
		      }
		    }
		    function commitDoubleInvokeEffectsInDEV(root) {
		      var doubleInvokeEffects = !0;
		      root.current.mode & 24 || (doubleInvokeEffects = !1);
		      recursivelyTraverseAndDoubleInvokeEffectsInDEV(
		        root,
		        root.current,
		        doubleInvokeEffects
		      );
		    }
		    function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
		      if ((executionContext & RenderContext) === NoContext) {
		        var tag = fiber.tag;
		        if (
		          3 === tag ||
		          1 === tag ||
		          0 === tag ||
		          11 === tag ||
		          14 === tag ||
		          15 === tag
		        ) {
		          tag = getComponentNameFromFiber(fiber) || "ReactComponent";
		          if (null !== didWarnStateUpdateForNotYetMountedComponent) {
		            if (didWarnStateUpdateForNotYetMountedComponent.has(tag)) return;
		            didWarnStateUpdateForNotYetMountedComponent.add(tag);
		          } else didWarnStateUpdateForNotYetMountedComponent = new Set([tag]);
		          runWithFiberInDEV(fiber, function () {
		            console.error(
		              "Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead."
		            );
		          });
		        }
		      }
		    }
		    function restorePendingUpdaters(root, lanes) {
		      isDevToolsPresent &&
		        root.memoizedUpdaters.forEach(function (schedulingFiber) {
		          addFiberToLanesMap(root, schedulingFiber, lanes);
		        });
		    }
		    function scheduleCallback(priorityLevel, callback) {
		      var actQueue = ReactSharedInternals.actQueue;
		      return null !== actQueue
		        ? (actQueue.push(callback), fakeActCallbackNode)
		        : scheduleCallback$3(priorityLevel, callback);
		    }
		    function warnIfUpdatesNotWrappedWithActDEV(fiber) {
		      isConcurrentActEnvironment() &&
		        null === ReactSharedInternals.actQueue &&
		        runWithFiberInDEV(fiber, function () {
		          console.error(
		            "An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://react.dev/link/wrap-tests-with-act",
		            getComponentNameFromFiber(fiber)
		          );
		        });
		    }
		    function resolveFunctionForHotReloading(type) {
		      if (null === resolveFamily) return type;
		      var family = resolveFamily(type);
		      return void 0 === family ? type : family.current;
		    }
		    function resolveForwardRefForHotReloading(type) {
		      if (null === resolveFamily) return type;
		      var family = resolveFamily(type);
		      return void 0 === family
		        ? null !== type &&
		          void 0 !== type &&
		          "function" === typeof type.render &&
		          ((family = resolveFunctionForHotReloading(type.render)),
		          type.render !== family)
		          ? ((family = { $$typeof: REACT_FORWARD_REF_TYPE, render: family }),
		            void 0 !== type.displayName &&
		              (family.displayName = type.displayName),
		            family)
		          : type
		        : family.current;
		    }
		    function isCompatibleFamilyForHotReloading(fiber, element) {
		      if (null === resolveFamily) return !1;
		      var prevType = fiber.elementType;
		      element = element.type;
		      var needsCompareFamilies = !1,
		        $$typeofNextType =
		          "object" === typeof element && null !== element
		            ? element.$$typeof
		            : null;
		      switch (fiber.tag) {
		        case 1:
		          "function" === typeof element && (needsCompareFamilies = !0);
		          break;
		        case 0:
		          "function" === typeof element
		            ? (needsCompareFamilies = !0)
		            : $$typeofNextType === REACT_LAZY_TYPE &&
		              (needsCompareFamilies = !0);
		          break;
		        case 11:
		          $$typeofNextType === REACT_FORWARD_REF_TYPE
		            ? (needsCompareFamilies = !0)
		            : $$typeofNextType === REACT_LAZY_TYPE &&
		              (needsCompareFamilies = !0);
		          break;
		        case 14:
		        case 15:
		          $$typeofNextType === REACT_MEMO_TYPE
		            ? (needsCompareFamilies = !0)
		            : $$typeofNextType === REACT_LAZY_TYPE &&
		              (needsCompareFamilies = !0);
		          break;
		        default:
		          return !1;
		      }
		      return needsCompareFamilies &&
		        ((fiber = resolveFamily(prevType)),
		        void 0 !== fiber && fiber === resolveFamily(element))
		        ? !0
		        : !1;
		    }
		    function markFailedErrorBoundaryForHotReloading(fiber) {
		      null !== resolveFamily &&
		        "function" === typeof WeakSet &&
		        (null === failedBoundaries && (failedBoundaries = new WeakSet()),
		        failedBoundaries.add(fiber));
		    }
		    function scheduleFibersWithFamiliesRecursively(
		      fiber,
		      updatedFamilies,
		      staleFamilies
		    ) {
		      var alternate = fiber.alternate,
		        child = fiber.child,
		        sibling = fiber.sibling,
		        tag = fiber.tag,
		        type = fiber.type,
		        candidateType = null;
		      switch (tag) {
		        case 0:
		        case 15:
		        case 1:
		          candidateType = type;
		          break;
		        case 11:
		          candidateType = type.render;
		      }
		      if (null === resolveFamily)
		        throw Error("Expected resolveFamily to be set during hot reload.");
		      var needsRender = !1;
		      type = !1;
		      null !== candidateType &&
		        ((candidateType = resolveFamily(candidateType)),
		        void 0 !== candidateType &&
		          (staleFamilies.has(candidateType)
		            ? (type = !0)
		            : updatedFamilies.has(candidateType) &&
		              (1 === tag ? (type = !0) : (needsRender = !0))));
		      null !== failedBoundaries &&
		        (failedBoundaries.has(fiber) ||
		          (null !== alternate && failedBoundaries.has(alternate))) &&
		        (type = !0);
		      type && (fiber._debugNeedsRemount = !0);
		      if (type || needsRender)
		        (alternate = enqueueConcurrentRenderForLane(fiber, 2)),
		          null !== alternate && scheduleUpdateOnFiber(alternate, fiber, 2);
		      null === child ||
		        type ||
		        scheduleFibersWithFamiliesRecursively(
		          child,
		          updatedFamilies,
		          staleFamilies
		        );
		      null !== sibling &&
		        scheduleFibersWithFamiliesRecursively(
		          sibling,
		          updatedFamilies,
		          staleFamilies
		        );
		    }
		    function FiberNode(tag, pendingProps, key, mode) {
		      this.tag = tag;
		      this.key = key;
		      this.sibling =
		        this.child =
		        this.return =
		        this.stateNode =
		        this.type =
		        this.elementType =
		          null;
		      this.index = 0;
		      this.refCleanup = this.ref = null;
		      this.pendingProps = pendingProps;
		      this.dependencies =
		        this.memoizedState =
		        this.updateQueue =
		        this.memoizedProps =
		          null;
		      this.mode = mode;
		      this.subtreeFlags = this.flags = 0;
		      this.deletions = null;
		      this.childLanes = this.lanes = 0;
		      this.alternate = null;
		      this.actualDuration = -0;
		      this.actualStartTime = -1.1;
		      this.treeBaseDuration = this.selfBaseDuration = -0;
		      this._debugOwner = this._debugInfo = null;
		      this._debugNeedsRemount = !1;
		      this._debugHookTypes = null;
		      hasBadMapPolyfill ||
		        "function" !== typeof Object.preventExtensions ||
		        Object.preventExtensions(this);
		    }
		    function shouldConstruct(Component) {
		      Component = Component.prototype;
		      return !(!Component || !Component.isReactComponent);
		    }
		    function createWorkInProgress(current, pendingProps) {
		      var workInProgress = current.alternate;
		      null === workInProgress
		        ? ((workInProgress = createFiber(
		            current.tag,
		            pendingProps,
		            current.key,
		            current.mode
		          )),
		          (workInProgress.elementType = current.elementType),
		          (workInProgress.type = current.type),
		          (workInProgress.stateNode = current.stateNode),
		          (workInProgress._debugOwner = current._debugOwner),
		          (workInProgress._debugHookTypes = current._debugHookTypes),
		          (workInProgress.alternate = current),
		          (current.alternate = workInProgress))
		        : ((workInProgress.pendingProps = pendingProps),
		          (workInProgress.type = current.type),
		          (workInProgress.flags = 0),
		          (workInProgress.subtreeFlags = 0),
		          (workInProgress.deletions = null),
		          (workInProgress.actualDuration = -0),
		          (workInProgress.actualStartTime = -1.1));
		      workInProgress.flags = current.flags & 31457280;
		      workInProgress.childLanes = current.childLanes;
		      workInProgress.lanes = current.lanes;
		      workInProgress.child = current.child;
		      workInProgress.memoizedProps = current.memoizedProps;
		      workInProgress.memoizedState = current.memoizedState;
		      workInProgress.updateQueue = current.updateQueue;
		      pendingProps = current.dependencies;
		      workInProgress.dependencies =
		        null === pendingProps
		          ? null
		          : {
		              lanes: pendingProps.lanes,
		              firstContext: pendingProps.firstContext,
		              _debugThenableState: pendingProps._debugThenableState
		            };
		      workInProgress.sibling = current.sibling;
		      workInProgress.index = current.index;
		      workInProgress.ref = current.ref;
		      workInProgress.refCleanup = current.refCleanup;
		      workInProgress.selfBaseDuration = current.selfBaseDuration;
		      workInProgress.treeBaseDuration = current.treeBaseDuration;
		      workInProgress._debugInfo = current._debugInfo;
		      workInProgress._debugNeedsRemount = current._debugNeedsRemount;
		      switch (workInProgress.tag) {
		        case 0:
		        case 15:
		          workInProgress.type = resolveFunctionForHotReloading(current.type);
		          break;
		        case 1:
		          workInProgress.type = resolveFunctionForHotReloading(current.type);
		          break;
		        case 11:
		          workInProgress.type = resolveForwardRefForHotReloading(current.type);
		      }
		      return workInProgress;
		    }
		    function resetWorkInProgress(workInProgress, renderLanes) {
		      workInProgress.flags &= 31457282;
		      var current = workInProgress.alternate;
		      null === current
		        ? ((workInProgress.childLanes = 0),
		          (workInProgress.lanes = renderLanes),
		          (workInProgress.child = null),
		          (workInProgress.subtreeFlags = 0),
		          (workInProgress.memoizedProps = null),
		          (workInProgress.memoizedState = null),
		          (workInProgress.updateQueue = null),
		          (workInProgress.dependencies = null),
		          (workInProgress.stateNode = null),
		          (workInProgress.selfBaseDuration = 0),
		          (workInProgress.treeBaseDuration = 0))
		        : ((workInProgress.childLanes = current.childLanes),
		          (workInProgress.lanes = current.lanes),
		          (workInProgress.child = current.child),
		          (workInProgress.subtreeFlags = 0),
		          (workInProgress.deletions = null),
		          (workInProgress.memoizedProps = current.memoizedProps),
		          (workInProgress.memoizedState = current.memoizedState),
		          (workInProgress.updateQueue = current.updateQueue),
		          (workInProgress.type = current.type),
		          (renderLanes = current.dependencies),
		          (workInProgress.dependencies =
		            null === renderLanes
		              ? null
		              : {
		                  lanes: renderLanes.lanes,
		                  firstContext: renderLanes.firstContext,
		                  _debugThenableState: renderLanes._debugThenableState
		                }),
		          (workInProgress.selfBaseDuration = current.selfBaseDuration),
		          (workInProgress.treeBaseDuration = current.treeBaseDuration));
		      return workInProgress;
		    }
		    function createFiberFromTypeAndProps(
		      type,
		      key,
		      pendingProps,
		      owner,
		      mode,
		      lanes
		    ) {
		      var fiberTag = 0,
		        resolvedType = type;
		      if ("function" === typeof type)
		        shouldConstruct(type) && (fiberTag = 1),
		          (resolvedType = resolveFunctionForHotReloading(resolvedType));
		      else if ("string" === typeof type)
		        supportsResources && supportsSingletons
		          ? ((fiberTag = getHostContext()),
		            (fiberTag = isHostHoistableType(type, pendingProps, fiberTag)
		              ? 26
		              : isHostSingletonType(type)
		                ? 27
		                : 5))
		          : supportsResources
		            ? ((fiberTag = getHostContext()),
		              (fiberTag = isHostHoistableType(type, pendingProps, fiberTag)
		                ? 26
		                : 5))
		            : (fiberTag = supportsSingletons
		                ? isHostSingletonType(type)
		                  ? 27
		                  : 5
		                : 5);
		      else
		        a: switch (type) {
		          case REACT_FRAGMENT_TYPE:
		            return createFiberFromFragment(
		              pendingProps.children,
		              mode,
		              lanes,
		              key
		            );
		          case REACT_STRICT_MODE_TYPE:
		            fiberTag = 8;
		            mode |= 24;
		            break;
		          case REACT_PROFILER_TYPE:
		            return (
		              (type = pendingProps),
		              (owner = mode),
		              "string" !== typeof type.id &&
		                console.error(
		                  'Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.',
		                  typeof type.id
		                ),
		              (key = createFiber(12, type, key, owner | 2)),
		              (key.elementType = REACT_PROFILER_TYPE),
		              (key.lanes = lanes),
		              (key.stateNode = { effectDuration: 0, passiveEffectDuration: 0 }),
		              key
		            );
		          case REACT_SUSPENSE_TYPE:
		            return (
		              (key = createFiber(13, pendingProps, key, mode)),
		              (key.elementType = REACT_SUSPENSE_TYPE),
		              (key.lanes = lanes),
		              key
		            );
		          case REACT_SUSPENSE_LIST_TYPE:
		            return (
		              (key = createFiber(19, pendingProps, key, mode)),
		              (key.elementType = REACT_SUSPENSE_LIST_TYPE),
		              (key.lanes = lanes),
		              key
		            );
		          case REACT_OFFSCREEN_TYPE:
		            return createFiberFromOffscreen(pendingProps, mode, lanes, key);
		          default:
		            if ("object" === typeof type && null !== type)
		              switch (type.$$typeof) {
		                case REACT_PROVIDER_TYPE:
		                case REACT_CONTEXT_TYPE:
		                  fiberTag = 10;
		                  break a;
		                case REACT_CONSUMER_TYPE:
		                  fiberTag = 9;
		                  break a;
		                case REACT_FORWARD_REF_TYPE:
		                  fiberTag = 11;
		                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
		                  break a;
		                case REACT_MEMO_TYPE:
		                  fiberTag = 14;
		                  break a;
		                case REACT_LAZY_TYPE:
		                  fiberTag = 16;
		                  resolvedType = null;
		                  break a;
		              }
		            resolvedType = "";
		            if (
		              void 0 === type ||
		              ("object" === typeof type &&
		                null !== type &&
		                0 === Object.keys(type).length)
		            )
		              resolvedType +=
		                " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
		            null === type
		              ? (pendingProps = "null")
		              : isArrayImpl(type)
		                ? (pendingProps = "array")
		                : void 0 !== type && type.$$typeof === REACT_ELEMENT_TYPE
		                  ? ((pendingProps =
		                      "<" +
		                      (getComponentNameFromType(type.type) || "Unknown") +
		                      " />"),
		                    (resolvedType =
		                      " Did you accidentally export a JSX literal instead of a component?"))
		                  : (pendingProps = typeof type);
		            fiberTag = owner
		              ? "number" === typeof owner.tag
		                ? getComponentNameFromFiber(owner)
		                : "string" === typeof owner.name
		                  ? owner.name
		                  : null
		              : null;
		            fiberTag &&
		              (resolvedType +=
		                "\n\nCheck the render method of `" + fiberTag + "`.");
		            fiberTag = 29;
		            pendingProps = Error(
		              "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " +
		                (pendingProps + "." + resolvedType)
		            );
		            resolvedType = null;
		        }
		      key = createFiber(fiberTag, pendingProps, key, mode);
		      key.elementType = type;
		      key.type = resolvedType;
		      key.lanes = lanes;
		      key._debugOwner = owner;
		      return key;
		    }
		    function createFiberFromElement(element, mode, lanes) {
		      mode = createFiberFromTypeAndProps(
		        element.type,
		        element.key,
		        element.props,
		        element._owner,
		        mode,
		        lanes
		      );
		      mode._debugOwner = element._owner;
		      return mode;
		    }
		    function createFiberFromFragment(elements, mode, lanes, key) {
		      elements = createFiber(7, elements, key, mode);
		      elements.lanes = lanes;
		      return elements;
		    }
		    function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
		      pendingProps = createFiber(22, pendingProps, key, mode);
		      pendingProps.elementType = REACT_OFFSCREEN_TYPE;
		      pendingProps.lanes = lanes;
		      var primaryChildInstance = {
		        _visibility: 1,
		        _pendingVisibility: 1,
		        _pendingMarkers: null,
		        _retryCache: null,
		        _transitions: null,
		        _current: null,
		        detach: function () {
		          var instance = primaryChildInstance,
		            fiber = instance._current;
		          if (null === fiber)
		            throw Error(
		              "Calling Offscreen.detach before instance handle has been set."
		            );
		          if (0 === (instance._pendingVisibility & 2)) {
		            var root = enqueueConcurrentRenderForLane(fiber, 2);
		            null !== root &&
		              ((instance._pendingVisibility |= 2),
		              scheduleUpdateOnFiber(root, fiber, 2));
		          }
		        },
		        attach: function () {
		          var instance = primaryChildInstance,
		            fiber = instance._current;
		          if (null === fiber)
		            throw Error(
		              "Calling Offscreen.detach before instance handle has been set."
		            );
		          if (0 !== (instance._pendingVisibility & 2)) {
		            var root = enqueueConcurrentRenderForLane(fiber, 2);
		            null !== root &&
		              ((instance._pendingVisibility &= -3),
		              scheduleUpdateOnFiber(root, fiber, 2));
		          }
		        }
		      };
		      pendingProps.stateNode = primaryChildInstance;
		      return pendingProps;
		    }
		    function createFiberFromText(content, mode, lanes) {
		      content = createFiber(6, content, null, mode);
		      content.lanes = lanes;
		      return content;
		    }
		    function createFiberFromPortal(portal, mode, lanes) {
		      mode = createFiber(
		        4,
		        null !== portal.children ? portal.children : [],
		        portal.key,
		        mode
		      );
		      mode.lanes = lanes;
		      mode.stateNode = {
		        containerInfo: portal.containerInfo,
		        pendingChildren: null,
		        implementation: portal.implementation
		      };
		      return mode;
		    }
		    function FiberRootNode(
		      containerInfo,
		      tag,
		      hydrate,
		      identifierPrefix,
		      onUncaughtError,
		      onCaughtError,
		      onRecoverableError,
		      formState
		    ) {
		      this.tag = 1;
		      this.containerInfo = containerInfo;
		      this.finishedWork =
		        this.pingCache =
		        this.current =
		        this.pendingChildren =
		          null;
		      this.timeoutHandle = noTimeout;
		      this.callbackNode =
		        this.next =
		        this.pendingContext =
		        this.context =
		        this.cancelPendingCommit =
		          null;
		      this.callbackPriority = 0;
		      this.expirationTimes = createLaneMap(-1);
		      this.entangledLanes =
		        this.shellSuspendCounter =
		        this.errorRecoveryDisabledLanes =
		        this.finishedLanes =
		        this.expiredLanes =
		        this.warmLanes =
		        this.pingedLanes =
		        this.suspendedLanes =
		        this.pendingLanes =
		          0;
		      this.entanglements = createLaneMap(0);
		      this.hiddenUpdates = createLaneMap(null);
		      this.identifierPrefix = identifierPrefix;
		      this.onUncaughtError = onUncaughtError;
		      this.onCaughtError = onCaughtError;
		      this.onRecoverableError = onRecoverableError;
		      this.pooledCache = null;
		      this.pooledCacheLanes = 0;
		      this.formState = formState;
		      this.incompleteTransitions = new Map();
		      this.passiveEffectDuration = this.effectDuration = -0;
		      this.memoizedUpdaters = new Set();
		      containerInfo = this.pendingUpdatersLaneMap = [];
		      for (tag = 0; 31 > tag; tag++) containerInfo.push(new Set());
		      this._debugRootType = hydrate ? "hydrateRoot()" : "createRoot()";
		    }
		    function createFiberRoot(
		      containerInfo,
		      tag,
		      hydrate,
		      initialChildren,
		      hydrationCallbacks,
		      isStrictMode,
		      identifierPrefix,
		      onUncaughtError,
		      onCaughtError,
		      onRecoverableError,
		      transitionCallbacks,
		      formState
		    ) {
		      containerInfo = new FiberRootNode(
		        containerInfo,
		        tag,
		        hydrate,
		        identifierPrefix,
		        onUncaughtError,
		        onCaughtError,
		        onRecoverableError,
		        formState
		      );
		      tag = 1;
		      !0 === isStrictMode && (tag |= 24);
		      isDevToolsPresent && (tag |= 2);
		      isStrictMode = createFiber(3, null, null, tag);
		      containerInfo.current = isStrictMode;
		      isStrictMode.stateNode = containerInfo;
		      tag = createCache();
		      retainCache(tag);
		      containerInfo.pooledCache = tag;
		      retainCache(tag);
		      isStrictMode.memoizedState = {
		        element: initialChildren,
		        isDehydrated: hydrate,
		        cache: tag
		      };
		      initializeUpdateQueue(isStrictMode);
		      return containerInfo;
		    }
		    function testStringCoercion(value) {
		      return "" + value;
		    }
		    function getContextForSubtree(parentComponent) {
		      if (!parentComponent) return emptyContextObject;
		      parentComponent = emptyContextObject;
		      return parentComponent;
		    }
		    function updateContainerSync(
		      element,
		      container,
		      parentComponent,
		      callback
		    ) {
		      0 === container.tag && flushPassiveEffects();
		      updateContainerImpl(
		        container.current,
		        2,
		        element,
		        container,
		        parentComponent,
		        callback
		      );
		      return 2;
		    }
		    function updateContainerImpl(
		      rootFiber,
		      lane,
		      element,
		      container,
		      parentComponent,
		      callback
		    ) {
		      if (
		        injectedHook &&
		        "function" === typeof injectedHook.onScheduleFiberRoot
		      )
		        try {
		          injectedHook.onScheduleFiberRoot(rendererID, container, element);
		        } catch (err) {
		          hasLoggedError ||
		            ((hasLoggedError = !0),
		            console.error(
		              "React instrumentation encountered an error: %s",
		              err
		            ));
		        }
		      null !== injectedProfilingHooks &&
		        "function" === typeof injectedProfilingHooks.markRenderScheduled &&
		        injectedProfilingHooks.markRenderScheduled(lane);
		      parentComponent = getContextForSubtree(parentComponent);
		      null === container.context
		        ? (container.context = parentComponent)
		        : (container.pendingContext = parentComponent);
		      isRendering &&
		        null !== current &&
		        !didWarnAboutNestedUpdates &&
		        ((didWarnAboutNestedUpdates = !0),
		        console.error(
		          "Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.",
		          getComponentNameFromFiber(current) || "Unknown"
		        ));
		      container = createUpdate(lane);
		      container.payload = { element: element };
		      callback = void 0 === callback ? null : callback;
		      null !== callback &&
		        ("function" !== typeof callback &&
		          console.error(
		            "Expected the last optional `callback` argument to be a function. Instead received: %s.",
		            callback
		          ),
		        (container.callback = callback));
		      element = enqueueUpdate(rootFiber, container, lane);
		      null !== element &&
		        (scheduleUpdateOnFiber(element, rootFiber, lane),
		        entangleTransitions(element, rootFiber, lane));
		    }
		    function markRetryLaneImpl(fiber, retryLane) {
		      fiber = fiber.memoizedState;
		      if (null !== fiber && null !== fiber.dehydrated) {
		        var a = fiber.retryLane;
		        fiber.retryLane = 0 !== a && a < retryLane ? a : retryLane;
		      }
		    }
		    function markRetryLaneIfNotHydrated(fiber, retryLane) {
		      markRetryLaneImpl(fiber, retryLane);
		      (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);
		    }
		    function getCurrentFiberForDevTools() {
		      return current;
		    }
		    function getLaneLabelMap() {
		      for (var map = new Map(), lane = 1, index = 0; 31 > index; index++) {
		        var label = getLabelForLane(lane);
		        map.set(lane, label);
		        lane *= 2;
		      }
		      return map;
		    }
		    var exports = {};
		    var React = React__default,
		      Scheduler = requireScheduler$1(),
		      assign = Object.assign,
		      REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element"),
		      REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"),
		      REACT_PORTAL_TYPE = Symbol.for("react.portal"),
		      REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"),
		      REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"),
		      REACT_PROFILER_TYPE = Symbol.for("react.profiler"),
		      REACT_PROVIDER_TYPE = Symbol.for("react.provider"),
		      REACT_CONSUMER_TYPE = Symbol.for("react.consumer"),
		      REACT_CONTEXT_TYPE = Symbol.for("react.context"),
		      REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"),
		      REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"),
		      REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"),
		      REACT_MEMO_TYPE = Symbol.for("react.memo"),
		      REACT_LAZY_TYPE = Symbol.for("react.lazy");
		    var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
		    var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel"),
		      MAYBE_ITERATOR_SYMBOL = Symbol.iterator,
		      REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"),
		      ReactSharedInternals =
		        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,
		      disabledDepth = 0,
		      prevLog,
		      prevInfo,
		      prevWarn,
		      prevError,
		      prevGroup,
		      prevGroupCollapsed,
		      prevGroupEnd;
		    disabledLog.__reactDisabledLog = !0;
		    var prefix,
		      suffix,
		      reentry = !1;
		    var componentFrameCache = new (
		      "function" === typeof WeakMap ? WeakMap : Map
		    )();
		    var current = null,
		      isRendering = !1,
		      isArrayImpl = Array.isArray,
		      rendererVersion = $$$config.rendererVersion,
		      rendererPackageName = $$$config.rendererPackageName,
		      extraDevToolsConfig = $$$config.extraDevToolsConfig,
		      getPublicInstance = $$$config.getPublicInstance,
		      getRootHostContext = $$$config.getRootHostContext,
		      getChildHostContext = $$$config.getChildHostContext,
		      prepareForCommit = $$$config.prepareForCommit,
		      resetAfterCommit = $$$config.resetAfterCommit,
		      createInstance = $$$config.createInstance,
		      appendInitialChild = $$$config.appendInitialChild,
		      finalizeInitialChildren = $$$config.finalizeInitialChildren,
		      shouldSetTextContent = $$$config.shouldSetTextContent,
		      createTextInstance = $$$config.createTextInstance,
		      scheduleTimeout = $$$config.scheduleTimeout,
		      cancelTimeout = $$$config.cancelTimeout,
		      noTimeout = $$$config.noTimeout,
		      isPrimaryRenderer = $$$config.isPrimaryRenderer;
		    $$$config.warnsIfNotActing;
		    var supportsMutation = $$$config.supportsMutation,
		      supportsPersistence = $$$config.supportsPersistence,
		      supportsHydration = $$$config.supportsHydration,
		      getInstanceFromNode = $$$config.getInstanceFromNode;
		    $$$config.beforeActiveInstanceBlur;
		    $$$config.afterActiveInstanceBlur;
		    var preparePortalMount = $$$config.preparePortalMount;
		    $$$config.prepareScopeUpdate;
		    $$$config.getInstanceFromScope;
		    var setCurrentUpdatePriority = $$$config.setCurrentUpdatePriority,
		      getCurrentUpdatePriority = $$$config.getCurrentUpdatePriority,
		      resolveUpdatePriority = $$$config.resolveUpdatePriority;
		    $$$config.resolveEventType;
		    $$$config.resolveEventTimeStamp;
		    var shouldAttemptEagerTransition = $$$config.shouldAttemptEagerTransition,
		      detachDeletedInstance = $$$config.detachDeletedInstance;
		    $$$config.requestPostPaintCallback;
		    var maySuspendCommit = $$$config.maySuspendCommit,
		      preloadInstance = $$$config.preloadInstance,
		      startSuspendingCommit = $$$config.startSuspendingCommit,
		      suspendInstance = $$$config.suspendInstance,
		      waitForCommitToBeReady = $$$config.waitForCommitToBeReady,
		      NotPendingTransition = $$$config.NotPendingTransition,
		      HostTransitionContext = $$$config.HostTransitionContext,
		      resetFormInstance = $$$config.resetFormInstance,
		      bindToConsole = $$$config.bindToConsole,
		      supportsMicrotasks = $$$config.supportsMicrotasks,
		      scheduleMicrotask = $$$config.scheduleMicrotask,
		      supportsTestSelectors = $$$config.supportsTestSelectors,
		      findFiberRoot = $$$config.findFiberRoot,
		      getBoundingRect = $$$config.getBoundingRect,
		      getTextContent = $$$config.getTextContent,
		      isHiddenSubtree = $$$config.isHiddenSubtree,
		      matchAccessibilityRole = $$$config.matchAccessibilityRole,
		      setFocusIfFocusable = $$$config.setFocusIfFocusable,
		      setupIntersectionObserver = $$$config.setupIntersectionObserver,
		      appendChild = $$$config.appendChild,
		      appendChildToContainer = $$$config.appendChildToContainer,
		      commitTextUpdate = $$$config.commitTextUpdate,
		      commitMount = $$$config.commitMount,
		      commitUpdate = $$$config.commitUpdate,
		      insertBefore = $$$config.insertBefore,
		      insertInContainerBefore = $$$config.insertInContainerBefore,
		      removeChild = $$$config.removeChild,
		      removeChildFromContainer = $$$config.removeChildFromContainer,
		      resetTextContent = $$$config.resetTextContent,
		      hideInstance = $$$config.hideInstance,
		      hideTextInstance = $$$config.hideTextInstance,
		      unhideInstance = $$$config.unhideInstance,
		      unhideTextInstance = $$$config.unhideTextInstance,
		      clearContainer = $$$config.clearContainer,
		      cloneInstance = $$$config.cloneInstance,
		      createContainerChildSet = $$$config.createContainerChildSet,
		      appendChildToContainerChildSet = $$$config.appendChildToContainerChildSet,
		      finalizeContainerChildren = $$$config.finalizeContainerChildren,
		      replaceContainerChildren = $$$config.replaceContainerChildren,
		      cloneHiddenInstance = $$$config.cloneHiddenInstance,
		      cloneHiddenTextInstance = $$$config.cloneHiddenTextInstance,
		      isSuspenseInstancePending = $$$config.isSuspenseInstancePending,
		      isSuspenseInstanceFallback = $$$config.isSuspenseInstanceFallback,
		      getSuspenseInstanceFallbackErrorDetails =
		        $$$config.getSuspenseInstanceFallbackErrorDetails,
		      registerSuspenseInstanceRetry = $$$config.registerSuspenseInstanceRetry,
		      canHydrateFormStateMarker = $$$config.canHydrateFormStateMarker,
		      isFormStateMarkerMatching = $$$config.isFormStateMarkerMatching,
		      getNextHydratableSibling = $$$config.getNextHydratableSibling,
		      getFirstHydratableChild = $$$config.getFirstHydratableChild,
		      getFirstHydratableChildWithinContainer =
		        $$$config.getFirstHydratableChildWithinContainer,
		      getFirstHydratableChildWithinSuspenseInstance =
		        $$$config.getFirstHydratableChildWithinSuspenseInstance,
		      canHydrateInstance = $$$config.canHydrateInstance,
		      canHydrateTextInstance = $$$config.canHydrateTextInstance,
		      canHydrateSuspenseInstance = $$$config.canHydrateSuspenseInstance,
		      hydrateInstance = $$$config.hydrateInstance,
		      hydrateTextInstance = $$$config.hydrateTextInstance,
		      hydrateSuspenseInstance = $$$config.hydrateSuspenseInstance,
		      getNextHydratableInstanceAfterSuspenseInstance =
		        $$$config.getNextHydratableInstanceAfterSuspenseInstance,
		      commitHydratedContainer = $$$config.commitHydratedContainer,
		      commitHydratedSuspenseInstance = $$$config.commitHydratedSuspenseInstance,
		      clearSuspenseBoundary = $$$config.clearSuspenseBoundary,
		      clearSuspenseBoundaryFromContainer =
		        $$$config.clearSuspenseBoundaryFromContainer,
		      shouldDeleteUnhydratedTailInstances =
		        $$$config.shouldDeleteUnhydratedTailInstances,
		      diffHydratedPropsForDevWarnings =
		        $$$config.diffHydratedPropsForDevWarnings,
		      diffHydratedTextForDevWarnings = $$$config.diffHydratedTextForDevWarnings,
		      describeHydratableInstanceForDevWarnings =
		        $$$config.describeHydratableInstanceForDevWarnings,
		      validateHydratableInstance = $$$config.validateHydratableInstance,
		      validateHydratableTextInstance = $$$config.validateHydratableTextInstance,
		      supportsResources = $$$config.supportsResources,
		      isHostHoistableType = $$$config.isHostHoistableType,
		      getHoistableRoot = $$$config.getHoistableRoot,
		      getResource = $$$config.getResource,
		      acquireResource = $$$config.acquireResource,
		      releaseResource = $$$config.releaseResource,
		      hydrateHoistable = $$$config.hydrateHoistable,
		      mountHoistable = $$$config.mountHoistable,
		      unmountHoistable = $$$config.unmountHoistable,
		      createHoistableInstance = $$$config.createHoistableInstance,
		      prepareToCommitHoistables = $$$config.prepareToCommitHoistables,
		      mayResourceSuspendCommit = $$$config.mayResourceSuspendCommit,
		      preloadResource = $$$config.preloadResource,
		      suspendResource = $$$config.suspendResource,
		      supportsSingletons = $$$config.supportsSingletons,
		      resolveSingletonInstance = $$$config.resolveSingletonInstance,
		      clearSingleton = $$$config.clearSingleton,
		      acquireSingletonInstance = $$$config.acquireSingletonInstance,
		      releaseSingletonInstance = $$$config.releaseSingletonInstance,
		      isHostSingletonType = $$$config.isHostSingletonType,
		      valueStack = [];
		    var fiberStack = [];
		    var index$jscomp$0 = -1,
		      emptyContextObject = {};
		    Object.freeze(emptyContextObject);
		    var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback,
		      log$1 = Math.log,
		      LN2 = Math.LN2,
		      nextTransitionLane = 128,
		      nextRetryLane = 4194304,
		      scheduleCallback$3 = Scheduler.unstable_scheduleCallback,
		      cancelCallback$1 = Scheduler.unstable_cancelCallback,
		      shouldYield = Scheduler.unstable_shouldYield,
		      requestPaint = Scheduler.unstable_requestPaint,
		      now$1 = Scheduler.unstable_now,
		      ImmediatePriority = Scheduler.unstable_ImmediatePriority,
		      UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
		      NormalPriority$1 = Scheduler.unstable_NormalPriority,
		      IdlePriority = Scheduler.unstable_IdlePriority,
		      log = Scheduler.log,
		      unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue,
		      rendererID = null,
		      injectedHook = null,
		      injectedProfilingHooks = null,
		      hasLoggedError = !1,
		      isDevToolsPresent = "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__,
		      objectIs = "function" === typeof Object.is ? Object.is : is,
		      CapturedStacks = new WeakMap(),
		      forkStack = [],
		      forkStackIndex = 0,
		      treeForkProvider = null,
		      treeForkCount = 0,
		      idStack = [],
		      idStackIndex = 0,
		      treeContextProvider = null,
		      treeContextId = 1,
		      treeContextOverflow = "",
		      contextStackCursor = createCursor(null),
		      contextFiberStackCursor = createCursor(null),
		      rootInstanceStackCursor = createCursor(null),
		      hostTransitionProviderCursor = createCursor(null),
		      needsEscaping = /["'&<>\n\t]|^\s|\s$/,
		      hydrationParentFiber = null,
		      nextHydratableInstance = null,
		      isHydrating = !1,
		      didSuspendOrErrorDEV = !1,
		      hydrationDiffRootDEV = null,
		      hydrationErrors = null,
		      rootOrSingletonContext = !1,
		      HydrationMismatchException = Error(
		        "Hydration Mismatch Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."
		      ),
		      NoMode = 0,
		      concurrentQueues = [],
		      concurrentQueuesIndex = 0,
		      concurrentlyUpdatedLanes = 0,
		      now = Scheduler.unstable_now,
		      commitStartTime = -0,
		      profilerStartTime = -1.1,
		      profilerEffectDuration = -0,
		      currentUpdateIsNested = !1,
		      nestedUpdateScheduled = !1,
		      firstScheduledRoot = null,
		      lastScheduledRoot = null,
		      didScheduleMicrotask = !1,
		      didScheduleMicrotask_act = !1,
		      mightHavePendingSyncWork = !1,
		      isFlushingWork = !1,
		      currentEventTransitionLane = 0,
		      fakeActCallbackNode$1 = {},
		      currentEntangledListeners = null,
		      currentEntangledPendingCount = 0,
		      currentEntangledLane = 0,
		      currentEntangledActionThenable = null,
		      UpdateState = 0,
		      ReplaceState = 1,
		      ForceUpdate = 2,
		      CaptureUpdate = 3,
		      hasForceUpdate = !1;
		    var didWarnUpdateInsideUpdate = !1;
		    var currentlyProcessingQueue = null;
		    var didReadFromEntangledAsyncAction = !1,
		      hasOwnProperty = Object.prototype.hasOwnProperty,
		      ReactStrictModeWarnings = {
		        recordUnsafeLifecycleWarnings: function () {},
		        flushPendingUnsafeLifecycleWarnings: function () {},
		        recordLegacyContextWarning: function () {},
		        flushLegacyContextWarning: function () {},
		        discardPendingWarnings: function () {}
		      },
		      pendingComponentWillMountWarnings = [],
		      pendingUNSAFE_ComponentWillMountWarnings = [],
		      pendingComponentWillReceivePropsWarnings = [],
		      pendingUNSAFE_ComponentWillReceivePropsWarnings = [],
		      pendingComponentWillUpdateWarnings = [],
		      pendingUNSAFE_ComponentWillUpdateWarnings = [],
		      didWarnAboutUnsafeLifecycles = new Set();
		    ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (
		      fiber,
		      instance
		    ) {
		      didWarnAboutUnsafeLifecycles.has(fiber.type) ||
		        ("function" === typeof instance.componentWillMount &&
		          !0 !== instance.componentWillMount.__suppressDeprecationWarning &&
		          pendingComponentWillMountWarnings.push(fiber),
		        fiber.mode & 8 &&
		          "function" === typeof instance.UNSAFE_componentWillMount &&
		          pendingUNSAFE_ComponentWillMountWarnings.push(fiber),
		        "function" === typeof instance.componentWillReceiveProps &&
		          !0 !==
		            instance.componentWillReceiveProps.__suppressDeprecationWarning &&
		          pendingComponentWillReceivePropsWarnings.push(fiber),
		        fiber.mode & 8 &&
		          "function" === typeof instance.UNSAFE_componentWillReceiveProps &&
		          pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber),
		        "function" === typeof instance.componentWillUpdate &&
		          !0 !== instance.componentWillUpdate.__suppressDeprecationWarning &&
		          pendingComponentWillUpdateWarnings.push(fiber),
		        fiber.mode & 8 &&
		          "function" === typeof instance.UNSAFE_componentWillUpdate &&
		          pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber));
		    };
		    ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
		      var componentWillMountUniqueNames = new Set();
		      0 < pendingComponentWillMountWarnings.length &&
		        (pendingComponentWillMountWarnings.forEach(function (fiber) {
		          componentWillMountUniqueNames.add(
		            getComponentNameFromFiber(fiber) || "Component"
		          );
		          didWarnAboutUnsafeLifecycles.add(fiber.type);
		        }),
		        (pendingComponentWillMountWarnings = []));
		      var UNSAFE_componentWillMountUniqueNames = new Set();
		      0 < pendingUNSAFE_ComponentWillMountWarnings.length &&
		        (pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
		          UNSAFE_componentWillMountUniqueNames.add(
		            getComponentNameFromFiber(fiber) || "Component"
		          );
		          didWarnAboutUnsafeLifecycles.add(fiber.type);
		        }),
		        (pendingUNSAFE_ComponentWillMountWarnings = []));
		      var componentWillReceivePropsUniqueNames = new Set();
		      0 < pendingComponentWillReceivePropsWarnings.length &&
		        (pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
		          componentWillReceivePropsUniqueNames.add(
		            getComponentNameFromFiber(fiber) || "Component"
		          );
		          didWarnAboutUnsafeLifecycles.add(fiber.type);
		        }),
		        (pendingComponentWillReceivePropsWarnings = []));
		      var UNSAFE_componentWillReceivePropsUniqueNames = new Set();
		      0 < pendingUNSAFE_ComponentWillReceivePropsWarnings.length &&
		        (pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(
		          function (fiber) {
		            UNSAFE_componentWillReceivePropsUniqueNames.add(
		              getComponentNameFromFiber(fiber) || "Component"
		            );
		            didWarnAboutUnsafeLifecycles.add(fiber.type);
		          }
		        ),
		        (pendingUNSAFE_ComponentWillReceivePropsWarnings = []));
		      var componentWillUpdateUniqueNames = new Set();
		      0 < pendingComponentWillUpdateWarnings.length &&
		        (pendingComponentWillUpdateWarnings.forEach(function (fiber) {
		          componentWillUpdateUniqueNames.add(
		            getComponentNameFromFiber(fiber) || "Component"
		          );
		          didWarnAboutUnsafeLifecycles.add(fiber.type);
		        }),
		        (pendingComponentWillUpdateWarnings = []));
		      var UNSAFE_componentWillUpdateUniqueNames = new Set();
		      0 < pendingUNSAFE_ComponentWillUpdateWarnings.length &&
		        (pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
		          UNSAFE_componentWillUpdateUniqueNames.add(
		            getComponentNameFromFiber(fiber) || "Component"
		          );
		          didWarnAboutUnsafeLifecycles.add(fiber.type);
		        }),
		        (pendingUNSAFE_ComponentWillUpdateWarnings = []));
		      if (0 < UNSAFE_componentWillMountUniqueNames.size) {
		        var sortedNames = setToSortedString(
		          UNSAFE_componentWillMountUniqueNames
		        );
		        console.error(
		          "Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s",
		          sortedNames
		        );
		      }
		      0 < UNSAFE_componentWillReceivePropsUniqueNames.size &&
		        ((sortedNames = setToSortedString(
		          UNSAFE_componentWillReceivePropsUniqueNames
		        )),
		        console.error(
		          "Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n\nPlease update the following components: %s",
		          sortedNames
		        ));
		      0 < UNSAFE_componentWillUpdateUniqueNames.size &&
		        ((sortedNames = setToSortedString(
		          UNSAFE_componentWillUpdateUniqueNames
		        )),
		        console.error(
		          "Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s",
		          sortedNames
		        ));
		      0 < componentWillMountUniqueNames.size &&
		        ((sortedNames = setToSortedString(componentWillMountUniqueNames)),
		        console.warn(
		          "componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
		          sortedNames
		        ));
		      0 < componentWillReceivePropsUniqueNames.size &&
		        ((sortedNames = setToSortedString(
		          componentWillReceivePropsUniqueNames
		        )),
		        console.warn(
		          "componentWillReceiveProps has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
		          sortedNames
		        ));
		      0 < componentWillUpdateUniqueNames.size &&
		        ((sortedNames = setToSortedString(componentWillUpdateUniqueNames)),
		        console.warn(
		          "componentWillUpdate has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s",
		          sortedNames
		        ));
		    };
		    var pendingLegacyContextWarning = new Map(),
		      didWarnAboutLegacyContext = new Set();
		    ReactStrictModeWarnings.recordLegacyContextWarning = function (
		      fiber,
		      instance
		    ) {
		      var strictRoot = null;
		      for (var node = fiber; null !== node; )
		        node.mode & 8 && (strictRoot = node), (node = node.return);
		      null === strictRoot
		        ? console.error(
		            "Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue."
		          )
		        : !didWarnAboutLegacyContext.has(fiber.type) &&
		          ((node = pendingLegacyContextWarning.get(strictRoot)),
		          null != fiber.type.contextTypes ||
		            null != fiber.type.childContextTypes ||
		            (null !== instance &&
		              "function" === typeof instance.getChildContext)) &&
		          (void 0 === node &&
		            ((node = []), pendingLegacyContextWarning.set(strictRoot, node)),
		          node.push(fiber));
		    };
		    ReactStrictModeWarnings.flushLegacyContextWarning = function () {
		      pendingLegacyContextWarning.forEach(function (fiberArray) {
		        if (0 !== fiberArray.length) {
		          var firstFiber = fiberArray[0],
		            uniqueNames = new Set();
		          fiberArray.forEach(function (fiber) {
		            uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
		            didWarnAboutLegacyContext.add(fiber.type);
		          });
		          var sortedNames = setToSortedString(uniqueNames);
		          runWithFiberInDEV(firstFiber, function () {
		            console.error(
		              "Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://react.dev/link/legacy-context",
		              sortedNames
		            );
		          });
		        }
		      });
		    };
		    ReactStrictModeWarnings.discardPendingWarnings = function () {
		      pendingComponentWillMountWarnings = [];
		      pendingUNSAFE_ComponentWillMountWarnings = [];
		      pendingComponentWillReceivePropsWarnings = [];
		      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
		      pendingComponentWillUpdateWarnings = [];
		      pendingUNSAFE_ComponentWillUpdateWarnings = [];
		      pendingLegacyContextWarning = new Map();
		    };
		    var SuspenseException = Error(
		        "Suspense Exception: This is not a real error! It's an implementation detail of `use` to interrupt the current render. You must either rethrow it immediately, or move the `use` call outside of the `try/catch` block. Capturing without rethrowing will lead to unexpected behavior.\n\nTo handle async errors, wrap your component in an error boundary, or call the promise's `.catch` method and pass the result to `use`"
		      ),
		      SuspenseyCommitException = Error(
		        "Suspense Exception: This is not a real error, and should not leak into userspace. If you're seeing this, it's likely a bug in React."
		      ),
		      noopSuspenseyCommitThenable = {
		        then: function () {
		          console.error(
		            'Internal React error: A listener was unexpectedly attached to a "noop" thenable. This is a bug in React. Please file an issue.'
		          );
		        }
		      },
		      suspendedThenable = null,
		      needsToResetSuspendedThenableDEV = !1,
		      callComponent = {
		        "react-stack-bottom-frame": function (Component, props, secondArg) {
		          var wasRendering = isRendering;
		          isRendering = !0;
		          try {
		            return Component(props, secondArg);
		          } finally {
		            isRendering = wasRendering;
		          }
		        }
		      },
		      callComponentInDEV =
		        callComponent["react-stack-bottom-frame"].bind(callComponent),
		      callRender = {
		        "react-stack-bottom-frame": function (instance) {
		          var wasRendering = isRendering;
		          isRendering = !0;
		          try {
		            return instance.render();
		          } finally {
		            isRendering = wasRendering;
		          }
		        }
		      },
		      callRenderInDEV = callRender["react-stack-bottom-frame"].bind(callRender),
		      callComponentDidMount = {
		        "react-stack-bottom-frame": function (finishedWork, instance) {
		          try {
		            instance.componentDidMount();
		          } catch (error) {
		            captureCommitPhaseError(finishedWork, finishedWork.return, error);
		          }
		        }
		      },
		      callComponentDidMountInDEV = callComponentDidMount[
		        "react-stack-bottom-frame"
		      ].bind(callComponentDidMount),
		      callComponentDidUpdate = {
		        "react-stack-bottom-frame": function (
		          finishedWork,
		          instance,
		          prevProps,
		          prevState,
		          snapshot
		        ) {
		          try {
		            instance.componentDidUpdate(prevProps, prevState, snapshot);
		          } catch (error) {
		            captureCommitPhaseError(finishedWork, finishedWork.return, error);
		          }
		        }
		      },
		      callComponentDidUpdateInDEV = callComponentDidUpdate[
		        "react-stack-bottom-frame"
		      ].bind(callComponentDidUpdate),
		      callComponentDidCatch = {
		        "react-stack-bottom-frame": function (instance, errorInfo) {
		          var stack = errorInfo.stack;
		          instance.componentDidCatch(errorInfo.value, {
		            componentStack: null !== stack ? stack : ""
		          });
		        }
		      },
		      callComponentDidCatchInDEV = callComponentDidCatch[
		        "react-stack-bottom-frame"
		      ].bind(callComponentDidCatch),
		      callComponentWillUnmount = {
		        "react-stack-bottom-frame": function (
		          current,
		          nearestMountedAncestor,
		          instance
		        ) {
		          try {
		            instance.componentWillUnmount();
		          } catch (error) {
		            captureCommitPhaseError(current, nearestMountedAncestor, error);
		          }
		        }
		      },
		      callComponentWillUnmountInDEV = callComponentWillUnmount[
		        "react-stack-bottom-frame"
		      ].bind(callComponentWillUnmount),
		      callCreate = {
		        "react-stack-bottom-frame": function (effect) {
		          var create = effect.create;
		          effect = effect.inst;
		          create = create();
		          return (effect.destroy = create);
		        }
		      },
		      callCreateInDEV = callCreate["react-stack-bottom-frame"].bind(callCreate),
		      callDestroy = {
		        "react-stack-bottom-frame": function (
		          current,
		          nearestMountedAncestor,
		          destroy
		        ) {
		          try {
		            destroy();
		          } catch (error) {
		            captureCommitPhaseError(current, nearestMountedAncestor, error);
		          }
		        }
		      },
		      callDestroyInDEV =
		        callDestroy["react-stack-bottom-frame"].bind(callDestroy),
		      callLazyInit = {
		        "react-stack-bottom-frame": function (lazy) {
		          var init = lazy._init;
		          return init(lazy._payload);
		        }
		      },
		      callLazyInitInDEV =
		        callLazyInit["react-stack-bottom-frame"].bind(callLazyInit),
		      thenableState$1 = null,
		      thenableIndexCounter$1 = 0,
		      currentDebugInfo = null,
		      didWarnAboutMaps;
		    var didWarnAboutGenerators = (didWarnAboutMaps = !1);
		    var ownerHasKeyUseWarning = {};
		    var ownerHasFunctionTypeWarning = {};
		    var ownerHasSymbolTypeWarning = {};
		    warnForMissingKey = function (returnFiber, workInProgress, child) {
		      if (
		        null !== child &&
		        "object" === typeof child &&
		        child._store &&
		        ((!child._store.validated && null == child.key) ||
		          2 === child._store.validated)
		      ) {
		        if ("object" !== typeof child._store)
		          throw Error(
		            "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue."
		          );
		        child._store.validated = 1;
		        var componentName = getComponentNameFromFiber(returnFiber),
		          componentKey = componentName || "null";
		        if (!ownerHasKeyUseWarning[componentKey]) {
		          ownerHasKeyUseWarning[componentKey] = !0;
		          child = child._owner;
		          returnFiber = returnFiber._debugOwner;
		          var currentComponentErrorInfo = "";
		          returnFiber &&
		            "number" === typeof returnFiber.tag &&
		            (componentKey = getComponentNameFromFiber(returnFiber)) &&
		            (currentComponentErrorInfo =
		              "\n\nCheck the render method of `" + componentKey + "`.");
		          currentComponentErrorInfo ||
		            (componentName &&
		              (currentComponentErrorInfo =
		                "\n\nCheck the top-level render call using <" +
		                componentName +
		                ">."));
		          var childOwnerAppendix = "";
		          null != child &&
		            returnFiber !== child &&
		            ((componentName = null),
		            "number" === typeof child.tag
		              ? (componentName = getComponentNameFromFiber(child))
		              : "string" === typeof child.name && (componentName = child.name),
		            componentName &&
		              (childOwnerAppendix =
		                " It was passed a child from " + componentName + "."));
		          runWithFiberInDEV(workInProgress, function () {
		            console.error(
		              'Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.',
		              currentComponentErrorInfo,
		              childOwnerAppendix
		            );
		          });
		        }
		      }
		    };
		    var reconcileChildFibers = createChildReconciler(!0),
		      mountChildFibers = createChildReconciler(!1),
		      currentTreeHiddenStackCursor = createCursor(null),
		      prevEntangledRenderLanesCursor = createCursor(0),
		      suspenseHandlerStackCursor = createCursor(null),
		      shellBoundary = null,
		      SubtreeSuspenseContextMask = 1,
		      ForceSuspenseFallback = 2,
		      suspenseStackCursor = createCursor(0),
		      NoFlags = 0,
		      HasEffect = 1,
		      Insertion = 2,
		      Layout = 4,
		      Passive = 8,
		      didWarnUncachedGetSnapshot;
		    var didWarnAboutMismatchedHooksForComponent = new Set();
		    var didWarnAboutUseWrappedInTryCatch = new Set();
		    var didWarnAboutAsyncClientComponent = new Set();
		    var didWarnAboutUseFormState = new Set();
		    var renderLanes = 0,
		      currentlyRenderingFiber$1 = null,
		      currentHook = null,
		      workInProgressHook = null,
		      didScheduleRenderPhaseUpdate = !1,
		      didScheduleRenderPhaseUpdateDuringThisPass = !1,
		      shouldDoubleInvokeUserFnsInHooksDEV = !1,
		      localIdCounter = 0,
		      thenableIndexCounter = 0,
		      thenableState = null,
		      globalClientIdCounter = 0,
		      RE_RENDER_LIMIT = 25,
		      currentHookNameInDev = null,
		      hookTypesDev = null,
		      hookTypesUpdateIndexDev = -1,
		      ignorePreviousDependencies = !1;
		    var createFunctionComponentUpdateQueue = function () {
		      return { lastEffect: null, events: null, stores: null, memoCache: null };
		    };
		    var ContextOnlyDispatcher = {
		      readContext: readContext,
		      use: use,
		      useCallback: throwInvalidHookError,
		      useContext: throwInvalidHookError,
		      useEffect: throwInvalidHookError,
		      useImperativeHandle: throwInvalidHookError,
		      useLayoutEffect: throwInvalidHookError,
		      useInsertionEffect: throwInvalidHookError,
		      useMemo: throwInvalidHookError,
		      useReducer: throwInvalidHookError,
		      useRef: throwInvalidHookError,
		      useState: throwInvalidHookError,
		      useDebugValue: throwInvalidHookError,
		      useDeferredValue: throwInvalidHookError,
		      useTransition: throwInvalidHookError,
		      useSyncExternalStore: throwInvalidHookError,
		      useId: throwInvalidHookError
		    };
		    ContextOnlyDispatcher.useCacheRefresh = throwInvalidHookError;
		    ContextOnlyDispatcher.useMemoCache = throwInvalidHookError;
		    ContextOnlyDispatcher.useHostTransitionStatus = throwInvalidHookError;
		    ContextOnlyDispatcher.useFormState = throwInvalidHookError;
		    ContextOnlyDispatcher.useActionState = throwInvalidHookError;
		    ContextOnlyDispatcher.useOptimistic = throwInvalidHookError;
		    var HooksDispatcherOnMountInDEV = null,
		      HooksDispatcherOnMountWithHookTypesInDEV = null,
		      HooksDispatcherOnUpdateInDEV = null,
		      HooksDispatcherOnRerenderInDEV = null,
		      InvalidNestedHooksDispatcherOnMountInDEV = null,
		      InvalidNestedHooksDispatcherOnUpdateInDEV = null,
		      InvalidNestedHooksDispatcherOnRerenderInDEV = null;
		    HooksDispatcherOnMountInDEV = {
		      readContext: function (context) {
		        return readContext(context);
		      },
		      use: use,
		      useCallback: function (callback, deps) {
		        currentHookNameInDev = "useCallback";
		        mountHookTypesDev();
		        checkDepsAreArrayDev(deps);
		        return mountCallback(callback, deps);
		      },
		      useContext: function (context) {
		        currentHookNameInDev = "useContext";
		        mountHookTypesDev();
		        return readContext(context);
		      },
		      useEffect: function (create, deps) {
		        currentHookNameInDev = "useEffect";
		        mountHookTypesDev();
		        checkDepsAreArrayDev(deps);
		        return mountEffect(create, deps);
		      },
		      useImperativeHandle: function (ref, create, deps) {
		        currentHookNameInDev = "useImperativeHandle";
		        mountHookTypesDev();
		        checkDepsAreArrayDev(deps);
		        return mountImperativeHandle(ref, create, deps);
		      },
		      useInsertionEffect: function (create, deps) {
		        currentHookNameInDev = "useInsertionEffect";
		        mountHookTypesDev();
		        checkDepsAreArrayDev(deps);
		        mountEffectImpl(4, Insertion, create, deps);
		      },
		      useLayoutEffect: function (create, deps) {
		        currentHookNameInDev = "useLayoutEffect";
		        mountHookTypesDev();
		        checkDepsAreArrayDev(deps);
		        return mountLayoutEffect(create, deps);
		      },
		      useMemo: function (create, deps) {
		        currentHookNameInDev = "useMemo";
		        mountHookTypesDev();
		        checkDepsAreArrayDev(deps);
		        var prevDispatcher = ReactSharedInternals.H;
		        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
		        try {
		          return mountMemo(create, deps);
		        } finally {
		          ReactSharedInternals.H = prevDispatcher;
		        }
		      },
		      useReducer: function (reducer, initialArg, init) {
		        currentHookNameInDev = "useReducer";
		        mountHookTypesDev();
		        var prevDispatcher = ReactSharedInternals.H;
		        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
		        try {
		          return mountReducer(reducer, initialArg, init);
		        } finally {
		          ReactSharedInternals.H = prevDispatcher;
		        }
		      },
		      useRef: function (initialValue) {
		        currentHookNameInDev = "useRef";
		        mountHookTypesDev();
		        return mountRef(initialValue);
		      },
		      useState: function (initialState) {
		        currentHookNameInDev = "useState";
		        mountHookTypesDev();
		        var prevDispatcher = ReactSharedInternals.H;
		        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
		        try {
		          return mountState(initialState);
		        } finally {
		          ReactSharedInternals.H = prevDispatcher;
		        }
		      },
		      useDebugValue: function () {
		        currentHookNameInDev = "useDebugValue";
		        mountHookTypesDev();
		      },
		      useDeferredValue: function (value, initialValue) {
		        currentHookNameInDev = "useDeferredValue";
		        mountHookTypesDev();
		        return mountDeferredValue(value, initialValue);
		      },
		      useTransition: function () {
		        currentHookNameInDev = "useTransition";
		        mountHookTypesDev();
		        return mountTransition();
		      },
		      useSyncExternalStore: function (
		        subscribe,
		        getSnapshot,
		        getServerSnapshot
		      ) {
		        currentHookNameInDev = "useSyncExternalStore";
		        mountHookTypesDev();
		        return mountSyncExternalStore(
		          subscribe,
		          getSnapshot,
		          getServerSnapshot
		        );
		      },
		      useId: function () {
		        currentHookNameInDev = "useId";
		        mountHookTypesDev();
		        return mountId();
		      },
		      useCacheRefresh: function () {
		        currentHookNameInDev = "useCacheRefresh";
		        mountHookTypesDev();
		        return mountRefresh();
		      }
		    };
		    HooksDispatcherOnMountInDEV.useMemoCache = useMemoCache;
		    HooksDispatcherOnMountInDEV.useHostTransitionStatus =
		      useHostTransitionStatus;
		    HooksDispatcherOnMountInDEV.useFormState = function (action, initialState) {
		      currentHookNameInDev = "useFormState";
		      mountHookTypesDev();
		      warnOnUseFormStateInDev();
		      return mountActionState(action, initialState);
		    };
		    HooksDispatcherOnMountInDEV.useActionState = function (
		      action,
		      initialState
		    ) {
		      currentHookNameInDev = "useActionState";
		      mountHookTypesDev();
		      return mountActionState(action, initialState);
		    };
		    HooksDispatcherOnMountInDEV.useOptimistic = function (passthrough) {
		      currentHookNameInDev = "useOptimistic";
		      mountHookTypesDev();
		      return mountOptimistic(passthrough);
		    };
		    HooksDispatcherOnMountWithHookTypesInDEV = {
		      readContext: function (context) {
		        return readContext(context);
		      },
		      use: use,
		      useCallback: function (callback, deps) {
		        currentHookNameInDev = "useCallback";
		        updateHookTypesDev();
		        return mountCallback(callback, deps);
		      },
		      useContext: function (context) {
		        currentHookNameInDev = "useContext";
		        updateHookTypesDev();
		        return readContext(context);
		      },
		      useEffect: function (create, deps) {
		        currentHookNameInDev = "useEffect";
		        updateHookTypesDev();
		        return mountEffect(create, deps);
		      },
		      useImperativeHandle: function (ref, create, deps) {
		        currentHookNameInDev = "useImperativeHandle";
		        updateHookTypesDev();
		        return mountImperativeHandle(ref, create, deps);
		      },
		      useInsertionEffect: function (create, deps) {
		        currentHookNameInDev = "useInsertionEffect";
		        updateHookTypesDev();
		        mountEffectImpl(4, Insertion, create, deps);
		      },
		      useLayoutEffect: function (create, deps) {
		        currentHookNameInDev = "useLayoutEffect";
		        updateHookTypesDev();
		        return mountLayoutEffect(create, deps);
		      },
		      useMemo: function (create, deps) {
		        currentHookNameInDev = "useMemo";
		        updateHookTypesDev();
		        var prevDispatcher = ReactSharedInternals.H;
		        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
		        try {
		          return mountMemo(create, deps);
		        } finally {
		          ReactSharedInternals.H = prevDispatcher;
		        }
		      },
		      useReducer: function (reducer, initialArg, init) {
		        currentHookNameInDev = "useReducer";
		        updateHookTypesDev();
		        var prevDispatcher = ReactSharedInternals.H;
		        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
		        try {
		          return mountReducer(reducer, initialArg, init);
		        } finally {
		          ReactSharedInternals.H = prevDispatcher;
		        }
		      },
		      useRef: function (initialValue) {
		        currentHookNameInDev = "useRef";
		        updateHookTypesDev();
		        return mountRef(initialValue);
		      },
		      useState: function (initialState) {
		        currentHookNameInDev = "useState";
		        updateHookTypesDev();
		        var prevDispatcher = ReactSharedInternals.H;
		        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
		        try {
		          return mountState(initialState);
		        } finally {
		          ReactSharedInternals.H = prevDispatcher;
		        }
		      },
		      useDebugValue: function () {
		        currentHookNameInDev = "useDebugValue";
		        updateHookTypesDev();
		      },
		      useDeferredValue: function (value, initialValue) {
		        currentHookNameInDev = "useDeferredValue";
		        updateHookTypesDev();
		        return mountDeferredValue(value, initialValue);
		      },
		      useTransition: function () {
		        currentHookNameInDev = "useTransition";
		        updateHookTypesDev();
		        return mountTransition();
		      },
		      useSyncExternalStore: function (
		        subscribe,
		        getSnapshot,
		        getServerSnapshot
		      ) {
		        currentHookNameInDev = "useSyncExternalStore";
		        updateHookTypesDev();
		        return mountSyncExternalStore(
		          subscribe,
		          getSnapshot,
		          getServerSnapshot
		        );
		      },
		      useId: function () {
		        currentHookNameInDev = "useId";
		        updateHookTypesDev();
		        return mountId();
		      },
		      useCacheRefresh: function () {
		        currentHookNameInDev = "useCacheRefresh";
		        updateHookTypesDev();
		        return mountRefresh();
		      }
		    };
		    HooksDispatcherOnMountWithHookTypesInDEV.useMemoCache = useMemoCache;
		    HooksDispatcherOnMountWithHookTypesInDEV.useHostTransitionStatus =
		      useHostTransitionStatus;
		    HooksDispatcherOnMountWithHookTypesInDEV.useFormState = function (
		      action,
		      initialState
		    ) {
		      currentHookNameInDev = "useFormState";
		      updateHookTypesDev();
		      warnOnUseFormStateInDev();
		      return mountActionState(action, initialState);
		    };
		    HooksDispatcherOnMountWithHookTypesInDEV.useActionState = function (
		      action,
		      initialState
		    ) {
		      currentHookNameInDev = "useActionState";
		      updateHookTypesDev();
		      return mountActionState(action, initialState);
		    };
		    HooksDispatcherOnMountWithHookTypesInDEV.useOptimistic = function (
		      passthrough
		    ) {
		      currentHookNameInDev = "useOptimistic";
		      updateHookTypesDev();
		      return mountOptimistic(passthrough);
		    };
		    HooksDispatcherOnUpdateInDEV = {
		      readContext: function (context) {
		        return readContext(context);
		      },
		      use: use,
		      useCallback: function (callback, deps) {
		        currentHookNameInDev = "useCallback";
		        updateHookTypesDev();
		        return updateCallback(callback, deps);
		      },
		      useContext: function (context) {
		        currentHookNameInDev = "useContext";
		        updateHookTypesDev();
		        return readContext(context);
		      },
		      useEffect: function (create, deps) {
		        currentHookNameInDev = "useEffect";
		        updateHookTypesDev();
		        updateEffectImpl(2048, Passive, create, deps);
		      },
		      useImperativeHandle: function (ref, create, deps) {
		        currentHookNameInDev = "useImperativeHandle";
		        updateHookTypesDev();
		        return updateImperativeHandle(ref, create, deps);
		      },
		      useInsertionEffect: function (create, deps) {
		        currentHookNameInDev = "useInsertionEffect";
		        updateHookTypesDev();
		        return updateEffectImpl(4, Insertion, create, deps);
		      },
		      useLayoutEffect: function (create, deps) {
		        currentHookNameInDev = "useLayoutEffect";
		        updateHookTypesDev();
		        return updateEffectImpl(4, Layout, create, deps);
		      },
		      useMemo: function (create, deps) {
		        currentHookNameInDev = "useMemo";
		        updateHookTypesDev();
		        var prevDispatcher = ReactSharedInternals.H;
		        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
		        try {
		          return updateMemo(create, deps);
		        } finally {
		          ReactSharedInternals.H = prevDispatcher;
		        }
		      },
		      useReducer: function (reducer, initialArg, init) {
		        currentHookNameInDev = "useReducer";
		        updateHookTypesDev();
		        var prevDispatcher = ReactSharedInternals.H;
		        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
		        try {
		          return updateReducer(reducer, initialArg, init);
		        } finally {
		          ReactSharedInternals.H = prevDispatcher;
		        }
		      },
		      useRef: function () {
		        currentHookNameInDev = "useRef";
		        updateHookTypesDev();
		        return updateWorkInProgressHook().memoizedState;
		      },
		      useState: function () {
		        currentHookNameInDev = "useState";
		        updateHookTypesDev();
		        var prevDispatcher = ReactSharedInternals.H;
		        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
		        try {
		          return updateReducer(basicStateReducer);
		        } finally {
		          ReactSharedInternals.H = prevDispatcher;
		        }
		      },
		      useDebugValue: function () {
		        currentHookNameInDev = "useDebugValue";
		        updateHookTypesDev();
		      },
		      useDeferredValue: function (value, initialValue) {
		        currentHookNameInDev = "useDeferredValue";
		        updateHookTypesDev();
		        return updateDeferredValue(value, initialValue);
		      },
		      useTransition: function () {
		        currentHookNameInDev = "useTransition";
		        updateHookTypesDev();
		        return updateTransition();
		      },
		      useSyncExternalStore: function (
		        subscribe,
		        getSnapshot,
		        getServerSnapshot
		      ) {
		        currentHookNameInDev = "useSyncExternalStore";
		        updateHookTypesDev();
		        return updateSyncExternalStore(
		          subscribe,
		          getSnapshot,
		          getServerSnapshot
		        );
		      },
		      useId: function () {
		        currentHookNameInDev = "useId";
		        updateHookTypesDev();
		        return updateWorkInProgressHook().memoizedState;
		      },
		      useCacheRefresh: function () {
		        currentHookNameInDev = "useCacheRefresh";
		        updateHookTypesDev();
		        return updateWorkInProgressHook().memoizedState;
		      }
		    };
		    HooksDispatcherOnUpdateInDEV.useMemoCache = useMemoCache;
		    HooksDispatcherOnUpdateInDEV.useHostTransitionStatus =
		      useHostTransitionStatus;
		    HooksDispatcherOnUpdateInDEV.useFormState = function (action) {
		      currentHookNameInDev = "useFormState";
		      updateHookTypesDev();
		      warnOnUseFormStateInDev();
		      return updateActionState(action);
		    };
		    HooksDispatcherOnUpdateInDEV.useActionState = function (action) {
		      currentHookNameInDev = "useActionState";
		      updateHookTypesDev();
		      return updateActionState(action);
		    };
		    HooksDispatcherOnUpdateInDEV.useOptimistic = function (
		      passthrough,
		      reducer
		    ) {
		      currentHookNameInDev = "useOptimistic";
		      updateHookTypesDev();
		      return updateOptimistic(passthrough, reducer);
		    };
		    HooksDispatcherOnRerenderInDEV = {
		      readContext: function (context) {
		        return readContext(context);
		      },
		      use: use,
		      useCallback: function (callback, deps) {
		        currentHookNameInDev = "useCallback";
		        updateHookTypesDev();
		        return updateCallback(callback, deps);
		      },
		      useContext: function (context) {
		        currentHookNameInDev = "useContext";
		        updateHookTypesDev();
		        return readContext(context);
		      },
		      useEffect: function (create, deps) {
		        currentHookNameInDev = "useEffect";
		        updateHookTypesDev();
		        updateEffectImpl(2048, Passive, create, deps);
		      },
		      useImperativeHandle: function (ref, create, deps) {
		        currentHookNameInDev = "useImperativeHandle";
		        updateHookTypesDev();
		        return updateImperativeHandle(ref, create, deps);
		      },
		      useInsertionEffect: function (create, deps) {
		        currentHookNameInDev = "useInsertionEffect";
		        updateHookTypesDev();
		        return updateEffectImpl(4, Insertion, create, deps);
		      },
		      useLayoutEffect: function (create, deps) {
		        currentHookNameInDev = "useLayoutEffect";
		        updateHookTypesDev();
		        return updateEffectImpl(4, Layout, create, deps);
		      },
		      useMemo: function (create, deps) {
		        currentHookNameInDev = "useMemo";
		        updateHookTypesDev();
		        var prevDispatcher = ReactSharedInternals.H;
		        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
		        try {
		          return updateMemo(create, deps);
		        } finally {
		          ReactSharedInternals.H = prevDispatcher;
		        }
		      },
		      useReducer: function (reducer, initialArg, init) {
		        currentHookNameInDev = "useReducer";
		        updateHookTypesDev();
		        var prevDispatcher = ReactSharedInternals.H;
		        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
		        try {
		          return rerenderReducer(reducer, initialArg, init);
		        } finally {
		          ReactSharedInternals.H = prevDispatcher;
		        }
		      },
		      useRef: function () {
		        currentHookNameInDev = "useRef";
		        updateHookTypesDev();
		        return updateWorkInProgressHook().memoizedState;
		      },
		      useState: function () {
		        currentHookNameInDev = "useState";
		        updateHookTypesDev();
		        var prevDispatcher = ReactSharedInternals.H;
		        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnRerenderInDEV;
		        try {
		          return rerenderReducer(basicStateReducer);
		        } finally {
		          ReactSharedInternals.H = prevDispatcher;
		        }
		      },
		      useDebugValue: function () {
		        currentHookNameInDev = "useDebugValue";
		        updateHookTypesDev();
		      },
		      useDeferredValue: function (value, initialValue) {
		        currentHookNameInDev = "useDeferredValue";
		        updateHookTypesDev();
		        return rerenderDeferredValue(value, initialValue);
		      },
		      useTransition: function () {
		        currentHookNameInDev = "useTransition";
		        updateHookTypesDev();
		        return rerenderTransition();
		      },
		      useSyncExternalStore: function (
		        subscribe,
		        getSnapshot,
		        getServerSnapshot
		      ) {
		        currentHookNameInDev = "useSyncExternalStore";
		        updateHookTypesDev();
		        return updateSyncExternalStore(
		          subscribe,
		          getSnapshot,
		          getServerSnapshot
		        );
		      },
		      useId: function () {
		        currentHookNameInDev = "useId";
		        updateHookTypesDev();
		        return updateWorkInProgressHook().memoizedState;
		      },
		      useCacheRefresh: function () {
		        currentHookNameInDev = "useCacheRefresh";
		        updateHookTypesDev();
		        return updateWorkInProgressHook().memoizedState;
		      }
		    };
		    HooksDispatcherOnRerenderInDEV.useMemoCache = useMemoCache;
		    HooksDispatcherOnRerenderInDEV.useHostTransitionStatus =
		      useHostTransitionStatus;
		    HooksDispatcherOnRerenderInDEV.useFormState = function (action) {
		      currentHookNameInDev = "useFormState";
		      updateHookTypesDev();
		      warnOnUseFormStateInDev();
		      return rerenderActionState(action);
		    };
		    HooksDispatcherOnRerenderInDEV.useActionState = function (action) {
		      currentHookNameInDev = "useActionState";
		      updateHookTypesDev();
		      return rerenderActionState(action);
		    };
		    HooksDispatcherOnRerenderInDEV.useOptimistic = function (
		      passthrough,
		      reducer
		    ) {
		      currentHookNameInDev = "useOptimistic";
		      updateHookTypesDev();
		      return rerenderOptimistic(passthrough, reducer);
		    };
		    InvalidNestedHooksDispatcherOnMountInDEV = {
		      readContext: function (context) {
		        warnInvalidContextAccess();
		        return readContext(context);
		      },
		      use: function (usable) {
		        warnInvalidHookAccess();
		        return use(usable);
		      },
		      useCallback: function (callback, deps) {
		        currentHookNameInDev = "useCallback";
		        warnInvalidHookAccess();
		        mountHookTypesDev();
		        return mountCallback(callback, deps);
		      },
		      useContext: function (context) {
		        currentHookNameInDev = "useContext";
		        warnInvalidHookAccess();
		        mountHookTypesDev();
		        return readContext(context);
		      },
		      useEffect: function (create, deps) {
		        currentHookNameInDev = "useEffect";
		        warnInvalidHookAccess();
		        mountHookTypesDev();
		        return mountEffect(create, deps);
		      },
		      useImperativeHandle: function (ref, create, deps) {
		        currentHookNameInDev = "useImperativeHandle";
		        warnInvalidHookAccess();
		        mountHookTypesDev();
		        return mountImperativeHandle(ref, create, deps);
		      },
		      useInsertionEffect: function (create, deps) {
		        currentHookNameInDev = "useInsertionEffect";
		        warnInvalidHookAccess();
		        mountHookTypesDev();
		        mountEffectImpl(4, Insertion, create, deps);
		      },
		      useLayoutEffect: function (create, deps) {
		        currentHookNameInDev = "useLayoutEffect";
		        warnInvalidHookAccess();
		        mountHookTypesDev();
		        return mountLayoutEffect(create, deps);
		      },
		      useMemo: function (create, deps) {
		        currentHookNameInDev = "useMemo";
		        warnInvalidHookAccess();
		        mountHookTypesDev();
		        var prevDispatcher = ReactSharedInternals.H;
		        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
		        try {
		          return mountMemo(create, deps);
		        } finally {
		          ReactSharedInternals.H = prevDispatcher;
		        }
		      },
		      useReducer: function (reducer, initialArg, init) {
		        currentHookNameInDev = "useReducer";
		        warnInvalidHookAccess();
		        mountHookTypesDev();
		        var prevDispatcher = ReactSharedInternals.H;
		        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
		        try {
		          return mountReducer(reducer, initialArg, init);
		        } finally {
		          ReactSharedInternals.H = prevDispatcher;
		        }
		      },
		      useRef: function (initialValue) {
		        currentHookNameInDev = "useRef";
		        warnInvalidHookAccess();
		        mountHookTypesDev();
		        return mountRef(initialValue);
		      },
		      useState: function (initialState) {
		        currentHookNameInDev = "useState";
		        warnInvalidHookAccess();
		        mountHookTypesDev();
		        var prevDispatcher = ReactSharedInternals.H;
		        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnMountInDEV;
		        try {
		          return mountState(initialState);
		        } finally {
		          ReactSharedInternals.H = prevDispatcher;
		        }
		      },
		      useDebugValue: function () {
		        currentHookNameInDev = "useDebugValue";
		        warnInvalidHookAccess();
		        mountHookTypesDev();
		      },
		      useDeferredValue: function (value, initialValue) {
		        currentHookNameInDev = "useDeferredValue";
		        warnInvalidHookAccess();
		        mountHookTypesDev();
		        return mountDeferredValue(value, initialValue);
		      },
		      useTransition: function () {
		        currentHookNameInDev = "useTransition";
		        warnInvalidHookAccess();
		        mountHookTypesDev();
		        return mountTransition();
		      },
		      useSyncExternalStore: function (
		        subscribe,
		        getSnapshot,
		        getServerSnapshot
		      ) {
		        currentHookNameInDev = "useSyncExternalStore";
		        warnInvalidHookAccess();
		        mountHookTypesDev();
		        return mountSyncExternalStore(
		          subscribe,
		          getSnapshot,
		          getServerSnapshot
		        );
		      },
		      useId: function () {
		        currentHookNameInDev = "useId";
		        warnInvalidHookAccess();
		        mountHookTypesDev();
		        return mountId();
		      },
		      useCacheRefresh: function () {
		        currentHookNameInDev = "useCacheRefresh";
		        mountHookTypesDev();
		        return mountRefresh();
		      },
		      useMemoCache: function (size) {
		        warnInvalidHookAccess();
		        return useMemoCache(size);
		      }
		    };
		    InvalidNestedHooksDispatcherOnMountInDEV.useHostTransitionStatus =
		      useHostTransitionStatus;
		    InvalidNestedHooksDispatcherOnMountInDEV.useFormState = function (
		      action,
		      initialState
		    ) {
		      currentHookNameInDev = "useFormState";
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountActionState(action, initialState);
		    };
		    InvalidNestedHooksDispatcherOnMountInDEV.useActionState = function (
		      action,
		      initialState
		    ) {
		      currentHookNameInDev = "useActionState";
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountActionState(action, initialState);
		    };
		    InvalidNestedHooksDispatcherOnMountInDEV.useOptimistic = function (
		      passthrough
		    ) {
		      currentHookNameInDev = "useOptimistic";
		      warnInvalidHookAccess();
		      mountHookTypesDev();
		      return mountOptimistic(passthrough);
		    };
		    InvalidNestedHooksDispatcherOnUpdateInDEV = {
		      readContext: function (context) {
		        warnInvalidContextAccess();
		        return readContext(context);
		      },
		      use: function (usable) {
		        warnInvalidHookAccess();
		        return use(usable);
		      },
		      useCallback: function (callback, deps) {
		        currentHookNameInDev = "useCallback";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        return updateCallback(callback, deps);
		      },
		      useContext: function (context) {
		        currentHookNameInDev = "useContext";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        return readContext(context);
		      },
		      useEffect: function (create, deps) {
		        currentHookNameInDev = "useEffect";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        updateEffectImpl(2048, Passive, create, deps);
		      },
		      useImperativeHandle: function (ref, create, deps) {
		        currentHookNameInDev = "useImperativeHandle";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        return updateImperativeHandle(ref, create, deps);
		      },
		      useInsertionEffect: function (create, deps) {
		        currentHookNameInDev = "useInsertionEffect";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        return updateEffectImpl(4, Insertion, create, deps);
		      },
		      useLayoutEffect: function (create, deps) {
		        currentHookNameInDev = "useLayoutEffect";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        return updateEffectImpl(4, Layout, create, deps);
		      },
		      useMemo: function (create, deps) {
		        currentHookNameInDev = "useMemo";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        var prevDispatcher = ReactSharedInternals.H;
		        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
		        try {
		          return updateMemo(create, deps);
		        } finally {
		          ReactSharedInternals.H = prevDispatcher;
		        }
		      },
		      useReducer: function (reducer, initialArg, init) {
		        currentHookNameInDev = "useReducer";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        var prevDispatcher = ReactSharedInternals.H;
		        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
		        try {
		          return updateReducer(reducer, initialArg, init);
		        } finally {
		          ReactSharedInternals.H = prevDispatcher;
		        }
		      },
		      useRef: function () {
		        currentHookNameInDev = "useRef";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        return updateWorkInProgressHook().memoizedState;
		      },
		      useState: function () {
		        currentHookNameInDev = "useState";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        var prevDispatcher = ReactSharedInternals.H;
		        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
		        try {
		          return updateReducer(basicStateReducer);
		        } finally {
		          ReactSharedInternals.H = prevDispatcher;
		        }
		      },
		      useDebugValue: function () {
		        currentHookNameInDev = "useDebugValue";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		      },
		      useDeferredValue: function (value, initialValue) {
		        currentHookNameInDev = "useDeferredValue";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        return updateDeferredValue(value, initialValue);
		      },
		      useTransition: function () {
		        currentHookNameInDev = "useTransition";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        return updateTransition();
		      },
		      useSyncExternalStore: function (
		        subscribe,
		        getSnapshot,
		        getServerSnapshot
		      ) {
		        currentHookNameInDev = "useSyncExternalStore";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        return updateSyncExternalStore(
		          subscribe,
		          getSnapshot,
		          getServerSnapshot
		        );
		      },
		      useId: function () {
		        currentHookNameInDev = "useId";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        return updateWorkInProgressHook().memoizedState;
		      },
		      useCacheRefresh: function () {
		        currentHookNameInDev = "useCacheRefresh";
		        updateHookTypesDev();
		        return updateWorkInProgressHook().memoizedState;
		      },
		      useMemoCache: function (size) {
		        warnInvalidHookAccess();
		        return useMemoCache(size);
		      }
		    };
		    InvalidNestedHooksDispatcherOnUpdateInDEV.useHostTransitionStatus =
		      useHostTransitionStatus;
		    InvalidNestedHooksDispatcherOnUpdateInDEV.useFormState = function (action) {
		      currentHookNameInDev = "useFormState";
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateActionState(action);
		    };
		    InvalidNestedHooksDispatcherOnUpdateInDEV.useActionState = function (
		      action
		    ) {
		      currentHookNameInDev = "useActionState";
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateActionState(action);
		    };
		    InvalidNestedHooksDispatcherOnUpdateInDEV.useOptimistic = function (
		      passthrough,
		      reducer
		    ) {
		      currentHookNameInDev = "useOptimistic";
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return updateOptimistic(passthrough, reducer);
		    };
		    InvalidNestedHooksDispatcherOnRerenderInDEV = {
		      readContext: function (context) {
		        warnInvalidContextAccess();
		        return readContext(context);
		      },
		      use: function (usable) {
		        warnInvalidHookAccess();
		        return use(usable);
		      },
		      useCallback: function (callback, deps) {
		        currentHookNameInDev = "useCallback";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        return updateCallback(callback, deps);
		      },
		      useContext: function (context) {
		        currentHookNameInDev = "useContext";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        return readContext(context);
		      },
		      useEffect: function (create, deps) {
		        currentHookNameInDev = "useEffect";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        updateEffectImpl(2048, Passive, create, deps);
		      },
		      useImperativeHandle: function (ref, create, deps) {
		        currentHookNameInDev = "useImperativeHandle";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        return updateImperativeHandle(ref, create, deps);
		      },
		      useInsertionEffect: function (create, deps) {
		        currentHookNameInDev = "useInsertionEffect";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        return updateEffectImpl(4, Insertion, create, deps);
		      },
		      useLayoutEffect: function (create, deps) {
		        currentHookNameInDev = "useLayoutEffect";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        return updateEffectImpl(4, Layout, create, deps);
		      },
		      useMemo: function (create, deps) {
		        currentHookNameInDev = "useMemo";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        var prevDispatcher = ReactSharedInternals.H;
		        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
		        try {
		          return updateMemo(create, deps);
		        } finally {
		          ReactSharedInternals.H = prevDispatcher;
		        }
		      },
		      useReducer: function (reducer, initialArg, init) {
		        currentHookNameInDev = "useReducer";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        var prevDispatcher = ReactSharedInternals.H;
		        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
		        try {
		          return rerenderReducer(reducer, initialArg, init);
		        } finally {
		          ReactSharedInternals.H = prevDispatcher;
		        }
		      },
		      useRef: function () {
		        currentHookNameInDev = "useRef";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        return updateWorkInProgressHook().memoizedState;
		      },
		      useState: function () {
		        currentHookNameInDev = "useState";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        var prevDispatcher = ReactSharedInternals.H;
		        ReactSharedInternals.H = InvalidNestedHooksDispatcherOnUpdateInDEV;
		        try {
		          return rerenderReducer(basicStateReducer);
		        } finally {
		          ReactSharedInternals.H = prevDispatcher;
		        }
		      },
		      useDebugValue: function () {
		        currentHookNameInDev = "useDebugValue";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		      },
		      useDeferredValue: function (value, initialValue) {
		        currentHookNameInDev = "useDeferredValue";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        return rerenderDeferredValue(value, initialValue);
		      },
		      useTransition: function () {
		        currentHookNameInDev = "useTransition";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        return rerenderTransition();
		      },
		      useSyncExternalStore: function (
		        subscribe,
		        getSnapshot,
		        getServerSnapshot
		      ) {
		        currentHookNameInDev = "useSyncExternalStore";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        return updateSyncExternalStore(
		          subscribe,
		          getSnapshot,
		          getServerSnapshot
		        );
		      },
		      useId: function () {
		        currentHookNameInDev = "useId";
		        warnInvalidHookAccess();
		        updateHookTypesDev();
		        return updateWorkInProgressHook().memoizedState;
		      },
		      useCacheRefresh: function () {
		        currentHookNameInDev = "useCacheRefresh";
		        updateHookTypesDev();
		        return updateWorkInProgressHook().memoizedState;
		      },
		      useMemoCache: function (size) {
		        warnInvalidHookAccess();
		        return useMemoCache(size);
		      }
		    };
		    InvalidNestedHooksDispatcherOnRerenderInDEV.useHostTransitionStatus =
		      useHostTransitionStatus;
		    InvalidNestedHooksDispatcherOnRerenderInDEV.useFormState = function (
		      action
		    ) {
		      currentHookNameInDev = "useFormState";
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return rerenderActionState(action);
		    };
		    InvalidNestedHooksDispatcherOnRerenderInDEV.useActionState = function (
		      action
		    ) {
		      currentHookNameInDev = "useActionState";
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return rerenderActionState(action);
		    };
		    InvalidNestedHooksDispatcherOnRerenderInDEV.useOptimistic = function (
		      passthrough,
		      reducer
		    ) {
		      currentHookNameInDev = "useOptimistic";
		      warnInvalidHookAccess();
		      updateHookTypesDev();
		      return rerenderOptimistic(passthrough, reducer);
		    };
		    var fakeInternalInstance = {};
		    var didWarnAboutStateAssignmentForComponent = new Set();
		    var didWarnAboutUninitializedState = new Set();
		    var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
		    var didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
		    var didWarnAboutDirectlyAssigningPropsToState = new Set();
		    var didWarnAboutUndefinedDerivedState = new Set();
		    var didWarnAboutContextTypes$1 = new Set();
		    var didWarnAboutChildContextTypes = new Set();
		    var didWarnAboutInvalidateContextType = new Set();
		    var didWarnOnInvalidCallback = new Set();
		    Object.freeze(fakeInternalInstance);
		    var classComponentUpdater = {
		        isMounted: function (component) {
		          var owner = current;
		          if (null !== owner && isRendering && 1 === owner.tag) {
		            var instance = owner.stateNode;
		            instance._warnedAboutRefsInRender ||
		              console.error(
		                "%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.",
		                getComponentNameFromFiber(owner) || "A component"
		              );
		            instance._warnedAboutRefsInRender = !0;
		          }
		          return (component = component._reactInternals)
		            ? getNearestMountedFiber(component) === component
		            : !1;
		        },
		        enqueueSetState: function (inst, payload, callback) {
		          inst = inst._reactInternals;
		          var lane = requestUpdateLane(inst),
		            update = createUpdate(lane);
		          update.payload = payload;
		          void 0 !== callback &&
		            null !== callback &&
		            (warnOnInvalidCallback(callback), (update.callback = callback));
		          payload = enqueueUpdate(inst, update, lane);
		          null !== payload &&
		            (scheduleUpdateOnFiber(payload, inst, lane),
		            entangleTransitions(payload, inst, lane));
		          markStateUpdateScheduled(inst, lane);
		        },
		        enqueueReplaceState: function (inst, payload, callback) {
		          inst = inst._reactInternals;
		          var lane = requestUpdateLane(inst),
		            update = createUpdate(lane);
		          update.tag = ReplaceState;
		          update.payload = payload;
		          void 0 !== callback &&
		            null !== callback &&
		            (warnOnInvalidCallback(callback), (update.callback = callback));
		          payload = enqueueUpdate(inst, update, lane);
		          null !== payload &&
		            (scheduleUpdateOnFiber(payload, inst, lane),
		            entangleTransitions(payload, inst, lane));
		          markStateUpdateScheduled(inst, lane);
		        },
		        enqueueForceUpdate: function (inst, callback) {
		          inst = inst._reactInternals;
		          var lane = requestUpdateLane(inst),
		            update = createUpdate(lane);
		          update.tag = ForceUpdate;
		          void 0 !== callback &&
		            null !== callback &&
		            (warnOnInvalidCallback(callback), (update.callback = callback));
		          callback = enqueueUpdate(inst, update, lane);
		          null !== callback &&
		            (scheduleUpdateOnFiber(callback, inst, lane),
		            entangleTransitions(callback, inst, lane));
		          null !== injectedProfilingHooks &&
		            "function" ===
		              typeof injectedProfilingHooks.markForceUpdateScheduled &&
		            injectedProfilingHooks.markForceUpdateScheduled(inst, lane);
		        }
		      },
		      reportGlobalError =
		        "function" === typeof reportError
		          ? reportError
		          : function (error) {
		              if (
		                "object" === typeof window &&
		                "function" === typeof window.ErrorEvent
		              ) {
		                var event = new window.ErrorEvent("error", {
		                  bubbles: !0,
		                  cancelable: !0,
		                  message:
		                    "object" === typeof error &&
		                    null !== error &&
		                    "string" === typeof error.message
		                      ? String(error.message)
		                      : String(error),
		                  error: error
		                });
		                if (!window.dispatchEvent(event)) return;
		              } else if (
		                "object" === typeof process &&
		                "function" === typeof process.emit
		              ) {
		                process.emit("uncaughtException", error);
		                return;
		              }
		              console.error(error);
		            },
		      componentName = null,
		      errorBoundaryName = null,
		      SelectiveHydrationException = Error(
		        "This is not a real error. It's an implementation detail of React's selective hydration feature. If this leaks into userspace, it's a bug in React. Please file an issue."
		      ),
		      didReceiveUpdate = !1;
		    var didWarnAboutBadClass = {};
		    var didWarnAboutContextTypeOnFunctionComponent = {};
		    var didWarnAboutContextTypes = {};
		    var didWarnAboutGetDerivedStateOnFunctionComponent = {};
		    var didWarnAboutReassigningProps = !1;
		    var didWarnAboutRevealOrder = {};
		    var didWarnAboutTailOptions = {};
		    var SUSPENDED_MARKER = {
		        dehydrated: null,
		        treeContext: null,
		        retryLane: 0
		      },
		      hasWarnedAboutUsingNoValuePropOnContextProvider = !1,
		      valueCursor = createCursor(null);
		    var rendererCursorDEV = createCursor(null);
		    var renderer2CursorDEV = createCursor(null);
		    var rendererSigil = {};
		    var currentlyRenderingFiber = null,
		      lastContextDependency = null,
		      isDisallowedContextReadInDEV = !1,
		      AbortControllerLocal =
		        "undefined" !== typeof AbortController
		          ? AbortController
		          : function () {
		              var listeners = [],
		                signal = (this.signal = {
		                  aborted: !1,
		                  addEventListener: function (type, listener) {
		                    listeners.push(listener);
		                  }
		                });
		              this.abort = function () {
		                signal.aborted = !0;
		                listeners.forEach(function (listener) {
		                  return listener();
		                });
		              };
		            },
		      scheduleCallback$1 = Scheduler.unstable_scheduleCallback,
		      NormalPriority = Scheduler.unstable_NormalPriority,
		      CacheContext = {
		        $$typeof: REACT_CONTEXT_TYPE,
		        Consumer: null,
		        Provider: null,
		        _currentValue: null,
		        _currentValue2: null,
		        _threadCount: 0,
		        _currentRenderer: null,
		        _currentRenderer2: null
		      },
		      prevOnStartTransitionFinish = ReactSharedInternals.S;
		    ReactSharedInternals.S = function (transition, returnValue) {
		      "object" === typeof returnValue &&
		        null !== returnValue &&
		        "function" === typeof returnValue.then &&
		        entangleAsyncAction(transition, returnValue);
		      null !== prevOnStartTransitionFinish &&
		        prevOnStartTransitionFinish(transition, returnValue);
		    };
		    var resumedCache = createCursor(null),
		      didWarnAboutUndefinedSnapshotBeforeUpdate = null;
		    didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
		    var offscreenSubtreeIsHidden = !1,
		      offscreenSubtreeWasHidden = !1,
		      needsFormReset = !1,
		      PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set,
		      nextEffect = null,
		      inProgressLanes = null,
		      inProgressRoot = null,
		      shouldFireAfterActiveInstanceBlur = !1,
		      hostParent = null,
		      hostParentIsContainer = !1,
		      currentHoistableRoot = null,
		      suspenseyCommitFlag = 8192,
		      DefaultAsyncDispatcher = {
		        getCacheForType: function (resourceType) {
		          var cache = readContext(CacheContext),
		            cacheForType = cache.data.get(resourceType);
		          void 0 === cacheForType &&
		            ((cacheForType = resourceType()),
		            cache.data.set(resourceType, cacheForType));
		          return cacheForType;
		        },
		        getOwner: function () {
		          return current;
		        }
		      },
		      COMPONENT_TYPE = 0,
		      HAS_PSEUDO_CLASS_TYPE = 1,
		      ROLE_TYPE = 2,
		      TEST_NAME_TYPE = 3,
		      TEXT_TYPE = 4;
		    if ("function" === typeof Symbol && Symbol.for) {
		      var symbolFor = Symbol.for;
		      COMPONENT_TYPE = symbolFor("selector.component");
		      HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
		      ROLE_TYPE = symbolFor("selector.role");
		      TEST_NAME_TYPE = symbolFor("selector.test_id");
		      TEXT_TYPE = symbolFor("selector.text");
		    }
		    var commitHooks = [],
		      PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map,
		      NoContext = 0,
		      RenderContext = 2,
		      CommitContext = 4,
		      RootInProgress = 0,
		      RootFatalErrored = 1,
		      RootErrored = 2,
		      RootSuspended = 3,
		      RootSuspendedWithDelay = 4,
		      RootCompleted = 5,
		      RootDidNotComplete = 6,
		      executionContext = NoContext,
		      workInProgressRoot = null,
		      workInProgress = null,
		      workInProgressRootRenderLanes = 0,
		      NotSuspended = 0,
		      SuspendedOnError = 1,
		      SuspendedOnData = 2,
		      SuspendedOnImmediate = 3,
		      SuspendedOnInstance = 4,
		      SuspendedOnInstanceAndReadyToContinue = 5,
		      SuspendedOnDeprecatedThrowPromise = 6,
		      SuspendedAndReadyToContinue = 7,
		      SuspendedOnHydration = 8,
		      workInProgressSuspendedReason = NotSuspended,
		      workInProgressThrownValue = null,
		      workInProgressRootDidSkipSuspendedSiblings = !1,
		      workInProgressRootIsPrerendering = !1,
		      workInProgressRootDidAttachPingListener = !1,
		      entangledRenderLanes = 0,
		      workInProgressRootExitStatus = RootInProgress,
		      workInProgressRootSkippedLanes = 0,
		      workInProgressRootInterleavedUpdatedLanes = 0,
		      workInProgressRootPingedLanes = 0,
		      workInProgressDeferredLane = 0,
		      workInProgressSuspendedRetryLanes = 0,
		      workInProgressRootConcurrentErrors = null,
		      workInProgressRootRecoverableErrors = null,
		      workInProgressRootDidIncludeRecursiveRenderUpdate = !1,
		      globalMostRecentFallbackTime = 0,
		      FALLBACK_THROTTLE_MS = 300,
		      workInProgressRootRenderTargetTime = Infinity,
		      RENDER_TIMEOUT_MS = 500,
		      workInProgressTransitions = null,
		      legacyErrorBoundariesThatAlreadyFailed = null,
		      rootDoesHavePassiveEffects = !1,
		      rootWithPendingPassiveEffects = null,
		      pendingPassiveEffectsLanes = 0,
		      pendingPassiveEffectsRemainingLanes = 0,
		      pendingPassiveTransitions = null,
		      NESTED_UPDATE_LIMIT = 50,
		      nestedUpdateCount = 0,
		      rootWithNestedUpdates = null,
		      isFlushingPassiveEffects = !1,
		      didScheduleUpdateDuringPassiveEffects = !1,
		      NESTED_PASSIVE_UPDATE_LIMIT = 50,
		      nestedPassiveUpdateCount = 0,
		      rootWithPassiveNestedUpdates = null,
		      isRunningInsertionEffect = !1,
		      IMMEDIATE_COMMIT = 0,
		      SUSPENDED_COMMIT = 1,
		      THROTTLED_COMMIT = 2,
		      didWarnStateUpdateForNotYetMountedComponent = null,
		      didWarnAboutUpdateInRender = !1;
		    var didWarnAboutUpdateInRenderForAnotherComponent = new Set();
		    var fakeActCallbackNode = {},
		      resolveFamily = null,
		      failedBoundaries = null;
		    var hasBadMapPolyfill = !1;
		    try {
		      var nonExtensibleObject = Object.preventExtensions({});
		      new Map([[nonExtensibleObject, null]]);
		      new Set([nonExtensibleObject]);
		    } catch (e) {
		      hasBadMapPolyfill = !0;
		    }
		    var didWarnAboutNestedUpdates = !1;
		    var didWarnAboutFindNodeInStrictMode = {};
		    var overrideHookState = null,
		      overrideHookStateDeletePath = null,
		      overrideHookStateRenamePath = null,
		      overrideProps = null,
		      overridePropsDeletePath = null,
		      overridePropsRenamePath = null,
		      scheduleUpdate = null,
		      setErrorHandler = null,
		      setSuspenseHandler = null;
		    overrideHookState = function (fiber, id, path, value) {
		      id = findHook(fiber, id);
		      null !== id &&
		        ((path = copyWithSetImpl(id.memoizedState, path, 0, value)),
		        (id.memoizedState = path),
		        (id.baseState = path),
		        (fiber.memoizedProps = assign({}, fiber.memoizedProps)),
		        (path = enqueueConcurrentRenderForLane(fiber, 2)),
		        null !== path && scheduleUpdateOnFiber(path, fiber, 2));
		    };
		    overrideHookStateDeletePath = function (fiber, id, path) {
		      id = findHook(fiber, id);
		      null !== id &&
		        ((path = copyWithDeleteImpl(id.memoizedState, path, 0)),
		        (id.memoizedState = path),
		        (id.baseState = path),
		        (fiber.memoizedProps = assign({}, fiber.memoizedProps)),
		        (path = enqueueConcurrentRenderForLane(fiber, 2)),
		        null !== path && scheduleUpdateOnFiber(path, fiber, 2));
		    };
		    overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
		      id = findHook(fiber, id);
		      null !== id &&
		        ((oldPath = copyWithRename(id.memoizedState, oldPath, newPath)),
		        (id.memoizedState = oldPath),
		        (id.baseState = oldPath),
		        (fiber.memoizedProps = assign({}, fiber.memoizedProps)),
		        (oldPath = enqueueConcurrentRenderForLane(fiber, 2)),
		        null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, 2));
		    };
		    overrideProps = function (fiber, path, value) {
		      fiber.pendingProps = copyWithSetImpl(fiber.memoizedProps, path, 0, value);
		      fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
		      path = enqueueConcurrentRenderForLane(fiber, 2);
		      null !== path && scheduleUpdateOnFiber(path, fiber, 2);
		    };
		    overridePropsDeletePath = function (fiber, path) {
		      fiber.pendingProps = copyWithDeleteImpl(fiber.memoizedProps, path, 0);
		      fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
		      path = enqueueConcurrentRenderForLane(fiber, 2);
		      null !== path && scheduleUpdateOnFiber(path, fiber, 2);
		    };
		    overridePropsRenamePath = function (fiber, oldPath, newPath) {
		      fiber.pendingProps = copyWithRename(
		        fiber.memoizedProps,
		        oldPath,
		        newPath
		      );
		      fiber.alternate && (fiber.alternate.pendingProps = fiber.pendingProps);
		      oldPath = enqueueConcurrentRenderForLane(fiber, 2);
		      null !== oldPath && scheduleUpdateOnFiber(oldPath, fiber, 2);
		    };
		    scheduleUpdate = function (fiber) {
		      var root = enqueueConcurrentRenderForLane(fiber, 2);
		      null !== root && scheduleUpdateOnFiber(root, fiber, 2);
		    };
		    setErrorHandler = function (newShouldErrorImpl) {
		      shouldErrorImpl = newShouldErrorImpl;
		    };
		    setSuspenseHandler = function (newShouldSuspendImpl) {
		      shouldSuspendImpl = newShouldSuspendImpl;
		    };
		    exports.attemptContinuousHydration = function (fiber) {
		      if (13 === fiber.tag) {
		        var root = enqueueConcurrentRenderForLane(fiber, 67108864);
		        null !== root && scheduleUpdateOnFiber(root, fiber, 67108864);
		        markRetryLaneIfNotHydrated(fiber, 67108864);
		      }
		    };
		    exports.attemptHydrationAtCurrentPriority = function (fiber) {
		      if (13 === fiber.tag) {
		        var lane = requestUpdateLane(fiber),
		          root = enqueueConcurrentRenderForLane(fiber, lane);
		        null !== root && scheduleUpdateOnFiber(root, fiber, lane);
		        markRetryLaneIfNotHydrated(fiber, lane);
		      }
		    };
		    exports.attemptSynchronousHydration = function (fiber) {
		      switch (fiber.tag) {
		        case 3:
		          fiber = fiber.stateNode;
		          if (fiber.current.memoizedState.isDehydrated) {
		            var lanes = getHighestPriorityLanes(fiber.pendingLanes);
		            if (0 !== lanes) {
		              fiber.pendingLanes |= 2;
		              for (fiber.entangledLanes |= 2; lanes; ) {
		                var lane = 1 << (31 - clz32(lanes));
		                fiber.entanglements[1] |= lane;
		                lanes &= ~lane;
		              }
		              ensureRootIsScheduled(fiber);
		              (executionContext & (RenderContext | CommitContext)) ===
		                NoContext &&
		                ((workInProgressRootRenderTargetTime =
		                  now$1() + RENDER_TIMEOUT_MS),
		                flushSyncWorkAcrossRoots_impl(0, !1));
		            }
		          }
		          break;
		        case 13:
		          (lanes = enqueueConcurrentRenderForLane(fiber, 2)),
		            null !== lanes && scheduleUpdateOnFiber(lanes, fiber, 2),
		            flushSyncWork(),
		            markRetryLaneIfNotHydrated(fiber, 2);
		      }
		    };
		    exports.batchedUpdates = function (fn, a) {
		      return fn(a);
		    };
		    exports.createComponentSelector = function (component) {
		      return { $$typeof: COMPONENT_TYPE, value: component };
		    };
		    exports.createContainer = function (
		      containerInfo,
		      tag,
		      hydrationCallbacks,
		      isStrictMode,
		      concurrentUpdatesByDefaultOverride,
		      identifierPrefix,
		      onUncaughtError,
		      onCaughtError,
		      onRecoverableError,
		      transitionCallbacks
		    ) {
		      return createFiberRoot(
		        containerInfo,
		        tag,
		        !1,
		        null,
		        hydrationCallbacks,
		        isStrictMode,
		        identifierPrefix,
		        onUncaughtError,
		        onCaughtError,
		        onRecoverableError,
		        transitionCallbacks,
		        null
		      );
		    };
		    exports.createHasPseudoClassSelector = function (selectors) {
		      return { $$typeof: HAS_PSEUDO_CLASS_TYPE, value: selectors };
		    };
		    exports.createHydrationContainer = function (
		      initialChildren,
		      callback,
		      containerInfo,
		      tag,
		      hydrationCallbacks,
		      isStrictMode,
		      concurrentUpdatesByDefaultOverride,
		      identifierPrefix,
		      onUncaughtError,
		      onCaughtError,
		      onRecoverableError,
		      transitionCallbacks,
		      formState
		    ) {
		      initialChildren = createFiberRoot(
		        containerInfo,
		        tag,
		        !0,
		        initialChildren,
		        hydrationCallbacks,
		        isStrictMode,
		        identifierPrefix,
		        onUncaughtError,
		        onCaughtError,
		        onRecoverableError,
		        transitionCallbacks,
		        formState
		      );
		      initialChildren.context = getContextForSubtree(null);
		      containerInfo = initialChildren.current;
		      tag = requestUpdateLane(containerInfo);
		      hydrationCallbacks = createUpdate(tag);
		      hydrationCallbacks.callback =
		        void 0 !== callback && null !== callback ? callback : null;
		      enqueueUpdate(containerInfo, hydrationCallbacks, tag);
		      initialChildren.current.lanes = tag;
		      markRootUpdated$1(initialChildren, tag);
		      ensureRootIsScheduled(initialChildren);
		      return initialChildren;
		    };
		    exports.createPortal = function (children, containerInfo, implementation) {
		      var key =
		        3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
		      try {
		        testStringCoercion(key);
		        var JSCompiler_inline_result = !1;
		      } catch (e$6) {
		        JSCompiler_inline_result = !0;
		      }
		      JSCompiler_inline_result &&
		        (console.error(
		          "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.",
		          ("function" === typeof Symbol &&
		            Symbol.toStringTag &&
		            key[Symbol.toStringTag]) ||
		            key.constructor.name ||
		            "Object"
		        ),
		        testStringCoercion(key));
		      return {
		        $$typeof: REACT_PORTAL_TYPE,
		        key: null == key ? null : "" + key,
		        children: children,
		        containerInfo: containerInfo,
		        implementation: implementation
		      };
		    };
		    exports.createRoleSelector = function (role) {
		      return { $$typeof: ROLE_TYPE, value: role };
		    };
		    exports.createTestNameSelector = function (id) {
		      return { $$typeof: TEST_NAME_TYPE, value: id };
		    };
		    exports.createTextSelector = function (text) {
		      return { $$typeof: TEXT_TYPE, value: text };
		    };
		    exports.defaultOnCaughtError = function (error, errorInfo) {
		      var componentNameMessage = componentName
		          ? "The above error occurred in the <" + componentName + "> component."
		          : "The above error occurred in one of your React components.",
		        recreateMessage =
		          "React will try to recreate this component tree from scratch using the error boundary you provided, " +
		          ((errorBoundaryName || "Anonymous") + "."),
		        prevGetCurrentStack = ReactSharedInternals.getCurrentStack,
		        componentStack =
		          null != errorInfo.componentStack ? errorInfo.componentStack : "";
		      ReactSharedInternals.getCurrentStack = function () {
		        return componentStack;
		      };
		      try {
		        "object" === typeof error &&
		        null !== error &&
		        "string" === typeof error.environmentName
		          ? bindToConsole(
		              "error",
		              [
		                "%o\n\n%s\n\n%s\n",
		                error,
		                componentNameMessage,
		                recreateMessage
		              ],
		              error.environmentName
		            )()
		          : console.error(
		              "%o\n\n%s\n\n%s\n",
		              error,
		              componentNameMessage,
		              recreateMessage
		            );
		      } finally {
		        ReactSharedInternals.getCurrentStack = prevGetCurrentStack;
		      }
		    };
		    exports.defaultOnRecoverableError = function (error) {
		      reportGlobalError(error);
		    };
		    exports.defaultOnUncaughtError = function (error, errorInfo) {
		      reportGlobalError(error);
		      error = componentName
		        ? "An error occurred in the <" + componentName + "> component."
		        : "An error occurred in one of your React components.";
		      var prevGetCurrentStack = ReactSharedInternals.getCurrentStack,
		        componentStack =
		          null != errorInfo.componentStack ? errorInfo.componentStack : "";
		      ReactSharedInternals.getCurrentStack = function () {
		        return componentStack;
		      };
		      try {
		        console.warn(
		          "%s\n\n%s\n",
		          error,
		          "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://react.dev/link/error-boundaries to learn more about error boundaries."
		        );
		      } finally {
		        ReactSharedInternals.getCurrentStack = prevGetCurrentStack;
		      }
		    };
		    exports.deferredUpdates = function (fn) {
		      var prevTransition = ReactSharedInternals.T,
		        previousPriority = getCurrentUpdatePriority();
		      try {
		        return (
		          setCurrentUpdatePriority(32), (ReactSharedInternals.T = null), fn()
		        );
		      } finally {
		        setCurrentUpdatePriority(previousPriority),
		          (ReactSharedInternals.T = prevTransition);
		      }
		    };
		    exports.discreteUpdates = function (fn, a, b, c, d) {
		      var prevTransition = ReactSharedInternals.T,
		        previousPriority = getCurrentUpdatePriority();
		      try {
		        return (
		          setCurrentUpdatePriority(2),
		          (ReactSharedInternals.T = null),
		          fn(a, b, c, d)
		        );
		      } finally {
		        setCurrentUpdatePriority(previousPriority),
		          (ReactSharedInternals.T = prevTransition),
		          executionContext === NoContext &&
		            (workInProgressRootRenderTargetTime = now$1() + RENDER_TIMEOUT_MS);
		      }
		    };
		    exports.findAllNodes = findAllNodes;
		    exports.findBoundingRects = function (hostRoot, selectors) {
		      if (!supportsTestSelectors)
		        throw Error("Test selector API is not supported by this renderer.");
		      selectors = findAllNodes(hostRoot, selectors);
		      hostRoot = [];
		      for (var i = 0; i < selectors.length; i++)
		        hostRoot.push(getBoundingRect(selectors[i]));
		      for (selectors = hostRoot.length - 1; 0 < selectors; selectors--) {
		        i = hostRoot[selectors];
		        for (
		          var targetLeft = i.x,
		            targetRight = targetLeft + i.width,
		            targetTop = i.y,
		            targetBottom = targetTop + i.height,
		            j = selectors - 1;
		          0 <= j;
		          j--
		        )
		          if (selectors !== j) {
		            var otherRect = hostRoot[j],
		              otherLeft = otherRect.x,
		              otherRight = otherLeft + otherRect.width,
		              otherTop = otherRect.y,
		              otherBottom = otherTop + otherRect.height;
		            if (
		              targetLeft >= otherLeft &&
		              targetTop >= otherTop &&
		              targetRight <= otherRight &&
		              targetBottom <= otherBottom
		            ) {
		              hostRoot.splice(selectors, 1);
		              break;
		            } else if (
		              !(
		                targetLeft !== otherLeft ||
		                i.width !== otherRect.width ||
		                otherBottom < targetTop ||
		                otherTop > targetBottom
		              )
		            ) {
		              otherTop > targetTop &&
		                ((otherRect.height += otherTop - targetTop),
		                (otherRect.y = targetTop));
		              otherBottom < targetBottom &&
		                (otherRect.height = targetBottom - otherTop);
		              hostRoot.splice(selectors, 1);
		              break;
		            } else if (
		              !(
		                targetTop !== otherTop ||
		                i.height !== otherRect.height ||
		                otherRight < targetLeft ||
		                otherLeft > targetRight
		              )
		            ) {
		              otherLeft > targetLeft &&
		                ((otherRect.width += otherLeft - targetLeft),
		                (otherRect.x = targetLeft));
		              otherRight < targetRight &&
		                (otherRect.width = targetRight - otherLeft);
		              hostRoot.splice(selectors, 1);
		              break;
		            }
		          }
		      }
		      return hostRoot;
		    };
		    exports.findHostInstance = function (component) {
		      var fiber = component._reactInternals;
		      if (void 0 === fiber) {
		        if ("function" === typeof component.render)
		          throw Error("Unable to find node on an unmounted component.");
		        component = Object.keys(component).join(",");
		        throw Error(
		          "Argument appears to not be a ReactComponent. Keys: " + component
		        );
		      }
		      component = findCurrentHostFiber(fiber);
		      return null === component ? null : getPublicInstance(component.stateNode);
		    };
		    exports.findHostInstanceWithNoPortals = function (fiber) {
		      fiber = findCurrentFiberUsingSlowPath(fiber);
		      fiber =
		        null !== fiber ? findCurrentHostFiberWithNoPortalsImpl(fiber) : null;
		      return null === fiber ? null : getPublicInstance(fiber.stateNode);
		    };
		    exports.findHostInstanceWithWarning = function (component, methodName) {
		      var fiber = component._reactInternals;
		      if (void 0 === fiber) {
		        if ("function" === typeof component.render)
		          throw Error("Unable to find node on an unmounted component.");
		        component = Object.keys(component).join(",");
		        throw Error(
		          "Argument appears to not be a ReactComponent. Keys: " + component
		        );
		      }
		      component = findCurrentHostFiber(fiber);
		      if (null === component) return null;
		      if (component.mode & 8) {
		        var componentName = getComponentNameFromFiber(fiber) || "Component";
		        didWarnAboutFindNodeInStrictMode[componentName] ||
		          ((didWarnAboutFindNodeInStrictMode[componentName] = !0),
		          runWithFiberInDEV(component, function () {
		            fiber.mode & 8
		              ? console.error(
		                  "%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://react.dev/link/strict-mode-find-node",
		                  methodName,
		                  methodName,
		                  componentName
		                )
		              : console.error(
		                  "%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://react.dev/link/strict-mode-find-node",
		                  methodName,
		                  methodName,
		                  componentName
		                );
		          }));
		      }
		      return getPublicInstance(component.stateNode);
		    };
		    exports.flushPassiveEffects = flushPassiveEffects;
		    exports.flushSyncFromReconciler = function (fn) {
		      var prevExecutionContext = executionContext;
		      executionContext |= 1;
		      var prevTransition = ReactSharedInternals.T,
		        previousPriority = getCurrentUpdatePriority();
		      try {
		        if ((setCurrentUpdatePriority(2), (ReactSharedInternals.T = null), fn))
		          return fn();
		      } finally {
		        setCurrentUpdatePriority(previousPriority),
		          (ReactSharedInternals.T = prevTransition),
		          (executionContext = prevExecutionContext),
		          (executionContext & (RenderContext | CommitContext)) === NoContext &&
		            flushSyncWorkAcrossRoots_impl(0, !1);
		      }
		    };
		    exports.flushSyncWork = flushSyncWork;
		    exports.focusWithin = function (hostRoot, selectors) {
		      if (!supportsTestSelectors)
		        throw Error("Test selector API is not supported by this renderer.");
		      hostRoot = findFiberRootForHostRoot(hostRoot);
		      selectors = findPaths(hostRoot, selectors);
		      selectors = Array.from(selectors);
		      for (hostRoot = 0; hostRoot < selectors.length; ) {
		        var fiber = selectors[hostRoot++],
		          tag = fiber.tag;
		        if (!isHiddenSubtree(fiber)) {
		          if (
		            (5 === tag || 26 === tag || 27 === tag) &&
		            setFocusIfFocusable(fiber.stateNode)
		          )
		            return !0;
		          for (fiber = fiber.child; null !== fiber; )
		            selectors.push(fiber), (fiber = fiber.sibling);
		        }
		      }
		      return !1;
		    };
		    exports.getFindAllNodesFailureDescription = function (hostRoot, selectors) {
		      if (!supportsTestSelectors)
		        throw Error("Test selector API is not supported by this renderer.");
		      var maxSelectorIndex = 0,
		        matchedNames = [];
		      hostRoot = [findFiberRootForHostRoot(hostRoot), 0];
		      for (var index = 0; index < hostRoot.length; ) {
		        var fiber = hostRoot[index++],
		          tag = fiber.tag,
		          selectorIndex = hostRoot[index++],
		          selector = selectors[selectorIndex];
		        if ((5 !== tag && 26 !== tag && 27 !== tag) || !isHiddenSubtree(fiber))
		          if (
		            (matchSelector(fiber, selector) &&
		              (matchedNames.push(selectorToString(selector)),
		              selectorIndex++,
		              selectorIndex > maxSelectorIndex &&
		                (maxSelectorIndex = selectorIndex)),
		            selectorIndex < selectors.length)
		          )
		            for (fiber = fiber.child; null !== fiber; )
		              hostRoot.push(fiber, selectorIndex), (fiber = fiber.sibling);
		      }
		      if (maxSelectorIndex < selectors.length) {
		        for (
		          hostRoot = [];
		          maxSelectorIndex < selectors.length;
		          maxSelectorIndex++
		        )
		          hostRoot.push(selectorToString(selectors[maxSelectorIndex]));
		        return (
		          "findAllNodes was able to match part of the selector:\n  " +
		          (matchedNames.join(" > ") +
		            "\n\nNo matching component was found for:\n  ") +
		          hostRoot.join(" > ")
		        );
		      }
		      return null;
		    };
		    exports.getPublicRootInstance = function (container) {
		      container = container.current;
		      if (!container.child) return null;
		      switch (container.child.tag) {
		        case 27:
		        case 5:
		          return getPublicInstance(container.child.stateNode);
		        default:
		          return container.child.stateNode;
		      }
		    };
		    exports.injectIntoDevTools = function () {
		      var internals = {
		        bundleType: 1,
		        version: rendererVersion,
		        rendererPackageName: rendererPackageName,
		        currentDispatcherRef: ReactSharedInternals,
		        findFiberByHostInstance: getInstanceFromNode,
		        reconcilerVersion: "19.0.0"
		      };
		      null !== extraDevToolsConfig &&
		        (internals.rendererConfig = extraDevToolsConfig);
		      internals.overrideHookState = overrideHookState;
		      internals.overrideHookStateDeletePath = overrideHookStateDeletePath;
		      internals.overrideHookStateRenamePath = overrideHookStateRenamePath;
		      internals.overrideProps = overrideProps;
		      internals.overridePropsDeletePath = overridePropsDeletePath;
		      internals.overridePropsRenamePath = overridePropsRenamePath;
		      internals.scheduleUpdate = scheduleUpdate;
		      internals.setErrorHandler = setErrorHandler;
		      internals.setSuspenseHandler = setSuspenseHandler;
		      internals.scheduleRefresh = scheduleRefresh;
		      internals.scheduleRoot = scheduleRoot;
		      internals.setRefreshHandler = setRefreshHandler;
		      internals.getCurrentFiber = getCurrentFiberForDevTools;
		      internals.getLaneLabelMap = getLaneLabelMap;
		      internals.injectProfilingHooks = injectProfilingHooks;
		      return injectInternals(internals);
		    };
		    exports.isAlreadyRendering = function () {
		      return (executionContext & (RenderContext | CommitContext)) !== NoContext;
		    };
		    exports.observeVisibleRects = function (
		      hostRoot,
		      selectors,
		      callback,
		      options
		    ) {
		      function commitHook() {
		        var nextInstanceRoots = findAllNodes(hostRoot, selectors);
		        instanceRoots.forEach(function (target) {
		          0 > nextInstanceRoots.indexOf(target) && unobserve(target);
		        });
		        nextInstanceRoots.forEach(function (target) {
		          0 > instanceRoots.indexOf(target) && observe(target);
		        });
		      }
		      if (!supportsTestSelectors)
		        throw Error("Test selector API is not supported by this renderer.");
		      var instanceRoots = findAllNodes(hostRoot, selectors);
		      callback = setupIntersectionObserver(instanceRoots, callback, options);
		      var disconnect = callback.disconnect,
		        observe = callback.observe,
		        unobserve = callback.unobserve;
		      commitHooks.push(commitHook);
		      return {
		        disconnect: function () {
		          var index = commitHooks.indexOf(commitHook);
		          0 <= index && commitHooks.splice(index, 1);
		          disconnect();
		        }
		      };
		    };
		    exports.shouldError = function (fiber) {
		      return shouldErrorImpl(fiber);
		    };
		    exports.shouldSuspend = function (fiber) {
		      return shouldSuspendImpl(fiber);
		    };
		    exports.startHostTransition = function (
		      formFiber,
		      pendingState,
		      action,
		      formData
		    ) {
		      if (5 !== formFiber.tag)
		        throw Error(
		          "Expected the form instance to be a HostComponent. This is a bug in React."
		        );
		      var queue = ensureFormComponentIsStateful(formFiber).queue;
		      startTransition(
		        formFiber,
		        queue,
		        pendingState,
		        NotPendingTransition,
		        null === action
		          ? noop
		          : function () {
		              null === ReactSharedInternals.T &&
		                console.error(
		                  "requestFormReset was called outside a transition or action. To fix, move to an action, or wrap with startTransition."
		                );
		              var resetStateQueue =
		                ensureFormComponentIsStateful(formFiber).next.queue;
		              dispatchSetStateInternal(
		                formFiber,
		                resetStateQueue,
		                {},
		                requestUpdateLane(formFiber)
		              );
		              return action(formData);
		            }
		      );
		    };
		    exports.updateContainer = function (
		      element,
		      container,
		      parentComponent,
		      callback
		    ) {
		      var current = container.current,
		        lane = requestUpdateLane(current);
		      updateContainerImpl(
		        current,
		        lane,
		        element,
		        container,
		        parentComponent,
		        callback
		      );
		      return lane;
		    };
		    exports.updateContainerSync = updateContainerSync;
		    return exports;
		  }),
		  (module.exports.default = module.exports),
		  Object.defineProperty(module.exports, "__esModule", { value: !0 })); 
	} (reactReconciler_development));
	return reactReconciler_development.exports;
}

var hasRequiredReactReconciler;

function requireReactReconciler () {
	if (hasRequiredReactReconciler) return reactReconciler.exports;
	hasRequiredReactReconciler = 1;

	if (process.env.NODE_ENV === 'production') {
	  reactReconciler.exports = requireReactReconciler_production();
	} else {
	  reactReconciler.exports = requireReactReconciler_development();
	}
	return reactReconciler.exports;
}

var reactReconcilerExports = requireReactReconciler();
var ReactFiberReconciler = /*@__PURE__*/getDefaultExportFromCjs(reactReconcilerExports);

var constants = {exports: {}};

var reactReconcilerConstants_production = {};

/**
 * @license React
 * react-reconciler-constants.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactReconcilerConstants_production;

function requireReactReconcilerConstants_production () {
	if (hasRequiredReactReconcilerConstants_production) return reactReconcilerConstants_production;
	hasRequiredReactReconcilerConstants_production = 1;
	reactReconcilerConstants_production.ConcurrentRoot = 1;
	reactReconcilerConstants_production.ContinuousEventPriority = 8;
	reactReconcilerConstants_production.DefaultEventPriority = 32;
	reactReconcilerConstants_production.DiscreteEventPriority = 2;
	reactReconcilerConstants_production.IdleEventPriority = 268435456;
	reactReconcilerConstants_production.LegacyRoot = 0;
	reactReconcilerConstants_production.NoEventPriority = 0;
	return reactReconcilerConstants_production;
}

var reactReconcilerConstants_development = {};

/**
 * @license React
 * react-reconciler-constants.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactReconcilerConstants_development;

function requireReactReconcilerConstants_development () {
	if (hasRequiredReactReconcilerConstants_development) return reactReconcilerConstants_development;
	hasRequiredReactReconcilerConstants_development = 1;
	"production" !== process.env.NODE_ENV &&
	  ((reactReconcilerConstants_development.ConcurrentRoot = 1),
	  (reactReconcilerConstants_development.ContinuousEventPriority = 8),
	  (reactReconcilerConstants_development.DefaultEventPriority = 32),
	  (reactReconcilerConstants_development.DiscreteEventPriority = 2),
	  (reactReconcilerConstants_development.IdleEventPriority = 268435456),
	  (reactReconcilerConstants_development.LegacyRoot = 0),
	  (reactReconcilerConstants_development.NoEventPriority = 0));
	return reactReconcilerConstants_development;
}

var hasRequiredConstants;

function requireConstants () {
	if (hasRequiredConstants) return constants.exports;
	hasRequiredConstants = 1;

	if (process.env.NODE_ENV === 'production') {
	  constants.exports = requireReactReconcilerConstants_production();
	} else {
	  constants.exports = requireReactReconcilerConstants_development();
	}
	return constants.exports;
}

var constantsExports = requireConstants();

var GlobalExports = requireGlobal();

const propsToSkip = {
    children: true,
    ref: true,
    key: true,
    style: true,
    forwardedRef: true,
    unstable_applyCache: true,
    unstable_applyDrawHitFromCache: true,
};
let zIndexWarningShowed = false;
let dragWarningShowed = false;
const EVENTS_NAMESPACE = '.react-konva-event';
let useStrictMode$1 = false;
function toggleStrictMode(value) {
    useStrictMode$1 = value;
}
const DRAGGABLE_WARNING = `ReactKonva: You have a Konva node with draggable = true and position defined but no onDragMove or onDragEnd events are handled.
Position of a node will be changed during drag&drop, so you should update state of the react app as well.
Consider to add onDragMove or onDragEnd events.
For more info see: https://github.com/konvajs/react-konva/issues/256
`;
const Z_INDEX_WARNING = `ReactKonva: You are using "zIndex" attribute for a Konva node.
react-konva may get confused with ordering. Just define correct order of elements in your render function of a component.
For more info see: https://github.com/konvajs/react-konva/issues/194
`;
const EMPTY_PROPS = {};
function applyNodeProps(instance, props, oldProps = EMPTY_PROPS) {
    // don't use zIndex in react-konva
    if (!zIndexWarningShowed && 'zIndex' in props) {
        console.warn(Z_INDEX_WARNING);
        zIndexWarningShowed = true;
    }
    // check correct draggable usage
    if (!dragWarningShowed && props.draggable) {
        var hasPosition = props.x !== undefined || props.y !== undefined;
        var hasEvents = props.onDragEnd || props.onDragMove;
        if (hasPosition && !hasEvents) {
            console.warn(DRAGGABLE_WARNING);
            dragWarningShowed = true;
        }
    }
    // check old props
    // we need to unset properties that are not in new props
    // and remove all events
    for (var key in oldProps) {
        if (propsToSkip[key]) {
            continue;
        }
        var isEvent = key.slice(0, 2) === 'on';
        var propChanged = oldProps[key] !== props[key];
        // if that is a changed event, we need to remove it
        if (isEvent && propChanged) {
            var eventName = key.substr(2).toLowerCase();
            if (eventName.substr(0, 7) === 'content') {
                eventName =
                    'content' +
                        eventName.substr(7, 1).toUpperCase() +
                        eventName.substr(8);
            }
            instance.off(eventName, oldProps[key]);
        }
        var toRemove = !props.hasOwnProperty(key);
        if (toRemove) {
            instance.setAttr(key, undefined);
        }
    }
    var strictUpdate = useStrictMode$1 || props._useStrictMode;
    var updatedProps = {};
    var hasUpdates = false;
    const newEvents = {};
    for (var key in props) {
        if (propsToSkip[key]) {
            continue;
        }
        var isEvent = key.slice(0, 2) === 'on';
        var toAdd = oldProps[key] !== props[key];
        if (isEvent && toAdd) {
            var eventName = key.substr(2).toLowerCase();
            if (eventName.substr(0, 7) === 'content') {
                eventName =
                    'content' +
                        eventName.substr(7, 1).toUpperCase() +
                        eventName.substr(8);
            }
            // check that event is not undefined
            if (props[key]) {
                newEvents[eventName] = props[key];
            }
        }
        if (!isEvent &&
            (props[key] !== oldProps[key] ||
                (strictUpdate && props[key] !== instance.getAttr(key)))) {
            hasUpdates = true;
            updatedProps[key] = props[key];
        }
    }
    if (hasUpdates) {
        instance.setAttrs(updatedProps);
        updatePicture(instance);
    }
    // subscribe to events AFTER we set attrs
    // we need it to fix https://github.com/konvajs/react-konva/issues/471
    // settings attrs may add events. Like "draggable: true" will add "mousedown" listener
    for (var eventName in newEvents) {
        instance.on(eventName + EVENTS_NAMESPACE, newEvents[eventName]);
    }
}
function updatePicture(node) {
    if (!GlobalExports.Konva.autoDrawEnabled) {
        var drawingNode = node.getLayer() || node.getStage();
        drawingNode && drawingNode.batchDraw();
    }
}

var scheduler = {exports: {}};

var scheduler_production = {};

/**
 * @license React
 * scheduler.production.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredScheduler_production;

function requireScheduler_production () {
	if (hasRequiredScheduler_production) return scheduler_production;
	hasRequiredScheduler_production = 1;
	(function (exports) {
		function push(heap, node) {
		  var index = heap.length;
		  heap.push(node);
		  a: for (; 0 < index; ) {
		    var parentIndex = (index - 1) >>> 1,
		      parent = heap[parentIndex];
		    if (0 < compare(parent, node))
		      (heap[parentIndex] = node), (heap[index] = parent), (index = parentIndex);
		    else break a;
		  }
		}
		function peek(heap) {
		  return 0 === heap.length ? null : heap[0];
		}
		function pop(heap) {
		  if (0 === heap.length) return null;
		  var first = heap[0],
		    last = heap.pop();
		  if (last !== first) {
		    heap[0] = last;
		    a: for (
		      var index = 0, length = heap.length, halfLength = length >>> 1;
		      index < halfLength;

		    ) {
		      var leftIndex = 2 * (index + 1) - 1,
		        left = heap[leftIndex],
		        rightIndex = leftIndex + 1,
		        right = heap[rightIndex];
		      if (0 > compare(left, last))
		        rightIndex < length && 0 > compare(right, left)
		          ? ((heap[index] = right),
		            (heap[rightIndex] = last),
		            (index = rightIndex))
		          : ((heap[index] = left),
		            (heap[leftIndex] = last),
		            (index = leftIndex));
		      else if (rightIndex < length && 0 > compare(right, last))
		        (heap[index] = right), (heap[rightIndex] = last), (index = rightIndex);
		      else break a;
		    }
		  }
		  return first;
		}
		function compare(a, b) {
		  var diff = a.sortIndex - b.sortIndex;
		  return 0 !== diff ? diff : a.id - b.id;
		}
		exports.unstable_now = void 0;
		if ("object" === typeof performance && "function" === typeof performance.now) {
		  var localPerformance = performance;
		  exports.unstable_now = function () {
		    return localPerformance.now();
		  };
		} else {
		  var localDate = Date,
		    initialTime = localDate.now();
		  exports.unstable_now = function () {
		    return localDate.now() - initialTime;
		  };
		}
		var taskQueue = [],
		  timerQueue = [],
		  taskIdCounter = 1,
		  currentTask = null,
		  currentPriorityLevel = 3,
		  isPerformingWork = !1,
		  isHostCallbackScheduled = !1,
		  isHostTimeoutScheduled = !1,
		  localSetTimeout = "function" === typeof setTimeout ? setTimeout : null,
		  localClearTimeout = "function" === typeof clearTimeout ? clearTimeout : null,
		  localSetImmediate = "undefined" !== typeof setImmediate ? setImmediate : null;
		function advanceTimers(currentTime) {
		  for (var timer = peek(timerQueue); null !== timer; ) {
		    if (null === timer.callback) pop(timerQueue);
		    else if (timer.startTime <= currentTime)
		      pop(timerQueue),
		        (timer.sortIndex = timer.expirationTime),
		        push(taskQueue, timer);
		    else break;
		    timer = peek(timerQueue);
		  }
		}
		function handleTimeout(currentTime) {
		  isHostTimeoutScheduled = !1;
		  advanceTimers(currentTime);
		  if (!isHostCallbackScheduled)
		    if (null !== peek(taskQueue))
		      (isHostCallbackScheduled = !0), requestHostCallback();
		    else {
		      var firstTimer = peek(timerQueue);
		      null !== firstTimer &&
		        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
		    }
		}
		var isMessageLoopRunning = !1,
		  taskTimeoutID = -1,
		  frameInterval = 5,
		  startTime = -1;
		function shouldYieldToHost() {
		  return exports.unstable_now() - startTime < frameInterval ? !1 : !0;
		}
		function performWorkUntilDeadline() {
		  if (isMessageLoopRunning) {
		    var currentTime = exports.unstable_now();
		    startTime = currentTime;
		    var hasMoreWork = !0;
		    try {
		      a: {
		        isHostCallbackScheduled = !1;
		        isHostTimeoutScheduled &&
		          ((isHostTimeoutScheduled = !1),
		          localClearTimeout(taskTimeoutID),
		          (taskTimeoutID = -1));
		        isPerformingWork = !0;
		        var previousPriorityLevel = currentPriorityLevel;
		        try {
		          b: {
		            advanceTimers(currentTime);
		            for (
		              currentTask = peek(taskQueue);
		              null !== currentTask &&
		              !(
		                currentTask.expirationTime > currentTime && shouldYieldToHost()
		              );

		            ) {
		              var callback = currentTask.callback;
		              if ("function" === typeof callback) {
		                currentTask.callback = null;
		                currentPriorityLevel = currentTask.priorityLevel;
		                var continuationCallback = callback(
		                  currentTask.expirationTime <= currentTime
		                );
		                currentTime = exports.unstable_now();
		                if ("function" === typeof continuationCallback) {
		                  currentTask.callback = continuationCallback;
		                  advanceTimers(currentTime);
		                  hasMoreWork = !0;
		                  break b;
		                }
		                currentTask === peek(taskQueue) && pop(taskQueue);
		                advanceTimers(currentTime);
		              } else pop(taskQueue);
		              currentTask = peek(taskQueue);
		            }
		            if (null !== currentTask) hasMoreWork = !0;
		            else {
		              var firstTimer = peek(timerQueue);
		              null !== firstTimer &&
		                requestHostTimeout(
		                  handleTimeout,
		                  firstTimer.startTime - currentTime
		                );
		              hasMoreWork = !1;
		            }
		          }
		          break a;
		        } finally {
		          (currentTask = null),
		            (currentPriorityLevel = previousPriorityLevel),
		            (isPerformingWork = !1);
		        }
		        hasMoreWork = void 0;
		      }
		    } finally {
		      hasMoreWork
		        ? schedulePerformWorkUntilDeadline()
		        : (isMessageLoopRunning = !1);
		    }
		  }
		}
		var schedulePerformWorkUntilDeadline;
		if ("function" === typeof localSetImmediate)
		  schedulePerformWorkUntilDeadline = function () {
		    localSetImmediate(performWorkUntilDeadline);
		  };
		else if ("undefined" !== typeof MessageChannel) {
		  var channel = new MessageChannel(),
		    port = channel.port2;
		  channel.port1.onmessage = performWorkUntilDeadline;
		  schedulePerformWorkUntilDeadline = function () {
		    port.postMessage(null);
		  };
		} else
		  schedulePerformWorkUntilDeadline = function () {
		    localSetTimeout(performWorkUntilDeadline, 0);
		  };
		function requestHostCallback() {
		  isMessageLoopRunning ||
		    ((isMessageLoopRunning = !0), schedulePerformWorkUntilDeadline());
		}
		function requestHostTimeout(callback, ms) {
		  taskTimeoutID = localSetTimeout(function () {
		    callback(exports.unstable_now());
		  }, ms);
		}
		exports.unstable_IdlePriority = 5;
		exports.unstable_ImmediatePriority = 1;
		exports.unstable_LowPriority = 4;
		exports.unstable_NormalPriority = 3;
		exports.unstable_Profiling = null;
		exports.unstable_UserBlockingPriority = 2;
		exports.unstable_cancelCallback = function (task) {
		  task.callback = null;
		};
		exports.unstable_continueExecution = function () {
		  isHostCallbackScheduled ||
		    isPerformingWork ||
		    ((isHostCallbackScheduled = !0), requestHostCallback());
		};
		exports.unstable_forceFrameRate = function (fps) {
		  0 > fps || 125 < fps
		    ? console.error(
		        "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
		      )
		    : (frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5);
		};
		exports.unstable_getCurrentPriorityLevel = function () {
		  return currentPriorityLevel;
		};
		exports.unstable_getFirstCallbackNode = function () {
		  return peek(taskQueue);
		};
		exports.unstable_next = function (eventHandler) {
		  switch (currentPriorityLevel) {
		    case 1:
		    case 2:
		    case 3:
		      var priorityLevel = 3;
		      break;
		    default:
		      priorityLevel = currentPriorityLevel;
		  }
		  var previousPriorityLevel = currentPriorityLevel;
		  currentPriorityLevel = priorityLevel;
		  try {
		    return eventHandler();
		  } finally {
		    currentPriorityLevel = previousPriorityLevel;
		  }
		};
		exports.unstable_pauseExecution = function () {};
		exports.unstable_requestPaint = function () {};
		exports.unstable_runWithPriority = function (priorityLevel, eventHandler) {
		  switch (priorityLevel) {
		    case 1:
		    case 2:
		    case 3:
		    case 4:
		    case 5:
		      break;
		    default:
		      priorityLevel = 3;
		  }
		  var previousPriorityLevel = currentPriorityLevel;
		  currentPriorityLevel = priorityLevel;
		  try {
		    return eventHandler();
		  } finally {
		    currentPriorityLevel = previousPriorityLevel;
		  }
		};
		exports.unstable_scheduleCallback = function (
		  priorityLevel,
		  callback,
		  options
		) {
		  var currentTime = exports.unstable_now();
		  "object" === typeof options && null !== options
		    ? ((options = options.delay),
		      (options =
		        "number" === typeof options && 0 < options
		          ? currentTime + options
		          : currentTime))
		    : (options = currentTime);
		  switch (priorityLevel) {
		    case 1:
		      var timeout = -1;
		      break;
		    case 2:
		      timeout = 250;
		      break;
		    case 5:
		      timeout = 1073741823;
		      break;
		    case 4:
		      timeout = 1e4;
		      break;
		    default:
		      timeout = 5e3;
		  }
		  timeout = options + timeout;
		  priorityLevel = {
		    id: taskIdCounter++,
		    callback: callback,
		    priorityLevel: priorityLevel,
		    startTime: options,
		    expirationTime: timeout,
		    sortIndex: -1
		  };
		  options > currentTime
		    ? ((priorityLevel.sortIndex = options),
		      push(timerQueue, priorityLevel),
		      null === peek(taskQueue) &&
		        priorityLevel === peek(timerQueue) &&
		        (isHostTimeoutScheduled
		          ? (localClearTimeout(taskTimeoutID), (taskTimeoutID = -1))
		          : (isHostTimeoutScheduled = !0),
		        requestHostTimeout(handleTimeout, options - currentTime)))
		    : ((priorityLevel.sortIndex = timeout),
		      push(taskQueue, priorityLevel),
		      isHostCallbackScheduled ||
		        isPerformingWork ||
		        ((isHostCallbackScheduled = !0), requestHostCallback()));
		  return priorityLevel;
		};
		exports.unstable_shouldYield = shouldYieldToHost;
		exports.unstable_wrapCallback = function (callback) {
		  var parentPriorityLevel = currentPriorityLevel;
		  return function () {
		    var previousPriorityLevel = currentPriorityLevel;
		    currentPriorityLevel = parentPriorityLevel;
		    try {
		      return callback.apply(this, arguments);
		    } finally {
		      currentPriorityLevel = previousPriorityLevel;
		    }
		  };
		}; 
	} (scheduler_production));
	return scheduler_production;
}

var scheduler_development = {};

/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredScheduler_development;

function requireScheduler_development () {
	if (hasRequiredScheduler_development) return scheduler_development;
	hasRequiredScheduler_development = 1;
	(function (exports) {
		"production" !== process.env.NODE_ENV &&
		  (function () {
		    function performWorkUntilDeadline() {
		      if (isMessageLoopRunning) {
		        var currentTime = exports.unstable_now();
		        startTime = currentTime;
		        var hasMoreWork = !0;
		        try {
		          a: {
		            isHostCallbackScheduled = !1;
		            isHostTimeoutScheduled &&
		              ((isHostTimeoutScheduled = !1),
		              localClearTimeout(taskTimeoutID),
		              (taskTimeoutID = -1));
		            isPerformingWork = !0;
		            var previousPriorityLevel = currentPriorityLevel;
		            try {
		              b: {
		                advanceTimers(currentTime);
		                for (
		                  currentTask = peek(taskQueue);
		                  null !== currentTask &&
		                  !(
		                    currentTask.expirationTime > currentTime &&
		                    shouldYieldToHost()
		                  );

		                ) {
		                  var callback = currentTask.callback;
		                  if ("function" === typeof callback) {
		                    currentTask.callback = null;
		                    currentPriorityLevel = currentTask.priorityLevel;
		                    var continuationCallback = callback(
		                      currentTask.expirationTime <= currentTime
		                    );
		                    currentTime = exports.unstable_now();
		                    if ("function" === typeof continuationCallback) {
		                      currentTask.callback = continuationCallback;
		                      advanceTimers(currentTime);
		                      hasMoreWork = !0;
		                      break b;
		                    }
		                    currentTask === peek(taskQueue) && pop(taskQueue);
		                    advanceTimers(currentTime);
		                  } else pop(taskQueue);
		                  currentTask = peek(taskQueue);
		                }
		                if (null !== currentTask) hasMoreWork = !0;
		                else {
		                  var firstTimer = peek(timerQueue);
		                  null !== firstTimer &&
		                    requestHostTimeout(
		                      handleTimeout,
		                      firstTimer.startTime - currentTime
		                    );
		                  hasMoreWork = !1;
		                }
		              }
		              break a;
		            } finally {
		              (currentTask = null),
		                (currentPriorityLevel = previousPriorityLevel),
		                (isPerformingWork = !1);
		            }
		            hasMoreWork = void 0;
		          }
		        } finally {
		          hasMoreWork
		            ? schedulePerformWorkUntilDeadline()
		            : (isMessageLoopRunning = !1);
		        }
		      }
		    }
		    function push(heap, node) {
		      var index = heap.length;
		      heap.push(node);
		      a: for (; 0 < index; ) {
		        var parentIndex = (index - 1) >>> 1,
		          parent = heap[parentIndex];
		        if (0 < compare(parent, node))
		          (heap[parentIndex] = node),
		            (heap[index] = parent),
		            (index = parentIndex);
		        else break a;
		      }
		    }
		    function peek(heap) {
		      return 0 === heap.length ? null : heap[0];
		    }
		    function pop(heap) {
		      if (0 === heap.length) return null;
		      var first = heap[0],
		        last = heap.pop();
		      if (last !== first) {
		        heap[0] = last;
		        a: for (
		          var index = 0, length = heap.length, halfLength = length >>> 1;
		          index < halfLength;

		        ) {
		          var leftIndex = 2 * (index + 1) - 1,
		            left = heap[leftIndex],
		            rightIndex = leftIndex + 1,
		            right = heap[rightIndex];
		          if (0 > compare(left, last))
		            rightIndex < length && 0 > compare(right, left)
		              ? ((heap[index] = right),
		                (heap[rightIndex] = last),
		                (index = rightIndex))
		              : ((heap[index] = left),
		                (heap[leftIndex] = last),
		                (index = leftIndex));
		          else if (rightIndex < length && 0 > compare(right, last))
		            (heap[index] = right),
		              (heap[rightIndex] = last),
		              (index = rightIndex);
		          else break a;
		        }
		      }
		      return first;
		    }
		    function compare(a, b) {
		      var diff = a.sortIndex - b.sortIndex;
		      return 0 !== diff ? diff : a.id - b.id;
		    }
		    function advanceTimers(currentTime) {
		      for (var timer = peek(timerQueue); null !== timer; ) {
		        if (null === timer.callback) pop(timerQueue);
		        else if (timer.startTime <= currentTime)
		          pop(timerQueue),
		            (timer.sortIndex = timer.expirationTime),
		            push(taskQueue, timer);
		        else break;
		        timer = peek(timerQueue);
		      }
		    }
		    function handleTimeout(currentTime) {
		      isHostTimeoutScheduled = !1;
		      advanceTimers(currentTime);
		      if (!isHostCallbackScheduled)
		        if (null !== peek(taskQueue))
		          (isHostCallbackScheduled = !0), requestHostCallback();
		        else {
		          var firstTimer = peek(timerQueue);
		          null !== firstTimer &&
		            requestHostTimeout(
		              handleTimeout,
		              firstTimer.startTime - currentTime
		            );
		        }
		    }
		    function shouldYieldToHost() {
		      return exports.unstable_now() - startTime < frameInterval ? !1 : !0;
		    }
		    function requestHostCallback() {
		      isMessageLoopRunning ||
		        ((isMessageLoopRunning = !0), schedulePerformWorkUntilDeadline());
		    }
		    function requestHostTimeout(callback, ms) {
		      taskTimeoutID = localSetTimeout(function () {
		        callback(exports.unstable_now());
		      }, ms);
		    }
		    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
		      "function" ===
		        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart &&
		      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(Error());
		    exports.unstable_now = void 0;
		    if (
		      "object" === typeof performance &&
		      "function" === typeof performance.now
		    ) {
		      var localPerformance = performance;
		      exports.unstable_now = function () {
		        return localPerformance.now();
		      };
		    } else {
		      var localDate = Date,
		        initialTime = localDate.now();
		      exports.unstable_now = function () {
		        return localDate.now() - initialTime;
		      };
		    }
		    var taskQueue = [],
		      timerQueue = [],
		      taskIdCounter = 1,
		      currentTask = null,
		      currentPriorityLevel = 3,
		      isPerformingWork = !1,
		      isHostCallbackScheduled = !1,
		      isHostTimeoutScheduled = !1,
		      localSetTimeout = "function" === typeof setTimeout ? setTimeout : null,
		      localClearTimeout =
		        "function" === typeof clearTimeout ? clearTimeout : null,
		      localSetImmediate =
		        "undefined" !== typeof setImmediate ? setImmediate : null,
		      isMessageLoopRunning = !1,
		      taskTimeoutID = -1,
		      frameInterval = 5,
		      startTime = -1;
		    if ("function" === typeof localSetImmediate)
		      var schedulePerformWorkUntilDeadline = function () {
		        localSetImmediate(performWorkUntilDeadline);
		      };
		    else if ("undefined" !== typeof MessageChannel) {
		      var channel = new MessageChannel(),
		        port = channel.port2;
		      channel.port1.onmessage = performWorkUntilDeadline;
		      schedulePerformWorkUntilDeadline = function () {
		        port.postMessage(null);
		      };
		    } else
		      schedulePerformWorkUntilDeadline = function () {
		        localSetTimeout(performWorkUntilDeadline, 0);
		      };
		    exports.unstable_IdlePriority = 5;
		    exports.unstable_ImmediatePriority = 1;
		    exports.unstable_LowPriority = 4;
		    exports.unstable_NormalPriority = 3;
		    exports.unstable_Profiling = null;
		    exports.unstable_UserBlockingPriority = 2;
		    exports.unstable_cancelCallback = function (task) {
		      task.callback = null;
		    };
		    exports.unstable_continueExecution = function () {
		      isHostCallbackScheduled ||
		        isPerformingWork ||
		        ((isHostCallbackScheduled = !0), requestHostCallback());
		    };
		    exports.unstable_forceFrameRate = function (fps) {
		      0 > fps || 125 < fps
		        ? console.error(
		            "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
		          )
		        : (frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5);
		    };
		    exports.unstable_getCurrentPriorityLevel = function () {
		      return currentPriorityLevel;
		    };
		    exports.unstable_getFirstCallbackNode = function () {
		      return peek(taskQueue);
		    };
		    exports.unstable_next = function (eventHandler) {
		      switch (currentPriorityLevel) {
		        case 1:
		        case 2:
		        case 3:
		          var priorityLevel = 3;
		          break;
		        default:
		          priorityLevel = currentPriorityLevel;
		      }
		      var previousPriorityLevel = currentPriorityLevel;
		      currentPriorityLevel = priorityLevel;
		      try {
		        return eventHandler();
		      } finally {
		        currentPriorityLevel = previousPriorityLevel;
		      }
		    };
		    exports.unstable_pauseExecution = function () {};
		    exports.unstable_requestPaint = function () {};
		    exports.unstable_runWithPriority = function (priorityLevel, eventHandler) {
		      switch (priorityLevel) {
		        case 1:
		        case 2:
		        case 3:
		        case 4:
		        case 5:
		          break;
		        default:
		          priorityLevel = 3;
		      }
		      var previousPriorityLevel = currentPriorityLevel;
		      currentPriorityLevel = priorityLevel;
		      try {
		        return eventHandler();
		      } finally {
		        currentPriorityLevel = previousPriorityLevel;
		      }
		    };
		    exports.unstable_scheduleCallback = function (
		      priorityLevel,
		      callback,
		      options
		    ) {
		      var currentTime = exports.unstable_now();
		      "object" === typeof options && null !== options
		        ? ((options = options.delay),
		          (options =
		            "number" === typeof options && 0 < options
		              ? currentTime + options
		              : currentTime))
		        : (options = currentTime);
		      switch (priorityLevel) {
		        case 1:
		          var timeout = -1;
		          break;
		        case 2:
		          timeout = 250;
		          break;
		        case 5:
		          timeout = 1073741823;
		          break;
		        case 4:
		          timeout = 1e4;
		          break;
		        default:
		          timeout = 5e3;
		      }
		      timeout = options + timeout;
		      priorityLevel = {
		        id: taskIdCounter++,
		        callback: callback,
		        priorityLevel: priorityLevel,
		        startTime: options,
		        expirationTime: timeout,
		        sortIndex: -1
		      };
		      options > currentTime
		        ? ((priorityLevel.sortIndex = options),
		          push(timerQueue, priorityLevel),
		          null === peek(taskQueue) &&
		            priorityLevel === peek(timerQueue) &&
		            (isHostTimeoutScheduled
		              ? (localClearTimeout(taskTimeoutID), (taskTimeoutID = -1))
		              : (isHostTimeoutScheduled = !0),
		            requestHostTimeout(handleTimeout, options - currentTime)))
		        : ((priorityLevel.sortIndex = timeout),
		          push(taskQueue, priorityLevel),
		          isHostCallbackScheduled ||
		            isPerformingWork ||
		            ((isHostCallbackScheduled = !0), requestHostCallback()));
		      return priorityLevel;
		    };
		    exports.unstable_shouldYield = shouldYieldToHost;
		    exports.unstable_wrapCallback = function (callback) {
		      var parentPriorityLevel = currentPriorityLevel;
		      return function () {
		        var previousPriorityLevel = currentPriorityLevel;
		        currentPriorityLevel = parentPriorityLevel;
		        try {
		          return callback.apply(this, arguments);
		        } finally {
		          currentPriorityLevel = previousPriorityLevel;
		        }
		      };
		    };
		    "undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ &&
		      "function" ===
		        typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop &&
		      __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(Error());
		  })(); 
	} (scheduler_development));
	return scheduler_development;
}

var hasRequiredScheduler;

function requireScheduler () {
	if (hasRequiredScheduler) return scheduler.exports;
	hasRequiredScheduler = 1;

	if (process.env.NODE_ENV === 'production') {
	  scheduler.exports = requireScheduler_production();
	} else {
	  scheduler.exports = requireScheduler_development();
	}
	return scheduler.exports;
}

var schedulerExports = requireScheduler();

const NO_CONTEXT = {};
const UPDATE_SIGNAL = {};
// for react-spring capability
Konva$1.Node.prototype._applyProps = applyNodeProps;
// let currentUpdatePriority: number = NoEventPriority;
let currentUpdatePriority = constantsExports.DefaultEventPriority;
function appendInitialChild(parentInstance, child) {
    if (typeof child === 'string') {
        // Noop for string children of Text (eg <Text>foo</Text>)
        console.error(`Do not use plain text as child of Konva.Node. You are using text: ${child}`);
        return;
    }
    parentInstance.add(child);
    updatePicture(parentInstance);
}
function createInstance(type, props, internalInstanceHandle) {
    let NodeClass = Konva$1[type];
    if (!NodeClass) {
        console.error(`Konva has no node with the type ${type}. Group will be used instead. If you use minimal version of react-konva, just import required nodes into Konva: "import "konva/lib/shapes/${type}"  If you want to render DOM elements as part of canvas tree take a look into this demo: https://konvajs.github.io/docs/react/DOM_Portal.html`);
        NodeClass = Konva$1.Group;
    }
    // we need to split props into events and non events
    // we we can pass non events into constructor directly
    // that way the performance should be better
    // we we apply change "applyNodeProps"
    // then it will trigger change events on first run
    // but we don't need them!
    const propsWithoutEvents = {};
    const propsWithOnlyEvents = {};
    for (var key in props) {
        var isEvent = key.slice(0, 2) === 'on';
        if (isEvent) {
            propsWithOnlyEvents[key] = props[key];
        }
        else {
            propsWithoutEvents[key] = props[key];
        }
    }
    const instance = new NodeClass(propsWithoutEvents);
    applyNodeProps(instance, propsWithOnlyEvents);
    return instance;
}
function createTextInstance(text, rootContainerInstance, internalInstanceHandle) {
    console.error(`Text components are not supported for now in ReactKonva. Your text is: "${text}"`);
}
function finalizeInitialChildren(domElement, type, props) {
    return false;
}
function getPublicInstance(instance) {
    return instance;
}
function prepareForCommit() {
    return null;
}
function preparePortalMount() {
    return null;
}
function prepareUpdate(domElement, type, oldProps, newProps) {
    return UPDATE_SIGNAL;
}
function resetAfterCommit() {
    // Noop
}
function resetTextContent(domElement) {
    // Noop
}
function shouldDeprioritizeSubtree(type, props) {
    return false;
}
function getRootHostContext() {
    return NO_CONTEXT;
}
function getChildHostContext() {
    return NO_CONTEXT;
}
const scheduleTimeout = setTimeout;
const cancelTimeout = clearTimeout;
const supportsMicrotasks = true;
// use this to schedule microtasks
// I don't know if we should do this in react-konva
// better to run schedule in sync mode
// so setState will call render imidiatly
// it may be not optimal
// but working in sync mode is simpler.
const scheduleMicrotask = (fn) => {
    fn();
};
const noTimeout = -1;
// export const schedulePassiveEffects = scheduleDeferredCallback;
// export const cancelPassiveEffects = cancelDeferredCallback;
function shouldSetTextContent(type, props) {
    return false;
}
// The Konva renderer is secondary to the React DOM renderer.
const isPrimaryRenderer = false;
const warnsIfNotActing = false;
const supportsMutation = true;
const supportsPersistence = false;
const supportsHydration = false;
function appendChild(parentInstance, child) {
    if (child.parent === parentInstance) {
        child.moveToTop();
    }
    else {
        parentInstance.add(child);
    }
    updatePicture(parentInstance);
}
function appendChildToContainer(parentInstance, child) {
    if (child.parent === parentInstance) {
        child.moveToTop();
    }
    else {
        parentInstance.add(child);
    }
    updatePicture(parentInstance);
}
function insertBefore(parentInstance, child, beforeChild) {
    // child._remove() will not stop dragging
    // but child.remove() will stop it, but we don't need it
    // removing will reset zIndexes
    child._remove();
    parentInstance.add(child);
    child.setZIndex(beforeChild.getZIndex());
    updatePicture(parentInstance);
}
function insertInContainerBefore(parentInstance, child, beforeChild) {
    insertBefore(parentInstance, child, beforeChild);
}
function removeChild(parentInstance, child) {
    child.destroy();
    child.off(EVENTS_NAMESPACE);
    updatePicture(parentInstance);
}
function removeChildFromContainer(parentInstance, child) {
    child.destroy();
    child.off(EVENTS_NAMESPACE);
    updatePicture(parentInstance);
}
function commitTextUpdate(textInstance, oldText, newText) {
    console.error(`Text components are not yet supported in ReactKonva. You text is: "${newText}"`);
}
function commitMount(instance, type, newProps) {
    // Noop
}
function commitUpdate(instance, type, oldProps, newProps) {
    applyNodeProps(instance, newProps, oldProps);
}
function hideInstance(instance) {
    instance.hide();
    updatePicture(instance);
}
function hideTextInstance(textInstance) {
    // Noop
}
function unhideInstance(instance, props) {
    if (props.visible == null || props.visible) {
        instance.show();
    }
}
function unhideTextInstance(textInstance, text) {
    // Noop
}
function clearContainer(container) {
    // Noop
}
function detachDeletedInstance() { }
function getCurrentEventPriority() {
    return constantsExports.DefaultEventPriority;
}
function prepareScopeUpdate() { }
function getInstanceFromScope() {
    return null;
}
function setCurrentUpdatePriority(newPriority) {
    currentUpdatePriority = newPriority;
}
function getCurrentUpdatePriority() {
    return currentUpdatePriority;
}
function resolveUpdatePriority() {
    return constantsExports.DiscreteEventPriority;
}
function shouldAttemptEagerTransition() {
    return false;
}
function requestPostPaintCallback() { }
function maySuspendCommit() {
    return false;
}
function preloadInstance() {
    return true;
}
function startSuspendingCommit() { }
function suspendInstance() { }
function waitForCommitToBeReady() {
    return null;
}
const NotPendingTransition = null;
function resetFormInstance() { }

var HostConfig = /*#__PURE__*/Object.freeze({
	__proto__: null,
	NotPendingTransition: NotPendingTransition,
	appendChild: appendChild,
	appendChildToContainer: appendChildToContainer,
	appendInitialChild: appendInitialChild,
	cancelTimeout: cancelTimeout,
	clearContainer: clearContainer,
	commitMount: commitMount,
	commitTextUpdate: commitTextUpdate,
	commitUpdate: commitUpdate,
	createInstance: createInstance,
	createTextInstance: createTextInstance,
	detachDeletedInstance: detachDeletedInstance,
	finalizeInitialChildren: finalizeInitialChildren,
	getChildHostContext: getChildHostContext,
	getCurrentEventPriority: getCurrentEventPriority,
	getCurrentUpdatePriority: getCurrentUpdatePriority,
	getInstanceFromScope: getInstanceFromScope,
	getPublicInstance: getPublicInstance,
	getRootHostContext: getRootHostContext,
	hideInstance: hideInstance,
	hideTextInstance: hideTextInstance,
	idlePriority: schedulerExports.unstable_IdlePriority,
	insertBefore: insertBefore,
	insertInContainerBefore: insertInContainerBefore,
	isPrimaryRenderer: isPrimaryRenderer,
	maySuspendCommit: maySuspendCommit,
	noTimeout: noTimeout,
	now: schedulerExports.unstable_now,
	preloadInstance: preloadInstance,
	prepareForCommit: prepareForCommit,
	preparePortalMount: preparePortalMount,
	prepareScopeUpdate: prepareScopeUpdate,
	prepareUpdate: prepareUpdate,
	removeChild: removeChild,
	removeChildFromContainer: removeChildFromContainer,
	requestPostPaintCallback: requestPostPaintCallback,
	resetAfterCommit: resetAfterCommit,
	resetFormInstance: resetFormInstance,
	resetTextContent: resetTextContent,
	resolveUpdatePriority: resolveUpdatePriority,
	run: schedulerExports.unstable_runWithPriority,
	scheduleMicrotask: scheduleMicrotask,
	scheduleTimeout: scheduleTimeout,
	setCurrentUpdatePriority: setCurrentUpdatePriority,
	shouldAttemptEagerTransition: shouldAttemptEagerTransition,
	shouldDeprioritizeSubtree: shouldDeprioritizeSubtree,
	shouldSetTextContent: shouldSetTextContent,
	startSuspendingCommit: startSuspendingCommit,
	supportsHydration: supportsHydration,
	supportsMicrotasks: supportsMicrotasks,
	supportsMutation: supportsMutation,
	supportsPersistence: supportsPersistence,
	suspendInstance: suspendInstance,
	unhideInstance: unhideInstance,
	unhideTextInstance: unhideTextInstance,
	waitForCommitToBeReady: waitForCommitToBeReady,
	warnsIfNotActing: warnsIfNotActing
});

function i(e, t, r) {
  if (!e) return;
  if (r(e) === !0) return e;
  let n = t ? e.return : e.child;
  for (; n; ) {
    const u = i(n, t, r);
    if (u) return u;
    n = t ? null : n.sibling;
  }
}
function l(e) {
  try {
    return Object.defineProperties(e, {
      _currentRenderer: {
        get() {
          return null;
        },
        set() {
        }
      },
      _currentRenderer2: {
        get() {
          return null;
        },
        set() {
        }
      }
    });
  } catch (t) {
    return e;
  }
}
const a = /* @__PURE__ */ l(/* @__PURE__ */ React.createContext(null));
class m extends React.Component {
  render() {
    return /* @__PURE__ */ React.createElement(a.Provider, { value: this._reactInternals }, this.props.children);
  }
}
function c() {
  const e = React.useContext(a);
  if (e === null) throw new Error("its-fine: useFiber must be called within a <FiberProvider />!");
  const t = React.useId();
  return React.useMemo(() => {
    for (const n of [e, e == null ? void 0 : e.alternate]) {
      if (!n) continue;
      const u = i(n, !1, (d) => {
        let s = d.memoizedState;
        for (; s; ) {
          if (s.memoizedState === t) return !0;
          s = s.next;
        }
      });
      if (u) return u;
    }
  }, [e, t]);
}
const p = Symbol.for("react.context"), b = (e) => e !== null && typeof e == "object" && "$$typeof" in e && e.$$typeof === p;
function h() {
  const e = c(), [t] = React.useState(() => /* @__PURE__ */ new Map());
  t.clear();
  let r = e;
  for (; r; ) {
    const n = r.type;
    b(n) && n !== a && !t.has(n) && t.set(n, React.use(l(n))), r = r.return;
  }
  return t;
}
function x() {
  const e = h();
  return React.useMemo(
    () => Array.from(e.keys()).reduce(
      (t, r) => (n) => /* @__PURE__ */ React.createElement(t, null, /* @__PURE__ */ React.createElement(r.Provider, { ...n, value: e.get(r) })),
      (t) => /* @__PURE__ */ React.createElement(m, { ...t })
    ),
    [e]
  );
}

/**
 * Based on ReactArt.js
 * Copyright (c) 2017-present Lavrenov Anton.
 * All rights reserved.
 *
 * MIT
 */
if (React__default.version.indexOf('19') === -1) {
    throw new Error('react-konva version 19 is only compatible with React 19. Make sure to have the last version of react-konva and react or downgrade react-konva to version 18.');
}
function usePrevious(value) {
    const ref = React__default.useRef({});
    React__default.useLayoutEffect(() => {
        ref.current = value;
    });
    React__default.useLayoutEffect(() => {
        return () => {
            // when using suspense it is possible that stage is unmounted
            // but React still keep component ref
            // in that case we need to manually flush props
            // we have a special test for that
            ref.current = {};
        };
    }, []);
    return ref.current;
}
const StageWrap = (props) => {
    const container = React__default.useRef(null);
    const stage = React__default.useRef(null);
    const fiberRef = React__default.useRef(null);
    const oldProps = usePrevious(props);
    const Bridge = x();
    const _setRef = (stage) => {
        const { forwardedRef } = props;
        if (!forwardedRef) {
            return;
        }
        if (typeof forwardedRef === 'function') {
            forwardedRef(stage);
        }
        else {
            forwardedRef.current = stage;
        }
    };
    React__default.useLayoutEffect(() => {
        stage.current = new Konva$1.Stage({
            width: props.width,
            height: props.height,
            container: container.current,
        });
        _setRef(stage.current);
        // @ts-ignore
        fiberRef.current = KonvaRenderer.createContainer(stage.current, constantsExports.ConcurrentRoot, null, false, null, '', console.error, console.error, console.error, null);
        KonvaRenderer.updateContainer(React__default.createElement(Bridge, {}, props.children), fiberRef.current, null, () => { });
        return () => {
            _setRef(null);
            KonvaRenderer.updateContainer(null, fiberRef.current, null);
            stage.current.destroy();
        };
    }, []);
    React__default.useLayoutEffect(() => {
        _setRef(stage.current);
        applyNodeProps(stage.current, props, oldProps);
        KonvaRenderer.updateContainer(React__default.createElement(Bridge, {}, props.children), fiberRef.current, null);
    });
    return React__default.createElement('div', {
        ref: container,
        id: props.id,
        accessKey: props.accessKey,
        className: props.className,
        role: props.role,
        style: props.style,
        tabIndex: props.tabIndex,
        title: props.title,
    });
};
const Layer = 'Layer';
const Group = 'Group';
const Rect = 'Rect';
const Ellipse$2 = 'Ellipse';
const Line$2 = 'Line';
const Image$1 = 'Image';
const Text$3 = 'Text';
const RegularPolygon = 'RegularPolygon';
const Arrow$3 = 'Arrow';
const Transformer = 'Transformer';
// @ts-ignore
const KonvaRenderer = ReactFiberReconciler(HostConfig);
KonvaRenderer.injectIntoDevTools({
    // @ts-ignore
    findHostInstanceByFiber: () => null,
    bundleType: process.env.NODE_ENV !== 'production' ? 1 : 0,
    version: React__default.version,
    rendererPackageName: 'react-konva',
});
// Update Stage component declaration
const Stage = React__default.forwardRef((props, ref) => {
    return React__default.createElement(m, {}, React__default.createElement(StageWrap, { ...props, forwardedRef: ref }));
});
const useStrictMode = toggleStrictMode;

const getDimensionsMinimalRatio = (firstWidth, firstHeight, secondWidth, secondHeight) => {
  const widthScale = firstWidth / secondWidth;
  const heightScale = firstHeight / secondHeight;
  return Math.min(widthScale, heightScale) || 1;
};

const ROOT_CONTAINER_CLASS_NAME = 'FIE_root';
const DESIGN_LAYER_ID = 'FIE_design-layer';
const TRANSFORMERS_LAYER_ID = 'FIE_transformers-layer';
const IMAGE_NODE_ID = 'FIE_original-image';
const NODES_TRANSFORMER_ID = 'FIE_nodes-transformer';
const WATERMARK_ANNOTATION_ID$1 = 'watermark';
const TRANSLATIONS_GRID_UUID = '353297d2-40b4-4684-a875-45a2178a8157';
const DEFAULT_SAVE_QUALITY = 0.92;
const TABS_IDS = {
  FINETUNE: 'Finetune',
  FILTERS: 'Filters',
  ADJUST: 'Adjust',
  WATERMARK: 'Watermark',
  ANNOTATE: 'Annotate',
  RESIZE: 'Resize'
};
const TOOLS_IDS = {
  CROP: 'Crop',
  ROTATE: 'Rotate',
  FLIP_X: 'Flip_X',
  FLIP_Y: 'Flip_Y',
  BRIGHTNESS: 'Brightness',
  CONTRAST: 'Contrast',
  HSV: 'HueSaturationValue',
  WARMTH: 'Warmth',
  BLUR: 'Blur',
  THRESHOLD: 'Threshold',
  POSTERIZE: 'Posterize',
  PIXELATE: 'Pixelate',
  NOISE: 'Noise',
  FILTERS: 'Filters',
  RECT: 'Rect',
  ELLIPSE: 'Ellipse',
  POLYGON: 'Polygon',
  TEXT: 'Text',
  LINE: 'Line',
  IMAGE: 'Image',
  ARROW: 'Arrow',
  WATERMARK: 'Watermark',
  PEN: 'Pen',
  RESIZE: 'Resize'
};
const FLIP_DIRECTIONS = {
  X: 'X',
  Y: 'Y'
};
const DEFAULT_ZOOM_FACTOR = 1;
const SUPPORTED_IMAGE_TYPES = ['png', 'jpeg', 'jpg', 'webp'];
const POSSIBLE_IMAGE_TYPES = [...SUPPORTED_IMAGE_TYPES, 'svg', 'gif', 'avif', 'apng'];
const DEFAULT_IMAGE_TYPE = SUPPORTED_IMAGE_TYPES[0];
const POINTER_ICONS = {
  DEFAULT: 'default',
  DRAW: 'crosshair',
  SELECT: 'pointer',
  MOVE: 'move',
  DRAG: 'GRAB'
};
const ORIGINAL_CROP = 'Crop';
const CUSTOM_CROP = 'custom';
const ELLIPSE_CROP = 'ellipse';
const POSITIONS = {
  TOP_LEFT: 'top-left',
  TOP_CENTER: 'top-center',
  TOP_RIGHT: 'top-right',
  MIDDLE_LEFT: 'middle-left',
  MIDDLE_CENTER: 'middle-center',
  MIDDLE_RIGHT: 'middle-right',
  BOTTOM_LEFT: 'bottom-left',
  BOTTOM_CENTER: 'bottom-center',
  BOTTOM_RIGHT: 'bottom-right'
};
const MIN_CROP = {
  WIDTH: 14,
  HEIGHT: 14
};
const CLOSING_REASONS = {
  AFTER_SAVE: 'after-saving',
  CLOSE_BUTTON: 'close-button-clicked',
  BACK_BUTTON: 'back-button-clicked'
};
const FEEDBACK_STATUSES = {
  WARNING: 'warning',
  ERROR: 'error'
};
const EDITOR_TO_CLOUDIMG_POSITIONS = {
  top: 'north',
  bottom: 'south',
  left: 'west',
  center: 'center',
  right: 'east'
};
const CLOUDIMG_TO_EDITOR_POSITIONS = {
  northwest: 'top-left',
  northcenter: 'top-center',
  northeast: 'top-right',
  centerwest: 'center-left',
  centercenter: 'center-center',
  centereast: 'center-right',
  southwest: 'bottom-left',
  southcenter: 'bottom-center',
  southeast: 'bottom-right'
};

const cropImage = (context, cropBox, noEllipticalCrop = false) => {
  if (cropBox.ratio === ELLIPSE_CROP && !noEllipticalCrop) {
    context.ellipse(cropBox.x + cropBox.width / 2, cropBox.y + cropBox.height / 2, cropBox.width / 2, cropBox.height / 2, 0, 0, 2 * Math.PI);
  } else {
    context.rect(cropBox.x, cropBox.y, cropBox.width, cropBox.height);
  }
};

const ADD_FILTER = 'ADD_FILTER';
const addFilter = (state, payload) => ({
  ...state,
  isDesignState: !payload.dismissHistory,
  // not stored in state, used in reducer to consider in undo/redo stacks
  filter: payload.filter || null
});

const HIDE_LOADER = 'HIDE_LOADER';
const hideLoader = state => ({
  ...state,
  isLoadingGlobally: false
});

/** Internal Dependencies */
var defaultConfig = {
  theme: {
    palette: {
      'bg-primary-active': '#ECF3FF'
    },
    typography: {
      fontFamily: 'Roboto, Arial'
    }
  },
  annotationsCommon: {
    fill: '#000000',
    // or should be no color? === undefined
    stroke: '#000000',
    // or should be no color? === undefined
    strokeWidth: 0,
    shadowOffsetX: 0,
    shadowOffsetY: 0,
    shadowBlur: 0,
    shadowColor: '#000000',
    // or should be no color? === undefined
    shadowOpacity: 1,
    opacity: 1
  },
  [TOOLS_IDS.TEXT]: {
    text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',
    fontFamily: 'Arial',
    fonts: [{
      label: 'Arial',
      value: 'Arial'
    }, 'Tahoma', 'Sans-serif', {
      label: 'Comic Sans',
      value: 'Comic-sans'
    }],
    fontSize: 14,
    letterSpacing: 0,
    lineHeight: 1,
    align: 'left',
    // left, center, right
    fontStyle: 'normal',
    // 'bold', 'italic', 'bold italic'
    onFontChange: undefined
  },
  [TOOLS_IDS.IMAGE]: {
    fill: undefined,
    disableUpload: false,
    gallery: []
  },
  [TOOLS_IDS.RECT]: {
    cornerRadius: 0
  },
  [TOOLS_IDS.ELLIPSE]: {},
  [TOOLS_IDS.POLYGON]: {
    sides: 3
  },
  [TOOLS_IDS.PEN]: {
    strokeWidth: 1,
    tension: 0.5,
    lineCap: 'round',
    selectAnnotationAfterDrawing: true
  },
  [TOOLS_IDS.LINE]: {
    lineCap: 'butt',
    // butt/round/square
    strokeWidth: 1
  },
  [TOOLS_IDS.ARROW]: {
    strokeWidth: 6,
    lineCap: 'butt',
    pointerLength: undefined,
    pointerWidth: undefined
  },
  [TOOLS_IDS.WATERMARK]: {
    gallery: [],
    textScalingRatio: 0.5,
    imageScalingRatio: 0.5,
    hideTextWatermark: false,
    onUploadWatermarkImgClick: undefined
  },
  [TOOLS_IDS.CROP]: {
    minWidth: MIN_CROP.WIDTH,
    minHeight: MIN_CROP.HEIGHT,
    width: null,
    height: null,
    maxWidth: null,
    maxHeight: null,
    ratio: null,
    ratioTitleKey: undefined,
    noPresets: false,
    autoResize: false,
    presetsItems: [],
    presetsFolders: [],
    lockCropAreaAt: null
  },
  [TOOLS_IDS.ROTATE]: {
    angle: 60,
    componentType: 'slider' // slider | buttons
  },
  tabsIds: [],
  defaultTabId: TABS_IDS.ADJUST,
  defaultToolId: TOOLS_IDS.CROP,
  onClose: undefined,
  onSave: undefined,
  onBeforeSave: undefined,
  closeAfterSave: false,
  defaultSavedImageName: undefined,
  defaultSavedImageType: null,
  defaultSavedImageQuality: 0.92,
  forceToPngInEllipticalCrop: false,
  useBackendTranslations: true,
  translations: null,
  language: 'en',
  avoidChangesNotSavedAlertOnLeave: false,
  loadableDesignState: null,
  moreSaveOptions: [],
  savingPixelRatio: 4,
  previewPixelRatio: window ? window.devicePixelRatio || 1 : 1,
  showBackButton: false,
  useCloudimage: false,
  cloudimage: {
    token: '',
    dontPrefixUrl: false,
    domain: 'cloudimg.io',
    version: '',
    loadableQuery: '',
    secureProtocol: true,
    imageSealing: {
      enable: false,
      salt: '',
      charCount: 10,
      includeParams: []
    }
  },
  observePluginContainerSize: false,
  showCanvasOnly: false,
  getCurrentImgDataFnRef: undefined,
  onModify: undefined,
  useZoomPresetsMenu: true,
  disableZooming: false,
  noCrossOrigin: false,
  disableSaveIfNoChanges: false,
  removeSaveButton: false,
  resetOnImageSourceChange: false,
  backgroundColor: undefined,
  backgroundImage: undefined
};

const BaseFilters = {
  apply: (imageData, ...filters) => {
    const pixels = imageData.data; //  [0, 1, 2, 3,...] => [r, g, b, a, ...]
    const len = pixels.length;
    for (let i = 0; i < len; i += 4) {
      for (const filter of filters) {
        [pixels[i], pixels[i + 1], pixels[i + 2]] = filter([pixels[i], pixels[i + 1], pixels[i + 2]]);
      }
    }
  },
  brightness: value => pixelRGB => {
    let currentValue = value;
    currentValue = currentValue > 1 ? 1 : currentValue;
    currentValue = currentValue < -1 ? -1 : currentValue;
    // eslint-disable-next-line no-bitwise
    currentValue = ~~(255 * currentValue);
    return [pixelRGB[0] + currentValue, pixelRGB[1] + currentValue, pixelRGB[2] + currentValue];
  },
  contrast: value => pixelRGB => {
    let currentValue = value;
    currentValue *= 255;
    const factor = 259 * (currentValue + 255) / (255 * (259 - currentValue));
    return [factor * (pixelRGB[0] - 128) + 128, factor * (pixelRGB[1] - 128) + 128, factor * (pixelRGB[2] - 128) + 128];
  },
  saturation: value => pixelRGB => {
    let currentValue = value;
    currentValue = currentValue < -1 ? -1 : currentValue;
    const r = pixelRGB[0];
    const g = pixelRGB[1];
    const b = pixelRGB[2];
    const gray = 0.2989 * r + 0.587 * g + 0.114 * b; // weights from CCIR 601 spec
    return [-gray * currentValue + r * (1 + currentValue), -gray * currentValue + g * (1 + currentValue), -gray * currentValue + b * (1 + currentValue)];
  },
  grayscale: () => pixelRGB => {
    const r = pixelRGB[0];
    const g = pixelRGB[1];
    const b = pixelRGB[2];
    const average = 0.2126 * r + 0.7152 * g + 0.0722 * b;
    return new Array(3).fill(average);
  },
  sepia: value => pixelRGB => {
    const r = pixelRGB[0];
    const g = pixelRGB[1];
    const b = pixelRGB[2];
    return [r * (1 - 0.607 * value) + g * 0.769 * value + b * 0.189 * value, r * 0.349 * value + g * (1 - 0.314 * value) + b * 0.168 * value, r * 0.272 * value + g * 0.534 * value + b * (1 - 0.869 * value)];
  },
  adjustRGB: adjustingRGB => pixelRGB => [pixelRGB[0] * adjustingRGB[0],
  // R
  pixelRGB[1] * adjustingRGB[1],
  // G
  pixelRGB[2] * adjustingRGB[2] // B
  ],
  // RGBV => [R, G, B, Value]
  colorFilter: colorRGBV => pixelRGB => {
    const r = pixelRGB[0];
    const g = pixelRGB[1];
    const b = pixelRGB[2];
    const value = colorRGBV[3];
    return [r - (r - colorRGBV[0]) * value, g - (g - colorRGBV[1]) * value, b - (b - colorRGBV[2]) * value];
  }
};

/**
 * BlackAndWhite Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([BlackAndWhite]);
 */
function BlackAndWhite(imageData) {
  const thresholdValue = 100;
  BaseFilters.apply(imageData, pixels => {
    const isWhite = (pixels[0] + pixels[1] + pixels[2]) / 3 > thresholdValue;
    const val = isWhite ? 255 : 0;
    return [val, val, val];
  });
}
BlackAndWhite.filterName = 'BlackAndWhite'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const BRIGHTNESS_CONST$i = 0.1;
const CONTRAST_CONST$f = 0.1;
const SATURATION_CONST$i = 0.15;

/**
 * Clarendon Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Clarendon]);
 */
function Clarendon(imageData) {
  BaseFilters.apply(imageData, BaseFilters.brightness(BRIGHTNESS_CONST$i), BaseFilters.contrast(CONTRAST_CONST$f), BaseFilters.saturation(SATURATION_CONST$i));
}
Clarendon.filterName = 'Clarendon'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const SEPIA_CONST$5 = 0.04;
const CONTRAST_CONST$e = -0.15;

/**
 * Gingham Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Gingham]);
 */
function Gingham(imageData) {
  BaseFilters.apply(imageData, BaseFilters.sepia(SEPIA_CONST$5), BaseFilters.contrast(CONTRAST_CONST$e));
}
Gingham.filterName = 'Gingham'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const BRIGHTNESS_CONST$h = 0.1;

/**
 * Moon Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Moon]);
 */
function Moon(imageData) {
  BaseFilters.apply(imageData, BaseFilters.grayscale(), BaseFilters.brightness(BRIGHTNESS_CONST$h));
  const pixels = imageData.data; //  [0, 1, 2, 3,...] => [r, g, b, a, ...]
  pixels.length;
}
Moon.filterName = 'Moon'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const BRIGHTNESS_CONST$g = 0.08;
const ADJUST_RGB_CONST$5 = [1, 1.03, 1.05];
const SATURATION_CONST$h = 0.12;

/**
 * Lark Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Lark]);
 */
function Lark(imageData) {
  BaseFilters.apply(imageData, BaseFilters.brightness(BRIGHTNESS_CONST$g), BaseFilters.adjustRGB(ADJUST_RGB_CONST$5), BaseFilters.saturation(SATURATION_CONST$h));
}
Lark.filterName = 'Lark'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const SEPIA_CONST$4 = 0.4;
const BRIGHTNESS_CONST$f = 0.13;
const CONTRAST_CONST$d = -0.05;

/**
 * Reyes Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Reyes]);
 */
function Reyes(imageData) {
  BaseFilters.apply(imageData, BaseFilters.sepia(SEPIA_CONST$4), BaseFilters.brightness(BRIGHTNESS_CONST$f), BaseFilters.contrast(CONTRAST_CONST$d));
}
Reyes.filterName = 'Reyes'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const ADJUST_RGB_CONST$4 = [1.01, 1.04, 1];
const SATURATION_CONST$g = 0.3;

/**
 * Juno Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Juno]);
 */
function Juno(imageData) {
  BaseFilters.apply(imageData, BaseFilters.adjustRGB(ADJUST_RGB_CONST$4), BaseFilters.saturation(SATURATION_CONST$g));
}
Juno.filterName = 'Juno'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const BRIGHTNESS_CONST$e = 0.1;
const SATURATION_CONST$f = -0.5;

/**
 * Slumber Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Slumber]);
 */
function Slumber(imageData) {
  BaseFilters.apply(imageData, BaseFilters.brightness(BRIGHTNESS_CONST$e), BaseFilters.saturation(SATURATION_CONST$f));
}
Slumber.filterName = 'Slumber'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const ADJUST_RGB_CONST$3 = [1.04, 1, 1.02];
const SATURATION_CONST$e = -0.05;

/**
 * Crema Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Crema]);
 */
function Crema(imageData) {
  BaseFilters.apply(imageData, BaseFilters.adjustRGB(ADJUST_RGB_CONST$3), BaseFilters.saturation(SATURATION_CONST$e));
}
Crema.filterName = 'Crema'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const BRIGHTNESS_CONST$d = 0.05;
const SATURATION_CONST$d = -0.03;

/**
 * Ludwig Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Ludwig]);
 */
function Ludwig(imageData) {
  BaseFilters.apply(imageData, BaseFilters.brightness(BRIGHTNESS_CONST$d), BaseFilters.saturation(SATURATION_CONST$d));
}
Ludwig.filterName = 'Ludwig'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$i = [228, 130, 225, 0.13];
const SATURATION_CONST$c = -0.2;

/**
 * Aden Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Aden]);
 */
function Aden(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$i), BaseFilters.saturation(SATURATION_CONST$c));
}
Aden.filterName = 'Aden'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const ADJUST_RGB_CONST$2 = [1.05, 1.1, 1];

/**
 * Perpetua Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Perpetua]);
 */
function Perpetua(imageData) {
  BaseFilters.apply(imageData, BaseFilters.adjustRGB(ADJUST_RGB_CONST$2));
}
Perpetua.filterName = 'Perpetua'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const SATURATION_CONST$b = 0.3;
const BRIGHTNESS_CONST$c = 0.15;

/**
 * Amaro Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Amaro]);
 */
function Amaro(imageData) {
  BaseFilters.apply(imageData, BaseFilters.saturation(SATURATION_CONST$b), BaseFilters.brightness(BRIGHTNESS_CONST$c));
}
Amaro.filterName = 'Amaro'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$h = [230, 115, 108, 0.05];
const SATURATION_CONST$a = 0.15;

/**
 * Mayfair Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Mayfair]);
 */
function Mayfair(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$h), BaseFilters.saturation(SATURATION_CONST$a));
}
Mayfair.filterName = 'Mayfair'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$g = [255, 170, 0, 0.1];
const BRIGHTNESS_CONST$b = 0.09;
const SATURATION_CONST$9 = 0.1;

/**
 * Rise Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Rise]);
 */
function Rise(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$g), BaseFilters.brightness(BRIGHTNESS_CONST$b), BaseFilters.saturation(SATURATION_CONST$9));
}
Rise.filterName = 'Rise'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const ADJUST_RGB_CONST$1 = [1, 1, 1.25];
const CONTRAST_CONST$c = 0.1;
const BRIGHTNESS_CONST$a = 0.15;

/**
 * Hudson Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Hudson]);
 */
function Hudson(imageData) {
  BaseFilters.apply(imageData, BaseFilters.adjustRGB(ADJUST_RGB_CONST$1), BaseFilters.contrast(CONTRAST_CONST$c), BaseFilters.brightness(BRIGHTNESS_CONST$a));
}
Hudson.filterName = 'Hudson'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$f = [255, 225, 80, 0.08];
const SATURATION_CONST$8 = 0.1;
const CONTRAST_CONST$b = 0.05;

/**
 * Valencia Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Valencia]);
 */
function Valencia(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$f), BaseFilters.saturation(SATURATION_CONST$8), BaseFilters.contrast(CONTRAST_CONST$b));
}
Valencia.filterName = 'Valencia'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$e = [255, 255, 0, 0.07];
const SATURATION_CONST$7 = 0.2;
const CONTRAST_CONST$a = 0.15;

/**
 * XPro2 Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([XPro2]);
 */
function XPro2(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$e), BaseFilters.saturation(SATURATION_CONST$7), BaseFilters.contrast(CONTRAST_CONST$a));
}
XPro2.filterName = 'XPro2'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const CONTRAST_CONST$9 = -0.15;
const SATURATION_CONST$6 = 0.1;

/**
 * Sierra Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Sierra]);
 */
function Sierra(imageData) {
  BaseFilters.apply(imageData, BaseFilters.contrast(CONTRAST_CONST$9), BaseFilters.saturation(SATURATION_CONST$6));
}
Sierra.filterName = 'Sierra'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$d = [100, 28, 210, 0.03];
const BRIGHTNESS_CONST$9 = 0.1;

/**
 * Willow Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Willow]);
 */
function Willow(imageData) {
  BaseFilters.apply(imageData, BaseFilters.grayscale(), BaseFilters.colorFilter(COLOR_FILTER_CONST$d), BaseFilters.brightness(BRIGHTNESS_CONST$9));
}
Willow.filterName = 'Willow'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const CONTRAST_CONST$8 = 0.15;
const SATURATION_CONST$5 = 0.2;

/**
 * LoFi Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([LoFi]);
 */
function LoFi(imageData) {
  BaseFilters.apply(imageData, BaseFilters.contrast(CONTRAST_CONST$8), BaseFilters.saturation(SATURATION_CONST$5));
}
LoFi.filterName = 'LoFi'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const CONTRAST_CONST$7 = 0.1;
const SATURATION_CONST$4 = 0.15;

/**
 * Hefe Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Hefe]);
 */
function Hefe(imageData) {
  BaseFilters.apply(imageData, BaseFilters.contrast(CONTRAST_CONST$7), BaseFilters.saturation(SATURATION_CONST$4));
}
Hefe.filterName = 'Hefe'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$c = [220, 115, 188, 0.12];
const CONTRAST_CONST$6 = -0.05;

/**
 * Nashville Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Nashville]);
 */
function Nashville(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$c), BaseFilters.contrast(CONTRAST_CONST$6));
}
Nashville.filterName = 'Nashville'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const BRIGHTNESS_CONST$8 = 0.1;
const SEPIA_CONST$3 = 0.3;

/**
 * Stinson Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Stinson]);
 */
function Stinson(imageData) {
  BaseFilters.apply(imageData, BaseFilters.brightness(BRIGHTNESS_CONST$8), BaseFilters.sepia(SEPIA_CONST$3));
}
Stinson.filterName = 'Stinson'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$b = [255, 225, 0, 0.05];
const BRIGHTNESS_CONST$7 = 0.06;
const CONTRAST_CONST$5 = 0.06;

/**
 * Vesper Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Vesper]);
 */
function Vesper(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$b), BaseFilters.brightness(BRIGHTNESS_CONST$7), BaseFilters.contrast(CONTRAST_CONST$5));
}
Vesper.filterName = 'Vesper'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$a = [255, 165, 40, 0.2];

/**
 * Earlybird Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Earlybird]);
 */
function Earlybird(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$a));
}
Earlybird.filterName = 'Earlybird'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const CONTRAST_CONST$4 = 0.2;
const COLOR_FILTER_CONST$9 = [140, 10, 185, 0.1];

/**
 * Brannan Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Brannan]);
 */
function Brannan(imageData) {
  BaseFilters.apply(imageData, BaseFilters.contrast(CONTRAST_CONST$4), BaseFilters.colorFilter(COLOR_FILTER_CONST$9));
}
Brannan.filterName = 'Brannan'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const BRIGHTNESS_CONST$6 = -0.1;
const SATURATION_CONST$3 = -0.1;

/**
 * Sutro Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Sutro]);
 */
function Sutro(imageData) {
  BaseFilters.apply(imageData, BaseFilters.brightness(BRIGHTNESS_CONST$6), BaseFilters.saturation(SATURATION_CONST$3));
}
Sutro.filterName = 'Sutro'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const SEPIA_CONST$2 = 0.1;
const COLOR_FILTER_CONST$8 = [255, 145, 0, 0.2];

/**
 * Toaster Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Toaster]);
 */
function Toaster(imageData) {
  BaseFilters.apply(imageData, BaseFilters.sepia(SEPIA_CONST$2), BaseFilters.colorFilter(COLOR_FILTER_CONST$8));
}
Toaster.filterName = 'Toaster'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const BRIGHTNESS_CONST$5 = 0.1;
const COLOR_FILTER_CONST$7 = [255, 255, 0, 0.2];

/**
 * Walden Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Walden]);
 */
function Walden(imageData) {
  BaseFilters.apply(imageData, BaseFilters.brightness(BRIGHTNESS_CONST$5), BaseFilters.colorFilter(COLOR_FILTER_CONST$7));
}
Walden.filterName = 'Walden'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$6 = [255, 25, 0, 0.15];
const BRIGHTNESS_CONST$4 = 0.1;

/**
 * NinteenSeventySeven Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([NinteenSeventySeven]);
 */
function NinteenSeventySeven(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$6), BaseFilters.brightness(BRIGHTNESS_CONST$4));
}
NinteenSeventySeven.filterName = 'NinteenSeventySeven'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$5 = [255, 140, 0, 0.1];
const ADJUST_RGB_CONST = [1.15, 1.05, 1];
const SATURATION_CONST$2 = 0.35;

/**
 * Kelvin Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Kelvin]);
 */
function Kelvin(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$5), BaseFilters.adjustRGB(ADJUST_RGB_CONST), BaseFilters.saturation(SATURATION_CONST$2));
}
Kelvin.filterName = 'Kelvin'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$4 = [225, 240, 0, 0.1];
const SATURATION_CONST$1 = 0.25;
const CONTRAST_CONST$3 = 0.05;

/**
 * Maven Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Maven]);
 */
function Maven(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$4), BaseFilters.saturation(SATURATION_CONST$1), BaseFilters.contrast(CONTRAST_CONST$3));
}
Maven.filterName = 'Maven'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const SEPIA_CONST$1 = 0.06;
const BRIGHTNESS_CONST$3 = 0.1;

/**
 * Ginza Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Ginza]);
 */
function Ginza(imageData) {
  BaseFilters.apply(imageData, BaseFilters.sepia(SEPIA_CONST$1), BaseFilters.brightness(BRIGHTNESS_CONST$3));
}
Ginza.filterName = 'Ginza'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const SATURATION_CONST = 0.35;
const BRIGHTNESS_CONST$2 = 0.1;

/**
 * Skyline Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Skyline]);
 */
function Skyline(imageData) {
  BaseFilters.apply(imageData, BaseFilters.saturation(SATURATION_CONST), BaseFilters.brightness(BRIGHTNESS_CONST$2));
}
Skyline.filterName = 'Skyline'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const CONTRAST_CONST$2 = 0.15;
const BRIGHTNESS_CONST$1 = 0.1;

/**
 * Dogpatch Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Dogpatch]);
 */
function Dogpatch(imageData) {
  BaseFilters.apply(imageData, BaseFilters.contrast(CONTRAST_CONST$2), BaseFilters.brightness(BRIGHTNESS_CONST$1));
}
Dogpatch.filterName = 'Dogpatch'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$3 = [25, 240, 252, 0.05];
const SEPIA_CONST = 0.3;

/**
 * Brooklyn Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Brooklyn]);
 */
function Brooklyn(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$3), BaseFilters.sepia(SEPIA_CONST));
}
Brooklyn.filterName = 'Brooklyn'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$2 = [208, 208, 86, 0.2];
const CONTRAST_CONST$1 = 0.15;

/**
 * Helena Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Helena]);
 */
function Helena(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$2), BaseFilters.contrast(CONTRAST_CONST$1));
}
Helena.filterName = 'Helena'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$1 = [255, 160, 25, 0.1];
const BRIGHTNESS_CONST = 0.1;

/**
 * Ashby Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Ashby]);
 */
function Ashby(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$1), BaseFilters.brightness(BRIGHTNESS_CONST));
}
Ashby.filterName = 'Ashby'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST = [255, 50, 80, 0.12];
const CONTRAST_CONST = 0.05;

/**
 * Charmes Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Charmes]);
 */
function Charmes(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST), BaseFilters.contrast(CONTRAST_CONST));
}
Charmes.filterName = 'Charmes'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

var CustomFilters = /*#__PURE__*/Object.freeze({
	__proto__: null,
	Aden: Aden,
	Amaro: Amaro,
	Ashby: Ashby,
	BlackAndWhite: BlackAndWhite,
	Brannan: Brannan,
	Brooklyn: Brooklyn,
	Charmes: Charmes,
	Clarendon: Clarendon,
	Crema: Crema,
	Dogpatch: Dogpatch,
	Earlybird: Earlybird,
	Gingham: Gingham,
	Ginza: Ginza,
	Hefe: Hefe,
	Helena: Helena,
	Hudson: Hudson,
	Juno: Juno,
	Kelvin: Kelvin,
	Lark: Lark,
	LoFi: LoFi,
	Ludwig: Ludwig,
	Maven: Maven,
	Mayfair: Mayfair,
	Moon: Moon,
	Nashville: Nashville,
	NinteenSeventySeven: NinteenSeventySeven,
	Perpetua: Perpetua,
	Reyes: Reyes,
	Rise: Rise,
	Sierra: Sierra,
	Skyline: Skyline,
	Slumber: Slumber,
	Stinson: Stinson,
	Sutro: Sutro,
	Toaster: Toaster,
	Valencia: Valencia,
	Vesper: Vesper,
	Walden: Walden,
	Willow: Willow,
	XPro2: XPro2
});

/** External Dependencies */
const filterStrToClass = filterString => {
  if (filterString) {
    return CustomFilters[filterString] || Konva$2.Filters[filterString];
  }
  return null;
};

var FactoryExports = requireFactory();

var ValidatorsExports = requireValidators();

/** External Dependencies */

/**
 * Warmth Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Warmth]);
 * node.warmth(100);
 *  Red (r) > Blue (b) means warmer effect
 * Red (r) < Blue (b) means cooler effect
 */
function Warmth$1(imageData) {
  const warmthValue = this.warmth();
  const pixels = imageData.data; //  [0, 1, 2, 3,...] => [r, g, b, a, ...]
  const len = pixels.length;
  for (let i = 0; i < len; i += 4) {
    // red
    pixels[i] += warmthValue;
    // blue
    pixels[i + 2] -= warmthValue;
  }
}
Warmth$1.finetuneName = 'Warmth'; // We assign the finetune name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

/**
 * adds warmth parameter (0 - 200), 0 means no value... 200 max value.
 */
FactoryExports.Factory.addGetterSetter(Konva$2.Image, 'warmth', 0, ValidatorsExports.getNumberValidator(), FactoryExports.Factory.afterSetFilter);

/** External Dependencies */

/**
 * CustomThreshold Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([CustomThreshold]);
 * node.threshold(100);
 */
function CustomThreshold(imageData) {
  const thresholdValue = this.threshold();
  const isZeroThreshold = thresholdValue === 0;
  const pixels = imageData.data; //  [0, 1, 2, 3,...] => [r, g, b, a, ...]
  const len = pixels.length;
  for (let i = 0; i < len; i += 4) {
    if (!isZeroThreshold) {
      pixels[i] = pixels[i] >= thresholdValue ? 255 : 0;
      pixels[i + 1] = pixels[i + 1] >= thresholdValue ? 255 : 0;
      pixels[i + 2] = pixels[i + 2] >= thresholdValue ? 255 : 0;
    }
  }
}
CustomThreshold.finetuneName = 'CustomThreshold'; // We assign the finetune name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

/**
 * adds threshold parameter (0 - 255), 0 means no value... 255 max value.
 */
FactoryExports.Factory.addGetterSetter(Konva$2.Image, 'threshold', 0, ValidatorsExports.getNumberValidator, FactoryExports.Factory.afterSetFilter);

var CustomFinetunes = /*#__PURE__*/Object.freeze({
	__proto__: null,
	CustomThreshold: CustomThreshold,
	Warmth: Warmth$1
});

/** External Dependencies */
const finetunesStrsToClasses = finetunesStrings => {
  if (Array.isArray(finetunesStrings) && finetunesStrings.length > 0) {
    return finetunesStrings.map(finetuneClassName => Konva$2.Filters[finetuneClassName] || CustomFinetunes[finetuneClassName]);
  }
  return [];
};

/** Internal Dependencies */
const getInitialAppState = (config = {}) => {
  const loadedConfigPrepared = {
    ...config.loadableDesignState
  };
  if (Array.isArray(loadedConfigPrepared.finetunes)) {
    loadedConfigPrepared.finetunes = finetunesStrsToClasses(loadedConfigPrepared.finetunes);
  }
  if (loadedConfigPrepared.filter) {
    loadedConfigPrepared.filter = filterStrToClass(loadedConfigPrepared.filter);
  }
  const hasLoadableDesignState = Boolean(config.loadableDesignState) || Boolean(config.useCloudimage && config.cloudimage?.loadableQuery);
  return {
    // --- Start of design states ---
    imgSrc: typeof config.source === 'string' ? config.source : config.source?.src || '',
    finetunes: [],
    finetunesProps: {},
    filter: null,
    adjustments: {
      crop: {
        ratio: config[TOOLS_IDS.CROP].ratio,
        ratioTitleKey: config[TOOLS_IDS.CROP].ratioTitleKey ?? config[TOOLS_IDS.CROP].ratio,
        width: null,
        height: null,
        x: 0,
        y: 0
      },
      isFlippedX: false,
      isFlippedY: false,
      rotation: 0
    },
    annotations: {},
    resize: {},
    // --- End of design states ---
    shownImageDimensions: {},
    ...loadedConfigPrepared,
    // if provided it would override the above design states
    pointerCssIcon: POINTER_ICONS.DEFAULT,
    canvasScale: 1,
    zoom: {
      factor: DEFAULT_ZOOM_FACTOR,
      x: null,
      y: null
    },
    isLoadingGlobally: true,
    selectionsIds: [],
    tabId: config.defaultTabId || null,
    toolId: config.defaultToolId || null,
    feedback: {},
    /* For UNDO/REDO/RESET,
     * Current/present state => considered properties related to design of the whole 1st order state.
     * `pastDesignStates` => contains the past states of those design properties (undo).
     * `futureDesignStates` => contains the future states of those design properties (redo).
     * Reset => we reset those 3 states to their initial/empty values.
     */
    pastDesignStates: [],
    futureDesignStates: [],
    isResetted: !hasLoadableDesignState ?? true,
    haveNotSavedChanges: false,
    latestColors: {},
    showTabsMenu: false,
    isSaving: false
  };
};

/** Internal Dependencies */

/**
 * Extracts the needed properties/state that are used in canvas's design from the global state.
 *
 * @param {Object} state The global state.
 * @param {Object} defaultValue Value assigned to any undefined/null property in returned object.
 * @returns {Object} The extracted design state.
 */
const extractCurrentDesignState = (state, useStateAsConfig) => {
  const initialAppState = getInitialAppState(useStateAsConfig ? state : defaultConfig);
  return {
    imgSrc: state.imgSrc || initialAppState.imgSrc,
    finetunes: state.finetunes || initialAppState.finetunes,
    finetunesProps: state.finetunesProps || initialAppState.finetunesProps,
    filter: state.filter || initialAppState.filter,
    adjustments: state.adjustments || initialAppState.adjustments,
    annotations: state.annotations || initialAppState.annotations,
    resize: state.resize || initialAppState.resize
  };
};

/** Internal Dependencies */
const REDO = 'REDO';
const redo = state => {
  if (state.futureDesignStates && state.futureDesignStates.length > 0) {
    const currentDesignState = extractCurrentDesignState(state);
    const [presentDesignState, ...newFutureDesignStates] = state.futureDesignStates;
    const newPastDesignStates = [currentDesignState, ...(state.pastDesignStates || [])];
    return {
      ...state,
      ...presentDesignState,
      selectionsIds: [],
      pastDesignStates: newPastDesignStates,
      futureDesignStates: newFutureDesignStates,
      hasUndo: true,
      hasRedo: newFutureDesignStates.length > 0,
      haveNotSavedChanges: true
    };
  }
  return state;
};

/** Internal Dependencies */
const RESET = 'RESET';
const reset = (state, payload) => {
  const resettedDesignState = extractCurrentDesignState({
    ...payload.config,
    imgSrc: state.imgSrc
  }, true);
  return {
    ...state,
    ...resettedDesignState,
    zoom: {
      factor: DEFAULT_ZOOM_FACTOR,
      x: null,
      y: null
    },
    selectionsIds: [],
    isResetted: true,
    pastDesignStates: [],
    futureDesignStates: [],
    hasUndo: false,
    hasRedo: false,
    haveNotSavedChanges: false
  };
};

const SET_FEEDBACK = 'SET_FEEDBACK';
const setFeedback = (state, payload) => ({
  ...state,
  isLoadingGlobally: false,
  feedback: payload.feedback || {}
});

const SHOW_LOADER = 'SHOW_LOADER';
const showLoader = state => ({
  ...state,
  isLoadingGlobally: true
});

function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}

function _objectWithoutPropertiesLoose(r, e) {
  if (null == r) return {};
  var t = {};
  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
    if (-1 !== e.indexOf(n)) continue;
    t[n] = r[n];
  }
  return t;
}

function _objectWithoutProperties(e, t) {
  if (null == e) return {};
  var o,
    r,
    i = _objectWithoutPropertiesLoose(e, t);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
  }
  return i;
}

/**
 * Wrapper around React's `forwardRef` function, which adds a `displayName` to each component
 * created using it
 */
function intrinsicComponent(render, displayName) {
  var component = /*#__PURE__*/forwardRef(render);
  component.displayName = displayName || render.name;
  return component;
}

var _excluded$1Q = ["color", "stroke", "size"];
var Brightness$1 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$stroke = _ref.stroke,
    stroke = _ref$stroke === void 0 ? 'currentColor' : _ref$stroke,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1Q);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M23.54 1.53186C23.54 0.96198 24.002 0.5 24.5719 0.5C25.1417 0.5 25.6037 0.961981 25.6037 1.53186V5.82108C25.6037 6.39096 25.1417 6.85294 24.5719 6.85294C24.002 6.85294 23.54 6.39096 23.54 5.82108V1.53186ZM23.54 43.1985C23.54 42.6287 24.002 42.1667 24.5719 42.1667C25.1417 42.1667 25.6037 42.6287 25.6037 43.1985V47.4877C25.6037 48.0576 25.1417 48.5196 24.5719 48.5196C24.002 48.5196 23.54 48.0576 23.54 47.4877V43.1985ZM47.4876 23.5397C48.0574 23.5397 48.5194 24.0017 48.5194 24.5716C48.5194 25.1415 48.0574 25.6034 47.4876 25.6034H43.1983C42.6285 25.6034 42.1665 25.1415 42.1665 24.5716C42.1665 24.0017 42.6285 23.5397 43.1984 23.5397H47.4876ZM5.8209 23.5397C6.39078 23.5397 6.85276 24.0017 6.85276 24.5716C6.85276 25.1415 6.39078 25.6034 5.82089 25.6034H1.53168C0.961798 25.6034 0.499817 25.1415 0.499817 24.5716C0.499817 24.0017 0.961797 23.5397 1.53168 23.5397H5.8209ZM41.6177 39.8976C42.0207 40.3006 42.0207 40.9539 41.6177 41.3569C41.2147 41.7599 40.5614 41.7599 40.1584 41.3569L37.1255 38.324C36.7225 37.921 36.7225 37.2677 37.1255 36.8647C37.5285 36.4617 38.1818 36.4617 38.5848 36.8647L41.6177 39.8976ZM12.1551 10.4347C12.558 10.8377 12.558 11.491 12.1551 11.894C11.7521 12.297 11.0988 12.297 10.6958 11.894L7.66285 8.86105C7.25989 8.45808 7.25989 7.80474 7.66286 7.40178C8.06582 6.99881 8.71916 6.99881 9.12213 7.40178L12.1551 10.4347ZM9.12179 41.617C8.71882 42.0199 8.06548 42.0199 7.66251 41.617C7.25955 41.214 7.25955 40.5607 7.66251 40.1577L10.6954 37.1248C11.0984 36.7218 11.7518 36.7218 12.1547 37.1248C12.5577 37.5277 12.5577 38.1811 12.1547 38.584L9.12179 41.617ZM38.5862 12.1549C38.1832 12.5579 37.5299 12.5579 37.1269 12.1549C36.724 11.752 36.724 11.0986 37.1269 10.6957L40.1599 7.66274C40.5628 7.25977 41.2162 7.25977 41.6191 7.66274C42.0221 8.06571 42.0221 8.71905 41.6191 9.12201L38.5862 12.1549ZM38.7161 24.5098C38.7161 32.3555 32.3559 38.7157 24.5102 38.7157C16.6645 38.7157 10.3043 32.3555 10.3043 24.5098C10.3043 16.6641 16.6645 10.3039 24.5102 10.3039C32.3559 10.3039 38.7161 16.6641 38.7161 24.5098ZM24.5102 36.652C31.2161 36.652 36.6524 31.2157 36.6524 24.5098C36.6524 17.8039 31.2161 12.3676 24.5102 12.3676C17.8043 12.3676 12.3681 17.8039 12.3681 24.5098C12.3681 31.2157 17.8043 36.652 24.5102 36.652Z",
    fill: color,
    stroke: stroke
  }));
});

const isDefaultZeroValuesOnly = (initialProps, newProps) => initialProps && Object.keys(initialProps || {}).every(key => initialProps[key] === 0) && newProps && Object.keys(newProps || {}).length === 0;

/** External Dependencies */
const AppContext = /*#__PURE__*/createContext({});

function useTheme() {
  return useTheme$1();
}

function _arrayWithHoles(r) {
  if (Array.isArray(r)) return r;
}

function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = !1;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray(r, e) {
  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
}

function useMediaQuery(queryInput) {
  var query = queryInput.replace(/^@media( ?)/m, '');
  var _useState = useState(function () {
      return window.matchMedia(query).matches;
    }),
    _useState2 = _slicedToArray(_useState, 2),
    match = _useState2[0],
    setMatch = _useState2[1];
  useEffect(function () {
    var active = true;
    var queryList = window.matchMedia(query);
    var updateMatch = function updateMatch() {
      if (active) {
        setMatch(queryList.matches);
      }
    };
    updateMatch();
    queryList.addEventListener('change', updateMatch);
    return function () {
      active = false;
      queryList.removeEventListener('change', updateMatch);
    };
  }, [query, matchMedia]);
  return match;
}

var defaultTranslations = {
  name: 'Name',
  save: 'Save',
  saveAs: 'Save as',
  back: 'Back',
  loading: 'Loading...',
  resetOperations: 'Reset/delete all operations',
  changesLoseWarningHint: 'Pressing “Reset” will discard your changes. Are you sure you want to continue?',
  discardChangesWarningHint: 'Closing the modal will discard your last change.',
  cancel: 'Cancel',
  apply: 'Apply',
  warning: 'Warning',
  confirm: 'Confirm',
  discardChanges: 'Discard changes',
  undoTitle: 'Undo last operation',
  redoTitle: 'Redo last operation',
  showImageTitle: 'Show original image',
  zoomInTitle: 'Zoom in',
  zoomOutTitle: 'Zoom out',
  toggleZoomMenuTitle: 'Toggle zoom menu',
  adjustTab: 'Adjust',
  finetuneTab: 'Finetune',
  filtersTab: 'Filters',
  watermarkTab: 'Watermark',
  annotateTabLabel: 'Annotate',
  resize: 'Resize',
  resizeTab: 'Resize',
  imageName: 'Image name',
  invalidImageError: 'Invalid image provided.',
  uploadImageError: 'Error while uploading the image.',
  areNotImages: 'are not images',
  isNotImage: 'is not image',
  toBeUploaded: 'to be uploaded',
  cropTool: 'Crop',
  original: 'Original',
  custom: 'Custom',
  square: 'Square',
  landscape: 'Landscape',
  portrait: 'Portrait',
  ellipse: 'Ellipse',
  classicTv: 'Classic TV',
  cinemascope: 'Cinemascope',
  arrowTool: 'Arrow',
  blurTool: 'Blur',
  brightnessTool: 'Brightness',
  contrastTool: 'Contrast',
  ellipseTool: 'Ellipse',
  unFlipX: 'Un-Flip X',
  flipX: 'Flip X',
  unFlipY: 'Un-Flip Y',
  flipY: 'Flip Y',
  hsvTool: 'HSV',
  hue: 'Hue',
  brightness: 'Brightness',
  saturation: 'Saturation',
  value: 'Value',
  imageTool: 'Image',
  importing: 'Importing...',
  addImage: '+ Add image',
  uploadImage: 'Upload image',
  fromGallery: 'From gallery',
  lineTool: 'Line',
  penTool: 'Pen',
  polygonTool: 'Polygon',
  sides: 'Sides',
  rectangleTool: 'Rectangle',
  cornerRadius: 'Corner Radius',
  resizeWidthTitle: 'Width in pixels',
  resizeHeightTitle: 'Height in pixels',
  toggleRatioLockTitle: 'Toggle ratio lock',
  resetSize: 'Reset to original image size',
  rotateTool: 'Rotate',
  textTool: 'Text',
  textSpacings: 'Text spacings',
  textAlignment: 'Text alignment',
  fontFamily: 'Font family',
  size: 'Size',
  letterSpacing: 'Letter Spacing',
  lineHeight: 'Line height',
  warmthTool: 'Warmth',
  addWatermark: '+ Add watermark',
  addTextWatermark: '+ Add text watermark',
  addWatermarkTitle: 'Choose the watermark type',
  uploadWatermark: 'Upload watermark',
  addWatermarkAsText: 'Add as text',
  padding: 'Padding',
  paddings: 'Paddings',
  shadow: 'Shadow',
  horizontal: 'Horizontal',
  vertical: 'Vertical',
  blur: 'Blur',
  opacity: 'Opacity',
  transparency: 'Transparency',
  position: 'Position',
  stroke: 'Stroke',
  saveAsModalTitle: 'Save as',
  extension: 'Extension',
  format: 'Format',
  nameIsRequired: 'Name is required.',
  quality: 'Quality',
  imageDimensionsHoverTitle: 'Saved image size (width x height)',
  cropSizeLowerThanResizedWarning: 'Note, the selected crop area is lower than the applied resize which might cause quality decrease',
  actualSize: 'Actual size (100%)',
  fitSize: 'Fit size',
  addImageTitle: 'Select image to add...',
  mutualizedFailedToLoadImg: 'Failed to load image.',
  tabsMenu: 'Menu',
  download: 'Download',
  width: 'Width',
  height: 'Height',
  plus: '+',
  cropItemNoEffect: 'No preview available for this crop item'
};

/* eslint-disable no-console */
/** Internal Dependencies */
const backendTranslations = {};
const activatedTranslations = {
  ...defaultTranslations
};
const hardcodedErrorMsg = 'Error while loading translations from backend.';
const updateTranslations = (newTranslations = {}, language = 'en') => Object.assign(activatedTranslations, backendTranslations?.[language?.toLowerCase()] || {}, newTranslations);
const sendMissingTranslationsToBackend = (missingTranslations = []) => new Promise((resolve, reject) => {
  const xhr = new XMLHttpRequest();
  xhr.responseType = 'json';
  xhr.onload = () => {
    if (xhr.status >= 200 && xhr.status < 300) {
      resolve(xhr.response);
    } else {
      console.warn(`Error in sending translation key to backend ${xhr.response?.hint}, ${xhr.status}`);
      reject();
    }
  };
  xhr.onerror = () => {
    console.warn(`Error in sending translation key to backend ${xhr.response?.hint}, ${xhr.status}`);
    reject();
  };
  const payload = {
    grid_uuid: TRANSLATIONS_GRID_UUID,
    translations_requests: missingTranslations
  };
  xhr.open('POST', `https://neo.wordplex.io/api/import/request-translations?grid_uuid=${TRANSLATIONS_GRID_UUID}`);
  xhr.send(JSON.stringify(payload));
});
const getBackendTranslations = (language = 'en', additionalTranslations = {}) => new Promise((resolve, reject) => {
  const loweredCaseLanguage = language.toLowerCase();
  const xhr = new XMLHttpRequest();
  xhr.responseType = 'json';
  xhr.onload = () => {
    if (xhr.status >= 200 && xhr.status < 300) {
      (xhr.response || []).forEach(translation => {
        backendTranslations[loweredCaseLanguage] = {
          ...backendTranslations[loweredCaseLanguage],
          [translation.translation_key]: translation.translations[loweredCaseLanguage]
        };
      });
      const missingTranslations = [];
      Object.keys(defaultTranslations).forEach(key => {
        if (key && !backendTranslations[loweredCaseLanguage]?.[key]) {
          missingTranslations.push({
            key,
            lang: loweredCaseLanguage,
            default: defaultTranslations[key]
          });
        }
      });
      if (missingTranslations.length > 0) {
        sendMissingTranslationsToBackend(missingTranslations);
      }
      updateTranslations(additionalTranslations, loweredCaseLanguage);
      resolve(activatedTranslations);
    } else {
      console.error(`Status code: ${xhr.status}`);
      console.error(xhr.response?.msg || xhr.response?.msg || xhr.response?.details || hardcodedErrorMsg);
      reject();
    }
  };
  xhr.onerror = () => {
    console.error(`Status code ${xhr.status}, error: ${hardcodedErrorMsg}`);
    reject();
  };
  xhr.open('GET', `https://i18n-fastly.ultrafast.io/api/export?grid=${TRANSLATIONS_GRID_UUID}`);
  xhr.send();
});
const translate = key => activatedTranslations[key] || key || '';

const appReducer = (state, action) => actions[action.type] ? actions[action.type](state, action.payload) || state : state;

/** External Dependencies */
let isFieMounted = true;
const AppProvider = ({
  children,
  config = {}
}) => {
  const [state, _dispatch] = useAppReducer(appReducer, getInitialAppState(config), config);
  useEffect(() => {
    isFieMounted = true;
    return () => {
      isFieMounted = false;
    };
  }, []);
  const dispatch = useCallback((...args) => {
    if (isFieMounted) {
      _dispatch(...args);
    }
  }, [_dispatch]);
  useEffect(() => {
    updateTranslations(config.translations, config.language);
  }, [config.useBackendTranslations, config.language, config.translations]);
  const theme = useTheme();
  const providedValue = useMemo(() => ({
    ...state,
    config,
    theme,
    dispatch,
    t: translate
  }), [config, state]);
  return /*#__PURE__*/React__default.createElement(AppContext.Provider, {
    value: providedValue
  }, children);
};
AppProvider.defaultProps = {
  config: {}
};
AppProvider.propTypes = {
  children: PropTypes.node.isRequired,
  config: PropTypes.instanceOf(Object)
};

/** External Dependencies */

// This component is used in repassing the state to react-konva's modules
// As it has issue in context bridging.
const AppProviderOverridenValue = ({
  children,
  overridingValue
}) => /*#__PURE__*/React__default.createElement(AppContext.Provider, {
  value: overridingValue
}, children);
AppProviderOverridenValue.propTypes = {
  children: PropTypes.node.isRequired,
  overridingValue: PropTypes.instanceOf(Object).isRequired
};

/** External Dependencies */
const useStore = () => useContext(AppContext);

/** External Dependencies */
const useFinetune = (finetune, initialProps) => {
  const {
    dispatch,
    finetunes,
    finetunesProps
  } = useStore();
  const setFinetuneWithProps = useCallback(newFinetuneProps => {
    dispatch({
      type: SET_FINETUNE,
      payload: {
        finetune,
        finetuneProps: newFinetuneProps
      }
    });
  }, []);
  useEffect(() => {
    if (!finetunes.includes(finetune) && !isDefaultZeroValuesOnly(initialProps, finetunesProps)) {
      // initialProps first if we've any similar prop set before w/ diff. val don't override.
      setFinetuneWithProps({
        ...initialProps,
        ...finetunesProps
      });
    }
  }, []);
  return useMemo(() => [finetunesProps, setFinetuneWithProps], [finetunesProps]);
};

/** External Dependencies */
const useFilter = () => {
  const {
    dispatch,
    filter
  } = useStore();
  const setFilter = useCallback(filterToApply => {
    dispatch({
      type: ADD_FILTER,
      payload: {
        filter: filterToApply
      }
    });
  }, []);
  return useMemo(() => [filter, setFilter], [filter]);
};

const randomId = (prefixString = '') => `${prefixString}${prefixString ? '-' : ''}${parseInt(Date.now() * Math.random(), 10)}`;

const debounce$1 = (func, timeout = 300) => {
  let timer;
  return (...args) => {
    clearTimeout(timer);
    const [firstArg, ...otherArgs] = args;
    timer = setTimeout(func.bind(null, firstArg?.target?.value ?? firstArg, ...otherArgs), timeout);
  };
};

const getScrollOffset = () => {
  const {
    body
  } = document;
  const docEl = document.documentElement;
  const scrollTop = window?.pageYOffset || docEl.scrollTop || body.scrollTop;
  const scrollLeft = window?.pageXOffset || docEl.scrollLeft || body.scrollLeft;
  return {
    topOffset: scrollTop,
    leftOffset: scrollLeft
  };
};

/** Internal Dependencies */
const getElemDocumentCoords = elem => {
  if (!elem) {
    return null;
  }
  const box = elem.getBoundingClientRect();
  const {
    body
  } = document;
  const {
    topOffset,
    leftOffset
  } = getScrollOffset();
  const docEl = document.documentElement;
  const clientTop = docEl.clientTop || body.clientTop || 0;
  const clientLeft = docEl.clientLeft || body.clientLeft || 0;
  const top = box.top + topOffset - clientTop;
  const left = box.left + leftOffset - clientLeft;
  return {
    top: Math.round(top),
    left: Math.round(left),
    width: box.width,
    height: box.height
  };
};

const restrictNumber = (number, min = 0, max) => {
  // we are not assigning default value for it as if max was null it will override the default value.
  const currentMax = max || 1000000;
  const convertedNumber = +number;
  return Math.min(Math.max(min, convertedNumber), currentMax);
};

/** Internal Dependencies */

/**
 * Gets the touch/mouse position relative to the passed object to be considred as offset X/Y.
 *
 * @param {Object} previewGroup - The preview group that is a direct child of the design layer
 * @param {Object} relativeToObject - The object to be considered as parent element
 *                                    contains left, top, width & height relative to the document.
 * @returns {Object} both X & Y offset values.
 */
const getPointerOffsetPositionBoundedToObject = (previewGroup = {}, relativeToObject = {}) => {
  const designLayer = previewGroup.parent;
  const canvas = designLayer.getStage();
  const canvasZoomFactor = canvas.attrs.zoomFactor;
  const pos = designLayer.getRelativePointerPosition();
  return {
    offsetX: restrictNumber(pos.x, 0, relativeToObject.width / (canvas.scaleX() / canvasZoomFactor)) + designLayer.attrs.xPadding,
    offsetY: restrictNumber(pos.y, 0, relativeToObject.height / (canvas.scaleY() / canvasZoomFactor)) + designLayer.attrs.yPadding
  };
};

const getBoundingRectUnScaled = (pointerOffsets = {}, pointerDown = {}, previewGroup) => {
  const boundingRect = {};
  const parentAttrs = previewGroup.parent.attrs;
  boundingRect.x = Math.min(pointerOffsets.offsetX, pointerDown.startedX) - parentAttrs.xPadding || 0;
  boundingRect.y = Math.min(pointerOffsets.offsetY, pointerDown.startedY) - parentAttrs.yPadding || 0;
  boundingRect.width = pointerOffsets.offsetX - pointerDown.startedX;
  boundingRect.height = pointerOffsets.offsetY - pointerDown.startedY;
  boundingRect.startedX = pointerDown.startedX - parentAttrs.xPadding || 0;
  boundingRect.startedY = pointerDown.startedY - parentAttrs.yPadding || 0;
  return boundingRect;
};

/** External Dependencies */
const annotationsNamesToKonvaClasses = {
  [TOOLS_IDS.RECT]: Konva$2.Rect,
  [TOOLS_IDS.ELLIPSE]: Konva$2.Ellipse,
  [TOOLS_IDS.POLYGON]: Konva$2.RegularPolygon,
  [TOOLS_IDS.LINE]: Konva$2.Line,
  [TOOLS_IDS.IMAGE]: Konva$2.Image,
  [TOOLS_IDS.TEXT]: Konva$2.Text,
  [TOOLS_IDS.ARROW]: Konva$2.Arrow
};
const ANNOTATIONS_WITH_POINTS = [TOOLS_IDS.LINE, TOOLS_IDS.ARROW];
const NO_WIDTH_HEIGHT_ANNOTATIONS = [...ANNOTATIONS_WITH_POINTS, TOOLS_IDS.ELLIPSE, TOOLS_IDS.POLYGON];
const getNewAnnotationPreview = annotation => new annotationsNamesToKonvaClasses[annotation.name]({
  ...annotation,
  opacity: annotation.opacity ?? 0.7,
  x: annotation.x ?? 0,
  y: annotation.y ?? 0,
  width: Math.abs(annotation.width) || 0,
  height: Math.abs(annotation.height) || 0,
  ...(ANNOTATIONS_WITH_POINTS.includes(annotation.name) ? {
    stroke: annotation.stroke || '#000000'
  } : {})
});

// If we are changing width/height we have to update the X/Y for avoiding moving the annotation from current place.
const dimensToProperAnnotationDimens = (currentDimensions, annotationName, isShiftKeyPressed) => {
  const {
    width,
    height,
    startedX,
    startedY,
    ...newAnnotationDimens
  } = currentDimensions;
  const absWidth = Math.abs(width);
  const absHeight = Math.abs(height);
  const isReversedX = width < 0;
  const isReversedY = height < 0;
  switch (annotationName) {
    case TOOLS_IDS.RECT:
      if (isShiftKeyPressed) {
        newAnnotationDimens.width = Math.sqrt(absWidth * absWidth + absHeight * absHeight);
        newAnnotationDimens.height = newAnnotationDimens.width;
        newAnnotationDimens.x -= isReversedX ? newAnnotationDimens.width - absWidth : 0;
        newAnnotationDimens.y -= isReversedY ? newAnnotationDimens.height - absHeight : 0;
      } else {
        newAnnotationDimens.width = absWidth;
        newAnnotationDimens.height = absHeight;
      }
      break;
    case TOOLS_IDS.ELLIPSE:
      if (isShiftKeyPressed) {
        newAnnotationDimens.radiusX = Math.sqrt(absWidth * absWidth + absHeight * absHeight) / 2;
        newAnnotationDimens.radiusY = newAnnotationDimens.radiusX;
        newAnnotationDimens.x -= isReversedX ? newAnnotationDimens.radiusX * 2 - absWidth : 0;
        newAnnotationDimens.y -= isReversedY ? newAnnotationDimens.radiusY * 2 - absHeight : 0;
      } else {
        newAnnotationDimens.radiusX = absWidth / 2;
        newAnnotationDimens.radiusY = absHeight / 2;
      }
      newAnnotationDimens.offsetX = -newAnnotationDimens.radiusX;
      newAnnotationDimens.offsetY = -newAnnotationDimens.radiusY;
      break;
    case TOOLS_IDS.POLYGON:
      newAnnotationDimens.radius = (absWidth + absHeight) / 2;
      newAnnotationDimens.x -= isReversedX ? newAnnotationDimens.radius * 2 - absWidth : 0;
      newAnnotationDimens.y -= isReversedY ? newAnnotationDimens.radius * 2 - absHeight : 0;
      newAnnotationDimens.offsetX = -newAnnotationDimens.radius;
      newAnnotationDimens.offsetY = -newAnnotationDimens.radius;
      break;
    case TOOLS_IDS.LINE:
    case TOOLS_IDS.ARROW:
      newAnnotationDimens.x = startedX;
      newAnnotationDimens.y = startedY;
      newAnnotationDimens.points = [0, 0];
      if (isShiftKeyPressed) {
        newAnnotationDimens.points.push(absWidth >= absHeight ? width : 0, absHeight > absWidth ? height : 0);
      } else {
        newAnnotationDimens.points = [0, 0, width, height];
      }
      break;
    default:
      newAnnotationDimens.width = absWidth;
      newAnnotationDimens.height = absHeight;
      break;
  }
  return newAnnotationDimens;
};

/** Internal Dependencies */
const pointerDown = {
  startedX: undefined,
  startedY: undefined,
  isOutOfCanvas: false
};
const eventsOptions$1 = {
  passive: true
};
const MIN_PIXELS = 1;
let shownAnnotationPreview = null;
let textAnnotationWrappedRect = null;
let latestAnnotationProps = null;
const previewThenCallAnnotationAdding = (canvas, annotation, previewGroup, callbkAfterPreview) => {
  const getCanvasBoundingRect = () => getElemDocumentCoords(canvas.content);
  const wrapTextBoundsPreviewByRect = textAnnotation => {
    textAnnotationWrappedRect = getNewAnnotationPreview({
      ...textAnnotation,
      name: TOOLS_IDS.RECT,
      fill: '',
      stroke: '#000000',
      strokeWidth: 2,
      shadowColor: '#ffffff',
      shadowBlur: 1,
      shadowOpacity: 0.7
    });
    previewGroup.add(textAnnotationWrappedRect);
  };
  const previewAnnotation = preparedAnnotation => {
    shownAnnotationPreview = getNewAnnotationPreview(preparedAnnotation);
    previewGroup.add(shownAnnotationPreview);
    if (preparedAnnotation.name === TOOLS_IDS.TEXT) {
      wrapTextBoundsPreviewByRect(preparedAnnotation);
    }
    latestAnnotationProps = preparedAnnotation;
  };
  const updateAnnotationPreview = (preparedBoundingRect, isShiftKeyPressed) => {
    if (!latestAnnotationProps) {
      return;
    }
    const transformedAnnotation = dimensToProperAnnotationDimens(preparedBoundingRect, latestAnnotationProps.name, isShiftKeyPressed);
    if (textAnnotationWrappedRect) {
      textAnnotationWrappedRect.setAttrs(transformedAnnotation);
    }
    shownAnnotationPreview.setAttrs(transformedAnnotation);
    latestAnnotationProps = {
      ...latestAnnotationProps,
      ...transformedAnnotation
    };
  };
  const updatePreviewWithBoundedDimens = e => {
    const pointerOffsets = getPointerOffsetPositionBoundedToObject(previewGroup, getCanvasBoundingRect());
    updateAnnotationPreview(getBoundingRectUnScaled(pointerOffsets, pointerDown, previewGroup), e.shiftKey);
  };
  const destroyShownPreview = () => {
    if (previewGroup && shownAnnotationPreview) {
      previewGroup.destroyChildren();
    }
  };
  const handlePointerMove = e => {
    if (e.evt.touches?.length > 1) {
      return;
    }
    const pointerOffsets = getPointerOffsetPositionBoundedToObject(previewGroup, getCanvasBoundingRect());
    if (pointerDown.isOutOfCanvas) {
      document.removeEventListener('mousemove', updatePreviewWithBoundedDimens, eventsOptions$1);
      document.removeEventListener('touchmove', updatePreviewWithBoundedDimens, eventsOptions$1);
      pointerDown.isOutOfCanvas = false;
    }
    const boundingRect = getBoundingRectUnScaled(pointerOffsets, pointerDown, previewGroup);
    if (shownAnnotationPreview) {
      updateAnnotationPreview(boundingRect, e.evt.shiftKey);
    } else {
      const {
        id,
        x,
        y,
        points,
        ...currentAnnotationProps
      } = annotation;
      previewAnnotation({
        ...currentAnnotationProps,
        ...boundingRect
      });
    }
    canvas.setAttrs({
      isDrawing: true
    });
  };
  const handlePointerOut = () => {
    if (!pointerDown.isOutOfCanvas) {
      document.addEventListener('mousemove', updatePreviewWithBoundedDimens, eventsOptions$1);
      document.addEventListener('touchmove', updatePreviewWithBoundedDimens, eventsOptions$1);
      pointerDown.isOutOfCanvas = true;
    }
  };
  const handlePointerUp = () => {
    destroyShownPreview();
    if (latestAnnotationProps && (latestAnnotationProps.width >= MIN_PIXELS && latestAnnotationProps.height >= MIN_PIXELS || latestAnnotationProps.radiusX >= MIN_PIXELS && latestAnnotationProps.radiusY >= MIN_PIXELS || latestAnnotationProps.points?.[2] || latestAnnotationProps.points?.[3] || latestAnnotationProps.radius >= MIN_PIXELS)) {
      const {
        startedX,
        startedY,
        offsetX,
        offsetY,
        width,
        height,
        ...savableAnnotation
      } = latestAnnotationProps;
      if (!NO_WIDTH_HEIGHT_ANNOTATIONS.includes(annotation.name)) {
        savableAnnotation.width = width;
        savableAnnotation.height = height;
      }
      callbkAfterPreview(savableAnnotation, true);
    }
    shownAnnotationPreview = null;
    textAnnotationWrappedRect = null;
    latestAnnotationProps = null;
    canvas.setAttrs({
      isDrawing: false
    });
    canvas.off('mousemove touchmove', handlePointerMove);
    canvas.off('mouseleave touchcancel', handlePointerOut);
    document.removeEventListener('mouseup', handlePointerUp, eventsOptions$1);
    document.removeEventListener('touchend', handlePointerUp, eventsOptions$1);
    document.removeEventListener('mouseleave', handlePointerUp, eventsOptions$1);
    document.removeEventListener('touchcancel', handlePointerUp, eventsOptions$1);
    document.removeEventListener('mousemove', updatePreviewWithBoundedDimens, eventsOptions$1);
    document.removeEventListener('touchmove', updatePreviewWithBoundedDimens, eventsOptions$1);
    pointerDown.isOutOfCanvas = false;
  };
  const handlePointerDown = e => {
    e.evt.preventDefault();
    // if the canvas is in panning/dragging mode avoid drawing or if in zooming mode by touches avoid drawing.
    if (e.target.attrs.draggable || e.evt.touches?.length > 1) {
      return;
    }
    destroyShownPreview();
    const pointerOffsets = getPointerOffsetPositionBoundedToObject(previewGroup, getCanvasBoundingRect());

    // The dimensions are relative to the canvas.
    pointerDown.startedX = pointerOffsets.offsetX;
    pointerDown.startedY = pointerOffsets.offsetY;
    pointerDown.isOutOfCanvas = false;
    canvas.on('mousemove touchmove', handlePointerMove);
    canvas.on('mouseleave touchcancel', handlePointerOut);
    document.addEventListener('mouseup', handlePointerUp, eventsOptions$1);
    document.addEventListener('touchend', handlePointerUp, eventsOptions$1);
    document.addEventListener('mouseleave', handlePointerUp, eventsOptions$1);
    document.addEventListener('touchcancel', handlePointerUp, eventsOptions$1);
  };
  canvas.on('mousedown touchstart', handlePointerDown);
  return () => {
    destroyShownPreview();
    canvas.off('mousedown touchstart', handlePointerDown);
  };
};

/** External Dependencies */
const useDebouncedCallback = (func, timeout, dependencies = []) => useCallback(debounce$1(func, timeout), dependencies);

/** External Dependencies */

// TODO: Imporve the logic and separate the selected annotation options from handling preview and options before draw.
const useAnnotation = (annotation = {}, enablePreview = true) => {
  const {
    dispatch,
    previewGroup,
    annotations,
    selectionsIds = [],
    config
  } = useStore();
  const annotationDefaults = {
    ...config.annotationsCommon,
    ...config[annotations[selectionsIds[0]]?.name || annotation.name]
  };
  const [tmpAnnotation, setTmpAnnotation] = useState(() => ({
    ...annotationDefaults,
    ...annotation,
    ...annotations[selectionsIds[0]]
  }));
  const annotationBeforeSelection = useRef();
  const canvas = previewGroup?.getStage();
  const saveAnnotation = useCallback(annotationData => {
    const {
      fonts,
      onFontChange,
      ...savableAnnotationData
    } = annotationData;
    dispatch({
      type: SET_ANNOTATION,
      payload: savableAnnotationData
    });
    if (savableAnnotationData.id && annotation.name !== TOOLS_IDS.PEN) {
      debounce$1(() => {
        dispatch({
          type: SELECT_ANNOTATION,
          payload: {
            annotationId: savableAnnotationData.id
          }
        });
      }, 30)();
    }
  }, []);
  const updateTmpAnnotation = useDebouncedCallback(updatesObjOrFn => {
    setTmpAnnotation(latest => ({
      ...latest,
      shouldSave: false,
      neverSave: false,
      ...(typeof updatesObjOrFn === 'function' ? updatesObjOrFn(latest) : updatesObjOrFn)
    }));
  }, 15);
  const getAnnotationInitialProps = useCallback((currentAnnotation, newAnnotationName) => {
    if (currentAnnotation.name === newAnnotationName) {
      const {
        x,
        y,
        width,
        height,
        radius,
        radiusX,
        radiusY,
        points,
        image,
        text,
        scaleX,
        scaleY,
        rotation,
        ...dimensionlessProps
      } = currentAnnotation;
      return {
        ...annotationDefaults,
        ...annotation,
        ...dimensionlessProps
      };
    }
    return {
      ...annotationDefaults,
      ...annotation
    };
  }, []);
  const saveAnnotationNoDebounce = useCallback(newAnnotationData => {
    setTmpAnnotation(latest => {
      const initialProps = getAnnotationInitialProps(latest, newAnnotationData.name || annotation.name);
      return {
        ...initialProps,
        ...newAnnotationData,
        id: newAnnotationData.id || randomId(newAnnotationData.name || latest.name),
        shouldSave: true,
        neverSave: false
      };
    });
  }, []);
  useEffect(() => {
    const {
      shouldSave,
      neverSave,
      ...savableAnnotation
    } = tmpAnnotation;
    const selection = selectionsIds.length === 1 && annotations[selectionsIds[0]];
    if (!neverSave && (shouldSave || selection)) {
      saveAnnotation({
        ...savableAnnotation,
        id: shouldSave ? savableAnnotation.id : selection.id
      });
    }
  }, [tmpAnnotation]);
  useEffect(() => {
    // setTimeout to make the state changes after the annotation is drawn not before.
    setTimeout(() => {
      if (selectionsIds.length === 1) {
        annotationBeforeSelection.current = tmpAnnotation;
        setTmpAnnotation({
          ...annotations[selectionsIds[0]],
          neverSave: true
        });
      } else if (annotationBeforeSelection.current) {
        setTmpAnnotation({
          ...annotationBeforeSelection.current,
          neverSave: true
        });
        annotationBeforeSelection.current = null;
      }
    });
  }, [selectionsIds, annotations]);
  useEffect(() => {
    let stopAnnotationEventsListening = null;
    if (canvas && enablePreview) {
      const annotationInitialProps = getAnnotationInitialProps(tmpAnnotation, annotation.name);
      stopAnnotationEventsListening = previewThenCallAnnotationAdding(canvas, {
        ...annotationInitialProps,
        name: annotation.name
      }, previewGroup, saveAnnotationNoDebounce);
    }
    return () => {
      if (stopAnnotationEventsListening) {
        stopAnnotationEventsListening();
      }
    };
  }, [canvas, tmpAnnotation, previewGroup]);
  return useMemo(() => [tmpAnnotation, updateTmpAnnotation, saveAnnotationNoDebounce], [tmpAnnotation, updateTmpAnnotation, saveAnnotationNoDebounce]);
};

/** External Dependencies */
let timeout;
const applyModifyFn = (onModify, newState) => {
  timeout = setTimeout(() => {
    clearTimeout(timeout);
    if (typeof onModify === 'function' && newState) {
      onModify(newState);
    }
  });
};

/**
 * A normal react useReducer wrapped inside our own UNDO/REDO Reducer as middleware
 * for updating the UNDO/REDO states automatically
 *
 */
// TODO: maybe? make another reducer/context for design state and having the undo/redo to it only.
const useAppReducer = (reducer, initialState, passedConfig = {}) => {
  const initialStateWithUndoRedo = {
    ...initialState,
    pastDesignStates: [],
    futureDesignStates: [],
    hasRedo: false,
    hasUndo: false
  };
  const undoRedoResetReducer = (state, action) => {
    const newPresentState = reducer(state, action) || initialStateWithUndoRedo;
    if ([UNDO, REDO, RESET].includes(action.type)) {
      applyModifyFn(passedConfig.onModify, newPresentState);
      return newPresentState;
    }
    if (newPresentState.isDesignState) {
      const currentState = extractCurrentDesignState(state);
      const {
        isDesignState,
        ...neededNewPresentState
      } = newPresentState;
      const newState = {
        ...neededNewPresentState,
        pastDesignStates: [currentState, ...state.pastDesignStates],
        hasUndo: true,
        hasRedo: false,
        futureDesignStates: [],
        isResetted: false,
        haveNotSavedChanges: true
      };
      applyModifyFn(passedConfig.onModify, newState);
      return newState;
    }
    return newPresentState;
  };
  return useReducer(undoRedoResetReducer, initialStateWithUndoRedo);
};

/** External Dependencies */
const useAnnotationEvents = () => {
  const {
    tabId,
    dispatch
  } = useStore();
  const isAnnotationEventsDisabled = useMemo(() => tabId !== TABS_IDS.ANNOTATE && tabId !== TABS_IDS.WATERMARK, [tabId]);
  const updateAnnotation = useCallback(annotationProps => {
    dispatch({
      type: SET_ANNOTATION,
      payload: annotationProps
    });
  }, []);
  const updatePositionOnDragEnd = useCallback(e => {
    updateAnnotation({
      id: e.target.id(),
      x: e.target.x(),
      y: e.target.y()
    });
  }, []);
  const getAnnotationTransformProps = useCallback(e => {
    const transformProps = {
      id: e.target.id(),
      rotation: e.target.rotation(),
      x: e.target.x(),
      y: e.target.y()
    };
    if (e.target.name() === TOOLS_IDS.TEXT) {
      transformProps.width = e.target.width() * e.target.scaleX();
      transformProps.height = e.target.height() * e.target.scaleY();
      transformProps.scaleX = 1;
      transformProps.scaleY = 1;
    } else {
      transformProps.scaleX = e.target.scaleX();
      transformProps.scaleY = e.target.scaleY();
    }
    return transformProps;
  }, []);
  const updateAnnotationTransform = useCallback(e => {
    updateAnnotation(getAnnotationTransformProps(e));
  }, []);
  const updateTextAnnotationOnTransform = useCallback(e => {
    if (e.target.name() === TOOLS_IDS.TEXT) {
      e.target.setAttrs(getAnnotationTransformProps(e));
    }
  });
  const selectAnnotationOnClick = useCallback(e => {
    if (e.target.id() === WATERMARK_ANNOTATION_ID$1 || e.target.getStage().attrs.isDrawing) {
      return;
    }
    const multiple = e.evt.ctrlKey || e.evt.shiftKey || e.evt.metaKey;
    dispatch({
      type: SELECT_ANNOTATION,
      payload: {
        annotationId: e.target.id(),
        multiple
      }
    });
    // TODO: Remove this once we implement the possibility to select annotation
    // while any annotation tool is opened without changing the tool.
    dispatch({
      type: SELECT_TOOL,
      payload: {
        toolId: e.target.name(),
        keepSelections: multiple
      }
    });
  }, []);
  return useMemo(() => isAnnotationEventsDisabled ? {} : {
    onTransform: updateTextAnnotationOnTransform,
    onTransformEnd: updateAnnotationTransform,
    onDragEnd: updatePositionOnDragEnd,
    onClick: selectAnnotationOnClick,
    onTap: selectAnnotationOnClick
  }, [isAnnotationEventsDisabled]);
};

/** External Dependencies */
const useResizeObserver = (onResize = () => {}) => {
  const onResizeCallback = useRef(onResize);
  const resizeObserver = useRef();
  const observerCallback = useCallback(entries => {
    entries.forEach(entry => {
      if (entry.contentRect) {
        const {
          width,
          height
        } = entry.contentRect;
        onResizeCallback.current({
          entry,
          width,
          height
        });
      }
    });
  }, []);
  const updateOnResizeCallback = useCallback(newOnResizeCallback => {
    onResizeCallback.current = newOnResizeCallback;
  }, []);
  const initObserver = useCallback(() => {
    if (!resizeObserver.current) {
      resizeObserver.current = new ResizeObserver(observerCallback);
    }
  }, []);
  const observeElement = useCallback((element, newOnResizeCallback) => {
    if (element) {
      if (!resizeObserver.current) {
        initObserver();
      }
      resizeObserver.current.observe(element);
      if (newOnResizeCallback) {
        onResizeCallback.current = newOnResizeCallback;
      }
    }
  }, []);
  const unobserveElement = useCallback((element, newOnResizeCallback) => {
    if (resizeObserver.current && element) {
      resizeObserver.current.unobserve(element);
      if (newOnResizeCallback) {
        onResizeCallback.current = newOnResizeCallback;
      }
    }
  }, []);
  const removeObserver = useCallback(() => {
    if (resizeObserver.current) {
      resizeObserver.current.disconnect();
    }
  }, []);
  useEffect(() => {
    initObserver();
    return removeObserver;
  }, []);
  return useMemo(() => [observeElement, unobserveElement, updateOnResizeCallback], []);
};

const usePhoneScreen = (screenWidth = 438) => window.matchMedia(`(max-width: ${screenWidth}px)`).matches;

const mapNumber = (number, oldMin, oldMax, newMin, newMax) => (number - oldMin) * (newMax - newMin) / (oldMax - oldMin) + newMin;

const mapCropBox = (crop, shownImageDimensions, toDimensions) => ({
  ...(crop.x || crop.x === 0 ? {
    x: Math.round(mapNumber(crop.x, 0, shownImageDimensions.width,
    // could replace with image node's dimensions from designLayer as they're same
    0, toDimensions.width))
  } : {}),
  ...(crop.y || crop.y === 0 ? {
    y: Math.round(mapNumber(crop.y, 0, shownImageDimensions.height, 0, toDimensions.height))
  } : {}),
  width: Math.round(mapNumber(crop.width ?? shownImageDimensions.width, 0, shownImageDimensions.width, 0, toDimensions.width)),
  height: Math.round(mapNumber(crop.height ?? shownImageDimensions.height, 0, shownImageDimensions.height, 0, toDimensions.height))
});

const getSizeAfterRotation = (width, height, rotationAngleInDegree = 0) => {
  const absRotationAngleInDegree = Math.abs(rotationAngleInDegree);
  const roundedDegree = Math.round(rotationAngleInDegree);
  const isGreaterThan90Degree = absRotationAngleInDegree > 90;
  const currentAbsRotationAngleInDegree = isGreaterThan90Degree ? absRotationAngleInDegree - 90 : absRotationAngleInDegree;
  const currentWidth = isGreaterThan90Degree ? height : width;
  const currentHeight = isGreaterThan90Degree ? width : height;
  const radianAngle = currentAbsRotationAngleInDegree * Math.PI / 180;
  const sin = Math.abs(Math.sin(radianAngle));
  const cos = Math.abs(Math.cos(radianAngle));
  const getLeftOffset = () => roundedDegree > 90 ? currentWidth * cos + currentHeight * sin : currentHeight * sin;
  const getTopOffset = () => {
    if (roundedDegree < 0 && roundedDegree > -90) {
      return currentWidth * sin;
    }
    if (roundedDegree > 90) {
      return currentWidth * sin;
    }
    return currentHeight * cos + currentWidth * sin;
  };
  return {
    width: Math.round(currentWidth * cos) + Math.round(currentHeight * sin),
    height: Math.round(currentWidth * sin) + Math.round(currentHeight * cos),
    offsetTop: roundedDegree >= 0 && roundedDegree <= 90 ? 0 : getTopOffset(),
    offsetLeft: roundedDegree <= 0 && roundedDegree >= -90 ? 0 : getLeftOffset()
  };
};

const imageToBase64 = image => {
  if (image instanceof HTMLImageElement) {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    canvas.width = image.width;
    canvas.height = image.height;
    ctx.drawImage(image, 0, 0);
    return canvas.toDataURL();
  }
  return '';
};

const getFileFullName = (fileName = '', appendedExtension) => {
  let finalExtension = appendedExtension;
  let finalFileName = fileName;
  if (!finalExtension && POSSIBLE_IMAGE_TYPES.some(extension => fileName.lastIndexOf(`.${extension}`) === fileName.length - `.${extension}`.length)) {
    const currentExtension = fileName.slice(fileName.lastIndexOf('.') + 1)?.toLowerCase();
    finalExtension = currentExtension && SUPPORTED_IMAGE_TYPES.includes(currentExtension) ? currentExtension : DEFAULT_IMAGE_TYPE;
    finalFileName = fileName.slice(0, fileName.lastIndexOf('.'));
  }
  finalExtension = finalExtension || DEFAULT_IMAGE_TYPE;
  return {
    fullName: `${finalFileName}.${finalExtension}`,
    name: finalFileName,
    extension: finalExtension
  };
};

/* eslint-disable no-plusplus */
/* eslint-disable no-bitwise */
const rotateLeft = (n, s) => {
  const t4 = n << s | n >>> 32 - s;
  return t4;
};
const cvtHex = val => {
  let str = '';
  let i;
  let v;
  for (i = 7; i >= 0; i--) {
    v = val >>> i * 4 & 0x0f;
    str += v.toString(16);
  }
  return str;
};
const Utf8Encode = string => {
  const str = string.replace(/\r\n/g, '\n');
  let utftext = '';
  for (let n = 0; n < str.length; n++) {
    const c = str.charCodeAt(n);
    if (c < 128) {
      utftext += String.fromCharCode(c);
    } else if (c > 127 && c < 2048) {
      utftext += String.fromCharCode(c >> 6 | 192);
      utftext += String.fromCharCode(c & 63 | 128);
    } else {
      utftext += String.fromCharCode(c >> 12 | 224);
      utftext += String.fromCharCode(c >> 6 & 63 | 128);
      utftext += String.fromCharCode(c & 63 | 128);
    }
  }
  return utftext;
};
const sha1 = string => {
  let str = string;
  let blockstart;
  let i;
  let j;
  const W = new Array(80);
  let H0 = 0x67452301;
  let H1 = 0xefcdab89;
  let H2 = 0x98badcfe;
  let H3 = 0x10325476;
  let H4 = 0xc3d2e1f0;
  let A;
  let B;
  let C;
  let D;
  let E;
  let temp;
  str = Utf8Encode(str);
  const strLength = str.length;
  const wordArray = [];
  for (i = 0; i < strLength - 3; i += 4) {
    j = str.charCodeAt(i) << 24 | str.charCodeAt(i + 1) << 16 | str.charCodeAt(i + 2) << 8 | str.charCodeAt(i + 3);
    wordArray.push(j);
  }
  switch (strLength % 4) {
    case 0:
      i = 0x080000000;
      break;
    case 1:
      i = str.charCodeAt(strLength - 1) << 24 | 0x0800000;
      break;
    case 2:
      i = str.charCodeAt(strLength - 2) << 24 | str.charCodeAt(strLength - 1) << 16 | 0x08000;
      break;
    case 3:
      i = str.charCodeAt(strLength - 3) << 24 | str.charCodeAt(strLength - 2) << 16 | str.charCodeAt(strLength - 1) << 8 | 0x80;
      break;
  }
  wordArray.push(i);
  while (wordArray.length % 16 !== 14) wordArray.push(0);
  wordArray.push(strLength >>> 29);
  wordArray.push(strLength << 3 & 0x0ffffffff);
  for (blockstart = 0; blockstart < wordArray.length; blockstart += 16) {
    for (i = 0; i < 16; i++) W[i] = wordArray[blockstart + i];
    for (i = 16; i <= 79; i++) W[i] = rotateLeft(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    A = H0;
    B = H1;
    C = H2;
    D = H3;
    E = H4;
    for (i = 0; i <= 19; i++) {
      temp = rotateLeft(A, 5) + (B & C | ~B & D) + E + W[i] + 0x5a827999 & 0x0ffffffff;
      E = D;
      D = C;
      C = rotateLeft(B, 30);
      B = A;
      A = temp;
    }
    for (i = 20; i <= 39; i++) {
      temp = rotateLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ed9eba1 & 0x0ffffffff;
      E = D;
      D = C;
      C = rotateLeft(B, 30);
      B = A;
      A = temp;
    }
    for (i = 40; i <= 59; i++) {
      temp = rotateLeft(A, 5) + (B & C | B & D | C & D) + E + W[i] + 0x8f1bbcdc & 0x0ffffffff;
      E = D;
      D = C;
      C = rotateLeft(B, 30);
      B = A;
      A = temp;
    }
    for (i = 60; i <= 79; i++) {
      temp = rotateLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0xca62c1d6 & 0x0ffffffff;
      E = D;
      D = C;
      C = rotateLeft(B, 30);
      B = A;
      A = temp;
    }
    H0 = H0 + A & 0x0ffffffff;
    H1 = H1 + B & 0x0ffffffff;
    H2 = H2 + C & 0x0ffffffff;
    H3 = H3 + D & 0x0ffffffff;
    H4 = H4 + E & 0x0ffffffff;
  }
  temp = cvtHex(H0) + cvtHex(H1) + cvtHex(H2) + cvtHex(H3) + cvtHex(H4);
  return temp.toLowerCase();
};

/** Internal Dependencies */
const encodeBase64 = str => {
  return btoa(str).replace(/=*$/g, '');
};
const getSha1 = (str, length) => {
  return sha1(str).slice(0, length);
};
const getSealingParams = (paramsStr, originalUrl, salt, charCount) => {
  const base64String = encodeBase64(paramsStr);
  const calcHash = getSha1(originalUrl + base64String + salt, charCount);
  return [calcHash ? `ci_seal=${calcHash}` : '', base64String ? `ci_eqs=${base64String}` : ''].filter(i => i).join('&');
};
const getImageSealingParams = (paramsStr, imageSealing, originalUrl) => {
  const {
    salt,
    charCount,
    includeParams = []
  } = imageSealing || {};
  const isIncludeParamsEmpty = !includeParams || includeParams?.length === 0;
  let sealingParamsStr = '';
  let restParamsStr = '';
  const sealingParams = [];
  const restParams = [];
  paramsStr.split('&').forEach(item => {
    const [paramName] = item.split('=');
    if (includeParams?.indexOf(paramName) > -1 || isIncludeParamsEmpty) {
      sealingParams.push(item);
    } else {
      restParams.push(item);
    }
  });
  if (restParams.length > 0) {
    restParamsStr = restParams.join('&');
  }

  // We need to add sealing always, even if sealingParams is empty.
  // In case with empty params sealing will be like: ci_seal=10613a92e5
  sealingParamsStr = getSealingParams(sealingParams.join('&'), originalUrl, salt, charCount);
  return [sealingParamsStr, restParamsStr].filter(p => p).join('&');
};

const rgbaToHexWithOpacity = (rgba = '') => {
  const defaultHexColor = {
    hex: '000000',
    opacity: 1
  };
  if (!rgba) {
    return defaultHexColor;
  }
  if (rgba.startsWith('#')) {
    return {
      hex: rgba.replace('#', ''),
      opacity: 1
    };
  }
  let [r, g, b, opacity] = rgba.split(',');
  if (!r || !g || !b) {
    return defaultHexColor;
  }
  r = parseFloat(r.replace(/rgba?\(/, '').trim()).toString(16);
  g = parseFloat(g.trim()).toString(16);
  b = parseFloat(b.trim()).toString(16);
  opacity = opacity ? parseFloat(opacity.trim() ?? 1) : undefined;
  if (r.length === 1) r = `0${r}`;
  if (g.length === 1) g = `0${g}`;
  if (b.length === 1) b = `0${b}`;
  return {
    hex: `${r}${g}${b}`,
    opacity
  };
};

const toPrecisedFloat = (number, precision = 5) => number && +parseFloat(number).toFixed(precision);

/** Internal Dependencies */
const generateCropQuery = (crop, previewDimensions, originalDimensions, cropConfig) => {
  if (crop.noEffect) {
    // if the ratio contains = means it might be a complete crop query (func=face) then use it as it's otherwise assign the ratio to gravity.
    return crop.ratio.includes('=') ? crop.ratio : `gravity=${crop.ratio}`;
  }
  const {
    lockCropAreaAt
  } = cropConfig || {};
  const {
    x,
    y,
    width,
    height
  } = mapCropBox(crop, previewDimensions, originalDimensions);
  const ellipseQuery = crop.ratio === ELLIPSE_CROP ? `&radius=${Math.max(width, height)}&force_format=png` : '';
  if (lockCropAreaAt) {
    const [yPlace, xPlace] = lockCropAreaAt.split('-');
    const gravity = `${EDITOR_TO_CLOUDIMG_POSITIONS[yPlace]}${EDITOR_TO_CLOUDIMG_POSITIONS[xPlace]}`;
    return `gravity=${gravity}&aspect_ratio=${toPrecisedFloat(typeof crop.ratio === 'string' ? width / height : crop.ratio, 2)}${ellipseQuery}`;
  }
  return `tl_px=${x},${y}&br_px=${x + width},${y + height}${ellipseQuery}`;
};
const generateResizeQuery = ({
  width,
  height
} = {}) => `w=${width}&h=${height}`;
const generateRotationQuery = rotationAngle => `r=${-rotationAngle}`;
const generateFlipQuery = (isFlippedX, isFlippedY) => `flip=${isFlippedX ? 'x' : ''}${isFlippedY ? 'y' : ''}`;
const generateWatermarkQuery = (previewDimensions, watermarkAnnotation = {}, crop = {}) => {
  const {
    width,
    height,
    x,
    y,
    opacity,
    scaleX = 1,
    scaleY = 1,
    ...watermark
  } = watermarkAnnotation;
  const mainImageRatio = previewDimensions.width / previewDimensions.height;
  const scaledWidth = previewDimensions.width * previewDimensions.scaledBy;
  const scaledHeight = previewDimensions.height * previewDimensions.scaledBy;
  const scaledX = x * previewDimensions.scaledBy;
  const scaledY = y * previewDimensions.scaledBy;
  const queryParams = `wat=1&wat_gravity=absolute&wat_pos=${Math.floor((scaledX - (crop.x || 0)) / scaledWidth * 100, 2)}p,${Math.floor((scaledY - (crop.y || 0)) / scaledHeight * 100, 2)}p`;
  if (watermarkAnnotation.name === TOOLS_IDS.TEXT) {
    const {
      hex,
      opacity: colorOpacity
    } = rgbaToHexWithOpacity(watermark.fill);
    return `${queryParams}&wat_text=${watermark.text.replaceAll('\n', '')}&wat_font=${watermark.fontFamily}&wat_color=${hex}&wat_opacity=${colorOpacity ?? opacity ?? 1}&wat_fontsize=${watermark.fontSize}max`;
  }
  const imgSrc = watermark.image?.src || watermark.image;
  const watermarkUrl = !imgSrc.startsWith('blob:') && imgSrc;
  const watermarkRatio = width / height;
  const watermarkScale = toPrecisedFloat((watermarkRatio > mainImageRatio ? width * scaleX / scaledWidth : height * scaleY / scaledHeight) * 100, 2);
  return `${queryParams}&wat_opacity=${opacity}&wat_scale=${watermarkScale}p${watermarkUrl ? `&wat_url=${encodeURIComponent(watermarkUrl)}` : ''}`;
};
const finetuneNameToParamInfo = {
  Brighten: {
    cloudimage: {
      name: 'bright',
      min: -100,
      max: 100
    },
    internal: {
      propName: 'brightness',
      min: -1,
      max: 1
    }
  },
  Contrast: {
    cloudimage: {
      name: 'contrast',
      min: -100,
      max: 100
    },
    internal: {
      propName: 'contrast',
      min: -100,
      max: 100
    }
  },
  Blur: {
    cloudimage: {
      name: 'blur',
      min: 0,
      max: 100
    },
    internal: {
      propName: 'blurRadius',
      min: 0,
      max: 100
    }
  }
};
const generateFinetuneQuery = (finetunes, finetunesProps = {}) => {
  const queryParams = [];
  finetunes.forEach(finetuneFn => {
    const finetuneParamInfo = (finetuneFn.finetuneName || finetuneFn.name) && finetuneNameToParamInfo[finetuneFn.finetuneName || finetuneFn.name];
    if (finetuneParamInfo) {
      const finetuneCloudimageVal = toPrecisedFloat(mapNumber(finetunesProps[finetuneParamInfo.internal.propName], finetuneParamInfo.internal.min, finetuneParamInfo.internal.max, finetuneParamInfo.cloudimage.min, finetuneParamInfo.cloudimage.max), 2);
      queryParams.push(`${finetuneParamInfo.cloudimage.name}=${finetuneCloudimageVal}`);
    }
  });
  return queryParams.join('&');
};
const operationsToCloudimageUrl = (cloudimage, operations, previewDimensions, originalImage, cropConfig) => {
  const {
    token,
    domain,
    dontPrefixUrl,
    version,
    imageSealing,
    secureProtocol
  } = cloudimage;
  const {
    imgSrc,
    adjustments: {
      crop,
      rotation,
      isFlippedX,
      isFlippedY
    },
    resize = {},
    finetunes = {},
    finetunesProps,
    annotations = {}
  } = operations;
  const url = !dontPrefixUrl ? `http${secureProtocol ? 's' : ''}://${token}.${domain.replace(/^(https?:\/\/)?(www\.)?|^\.|\/$/g, '')}/${version ? `${version}/` : ''}` : '';
  const operationsQueries = [];
  if (crop.width && crop.height && (crop.x || crop.x === 0) && (crop.y || crop.y === 0)) {
    operationsQueries.push(generateCropQuery(crop, previewDimensions, originalImage, cropConfig));
  }
  if (resize.width || resize.height) {
    operationsQueries.push(generateResizeQuery({
      ...originalImage,
      ...resize
    }));
  }
  if (rotation) {
    operationsQueries.push(generateRotationQuery(rotation));
  }
  if (isFlippedX || isFlippedY) {
    operationsQueries.push(generateFlipQuery(isFlippedX, isFlippedY));
  }
  if (finetunes.length > 0 && finetunesProps) {
    operationsQueries.push(generateFinetuneQuery(finetunes, finetunesProps));
  }
  if (annotations[WATERMARK_ANNOTATION_ID$1]) {
    operationsQueries.push(generateWatermarkQuery(previewDimensions, annotations[WATERMARK_ANNOTATION_ID$1], crop));
  }
  operationsQueries.push('ci_url_encoded=1');
  let paramsStr = operationsQueries.join('&');
  if (imageSealing.enable) {
    paramsStr = getImageSealingParams(paramsStr, imageSealing, imgSrc);
  }
  paramsStr = paramsStr.replaceAll(' ', '+');
  const queryPrefixOperator = !dontPrefixUrl && '?' || imgSrc.indexOf('?') === -1 ? '?' : '&';
  return `${url}${dontPrefixUrl ? imgSrc : encodeURIComponent(imgSrc)}${paramsStr ? `${queryPrefixOperator}${paramsStr.replace(/&$/, '')}` : ''}`;
};

/** External Dependencies */
const useTransformedImgData = () => {
  const state = useStore();
  const {
    dispatch,
    designLayer,
    shownImageDimensions,
    originalImage,
    resize = {},
    adjustments: {
      crop = {},
      rotation = 0
    } = {},
    config: {
      savingPixelRatio,
      previewPixelRatio,
      forceToPngInEllipticalCrop,
      defaultSavedImageType,
      useCloudimage,
      cloudimage,
      [TOOLS_IDS.CROP]: cropConfig
    }
  } = state;
  const getTransformedCloudimageData = (imageFileInfo = {}) => {
    const {
      filter,
      ...designState
    } = extractCurrentDesignState(state);
    const cloudimageUrl = operationsToCloudimageUrl(cloudimage, designState, shownImageDimensions, originalImage, cropConfig);
    const mappedCropBox = mapCropBox({
      x: crop.x,
      y: crop.y,
      width: crop.width,
      height: crop.height
    }, shownImageDimensions, originalImage);
    const imageData = {
      cloudimageUrl,
      width: imageFileInfo?.size?.width || mappedCropBox.width,
      height: imageFileInfo?.size?.height || mappedCropBox.height
    };
    return {
      imageData,
      designState
    };
  };
  const getTransformedImgData = (imageFileInfo = {}, pixelRatio = false, keepLoadingSpinnerShown = false) => {
    const currentImgFileInfo = {
      size: resize,
      ...imageFileInfo
    };
    Konva$2.pixelRatio = pixelRatio || savingPixelRatio;
    const {
      clipWidth,
      clipHeight,
      clipX,
      clipY
    } = designLayer.attrs;

    // We're using this for letting the designLayer's clipFunc know that we are in saving mode
    // so it should apply elliptical crop if it is not applied and user is chosing ellitpical ratio.
    designLayer.setAttr('isSaving', true);
    const preparedCanvas = designLayer.getStage().clone({
      width: originalImage.width,
      height: originalImage.height,
      scaleX: 1,
      scaleY: 1
    });
    const [preparedDesignLayer] = preparedCanvas.children; // children[0] = Design layer
    preparedCanvas.children[1].destroy(); // children[1] = Transformers layer, which is not needed anymore
    const imgNode = preparedCanvas.findOne(`#${IMAGE_NODE_ID}`);
    imgNode.cache();
    const preparedDesignLayerScale = {
      x: preparedCanvas.width() / shownImageDimensions.width,
      y: preparedCanvas.height() / shownImageDimensions.height
    };
    preparedDesignLayer.setAttrs({
      rotation: 0,
      offsetX: 0,
      offsetY: 0,
      x: 0,
      y: 0,
      scaleX: preparedDesignLayerScale.x,
      scaleY: preparedDesignLayerScale.y
    });
    const {
      name,
      extension,
      quality = 92,
      size = {}
    } = {
      ...((!currentImgFileInfo.name || !currentImgFileInfo.extension) && getFileFullName(originalImage.name, forceToPngInEllipticalCrop && crop.ratio === ELLIPSE_CROP ? 'png' : SUPPORTED_IMAGE_TYPES.includes(defaultSavedImageType?.toLowerCase()) && defaultSavedImageType)),
      ...currentImgFileInfo
    };
    const isQualityAcceptable = ['jpeg', 'jpg', 'webp'].includes(extension);
    const mappedCropBox = mapCropBox(crop.noEffect ? {
      x: 0,
      y: 0
    } : {
      x: crop.x || clipX,
      y: crop.y || clipY,
      width: crop.width || clipWidth,
      height: crop.height || clipHeight
    }, shownImageDimensions, preparedCanvas.attrs);
    const rotatedCropBox = getSizeAfterRotation(mappedCropBox.width, mappedCropBox.height, rotation);
    preparedCanvas.setAttrs({
      offsetX: mappedCropBox.width / 2 + mappedCropBox.x,
      offsetY: mappedCropBox.height / 2 + mappedCropBox.y,
      width: rotatedCropBox.width,
      height: rotatedCropBox.height,
      x: rotatedCropBox.width / 2,
      y: rotatedCropBox.height / 2,
      rotation
    });
    if (size.width) {
      const newScaleX = size.width / preparedCanvas.width();
      preparedCanvas.setAttrs({
        scaleX: newScaleX,
        width: size.width,
        x: preparedCanvas.x() * Math.abs(newScaleX)
      });
    }
    if (size.height) {
      const newScaleY = size.height / preparedCanvas.height();
      preparedCanvas.setAttrs({
        scaleY: newScaleY,
        height: size.height,
        y: preparedCanvas.y() * Math.abs(newScaleY)
      });
    }

    // As jpg doesn't support quality proeprty but it still same as jpeg,
    // then we convert mime to image/jpeg and name the file with .jpg
    const finalOptions = {
      mimeType: `image/${extension === 'jpg' ? 'jpeg' : extension}`,
      ...(isQualityAcceptable ? {
        quality
      } : {})
    };
    const finalCanvas = preparedCanvas.toCanvas(finalOptions);
    const finalImgBase64 = preparedCanvas.toDataURL(finalOptions);
    const finalImgDesignState = {
      ...extractCurrentDesignState(state),
      shownImageDimensions: {
        width: state.shownImageDimensions.width,
        height: state.shownImageDimensions.height,
        scaledBy: state.shownImageDimensions.scaledBy
      }
    };
    if (finalImgDesignState.filter) {
      finalImgDesignState.filter = finalImgDesignState.filter.filterName || finalImgDesignState.filter.name;
    }
    finalImgDesignState.finetunes = finalImgDesignState.finetunes.map(finetuneFn => finetuneFn.finetuneName || finetuneFn.name);
    Object.keys(finalImgDesignState.annotations).forEach(k => {
      const annotation = finalImgDesignState.annotations[k];
      const imgSrc = annotation.name === TOOLS_IDS.IMAGE && annotation.image?.src;
      if (imgSrc && imgSrc.startsWith('blob:')) {
        finalImgDesignState.annotations[k].image = imageToBase64(annotation.image);
      } else if (annotation.image instanceof HTMLImageElement) {
        finalImgDesignState.annotations[k].image = imgSrc;
      }
    });
    const finalImgPassedObject = {
      fullName: `${name}.${extension}`,
      name,
      extension,
      mimeType: `image/${extension}`,
      imageCanvas: finalCanvas,
      imageBase64: finalImgBase64,
      width: size.width || mappedCropBox.width,
      height: size.height || mappedCropBox.height,
      ...(isQualityAcceptable ? {
        quality
      } : {})
    };

    // Reseting isSaving to false so we get everything back to normal if user wants to continue editing after saving.
    designLayer.setAttr('isSaving', false);
    dispatch({
      type: SET_SAVED
    });
    imgNode.clearCache();
    preparedCanvas.destroy();
    Konva$2.pixelRatio = previewPixelRatio;
    const hideLoadingSpinner = () => {
      dispatch({
        type: HIDE_LOADER
      });
    };
    if (!keepLoadingSpinnerShown) {
      hideLoadingSpinner();
    }
    return {
      imageData: finalImgPassedObject,
      designState: finalImgDesignState,
      hideLoadingSpinner
    };
  };
  return useCloudimage ? getTransformedCloudimageData : getTransformedImgData;
};

var Type$3 = {
  Default: 'default',
  Localization: 'localization'
};

var LabelSize = {
  Sm: 'sm',
  Md: 'md',
  Lg: 'lg',
  Xl: 'xl'
};

var fontSizeLabelMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, LabelSize.Sm, function (_ref) {
  var font = _ref.theme.typography.font;
  return css(font[FontVariant.LabelSmall]);
}), LabelSize.Md, function (_ref2) {
  var font = _ref2.theme.typography.font;
  return css(font[FontVariant.LabelMedium]);
}), LabelSize.Lg, function (_ref3) {
  var font = _ref3.theme.typography.font;
  return css(font[FontVariant.LabelLargeEmphasis]);
}), LabelSize.Xl, function (_ref4) {
  var font = _ref4.theme.typography.font;
  return css(font[FontVariant.LabelExtraLargeEmphasis]);
});

var baseClassName$t = 'Label';
var Label$7 = /*#__PURE__*/styled.label.attrs({
  className: generateClassNames(baseClassName$t, 'root')
}).withConfig({
  componentId: "sc-16k2ql4-0"
})(function (_ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? LabelSize.Md : _ref$size,
    _ref$$error = _ref.$error,
    $error = _ref$$error === void 0 ? false : _ref$$error,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    htmlFor = _ref.htmlFor,
    theme = _ref.theme;
  return css(["display:flex;align-items:center;color:", ";font-style:normal;font-weight:normal;", " ", " cursor:", ";", ";"], theme.palette[Color.TextSecondary], disabled && css(["color:", ";", "{color:", ";}"], theme.palette[Color.ButtonDisabledText], Icon$6, theme.palette[Color.IconsMuted]), fontSizeLabelMixin[size], htmlFor && 'pointer', $error && css(["color:", " !important;"], theme.palette[Color.Error]));
});
var Text$2 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$t, 'text')
}).withConfig({
  componentId: "sc-16k2ql4-1"
})(["white-space:nowrap;text-overflow:ellipsis;overflow:hidden;"]);
var Icon$6 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$t, 'Icon')
}).withConfig({
  componentId: "sc-16k2ql4-2"
})(function (_ref2) {
  var palette = _ref2.theme.palette,
    _ref2$$end = _ref2.$end,
    $end = _ref2$$end === void 0 ? false : _ref2$$end;
  return css(["display:flex;", ";color:", ";"], $end ? 'margin-left: 4px' : 'margin-right: 4px', palette[Color.IconsSecondary]);
});
var Styled$O = applyDisplayNames({
  Label: Label$7,
  Icon: Icon$6,
  Text: Text$2
});
var StyledLabel = Styled$O;

var _excluded$1P = ["children", "iconStart", "iconEnd", "error", "disabled", "size", "type"];
var Label$5 = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    iconStart = _ref.iconStart,
    iconEnd = _ref.iconEnd,
    _ref$error = _ref.error,
    error = _ref$error === void 0 ? false : _ref$error,
    disabled = _ref.disabled,
    size = _ref.size,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? Type$3.Default : _ref$type,
    rest = _objectWithoutProperties(_ref, _excluded$1P);
  var textRef = useRef(null);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isEllipsisActive = _useState2[0],
    setIsEllipsisActive = _useState2[1];
  var renderIcon = function renderIcon(icon, end) {
    return /*#__PURE__*/React__default.createElement(StyledLabel.Icon, {
      $end: end
    }, typeof icon === 'function' ? icon({
      size: size === 'md' ? 14 : 12
    }) : icon);
  };
  var getTextTooltip = function getTextTooltip() {
    if (typeof children === 'string' && isEllipsisActive) {
      return children;
    }
  };
  var handleTextTooltip = function handleTextTooltip() {
    if (textRef.current !== null && textRef.current) {
      var _textRef$current, _textRef$current2;
      setIsEllipsisActive((textRef === null || textRef === void 0 || (_textRef$current = textRef.current) === null || _textRef$current === void 0 ? void 0 : _textRef$current.offsetWidth) < (textRef === null || textRef === void 0 || (_textRef$current2 = textRef.current) === null || _textRef$current2 === void 0 ? void 0 : _textRef$current2.scrollWidth));
    }
  };
  return /*#__PURE__*/React__default.createElement(StyledLabel.Label, _extends({
    ref: ref,
    $error: error,
    disabled: disabled,
    size: size,
    type: type
  }, rest), iconStart && renderIcon(iconStart, false), /*#__PURE__*/React__default.createElement(StyledLabel.Text, {
    title: getTextTooltip(),
    onMouseOver: handleTextTooltip,
    ref: textRef
  }, children), iconEnd && renderIcon(iconEnd, true));
});
var Label$6 = Label$5;

/** External Dependencies */
const StyledToolsBar = styled.div`
  width: fit-content;
  margin: 0 auto;
  max-width: 99.5%;
  max-height: 170px;

  [data-phone="true"] & {
    padding: 0;
    margin-top: 8px;
    max-height: initial;
  }
`;
const StyledToolsBarItems = styled.div`
  padding: 8px 16px 16px 16px;
  display: flex;
  gap: 12px;
  align-items: center;
  overflow: hidden;

  ${({
  isPhoneScreen
}) => isPhoneScreen && `
    justify-content: space-between;
    padding: 12px;
    gap: 8px;
  `}
`;

// HORIZONTAL TOOLBAR
const StyledToolsBarItemButton = styled.div(({
  theme,
  isPhoneScreen
}) => `
    display: flex;
    flex: 1;
    height: 100%;
    gap: 6px;
    border-radius: 2px;
    align-items: center;
    justify-content: center;
    padding: 6px 12px;
    border: 0.062rem solid white;
    
    svg {
      color: black;
      flex-shrink: 0;
    }

    &,
    * {
      cursor: pointer;
    }

    &:hover {
      border-radius: 20px;
      border: 0.062rem solid #a8a8a8;
    }

    &[aria-selected='true'] {
      background-color: #dedede;
      border-radius: 20px;
      border: 0.062rem solid #a8a8a8;

      * {
        color: black;
      }
    }

    ${isPhoneScreen && css`
        flex-direction: column;
        min-width: 52px;
        min-height: 52px;
        padding: 8px;
        gap: 4px;
      `}
  `);

// HORIZONTAL TOOLBAR > TEXT LABEL
const StyledToolsBarItemButtonLabel = styled(Label$6)(({
  theme,
  isPhoneScreen
}) => css`
    color: ${theme.palette[Color.TextPrimary]};
    font-size: 0.6875rem;
    line-height: 14px;
    font-family: 'Open Sans', sans-serif;
    letter-spacing: 0.04rem;
    ${isPhoneScreen && theme.typography.font[FontVariant.LabelExtraSmallUp]};
  `);
const StyledToolsBarItemOptionsWrapper = styled.div`
  position: relative;
  width: 100%;
  transition: max-height 100ms ease-in-out;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 24px;

  ${props => `
      max-height: ${props.hasChildren ? "56px" : 0};
      margin: ${props.hasChildren ? "0 auto 8px" : 0};
    `};

  ${({
  isPhoneScreen
}) => isPhoneScreen && `
    max-height: unset;
    flex-direction: column;
    padding: 0 12px 8px 12px;
    gap: 8px;
    margin: 0;
  `}
`;

/** External Dependencies */
const ToolsBarItemButton = ({
  id,
  label,
  onClick,
  Icon,
  isSelected,
  children,
  className
}) => {
  const isPhoneScreen = usePhoneScreen(320);
  const handleClick = e => {
    onClick(id, e);
  };
  return /*#__PURE__*/React__default.createElement(StyledToolsBarItemButton, {
    className: className,
    onClick: handleClick,
    "aria-selected": isSelected,
    isPhoneScreen: isPhoneScreen
  }, /*#__PURE__*/React__default.createElement(Icon, {
    size: isPhoneScreen ? 20 : 16
  }), label && /*#__PURE__*/React__default.createElement(StyledToolsBarItemButtonLabel, {
    isPhoneScreen: isPhoneScreen
  }, label), children);
};
ToolsBarItemButton.defaultProps = {
  isSelected: false,
  id: undefined,
  children: null,
  label: ''
};
ToolsBarItemButton.propTypes = {
  children: PropTypes.node,
  id: PropTypes.string,
  label: PropTypes.string,
  onClick: PropTypes.func.isRequired,
  className: PropTypes.string.isRequired,
  isSelected: PropTypes.bool,
  Icon: PropTypes.oneOfType([PropTypes.node, PropTypes.func, PropTypes.instanceOf(Object)]).isRequired
};
var ToolsBarItemButton$1 = /*#__PURE__*/memo(ToolsBarItemButton);

/** External Dependencies */
const Brightness = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React__default.createElement(ToolsBarItemButton$1, {
  className: "FIE_brightness-tool-button",
  id: TOOLS_IDS.BRIGHTNESS,
  label: t('brightnessTool'),
  Icon: Brightness$1,
  onClick: selectTool,
  isSelected: isSelected
});
Brightness.defaultProps = {
  isSelected: false
};
Brightness.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

function useControlled(_ref) {
  var controlled = _ref.controlled,
    defaultProp = _ref["default"];
  // isControlled is ignored in the hook dependency lists as it should never change.
  var _useRef = useRef(controlled !== undefined),
    isControlled = _useRef.current;
  var _useState = useState(defaultProp),
    _useState2 = _slicedToArray(_useState, 2),
    valueState = _useState2[0],
    setValue = _useState2[1];
  var value = isControlled ? controlled : valueState;
  var setValueIfUncontrolled = useCallback(function (newValue) {
    if (!isControlled) {
      setValue(newValue);
    }
  }, []);
  return [value, setValueIfUncontrolled];
}

var useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;
var useEnhancedEffect$1 = useEnhancedEffect;

/**
 * https://github.com/facebook/react/issues/14099#issuecomment-440013892
 */
function useEventCallback(fn) {
  var ref = React.useRef(fn);
  useEnhancedEffect$1(function () {
    ref.current = fn;
  });
  return React.useCallback(function () {
    return (
      // @ts-expect-error hide `this`
      // tslint:disable-next-line:ban-comma-operator
      (ref.current).apply(void 0, arguments)
    );
  }, []);
}

var LabelTooltip$1 = {
  Auto: 'auto',
  On: 'on',
  Off: 'off'
};

var baseClassName$s = 'Slider';
var Slider$3 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$s, 'root')
}).withConfig({
  componentId: "sc-jjink6-0"
})(function (_ref) {
  var theme = _ref.theme,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled;
  return css(["display:inline-block;border-radius:2px;position:relative;cursor:pointer;touch-action:none;color:", ";height:4px;width:100%;padding:12px 0;"], disabled ? theme.palette[Color.AccentPrimaryDisabled] : theme.palette[Color.BorderActiveBottom]);
});
var Rail = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$s, 'rail')
}).withConfig({
  componentId: "sc-jjink6-1"
})(["display:block;position:absolute;border-radius:inherit;background-color:currentColor;opacity:0.38;width:100%;height:inherit;top:50%;transform:translateY(-50%);"]);
var Track = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$s, 'Track')
}).withConfig({
  componentId: "sc-jjink6-2"
})(["display:block;position:absolute;border-radius:inherit;border:1px solid currentColor;background-color:currentColor;height:inherit;top:50%;transform:translateY(-50%);"]);
var Thumb = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$s, 'thumb')
}).withConfig({
  componentId: "sc-jjink6-3"
})(["position:absolute;width:15px;height:15px;box-sizing:border-box;border-radius:50%;outline:0;background-color:currentColor;display:flex;align-items:center;justify-content:center;top:50%;transform:translate(-50%,-50%);& > input{border:0px;clip:rect(0px,0px,0px,0px);height:100%;margin:-1px;overflow:hidden;padding:0px;position:absolute;white-space:nowrap;width:100%;direction:ltr;}&::before{position:absolute;content:'';border-radius:inherit;width:100%;height:100%;box-shadow:0px 3px 1px -2px rgb(0 0 0 / 20%),0px 2px 2px 0px rgb(0 0 0 / 14%),0px 1px 5px 0px rgb(0 0 0 / 12%);}&::after{position:absolute;content:'';border-radius:50%;width:42px;height:42px;top:50%;left:50%;transform:translate(-50%,-50%);}"]);
var LabelTooltip = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$s, 'label')
}).withConfig({
  componentId: "sc-jjink6-4"
})(function (_ref2) {
  var theme = _ref2.theme,
    _ref2$open = _ref2.open,
    open = _ref2$open === void 0 ? false : _ref2$open,
    _ref2$disabled = _ref2.disabled,
    disabled = _ref2$disabled === void 0 ? false : _ref2$disabled;
  return css(["display:flex;align-items:center;justify-content:center;padding:6px 6px;border-radius:2px;position:absolute;top:-10px;font-size:10px;z-index:1;white-space:nowrap;transition:transform 150ms cubic-bezier(0.4,0,0.2,1) 0ms;transform-origin:bottom center;transform:", ";background-color:", ";color:#fff;cursor:pointer;transition:all 100ms ease-out;&::before{position:absolute;content:'';background-color:inherit;width:8px;height:8px;bottom:0px;left:50%;transform:translate(-50%,50%) rotate(45deg);}"], open ? 'translateY(-100%) scale(1)' : 'translateY(-100%) scale(0)', disabled ? theme.palette[Color.AccentPrimaryDisabled] : theme.palette[Color.LinkStateless]);
});
var SliderAnnotation = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$s, 'annotation')
}).withConfig({
  componentId: "sc-jjink6-5"
})(function (_ref3) {
  var theme = _ref3.theme;
  return css(["display:flex;justify-content:space-between;margin-top:12px;color:", ";"], theme.palette[Color.TextSecondary]);
});
var Styled$M = applyDisplayNames({
  Slider: Slider$3,
  Rail: Rail,
  Track: Track,
  Thumb: Thumb,
  SliderAnnotation: SliderAnnotation,
  LabelTooltip: LabelTooltip
});
var Styled$N = Styled$M;

var _excluded$1O = ["defaultValue", "disabled", "disableSwap", "hideTrack", "hideAnnotation", "value", "min", "max", "onChange", "onMouseDown", "onMouseUp", "step", "labelTooltip", "annotation", "components", "componentsProps"];
function ownKeys$b(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$b(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$b(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$b(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;
var dataIndex = 'data-index';
var Slider$1 = intrinsicComponent$1(function (_ref, ref) {
  var defaultValue = _ref.defaultValue,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$disableSwap = _ref.disableSwap,
    disableSwap = _ref$disableSwap === void 0 ? false : _ref$disableSwap,
    _ref$hideTrack = _ref.hideTrack,
    hideTrack = _ref$hideTrack === void 0 ? false : _ref$hideTrack,
    _ref$hideAnnotation = _ref.hideAnnotation,
    hideAnnotation = _ref$hideAnnotation === void 0 ? false : _ref$hideAnnotation,
    valueProp = _ref.value,
    _ref$min = _ref.min,
    min = _ref$min === void 0 ? 0 : _ref$min,
    _ref$max = _ref.max,
    max = _ref$max === void 0 ? 100 : _ref$max,
    onChange = _ref.onChange,
    onMouseDown = _ref.onMouseDown,
    onMouseUp = _ref.onMouseUp,
    _ref$step = _ref.step,
    step = _ref$step === void 0 ? 1 : _ref$step,
    _ref$labelTooltip = _ref.labelTooltip,
    labelTooltip = _ref$labelTooltip === void 0 ? LabelTooltip$1.Off : _ref$labelTooltip,
    _ref$annotation = _ref.annotation,
    annotation = _ref$annotation === void 0 ? 'MB' : _ref$annotation,
    _ref$components = _ref.components,
    components = _ref$components === void 0 ? {} : _ref$components,
    _ref$componentsProps = _ref.componentsProps,
    componentsProps = _ref$componentsProps === void 0 ? {} : _ref$componentsProps,
    rest = _objectWithoutProperties(_ref, _excluded$1O);
  var _useState = useState(-1),
    _useState2 = _slicedToArray(_useState, 2),
    active = _useState2[0],
    setActive = _useState2[1];
  var _useState3 = useState(-1),
    _useState4 = _slicedToArray(_useState3, 2),
    open = _useState4[0],
    setOpen = _useState4[1];
  var _useState5 = useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    dragging = _useState6[0],
    setDragging = _useState6[1];
  var moveCount = useRef(0);
  var previousIndex = useRef(0);
  var touchId = useRef();
  var sliderRef = useRef(null);
  var handleRef = useForkRef(ref, sliderRef);
  var _useControlled = useControlled({
      controlled: valueProp,
      "default": defaultValue !== null && defaultValue !== void 0 ? defaultValue : min
    }),
    _useControlled2 = _slicedToArray(_useControlled, 2),
    valueDerived = _useControlled2[0],
    setValueState = _useControlled2[1];
  var axis = 'horizontal';
  var range = Array.isArray(valueDerived);
  var values = range ? valueDerived.slice().sort(asc) : [valueDerived];
  var getFingerNewValue = function getFingerNewValue(_ref2) {
    var finger = _ref2.finger,
      _ref2$move = _ref2.move,
      move = _ref2$move === void 0 ? false : _ref2$move,
      values2 = _ref2.values;
    var slider = sliderRef.current;
    if (slider) {
      var _slider$getBoundingCl = slider.getBoundingClientRect(),
        width = _slider$getBoundingCl.width,
        height = _slider$getBoundingCl.height,
        bottom = _slider$getBoundingCl.bottom,
        left = _slider$getBoundingCl.left;
      var percent;
      if (axis.indexOf('vertical') === 0) {
        percent = (bottom - finger.y) / height;
      } else {
        percent = (finger.x - left) / width;
      }
      if (axis.includes('-reverse')) {
        percent = 1 - percent;
      }
      var newValue;
      newValue = percentToValue(percent, min, max);
      if (step) {
        newValue = roundValueToStep(newValue, step, min);
      }
      newValue = clamp(newValue, min, max);
      var activeIndex = 0;
      if (range) {
        if (!move) {
          activeIndex = findClosest(values2, newValue);
        } else {
          activeIndex = previousIndex.current;
        }
        if (disableSwap) {
          newValue = clamp(newValue, values2[activeIndex - 1] || -Infinity, values2[activeIndex + 1] || Infinity);
        }
        var previousValue = newValue;
        newValue = setValueIndex({
          values: values2,
          newValue: newValue,
          index: activeIndex
        });
        if (!(disableSwap && move) && Array.isArray(newValue)) {
          activeIndex = newValue.indexOf(previousValue);
          previousIndex.current = activeIndex;
        }
      }
      return {
        newValue: newValue,
        activeIndex: activeIndex
      };
    }
    return null;
  };
  var handleChange = function handleChange(event, value, thumbIndex) {
    if (onChange) {
      onChange(event, value, thumbIndex);
    }
  };
  var handleHiddenInputChange = function handleHiddenInputChange(event) {
    var index = Number(event.currentTarget.getAttribute(dataIndex));
    var newValue = event.target.valueAsNumber;
    if (range) {
      if (disableSwap) {
        newValue = clamp(newValue, values[index - 1] || -Infinity, values[index + 1] || Infinity);
      }
      var previousValue = newValue;
      newValue = setValueIndex({
        values: values,
        newValue: newValue,
        index: index
      });
      var activeIndex = index;
      if (!disableSwap) {
        activeIndex = newValue.indexOf(previousValue);
      }
      focusThumb({
        sliderRef: sliderRef,
        activeIndex: activeIndex
      });
    }
    setValueState(newValue);
    handleChange(event, newValue, index);
    if (onMouseUp) {
      onMouseUp(event);
    }
  };
  var handleTouchMove = useEventCallback(function (nativeEvent) {
    var finger = trackFinger(nativeEvent, touchId);
    if (!finger) {
      return;
    }
    moveCount.current += 1;
    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {
      handleTouchEnd(nativeEvent);
      return;
    }
    var _ref3 = getFingerNewValue({
        finger: finger,
        move: true,
        values: values
      }),
      newValue = _ref3.newValue,
      activeIndex = _ref3.activeIndex;
    focusThumb({
      sliderRef: sliderRef,
      activeIndex: activeIndex,
      setActive: setActive
    });
    setValueState(newValue);
    if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {
      setDragging(true);
    }
    handleChange(nativeEvent, newValue, activeIndex);
  });
  var handleTouchEnd = useEventCallback(function (nativeEvent) {
    var finger = trackFinger(nativeEvent, touchId);
    setDragging(false);
    if (!finger) {
      return;
    }
    setActive(-1);
    if (nativeEvent.type === 'touchend') {
      setOpen(-1);
    }
    if (onMouseUp) {
      onMouseUp(nativeEvent);
    }
    touchId.current = undefined;
    stopListening();
  });
  var handleTouchStart = useEventCallback(function (nativeEvent) {
    var touch = nativeEvent.changedTouches[0];
    if (touch != null) {
      touchId.current = touch.identifier;
    }
    var finger = trackFinger(nativeEvent, touchId);
    var _ref4 = getFingerNewValue({
        finger: finger,
        values: values
      }),
      newValue = _ref4.newValue,
      activeIndex = _ref4.activeIndex;
    focusThumb({
      sliderRef: sliderRef,
      activeIndex: activeIndex,
      setActive: setActive
    });
    setValueState(newValue);
    handleChange(nativeEvent, newValue, activeIndex);
    moveCount.current = 0;
    var doc = ownerDocument(sliderRef.current);
    doc.addEventListener('touchmove', handleTouchMove);
    doc.addEventListener('touchend', handleTouchEnd);
  });
  var handleMouseOver = useEventCallback(function (event) {
    var index = Number(event.currentTarget.getAttribute(dataIndex));
    setOpen(index);
  });
  var handleMouseLeave = useEventCallback(function () {
    setOpen(-1);
  });
  var handleMouseDown = useEventCallback(function (event) {
    if (!disabled) {
      if (onMouseDown) {
        onMouseDown(event);
      }
      if (event.button !== 0) {
        return;
      }

      // Avoid text selection
      event.preventDefault();
      var finger = trackFinger(event, touchId);
      var _ref5 = getFingerNewValue({
          finger: finger,
          values: values
        }),
        newValue = _ref5.newValue,
        activeIndex = _ref5.activeIndex;
      focusThumb({
        sliderRef: sliderRef,
        activeIndex: activeIndex,
        setActive: setActive
      });
      setValueState(newValue);
      handleChange(event, newValue, activeIndex);
      moveCount.current = 0;
      var doc = ownerDocument(sliderRef.current);
      doc.addEventListener('mousemove', handleTouchMove);
      doc.addEventListener('mouseup', handleTouchEnd);
    } else {
      // Avoid text selection
      event.preventDefault();
    }
  });
  var stopListening = useCallback(function () {
    var doc = ownerDocument(sliderRef.current);
    doc.removeEventListener('mousemove', handleTouchMove);
    doc.removeEventListener('mouseup', handleTouchEnd);
    doc.removeEventListener('touchmove', handleTouchMove);
    doc.removeEventListener('touchend', handleTouchEnd);
  }, [handleTouchEnd, handleTouchMove]);
  useEffect(function () {
    var slider = sliderRef.current;
    if (slider) {
      return function () {
        stopListening();
      };
    }
  }, [stopListening, handleTouchStart]);
  useEffect(function () {
    if (disabled) {
      stopListening();
    }
  }, [disabled, stopListening]);
  if (disabled && active !== -1) {
    setActive(-1);
  }
  var trackOffset = valueToPercent(range ? values[0] : min, min, max);
  var trackLeap = valueToPercent(values[values.length - 1], min, max) - trackOffset;
  var trackStyle = _objectSpread$b(_objectSpread$b({}, axisProps[axis].offset(trackOffset)), axisProps[axis].leap(trackLeap));
  var railProps = componentsProps.rail;
  var Rail = typeof components.Rail === 'function' ? /*#__PURE__*/React__default.createElement(components.Rail, _extends({}, railProps, {
    style: _objectSpread$b({}, railProps === null || railProps === void 0 ? void 0 : railProps.style)
  })) : /*#__PURE__*/React__default.createElement(Styled$N.Rail, _extends({}, railProps, {
    style: _objectSpread$b({}, railProps === null || railProps === void 0 ? void 0 : railProps.style)
  }));
  var trackProps = componentsProps.track;
  var Track = !hideTrack && (typeof components.Track === 'function' ? /*#__PURE__*/React__default.createElement(components.Track, _extends({}, trackProps, {
    style: _objectSpread$b(_objectSpread$b({}, trackStyle), trackProps === null || trackProps === void 0 ? void 0 : trackProps.style)
  })) : /*#__PURE__*/React__default.createElement(Styled$N.Track, _extends({}, trackProps, {
    style: _objectSpread$b(_objectSpread$b({}, trackStyle), trackProps === null || trackProps === void 0 ? void 0 : trackProps.style)
  })));
  var thumbProps = componentsProps.thumb;
  var Thumb = components.Thumb || Styled$N.Thumb;
  var LabelTooltipComponent = components.LabelTooltip || Styled$N.LabelTooltip;
  var labelTooltipProps = componentsProps.labelTooltip;
  var annotationText = annotation ? " ".concat(annotation) : '';
  return /*#__PURE__*/React__default.createElement(Styled$N.Slider, _extends({
    ref: handleRef,
    disabled: disabled,
    onTouchStart: handleTouchStart,
    onMouseDown: handleMouseDown
  }, rest), Rail, Track, values.map(function (value, index) {
    var percent = valueToPercent(value, min, max);
    var style = axisProps[axis].offset(percent);
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, {
      key: index
    }, /*#__PURE__*/React__default.createElement(Thumb, _extends({
      "data-index": index,
      onMouseOver: handleMouseOver,
      onMouseLeave: handleMouseLeave
    }, thumbProps, {
      style: _objectSpread$b(_objectSpread$b({}, style), {}, {
        pointerEvents: disableSwap && active !== index ? 'none' : undefined
      }, thumbProps === null || thumbProps === void 0 ? void 0 : thumbProps.style)
    }), /*#__PURE__*/React__default.createElement("input", {
      "data-index": index,
      type: "range",
      min: min,
      max: max,
      value: values[index],
      step: step,
      disabled: disabled,
      onChange: handleHiddenInputChange
    }), /*#__PURE__*/React__default.createElement(LabelTooltipComponent, {
      open: (open === index || active === index || labelTooltip === 'on') && labelTooltip !== 'off',
      disabled: disabled,
      style: _objectSpread$b({}, labelTooltipProps === null || labelTooltipProps === void 0 ? void 0 : labelTooltipProps.style)
    }, values[index], annotationText)));
  }), !hideAnnotation && /*#__PURE__*/React__default.createElement(Styled$N.SliderAnnotation, null, /*#__PURE__*/React__default.createElement("span", null, min, annotationText), /*#__PURE__*/React__default.createElement("span", null, max, annotationText)));
});
var Slider$2 = Slider$1;

/** External Dependencies */
const StyledSlider = styled(Slider$2)`
  width: ${({
  width
}) => width || '104px'};
  max-width: ${({
  width
}) => width || '104px'};
  user-select: none;
  padding: 0;
  margin-bottom: ${({
  noMargin
}) => noMargin ? '' : '16px'};
  font-size: 12px !important;
  .SfxSlider-thumb {
    background-color: black;
  }

  .SfxSlider-Track {
    height: 2px;
    color: black;
  }

  .SfxSlider-rail {
    height: 2px;
    background-color: ${({
  theme: {
    palette
  }
}) => palette[Color.BordersItem]};
  }
`;

const Slider = ({
  onChange,
  ...props
}) => {
  return /*#__PURE__*/React__default.createElement(StyledSlider, _extends$1({
    annotation: "",
    onChange: (_e, val) => onChange ? onChange(val) : undefined,
    hideAnnotation: true,
    labelTooltip: "auto"
  }, props));
};
Slider.propTypes = {
  onChange: PropTypes.func.isRequired
};

var _excluded$1N = ["color", "size"];
var ArrowBottom = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1N);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 11 12",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M10.8468 3.13984C11.0457 3.33138 11.0517 3.64791 10.8602 3.84682L6.04534 8.84682C5.95332 8.94238 5.82709 8.99746 5.69445 8.99991C5.5618 9.00237 5.43362 8.95201 5.33812 8.85992L0.152931 3.85992C-0.0458479 3.66824 -0.0516033 3.35171 0.140078 3.15293C0.331758 2.95415 0.648288 2.9484 0.847067 3.14008L5.67208 7.79277L10.1398 3.15318C10.3314 2.95427 10.6479 2.9483 10.8468 3.13984Z",
    fill: color
  }));
});
var ArrowBottom$1 = ArrowBottom;

var Position$3 = {
  Left: 'left',
  Right: 'right',
  Top: 'top',
  Bottom: 'bottom'
};

var ButtonColor = {
  Primary: 'primary',
  Secondary: 'secondary',
  Basic: 'basic',
  LinkPrimary: 'link-primary',
  LinkSecondary: 'link-secondary',
  LinkBasicPrimary: 'link-basic-primary',
  LinkBasicSecondary: 'link-basic-secondary',
  ErrorPrimary: 'error-primary',
  ErrorSecondary: 'error-secondary',
  ErrorBasic: 'error-basic',
  WarningPrimary: 'warning-primary',
  WarningSecondary: 'warning-secondary',
  WarningBasic: 'warning-basic'
};

var IconButtonColor = {
  Primary: 'primary',
  Secondary: 'secondary',
  Basic: 'basic'
};

var ButtonSize = {
  Xs: 'xs',
  Sm: 'sm',
  Md: 'md',
  Lg: 'lg'
};

var InputSize = {
  Sm: 'sm',
  Md: 'md'
};

var Type$2 = {
  Left: 'left',
  Right: 'right',
  Top: 'top',
  Bottom: 'bottom'
};

var typeArrowTickMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Type$2.Right, css(["svg{transform:rotate(-90deg);transition:transform 150ms ease-out;}"])), Type$2.Left, css(["svg{transform:rotate(90deg);transition:transform 150ms ease-out;}"])), Type$2.Top, css(["svg{transform:rotate(180deg);transition:transform 150ms ease-out;}"])), Type$2.Bottom, css(["svg{transform:rotate(0);transition:transform 150ms ease-out;}"]));

var baseClassName$r = 'ArrowTick';
var ArrowTick$2 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$r, 'root')
}).withConfig({
  componentId: "sc-tlypde-0"
})(function (_ref) {
  var _ref$type = _ref.type,
    type = _ref$type === void 0 ? Position$3.Right : _ref$type;
  return css(["display:inline-flex;", ""], typeArrowTickMixin[type]);
});
var Styled$L = applyDisplayNames({
  ArrowTick: ArrowTick$2
});
var StyledArrowTick = Styled$L;

var _excluded$1M = ["type", "IconProps"];
var ArrowTick = intrinsicComponent$1(function (_ref, ref) {
  var _ref$type = _ref.type,
    type = _ref$type === void 0 ? Position$3.Right : _ref$type,
    IconPropsData = _ref.IconProps,
    rest = _objectWithoutProperties(_ref, _excluded$1M);
  return /*#__PURE__*/React__default.createElement(StyledArrowTick.ArrowTick, _extends({}, rest, {
    type: type,
    ref: ref
  }), /*#__PURE__*/React__default.createElement(ArrowBottom$1, IconPropsData));
});
var ArrowTick$1 = ArrowTick;

var baseClassName$q = 'AccordionHeader';
var Icon$5 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$q, 'icon')
}).withConfig({
  componentId: "sc-1dtjsgt-0"
})(function () {
  return css(["display:inline-flex;padding-left:8px;"]);
});
var Label$4 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$q, 'label')
}).withConfig({
  componentId: "sc-1dtjsgt-1"
})(function (_ref) {
  var theme = _ref.theme;
  return css(["", ""], theme.typography.font[FontVariant.ButtonSm]);
});
var Header$1 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$q, 'root')
}).withConfig({
  componentId: "sc-1dtjsgt-2"
})(function (_ref2) {
  var theme = _ref2.theme,
    $fullWidth = _ref2.$fullWidth;
  return css(["display:inline-flex;align-items:center;justify-content:space-between;box-sizing:border-box;cursor:pointer;width:", ";color:", ";user-select:none;"], $fullWidth ? '100%' : 'auto', theme.palette[Color.LinkPrimary]);
});
var Wrapper$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$q, 'wrapper')
}).withConfig({
  componentId: "sc-1dtjsgt-3"
})(function (_ref3) {
  var theme = _ref3.theme;
  return css(["color:", ";"], theme.palette[Color.LinkPrimary]);
});
var Styled$K = applyDisplayNames({
  Header: Header$1,
  Wrapper: Wrapper$2,
  Icon: Icon$5,
  Label: Label$4
});
var AccordionHeaderStyled = Styled$K;

var _excluded$1L = ["expanded", "label", "onChange", "onClick", "onContextMenu", "hideIcon", "fullWidth", "iconProps"];
function ownKeys$a(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$a(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$a(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$a(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var AccordionHeader = intrinsicComponent$1(function (_ref, ref) {
  var _ref$expanded = _ref.expanded,
    expanded = _ref$expanded === void 0 ? false : _ref$expanded,
    label = _ref.label,
    onChange = _ref.onChange,
    _onClick = _ref.onClick,
    onContextMenu = _ref.onContextMenu,
    _ref$hideIcon = _ref.hideIcon,
    hideIcon = _ref$hideIcon === void 0 ? false : _ref$hideIcon,
    _ref$fullWidth = _ref.fullWidth,
    fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
    iconPropsData = _ref.iconProps,
    rest = _objectWithoutProperties(_ref, _excluded$1L);
  return /*#__PURE__*/React__default.createElement(AccordionHeaderStyled.Header, _extends({
    ref: ref,
    onClick: function onClick(event) {
      if (typeof onChange === 'function') {
        onChange(!expanded);
      }
      if (typeof _onClick === 'function') {
        _onClick(event);
      }
    },
    $fullWidth: fullWidth
  }, rest), /*#__PURE__*/React__default.createElement(AccordionHeaderStyled.Label, {
    onContextMenu: onContextMenu
  }, label), !hideIcon && /*#__PURE__*/React__default.createElement(AccordionHeaderStyled.Icon, {
    onContextMenu: onContextMenu
  }, /*#__PURE__*/React__default.createElement(ArrowTick$1, {
    type: expanded ? Position$3.Top : Position$3.Bottom,
    IconProps: _objectSpread$a({
      size: 11
    }, iconPropsData)
  })));
});
var AccordionHeader$1 = AccordionHeader;

var baseClassName$p = 'AccordionDetails';
var AccordionDetails$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$p, 'root')
}).withConfig({
  componentId: "sc-1wr6wpr-0"
})(["margin:16px 0;"]);
var Styled$J = applyDisplayNames({
  AccordionDetails: AccordionDetails$2
});
var AccordionDetailsStyled = Styled$J;

var _excluded$1K = ["expanded", "children"];
var AccordionDetails = intrinsicComponent$1(function (_ref, ref) {
  var _ref$expanded = _ref.expanded,
    expanded = _ref$expanded === void 0 ? false : _ref$expanded,
    children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded$1K);
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, expanded && /*#__PURE__*/React__default.createElement(AccordionDetailsStyled.AccordionDetails, _extends({
    ref: ref
  }, rest), children));
});
var AccordionDetails$1 = AccordionDetails;

var baseClassName$o = 'Accordion';
var Accordion$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$o, 'root')
}).withConfig({
  componentId: "sc-1g4tz7s-0"
})([""]);
var Styled$H = applyDisplayNames({
  Accordion: Accordion$2
});
var Styled$I = Styled$H;

var _excluded$1J = ["label", "expanded", "children", "detailStyle", "headerStyle", "fullWidth", "iconProps", "onClick", "onChange", "onContextMenu", "hideIcon"];
function ownKeys$9(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$9(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$9(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$9(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var Accordion = intrinsicComponent$1(function (_ref, ref) {
  var label = _ref.label,
    _ref$expanded = _ref.expanded,
    expanded = _ref$expanded === void 0 ? false : _ref$expanded,
    children = _ref.children,
    detailStyle = _ref.detailStyle,
    headerStyle = _ref.headerStyle,
    fullWidth = _ref.fullWidth,
    iconPropsData = _ref.iconProps,
    onClick = _ref.onClick,
    onChange = _ref.onChange,
    onContextMenu = _ref.onContextMenu,
    _ref$hideIcon = _ref.hideIcon,
    hideIcon = _ref$hideIcon === void 0 ? false : _ref$hideIcon,
    rest = _objectWithoutProperties(_ref, _excluded$1J);
  var handleOnClick = function handleOnClick(event) {
    if (typeof onChange === 'function') {
      onChange(!expanded, event);
    }
    if (typeof onClick === 'function') {
      onClick(event);
    }
  };
  return /*#__PURE__*/React__default.createElement(Styled$I.Accordion, _extends({
    ref: ref
  }, rest), /*#__PURE__*/React__default.createElement(AccordionHeader$1, {
    label: label,
    expanded: expanded,
    style: _objectSpread$9({}, headerStyle),
    hideIcon: hideIcon,
    onClick: handleOnClick,
    onContextMenu: onContextMenu,
    iconProps: iconPropsData,
    fullWidth: fullWidth
  }), /*#__PURE__*/React__default.createElement(AccordionDetails$1, {
    expanded: expanded,
    style: _objectSpread$9({}, detailStyle)
  }, children));
});
var Accordion$1 = Accordion;

var _excluded$1I = ["stroke", "size"];
var Arrow$1 = intrinsicComponent(function (_ref, ref) {
  var _ref$stroke = _ref.stroke,
    stroke = _ref$stroke === void 0 ? 'currentColor' : _ref$stroke,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 10 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1I);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size * (51 / 56),
    height: size,
    viewBox: "0 0 51 56",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M12.2754 3L37.2754 27.0741L12.2754 53",
    stroke: stroke,
    strokeWidth: "5",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }));
});
var Arrow$2 = Arrow$1;

var _excluded$1H = ["color", "size"];
var Tick = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1H);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M12.9783 2.30184C12.7972 2.12074 12.586 2 12.3143 2C12.0728 2 11.8314 2.09055 11.6503 2.30184L4.73816 9.84779L2.29327 7.34254C2.11217 7.16143 1.8707 7.07088 1.62923 7.07088C1.38776 7.07088 1.14629 7.19162 0.995367 7.37272C0.663345 7.76511 0.663345 8.36879 1.02555 8.73099L4.13448 11.9003C4.31559 12.0814 4.52687 12.1719 4.76835 12.1719C5.00982 12.1719 5.25129 12.0814 5.43239 11.8701L12.9783 3.62993C13.3406 3.2979 13.3406 2.66404 12.9783 2.30184Z",
    fill: color
  }));
});

var _excluded$1G = ["color", "size"];
var CopyOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1G);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M2.33984 12.111V2.04761C2.33984 1.49532 2.78756 1.04761 3.33984 1.04761H10.8182C11.3705 1.04761 11.8182 1.49532 11.8182 2.04761V12.111C11.8182 12.6633 11.3705 13.111 10.8182 13.111H3.33984C2.78756 13.111 2.33984 12.6633 2.33984 12.111ZM3.33984 12.111V2.04761L10.8182 2.04761L10.8182 12.111L3.33984 12.111Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M13.66 4.97388C13.66 4.69774 13.4361 4.47388 13.16 4.47388C12.8838 4.47388 12.66 4.69774 12.66 4.97388V13.9523H5.40491C5.12876 13.9523 4.90491 14.1761 4.90491 14.4523C4.90491 14.7284 5.12876 14.9523 5.40491 14.9523H13.16C13.4361 14.9523 13.66 14.7284 13.66 14.4523V4.97388Z",
    fill: color
  }));
});
var CopyOutline$1 = CopyOutline;

var _excluded$1F = ["color", "size"];
var EyeOpen = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1F);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 32",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M25 31.625C8.64336 31.625 0.533984 17.3656 0.196875 16.759C-0.065625 16.2867 -0.065625 15.7129 0.196875 15.2406C0.533984 14.6344 8.64336 0.375 25 0.375C41.3566 0.375 49.466 14.6344 49.8031 15.241C50.0656 15.7133 50.0656 16.2871 49.8031 16.7594C49.466 17.3656 41.3566 31.625 25 31.625ZM3.40117 15.9977C5.25977 18.8145 12.557 28.5 25 28.5C37.4824 28.5 44.7473 18.8223 46.5988 16.0023C44.7402 13.1855 37.443 3.5 25 3.5C12.5176 3.5 5.25273 13.1777 3.40117 15.9977ZM25 25.375C19.8305 25.375 15.625 21.1695 15.625 16C15.625 10.8305 19.8305 6.625 25 6.625C30.1695 6.625 34.375 10.8305 34.375 16C34.375 21.1695 30.1695 25.375 25 25.375ZM25 9.75C21.5539 9.75 18.75 12.5539 18.75 16C18.75 19.4461 21.5539 22.25 25 22.25C28.4461 22.25 31.25 19.4461 31.25 16C31.25 12.5539 28.4461 9.75 25 9.75Z",
    fill: color
  }));
});
var EyeOpen$1 = EyeOpen;

var _excluded$1E = ["color", "size"];
var EyeClosed = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1E);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 44 44",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M36.2553 6.05501C36.5966 5.71376 37.1514 5.71376 37.4926 6.05501C37.8339 6.39626 37.8339 6.95103 37.4926 7.29228L32.3765 12.4084C38.3601 15.8067 42.6046 20.7607 42.7917 20.9825C43.0682 21.3097 43.0699 21.7874 42.7936 22.113C42.3893 22.5908 32.7818 33.7978 22.0001 33.7978C18.9909 33.7978 15.9678 33.1203 13.0065 31.7785L7.74272 37.0423C7.57292 37.2121 7.34897 37.2978 7.12495 37.2978C6.90092 37.2978 6.67698 37.212 6.50545 37.0423C6.1642 36.701 6.1642 36.1462 6.50545 35.805L17.0426 25.2678C17.0453 25.265 17.0481 25.2622 17.0509 25.2595C17.0531 25.2573 17.0553 25.2551 17.0575 25.2529L25.7063 16.6041C25.7081 16.6023 25.7098 16.6005 25.7116 16.5987C25.7134 16.5969 25.7152 16.5952 25.717 16.5934L30.2895 12.0208C30.3028 12.0067 30.3164 11.9931 30.3304 11.9799L36.2553 6.05501ZM31.0895 13.6954L27.5301 17.2548C28.4835 18.476 28.9998 19.9721 28.9998 21.5478C28.9998 25.4083 25.8603 28.5478 21.9999 28.5478C20.4242 28.5478 18.9281 28.0314 17.7069 27.078L14.3353 30.4497C16.8728 31.5113 19.445 32.0478 22 32.0478C30.6537 32.0478 38.863 23.8071 40.9489 21.5478C39.6267 20.1195 35.855 16.3016 31.0895 13.6954ZM18.9574 25.8276C19.8392 26.458 20.8929 26.7977 21.9999 26.7977C24.8943 26.7977 27.2499 24.4422 27.2499 21.5477C27.2499 20.4409 26.9092 19.3873 26.2793 18.5056L18.9574 25.8276Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M27.7418 10.3057C25.7504 9.63545 23.8184 9.29773 22.0001 9.29773C11.2183 9.29773 1.61084 20.5047 1.20659 20.9825C0.951064 21.2835 0.930064 21.721 1.15762 22.0482C1.27837 22.2215 4.17111 26.3287 9.18485 29.659C9.33358 29.7587 9.49985 29.806 9.66785 29.806C9.94963 29.806 10.2279 29.6695 10.3959 29.4122C10.6636 29.0115 10.5534 28.4672 10.1509 28.2012C6.46889 25.753 3.94889 22.7973 3.00561 21.595C5.01989 19.4075 13.2834 11.0478 22.0001 11.0478C23.6293 11.0478 25.3741 11.3558 27.1835 11.963C27.642 12.1275 28.139 11.8738 28.2913 11.4135C28.4453 10.955 28.2003 10.4598 27.7418 10.3057Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M23.2197 14.6685C22.8224 14.5985 22.4164 14.5477 22 14.5477C18.1395 14.5477 15 17.6872 15 21.5477C15 21.9642 15.0508 22.3702 15.1225 22.7674C15.1977 23.1909 15.567 23.4902 15.9817 23.4902C16.0325 23.4902 16.0832 23.4867 16.1357 23.4762C16.6099 23.3922 16.9285 22.9371 16.8445 22.4629C16.7902 22.1654 16.75 21.8627 16.75 21.5477C16.75 18.6532 19.1055 16.2977 22 16.2977C22.315 16.2977 22.6177 16.338 22.9152 16.3905C23.3807 16.485 23.8444 16.1559 23.9284 15.6817C24.0124 15.2075 23.694 14.7525 23.2197 14.6685Z",
    fill: color
  }));
});
var EyeClosed$1 = EyeClosed;

var _excluded$1D = ["color", "size"];
var Success = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1D);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 21 21",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M20.5 10.5001C20.5 16.023 16.0228 20.5001 10.5 20.5001C4.97714 20.5001 0.5 16.023 0.5 10.5001C0.5 4.97727 4.97714 0.500122 10.5 0.500122C16.0228 0.500122 20.5 4.97727 20.5 10.5001ZM7.88239 9.56904C8.00439 9.62145 8.11473 9.69763 8.20698 9.79314L9.49998 11.0861L12.793 7.79314C12.8852 7.69763 12.9956 7.62145 13.1176 7.56904C13.2396 7.51663 13.3708 7.48905 13.5036 7.48789C13.6363 7.48674 13.768 7.51204 13.8909 7.56232C14.0138 7.6126 14.1255 7.68686 14.2194 7.78075C14.3133 7.87464 14.3875 7.98629 14.4378 8.10919C14.4881 8.23208 14.5134 8.36376 14.5122 8.49654C14.5111 8.62932 14.4835 8.76054 14.4311 8.88255C14.3787 9.00455 14.3025 9.1149 14.207 9.20714L10.207 13.2071C10.0194 13.3946 9.76514 13.4999 9.49998 13.4999C9.23482 13.4999 8.98051 13.3946 8.79298 13.2071L6.79298 11.2071C6.69747 11.1149 6.62129 11.0046 6.56888 10.8825C6.51647 10.7605 6.48889 10.6293 6.48773 10.4965C6.48658 10.3638 6.51188 10.2321 6.56216 10.1092C6.61244 9.98629 6.6867 9.87464 6.78059 9.78075C6.87448 9.68686 6.98613 9.6126 7.10903 9.56232C7.23193 9.51204 7.3636 9.48674 7.49638 9.48789C7.62916 9.48905 7.76038 9.51663 7.88239 9.56904Z",
    fill: color
  }));
});
var Success$1 = Success;

var getInputBackgroundColor = function getInputBackgroundColor(readOnly, disabled) {
  if (readOnly || disabled) {
    return lightPalette[Color.BackgroundHover];
  }
  return lightPalette[Color.BackgroundStateless];
};
var getInputTextColor = function getInputTextColor(readOnly, disabled) {
  if (readOnly) {
    return lightPalette[Color.AccentPrimaryHover];
  }
  if (disabled) {
    return lightPalette[Color.TextPlaceholder];
  }
  return lightPalette[Color.TextPrimary];
};
var getInputBorderColor = function getInputBorderColor(readOnly, disabled) {
  if (readOnly) {
    return lightPalette[Color.BordersItem];
  }
  if (disabled) {
    return lightPalette[Color.BordersSecondary];
  }
  return lightPalette[Color.BorderPrimaryStateless];
};
var handleCopyIcon = function handleCopyIcon(value, setShowCopyMessage) {
  navigator.clipboard.writeText(value);
  setShowCopyMessage(true);
};

var Type$1 = {
  Text: 'text',
  Password: 'password'
};

var sizeInputMixin = _defineProperty(_defineProperty({}, InputSize.Sm, "\n    padding: 8px 12px;\n    height: 32px;\n  "), InputSize.Md, "\n    padding: 11px 16px;\n    height: 40px;\n  ");
_defineProperty(_defineProperty({}, InputSize.Sm, "\n    padding: 4px 6px 4px 12px;\n    max-height: 32px;\n  "), InputSize.Md, "\n    padding: 0px 4px 0px 16px;\n    max-height: 40px;\n  ");
var fontSizeInputMixin = _defineProperty(_defineProperty({}, InputSize.Sm, function (_ref) {
  var font = _ref.theme.typography.font;
  return css(["", ""], font[FontVariant.InputMd]);
}), InputSize.Md, function (_ref2) {
  var font = _ref2.theme.typography.font;
  return css(["", ""], font[FontVariant.InputLg]);
});
_defineProperty(_defineProperty({}, InputSize.Sm, function (_ref3) {
  var font = _ref3.theme.typography.font;
  return css(font[FontVariant.LabelSmall]);
}), InputSize.Md, function (_ref4) {
  var font = _ref4.theme.typography.font;
  return css(font[FontVariant.LabelMedium]);
});
var errorMixin$1 = function errorMixin(_ref5) {
  var palette = _ref5.theme.palette;
  return css(["background:", " !important;border:1px solid ", " !important;"], palette[Color.BackgroundSecondary], palette[Color.Error]);
};

var baseClassName$n = 'Input';
var Icon$4 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$n, 'Icon')
}).withConfig({
  componentId: "sc-150k0cz-0"
})(function (_ref) {
  var iconClickStart = _ref.iconClickStart,
    iconClickEnd = _ref.iconClickEnd,
    disabled = _ref.disabled,
    readOnly = _ref.readOnly,
    $iconType = _ref.$iconType,
    palette = _ref.theme.palette;
  return css(["display:flex;color:", ";cursor:", ";flex-shrink:0;", ""], palette[Color.IconsPrimary], (iconClickStart || iconClickEnd) && !disabled && !readOnly ? 'pointer' : 'default', $iconType === 'end' && css(["color:", ";"], palette[Color.IconsSecondary]));
});
var CopyIcon$1 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$n, 'CopyIcon')
}).withConfig({
  componentId: "sc-150k0cz-1"
})(function (_ref2) {
  var palette = _ref2.theme.palette;
  return css(["display:flex;color:", ";cursor:pointer;"], palette[Color.IconsSecondary]);
});
var PasswordIcon = /*#__PURE__*/styled(CopyIcon$1).attrs({
  className: generateClassNames(baseClassName$n, 'PasswordIcon')
}).withConfig({
  componentId: "sc-150k0cz-2"
})([""]);
var Container$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$n, 'Container')
}).withConfig({
  componentId: "sc-150k0cz-3"
})(function () {
  return css(["display:block;color:inherit;font-size:inherit;width:100%;min-width:0;margin:0;padding:0;border:0;background-color:transparent;outline:none;"]);
});
var Base$1 = /*#__PURE__*/styled.input.attrs({
  className: generateClassNames(baseClassName$n, 'Base')
}).withConfig({
  componentId: "sc-150k0cz-4"
})(function (_ref3) {
  var palette = _ref3.theme.palette,
    _ref3$$isEllipsis = _ref3.$isEllipsis,
    $isEllipsis = _ref3$$isEllipsis === void 0 ? false : _ref3$$isEllipsis;
  return css(["display:block;color:inherit;width:100%;min-width:fit-content;margin:0;padding:0;border:0;background-color:transparent;outline:none;", " &::placeholder{color:", ";}"], $isEllipsis && css(["text-overflow:ellipsis;"]), palette[Color.TextPlaceholder]);
});
var Input$3 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$n, 'root')
}).withConfig({
  componentId: "sc-150k0cz-5"
})(function (_ref4) {
  var _ref4$size = _ref4.size,
    size = _ref4$size === void 0 ? InputSize.Md : _ref4$size,
    _ref4$$error = _ref4.$error,
    $error = _ref4$$error === void 0 ? false : _ref4$$error,
    _ref4$$fullWidth = _ref4.$fullWidth,
    $fullWidth = _ref4$$fullWidth === void 0 ? false : _ref4$$fullWidth,
    _ref4$readOnly = _ref4.readOnly,
    readOnly = _ref4$readOnly === void 0 ? false : _ref4$readOnly,
    _ref4$disabled = _ref4.disabled,
    disabled = _ref4$disabled === void 0 ? false : _ref4$disabled,
    _ref4$isHovering = _ref4.isHovering,
    isHovering = _ref4$isHovering === void 0 ? false : _ref4$isHovering,
    _ref4$$isSelectedItem = _ref4.$isSelectedItems,
    $isSelectedItems = _ref4$$isSelectedItem === void 0 ? false : _ref4$$isSelectedItem,
    _ref4$hasInputActions = _ref4.hasInputActions,
    hasInputActions = _ref4$hasInputActions === void 0 ? false : _ref4$hasInputActions,
    theme = _ref4.theme;
  return css(["position:relative;display:flex;flex-direction:", ";", " box-sizing:border-box;column-gap:8px;cursor:text;transition:all 100ms ease-out;width:", ";pointer-events:", ";background-color:", ";border-radius:", ";border:1px solid ", ";color:", ";", " ", ";", "{", "}", " ", " &:hover{color:", ";}", ""], !hasInputActions ? 'row' : 'column', hasInputActions && 'align-items: stretch;', $fullWidth ? '100%' : '300px', disabled ? 'none' : 'auto', getInputBackgroundColor(readOnly, disabled), theme.shape.borderRadius[BorderRadiusSize.Md], getInputBorderColor(readOnly, disabled), disabled ? theme.palette[Color.TextPlaceholder] : theme.palette[Color.TextPrimary], sizeInputMixin[size], $isSelectedItems && "\n      height: fit-content;\n\n      ".concat(Base$1, " {\n        max-width: fit-content;\n        min-width: 20px;\n        flex-grow: 1;\n        width: 40px;\n      }\n    "), Base$1, fontSizeInputMixin[size], !readOnly && !disabled && css(["&:focus-within{background-color:", "!important;border:1px solid ", ";&:hover{border:1px solid ", ";", "{color:", ";}}}", " &:hover{background-color:", ";border:1px solid ", ";", "{color:", ";}}"], theme.palette[Color.BackgroundSecondary], theme.palette[Color.AccentStateless], theme.palette[Color.AccentStateless], Icon$4, theme.palette[Color.IconsPrimary], isHovering && css(["", "{color:", ";}"], Icon$4, theme.palette[Color.IconsPrimaryHover]), theme.palette[Color.BackgroundStateless], theme.palette[Color.BordersPrimaryHover], Icon$4, theme.palette[Color.IconsPrimaryHover]), disabled && css(["", "{color:", ";}"], Icon$4, theme.palette[Color.IconsMuted]), getInputTextColor(readOnly, disabled), $error && errorMixin$1);
});
var ClearIcon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$n, 'ClearIcon')
}).withConfig({
  componentId: "sc-150k0cz-6"
})(function (_ref5) {
  var palette = _ref5.theme.palette;
  return css(["display:flex;cursor:pointer;color:", ";"], palette[Color.IconsPrimary]);
});
var NotificationBox = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$n, 'NotificationBox')
}).withConfig({
  componentId: "sc-150k0cz-7"
})(function (_ref6) {
  var _ref6$size = _ref6.size,
    size = _ref6$size === void 0 ? InputSize.Md : _ref6$size,
    _ref6$isTextarea = _ref6.isTextarea,
    isTextarea = _ref6$isTextarea === void 0 ? false : _ref6$isTextarea,
    palette = _ref6.theme.palette;
  return css(["display:flex;position:absolute;align-items:center;max-height:34px;right:0px;padding:8px 12px;gap:6px;bottom:", ";box-shadow:0px 2px 6px ", ";background-color:", ";border-radius:4px;align-items:center;", ""], size === InputSize.Md ? '45px' : '35px', palette[Color.LargeShadow], palette[Color.BackgroundStateless], isTextarea && "\n      bottom: ".concat(size === InputSize.Md ? 27 : 22, "px;\n      right: ").concat(size === InputSize.Md ? 16 : 12, "px;\n    "));
});
var NotificationIcon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$n, 'NotificationIcon')
}).withConfig({
  componentId: "sc-150k0cz-8"
})(function (_ref7) {
  var palette = _ref7.theme.palette;
  return css(["display:flex;color:", ";"], palette[Color.IconsPrimary]);
});
var NotificationText = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$n, 'NotificationText')
}).withConfig({
  componentId: "sc-150k0cz-9"
})(function (_ref8) {
  var _ref8$theme = _ref8.theme,
    palette = _ref8$theme.palette,
    font = _ref8$theme.typography.font;
  return css(["display:flex;white-space:nowrap;", ";color:", ";"], font[FontVariant.TextSmall], palette[Color.TextPrimary]);
});
var FieldWrapper = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$n, 'fieldWrapper')
}).withConfig({
  componentId: "sc-150k0cz-10"
})(function (_ref9) {
  var $isSelectedItems = _ref9.$isSelectedItems;
  return css(["width:100%;height:100%;display:inline-flex;flex-wrap:wrap;gap:8px;max-height:120px;", ";::-webkit-scrollbar{display:none;}"], $isSelectedItems && "\n      overflow-y: auto;\n    ");
});
var InputActions = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$n, 'inputActions')
}).withConfig({
  componentId: "sc-150k0cz-11"
})(["padding-top:16px;width:100%;box-sizing:border-box;"]);
var InputContent = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$n, 'inputContent')
}).withConfig({
  componentId: "sc-150k0cz-12"
})(["display:flex;align-items:center;width:100%;column-gap:8px;box-sizing:border-box;"]);
var Styled$G = applyDisplayNames({
  Input: Input$3,
  Container: Container$2,
  Base: Base$1,
  Icon: Icon$4,
  CopyIcon: CopyIcon$1,
  PasswordIcon: PasswordIcon,
  ClearIcon: ClearIcon,
  NotificationBox: NotificationBox,
  NotificationIcon: NotificationIcon,
  NotificationText: NotificationText,
  FieldWrapper: FieldWrapper,
  InputActions: InputActions,
  InputContent: InputContent
});
var StyledInput = Styled$G;

var _excluded$1C = ["inputType", "children", "iconStart", "iconEnd", "iconChange", "inputActions", "clearIcon", "iconClickStart", "iconClickEnd", "clearIconClick", "size", "className", "style", "fullWidth", "readOnly", "disabled", "hideCopyIcon", "focusOnMount", "focusOnClick", "isEllipsis", "copyTextMessage", "copySuccessIcon", "error", "renderTags", "showPlaceholder", "InputProps"];
var getIconSize$5 = function getIconSize(sizeName, iconType) {
  switch (sizeName) {
    case InputSize.Md:
      return iconType === 'start' ? 15 : 14;
    case InputSize.Sm:
    default:
      return iconType === 'start' ? 13 : 10;
  }
};
var getPasswordIconSize = function getPasswordIconSize(sizeName) {
  switch (sizeName) {
    case InputSize.Md:
      return 16;
    case InputSize.Sm:
    default:
      return 14;
  }
};
var Input$1 = intrinsicComponent$1(function (_ref, ref) {
  var _rest$selectedItems;
  var inputType = _ref.inputType,
    children = _ref.children,
    iconStart = _ref.iconStart,
    iconEnd = _ref.iconEnd,
    iconChange = _ref.iconChange,
    inputActions = _ref.inputActions,
    clearIcon = _ref.clearIcon,
    iconClickStart = _ref.iconClickStart,
    iconClickEnd = _ref.iconClickEnd,
    clearIconClick = _ref.clearIconClick,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? InputSize.Md : _ref$size,
    className = _ref.className,
    style = _ref.style,
    _ref$fullWidth = _ref.fullWidth,
    fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
    _ref$readOnly = _ref.readOnly,
    readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$hideCopyIcon = _ref.hideCopyIcon,
    hideCopyIcon = _ref$hideCopyIcon === void 0 ? false : _ref$hideCopyIcon,
    _ref$focusOnMount = _ref.focusOnMount,
    focusOnMount = _ref$focusOnMount === void 0 ? false : _ref$focusOnMount,
    _ref$focusOnClick = _ref.focusOnClick,
    focusOnClick = _ref$focusOnClick === void 0 ? true : _ref$focusOnClick,
    _ref$isEllipsis = _ref.isEllipsis,
    isEllipsis = _ref$isEllipsis === void 0 ? false : _ref$isEllipsis,
    _ref$copyTextMessage = _ref.copyTextMessage,
    copyTextMessage = _ref$copyTextMessage === void 0 ? 'Copied!' : _ref$copyTextMessage,
    _ref$copySuccessIcon = _ref.copySuccessIcon,
    copySuccessIcon = _ref$copySuccessIcon === void 0 ? /*#__PURE__*/React__default.createElement(Success$1, {
      size: 16
    }) : _ref$copySuccessIcon,
    _ref$error = _ref.error,
    error = _ref$error === void 0 ? false : _ref$error,
    renderTags = _ref.renderTags,
    showPlaceholder = _ref.showPlaceholder,
    InputPropsData = _ref.InputProps,
    rest = _objectWithoutProperties(_ref, _excluded$1C);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isHovering = _useState2[0],
    setIsHovering = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    showCopyMessage = _useState4[0],
    setShowCopyMessage = _useState4[1];
  var _useState5 = useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    isVisible = _useState6[0],
    setIsVisible = _useState6[1];
  var inputRef = useRef(null);
  var isSelectedItems = (_rest$selectedItems = rest.selectedItems) === null || _rest$selectedItems === void 0 ? void 0 : _rest$selectedItems.length;
  var placeholder = rest.value || isSelectedItems ? '' : rest.placeholder;
  var showCopyIcon = isHovering && readOnly && rest.value.length > 0 && !hideCopyIcon;
  var handleFocus = function handleFocus() {
    var _inputRef$current;
    if (disabled || readOnly) return;
    showPlaceholder === null || showPlaceholder === void 0 || showPlaceholder(false);
    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.focus();
  };
  useEffect(function () {
    if (focusOnMount) {
      handleFocus();
    }
  }, []);
  useEffect(function () {
    setTimeout(function () {
      return setShowCopyMessage(false);
    }, 2000);
  }, [showCopyMessage]);
  var handleEntering = function handleEntering() {
    setTimeout(function () {
      setIsHovering(true);
    }, 150);
  };
  var handleLeaving = function handleLeaving() {
    setTimeout(function () {
      setIsHovering(false);
    }, 200);
  };
  var handleIconClick = function handleIconClick(event, type) {
    if (disabled || readOnly) return;
    if (focusOnClick) {
      handleFocus();
    }
    if (type === 'start') {
      if (iconClickStart) {
        iconClickStart(event);
      }
    } else if (type === 'end') {
      if (iconClickEnd) {
        iconClickEnd(event);
      }
    } else if (clearIconClick) {
      clearIconClick(event);
    }
  };
  var renderIcon = function renderIcon(_icon, type) {
    return _icon ? /*#__PURE__*/React__default.createElement(StyledInput.Icon, {
      onClick: function onClick(event) {
        return handleIconClick(event, type);
      },
      iconClickStart: iconClickStart,
      iconClickEnd: iconClickEnd,
      $iconType: type,
      disabled: disabled,
      readOnly: readOnly
    }, typeof _icon === 'function' ? _icon({
      size: getIconSize$5(size, type)
    }) : _icon) : undefined;
  };
  var renderClearIcon = function renderClearIcon() {
    return disabled || readOnly || !clearIcon ? undefined : /*#__PURE__*/React__default.createElement(StyledInput.ClearIcon, {
      onClick: function onClick(event) {
        return handleIconClick(event, 'clear');
      }
    }, typeof clearIcon === 'function' ? clearIcon({
      size: getIconSize$5(size, 'clear')
    }) : clearIcon);
  };
  var renderCopyIcon = function renderCopyIcon(icon) {
    return showCopyIcon ? /*#__PURE__*/React__default.createElement(StyledInput.CopyIcon, {
      onClick: function onClick() {
        return handleCopyIcon(rest.value, setShowCopyMessage);
      }
    }, icon) : undefined;
  };
  var toggleVisibility = function toggleVisibility(event) {
    event.stopPropagation();
    setIsVisible(!isVisible);
  };
  var renderPasswordIcon = function renderPasswordIcon() {
    return /*#__PURE__*/React__default.createElement(StyledInput.PasswordIcon, {
      onClick: function onClick(event) {
        return toggleVisibility(event);
      }
    }, isVisible ? /*#__PURE__*/React__default.createElement(EyeClosed$1, {
      size: getPasswordIconSize(size)
    }) : /*#__PURE__*/React__default.createElement(EyeOpen$1, {
      size: getPasswordIconSize(size)
    }));
  };
  var getInputType = function getInputType() {
    if (!inputType && rest !== null && rest !== void 0 && rest.type) {
      return rest === null || rest === void 0 ? void 0 : rest.type;
    }
    if (inputType === Type$1.Password && !isVisible) {
      return Type$1.Password;
    }
    return Type$1.Text;
  };
  var renderField = function renderField() {
    return /*#__PURE__*/React__default.createElement(StyledInput.FieldWrapper, {
      $isSelectedItems: Boolean(isSelectedItems)
    }, renderTags && renderTags(), /*#__PURE__*/React__default.createElement(StyledInput.Base, _extends({}, rest, {
      placeholder: placeholder,
      ref: inputRef,
      readOnly: Boolean(readOnly),
      type: getInputType(),
      $isEllipsis: isEllipsis
    })));
  };
  var renderCopyText = function renderCopyText() {
    return /*#__PURE__*/React__default.createElement(StyledInput.NotificationBox, {
      size: size
    }, /*#__PURE__*/React__default.createElement(StyledInput.NotificationIcon, null, copySuccessIcon), /*#__PURE__*/React__default.createElement(StyledInput.NotificationText, null, copyTextMessage));
  };
  var renderInputActions = function renderInputActions(inputActions) {
    if (!inputActions) return;
    return /*#__PURE__*/React__default.createElement(StyledInput.InputActions, null, inputActions);
  };
  return /*#__PURE__*/React__default.createElement(StyledInput.Input, _extends({
    onClick: focusOnClick ? handleFocus : undefined,
    ref: ref,
    size: size,
    onMouseEnter: handleEntering,
    onMouseLeave: handleLeaving,
    className: className,
    style: style,
    readOnly: readOnly,
    disabled: disabled,
    $fullWidth: Boolean(fullWidth),
    $error: error,
    clearIcon: clearIcon,
    isHovering: rest.isHovering,
    $isSelectedItems: Boolean(isSelectedItems || inputActions),
    hasInputActions: Boolean(inputActions)
  }, InputPropsData || {}), /*#__PURE__*/React__default.createElement(StyledInput.InputContent, null, renderIcon(iconStart, 'start'), renderField(), renderCopyIcon( /*#__PURE__*/React__default.createElement(CopyOutline$1, {
    size: getIconSize$5(size, 'copy')
  })), showCopyMessage && renderCopyText(), renderClearIcon(), inputType === Type$1.Password && renderPasswordIcon(), renderIcon(iconEnd, 'end'), renderIcon(iconChange, ''), children && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, children)), renderInputActions(inputActions));
});
var Input$2 = Input$1;

var Position$2 = {
  AutoStart: 'auto-start',
  Auto: 'auto',
  AutoEnd: 'auto-end',
  TopStart: 'top-start',
  Top: 'top',
  TopEnd: 'top-end',
  BottomStart: 'bottom-start',
  Bottom: 'bottom',
  BottomEnd: 'bottom-end',
  LeftStart: 'left-start',
  Left: 'left',
  LeftEnd: 'left-end',
  RightStart: 'right-start',
  Right: 'right',
  RightEnd: 'right-end'
};

var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [top, bottom, right, left];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []); // modifiers that need to read the DOM

var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers

var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

function getNodeName(element) {
  return element ? (element.nodeName || '').toLowerCase() : null;
}

function getWindow(node) {
  if (node == null) {
    return window;
  }

  if (node.toString() !== '[object Window]') {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }

  return node;
}

function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}

function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}

function isShadowRoot(node) {
  // IE 11 has no ShadowRoot
  if (typeof ShadowRoot === 'undefined') {
    return false;
  }

  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// and applies them to the HTMLElements such as popper and arrow

function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function (name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name]; // arrow is optional + virtual elements

    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    } // Flow doesn't support to extend this property, but it's the most
    // effective way to apply styles to an HTMLElement
    // $FlowFixMe[cannot-write]


    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function (name) {
      var value = attributes[name];

      if (value === false) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value === true ? '' : value);
      }
    });
  });
}

function effect$2(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: '0',
      top: '0',
      margin: '0'
    },
    arrow: {
      position: 'absolute'
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;

  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }

  return function () {
    Object.keys(state.elements).forEach(function (name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

      var style = styleProperties.reduce(function (style, property) {
        style[property] = '';
        return style;
      }, {}); // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }

      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
} // eslint-disable-next-line import/no-unused-modules


var applyStyles$1 = {
  name: 'applyStyles',
  enabled: true,
  phase: 'write',
  fn: applyStyles,
  effect: effect$2,
  requires: ['computeStyles']
};

function getBasePlacement(placement) {
  return placement.split('-')[0];
}

var max = Math.max;
var min = Math.min;
var round = Math.round;

function getUAString() {
  var uaData = navigator.userAgentData;

  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
    return uaData.brands.map(function (item) {
      return item.brand + "/" + item.version;
    }).join(' ');
  }

  return navigator.userAgent;
}

function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}

function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }

  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }

  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;

  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }

  var _ref = isElement(element) ? getWindow(element) : window,
      visualViewport = _ref.visualViewport;

  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width: width,
    height: height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x: x,
    y: y
  };
}

// means it doesn't take into account transforms.

function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
  // Fixes https://github.com/popperjs/popper-core/issues/1223

  var width = element.offsetWidth;
  var height = element.offsetHeight;

  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }

  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }

  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: width,
    height: height
  };
}

function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

  if (parent.contains(child)) {
    return true;
  } // then fallback to custom implementation with Shadow DOM support
  else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


  return false;
}

function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}

function isTableElement(element) {
  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
}

function getDocumentElement(element) {
  // $FlowFixMe[incompatible-return]: assume body is always available
  return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
  element.document) || window.document).documentElement;
}

function getParentNode(element) {
  if (getNodeName(element) === 'html') {
    return element;
  }

  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || ( // DOM Element detected
    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element) // fallback

  );
}

function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle(element).position === 'fixed') {
    return null;
  }

  return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block


function getContainingBlock(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());

  if (isIE && isHTMLElement(element)) {
    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
    var elementCss = getComputedStyle(element);

    if (elementCss.position === 'fixed') {
      return null;
    }
  }

  var currentNode = getParentNode(element);

  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }

  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
    // create a containing block.
    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }

  return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.


function getOffsetParent(element) {
  var window = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);

  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent);
  }

  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
    return window;
  }

  return offsetParent || getContainingBlock(element) || window;
}

function getMainAxisFromPlacement(placement) {
  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
}

function within(min$1, value, max$1) {
  return max(min$1, min(value, max$1));
}
function withinMaxClamp(min, value, max) {
  var v = within(min, value, max);
  return v > max ? max : v;
}

function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

function expandToHashMap(value, keys) {
  return keys.reduce(function (hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

var toPaddingObject = function toPaddingObject(padding, state) {
  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
};

function arrow(_ref) {
  var _state$modifiersData$;

  var state = _ref.state,
      name = _ref.name,
      options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? 'height' : 'width';

  if (!arrowElement || !popperOffsets) {
    return;
  }

  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === 'y' ? top : left;
  var maxProp = axis === 'y' ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
  // outside of the popper bounds

  var min = paddingObject[minProp];
  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset = within(min, center, max); // Prevents breaking syntax highlighting...

  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}

function effect$1(_ref2) {
  var state = _ref2.state,
      options = _ref2.options;
  var _options$element = options.element,
      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

  if (arrowElement == null) {
    return;
  } // CSS selector


  if (typeof arrowElement === 'string') {
    arrowElement = state.elements.popper.querySelector(arrowElement);

    if (!arrowElement) {
      return;
    }
  }

  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }

  state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules


var arrow$1 = {
  name: 'arrow',
  enabled: true,
  phase: 'main',
  fn: arrow,
  effect: effect$1,
  requires: ['popperOffsets'],
  requiresIfExists: ['preventOverflow']
};

function getVariation(placement) {
  return placement.split('-')[1];
}

var unsetSides = {
  top: 'auto',
  right: 'auto',
  bottom: 'auto',
  left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.

function roundOffsetsByDPR(_ref, win) {
  var x = _ref.x,
      y = _ref.y;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}

function mapToStyles(_ref2) {
  var _Object$assign2;

  var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      variation = _ref2.variation,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive,
      roundOffsets = _ref2.roundOffsets,
      isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x,
      x = _offsets$x === void 0 ? 0 : _offsets$x,
      _offsets$y = offsets.y,
      y = _offsets$y === void 0 ? 0 : _offsets$y;

  var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
    x: x,
    y: y
  }) : {
    x: x,
    y: y
  };

  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty('x');
  var hasY = offsets.hasOwnProperty('y');
  var sideX = left;
  var sideY = top;
  var win = window;

  if (adaptive) {
    var offsetParent = getOffsetParent(popper);
    var heightProp = 'clientHeight';
    var widthProp = 'clientWidth';

    if (offsetParent === getWindow(popper)) {
      offsetParent = getDocumentElement(popper);

      if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {
        heightProp = 'scrollHeight';
        widthProp = 'scrollWidth';
      }
    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


    offsetParent = offsetParent;

    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
      offsetParent[heightProp];
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }

    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
      offsetParent[widthProp];
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }

  var commonStyles = Object.assign({
    position: position
  }, adaptive && unsetSides);

  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x: x,
    y: y
  }, getWindow(popper)) : {
    x: x,
    y: y
  };

  x = _ref4.x;
  y = _ref4.y;

  if (gpuAcceleration) {
    var _Object$assign;

    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }

  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}

function computeStyles(_ref5) {
  var state = _ref5.state,
      options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
      _options$roundOffsets = options.roundOffsets,
      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration: gpuAcceleration,
    isFixed: state.options.strategy === 'fixed'
  };

  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive: adaptive,
      roundOffsets: roundOffsets
    })));
  }

  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: 'absolute',
      adaptive: false,
      roundOffsets: roundOffsets
    })));
  }

  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-placement': state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


var computeStyles$1 = {
  name: 'computeStyles',
  enabled: true,
  phase: 'beforeWrite',
  fn: computeStyles,
  data: {}
};

var passive = {
  passive: true
};

function effect(_ref) {
  var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options;
  var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize;
  var window = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

  if (scroll) {
    scrollParents.forEach(function (scrollParent) {
      scrollParent.addEventListener('scroll', instance.update, passive);
    });
  }

  if (resize) {
    window.addEventListener('resize', instance.update, passive);
  }

  return function () {
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.removeEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.removeEventListener('resize', instance.update, passive);
    }
  };
} // eslint-disable-next-line import/no-unused-modules


var eventListeners = {
  name: 'eventListeners',
  enabled: true,
  phase: 'write',
  fn: function fn() {},
  effect: effect,
  data: {}
};

var hash$1 = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash$1[matched];
  });
}

var hash = {
  start: 'end',
  end: 'start'
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function (matched) {
    return hash[matched];
  });
}

function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft: scrollLeft,
    scrollTop: scrollTop
  };
}

function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  // Popper 1 is broken in this case and never had a bug report so let's assume
  // it's not an issue. I don't think anyone ever specifies width on <html>
  // anyway.
  // Browsers where the left scrollbar doesn't cause an issue report `0` for
  // this (e.g. Edge 2019, IE11, Safari)
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

function getViewportRect(element, strategy) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;

  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();

    if (layoutViewport || !layoutViewport && strategy === 'fixed') {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }

  return {
    width: width,
    height: height,
    x: x + getWindowScrollBarX(element),
    y: y
  };
}

// of the `<html>` and `<body>` rect bounds if horizontally scrollable

function getDocumentRect(element) {
  var _element$ownerDocumen;

  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;

  if (getComputedStyle(body || html).direction === 'rtl') {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }

  return {
    width: width,
    height: height,
    x: x,
    y: y
  };
}

function isScrollParent(element) {
  // Firefox wants us to check `-x` and `-y` variations as well
  var _getComputedStyle = getComputedStyle(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY;

  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

function getScrollParent(node) {
  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
  }

  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }

  return getScrollParent(getParentNode(node));
}

/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/

function listScrollParents(element, list) {
  var _element$ownerDocumen;

  if (list === void 0) {
    list = [];
  }

  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
  updatedList.concat(listScrollParents(getParentNode(target)));
}

function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

function getInnerBoundingClientRect(element, strategy) {
  var rect = getBoundingClientRect(element, false, strategy === 'fixed');
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}

function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`


function getClippingParents(element) {
  var clippingParents = listScrollParents(getParentNode(element));
  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

  if (!isElement(clipperElement)) {
    return [];
  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


  return clippingParents.filter(function (clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
  });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents


function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents[0];
  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

function computeOffsets(_ref) {
  var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference.x + reference.width / 2 - element.width / 2;
  var commonY = reference.y + reference.height / 2 - element.height / 2;
  var offsets;

  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference.y - element.height
      };
      break;

    case bottom:
      offsets = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;

    case right:
      offsets = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;

    case left:
      offsets = {
        x: reference.x - element.width,
        y: commonY
      };
      break;

    default:
      offsets = {
        x: reference.x,
        y: reference.y
      };
  }

  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

  if (mainAxis != null) {
    var len = mainAxis === 'y' ? 'height' : 'width';

    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
        break;

      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
        break;
    }
  }

  return offsets;
}

function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$placement = _options.placement,
      placement = _options$placement === void 0 ? state.placement : _options$placement,
      _options$strategy = _options.strategy,
      strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
      _options$boundary = _options.boundary,
      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: 'absolute',
    placement: placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
  // 0 or negative = within the clipping rect

  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

  if (elementContext === popper && offsetData) {
    var offset = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function (key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
      overflowOffsets[key] += offset[axis] * multiply;
    });
  }

  return overflowOffsets;
}

function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
    return getVariation(placement) === variation;
  }) : basePlacements;
  var allowedPlacements = placements$1.filter(function (placement) {
    return allowedAutoPlacements.indexOf(placement) >= 0;
  });

  if (allowedPlacements.length === 0) {
    allowedPlacements = placements$1;
  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


  var overflows = allowedPlacements.reduce(function (acc, placement) {
    acc[placement] = detectOverflow(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding
    })[getBasePlacement(placement)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function (a, b) {
    return overflows[a] - overflows[b];
  });
}

function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }

  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}

function flip(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;

  if (state.modifiersData[name]._skip) {
    return;
  }

  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      flipVariations: flipVariations,
      allowedAutoPlacements: allowedAutoPlacements
    }) : placement);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements[0];

  for (var i = 0; i < placements.length; i++) {
    var placement = placements[i];

    var _basePlacement = getBasePlacement(placement);

    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? 'width' : 'height';
    var overflow = detectOverflow(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      altBoundary: altBoundary,
      padding: padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }

    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];

    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }

    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }

    if (checks.every(function (check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }

    checksMap.set(placement, checks);
  }

  if (makeFallbackChecks) {
    // `2` may be desired in some cases – research later
    var numberOfChecks = flipVariations ? 3 : 1;

    var _loop = function _loop(_i) {
      var fittingPlacement = placements.find(function (placement) {
        var checks = checksMap.get(placement);

        if (checks) {
          return checks.slice(0, _i).every(function (check) {
            return check;
          });
        }
      });

      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };

    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);

      if (_ret === "break") break;
    }
  }

  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
} // eslint-disable-next-line import/no-unused-modules


var flip$1 = {
  name: 'flip',
  enabled: true,
  phase: 'main',
  fn: flip,
  requiresIfExists: ['offset'],
  data: {
    _skip: false
  }
};

function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }

  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}

function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function (side) {
    return overflow[side] >= 0;
  });
}

function hide(_ref) {
  var state = _ref.state,
      name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: 'reference'
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets: referenceClippingOffsets,
    popperEscapeOffsets: popperEscapeOffsets,
    isReferenceHidden: isReferenceHidden,
    hasPopperEscaped: hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-reference-hidden': isReferenceHidden,
    'data-popper-escaped': hasPopperEscaped
  });
} // eslint-disable-next-line import/no-unused-modules


var hide$1 = {
  name: 'hide',
  enabled: true,
  phase: 'main',
  requiresIfExists: ['preventOverflow'],
  fn: hide
};

function distanceAndSkiddingToXY(placement, rects, offset) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
    placement: placement
  })) : offset,
      skidding = _ref[0],
      distance = _ref[1];

  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}

function offset(_ref2) {
  var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
  var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function (acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y;

  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


var offset$1 = {
  name: 'offset',
  enabled: true,
  phase: 'main',
  requires: ['popperOffsets'],
  fn: offset
};

function popperOffsets(_ref) {
  var state = _ref.state,
      name = _ref.name;
  // Offsets are the actual position the popper needs to have to be
  // properly positioned near its reference element
  // This is the most basic placement, and will be adjusted by
  // the modifiers in the next step
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: 'absolute',
    placement: state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


var popperOffsets$1 = {
  name: 'popperOffsets',
  enabled: true,
  phase: 'read',
  fn: popperOffsets,
  data: {}
};

function getAltAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}

function preventOverflow(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary: boundary,
    rootBoundary: rootBoundary,
    padding: padding,
    altBoundary: altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };

  if (!popperOffsets) {
    return;
  }

  if (checkMainAxis) {
    var _offsetModifierState$;

    var mainSide = mainAxis === 'y' ? top : left;
    var altSide = mainAxis === 'y' ? bottom : right;
    var len = mainAxis === 'y' ? 'height' : 'width';
    var offset = popperOffsets[mainAxis];
    var min$1 = offset + overflow[mainSide];
    var max$1 = offset - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
    // outside the reference bounds

    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
    // to include its full size in the calculation. If the reference is small
    // and near the edge of a boundary, the popper can overflow even if the
    // reference is not overflowing as well (e.g. virtual elements with no
    // width or height)

    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
    popperOffsets[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset;
  }

  if (checkAltAxis) {
    var _offsetModifierState$2;

    var _mainSide = mainAxis === 'x' ? top : left;

    var _altSide = mainAxis === 'x' ? bottom : right;

    var _offset = popperOffsets[altAxis];

    var _len = altAxis === 'y' ? 'height' : 'width';

    var _min = _offset + overflow[_mainSide];

    var _max = _offset - overflow[_altSide];

    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

    popperOffsets[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


var preventOverflow$1 = {
  name: 'preventOverflow',
  enabled: true,
  phase: 'main',
  fn: preventOverflow,
  requiresIfExists: ['offset']
};

function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
// Composite means it takes into account transforms as well as layout.


function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }

  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };

  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }

    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }

  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function (modifier) {
    map.set(modifier.name, modifier);
  }); // On visiting object, check for its dependencies and visit them recursively

  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function (dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);

        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }

  modifiers.forEach(function (modifier) {
    if (!visited.has(modifier.name)) {
      // check for visited object
      sort(modifier);
    }
  });
  return result;
}

function orderModifiers(modifiers) {
  // order based on dependencies
  var orderedModifiers = order(modifiers); // order based on phase

  return modifierPhases.reduce(function (acc, phase) {
    return acc.concat(orderedModifiers.filter(function (modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

function debounce(fn) {
  var pending;
  return function () {
    if (!pending) {
      pending = new Promise(function (resolve) {
        Promise.resolve().then(function () {
          pending = undefined;
          resolve(fn());
        });
      });
    }

    return pending;
  };
}

function mergeByName(modifiers) {
  var merged = modifiers.reduce(function (merged, current) {
    var existing = merged[current.name];
    merged[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged;
  }, {}); // IE11 does not support Object.values

  return Object.keys(merged).map(function (key) {
    return merged[key];
  });
}

var DEFAULT_OPTIONS = {
  placement: 'bottom',
  modifiers: [],
  strategy: 'absolute'
};

function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return !args.some(function (element) {
    return !(element && typeof element.getBoundingClientRect === 'function');
  });
}

function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }

  var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper(reference, popper, options) {
    if (options === void 0) {
      options = defaultOptions;
    }

    var state = {
      placement: 'bottom',
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference,
        popper: popper
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state: state,
      setOptions: function setOptions(setOptionsAction) {
        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options);
        state.scrollParents = {
          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
          popper: listScrollParents(popper)
        }; // Orders the modifiers based on their dependencies and `phase`
        // properties

        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

        state.orderedModifiers = orderedModifiers.filter(function (m) {
          return m.enabled;
        });
        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }

        var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
        // anymore

        if (!areValidElements(reference, popper)) {
          return;
        } // Store the reference and popper rects to be read by modifiers


        state.rects = {
          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
          popper: getLayoutRect(popper)
        }; // Modifiers have the ability to reset the current update cycle. The
        // most common use case for this is the `flip` modifier changing the
        // placement, which then needs to re-run all the modifiers, because the
        // logic was previously ran for the previous placement and is therefore
        // stale/incorrect

        state.reset = false;
        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
        // is filled with the initial data specified by the modifier. This means
        // it doesn't persist and is fresh on each update.
        // To ensure persistent data, use `${name}#persistent`

        state.orderedModifiers.forEach(function (modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });

        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }

          var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name;

          if (typeof fn === 'function') {
            state = fn({
              state: state,
              options: _options,
              name: name,
              instance: instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function () {
        return new Promise(function (resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };

    if (!areValidElements(reference, popper)) {
      return instance;
    }

    instance.setOptions(options).then(function (state) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state);
      }
    }); // Modifiers have the ability to execute arbitrary code before the first
    // update cycle runs. They will be executed in the same order as the update
    // cycle. This is useful when a modifier adds some persistent data that
    // other modifiers need to use, but the modifier is run after the dependent
    // one.

    function runModifierEffects() {
      state.orderedModifiers.forEach(function (_ref) {
        var name = _ref.name,
            _ref$options = _ref.options,
            options = _ref$options === void 0 ? {} : _ref$options,
            effect = _ref.effect;

        if (typeof effect === 'function') {
          var cleanupFn = effect({
            state: state,
            name: name,
            instance: instance,
            options: options
          });

          var noopFn = function noopFn() {};

          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }

    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function (fn) {
        return fn();
      });
      effectCleanupFns = [];
    }

    return instance;
  };
}

var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
var createPopper = /*#__PURE__*/popperGenerator({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

/**
 * Creates DOM element to be used as React root.
 */
function createRootElement(id) {
  var rootContainer = document.createElement('div');
  rootContainer.setAttribute('id', id);
  return rootContainer;
}

/**
 * Appends element as last child of body.
 */
function addRootElement(rootElem) {
  document.body.append(rootElem);
}

/**
 * Hook to create a React Portal.
 * Automatically handles creating and tearing-down the root elements (no SRR
 * makes this trivial), so there is no need to ensure the parent target already
 * exists.
 * @example
 * const target = usePortal(id, [id]);
 * return createPortal(children, target);
 * @param {String} id The id of the target container, e.g 'modal' or 'spotlight'
 * @returns {HTMLElement} The DOM node to use as the Portal target.
 */
function usePortal(id) {
  var rootElemRef = useRef(null);
  useEffect(function () {
    // Look for existing target dom element to append to
    var existingParent = document.querySelector("#".concat(id));
    // Parent is either a new root or the existing dom element
    var parentElem = existingParent || createRootElement(id);

    // If there is no existing DOM element, add a new one.
    if (!existingParent) {
      addRootElement(parentElem);
    }

    // Add the detached element to the parent
    if (rootElemRef.current) {
      parentElem.append(rootElemRef.current);
    }
    return function removeElement() {
      if (rootElemRef.current) {
        rootElemRef.current.remove();
      }
      if (parentElem.childNodes.length === -1) {
        parentElem.remove();
      }
    };
  }, []);

  /**
   * It's important we evaluate this lazily:
   * - We need first render to contain the DOM element, so it shouldn't happen
   *   in useEffect. We would normally put this in the constructor().
   * - We can't do 'const rootElemRef = useRef(document.createElement('div))',
   *   since this will run every single render (that's a lot).
   * - We want the ref to consistently point to the same DOM element and only
   *   ever run once.
   * @link https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily
   */
  function getRootElem() {
    if (!rootElemRef.current) {
      rootElemRef.current = document.createElement('div');
    }
    return rootElemRef.current;
  }
  return getRootElem();
}

var _PopperMixin;
var PopperMixin = (_PopperMixin = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_PopperMixin, Position$2.Auto, css(["top:0px;bottom:0px;left:0px;right:0px;"])), Position$2.AutoEnd, css(["top:0px;bottom:0px;left:0px;right:0px;"])), Position$2.AutoStart, css(["top:0px;bottom:0px;left:0px;right:0px;"])), Position$2.Right, css(["left:-4px;"])), Position$2.RightEnd, css(["left:-4px;"])), Position$2.RightStart, css(["left:-4px;"])), Position$2.Left, css(["right:-4px;"])), Position$2.LeftEnd, css(["right:-4px;"])), Position$2.LeftStart, css(["right:-4px;"])), Position$2.Top, css(["bottom:-4px;"])), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_PopperMixin, Position$2.TopEnd, css(["bottom:-4px;"])), Position$2.TopStart, css(["bottom:-4px;"])), Position$2.Bottom, css(["top:-4px;"])), Position$2.BottomEnd, css(["top:-4px;"])), Position$2.BottomStart, css(["top:-4px;"])));

var baseClassName$m = 'Popper';
var Popper$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$m, 'root')
}).withConfig({
  componentId: "sc-1373tsp-0"
})(function (_ref) {
  var open = _ref.open;
  return css(["display:", ";"], !open && 'none');
});
var PopperWrapper = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$m, 'wrapper')
}).withConfig({
  componentId: "sc-1373tsp-1"
})(function (_ref2) {
  var $zIndex = _ref2.$zIndex;
  return css(["position:relative;z-index:", ";"], $zIndex);
});
var Arrow = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$m, 'arrow')
}).withConfig({
  componentId: "sc-1373tsp-2"
})(function (_ref3) {
  var _ref3$warning = _ref3.warning,
    warning = _ref3$warning === void 0 ? false : _ref3$warning,
    _ref3$position = _ref3.position,
    position = _ref3$position === void 0 ? Position$2.Right : _ref3$position,
    theme = _ref3.theme;
  return css(["width:8px;height:8px;position:absolute;&::before{content:'';background:", ";width:8px;height:8px;transform:rotate(45deg);position:absolute;top:0;left:0;z-index:-1;}", ""], warning ? theme.palette[Color.BackgroundOrange] : theme.palette[Color.BackgroundGrey], PopperMixin[position]);
});
var Overlay$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$m, 'Overlay')
}).withConfig({
  componentId: "sc-1373tsp-3"
})(function () {
  return css(["position:fixed;right:0;bottom:0;top:0;left:0;background-color:transparent;"]);
});
var Styled$E = applyDisplayNames({
  Popper: Popper$2,
  Overlay: Overlay$2,
  Arrow: Arrow,
  PopperWrapper: PopperWrapper
});
var Styled$F = Styled$E;

var passEventToUnderLayingEvent = function passEventToUnderLayingEvent(event) {
  setTimeout(function () {
    if (event.clientX && event.clientY) {
      var elem = document.elementFromPoint(event.clientX, event.clientY);
      if (elem) {
        elem.dispatchEvent(event.nativeEvent);
      }
    }
  }, 0);
};

var _excluded$1B = ["anchorEl", "children", "open", "warning", "position", "arrow", "popperOptions", "overlay", "zIndex", "enableUnderlayingEvent", "wrapperStyles", "disablePortal", "onClick"];
function ownKeys$8(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$8(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$8(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$8(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var Popper = intrinsicComponent$1(function (_ref, ref) {
  var anchorEl = _ref.anchorEl,
    children = _ref.children,
    open = _ref.open,
    _ref$warning = _ref.warning,
    warning = _ref$warning === void 0 ? false : _ref$warning,
    _ref$position = _ref.position,
    initialPlacement = _ref$position === void 0 ? Position$2.Bottom : _ref$position,
    _ref$arrow = _ref.arrow,
    arrow = _ref$arrow === void 0 ? false : _ref$arrow,
    _ref$popperOptions = _ref.popperOptions,
    popperOptions = _ref$popperOptions === void 0 ? {} : _ref$popperOptions,
    _ref$overlay = _ref.overlay,
    overlay = _ref$overlay === void 0 ? false : _ref$overlay,
    _ref$zIndex = _ref.zIndex,
    zIndex = _ref$zIndex === void 0 ? 1300 : _ref$zIndex,
    _ref$enableUnderlayin = _ref.enableUnderlayingEvent,
    enableUnderlayingEvent = _ref$enableUnderlayin === void 0 ? false : _ref$enableUnderlayin,
    _ref$wrapperStyles = _ref.wrapperStyles,
    wrapperStyles = _ref$wrapperStyles === void 0 ? {} : _ref$wrapperStyles,
    _ref$disablePortal = _ref.disablePortal,
    disablePortal = _ref$disablePortal === void 0 ? false : _ref$disablePortal,
    onClick = _ref.onClick,
    rest = _objectWithoutProperties(_ref, _excluded$1B);
  var target = usePortal(generateClassNames('Popper'));
  var popperRef = useRef(null);
  var handlePopperRef = useForkRef(popperRef, ref);
  useEffect(function () {
    if (!anchorEl || !open || popperRef.current === null) {
      return undefined;
    }
    var defaultModifiers = [{
      name: 'arrow',
      options: {
        element: '[data-popper-arrow]'
      }
    }, {
      name: 'offset',
      options: {
        offset: [0, 10]
      }
    }];
    var popperModifiers = arrow ? defaultModifiers : [];
    if (popperOptions && popperOptions.modifiers != null) {
      popperModifiers = popperModifiers.concat(popperOptions.modifiers);
    }
    var popper = createPopper(anchorEl, popperRef.current, _objectSpread$8(_objectSpread$8({
      placement: initialPlacement
    }, popperOptions), {}, {
      modifiers: popperModifiers
    }));
    handlePopperRef.current = popper;
    return function () {
      popper.destroy();
      handlePopperRef.current = null;
    };
  }, [anchorEl, open, popperOptions, initialPlacement, arrow]);
  var handleOnClicking = function handleOnClicking(event) {
    event.persist();
    event.preventDefault();
    event.stopPropagation();
    if (onClick) {
      onClick(event);
    }
    if (enableUnderlayingEvent) {
      passEventToUnderLayingEvent(event);
    }
  };
  var renderOverlay = function renderOverlay() {
    return /*#__PURE__*/React__default.createElement(Styled$F.Overlay, {
      onClick: handleOnClicking,
      onContextMenu: handleOnClicking
    });
  };
  var render = function render() {
    var _handlePopperRef$stat;
    return /*#__PURE__*/React__default.createElement(Styled$F.PopperWrapper, {
      $zIndex: zIndex,
      style: _objectSpread$8({}, wrapperStyles)
    }, overlay && open && renderOverlay(), /*#__PURE__*/React__default.createElement(Styled$F.Popper, _extends({
      ref: handlePopperRef,
      open: open
    }, rest), children, arrow && /*#__PURE__*/React__default.createElement(Styled$F.Arrow, {
      warning: warning,
      "data-popper-arrow": true,
      position: (handlePopperRef === null || handlePopperRef === void 0 || (_handlePopperRef$stat = handlePopperRef.state) === null || _handlePopperRef$stat === void 0 ? void 0 : _handlePopperRef$stat.placement) || initialPlacement
    })));
  };
  return disablePortal ? render() : /*#__PURE__*/createPortal(render(), target);
});
var Popper$1 = Popper;

var baseClassName$l = 'Menu';
var Overlay$1 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$l, 'Overlay')
}).withConfig({
  componentId: "sc-10okxhw-0"
})(function () {
  return css(["position:fixed;right:0;bottom:0;top:0;left:0;background-color:transparent;z-index:-1;"]);
});
var opacityKeyframes = /*#__PURE__*/keyframes(["from{opacity:0;}to{opacity:1;}"]);
var transformKeyframes = /*#__PURE__*/keyframes(["from{transform:scale(0.97);margin-top:0px;}to{transform:scale(1);margin-top:4px;}"]);
var fadeInAnimation = /*#__PURE__*/css(["animation:", " 250ms 0ms cubic-bezier(0.4,0,0.2,1),", " 250ms cubic-bezier(0.4,0,0.2,1);"], opacityKeyframes, transformKeyframes);
var Menu$3 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$l, 'root')
}).withConfig({
  componentId: "sc-10okxhw-1"
})(function (_ref) {
  var theme = _ref.theme,
    _ref$$maxHeight = _ref.$maxHeight,
    $maxHeight = _ref$$maxHeight === void 0 ? '' : _ref$$maxHeight,
    $rect = _ref.$rect;
  return css(["min-width:", "px;width:195px;min-height:16px;overflow-x:hidden;overflow-y:auto;transition:opacity 250ms cubic-bezier(0.4,0,0,1),transform 250ms cubic-bezier(0.4,0,0,1),margin-top 250ms cubic-bezier(0.4,0,0,1);outline:0;box-shadow:0 2px 4px ", ";border-radius:", ";padding:4px 0;background-color:", ";margin-top:4px;", " ", " ", ""], $rect.width, theme.palette[Color.MediumShadow], theme.shape.borderRadius[BorderRadiusSize.Md], theme.palette[Color.BackgroundStateless], scrollBar, fadeInAnimation, $maxHeight && css(["max-height:", ";"], Number.isNaN(+$maxHeight) ? $maxHeight : "".concat($maxHeight, "px")));
});
var Styled$C = applyDisplayNames({
  Menu: Menu$3,
  Overlay: Overlay$1
});
var Styled$D = Styled$C;

var _excluded$1A = ["children", "anchorEl", "maxHeight", "position", "zIndex", "open", "enableOverlay", "hideScroll", "enableUnderlayingEvent", "containerProps", "popperOptions", "popperWrapperStyles", "onClose"];
var Menu$1 = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    anchorEl = _ref.anchorEl,
    _ref$maxHeight = _ref.maxHeight,
    maxHeight = _ref$maxHeight === void 0 ? 250 : _ref$maxHeight,
    _ref$position = _ref.position,
    position = _ref$position === void 0 ? Position$2.BottomStart : _ref$position,
    zIndex = _ref.zIndex,
    _ref$open = _ref.open,
    open = _ref$open === void 0 ? false : _ref$open,
    _ref$enableOverlay = _ref.enableOverlay,
    enableOverlay = _ref$enableOverlay === void 0 ? true : _ref$enableOverlay,
    _ref$hideScroll = _ref.hideScroll,
    hideScroll = _ref$hideScroll === void 0 ? true : _ref$hideScroll,
    _ref$enableUnderlayin = _ref.enableUnderlayingEvent,
    enableUnderlayingEvent = _ref$enableUnderlayin === void 0 ? false : _ref$enableUnderlayin,
    _ref$containerProps = _ref.containerProps,
    containerProps = _ref$containerProps === void 0 ? {} : _ref$containerProps,
    popperOptions = _ref.popperOptions,
    _ref$popperWrapperSty = _ref.popperWrapperStyles,
    popperWrapperStyles = _ref$popperWrapperSty === void 0 ? {} : _ref$popperWrapperSty,
    onClose = _ref.onClose,
    rest = _objectWithoutProperties(_ref, _excluded$1A);
  var _useState = useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    timeout = _useState2[0],
    setTimeoutState = _useState2[1];
  var _useState3 = useState(new DOMRect()),
    _useState4 = _slicedToArray(_useState3, 2),
    rect = _useState4[0],
    setRect = _useState4[1];
  var menuRef = useRef(null);
  var updateRect = useCallback(function () {
    var _anchorEl$getBounding;
    var defaultPosition = {
      top: 0,
      left: 0,
      height: 0,
      width: 0
    };
    var defaultRect = new DOMRect(defaultPosition.left, defaultPosition.top, defaultPosition.width, defaultPosition.height);
    setRect((_anchorEl$getBounding = anchorEl === null || anchorEl === void 0 ? void 0 : anchorEl.getBoundingClientRect()) !== null && _anchorEl$getBounding !== void 0 ? _anchorEl$getBounding : defaultRect);
  }, [open, timeout, anchorEl]);
  var handleWindowSizeChanged = useCallback(function () {
    if (open) {
      if (timeout) {
        clearTimeout(timeout);
      }
      setTimeoutState(setTimeout(updateRect, 300));
    }
  }, [open, timeout]);
  useEffect(function () {
    window.addEventListener('resize', handleWindowSizeChanged);
    return function () {
      window.removeEventListener('resize', handleWindowSizeChanged);
    };
  }, [handleWindowSizeChanged]);
  useEffect(function () {
    updateRect();
  }, [updateRect]);
  useEffect(function () {
    if (hideScroll) {
      if (open) {
        document.body.classList.add('Menu-open');
        updateRect();
      } else {
        document.body.classList.remove('Menu-open');
      }
      return function () {
        document.body.classList.remove('Menu-open');
      };
    }
  }, [open, updateRect]);
  var handleClose = function handleClose(event) {
    if (typeof onClose === 'function') {
      onClose(event);
    }
  };
  return /*#__PURE__*/React__default.createElement(Popper$1, {
    ref: menuRef,
    position: position,
    open: open,
    anchorEl: anchorEl,
    overlay: enableOverlay,
    popperOptions: popperOptions,
    zIndex: zIndex,
    enableUnderlayingEvent: enableUnderlayingEvent,
    wrapperStyles: popperWrapperStyles,
    onClick: handleClose
  }, /*#__PURE__*/React__default.createElement(Styled$D.Menu, _extends({
    ref: ref,
    $maxHeight: maxHeight,
    $rect: rect
  }, containerProps, rest), children));
});
var Menu$2 = Menu$1;

var Size$2 = {
  Sm: 'sm',
  Md: 'md'
};

var sizeMenuItemMixin = _defineProperty(_defineProperty({}, Size$2.Sm, function (_ref) {
  var font = _ref.theme.typography.font;
  return css(["padding:8px 16px;min-height:32px;", ""], font[FontVariant.LabelMedium]);
}), Size$2.Md, function (_ref2) {
  var font = _ref2.theme.typography.font;
  return css(["padding:11px 16px;min-height:40px;", ""], font[FontVariant.LabelLarge]);
});

var baseClassName$k = 'MenuItem';
var Icon$3 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$k, 'Icon')
}).withConfig({
  componentId: "sc-rrzye0-0"
})(function (_ref) {
  var palette = _ref.theme.palette,
    disabled = _ref.disabled;
  return css(["flex-shrink:0;margin-right:10px;color:", ";"], disabled ? palette[Color.TextPlaceholder] : palette[Color.IconsPrimary]);
});
var Actions = /*#__PURE__*/styled(Icon$3).attrs({
  className: generateClassNames(baseClassName$k, 'Actions')
}).withConfig({
  componentId: "sc-rrzye0-1"
})(function () {
  return css(["margin-right:0px;margin-left:16px;"]);
});
var Label$3 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$k, 'Label')
}).withConfig({
  componentId: "sc-rrzye0-2"
})(["align-items:center;column-gap:4px;flex-grow:1;"]);
var MenuItemWrapper = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$k, 'wrapper')
}).withConfig({
  componentId: "sc-rrzye0-3"
})(function (_ref2) {
  var _ref2$divider = _ref2.divider,
    divider = _ref2$divider === void 0 ? false : _ref2$divider,
    _ref2$disabled = _ref2.disabled,
    disabled = _ref2$disabled === void 0 ? false : _ref2$disabled,
    theme = _ref2.theme;
  return css(["", " ", ""], divider && css(["width:100%;height:1px;background:", ";box-sizing:border-box;margin:4px 0;"], theme.palette[Color.BordersSecondary]), disabled && css(["color:", ";"], theme.palette[Color.ButtonDisabledText]));
});
var MenuItem$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$k, 'root')
}).withConfig({
  componentId: "sc-rrzye0-4"
})(function (_ref3) {
  var _ref3$size = _ref3.size,
    size = _ref3$size === void 0 ? Size$2.Sm : _ref3$size,
    $active = _ref3.$active,
    theme = _ref3.theme,
    _ref3$disableHover = _ref3.disableHover,
    disableHover = _ref3$disableHover === void 0 ? false : _ref3$disableHover,
    disabled = _ref3.disabled,
    $isFocused = _ref3.$isFocused;
  return css(["display:flex;justify-content:space-between;flex-direction:row;align-items:center;width:100%;background:", ";color:", ";cursor:pointer;box-sizing:border-box;transition:all 100ms ease-out;", " &:focus-within,&:focus,&:hover{", ";", "}", " ", ""], theme.palette[$active ? Color.BackgroundActive : Color.BackgroundSecondary], theme.palette[Color.TextPrimary], sizeMenuItemMixin[size], !disableHover && css(["background-color:", ";"], theme.palette[Color.BackgroundHover]), disabled && css(["cursor:default;background-color:white;"]), disabled && css(["& > svg{path{fill:", ";}}color:", ";"], theme.palette[Color.ButtonDisabledText], theme.palette[Color.ButtonDisabledText]), $isFocused && !disableHover && css(["background-color:", ";"], theme.palette[Color.BackgroundHover]));
});
var MenuPrefix = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$k, 'prefix')
}).withConfig({
  componentId: "sc-rrzye0-5"
})(function () {
  return css(["display:flex;"]);
});
var MenuContent = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$k, 'content')
}).withConfig({
  componentId: "sc-rrzye0-6"
})(function () {
  return css(["flex-grow:1;line-height:16px;"]);
});
var MenuSuffix = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$k, 'suffix')
}).withConfig({
  componentId: "sc-rrzye0-7"
})(function () {
  return css(["display:flex;margin-left:8px;"]);
});
var Styled$A = applyDisplayNames({
  MenuItemWrapper: MenuItemWrapper,
  MenuItem: MenuItem$2,
  MenuPrefix: MenuPrefix,
  MenuContent: MenuContent,
  MenuSuffix: MenuSuffix,
  Label: Label$3,
  Icon: Icon$3,
  Actions: Actions
});
var Styled$B = Styled$A;

function ownKeys$7(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$7(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$7(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$7(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var MenuItem = intrinsicComponent$1(function (props, ref) {
  var list = props.list,
    children = props.children,
    disableHover = props.disableHover,
    disabled = props.disabled,
    enableScrollIntoView = props.enableScrollIntoView,
    _props$isFocused = props.isFocused,
    isFocused = _props$isFocused === void 0 ? false : _props$isFocused,
    active = props.active,
    value = props.value,
    dividerStyle = props.dividerStyle,
    _props$depth = props.depth,
    depth = _props$depth === void 0 ? 0 : _props$depth;
  var menuItemRef = useRef(null);
  var _React$useState = React__default.useState(null),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    anchorEl = _React$useState2[0],
    setAnchorEl = _React$useState2[1];
  var _React$useState3 = React__default.useState([]),
    _React$useState4 = _slicedToArray(_React$useState3, 2),
    selectedIds = _React$useState4[0],
    setSelectedIds = _React$useState4[1];
  var handleOpenMenu = function handleOpenMenu(event) {
    setAnchorEl(event.currentTarget);
  };
  var handleScroll = function handleScroll() {
    var _menuItemRef$current;
    (_menuItemRef$current = menuItemRef.current) === null || _menuItemRef$current === void 0 || _menuItemRef$current.scrollIntoView({
      behavior: 'auto',
      block: 'nearest'
    });
  };
  useEffect(function () {
    if ((active || isFocused) && enableScrollIntoView) {
      handleScroll();
    }
  }, [active, isFocused]);
  var handleSelectedId = function handleSelectedId(ev, selected, depthLevel) {
    var updatedArray = selectedIds.slice(0);
    updatedArray[depthLevel] = selected;
    setSelectedIds(updatedArray);
    handleOpenMenu(ev);
  };
  var handleCloseSubMenu = function handleCloseSubMenu(depthLevel) {
    var updatedArray = selectedIds.slice(0);
    updatedArray[depthLevel] = '';
    setSelectedIds(updatedArray);
    setAnchorEl(null);
  };
  var renderItems = function renderItems(options) {
    var depthLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return options.map(function (option) {
      var hasOptions = option.subList && option.subList.length > 0;
      var subMenu;
      if (selectedIds[depthLevel] === option.key && hasOptions) {
        var newDepthLevel = depthLevel + 1;
        subMenu = /*#__PURE__*/React__default.createElement(Menu$2, _extends({
          key: option.key,
          position: "right",
          open: Boolean(anchorEl),
          anchorEl: anchorEl,
          enableOverlay: false
        }, option.subMenuProps), /*#__PURE__*/React__default.createElement(MenuItem, _extends({}, props, {
          list: option.subList,
          depth: newDepthLevel
        })));
      }
      if (option.content === 'divider') {
        return /*#__PURE__*/React__default.createElement(Styled$B.MenuItemWrapper, {
          divider: true,
          key: option.key,
          style: option.dividerStyle
        });
      }
      return /*#__PURE__*/React__default.createElement(Styled$B.MenuItemWrapper, _extends({
        disabled: false,
        key: option.key,
        onMouseLeave: function onMouseLeave() {
          return handleCloseSubMenu(depthLevel);
        }
      }, props), /*#__PURE__*/React__default.createElement(Styled$B.MenuItem, _extends({}, props, {
        className: option.className,
        ref: ref,
        $isFocused: isFocused,
        $active: Boolean(option.active),
        onClick: function onClick(event) {
          var _option$onClick;
          return (_option$onClick = option.onClick) === null || _option$onClick === void 0 ? void 0 : _option$onClick.call(option, _objectSpread$7({
            event: event
          }, props));
        },
        onMouseEnter: function onMouseEnter(ev) {
          return handleSelectedId(ev, option.key, depthLevel);
        },
        disableHover: disableHover || option.disableHover
      }), option.prefix && /*#__PURE__*/React__default.createElement(Styled$B.MenuPrefix, null, typeof option.prefix === 'function' ? option.prefix(props) : option.prefix), option.content && /*#__PURE__*/React__default.createElement(Styled$B.MenuContent, null, typeof option.content === 'function' ? option.content(props) : option.content), (option.suffix || option.subList) && /*#__PURE__*/React__default.createElement(Styled$B.MenuSuffix, null, typeof option.suffix === 'function' ? option.suffix(props) : option.suffix, option.subList && /*#__PURE__*/React__default.createElement(Arrow$2, {
        size: 10,
        color: "#768A9F"
      }))), subMenu);
    });
  };
  if (!list) {
    if (value === 'divider') {
      return /*#__PURE__*/React__default.createElement(Styled$B.MenuItemWrapper, {
        divider: true,
        key: value,
        style: dividerStyle
      });
    }
    return /*#__PURE__*/React__default.createElement(Styled$B.MenuItemWrapper, {
      disabled: Boolean(disabled)
    }, /*#__PURE__*/React__default.createElement(Styled$B.MenuItem, _extends({}, props, {
      ref: menuItemRef,
      disableHover: disableHover,
      disabled: disabled,
      $isFocused: isFocused,
      $active: active
    }), children));
  }
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, renderItems(list, depth));
});
MenuItem.displayName = 'MenuItem';
var MenuItem$1 = MenuItem;

var _excluded$1z = ["children", "disabled", "size"];
var getIconSize$4 = function getIconSize(sizeName) {
  switch (sizeName) {
    case Size$2.Md:
      return 16;
    case Size$2.Sm:
    default:
      return 14;
  }
};
var MenuItemIcon = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? Size$2.Md : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1z);
  return /*#__PURE__*/React__default.createElement(Styled$B.Icon, _extends({
    disabled: disabled
  }, rest, {
    ref: ref
  }), children && typeof children === 'function' ? children({
    size: getIconSize$4(size)
  }) : children);
});
var MenuItemIcon$1 = MenuItemIcon;

var _excluded$1y = ["children"];
var MenuItemLabel = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded$1y);
  return /*#__PURE__*/React__default.createElement(Styled$B.Label, _extends({}, rest, {
    ref: ref
  }), children);
});
MenuItemLabel.displayName = 'MenuItemLabel';
var MenuItemLabel$1 = MenuItemLabel;

var _excluded$1x = ["children"];
var getIconSize$3 = function getIconSize(sizeName) {
  switch (sizeName) {
    case Size$2.Md:
      return 16;
    case Size$2.Sm:
    default:
      return 14;
  }
};
var MenuItemActions = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded$1x);
  return /*#__PURE__*/React__default.createElement(Styled$B.Actions, _extends({}, rest, {
    ref: ref
  }), children && typeof children === 'function' ? children({
    size: getIconSize$3(rest.size)
  }) : children);
});
MenuItemActions.displayName = 'MenuItemActions';
var MenuItemActions$1 = MenuItemActions;

var _excluded$1w = ["color", "size"];
var CrossOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1w);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 44 44",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M43.3196 40.0403C44.2253 40.9461 44.2253 42.4146 43.3196 43.3204C42.4138 44.2262 40.9453 44.2262 40.0396 43.3204L21.9997 25.2802L3.95952 43.3207C3.05376 44.2264 1.58525 44.2264 0.679494 43.3207C-0.226258 42.4149 -0.226258 40.9464 0.679495 40.0406L18.7197 22.0001L0.679313 3.95941C-0.226437 3.05364 -0.226439 1.5851 0.679314 0.679328C1.58507 -0.226442 3.05358 -0.226443 3.95934 0.679328L21.9997 18.72L40.0398 0.679604C40.9455 -0.226163 42.414 -0.226165 43.3198 0.679605C44.2255 1.58537 44.2255 3.05392 43.3198 3.95969L25.2797 22.0001L43.3196 40.0403Z",
    fill: color
  }));
});
var CrossOutline$1 = CrossOutline;

var sizeHintMixin = _defineProperty(_defineProperty({}, InputSize.Sm, function (_ref) {
  var font = _ref.theme.typography.font;
  return css(font[FontVariant.LabelExtraSmallUp]);
}), InputSize.Md, function (_ref2) {
  var font = _ref2.theme.typography.font;
  return css(font[FontVariant.LabelSmall]);
});

var baseClassName$j = 'FormHint';
var FormHint$2 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$j, 'root')
}).withConfig({
  componentId: "sc-1vu99sv-0"
})(function (_ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? InputSize.Md : _ref$size,
    _ref$$error = _ref.$error,
    $error = _ref$$error === void 0 ? false : _ref$$error,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    theme = _ref.theme;
  return css(["display:flex;align-items:center;color:", ";", " ", ""], $error ? theme.palette[Color.Error] : theme.palette[Color.TextSecondary], disabled && css(["color:", ";"], theme.palette[Color.ButtonDisabledText]), sizeHintMixin[size]);
});
var Styled$z = applyDisplayNames({
  FormHint: FormHint$2
});
var StyledFormHint = Styled$z;

var _excluded$1v = ["error"];
var FormHint = intrinsicComponent$1(function (_ref, ref) {
  var _ref$error = _ref.error,
    error = _ref$error === void 0 ? false : _ref$error,
    rest = _objectWithoutProperties(_ref, _excluded$1v);
  return /*#__PURE__*/React__default.createElement(StyledFormHint.FormHint, _extends({
    ref: ref,
    $error: error
  }, rest));
});
var FormHint$1 = FormHint;

var _excluded$1u = ["color", "size"];
var Spinner$1 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 28 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1u);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M41.3465 44.355C33.5656 50.7844 22.9687 51.6268 14.3708 47.3665L17.8949 44.4545C24.754 47.117 32.7424 46.1093 38.709 41.1792C44.6755 36.249 47.1546 28.6071 45.8085 21.3893L49.3325 18.4773C51.9291 27.6967 49.1274 37.9256 41.3465 44.355Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M36.1749 2.63356L32.6509 5.54555C25.821 2.91828 17.838 3.86187 11.8366 8.82088C5.87009 13.7511 3.42028 21.4282 4.7372 28.6107L1.21311 31.5227C-1.38344 22.3034 1.45314 12.0456 9.19916 5.64502C16.9801 -0.784402 27.5768 -1.62682 36.1749 2.63356Z",
    fill: color
  }));
});
var SpinnerIcon = Spinner$1;

var _excluded$1t = ["color", "size"];
var TwoArrowsRight = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1t);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 12 12",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M5.74299 0.152553C5.95998 -0.056404 6.30528 -0.0498885 6.51424 0.167105C6.7232 0.384099 6.71668 0.7294 6.49969 0.938357L1.43832 5.81227L6.51398 11.0759C6.72309 11.2928 6.71681 11.6381 6.49996 11.8472C6.28311 12.0563 5.9378 12.05 5.7287 11.8332L0.274151 6.1766C0.17369 6.07242 0.118752 5.93258 0.121433 5.78788C0.124113 5.64317 0.184193 5.50547 0.288444 5.40508L5.74299 0.152553Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M10.9549 0.152554C11.1719 -0.0564031 11.5172 -0.0498876 11.7262 0.167106C11.9351 0.3841 11.9286 0.729401 11.7116 0.938357L6.65023 5.81227L11.7259 11.0759C11.935 11.2928 11.9287 11.6381 11.7119 11.8472C11.495 12.0563 11.1497 12.05 10.9406 11.8332L5.48606 6.1766C5.3856 6.07242 5.33067 5.93258 5.33335 5.78788C5.33603 5.64317 5.39611 5.50547 5.50036 5.40508L10.9549 0.152554Z",
    fill: color
  }));
});
var TwoArrowsRight$1 = TwoArrowsRight;

var _excluded$1s = ["color", "size"];
var TwoArrowsLeft = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1s);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 12 12",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M6.25714 11.8474C6.04014 12.0564 5.69484 12.0499 5.48588 11.8329C5.27693 11.6159 5.28344 11.2706 5.50043 11.0616L10.5618 6.18773L5.48614 0.924074C5.27704 0.707224 5.28331 0.361919 5.50016 0.152813C5.71701 -0.0562931 6.06232 -0.0500145 6.27143 0.166835L11.726 5.8234C11.8264 5.92758 11.8814 6.06742 11.8787 6.21212C11.876 6.35683 11.8159 6.49453 11.7117 6.59492L6.25714 11.8474Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M1.04522 11.8474C0.828227 12.0564 0.482925 12.0499 0.273969 11.8329C0.065012 11.6159 0.0715275 11.2706 0.288521 11.0616L5.34989 6.18773L0.274227 0.924074C0.0651226 0.707224 0.0714006 0.361919 0.28825 0.152813C0.5051 -0.0562931 0.850407 -0.0500145 1.05951 0.166835L6.51406 5.8234C6.61452 5.92758 6.66946 6.06742 6.66678 6.21212C6.6641 6.35683 6.60402 6.49453 6.49977 6.59492L1.04522 11.8474Z",
    fill: color
  }));
});
var TwoArrowsLeft$1 = TwoArrowsLeft;

var BadgeColor = {
  Primary: 'primary',
  Secondary: 'secondary',
  White: 'white'
};

var colorBadgeMixin = _defineProperty(_defineProperty(_defineProperty({}, BadgeColor.Primary, function (_ref) {
  var palette = _ref.theme.palette;
  return css(["background-color:", ";color:", ";"], palette[Color.AccentPrimary], palette[Color.ButtonPrimaryText]);
}), BadgeColor.White, function (_ref2) {
  var palette = _ref2.theme.palette;
  return css(["background-color:", ";color:", ";"], palette[Color.ButtonPrimaryText], palette[Color.AccentPrimary]);
}), BadgeColor.Secondary, function (_ref3) {
  var palette = _ref3.theme.palette;
  return css(["background-color:", ";color:", ";"], palette[Color.Accent_1_2_Opacity], palette[Color.TextPrimary]);
});

var baseClassName$i = 'Badge';
var defaultSize = 20;
var BadgeRoot = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$i, 'root')
}).withConfig({
  componentId: "sc-1rfm40m-0"
})(["position:relative;display:inline-flex;flex-shrink:0;vertical-align:middle;"]);
var Badge$3 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$i)
}).withConfig({
  componentId: "sc-1rfm40m-1"
})(function (_ref) {
  var size = _ref.size,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'secondary' : _ref$color,
    fontSize = _ref.fontSize,
    _ref$padding = _ref.padding,
    padding = _ref$padding === void 0 ? '0 6px' : _ref$padding,
    inline = _ref.inline;
  return css(["", " display:flex;flex-wrap:wrap;flex-direction:row;justify-content:center;align-items:center;align-content:center;height:", "px;min-width:", "px;line-height:1;padding:", ";font-size:", ";box-sizing:border-box;transition:transform 225ms cubic-bezier(0.4,0,0.2,1) 0ms;border-radius:", "px;z-index:1;", ""], inline ? '' : 'position: absolute;', size || defaultSize, size || defaultSize, typeof padding === 'number' ? "".concat(padding, "px") : padding, typeof fontSize === 'number' ? "".concat(fontSize, "px") : fontSize, (size || defaultSize) / 2, colorBadgeMixin[color]);
});
var Styled$y = applyDisplayNames({
  BadgeRoot: BadgeRoot,
  Badge: Badge$3
});
var StyledBadge = Styled$y;

var _excluded$1r = ["color", "inline", "badgeContent"];
var Badge$1 = intrinsicComponent$1(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? BadgeColor.Secondary : _ref$color,
    _ref$inline = _ref.inline,
    inline = _ref$inline === void 0 ? false : _ref$inline,
    badgeContent = _ref.badgeContent,
    rest = _objectWithoutProperties(_ref, _excluded$1r);
  return /*#__PURE__*/React__default.createElement(StyledBadge.BadgeRoot, {
    ref: ref
  }, /*#__PURE__*/React__default.createElement(StyledBadge.Badge, _extends({
    color: color,
    inline: inline,
    badgeContent: badgeContent
  }, rest), badgeContent));
});
var Badge$2 = Badge$1;

var ButtonType = {
  Default: 'default',
  Sidebar: 'sidebar'
};

var SideBarType = {
  Left: 'left',
  Right: 'right'
};

var getIconSize$2 = function getIconSize(sizeName) {
  switch (sizeName) {
    case ButtonSize.Lg:
      return 18;
    case ButtonSize.Md:
      return 16;
    case ButtonSize.Sm:
      return 14;
    case ButtonSize.Xs:
      return 12;
    default:
      return 16;
  }
};
var getSideBarIconSize = function getSideBarIconSize(sizeName) {
  switch (sizeName) {
    case ButtonSize.Lg:
      return 12;
    case ButtonSize.Md:
      return 11;
    case ButtonSize.Sm:
      return 10;
    default:
      return 11;
  }
};

var _colorButtonMixin;
var colorButtonMixin$1 = (_colorButtonMixin = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_colorButtonMixin, ButtonColor.Primary, function (_ref) {
  var palette = _ref.theme.palette,
    active = _ref.active;
  return css(["background-color:", ";color:", ";", "{color:", ";background:transparent;}&:hover{background-color:", ";}&:active{background-color:", ";}", " &:disabled{color:", ";background:", ";cursor:default;", "{color:", ";background:transparent;}}"], palette[Color.AccentStateless], palette[Color.ButtonPrimaryText], StyledBadge.Badge, palette[Color.ButtonPrimaryText], palette[Color.AccentPrimaryHover], palette[Color.AccentPrimaryActive], active && css(["background-color:", ";&:hover,&:focus{background-color:", ";}"], palette[Color.AccentPrimaryActive], palette[Color.AccentPrimaryActive]), palette[Color.BordersDisabled], palette[Color.Accent_1_2_Opacity], StyledBadge.Badge, palette[Color.BordersDisabled]);
}), ButtonColor.Secondary, function (_ref2) {
  var palette = _ref2.theme.palette,
    active = _ref2.active;
  return css(["background-color:", ";color:", ";border:1px solid ", ";", "{color:", ";background:transparent;}&:hover{color:", ";background-color:", ";", "{color:", ";}}&:focus{color:", ";background-color:", ";border:1px solid ", ";", "{color:", ";}}&:active{color:", ";background-color:", ";", "{color:", ";}}", " &:disabled{color:", ";background:", ";border:none;cursor:default;", "{color:", ";}}"], palette[Color.BackgroundStateless], palette[Color.AccentStateless], palette[Color.AccentStateless], StyledBadge.Badge, palette[Color.AccentStateless], palette[Color.ButtonPrimaryText], palette[Color.AccentPrimaryHover], StyledBadge.Badge, palette[Color.ButtonPrimaryText], palette[Color.AccentPrimaryActive], palette[Color.Accent_1_2_Opacity], palette[Color.AccentPrimaryActive], StyledBadge.Badge, palette[Color.AccentPrimaryActive], palette[Color.ButtonPrimaryText], palette[Color.AccentPrimaryActive], StyledBadge.Badge, palette[Color.ButtonPrimaryText], active && css(["color:", ";background-color:", ";", "{color:", ";}&:hover,&:focus{color:", ";background-color:", ";", "{color:", ";}}"], palette[Color.ButtonPrimaryText], palette[Color.AccentPrimaryActive], StyledBadge.Badge, palette[Color.ButtonPrimaryText], palette[Color.ButtonPrimaryText], palette[Color.AccentPrimaryActive], StyledBadge.Badge, palette[Color.ButtonPrimaryText]), palette[Color.BordersDisabled], palette[Color.Accent_1_2_Opacity], StyledBadge.Badge, palette[Color.BordersDisabled]);
}), ButtonColor.Basic, function (_ref3) {
  var palette = _ref3.theme.palette,
    active = _ref3.active;
  return css(["background-color:transparent;border:1px solid ", ";color:", ";", "{background-color:transparent;color:", ";}&:hover{background-color:", ";color:", ";", "{color:", ";}}&:active{background-color:", ";color:", ";", "{color:", ";}}", " &:disabled{background-color:", ";color:", ";cursor:default;border:none;", "{color:", ";}}"], palette[Color.BordersButton], palette[Color.LinkStateless], StyledBadge.Badge, palette[Color.LinkStateless], palette[Color.BackgroundHover], palette[Color.LinkHover], StyledBadge.Badge, palette[Color.LinkHover], palette[Color.BackgroundActive], palette[Color.LinkHover], StyledBadge.Badge, palette[Color.LinkHover], active && css(["background-color:", ";color:", ";", "{color:", ";}&:hover,&:focus{background-color:", ";color:", ";}"], palette[Color.BackgroundActive], palette[Color.LinkHover], StyledBadge.Badge, palette[Color.LinkHover], palette[Color.BackgroundActive], palette[Color.LinkHover]), palette[Color.Accent_1_2_Opacity], palette[Color.BordersDisabled], StyledBadge.Badge, palette[Color.BordersDisabled]);
}), ButtonColor.LinkPrimary, function (_ref4) {
  var palette = _ref4.theme.palette,
    active = _ref4.active;
  return css(["color:", ";background-color:transparent;padding:0px !important;&:hover{background-color:transparent;color:", ";}&:active{color:", ";}", " &:disabled{background-color:transparent;color:", ";cursor:default;}"], palette[Color.AccentStateless], palette[Color.AccentPrimaryHover], palette[Color.AccentPrimaryActive], active && css(["color:", ";&:hover,&:focus{color:", ";"], palette[Color.AccentPrimaryActive], palette[Color.AccentPrimaryActive]), palette[Color.BordersDisabled]);
}), ButtonColor.LinkSecondary, function (_ref5) {
  var palette = _ref5.theme.palette,
    active = _ref5.active;
  return css(["color:", ";background-color:transparent;padding:0px !important;&:hover{background-color:transparent;color:", ";}&:active{color:", ";}", " &:disabled{background-color:transparent;color:", ";cursor:default;}"], palette[Color.LinkStateless], palette[Color.AccentPrimaryHover], palette[Color.AccentPrimaryActive], active && css(["color:", ";&:hover,&:focus{color:", ";}"], palette[Color.AccentPrimaryActive], palette[Color.AccentPrimaryActive]), palette[Color.BordersDisabled]);
}), ButtonColor.LinkBasicPrimary, function (_ref6) {
  var palette = _ref6.theme.palette,
    active = _ref6.active;
  return css(["color:", ";background-color:transparent;padding:0px !important;&:hover{background-color:transparent;color:", ";}&:active{color:", ";}", " &:disabled{background-color:transparent;color:", ";cursor:default;}"], palette[Color.AccentStateless], palette[Color.AccentPrimaryHover], palette[Color.AccentPrimaryActive], active && css(["color:", ";&:hover,&:focus{color:", ";}"], palette[Color.AccentPrimaryActive], palette[Color.AccentPrimaryActive]), palette[Color.BordersDisabled]);
}), ButtonColor.LinkBasicSecondary, function (_ref7) {
  var palette = _ref7.theme.palette,
    active = _ref7.active;
  return css(["color:", ";background-color:transparent;padding:0px !important;&:hover{background-color:transparent;color:", ";}&:active{color:", ";}", " &:disabled{background-color:transparent;color:", ";cursor:default;}"], palette[Color.LinkStateless], palette[Color.AccentPrimaryHover], palette[Color.AccentPrimaryActive], active && css(["color:", ";&:hover,&:focus{color:", ";}"], palette[Color.AccentPrimaryActive], palette[Color.AccentPrimaryActive]), palette[Color.BordersDisabled]);
}), ButtonColor.ErrorPrimary, function (_ref8) {
  var palette = _ref8.theme.palette,
    active = _ref8.active;
  return css(["background-color:", ";color:", ";", "{color:", ";background:transparent;}&:hover{background-color:", ";}&:active{background-color:", ";}", " &:disabled{background-color:", ";color:", ";cursor:default;", "{color:", ";background:transparent;}}"], palette[Color.Error], palette[Color.ButtonPrimaryText], StyledBadge.Badge, palette[Color.ButtonPrimaryText], palette[Color.ErrorHover], palette[Color.ErrorActive], active && css(["background-color:", ";&:hover,&:focus{background-color:", ";}"], palette[Color.ErrorActive], palette[Color.ErrorActive]), palette[Color.Accent_1_2_Opacity], palette[Color.BordersDisabled], StyledBadge.Badge, palette[Color.BordersDisabled]);
}), ButtonColor.ErrorSecondary, function (_ref9) {
  var palette = _ref9.theme.palette,
    active = _ref9.active;
  return css(["background-color:", ";color:", ";border:1px solid ", ";", "{color:", ";background-color:transparent;}&:hover{background-color:", ";color:", ";border:none;", "{color:", ";}}&:active{background-color:", ";color:", ";border:none;}", " &:disabled{color:", ";background:", ";border:none;cursor:default;", "{color:", ";}}"], palette[Color.BackgroundStateless], palette[Color.LinkStateless], palette[Color.BordersButton], StyledBadge.Badge, palette[Color.LinkStateless], palette[Color.ErrorHover], palette[Color.ButtonPrimaryText], StyledBadge.Badge, palette[Color.ButtonPrimaryText], palette[Color.ErrorActive], palette[Color.ButtonPrimaryText], active && css(["background-color:", ";color:", ";border:none;&:hover,&:focus{background-color:", ";}"], palette[Color.ErrorActive], palette[Color.ButtonPrimaryText], palette[Color.ErrorActive]), palette[Color.BordersDisabled], palette[Color.Accent_1_2_Opacity], StyledBadge.Badge, palette[Color.BordersDisabled]);
}), ButtonColor.ErrorBasic, function (_ref10) {
  var palette = _ref10.theme.palette,
    active = _ref10.active;
  return css(["color:", ";background-color:transparent;&:hover{color:", ";}&:active{color:", ";}", " &:disabled{color:", ";cursor:default;}"], palette[Color.LinkStateless], palette[Color.ErrorHover], palette[Color.ErrorActive], active && css(["color:", ";&:hover,&:focus{color:", ";}"], palette[Color.ErrorActive], palette[Color.ErrorActive]), palette[Color.BordersDisabled]);
}), _defineProperty(_defineProperty(_defineProperty(_colorButtonMixin, ButtonColor.WarningPrimary, function (_ref11) {
  var palette = _ref11.theme.palette,
    active = _ref11.active;
  return css(["background-color:", ";color:", ";", "{color:", ";background:transparent;}&:hover{background-color:", ";}&:active{background-color:", ";}", " &:disabled{background-color:", ";color:", ";cursor:default;", "{color:", ";background:transparent;}}"], palette[Color.Warning], palette[Color.ButtonPrimaryText], StyledBadge.Badge, palette[Color.ButtonPrimaryText], palette[Color.WarningHover], palette[Color.WarningActive], active && css(["background-color:", ";&:hover,&:focus{background-color:", ";}"], palette[Color.WarningActive], palette[Color.WarningActive]), palette[Color.Accent_1_2_Opacity], palette[Color.BordersDisabled], StyledBadge.Badge, palette[Color.BordersDisabled]);
}), ButtonColor.WarningSecondary, function (_ref12) {
  var palette = _ref12.theme.palette,
    active = _ref12.active;
  return css(["background-color:", ";color:", ";border:1px solid ", ";", "{color:", ";background-color:transparent;}&:hover{background-color:", ";color:", ";border:none;", "{color:", ";}}&:active{background-color:", ";color:", ";border:none;}", " &:disabled{color:", ";background:", ";border:none;cursor:default;", "{color:", ";}}"], palette[Color.BackgroundStateless], palette[Color.LinkStateless], palette[Color.BordersButton], StyledBadge.Badge, palette[Color.LinkStateless], palette[Color.WarningHover], palette[Color.ButtonPrimaryText], StyledBadge.Badge, palette[Color.ButtonPrimaryText], palette[Color.WarningActive], palette[Color.ButtonPrimaryText], active && css(["background-color:", ";color:", ";border:none;", "{color:", ";background-color:transparent;}&:hover,&:focus{background-color:", ";}"], palette[Color.WarningActive], palette[Color.ButtonPrimaryText], StyledBadge.Badge, palette[Color.ButtonPrimaryText], palette[Color.WarningActive]), palette[Color.BordersDisabled], palette[Color.Accent_1_2_Opacity], StyledBadge.Badge, palette[Color.BordersDisabled]);
}), ButtonColor.WarningBasic, function (_ref13) {
  var palette = _ref13.theme.palette,
    active = _ref13.active;
  return css(["color:", ";background-color:transparent;&:hover{color:", ";}&:active{color:", ";}", " &:disabled{color:", ";cursor:default;}"], palette[Color.LinkStateless], palette[Color.WarningHover], palette[Color.WarningActive], active && css(["color:", ";&:hover,&:focus{color:", ";}"], palette[Color.WarningActive], palette[Color.WarningActive]), palette[Color.BordersDisabled]);
}));
var sizeButtonMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, ButtonSize.Xs, css(["padding:5px 10px;"])), ButtonSize.Sm, css(["padding:8px 12px;"])), ButtonSize.Md, css(["padding:11px 16px;"])), ButtonSize.Lg, css(["padding:14px 24px;"]));
var sizeSecondaryButtonMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, ButtonSize.Xs, css(["padding:4px 10px;"])), ButtonSize.Sm, css(["padding:7px 12px;"])), ButtonSize.Md, css(["padding:10px 16px;"])), ButtonSize.Lg, css(["padding:13px 24px;"]));
var sizeSidebarMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, ButtonSize.Xs, css(["padding:5px 10px;"])), ButtonSize.Sm, css(["padding:8px 12px;"])), ButtonSize.Md, css(["padding:11px 14px;"])), ButtonSize.Lg, css(["padding:14px 16px;"]));
var sizeSidebarDividerMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, ButtonSize.Xs, css(["height:14px;"])), ButtonSize.Sm, css(["height:16px;"])), ButtonSize.Md, css(["height:18px;"])), ButtonSize.Lg, css(["height:20px;"]));
var paddingIconLabelMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, ButtonSize.Xs, css(["margin-right:5px;"])), ButtonSize.Sm, css(["margin-right:6px;"])), ButtonSize.Md, css(["margin-right:7px;"])), ButtonSize.Lg, css(["margin-right:8px;"]));
var sizeButtonLabelMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, ButtonSize.Xs, function (_ref14) {
  var font = _ref14.theme.typography.font;
  return css(font[FontVariant.ButtonSmEmphasis]);
}), ButtonSize.Sm, function (_ref15) {
  var font = _ref15.theme.typography.font;
  return css(font[FontVariant.ButtonMdEmphasis]);
}), ButtonSize.Md, function (_ref16) {
  var font = _ref16.theme.typography.font;
  return css(font[FontVariant.ButtonLgEmphasis]);
}), ButtonSize.Lg, function (_ref17) {
  var font = _ref17.theme.typography.font;
  return css(font[FontVariant.ButtonLgUpEmphasis]);
});

var baseClassName$h = 'Button';
var Label$2 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$h, 'Label')
}).withConfig({
  componentId: "sc-lxwit0-0"
})(["display:flex;"]);
var Badge = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$h, 'Badge')
}).withConfig({
  componentId: "sc-lxwit0-1"
})(["display:flex;margin-left:5px;"]);
var Wrapper$1 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$h, 'Body')
}).withConfig({
  componentId: "sc-lxwit0-2"
})(["display:flex;align-items:center;"]);
var Button$2 = /*#__PURE__*/styled.button.attrs({
  className: generateClassNames(baseClassName$h, 'root')
}).withConfig({
  componentId: "sc-lxwit0-3"
})(function (_ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? ButtonColor.Secondary : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? ButtonSize.Md : _ref$size,
    $buttonType = _ref.$buttonType,
    active = _ref.active,
    theme = _ref.theme;
  return css(["display:inline-flex;flex-shrink:0;flex-direction:row;align-items:center;justify-content:center;border-radius:", ";transition:all 100ms ease-out;border:0;cursor:pointer;outline:none;", " ", " ", " ", "{", " ", "}", "{", "}", ""], theme.shape.borderRadius[BorderRadiusSize.Md], $buttonType !== ButtonType.Sidebar && colorButtonMixin$1[color], $buttonType === ButtonType.Sidebar ? sizeSidebarMixin[size] : sizeButtonMixin[size], color === ButtonColor.Secondary && sizeSecondaryButtonMixin[size], Label$2, sizeButtonLabelMixin[size], (color === ButtonColor.LinkBasicPrimary || color === ButtonColor.LinkBasicSecondary) && "font-weight: 400", Badge, sizeButtonLabelMixin[size], $buttonType === ButtonType.Sidebar && css(["background-color:", ";color:", ";border:1px solid ", ";", " ", " &:disabled{color:", ";background:", ";border:none;cursor:default;}"], theme.palette[Color.ButtonPrimaryText], theme.palette[Color.LinkStateless], theme.palette[Color.BordersButton], !active && css(["&:hover{color:", ";background-color:", ";border:none;}&:active{color:", ";background-color:", ";border:none;}"], theme.palette[Color.ButtonPrimaryText], theme.palette[Color.AccentPrimaryHover], theme.palette[Color.ButtonPrimaryText], theme.palette[Color.AccentPrimaryActive]), active && css(["background-color:", ";color:", ";border:1px solid ", ";"], theme.palette[Color.Accent_1_2_Opacity], theme.palette[Color.AccentPrimaryActive], theme.palette[Color.AccentPrimaryActive]), theme.palette[Color.BordersDisabled], theme.palette[Color.AccentPrimaryDisabled]));
});
var StartIcon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$h, 'StartIcon')
}).withConfig({
  componentId: "sc-lxwit0-4"
})(function (_ref2) {
  var $loading = _ref2.$loading,
    _ref2$size = _ref2.size,
    size = _ref2$size === void 0 ? ButtonSize.Md : _ref2$size;
  return css(["display:flex;svg{animation:", ";}", ""], $loading ? 'spinner 1.2s linear infinite' : '1.2s', paddingIconLabelMixin[size]);
});
var SideArrows = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$h, 'SideBar')
}).withConfig({
  componentId: "sc-lxwit0-5"
})(function (_ref3) {
  var $sideBarType = _ref3.$sideBarType;
  return css(["display:flex;", ":12px;"], "margin-".concat($sideBarType === SideBarType.Left ? 'right' : 'left'));
});
var Divider = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$h, 'Divider')
}).withConfig({
  componentId: "sc-lxwit0-6"
})(function (_ref4) {
  var $sideBarType = _ref4.$sideBarType,
    _ref4$size = _ref4.size,
    size = _ref4$size === void 0 ? ButtonSize.Md : _ref4$size;
  return css(["border-left-style:solid;border-width:1px;", " ", ":12px;"], sizeSidebarDividerMixin[size], "margin-".concat($sideBarType === SideBarType.Left ? 'right' : 'left'));
});
var EndIcon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$h, 'EndIcon')
}).withConfig({
  componentId: "sc-lxwit0-7"
})(["display:flex;margin-left:6px;"]);
var Styled$x = applyDisplayNames({
  Button: Button$2,
  Wrapper: Wrapper$1,
  Label: Label$2,
  SideArrows: SideArrows,
  Divider: Divider,
  StartIcon: StartIcon,
  EndIcon: EndIcon,
  Badge: Badge
});
var BStyled = Styled$x;

var _excluded$1q = ["children", "startIcon", "endIcon", "badge", "color", "active", "buttonType", "sideBarType", "size", "loading", "disabled"];
var Button = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    startIcon = _ref.startIcon,
    endIcon = _ref.endIcon,
    badge = _ref.badge,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? ButtonColor.Primary : _ref$color,
    _ref$active = _ref.active,
    active = _ref$active === void 0 ? false : _ref$active,
    _ref$buttonType = _ref.buttonType,
    buttonType = _ref$buttonType === void 0 ? ButtonType.Default : _ref$buttonType,
    _ref$sideBarType = _ref.sideBarType,
    sideBarType = _ref$sideBarType === void 0 ? SideBarType.Left : _ref$sideBarType,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? ButtonSize.Md : _ref$size,
    _ref$loading = _ref.loading,
    loading = _ref$loading === void 0 ? false : _ref$loading,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    rest = _objectWithoutProperties(_ref, _excluded$1q);
  var getSideBarArrows = function getSideBarArrows(props) {
    switch (sideBarType) {
      case SideBarType.Right:
        return active ? /*#__PURE__*/React__default.createElement(TwoArrowsLeft$1, props) : /*#__PURE__*/React__default.createElement(TwoArrowsRight$1, props);
      case SideBarType.Left:
        return active ? /*#__PURE__*/React__default.createElement(TwoArrowsRight$1, props) : /*#__PURE__*/React__default.createElement(TwoArrowsLeft$1, props);
    }
  };
  var getSideBarSection = function getSideBarSection() {
    var sideBarSection = [/*#__PURE__*/React__default.createElement(BStyled.SideArrows, {
      key: "arrows",
      $sideBarType: sideBarType
    }, getSideBarArrows({
      size: getSideBarIconSize(size)
    }))];
    var divider = /*#__PURE__*/React__default.createElement(BStyled.Divider, {
      key: "divider",
      size: size,
      $sideBarType: sideBarType
    });
    if (sideBarType === SideBarType.Right) {
      sideBarSection.unshift(divider);
    } else {
      sideBarSection.push(divider);
    }
    return buttonType === ButtonType.Sidebar && sideBarSection;
  };
  return /*#__PURE__*/React__default.createElement(BStyled.Button, _extends({
    type: "button",
    $buttonType: buttonType
  }, rest, {
    disabled: loading || disabled,
    color: color,
    active: active,
    size: size,
    ref: ref
  }), sideBarType === SideBarType.Left && getSideBarSection(), /*#__PURE__*/React__default.createElement(BStyled.Wrapper, null, startIcon && /*#__PURE__*/React__default.createElement(BStyled.StartIcon, {
    $loading: loading,
    size: size
  }, typeof startIcon === 'function' ? loading ? /*#__PURE__*/React__default.createElement(SpinnerIcon, {
    size: getIconSize$2(size)
  }) : startIcon({
    size: getIconSize$2(size)
  }) : loading ? /*#__PURE__*/React__default.createElement(SpinnerIcon, {
    size: getIconSize$2(size)
  }) : startIcon), loading && !startIcon && /*#__PURE__*/React__default.createElement(BStyled.StartIcon, {
    $loading: loading
  }, /*#__PURE__*/React__default.createElement(SpinnerIcon, {
    size: getIconSize$2(size)
  })), /*#__PURE__*/React__default.createElement(BStyled.Label, null, children), endIcon && /*#__PURE__*/React__default.createElement(BStyled.EndIcon, null, typeof endIcon === 'function' ? endIcon({
    size: getIconSize$2(size)
  }) : endIcon)), sideBarType === SideBarType.Right && getSideBarSection(), badge && /*#__PURE__*/React__default.createElement(BStyled.Badge, null, /*#__PURE__*/React__default.createElement(Badge$2, {
    inline: true,
    size: 14,
    padding: "0 1px",
    badgeContent: badge,
    color: color === ButtonColor.Primary ? 'white' : 'secondary'
  })));
});
var Button$1 = Button;

var _excluded$1p = ["color", "size"];
var Undo = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1p);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 40 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M39.5112 31.2036C39.5112 41.568 31.0785 50 20.7148 50H14.0613C12.9587 50 12.0652 49.1066 12.0652 48.004V47.3386C12.0652 46.2359 12.9586 45.3425 14.0613 45.3425H20.7148C28.5107 45.3425 34.8537 38.9995 34.8537 31.2036C34.8537 23.4078 28.5107 17.0648 20.7148 17.0648H8.4394L16.8935 25.5189C17.8015 26.4266 17.8015 27.9042 16.8935 28.8119C16.0124 29.6923 14.479 29.691 13.5999 28.8119L1.17111 16.3828C0.731285 15.943 0.488892 15.3581 0.488892 14.7359C0.488892 14.1142 0.731285 13.529 1.17111 13.0894L13.6006 0.65976C14.4797 -0.220001 16.0144 -0.220001 16.8936 0.65976C17.8016 1.56722 17.8016 3.04511 16.8936 3.95246L8.43951 12.4072H20.7148C31.0785 12.4072 39.5112 20.8395 39.5112 31.2036Z",
    fill: color
  }));
});
var Undo$1 = Undo;

var _excluded$1o = ["color", "size"];
var Redo = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1o);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 40 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M0.98 31.2037C0.98 41.568 9.41216 50 19.7752 50H26.4284C27.5309 50 28.4244 49.1066 28.4244 48.004V47.3386C28.4244 46.2359 27.531 45.3425 26.4284 45.3425H19.7752C11.9798 45.3425 5.6372 38.9995 5.6372 31.2037C5.6372 23.4079 11.9798 17.0648 19.7752 17.0648H32.05L23.5964 25.5189C22.6884 26.4266 22.6884 27.9043 23.5964 28.812C24.4774 29.6924 26.0107 29.6911 26.8897 28.812L39.3178 16.3828C39.7576 15.943 40 15.3582 40 14.736C40 14.1142 39.7576 13.5291 39.3178 13.0895L26.8891 0.659821C26.01 -0.21994 24.4754 -0.21994 23.5962 0.659821C22.6883 1.56728 22.6883 3.04517 23.5962 3.95252L32.0498 12.4073H19.7752C9.41216 12.4073 0.98 20.8396 0.98 31.2037Z",
    fill: color
  }));
});
var Redo$1 = Redo;

var _excluded$1n = ["color", "size"];
var Line = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1n);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M40.1901 7.27549L7.59689 39.8687C6.83412 40.6315 6.83412 41.8681 7.59689 42.6308C8.35965 43.3936 9.59626 43.3936 10.359 42.6308L42.9522 10.0376C43.715 9.27486 43.715 8.03825 42.9522 7.27549C42.1895 6.51272 40.9529 6.51272 40.1901 7.27549Z",
    fill: color
  }));
});
var Line$1 = Line;

var _excluded$1m = ["color", "size"];
var ImageFilters = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1m);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M41.2229 16.7653C41.3215 12.426 39.7436 8.284 36.6864 5.02956C33.6292 1.77513 29.4872 -2.09808e-05 25.0493 -2.09808e-05C20.6114 -2.09808e-05 16.3708 1.77513 13.3136 5.02956C10.2564 8.18538 8.6785 12.3274 8.77712 16.7653C3.45168 19.5266 0 25.1479 0 31.1637C0 37.2781 3.25444 42.6035 8.57988 45.4635C11.0454 46.7455 13.7081 47.4359 16.2722 47.4359C19.3294 47.4359 22.288 46.5483 24.9507 44.8718C29.9803 48.1262 36.0947 48.3234 41.4201 45.4635C46.7456 42.6035 50 37.2781 50 31.1637C50 25.0493 46.6469 19.5266 41.2229 16.7653ZM22.7811 43.0966C18.6391 45.3649 13.7081 45.3649 9.56607 42.998C5.22682 40.5325 2.66272 36.1933 2.66272 31.1637C2.66272 26.43 5.12821 22.0907 9.1716 19.6252C10.1578 24.359 13.3136 28.501 17.6529 30.6706C17.4556 35.4043 19.3294 39.8422 22.7811 43.0966ZM32.1499 27.8106C31.4596 24.5562 29.783 21.499 27.3176 19.2307C30.6706 17.357 34.8126 17.0611 38.4615 18.3432C37.7712 22.2879 35.503 25.7396 32.1499 27.8106ZM20.6114 28.1065C21.3018 25.2465 22.8797 22.6824 25.0493 20.8087C27.5148 22.8797 29.1913 25.8382 29.6844 28.9941C26.7258 30.0789 23.4714 30.0789 20.4142 28.9941C20.4142 28.6982 20.5128 28.4023 20.6114 28.1065ZM25.0493 17.4556C23.57 16.4694 21.8935 15.7791 20.1183 15.3846C19.428 15.1874 18.6391 15.6805 18.5404 16.3708C18.4418 16.7653 18.5404 17.0611 18.7377 17.357C18.9349 17.6528 19.2308 17.8501 19.5266 17.9487C20.7101 18.2446 21.7949 18.639 22.7811 19.2307C20.3156 21.499 18.6391 24.4576 17.9487 27.8106C14.5957 25.7396 12.2288 22.2879 11.6371 18.3432C11.9329 18.2446 12.1302 18.1459 12.426 18.0473C12.7219 17.9487 13.0178 17.7515 13.215 17.357C13.4122 17.0611 13.4122 16.6666 13.3136 16.3708C13.1164 15.6805 12.3274 15.286 11.6371 15.4832C11.5385 15.4832 11.5385 15.4832 11.4398 15.5818C11.8343 8.48124 17.7515 2.6627 25.0493 2.6627C32.3471 2.6627 38.2643 8.38262 38.6588 15.5818C34.0237 14.2012 28.9941 14.8915 25.0493 17.4556ZM29.783 31.7554C29.5858 35.5029 27.9093 39.0532 25.0493 41.5187C22.1893 39.0532 20.4142 35.6016 20.3156 31.7554C23.3728 32.7416 26.7258 32.7416 29.783 31.7554ZM32.4458 30.6706C36.785 28.4023 39.8422 24.359 40.927 19.6252C44.9704 22.0907 47.4359 26.43 47.4359 31.1637C47.4359 36.0947 44.8718 40.5325 40.5325 42.998C36.3905 45.3649 31.4596 45.3649 27.3176 43.0966C30.7692 39.8422 32.643 35.4043 32.4458 30.6706Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M15.5819 14.8915C14.9901 14.9901 14.497 15.5818 14.497 16.1735C14.497 16.8639 15.0888 17.5542 15.8777 17.5542C16.6667 17.5542 17.2584 16.9625 17.2584 16.1735C17.2584 15.7791 17.0611 15.3846 16.7653 15.1874C16.3708 14.9901 15.9763 14.8915 15.5819 14.8915Z",
    fill: color
  }));
});

var _excluded$1l = ["color", "size"];
var Crop$1 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1l);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M5 2.00049C3.34315 2.00049 2 3.34364 2 5.00049V16.7505H5.5V5.50049H16.75V2.00049H5ZM45 2.00049H33.25V5.50049H44.5V16.7505H48V5.00049C48 3.34363 46.6569 2.00049 45 2.00049ZM5.5 33.2505H2V45.0005C2 46.6573 3.34315 48.0005 5 48.0005H16.75V44.5005H5.5V33.2505ZM48 33.2505H44.5V44.5005H33.25V48.0005H45C46.6569 48.0005 48 46.6573 48 45.0005V33.2505Z",
    fill: color
  }));
});

var _excluded$1k = ["color", "size"];
var CropLandscape = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1k);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 53 37",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M4.11841 3.93799V32.063H47.8684V3.93799H4.11841ZM3.49341 0.812988C2.1127 0.812988 0.993408 1.91229 0.993408 3.26835V32.7326C0.993408 34.0887 2.1127 35.188 3.49341 35.188H48.4934C49.8741 35.188 50.9934 34.0887 50.9934 32.7326V3.26835C50.9934 1.91229 49.8741 0.812988 48.4934 0.812988H3.49341Z",
    fill: color
  }));
});

var _excluded$1j = ["color", "size"];
var Resize$1 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1j);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M0.5 0.5H3V2.375H2.375V3H0.5V0.5Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M0.5 21.125H3V21.2693H24.7308V43H24.875V45.5L0.5 45.5001V21.125ZM22.2308 43L3 43.0001V23.7693H22.2308V43Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M43 45.5H45.5V43H43.625V43.625H43V45.5Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M45.5 3V0.5H43V2.375H43.625V3H45.5Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M6.125 0.5V3H9.875V0.5H6.125Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M13.625 0.5V3H17.375V0.5H13.625Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M21.125 0.5V3H24.875V0.5H21.125Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M28.625 0.5V3H32.375V0.5H28.625Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M36.125 0.5V3H39.875V0.5H36.125Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M45.5 6.125H43V9.875H45.5V6.125Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M45.5 13.625H43V17.375H45.5V13.625Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M45.5 21.125H43V24.875H45.5V21.125Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M45.5 28.625H43V32.375H45.5V28.625Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M45.5 36.125H43V39.875H45.5V36.125Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M39.875 45.5V43H36.125V45.5H39.875Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M32.375 45.5V43H28.625V45.5H32.375Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M0.5 17.375H3V13.625H0.5V17.375Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M0.5 9.875H3V6.125H0.5V9.875Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M35.1391 9.23718L26.3209 17.8619C25.8274 18.3446 25.8186 19.136 26.3013 19.6295C26.784 20.1231 27.5754 20.1319 28.069 19.6492L37.1012 10.815V16.9907C37.1012 17.681 37.6609 18.2407 38.3512 18.2407C39.0416 18.2407 39.6012 17.681 39.6012 16.9907V7.98718C39.6012 7.29683 39.0416 6.73718 38.3512 6.73718L29.3477 6.73718C28.6574 6.73718 28.0977 7.29683 28.0977 7.98718C28.0977 8.67754 28.6574 9.23718 29.3477 9.23718L35.1391 9.23718Z",
    fill: color
  }));
});

var _excluded$1i = ["color", "size"];
var Watermark$1 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1i);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M42.1323 0.500031H2.73399C1.42693 0.500031 0.399963 1.527 0.399963 2.83406V43.166C0.399963 44.4731 1.42693 45.5 2.73399 45.5H42.1323C43.4394 45.5 44.4664 44.4731 44.4664 43.166V2.83406C44.4664 1.527 43.4394 0.500031 42.1323 0.500031ZM41.6655 3.30086V25.8942L36.624 21.693C36.1572 21.2262 35.4103 21.2262 34.8502 21.5996L28.595 26.2677L15.5244 11.2365C15.3377 10.9565 14.9643 10.7697 14.5908 10.7697C14.2174 10.7697 13.8439 10.9565 13.5639 11.1432L3.20079 21.693V3.30086H41.6655ZM3.20079 42.6992V39.8984C4.22776 40.3652 5.72154 40.832 7.58876 40.832C9.36262 40.832 10.483 40.2718 11.3232 39.805C12.0701 39.4316 12.5369 39.1515 13.3771 39.2448C14.3108 39.3382 14.8709 39.5249 15.4311 39.805C16.2713 40.0851 17.2049 40.4585 18.9788 40.4585V38.3112C17.6717 38.3112 17.0182 38.0312 16.178 37.7511C15.5244 37.471 14.6842 37.1909 13.5639 37.0975C12.0701 36.9108 11.1365 37.471 10.2962 37.8444C9.54934 38.2179 8.80245 38.5913 7.4954 38.5913C5.06801 38.5913 3.6676 37.7511 3.10743 37.2843V35.0436C4.1344 35.5104 5.62818 35.9772 7.4954 35.9772C9.26926 35.9772 10.3896 35.417 11.2298 34.9502C11.9767 34.5768 12.4435 34.2967 13.2838 34.3901C14.2174 34.4834 14.7776 34.6702 15.3377 34.9502C16.178 35.2303 17.1116 35.6038 18.8854 35.6038V33.4565C17.5784 33.4565 16.9249 33.1764 16.0846 32.8963C15.4311 32.6162 14.5908 32.3361 13.4705 32.2428C11.9767 32.056 11.0431 32.6162 10.2029 32.9897C9.45598 33.3631 8.70909 33.7365 7.40204 33.7365C4.97465 33.7365 3.57424 32.8963 3.01407 32.4295V30.1888C4.04104 30.6556 5.53482 31.1224 7.40204 31.1224C9.1759 31.1224 10.2962 30.5623 11.1365 30.0955C11.8834 29.722 12.3502 29.4419 13.1904 29.5353C14.124 29.6287 14.6842 29.8154 15.2444 30.0955C16.0846 30.3755 17.0182 30.749 18.7921 30.749V28.6017C17.485 28.6017 16.8315 28.3216 15.9912 28.0415C15.3377 27.7614 14.4975 27.4814 13.3771 27.388C11.8834 27.2013 10.9498 27.7614 10.1095 28.1349C9.36262 28.5083 8.61573 28.8818 7.30868 28.8818C4.88129 28.8818 3.48088 28.0415 2.92071 27.5747V25.7075L14.124 14.2241L27.1012 29.0685C27.568 29.6287 28.4083 29.722 28.9684 29.2552L35.4103 24.4004L41.3854 29.4419V42.6058H3.20079V42.6992Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M32.7029 15.7179C35.4103 15.7179 37.651 13.4772 37.651 10.7697C37.651 8.06227 35.4103 5.82161 32.7029 5.82161C29.9954 5.82161 27.7547 8.06227 27.7547 10.7697C27.7547 13.4772 29.9954 15.7179 32.7029 15.7179ZM32.7029 8.15563C34.1966 8.15563 35.317 9.36933 35.317 10.7697C35.317 12.1702 34.1033 13.3838 32.7029 13.3838C31.3025 13.3838 30.0888 12.1702 30.0888 10.7697C30.0888 9.36933 31.2091 8.15563 32.7029 8.15563Z",
    fill: color
  }));
});

var _excluded$1h = ["color", "size"];
var Images = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1h);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M43.4164 5.98527H1.06762C0.533808 5.98527 0 6.53674 0 7.08821V49C0 49.7353 0.533808 50.1029 1.06762 50.1029H43.4164C44.1281 50.1029 44.484 49.7353 44.484 49V7.08821C44.484 6.53674 44.1281 5.98527 43.4164 5.98527ZM35.7651 13.1544C37.9004 13.1544 39.5 15.0809 39.5 17.1029C39.5 19.3088 37.7224 20.6029 35.7651 20.6029C33.8078 20.6029 32 19.125 32 17.1029C31.8221 14.897 33.6299 13.1544 35.7651 13.1544ZM1.9573 45.875C2.13523 45.6912 14.2349 30.9853 16.548 27.8603C16.726 27.4926 17.2598 27.4926 17.4377 27.8603L29.7153 43.4853L35.0534 37.4191C35.4093 37.0514 35.7651 37.2353 35.9431 37.4191L42.5267 45.875H1.9573Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M48.9164 -3.8147e-06H6.74555C6.03381 -3.8147e-06 5.5 0.367643 5.5 1.10294V4.29294H7.5V2.20588H47.6892V39H46.2473V44.1176H48.9164C49.6281 44.1176 49.984 43.75 49.984 43.0147V1.10294C49.984 0.367643 49.6281 -3.8147e-06 48.9164 -3.8147e-06Z",
    fill: color
  }));
});

var _excluded$1g = ["color", "size"];
var Reset = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1g);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 52 52",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M25 0C38.8071 0 50 11.1929 50 25C50 38.807 38.8071 50 25 50C14.111 50 4.854 43.0397 1.42326 33.333C0.963005 32.0312 1.6455 30.603 2.94725 30.143C4.249 29.6828 5.67725 30.365 6.1375 31.667C8.88425 39.4382 16.2957 45 25 45C36.0457 45 45 36.0457 45 25C45 13.9543 36.0457 5 25 5C21.121 5 17.8345 6.40292 14.7095 8.6015C12.6078 10.0803 10.663 11.8526 8.6895 13.75H16.25C17.6308 13.75 18.75 14.8693 18.75 16.25C18.75 17.6307 17.6308 18.75 16.25 18.75H2.5C1.11926 18.75 0 17.6307 0 16.25V2.5C0 1.1193 1.11926 0 2.5 0C3.88075 0 5 1.1193 5 2.5V10.3593C7.12075 8.31457 9.38601 6.23342 11.8325 4.51222C15.5128 1.9229 19.7882 0 25 0Z",
    fill: color
  }));
});

var _excluded$1f = ["color", "size"];
var Text = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1f);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M39.4229 8.89453L39.7891 16.6582H38.8613C38.6823 15.291 38.4382 14.3145 38.1289 13.7285C37.6243 12.7845 36.9489 12.0928 36.1025 11.6533C35.2725 11.1976 34.1738 10.9697 32.8066 10.9697H28.1436V36.2627C28.1436 38.2972 28.3633 39.5667 28.8027 40.0713C29.4212 40.7549 30.3734 41.0967 31.6592 41.0967H32.8066V42H18.7686V41.0967H19.9404C21.3402 41.0967 22.333 40.6735 22.9189 39.8271C23.277 39.3063 23.4561 38.1182 23.4561 36.2627V10.9697H19.4766C17.9303 10.9697 16.8317 11.0837 16.1807 11.3115C15.3343 11.6208 14.61 12.2148 14.0078 13.0938C13.4056 13.9727 13.0475 15.1608 12.9336 16.6582H12.0059L12.3965 8.89453H39.4229Z",
    fill: color
  }));
});
var Text$1 = Text;

var _excluded$1e = ["color", "size"];
var TextAlignLeft = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1e);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 45 29",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M0 1.89502C0 1.20466 0.559644 0.64502 1.25 0.64502H28.75C29.4404 0.64502 30 1.20466 30 1.89502C30 2.58538 29.4404 3.14502 28.75 3.14502H1.25C0.559645 3.14502 0 2.58538 0 1.89502Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M0 14.395C0 13.7047 0.559644 13.145 1.25 13.145H43.75C44.4404 13.145 45 13.7047 45 14.395C45 15.0854 44.4404 15.645 43.75 15.645H1.25C0.559645 15.645 0 15.0854 0 14.395Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M1.25 25.645C0.559644 25.645 0 26.2047 0 26.895C0 27.5854 0.559645 28.145 1.25 28.145H28.75C29.4404 28.145 30 27.5854 30 26.895C30 26.2047 29.4404 25.645 28.75 25.645H1.25Z",
    fill: color
  }));
});

var _excluded$1d = ["color", "size"];
var TextAlignCenter = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1d);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 46 28",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M38 1.50049C38 0.810132 37.4404 0.250488 36.75 0.250488H9.25C8.55964 0.250488 8 0.810132 8 1.50049C8 2.19084 8.55964 2.75049 9.25 2.75049H36.75C37.4404 2.75049 38 2.19084 38 1.50049Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M45.5 14.0005C45.5 13.3101 44.9404 12.7505 44.25 12.7505H1.75C1.05964 12.7505 0.5 13.3101 0.5 14.0005C0.5 14.6908 1.05964 15.2505 1.75 15.2505H44.25C44.9404 15.2505 45.5 14.6908 45.5 14.0005Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M36.75 25.2505C37.4404 25.2505 38 25.8101 38 26.5005C38 27.1908 37.4404 27.7505 36.75 27.7505H9.25C8.55964 27.7505 8 27.1908 8 26.5005C8 25.8101 8.55964 25.2505 9.25 25.2505H36.75Z",
    fill: color
  }));
});

var _excluded$1c = ["color", "size"];
var RotationLeft = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1c);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 45 43",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M2.66027 14.6997L3.59752 14.4437L3.09232 3.93218C3.05918 3.24262 2.47331 2.71049 1.78375 2.74363C1.09419 2.77677 0.562061 3.36263 0.595202 4.05219L1.16041 15.8123C1.19355 16.5018 1.77942 17.034 2.46898 17.0008L14.2291 16.4356C14.9186 16.4025 15.4508 15.8166 15.4176 15.1271C15.3845 14.4375 14.7986 13.9054 14.1091 13.9385L5.48447 14.353C8.23224 7.41077 15.0052 2.50049 22.925 2.50049C33.2802 2.50049 41.6748 10.8951 41.6748 21.2503C41.6748 22.4035 41.5706 23.5324 41.3713 24.6281L43.7968 25.261C44.0449 23.9622 44.1748 22.6214 44.1748 21.2503C44.1748 9.51435 34.6609 0.000488281 22.925 0.000488281C15.0467 0.000488281 8.16974 4.28779 4.50001 10.6566L2.66027 14.6997Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M9.88491 34.708L8.27773 36.6309C8.82614 37.1539 9.40248 37.6479 10.0043 38.1103L11.5276 36.128C10.9528 35.6863 10.4043 35.2121 9.88491 34.708Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M12.3142 39.6567C13.9038 40.5764 15.6235 41.2961 17.439 41.7814L18.0846 39.3662C16.4846 38.9385 14.9685 38.3041 13.5662 37.4928L12.3142 39.6567Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M20.1654 42.3209C21.0738 42.4394 22.0002 42.5005 22.9408 42.5005C23.8815 42.5005 24.8079 42.4394 25.7162 42.3209L25.3929 39.8419C24.5915 39.9465 23.7731 40.0005 22.9408 40.0005C22.1086 40.0005 21.2902 39.9465 20.4888 39.8419L20.1654 42.3209Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M28.4427 41.7814C30.2582 41.2961 31.9779 40.5764 33.5674 39.6567L32.3154 37.4928C30.9132 38.3041 29.397 38.9385 27.7971 39.3662L28.4427 41.7814Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M35.8774 38.1103C37.3494 36.9791 38.6692 35.6594 39.8004 34.1873L37.8181 32.664C36.8193 33.9638 35.6538 35.1292 34.354 36.128L35.8774 38.1103Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M41.3468 31.8773C42.2665 30.2878 42.9862 28.5681 43.4715 26.7526L41.0563 26.107C40.6286 27.707 39.9942 29.2231 39.1829 30.6253L41.3468 31.8773Z",
    fill: color
  }));
});
var RotationLeft$1 = RotationLeft;

var _excluded$1b = ["color", "size"];
var RotationRight = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1b);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("g", {
    clipPath: "url(#clip0)"
  }, /*#__PURE__*/React__default.createElement("path", {
    d: "M50.2753 26.8064H24.4689L36.5656 14.7096C32.735 11.0806 28.7027 9.66933 23.6624 9.66933C13.3802 9.66933 6.32372 15.3145 3.50118 25.5967L0.275391 24.7903C3.50118 13.0968 11.9689 6.44355 23.6625 6.44355C29.7109 6.44355 34.348 8.25806 38.9851 12.2903L50.2754 1L50.2753 26.8064Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M34.5495 46.3628L33.1382 44.3467C33.743 43.9435 34.3479 43.3386 34.9527 42.9355L36.5656 44.75C35.9608 45.1532 35.3559 45.758 34.5495 46.3628Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M27.2913 49.387C26.6865 49.5886 26.0817 49.5886 25.4768 49.7903L25.0736 47.3709C26.4848 47.1693 27.8962 46.7661 29.3074 46.3628L30.1139 48.5806C29.1058 48.9838 28.2994 49.1854 27.2913 49.387ZM20.4365 49.9919C18.8235 49.7903 17.2107 49.5886 15.5978 48.9838L16.4042 46.766C17.8155 47.1693 19.2268 47.5724 20.6381 47.5724L20.4365 49.9919ZM11.1623 46.9677C9.75104 46.1612 8.33971 45.1532 7.13003 43.9435L8.74296 42.129C9.75104 43.137 10.9607 43.9435 12.372 44.7499L11.1623 46.9677ZM3.90425 40.3144C2.89617 38.9032 2.08974 37.2903 1.6865 35.879L3.90425 35.0726C4.50909 36.4838 5.11393 37.6935 5.92036 38.9032L3.90425 40.3144Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M3.2996 30.0322L0.880241 30.2338C0.678647 29.2257 0.678647 28.4193 0.678647 27.4112H3.09801C3.09801 28.4193 3.2996 29.2258 3.2996 30.0322Z",
    fill: color
  })), /*#__PURE__*/React__default.createElement("defs", null, /*#__PURE__*/React__default.createElement("rect", {
    width: "50",
    height: "50",
    fill: "white",
    transform: "translate(0.275391)"
  })));
});
var RotationRight$1 = RotationRight;

var _excluded$1a = ["color", "size"];
var LockOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1a);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 51 51",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M40.5 20H38V12.5C38 5.6 32.4 0 25.5 0C18.6 0 13 5.6 13 12.5V20H10.5C9.1 20 8 21.1 8 22.5V47.5C8 48.9 9.1 50 10.5 50H40.5C41.9 50 43 48.9 43 47.5V22.5C43 21.1 41.9 20 40.5 20ZM15.5 12.5C15.5 7 20 2.5 25.5 2.5C31 2.5 35.5 7 35.5 12.5V20H15.5V12.5ZM40.5 47.5H10.5V22.5H40.5V47.5Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M24.3 37.3V41.3H26.8V37.3C28.3 36.8 29.3 35.4 29.3 33.8C29.3 31.7 27.6 30 25.5 30C23.4 30 21.7 31.7 21.7 33.8C21.8 35.4 22.8 36.8 24.3 37.3ZM25.5 32.5C26.2 32.5 26.8 33.1 26.8 33.8C26.8 34.5 26.2 35.1 25.5 35.1C24.8 35.1 24.2 34.5 24.2 33.8C24.3 33.1 24.8 32.5 25.5 32.5Z",
    fill: color
  }));
});
var LockOutline$1 = LockOutline;

var _excluded$19 = ["color", "size"];
var UnlockOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$19);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 52 52",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M36.2754 7.5C34.2754 3.1 29.8754 0 24.7754 0C17.8754 0 12.2754 5.6 12.2754 12.5V20H9.77539C8.37539 20 7.27539 21.1 7.27539 22.5V47.5C7.27539 48.9 8.37539 50 9.77539 50H39.7754C41.1754 50 42.2754 48.9 42.2754 47.5V22.5C42.2754 21.1 41.1754 20 39.7754 20H14.7754V12.5C14.7754 7 19.2754 2.5 24.7754 2.5C28.4754 2.5 31.7754 4.5 33.4754 7.6L36.2754 7.5ZM39.7754 47.5H9.77539V22.5H39.7754V47.5Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M24.7754 30C22.6754 30 20.9754 31.7 20.9754 33.7C20.9754 35.3 21.9754 36.7 23.4754 37.2V41.2H25.9754V37.2C27.4754 36.7 28.4754 35.3 28.4754 33.7C28.5754 31.7 26.8754 30 24.7754 30ZM24.7754 35C24.0754 35 23.4754 34.4 23.4754 33.7C23.4754 33 24.0754 32.4 24.7754 32.4C25.4754 32.4 25.9754 33 25.9754 33.7C25.9754 34.4 25.4754 35 24.7754 35Z",
    fill: color
  }));
});
var UnlockOutline$1 = UnlockOutline;

var _excluded$18 = ["color", "size"];
var Point = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$18);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("circle", {
    cx: "25",
    cy: "25",
    r: "8.33333",
    fill: color
  }));
});

var _excluded$17 = ["color", "size"];
var About = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$17);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M42.6793 7.32203C32.916 -2.44013 17.0863 -2.44122 7.32197 7.32203C-2.44128 17.0853 -2.4402 32.915 7.32197 42.6793C17.0852 52.4404 32.9149 52.4415 42.6793 42.6793C52.4414 32.915 52.4403 17.0864 42.6793 7.32203ZM28.2605 35.8705C28.2605 37.6716 26.8007 39.1314 24.9995 39.1314C23.1984 39.1314 21.7386 37.6716 21.7386 35.8705V22.8267C21.7386 21.0256 23.1984 19.5658 24.9995 19.5658C26.8007 19.5658 28.2605 21.0256 28.2605 22.8267V35.8705ZM24.9419 17.2527C23.0636 17.2527 21.8114 15.9222 21.8506 14.2798C21.8114 12.558 23.0636 11.2678 24.98 11.2678C26.8974 11.2678 28.1105 12.5591 28.1507 14.2798C28.1496 15.9222 26.8985 17.2527 24.9419 17.2527Z",
    fill: color
  }));
});

var _excluded$16 = ["color", "size"];
var Warning = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$16);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M48.9856 38.314L31.3034 3.80423C29.9688 1.42247 27.6118 0 24.9985 0C22.3852 0 20.0282 1.42247 18.6936 3.80423C18.6836 3.82245 18.6751 3.84067 18.665 3.8589L1.04158 38.2594C-0.321602 40.6914 -0.347383 43.612 0.971367 46.0713C2.29314 48.5321 4.67439 50 7.345 50H42.5544C45.225 50 47.7041 48.5321 49.0258 46.0713C50.3445 43.6121 50.3188 40.6913 48.9856 38.314ZM22.0659 15.8013C22.0659 14.0842 23.3789 12.6924 24.9985 12.6924C26.6182 12.6924 27.9311 14.0843 27.9311 15.8013V28.2372C27.9311 29.9541 26.6181 31.3462 24.9985 31.3462C23.3789 31.3462 22.0659 29.954 22.0659 28.2372V15.8013ZM24.9985 43.7821C22.5728 43.7821 20.5995 41.6902 20.5995 39.1186C20.5995 36.5471 22.5727 34.4552 24.9985 34.4552C27.4242 34.4552 29.3974 36.5471 29.3974 39.1186C29.3975 41.6901 27.4243 43.7821 24.9985 43.7821Z",
    fill: color
  }));
});

var _excluded$15 = ["color", "size"];
var InfoOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$15);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M25 50C11.2033 50 0 38.7967 0 25C0 11.2033 11.2033 0 25 0C38.7967 0 50 11.2033 50 25C50 38.7967 38.6929 50 25 50ZM25 3.52697C13.1743 3.52697 3.63071 13.1743 3.63071 24.8963C3.63071 36.6183 13.278 46.2656 25 46.2656C36.8257 46.2656 46.3693 36.6183 46.3693 24.8963C46.3693 13.1743 36.8257 3.52697 25 3.52697Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M28.3755 13.125C28.3755 11.3992 26.9765 10 25.2505 10C23.5245 10 22.1255 11.3992 22.1255 13.125C22.1255 14.8516 23.5245 16.25 25.2505 16.25C26.9765 16.25 28.3755 14.8516 28.3755 13.125Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M20.563 38.5H29.938C30.8009 38.5 31.5005 37.8012 31.5005 36.9375C31.5005 36.0746 30.8009 35.375 29.938 35.375H28.3755V20.9375C28.3755 20.0746 27.6759 19.375 26.813 19.375H20.563C19.7001 19.375 19.0005 20.0746 19.0005 20.9375C19.0005 21.8012 19.7001 22.5 20.563 22.5H22.1255V35.375H20.563C19.7001 35.375 19.0005 36.0746 19.0005 36.9375C19.0005 37.8012 19.7001 38.5 20.563 38.5Z",
    fill: color
  }));
});

var _excluded$14 = ["color", "size"];
var ImageOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$14);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M31.3032 17.8662C34.0646 17.8662 36.3032 15.6276 36.3032 12.8662C36.3032 10.1048 34.0646 7.86618 31.3032 7.86618C28.5418 7.86618 26.3032 10.1048 26.3032 12.8662C26.3032 15.6276 28.5418 17.8662 31.3032 17.8662ZM31.3032 15.3662C32.6839 15.3662 33.8032 14.2469 33.8032 12.8662C33.8032 11.4855 32.6839 10.3662 31.3032 10.3662C29.9225 10.3662 28.8032 11.4855 28.8032 12.8662C28.8032 14.2469 29.9225 15.3662 31.3032 15.3662Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M15.9372 15.1063C16.3967 15.0794 16.8338 15.3071 17.075 15.6991L25.0831 28.7141L29.8357 24.4289C30.0935 24.1966 30.4362 24.0818 30.7819 24.1121C31.1276 24.1424 31.4452 24.3151 31.6586 24.5887L40.2822 35.6497C40.5759 36.0264 40.6292 36.5376 40.4196 36.9668C40.21 37.396 39.7741 37.6683 39.2964 37.6683H6.70331C6.2766 37.6683 5.87937 37.4506 5.64974 37.091C5.42011 36.7313 5.38981 36.2794 5.56937 35.8923L14.8765 15.8282C15.0702 15.4106 15.4777 15.1333 15.9372 15.1063ZM16.1652 18.991L8.66108 35.1683H36.7368L30.5126 27.1848L25.6422 31.5761C25.3666 31.8246 24.9947 31.9378 24.6274 31.885C24.26 31.8322 23.9351 31.6189 23.7406 31.3027L16.1652 18.991Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M0.5 3C0.5 1.61929 1.61929 0.5 3 0.5H43C44.3807 0.5 45.5 1.61929 45.5 3V43C45.5 44.3807 44.3807 45.5 43 45.5H3C1.61929 45.5 0.5 44.3807 0.5 43V3ZM3 3H43V43H3V3Z",
    fill: color
  }));
});
var ImageOutline$1 = ImageOutline;

var _excluded$13 = ["color", "size"];
var Custom = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$13);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M0.562515 0.562512H3.68752V2.90626H2.90627V3.68751H0.562515V0.562512ZM0.562515 44.3125V47.4375H3.68752V45.0938H2.90627V44.3125H0.562515ZM44.3125 47.4375H47.4375V44.3125H45.0938V45.0938H44.3125V47.4375ZM47.4375 3.68751V0.562512H44.3125V2.90626H45.0938V3.68751H47.4375ZM7.59376 0.562512V3.68751H12.2813V0.562512H7.59376ZM16.9688 0.562512V3.68751H21.6563V0.562512H16.9688ZM26.3438 0.562512V3.68751H31.0313V0.562512H26.3438ZM35.7188 0.562512V3.68751H40.4063V0.562512H35.7188ZM47.4375 7.59376H44.3125V12.2813H47.4375V7.59376ZM47.4375 16.9688H44.3125V21.6563H47.4375V16.9688ZM47.4375 26.3438H44.3125V31.0313H47.4375V26.3438ZM47.4375 35.7188H44.3125V40.4063H47.4375V35.7188ZM40.4063 47.4375V44.3125H35.7188V47.4375H40.4063ZM31.0313 47.4375V44.3125H26.3438V47.4375H31.0313ZM21.6563 47.4375V44.3125H16.9688V47.4375H21.6563ZM12.2813 47.4375V44.3125H7.59377V47.4375H12.2813ZM0.562515 40.4063H3.68752V35.7188H0.562515V40.4063ZM0.562515 31.0313H3.68752V26.3438H0.562515V31.0313ZM0.562515 21.6563H3.68752V16.9688H0.562515V21.6563ZM0.562515 12.2813H3.68752V7.59376H0.562515V12.2813Z",
    fill: color
  }));
});
var Custom$1 = Custom;

var _excluded$12 = ["color", "size"];
var FlipY$1 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$12);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M37.5001 24.0625C38.2086 24.0625 38.8284 23.5858 39.0102 22.901C39.1921 22.2162 38.8904 21.4948 38.2753 21.1433L3.27531 1.14333C2.79171 0.866989 2.19757 0.868973 1.71583 1.14854C1.23409 1.4281 0.937592 1.94298 0.937592 2.49996V22.5C0.937592 23.3629 1.63715 24.0625 2.50009 24.0625L37.5001 24.0625ZM4.06259 20.9375L4.06259 5.19243L31.6164 20.9375L4.06259 20.9375Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M38.2753 28.8566C38.8904 28.5051 39.1921 27.7837 39.0102 27.0989C38.8284 26.4142 38.2086 25.9375 37.5001 25.9375H35.3126V26.9504L34.5374 27.3933L35.3126 28.75V29.0625H35.4912L36.0878 30.1066L38.2753 28.8566Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M27.3378 35.1066L31.7128 32.6066L30.1624 29.8933L25.7874 32.3933L27.3378 35.1066Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M30.9376 25.9375H26.5626L26.5626 29.0625H30.9376L30.9376 25.9375Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M18.5878 40.1066L22.9628 37.6066L21.4124 34.8933L17.0374 37.3933L18.5878 40.1066Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M22.1876 25.9375H17.8126V29.0625H22.1876V25.9375Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M9.83781 45.1066L14.2128 42.6066L12.6624 39.8933L8.28738 42.3933L9.83781 45.1066Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M13.4376 25.9375H9.0626V29.0625H13.4376V25.9375Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M3.27531 48.8566L5.46281 47.6066L4.06259 45.1562V45H3.97331L3.91238 44.8933L3.72578 45H0.937592V47.5C0.937592 48.0569 1.23409 48.5718 1.71583 48.8514C2.19758 49.1309 2.79171 49.1329 3.27531 48.8566Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M4.6876 25.9375L2.50009 25.9375C1.63715 25.9375 0.937592 26.637 0.937592 27.5V30H4.06259V29.0625H4.6876V25.9375Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M0.937592 35V40L4.06259 40V35H0.937592Z",
    fill: color
  }));
});

var _excluded$11 = ["color", "size"];
var FlipX$1 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$11);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M24.0625 1.93758C24.0625 1.22909 23.5858 0.609274 22.901 0.427427C22.2163 0.245581 21.4949 0.547225 21.1434 1.16237L1.14337 39.2874C0.867028 39.771 0.869012 40.3651 1.14858 40.8468C1.42814 41.3286 1.94302 41.6251 2.5 41.6251H22.5C23.3629 41.6251 24.0625 40.9255 24.0625 40.0626V1.93758ZM20.9375 38.5001H5.19247L20.9375 7.82128V38.5001Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M28.8566 1.16237C28.5051 0.547225 27.7837 0.245581 27.099 0.427428C26.4142 0.609274 25.9375 1.22909 25.9375 1.93758V4.12508H26.9504L27.3934 4.9003L28.75 4.12508H29.0625V3.94651L30.1066 3.34986L28.8566 1.16237Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M35.1066 12.0999L32.6066 7.72486L29.8934 9.2753L32.3934 13.6503L35.1066 12.0999Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M25.9375 8.50008V12.8751H29.0625V8.50008H25.9375Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M40.1066 23.9749L37.6066 19.5999L34.8934 21.1503L37.3934 25.5253L40.1066 23.9749Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M25.9375 20.3751V24.7501H29.0625V20.3751H25.9375Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M45.1066 32.7249L42.6066 28.3499L39.8934 29.9003L42.3934 34.2753L45.1066 32.7249Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M25.9375 29.1251V33.5001H29.0625V29.1251H25.9375Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M48.8566 39.2874L47.6066 37.0999L45.1562 38.5001H45V38.5894L44.8934 38.6503L45 38.8369V41.6251H47.5C48.057 41.6251 48.5719 41.3286 48.8514 40.8468C49.131 40.3651 49.133 39.771 48.8566 39.2874Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M25.9375 37.8751V40.0626C25.9375 40.9255 26.6371 41.6251 27.5 41.6251H30V38.5001H29.0625V37.8751H25.9375Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M35 41.6251H40V38.5001H35V41.6251Z",
    fill: color
  }));
});

var _excluded$10 = ["color", "size"];
var Ellipse = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$10);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 52 52",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M25.2047 46.875C37.2859 46.875 47.0797 37.0812 47.0797 25C47.0797 12.9188 37.2859 3.125 25.2047 3.125C13.1235 3.125 3.32968 12.9188 3.32968 25C3.32968 37.0812 13.1235 46.875 25.2047 46.875ZM25.2047 50C39.0118 50 50.2047 38.8071 50.2047 25C50.2047 11.1929 39.0118 0 25.2047 0C11.3976 0 0.204681 11.1929 0.204681 25C0.204681 38.8071 11.3976 50 25.2047 50Z",
    fill: color
  }));
});
var Ellipse$1 = Ellipse;

var _excluded$$ = ["color", "size"];
var Landscape = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$$);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 51 36",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M4.11841 3.93805V32.063H47.8684V3.93805H4.11841ZM3.49341 0.813049C2.1127 0.813049 0.993408 1.91235 0.993408 3.26841V32.7327C0.993408 34.0887 2.1127 35.188 3.49341 35.188H48.4934C49.8741 35.188 50.9934 34.0887 50.9934 32.7327V3.26841C50.9934 1.91235 49.8741 0.813049 48.4934 0.813049H3.49341Z",
    fill: color
  }));
});
var Landscape$1 = Landscape;

var _excluded$_ = ["color", "size"];
var Stroke = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$_);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M5.50015 7.9997C5.50015 6.61898 6.61944 5.49969 8.00015 5.49969H38.0002C39.3809 5.49969 40.5002 6.61898 40.5002 7.99969V37.9997C40.5002 39.3804 39.3809 40.4997 38.0002 40.4997H8.00015C6.61944 40.4997 5.50015 39.3804 5.50015 37.9997V7.9997ZM8.00015 7.99969H38.0002V37.9997H8.00015V7.99969Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M0.5 3C0.5 1.61929 1.61929 0.5 3 0.5H43C44.3807 0.5 45.5 1.61929 45.5 3V43C45.5 44.3807 44.3807 45.5 43 45.5H3C1.61929 45.5 0.5 44.3807 0.5 43V3ZM3 3H43V43H3V3Z",
    fill: color
  }));
});
var Stroke$1 = Stroke;

var _excluded$Z = ["color", "size"];
var Transparency = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$Z);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M0.166672 0.166664H8.50001V8.5H0.166672V0.166664Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M16.8333 8.5H8.50001V16.8333H0.166672V25.1667H8.50001V33.5H0.166672V41.8333H8.50001V33.5H16.8333V41.8333H25.1667V33.5H33.5V41.8333H41.8333V33.5H33.5V25.1667H41.8333V16.8333H33.5V8.5H41.8333V0.166664H33.5V8.5H25.1667V0.166664H16.8333V8.5ZM16.8333 16.8333V8.5H25.1667V16.8333H16.8333ZM16.8333 25.1667V33.5H25.1667V25.1667H33.5V16.8333H25.1667V25.1667H16.8333ZM16.8333 25.1667H8.50001V16.8333H16.8333V25.1667Z",
    fill: color
  }));
});
var Transparency$1 = Transparency;

var _excluded$Y = ["color", "size"];
var Shadow = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$Y);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M2.95831 0.458374C1.5776 0.458374 0.458313 1.57766 0.458313 2.95837V35.4584C0.458313 36.8391 1.5776 37.9584 2.95831 37.9584H7.54167V43.7917C7.54167 45.8627 9.2206 47.5417 11.2917 47.5417H43.7917C45.8627 47.5417 47.5417 45.8627 47.5417 43.7917V11.2917C47.5417 9.22059 45.8627 7.54166 43.7917 7.54166H37.9583V2.95837C37.9583 1.57766 36.839 0.458374 35.4583 0.458374H2.95831ZM35.4583 2.95837H2.95831L2.95831 35.4584H35.4583V2.95837ZM15.7267 37.9584L10.0417 43.746V37.9584H15.7267ZM11.5135 45.0417L18.4712 37.9584H28.5529L21.4696 45.0417H11.5135ZM24.4159 45.0417H34.2932L45.0417 34.1339V24.0207L37.9583 31.3242V35.4584C37.9583 36.8391 36.839 37.9584 35.4583 37.9584H31.4912C31.4689 37.9859 31.445 38.0126 31.4194 38.0382L24.4159 45.0417ZM45.0417 21.3515L37.9583 28.655V18.9107L45.0417 11.8338V21.3515ZM37.0311 45.0417H43.7917C44.482 45.0417 45.0417 44.482 45.0417 43.7917V36.9124L37.0311 45.0417ZM43.8844 10.045C43.8538 10.0428 43.8229 10.0417 43.7917 10.0417H37.9583V15.9657L43.8844 10.045Z",
    fill: color
  }));
});
var Shadow$1 = Shadow;

var _excluded$X = ["color", "size"];
var RadiusCorner = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$X);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M3 3H23V0.5H3C1.61929 0.5 0.5 1.61929 0.5 3V43C0.5 44.3807 1.61929 45.5 3 45.5H43C44.3807 45.5 45.5 44.3807 45.5 43V23H43V43H3V3Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M45.5 7.25076H43V5.50076C43 5.15718 42.9321 4.83576 42.8113 4.54446L45.1206 3.58682C45.3651 4.17636 45.5 4.82281 45.5 5.50076V7.25076Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M24.75 0.500763V3.00076H28.25V0.500763H24.75Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M31.75 0.500763V3.00076H35.25V0.500763H31.75Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M38.75 0.500763V3.00076H40.5C40.8436 3.00076 41.165 3.06868 41.4563 3.18948L42.414 0.880166C41.8244 0.635694 41.178 0.500763 40.5 0.500763H38.75Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M45.5 10.7508H43V14.2508H45.5V10.7508Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M45.5 17.7508H43V21.2508H45.5V17.7508Z",
    fill: color
  }));
});
var RadiusCorner$1 = RadiusCorner;

var _excluded$W = ["color", "size"];
var Position = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$W);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M9.25008 9.24878H11.7501V10.9675H10.9688V11.7488H9.25008V9.24878Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M9.25008 34.2488V36.7488H11.7501V35.03H10.9688V34.2488H9.25008Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M34.2501 36.7488H36.7501V34.2488H35.0313V35.03H34.2501V36.7488Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M36.7501 11.7488V9.24878H34.2501V10.9675H35.0313V11.7488H36.7501Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M14.4063 9.24878V11.7488H17.8438V9.24878H14.4063Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M21.2813 9.24878V11.7488H24.7188V9.24878H21.2813Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M28.1563 9.24878V11.7488H31.5938V9.24878H28.1563Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M36.7501 14.405H34.2501V17.8425H36.7501V14.405Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M36.7501 21.28H34.2501V24.7175H36.7501V21.28Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M36.7501 28.155H34.2501V31.5925H36.7501V28.155Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M31.5938 36.7488V34.2488H28.1563V36.7488H31.5938Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M24.7188 36.7488V34.2488H21.2813V36.7488H24.7188Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M17.8438 36.7488V34.2488H14.4063V36.7488H17.8438Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M9.25008 31.5925H11.7501V28.155H9.25008V31.5925Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M9.25008 24.7175H11.7501V21.28H9.25008V24.7175Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M9.25008 17.8425H11.7501V14.405H9.25008V17.8425Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M23.0002 26.7497C25.0712 26.7497 26.7502 25.0708 26.7502 22.9997C26.7502 20.9286 25.0712 19.2497 23.0002 19.2497C20.9291 19.2497 19.2502 20.9286 19.2502 22.9997C19.2502 25.0708 20.9291 26.7497 23.0002 26.7497Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M3 0.5C1.61929 0.5 0.5 1.61929 0.5 3V43C0.5 44.3807 1.61929 45.5 3 45.5H43C44.3807 45.5 45.5 44.3807 45.5 43V3C45.5 1.61929 44.3807 0.5 43 0.5H3ZM43 3H3V43H43V3Z",
    fill: color
  }));
});
var Position$1 = Position;

var _excluded$V = ["color", "size"];
var Spacing = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$V);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M4.29986 0.991788C4.78802 0.503633 5.57947 0.503633 6.06763 0.991788L9.367 4.29116C9.85516 4.77932 9.85516 5.57077 9.367 6.05893C8.87885 6.54708 8.08739 6.54708 7.59924 6.05893L6.43374 4.89344V34.0829L7.59924 32.9174C8.08739 32.4293 8.87885 32.4293 9.367 32.9174C9.85516 33.4056 9.85516 34.197 9.367 34.6852L6.06763 37.9846C5.8332 38.219 5.51524 38.3507 5.18371 38.3507C4.85217 38.3507 4.53422 38.219 4.29981 37.9845L1.00084 34.6851C0.512712 34.1969 0.512761 33.4055 1.00095 32.9174C1.48913 32.4292 2.28059 32.4293 2.76871 32.9175L3.93374 34.0827V4.89344L2.76825 6.05893C2.2801 6.54708 1.48864 6.54708 1.00049 6.05893C0.51233 5.57077 0.51233 4.77932 1.00049 4.29116L4.29986 0.991788ZM13.1588 8.34109V1.49725H46.3156V8.34102H43.398V7.19776C43.398 5.54595 42.0562 4.20442 40.4047 4.20442H31.8516V26.0992C31.8516 28.1387 33.5088 29.7957 35.5481 29.7957H36.5137V32.4599H23.01V29.7957H23.9756C26.0151 29.7957 27.6721 28.1387 27.6721 26.0992V4.20448H19.0697C17.418 4.20448 16.0763 5.54604 16.0763 7.19783V8.34109H13.1588ZM46.9995 39.7088C47.4877 39.2207 47.4877 38.4292 46.9995 37.9411L43.7001 34.6417C43.212 34.1535 42.4205 34.1535 41.9324 34.6417C41.4442 35.1298 41.4442 35.9213 41.9324 36.4095L43.0979 37.5749L15.0832 37.5749L16.2484 36.4099C16.7366 35.9218 16.7366 35.1303 16.2485 34.6421C15.7604 34.154 14.9689 34.1539 14.4807 34.642L11.1814 37.941C10.9469 38.1754 10.8152 38.4934 10.8152 38.8249C10.8152 39.1564 10.9469 39.4744 11.1813 39.7088L14.4807 43.0082C14.9688 43.4964 15.7603 43.4964 16.2485 43.0082C16.7366 42.5201 16.7366 41.7286 16.2485 41.2404L15.083 40.0749L43.0979 40.0749L41.9324 41.2404C41.4442 41.7286 41.4442 42.5201 41.9324 43.0082C42.4205 43.4964 43.212 43.4964 43.7001 43.0082L46.9995 39.7088Z",
    fill: color
  }));
});
var Spacing$1 = Spacing;

var _excluded$U = ["color", "size"];
var Padding = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$U);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M13.8334 9.19949C13.8334 8.50914 14.3931 7.94949 15.0834 7.94949H31.3334C32.0238 7.94949 32.5834 8.50914 32.5834 9.19949C32.5834 9.88985 32.0238 10.4495 31.3334 10.4495H15.0834C14.3931 10.4495 13.8334 9.88985 13.8334 9.19949Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M15.0834 35.5496C14.3931 35.5496 13.8334 36.1092 13.8334 36.7996C13.8334 37.4899 14.3931 38.0496 15.0834 38.0496H31.3334C32.0238 38.0496 32.5834 37.4899 32.5834 36.7996C32.5834 36.1092 32.0238 35.5496 31.3334 35.5496H15.0834Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M36.8001 13.4163C37.4905 13.4163 38.0501 13.9759 38.0501 14.6663V30.9163C38.0501 31.6066 37.4905 32.1663 36.8001 32.1663C36.1098 32.1663 35.5501 31.6066 35.5501 30.9163V14.6663C35.5501 13.9759 36.1098 13.4163 36.8001 13.4163Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M10.45 14.6663C10.45 13.9759 9.89038 13.4163 9.20003 13.4163C8.50967 13.4163 7.95003 13.9759 7.95003 14.6663L7.95003 30.9163C7.95003 31.6066 8.50967 32.1663 9.20003 32.1663C9.89038 32.1663 10.45 31.6066 10.45 30.9163L10.45 14.6663Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M3 0.5C1.61929 0.5 0.5 1.61929 0.5 3V43C0.5 44.3807 1.61929 45.5 3 45.5H43C44.3807 45.5 45.5 44.3807 45.5 43V3C45.5 1.61929 44.3807 0.5 43 0.5H3ZM43 3H3V43H43V3Z",
    fill: color
  }));
});
var Padding$1 = Padding;

var _excluded$T = ["color", "size"];
var Polygon = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$T);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M44.103 18.4866L24.0002 3.8811L3.89749 18.4866L11.5761 42.1188H36.4244L44.103 18.4866ZM25.8371 1.35293C24.7418 0.557164 23.2587 0.557162 22.1634 1.35292L2.06066 15.9584C0.96539 16.7542 0.507082 18.1647 0.925439 19.4523L8.604 43.0845C9.02236 44.372 10.2222 45.2438 11.5761 45.2438H36.4244C37.7782 45.2438 38.9781 44.372 39.3965 43.0845L47.075 19.4523C47.4934 18.1647 47.0351 16.7542 45.9398 15.9584L25.8371 1.35293Z",
    fill: color
  }));
});

var _excluded$S = ["color", "size"];
var PolygonSides = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$S);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 48",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M23.0078 29.9669H25.835L24.7803 35.9727H27.4609L28.5156 29.9669H32.2363V27.4473H28.9551L29.6875 23.2872H33.3496V20.7383H30.1416L31.2109 14.6446H28.5303L27.4609 20.7383H24.6191L25.6885 14.6446H23.0225L21.9531 20.7383H18.1006V23.2872H21.499L20.7666 27.4473H17.002V29.9669H20.3271L19.2725 35.9727H21.9531L23.0078 29.9669ZM26.2744 27.4473H23.4473L24.165 23.2872H27.0068L26.2744 27.4473Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M23.5448 0.821208C24.421 0.184598 25.6075 0.184597 26.4837 0.821207L48.4803 16.8026C49.3565 17.4392 49.7231 18.5677 49.3885 19.5977L40.9865 45.4562C40.6518 46.4862 39.692 47.1836 38.6089 47.1836H11.4197C10.3366 47.1836 9.37672 46.4862 9.04204 45.4562L0.640107 19.5977C0.305422 18.5677 0.672067 17.4392 1.54829 16.8026L23.5448 0.821208ZM25.0143 2.84375L47.0108 18.8252L38.6089 44.6836H11.4197L3.01775 18.8252L25.0143 2.84375Z",
    fill: color
  }));
});
var PolygonSides$1 = PolygonSides;

var _excluded$R = ["color", "size"];
var ArrowRight = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$R);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 46 30",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M45.5 15.0005C45.5 15.7079 45.2003 16.3822 44.6753 16.8562L30.8291 29.3562C29.8042 30.2814 28.2234 30.2006 27.2982 29.1758C26.373 28.1509 26.4537 26.57 27.4786 25.6448L36.5 17.5005L3 17.5005C1.61928 17.5005 0.499999 16.3812 0.499999 15.0005C0.499999 13.6198 1.61929 12.5005 3 12.5005L36.5 12.5005L27.4786 4.35618C26.4537 3.43096 26.373 1.85011 27.2982 0.82525C28.2234 -0.199608 29.8042 -0.280382 30.8291 0.644837L44.6753 13.1448C45.2003 13.6189 45.5 14.2931 45.5 15.0005Z",
    fill: color
  }));
});

var _excluded$Q = ["color", "size"];
var FontItalic = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$Q);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M19 48L26.9931 2H31.2019L23.2087 48H19Z",
    fill: color
  }));
});
var FontItalic$1 = FontItalic;

var _excluded$P = ["color", "size"];
var FontBold = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$P);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 14 18",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M0.214966 17.4813V0.518677H6.61123C8.82693 0.518677 10.5075 0.914783 11.653 1.70699C12.7985 2.49144 13.3712 3.64481 13.3712 5.16709C13.3712 5.99814 13.1413 6.7321 12.6814 7.36898C12.2216 7.99809 11.5819 8.46021 10.7625 8.75535C11.699 8.97282 12.4348 9.41164 12.9699 10.0718C13.5133 10.732 13.7851 11.5397 13.7851 12.4951C13.7851 14.1261 13.2249 15.361 12.1045 16.1998C10.9841 17.0386 9.38713 17.4658 7.31357 17.4813H0.214966ZM3.97748 10.0951V14.6736H7.20069C8.08697 14.6736 8.77677 14.4795 9.27007 14.0911C9.77174 13.695 10.0226 13.1513 10.0226 12.4601C10.0226 10.9067 9.1572 10.1184 7.42644 10.0951H3.97748ZM3.97748 7.62528H6.76173C8.65971 7.59421 9.6087 6.89132 9.6087 5.5166C9.6087 4.74769 9.36623 4.19625 8.88128 3.86228C8.4047 3.52054 7.64801 3.34967 6.61123 3.34967H3.97748V7.62528Z",
    fill: color
  }));
});
var FontBold$1 = FontBold;

var _excluded$O = ["color", "size"];
var UploadOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$O);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M17.5911 1.54582C16.7075 0.680052 15.2937 0.680014 14.4101 1.54573L4.05296 11.6925C3.15635 12.5709 3.14159 14.0098 4.01999 14.9064C4.89839 15.8031 6.33733 15.8178 7.23394 14.9394L13.7278 8.57741V30.4419C13.7278 31.6971 14.7454 32.7147 16.0006 32.7147C17.2558 32.7147 18.2733 31.6971 18.2733 30.4419V8.57782L24.766 14.9393C25.6625 15.8178 27.1015 15.8031 27.9799 14.9065C28.8584 14.01 28.8437 12.571 27.9471 11.6926L17.5911 1.54582Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M2.78827 36.5543C1.53308 36.5543 0.515541 37.5719 0.515541 38.827C0.515541 40.0822 1.53308 41.0998 2.78827 41.0998H29.1519C30.4071 41.0998 31.4246 40.0822 31.4246 38.827C31.4246 37.5719 30.4071 36.5543 29.1519 36.5543H2.78827Z",
    fill: color
  }));
});
var UploadOutline$1 = UploadOutline;

var _excluded$N = ["color", "size"];
var ArrowLeftOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$N);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 28 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M26.907 0.71085C25.7493 -0.292553 23.9445 -0.224769 22.8758 0.862251L0.931376 23.1837C-0.0773525 24.2097 -0.0773525 25.7913 0.931376 26.8173L22.8758 49.1388C23.9445 50.2258 25.7493 50.2936 26.907 49.2902C28.0647 48.2868 28.1369 46.5921 27.0683 45.5051L6.90997 25.0005L27.0683 4.49589C28.1369 3.40888 28.0647 1.71425 26.907 0.71085Z",
    fill: color
  }));
});

var _excluded$M = ["color", "size"];
var ArrowRightOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$M);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 28 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M1.09286 0.71085C2.25057 -0.292553 4.05541 -0.224769 5.12407 0.862251L27.0685 23.1837C28.0772 24.2097 28.0772 25.7913 27.0685 26.8173L5.12407 49.1388C4.05541 50.2258 2.25057 50.2936 1.09286 49.2902C-0.0648579 48.2868 -0.137051 46.5921 0.93161 45.5051L21.0899 25.0005L0.93161 4.49589C-0.137051 3.40888 -0.0648579 1.71425 1.09286 0.71085Z",
    fill: color
  }));
});

var _excluded$L = ["color", "size"];
var PlusOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$L);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    xmlns: "http://www.w3.org/2000/svg",
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M22.9167 27.0838L22.9167 41.6672C22.9167 42.8177 23.8494 43.7505 25 43.7505C26.1506 43.7505 27.0833 42.8177 27.0833 41.6672L27.0833 27.0838H41.6667C42.8173 27.0838 43.75 26.1511 43.75 25.0005C43.75 23.8499 42.8173 22.9172 41.6667 22.9172L27.0833 22.9172L27.0833 8.33382C27.0833 7.18323 26.1506 6.25049 25 6.25049C23.8494 6.25049 22.9167 7.18323 22.9167 8.33382L22.9167 22.9172H8.33333C7.18274 22.9172 6.25 23.8499 6.25 25.0005C6.25 26.1511 7.18274 27.0838 8.33333 27.0838H22.9167Z",
    fill: color
  }));
});

var _excluded$K = ["color", "size"];
var ArrowTool = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$K);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M1.04757 38.9503C0.437373 38.3401 0.437373 37.3508 1.04757 36.7406L33.9229 3.86697L23.8354 3.33584C22.9736 3.29047 22.3118 2.5551 22.3572 1.69335C22.4026 0.831601 23.138 0.169794 23.9997 0.215167L37.5909 0.930759C38.3892 0.972794 39.027 1.61063 39.0691 2.40894L39.7846 16.0001C39.83 16.8619 39.1682 17.5972 38.3065 17.6426C37.4447 17.688 36.7093 17.0262 36.664 16.1644L36.1328 6.07651L3.25728 38.9503C2.64708 39.5605 1.65776 39.5605 1.04757 38.9503Z",
    fill: color
  }));
});

var _excluded$J = ["color", "size"];
var MinusOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$J);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 38 6",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M35.835 5.0769L2.16498 5.0769C1.00277 5.0769 0.0606079 4.14726 0.0606079 3.00048C0.060608 1.85371 1.00277 0.924072 2.16498 0.924072L35.835 0.924074C36.9972 0.924074 37.9394 1.85372 37.9394 3.00049C37.9394 4.14726 36.9972 5.0769 35.835 5.0769Z",
    fill: color
  }));
});

var _excluded$I = ["color", "size"];
var Temprature = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$I);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M9.48799 3.125H17.0311L17.0311 24.4063C17.0311 26.6148 18.1889 28.4084 19.5429 29.5401C21.7011 31.3438 23.0656 34.0456 23.0656 37.069C23.0656 42.4847 18.6753 46.875 13.2595 46.875C7.84382 46.875 3.45351 42.4847 3.45351 37.069C3.45351 34.0456 4.81799 31.3438 6.97617 29.5401C8.33021 28.4084 9.48799 26.6148 9.48799 24.4063V3.125ZM20.1561 3.125C20.1561 1.39911 18.757 0 17.0311 0H9.48799C7.7621 0 6.36299 1.39911 6.36299 3.125V24.4063C6.36299 25.4785 5.79482 26.4547 4.97216 27.1423C2.13398 29.5143 0.328506 33.0808 0.328506 37.069C0.328506 44.2106 6.11793 50 13.2595 50C20.4012 50 26.1906 44.2106 26.1906 37.069C26.1906 33.0808 24.3851 29.5143 21.5469 27.1423C20.7243 26.4547 20.1561 25.4785 20.1561 24.4063V3.125ZM35.6715 1.25C35.6715 0.559645 35.1119 0 34.4215 0H28.1715C27.4812 0 26.9215 0.559644 26.9215 1.25C26.9215 1.94036 27.4812 2.5 28.1715 2.5L34.4215 2.5C35.1119 2.5 35.6715 1.94036 35.6715 1.25ZM35.6715 8.24951C35.6715 7.55916 35.1119 6.99951 34.4215 6.99951H28.1715C27.4812 6.99951 26.9215 7.55916 26.9215 8.24951C26.9215 8.93987 27.4812 9.49951 28.1715 9.49951H34.4215C35.1119 9.49951 35.6715 8.93987 35.6715 8.24951ZM34.4215 13.999C35.1119 13.999 35.6715 14.5587 35.6715 15.249C35.6715 15.9394 35.1119 16.499 34.4215 16.499H28.1715C27.4812 16.499 26.9215 15.9394 26.9215 15.249C26.9215 14.5587 27.4812 13.999 28.1715 13.999H34.4215ZM13.2594 43.7501C16.366 43.7501 18.8844 41.2317 18.8844 38.1251C18.8844 35.4037 16.9519 33.1337 14.3844 32.6126V10.3662C14.3844 9.67582 13.8247 9.11617 13.1344 9.11617C12.444 9.11617 11.8844 9.67582 11.8844 10.3662V32.6694C9.44245 33.2829 7.63441 35.4928 7.63441 38.1251C7.63441 41.2317 10.1528 43.7501 13.2594 43.7501Z",
    fill: color
  }));
});

var _excluded$H = ["color", "size"];
var Contrast$1 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$H);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M20.4376 40.6858V38.5625V4.18746V3.31418C10.8133 4.10816 3.25006 12.1708 3.25006 22C3.25006 31.8292 10.8133 39.8918 20.4376 40.6858ZM40.7501 22C40.7501 31.8292 33.1868 39.8918 23.5626 40.6858V38.5625V4.18746V3.31418C33.1868 4.10816 40.7501 12.1708 40.7501 22ZM43.8751 22C43.8751 34.0812 34.0813 43.875 22.0001 43.875C9.91883 43.875 0.125061 34.0812 0.125061 22C0.125061 9.91877 9.91883 0.125 22.0001 0.125C34.0813 0.125 43.8751 9.91877 43.8751 22Z",
    fill: color
  }));
});

var _excluded$G = ["color", "size"];
var FineTune = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$G);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M16.3679 7.50003C15.7995 10.005 13.5592 11.875 10.8823 11.875C8.20528 11.875 5.96506 10.005 5.39665 7.50003H1.5448C0.854444 7.50003 0.2948 6.94039 0.2948 6.25003C0.2948 5.55967 0.854444 5.00003 1.5448 5.00003H5.39665C5.96506 2.49504 8.20528 0.625031 10.8823 0.625031C13.5592 0.625031 15.7995 2.49504 16.3679 5.00003H48.4557C49.1461 5.00003 49.7057 5.55967 49.7057 6.25003C49.7057 6.94039 49.1461 7.50003 48.4557 7.50003H16.3679ZM14.0073 6.25003C14.0073 7.97592 12.6082 9.37503 10.8823 9.37503C9.15637 9.37503 7.75726 7.97592 7.75726 6.25003C7.75726 4.52414 9.15637 3.12503 10.8823 3.12503C12.6082 3.12503 14.0073 4.52414 14.0073 6.25003Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M34.5715 27.625C37.2485 27.625 39.4887 25.755 40.0571 23.25H48.4554C49.1458 23.25 49.7054 22.6904 49.7054 22C49.7054 21.3096 49.1458 20.75 48.4554 20.75H40.0571C39.4887 18.245 37.2485 16.375 34.5715 16.375C31.8946 16.375 29.6543 18.245 29.0859 20.75H1.5448C0.854444 20.75 0.2948 21.3096 0.2948 22C0.2948 22.6904 0.854444 23.25 1.5448 23.25H29.0859C29.6543 25.755 31.8946 27.625 34.5715 27.625ZM34.5715 25.125C36.2974 25.125 37.6965 23.7259 37.6965 22C37.6965 20.2741 36.2974 18.875 34.5715 18.875C32.8456 18.875 31.4465 20.2741 31.4465 22C31.4465 23.7259 32.8456 25.125 34.5715 25.125Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M22.7702 39C22.2018 41.505 19.9615 43.375 17.2845 43.375C14.6076 43.375 12.3673 41.505 11.7989 39H1.5448C0.854444 39 0.2948 38.4403 0.2948 37.75C0.2948 37.0596 0.854444 36.5 1.5448 36.5H11.7989C12.3673 33.995 14.6076 32.125 17.2845 32.125C19.9615 32.125 22.2018 33.995 22.7702 36.5H48.4554C49.1458 36.5 49.7054 37.0596 49.7054 37.75C49.7054 38.4403 49.1458 39 48.4554 39H22.7702ZM20.4095 37.75C20.4095 39.4759 19.0104 40.875 17.2845 40.875C15.5587 40.875 14.1595 39.4759 14.1595 37.75C14.1595 36.0241 15.5587 34.625 17.2845 34.625C19.0104 34.625 20.4095 36.0241 20.4095 37.75Z",
    fill: color
  }));
});

var _excluded$F = ["color", "size"];
var Saturation = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$F);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M37.2341 37.6984H37.5121V37.4237C41.4447 33.4687 43.875 28.0182 43.875 22C43.875 15.9819 41.4447 10.5314 37.5121 6.57632V6.30045H37.2328C33.2942 2.47819 27.9219 0.125031 22 0.125031C9.91877 0.125031 0.125 9.9188 0.125 22C0.125 34.0813 9.91877 43.875 22 43.875C24.718 43.875 27.3203 43.3793 29.7213 42.4733H30.5303V42.1494C33.0389 41.0861 35.308 39.5679 37.2341 37.6984ZM20.4257 3.31519C10.807 4.1148 3.25 12.1749 3.25 22C3.25 31.8252 10.807 39.8853 20.4257 40.6849V3.31519ZM34.3871 36.0759C33.221 37.1029 31.9263 37.9873 30.5303 38.7017V5.29836C31.9263 6.01281 33.221 6.89715 34.3871 7.92411V36.0759ZM37.5121 11.4641C39.5556 14.4669 40.75 18.094 40.75 22C40.75 25.9061 39.5556 29.5332 37.5121 32.536V11.4641ZM23.5507 40.6868C24.8796 40.578 26.1693 40.3307 27.4053 39.9592V4.04089C26.1693 3.66941 24.8796 3.42203 23.5507 3.31324V40.6868Z",
    fill: color
  }));
});

var _excluded$E = ["color", "size"];
var Annotate = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$E);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M46.1442 31.379C45.4585 31.379 44.8974 31.9429 44.8974 32.6321V43.7349C44.8974 45.8025 43.2267 47.4817 41.157 47.4943H6.22156C4.16433 47.4943 2.49361 45.8151 2.48114 43.7349V11.1283C2.48114 9.06067 4.15186 7.38147 6.22156 7.36894H17.2807C17.9665 7.36894 18.5275 6.80503 18.5275 6.1158C18.5275 5.42658 17.9665 4.86267 17.2807 4.86267H6.22156C2.79284 4.8752 0 7.66969 0 11.1283V43.7349C0 47.1935 2.79284 50.0005 6.22156 50.0005H41.157C44.5982 50.0005 47.3786 47.1935 47.3786 43.7474V32.6321C47.391 31.9429 46.83 31.379 46.1442 31.379Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M46.8923 1.65462C44.698 -0.55089 41.157 -0.55089 38.9627 1.65462L16.7571 23.9729C16.6075 24.1233 16.4953 24.3113 16.4329 24.5243L13.5154 35.1258C13.3907 35.5644 13.5154 36.0281 13.8396 36.3413C14.1513 36.6546 14.6251 36.7799 15.049 36.6672L25.5969 33.7348C25.8089 33.6722 25.9959 33.5719 26.1455 33.409L48.3636 11.0782C50.5455 8.87267 50.5455 5.31377 48.3636 3.10826L46.8923 1.65462ZM19.4751 24.7875L37.6535 6.51678L43.5135 12.4065L25.3351 30.6897L19.4751 24.7875ZM18.3031 27.1559L22.9911 31.8677L16.5077 33.6722L18.3031 27.1559ZM46.5931 9.31127L45.2715 10.6396L39.4115 4.74986L40.7331 3.42154C41.9425 2.206 43.9249 2.206 45.1343 3.42154L46.5931 4.88771C47.815 6.11578 47.815 8.09573 46.5931 9.31127Z",
    fill: color
  }));
});

var _excluded$D = ["color", "size"];
var Blur$1 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$D);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M18.3626 41.293C17.5103 41.4285 16.7096 40.8474 16.5742 39.9952C16.4387 39.143 17.0198 38.3423 17.872 38.2068C18.2902 38.1403 18.6988 38.0456 19.0958 37.9246C21.9368 37.059 24.1957 34.8468 25.1254 32.0335C25.2671 31.6049 25.378 31.1621 25.4555 30.7076C25.6005 29.857 26.4076 29.2849 27.2583 29.4299C28.109 29.5749 28.681 30.3821 28.536 31.2327C28.432 31.8429 28.283 32.4379 28.0926 33.0142C26.8449 36.7893 23.8206 39.7519 20.0065 40.914C19.4728 41.0766 18.9239 41.2038 18.3626 41.293Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M33.9356 31.0645C33.9356 23.9644 24.1764 8.59028 19.4747 1.59549C18.2785 -0.184172 15.7216 -0.184172 14.5254 1.59548C9.82374 8.59028 0.0645752 23.9644 0.0645752 31.0645C0.0645752 40.4177 7.64685 48 17.0001 48C26.3533 48 33.9356 40.4177 33.9356 31.0645ZM30.8106 31.0645C30.8106 29.8836 30.375 28.0316 29.4236 25.578C28.5 23.1959 27.1988 20.5159 25.7187 17.7756C22.8106 12.3913 19.3287 6.98743 17.0001 3.51586C14.6715 6.98743 11.1895 12.3913 8.28145 17.7756C6.80135 20.5159 5.50017 23.1959 4.57655 25.578C3.62517 28.0316 3.18958 29.8836 3.18958 31.0645C3.18958 38.6918 9.37274 44.875 17.0001 44.875C24.6274 44.875 30.8106 38.6918 30.8106 31.0645Z",
    fill: color
  }));
});

var _excluded$C = ["color", "size"];
var PinOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$C);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M43.0081 15.2287L36.7869 17.6214L28.935 29.9601C30.5809 33.9266 30.3662 38.0903 27.1408 41.3158L26.5656 41.8909C25.9554 42.5011 24.9661 42.5011 24.3559 41.8909L14.4122 31.9472L2.99211 43.3673C2.38192 43.9775 1.3926 43.9775 0.782403 43.3673C0.17221 42.7571 0.172211 41.7678 0.782403 41.1576L12.2025 29.7375L2.25883 19.7938C1.64864 19.1836 1.64864 18.1943 2.25883 17.5841L2.50512 17.3378C5.73058 14.1123 10.2231 13.5688 14.1897 15.2147L26.5283 7.36283L28.9211 1.14165C29.327 0.0863053 30.6847 -0.201832 31.4843 0.597706L43.552 12.6655C44.3516 13.465 44.0634 14.8228 43.0081 15.2287ZM29.0752 9.44618L30.9747 4.50752L39.6422 13.1751L34.7035 15.0745L25.4251 29.655L26.0486 31.1577C27.234 34.0146 27.0773 36.5309 25.4342 38.5498L5.64209 18.7576C7.75439 17.2384 10.4304 17.0382 12.992 18.1011L14.4948 18.7246L29.0752 9.44618Z",
    fill: color
  }));
});

var _excluded$B = ["color", "size"];
var Duplicate = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$B);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M2.33984 12.111V2.04761C2.33984 1.49532 2.78756 1.04761 3.33984 1.04761H10.8182C11.3705 1.04761 11.8182 1.49532 11.8182 2.04761V12.111C11.8182 12.6633 11.3705 13.111 10.8182 13.111H3.33984C2.78756 13.111 2.33984 12.6633 2.33984 12.111ZM3.33984 12.111V2.04761L10.8182 2.04761L10.8182 12.111L3.33984 12.111Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M13.66 4.97388C13.66 4.69774 13.4361 4.47388 13.16 4.47388C12.8838 4.47388 12.66 4.69774 12.66 4.97388V13.9523H5.40491C5.12876 13.9523 4.90491 14.1761 4.90491 14.4523C4.90491 14.7284 5.12876 14.9523 5.40491 14.9523H13.16C13.4361 14.9523 13.66 14.7284 13.66 14.4523V4.97388Z",
    fill: color
  }));
});
var Duplicate$1 = Duplicate;

var _excluded$A = ["color", "size"];
var DeleteOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$A);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M17.8571 19.6429C17.8571 18.6566 18.6566 17.8571 19.6429 17.8571C20.6291 17.8571 21.4286 18.6566 21.4286 19.6429L21.4286 37.5C21.4286 38.4862 20.6291 39.2857 19.6429 39.2857C18.6566 39.2857 17.8571 38.4862 17.8571 37.5L17.8571 19.6429Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M30.3571 17.8571C29.3709 17.8571 28.5714 18.6566 28.5714 19.6429L28.5714 37.5C28.5714 38.4862 29.3709 39.2857 30.3571 39.2857C31.3434 39.2857 32.1429 38.4862 32.1429 37.5V19.6429C32.1429 18.6566 31.3434 17.8571 30.3571 17.8571Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M14.2857 7.14286V3.57143C14.2857 1.59898 15.8847 0 17.8571 0H32.1429C34.1153 0 35.7143 1.59898 35.7143 3.57143V7.14286H48.2143C49.2005 7.14286 50 7.94235 50 8.92857C50 9.91479 49.2005 10.7143 48.2143 10.7143H44.6429V46.4286C44.6429 48.401 43.0439 50 41.0714 50H8.92857C6.95613 50 5.35714 48.401 5.35714 46.4286V10.7143L1.78571 10.7143C0.799491 10.7143 0 9.91479 0 8.92857C0 7.94235 0.799492 7.14286 1.78571 7.14286H14.2857ZM17.8571 3.57143H32.1429V7.14286H17.8571V3.57143ZM8.92857 10.7143L8.92857 46.4286H41.0714V10.7143H8.92857Z",
    fill: color
  }));
});
var DeleteOutline$1 = DeleteOutline;

var _excluded$z = ["color", "size"];
var CropFrame = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$z);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M43 3H31.75V0.5H43C44.3807 0.5 45.5 1.61929 45.5 3V14.25H43V3Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M3 14.25V3H14.25V0.5H3C1.61929 0.5 0.5 1.61929 0.5 3V14.25H3Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M0.5 31.75V43C0.5 44.3807 1.61929 45.5 3 45.5H14.25V43H3V31.75H0.5Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M43 31.75H45.5V43C45.5 44.3807 44.3807 45.5 43 45.5H31.75V43H43V31.75Z",
    fill: color
  }));
});

var _excluded$y = ["color", "size"];
var Portrait = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$y);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 36 52",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M32.0559 46.8755L32.0559 3.12555L3.93091 3.12555L3.93091 46.8755H32.0559ZM35.1809 3.12555C35.1809 1.39966 33.7818 0.000549316 32.0559 0.000549316H3.93091C2.20502 0.000549316 0.805908 1.39966 0.805908 3.12555V46.8755C0.805908 48.6014 2.20502 50.0005 3.93091 50.0005H32.0559C33.7818 50.0005 35.1809 48.6014 35.1809 46.8755L35.1809 3.12555Z",
    fill: color
  }));
});
var Portrait$1 = Portrait;

var _excluded$x = ["color", "size"];
var WarningOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$x);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M45.961 39.0119L28.2837 7.27185C27.5934 6.17538 26.3971 5.5 24.9981 5.5C23.5956 5.5 22.3967 6.17887 21.7073 7.28034L4.06571 38.9613L4.03009 39.0197C3.33595 40.159 3.32316 41.4697 3.9939 42.6216C4.67405 43.786 5.89 44.5 7.34459 44.5H42.554C44.0596 44.5 45.3464 43.7436 46.0016 42.6231C46.6817 41.4564 46.652 40.1455 45.9968 39.0706L45.961 39.0119ZM49.0254 44.3856C47.7038 46.6495 45.2246 48 42.554 48H7.34459C4.67398 48 2.29272 46.6495 0.970942 44.3856C-0.347811 42.1231 -0.322029 39.4361 1.04116 37.1987L18.6646 5.55018C18.6697 5.5418 18.6743 5.53342 18.6789 5.52504C18.6836 5.51666 18.6882 5.50828 18.6932 5.49989C20.0278 3.30867 22.3849 2 24.9981 2C27.6114 2 29.9685 3.30867 31.303 5.49989L48.9853 37.2489C50.3185 39.436 50.3442 42.1232 49.0254 44.3856Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M22.0001 16C22.0001 14.3431 23.3433 13 25.0001 13C26.657 13 28.0001 14.3431 28.0001 16V28C28.0001 29.6569 26.657 31 25.0001 31C23.3433 31 22.0001 29.6569 22.0001 28V16Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M28.0001 37C28.0001 38.6569 26.657 40 25.0001 40C23.3433 40 22.0001 38.6569 22.0001 37C22.0001 35.3431 23.3433 34 25.0001 34C26.657 34 28.0001 35.3431 28.0001 37Z",
    fill: color
  }));
});

var _excluded$w = ["color", "size"];
var Error$1 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$w);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 21 21",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M10.5 20.5001C16.0228 20.5001 20.5 16.023 20.5 10.5001C20.5 4.97727 16.0228 0.500122 10.5 0.500122C4.97715 0.500122 0.5 4.97727 0.5 10.5001C0.5 16.023 4.97715 20.5001 10.5 20.5001ZM15.4375 7.0912L11.8155 10.7132L15.4638 14.309C15.6213 14.4665 15.7 14.6503 15.7 14.8865C15.7 15.1227 15.6213 15.3064 15.4638 15.4639C15.3063 15.6214 15.1226 15.7001 14.8864 15.7001C14.6501 15.7001 14.4664 15.6214 14.3089 15.4639L10.6869 11.8419L7.06483 15.4639C6.77612 15.7789 6.25118 15.7789 5.93622 15.4639C5.77874 15.3064 5.7 15.0964 5.7 14.8865C5.7 14.6765 5.77874 14.4928 5.93622 14.3353L9.55827 10.7132L5.93622 7.0912C5.77874 6.93372 5.7 6.72374 5.7 6.51377C5.7 6.3038 5.77874 6.12007 5.93622 5.96259C6.25118 5.64763 6.74987 5.64763 7.06483 5.96259L10.6869 9.58464L14.3089 5.93634C14.5976 5.62138 15.1226 5.62138 15.4375 5.93634C15.595 6.09382 15.6738 6.27755 15.6738 6.51377C15.6738 6.74999 15.595 6.93372 15.4375 7.0912Z",
    fill: color
  }));
});

var _excluded$v = ["color", "size"];
var ErrorOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$v);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 52 52",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M37.3438 16.4782L28.2887 25.5333L37.4095 34.5228C37.8032 34.9165 38 35.3758 38 35.9664C38 36.5569 37.8032 37.0162 37.4095 37.4099C37.0158 37.8036 36.5564 38.0005 35.9659 38.0005C35.3753 38.0005 34.916 37.8036 34.5223 37.4099L25.4672 28.3548L16.4121 37.4099C15.6903 38.1973 14.378 38.1973 13.5906 37.4099C13.1969 37.0162 13 36.4913 13 35.9664C13 35.4414 13.1969 34.9821 13.5906 34.5884L22.6457 25.5333L13.5906 16.4782C13.1969 16.0845 13 15.5595 13 15.0346C13 14.5097 13.1969 14.0504 13.5906 13.6567C14.378 12.8693 15.6247 12.8693 16.4121 13.6567L25.4672 22.7118L34.5223 13.591C35.2441 12.8036 36.5564 12.8036 37.3438 13.591C37.7375 13.9847 37.9344 14.4441 37.9344 15.0346C37.9344 15.6252 37.7375 16.0845 37.3438 16.4782Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M-0.000488281 25.0005C-0.000488281 38.7972 11.2028 50.0005 24.9995 50.0005C38.6925 50.0005 49.9995 38.7972 49.9995 25.0005C49.9995 11.2038 38.7962 0.000488281 24.9995 0.000488281C11.2028 0.000488281 -0.000488281 11.2038 -0.000488281 25.0005ZM3.63022 24.8968C3.63022 13.1748 13.1738 3.52746 24.9995 3.52746C36.8252 3.52746 46.3688 13.1748 46.3688 24.8968C46.3688 36.6187 36.8252 46.266 24.9995 46.266C13.2775 46.266 3.63022 36.6187 3.63022 24.8968Z",
    fill: color
  }));
});

var _excluded$u = ["color", "size"];
var Loading = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$u);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M29.9338 5.26853C27.8524 4.75154 25.7006 4.56814 23.5381 4.72351C22.4874 4.799 21.4379 4.95535 20.4183 5.18855L19.3724 0.636496C20.6245 0.350265 21.9128 0.158175 23.2017 0.065597C25.8579 -0.125223 28.5034 0.100753 31.0653 0.737277L29.9338 5.26853Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    opacity: "0.9",
    d: "M40.6131 11.9278C38.5498 9.48098 35.9044 7.52805 32.963 6.2805L34.7952 1.98303C38.4106 3.51633 41.6615 5.91575 44.1962 8.922L40.6131 11.9278Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    opacity: "0.8",
    d: "M45.3329 23.5739L45.3303 23.5392C45.097 20.3085 44.1359 17.275 42.4734 14.5227L46.4838 12.1129C48.5302 15.501 49.7133 19.2325 50 23.2036L45.3329 23.5739Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    opacity: "0.7",
    d: "M46.2688 38.2308L42.2981 35.7565C43.9958 33.0458 45.0372 29.9357 45.3095 26.7618L49.9744 27.1604C49.639 31.0674 48.3577 34.8958 46.2688 38.2308Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    opacity: "0.6",
    d: "M34.4209 48.1735L32.6626 43.8456C35.6192 42.6505 38.2938 40.7405 40.3975 38.3222L43.9338 41.3828C41.3483 44.3551 38.0588 46.7033 34.4209 48.1735V48.1735Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    opacity: "0.5",
    d: "M26.8033 49.9345C24.1593 50.1242 21.5262 49.9011 18.9766 49.2716L20.1013 44.7386C22.1729 45.25 24.3148 45.4309 26.4673 45.2766C27.5283 45.2004 28.5879 45.0416 29.6165 44.8049L30.6697 49.3551C29.4061 49.6459 28.1052 49.841 26.8033 49.9345V49.9345Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    opacity: "0.4",
    d: "M15.2449 48.0311C11.6272 46.5033 8.37276 44.1086 5.83362 41.1063L9.412 38.0952C11.479 40.5388 14.1272 42.4877 17.0704 43.7306L15.2449 48.0311Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    opacity: "0.3",
    d: "M3.54069 37.9198C1.48217 34.5223 0.292537 30.78 0.00479729 26.7959L0 26.7274L4.66972 26.3918L4.67579 26.478C4.90861 29.7017 5.87511 32.7443 7.54751 35.504L3.54069 37.9198Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    opacity: "0.2",
    d: "M4.69761 23.2075L0.0335693 22.802C0.374666 18.8955 1.66191 15.0691 3.75587 11.7373L7.72274 14.2175C6.02088 16.9257 4.97478 20.0344 4.69761 23.2075V23.2075Z",
    fill: color
  }));
});

var _excluded$t = ["color", "size"];
var ColorPicker$2 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$t);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 42 42",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M42.0001 6.11477C42.0001 4.48089 41.3639 2.94468 40.2086 1.78931C37.8238 -0.595528 33.9433 -0.595878 31.5582 1.78931L25.666 7.68191L22.9908 5.00654C22.5351 4.5509 21.7965 4.5509 21.3407 5.00654L17.8405 8.50695C17.3849 8.96259 17.3849 9.70141 17.8405 10.1572L20.5157 12.8325L3.63971 29.7097C3.5116 29.8378 3.41511 29.9939 3.35783 30.1658L2.27826 33.4048L1.30626 34.3769C-0.435198 36.1186 -0.435314 38.9525 1.30626 40.6943C3.04783 42.436 5.88157 42.4359 7.62314 40.6943L8.59514 39.7223L11.834 38.6426C12.0058 38.5853 12.1619 38.4888 12.29 38.3607L29.1661 21.4835L31.8413 24.1588C32.297 24.6145 33.0357 24.6145 33.4914 24.1588L36.9916 20.6584C37.4472 20.2028 37.4472 19.464 36.9916 19.0082L34.3164 16.3328L40.2086 10.4402C41.3639 9.28486 42.0001 7.74876 42.0001 6.11477ZM20.5157 26.8341H9.81507L22.1658 14.4826L27.516 19.8333L20.5157 26.8341ZM32.6663 21.6836L20.3156 9.332L22.1657 7.48168L34.5163 19.8333L32.6663 21.6836ZM38.5585 8.79014L32.6663 14.6827L27.316 9.332L33.2081 3.4394C34.6833 1.96421 37.0835 1.96409 38.5584 3.4394C40.0263 4.84774 40.0261 7.3818 38.5585 8.79014Z",
    fill: color
  }));
});
var ColorPickerIcon$1 = ColorPicker$2;

var _excluded$s = ["color", "size"];
var Menu = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$s);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M0 7.75049C0 6.92206 0.671573 6.25049 1.5 6.25049H48.5C49.3284 6.25049 50 6.92206 50 7.75049V9.43806C50 10.2665 49.3284 10.9381 48.5 10.9381H1.5C0.671571 10.9381 0 10.2665 0 9.43806V7.75049ZM0 24.1567C0 23.3283 0.671573 22.6567 1.5 22.6567H48.5C49.3284 22.6567 50 23.3283 50 24.1567V25.8443C50 26.6727 49.3284 27.3443 48.5 27.3443H1.5C0.671571 27.3443 0 26.6727 0 25.8443V24.1567ZM1.5 39.0629C0.671573 39.0629 0 39.7345 0 40.5629V42.2505C0 43.0789 0.671571 43.7505 1.5 43.7505H48.5C49.3284 43.7505 50 43.0789 50 42.2505V40.5629C50 39.7345 49.3284 39.0629 48.5 39.0629H1.5Z",
    fill: color
  }));
});

var _excluded$r = ["color", "size"];
var MoveDownOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$r);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 46 26",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M1.23229 1.23267C2.20863 0.256387 3.79154 0.256434 4.76782 1.23277L22.9989 19.465L41.2323 1.23267C42.2086 0.256387 43.7915 0.256434 44.7678 1.23277C45.7441 2.20911 45.7441 3.79203 44.7677 4.76831L24.7665 24.7683C24.2977 25.2371 23.6618 25.5005 22.9987 25.5005C22.3357 25.5005 21.6998 25.2371 21.231 24.7682L1.23218 4.7682C0.255899 3.79186 0.255946 2.20895 1.23229 1.23267Z",
    fill: color
  }));
});

var _excluded$q = ["color", "size"];
var MoveUpOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$q);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 46 26",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M21.2326 1.23271C22.2089 0.256404 23.7918 0.256417 24.7681 1.23274L44.7678 21.2327C45.7441 22.2091 45.7441 23.792 44.7678 24.7683C43.7914 25.7446 42.2085 25.7446 41.2322 24.7682L23.0003 6.53602L4.76775 24.7683C3.79143 25.7446 2.20852 25.7446 1.23222 24.7682C0.255916 23.7919 0.255928 22.209 1.23225 21.2327L21.2326 1.23271Z",
    fill: color
  }));
});

var _excluded$p = ["color", "size"];
var ArrowSidebarLeftOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$p);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M25 47.5006C37.4264 47.5006 47.5 37.427 47.5 25.0006C47.5 12.5742 37.4264 2.50061 25 2.50061C12.5736 2.50061 2.5 12.5742 2.5 25.0006C2.5 37.427 12.5736 47.5006 25 47.5006ZM25 50.0006C38.8071 50.0006 50 38.8077 50 25.0006C50 11.1935 38.8071 0.000610352 25 0.000610352C11.1929 0.000610352 0 11.1935 0 25.0006C0 38.8077 11.1929 50.0006 25 50.0006Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M27.7355 35.1357C27.1751 35.7705 26.2217 35.7926 25.6359 35.1773L17.3026 26.423C17.0301 26.1368 16.8819 25.755 16.8752 25.3647C16.8686 24.9745 17.0037 24.5881 17.2652 24.2923L25.5985 14.8647C26.1593 14.2302 27.1128 14.2089 27.6981 14.8247C28.2539 15.4093 28.2679 16.3516 27.7348 16.9546L20.36 25.2978L27.6974 33.0057C28.2536 33.59 28.2681 34.5323 27.7355 35.1357ZM26.6695 34.3756C26.7058 34.3748 26.753 34.3599 26.7984 34.3085C26.9042 34.1886 26.8989 33.9798 26.792 33.8676L19.0594 25.7444C18.8357 25.5095 18.829 25.1425 19.0438 24.8995L26.7983 16.1268C26.9041 16.007 26.899 15.7983 26.7921 15.6859C26.7464 15.6377 26.7001 15.6249 26.6639 15.6256C26.6276 15.6263 26.5805 15.6412 26.5351 15.6926L18.2017 25.1202C18.1562 25.1717 18.1235 25.2514 18.1251 25.3435C18.1266 25.4356 18.1619 25.5128 18.208 25.5612L26.5413 34.3154C26.5871 34.3635 26.6334 34.3763 26.6695 34.3756Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M26.7984 34.3085C26.753 34.3599 26.7058 34.3748 26.6695 34.3756C26.6334 34.3763 26.5871 34.3635 26.5413 34.3154L18.208 25.5612C18.1619 25.5128 18.1266 25.4356 18.1251 25.3435C18.1235 25.2514 18.1562 25.1717 18.2017 25.1202L26.5351 15.6926C26.5805 15.6412 26.6276 15.6263 26.6639 15.6256C26.7001 15.6249 26.7464 15.6377 26.7921 15.6859C26.899 15.7983 26.9041 16.007 26.7983 16.1268L19.0438 24.8995C18.829 25.1425 18.8357 25.5095 19.0594 25.7444L26.792 33.8676C26.8989 33.9798 26.9042 34.1886 26.7984 34.3085Z",
    fill: color
  }));
});
var ArrowSidebarLeftOutline$1 = ArrowSidebarLeftOutline;

var _excluded$o = ["color", "size"];
var ArrowSidebarRightOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$o);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M25 47.5006C37.4264 47.5006 47.5 37.427 47.5 25.0006C47.5 12.5742 37.4264 2.50061 25 2.50061C12.5736 2.50061 2.5 12.5742 2.5 25.0006C2.5 37.427 12.5736 47.5006 25 47.5006ZM25 50.0006C38.8071 50.0006 50 38.8077 50 25.0006C50 11.1935 38.8071 0.000610352 25 0.000610352C11.1929 0.000610352 0 11.1935 0 25.0006C0 38.8077 11.1929 50.0006 25 50.0006Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M22.2645 14.8655C22.8249 14.2307 23.7783 14.2086 24.3641 14.8239L32.6974 23.5781C32.9699 23.8644 33.1181 24.2461 33.1248 24.6364C33.1314 25.0267 32.9963 25.4131 32.7348 25.7089L24.4015 35.1365C23.8406 35.7709 22.8872 35.7923 22.3019 35.1765C21.7461 34.5919 21.7321 33.6496 22.2652 33.0465L29.6399 24.7034L22.3026 16.9954C21.7464 16.4112 21.7319 15.4689 22.2645 14.8655ZM23.3305 15.6256C23.2942 15.6264 23.247 15.6413 23.2016 15.6927C23.0958 15.8126 23.1011 16.0214 23.208 16.1336L30.9406 24.2568C31.1643 24.4917 31.171 24.8586 30.9562 25.1016L23.2017 33.8744C23.0959 33.9942 23.101 34.2029 23.2079 34.3153C23.2536 34.3634 23.2999 34.3763 23.3361 34.3756C23.3724 34.3748 23.4195 34.36 23.4649 34.3086L31.7983 24.881C31.8438 24.8295 31.8765 24.7497 31.8749 24.6577C31.8734 24.5656 31.838 24.4883 31.792 24.44L23.4587 15.6858C23.4129 15.6377 23.3666 15.6249 23.3305 15.6256Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    d: "M23.2016 15.6927C23.247 15.6413 23.2942 15.6264 23.3305 15.6256C23.3666 15.6249 23.4129 15.6377 23.4587 15.6858L31.792 24.44C31.838 24.4883 31.8734 24.5656 31.8749 24.6577C31.8765 24.7497 31.8438 24.8295 31.7983 24.881L23.4649 34.3086C23.4195 34.36 23.3724 34.3748 23.3361 34.3756C23.2999 34.3763 23.2536 34.3634 23.2079 34.3153C23.101 34.2029 23.0959 33.9942 23.2017 33.8744L30.9562 25.1016C31.171 24.8586 31.1643 24.4917 30.9406 24.2568L23.208 16.1336C23.1011 16.0214 23.0958 15.8126 23.2016 15.6927Z",
    fill: color
  }));
});
var ArrowSidebarRightOutline$1 = ArrowSidebarRightOutline;

var _excluded$n = ["color", "size"];
var Annotation = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$n);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M48.5577 38.9423H34.8557C31.8069 38.9423 29.327 41.4224 29.327 44.4712C29.327 45.9293 28.1406 47.1157 26.6827 47.1157H5.52902C4.07066 47.1157 2.88467 45.9293 2.88467 44.4712V42.5459C2.88467 41.0886 4.07028 39.9025 5.5275 39.9018L9.33952 39.8999C9.34067 39.8999 9.34219 39.8995 9.34334 39.8995C9.38683 39.8995 9.43031 39.8968 9.47418 39.893C9.49211 39.8915 9.50966 39.8884 9.52759 39.8861C9.54628 39.8835 9.56535 39.8819 9.58405 39.8789L19.7636 38.1229C19.7689 38.1217 19.7739 38.1206 19.7788 38.1195C19.7948 38.1164 19.8105 38.113 19.8261 38.1095C19.8517 38.1038 19.8769 38.0981 19.9017 38.0908C19.9192 38.0863 19.9368 38.0809 19.9543 38.0756C19.9776 38.068 20.0008 38.0599 20.0241 38.0512C20.0409 38.0447 20.0581 38.039 20.0748 38.0321C20.1107 38.0168 20.1458 38.0008 20.1805 37.9829C20.1942 37.9756 20.208 37.9672 20.2217 37.9596C20.2461 37.9459 20.2702 37.9321 20.2938 37.9169C20.3083 37.9077 20.3228 37.8978 20.3373 37.8879C20.3602 37.8719 20.3831 37.8551 20.4052 37.8375C20.417 37.8284 20.4292 37.8192 20.4411 37.8093C20.4746 37.7815 20.5074 37.7525 20.5383 37.7212L46.2479 12.0109C48.3097 9.94895 48.3097 6.59377 46.2479 4.53146L43.2632 1.54708C41.2014 -0.515234 37.846 -0.514853 35.7841 1.54708L10.075 27.2574C10.0437 27.2883 10.0147 27.3215 9.9865 27.355C9.97696 27.3665 9.9678 27.3783 9.95865 27.3901C9.9411 27.4127 9.92432 27.4355 9.90829 27.4588C9.89838 27.4729 9.88846 27.4874 9.8793 27.5019C9.86443 27.5252 9.85069 27.5488 9.83734 27.5729C9.82857 27.5885 9.81941 27.6042 9.81102 27.6198C9.79424 27.653 9.77898 27.6862 9.76448 27.7205C9.75723 27.7377 9.75113 27.7556 9.74426 27.7732C9.73625 27.7953 9.72824 27.8178 9.72099 27.8403C9.71527 27.8586 9.70993 27.8769 9.70497 27.8952C9.69849 27.9189 9.69276 27.9429 9.68742 27.9673C9.68361 27.9841 9.67979 28.0009 9.67674 28.0177C9.6756 28.0226 9.67445 28.0272 9.67369 28.0318L8.12378 37.0158L5.52597 37.017C2.47879 37.0185 0 39.4989 0 42.5459V44.4712C0 47.5201 2.48032 50.0005 5.52902 50.0005H26.6827C29.7314 50.0005 32.2117 47.5201 32.2117 44.4712C32.2117 43.0132 33.3977 41.8267 34.8557 41.8267H48.5577C49.3542 41.8267 50 41.1813 50 40.3847C50 39.5878 49.3542 38.9423 48.5577 38.9423ZM12.043 31.2653L16.5306 35.7531L11.1076 36.6885L12.043 31.2653ZM33.5567 7.85382L35.7288 10.026L15.3065 30.4493L13.1344 28.2771L33.5567 7.85382ZM19.5183 34.6613L17.3462 32.4891L37.7689 12.0658L39.941 14.238L19.5183 34.6613ZM37.8239 3.58651C38.7611 2.64958 40.2859 2.64958 41.2235 3.58651L44.2078 6.57126C45.145 7.50858 45.145 9.03376 44.2078 9.97108L41.9804 12.1986L35.5965 5.81401L37.8239 3.58651Z",
    fill: color
  }));
});

var _excluded$m = ["color", "size"];
var Rotate90 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$m);
  return /*#__PURE__*/React__default.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 52 42",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React__default.createElement("path", {
    d: "M46.4326 40.0282C46.1217 40.5666 45.6098 40.9595 45.0093 41.1204C44.4088 41.2813 43.7691 41.197 43.2307 40.8862C42.6923 40.5754 42.2995 40.0634 42.1386 39.463C41.9777 38.8625 42.0619 38.2227 42.3727 37.6843C45.2819 32.6454 46.0703 26.6571 44.5644 21.0369C43.0584 15.4167 39.3816 10.6249 34.3426 7.71563C25.1427 2.4043 13.7736 4.38306 6.93632 12.1744L14.5457 12.0831H14.5744C15.196 12.0795 15.7937 12.3229 16.2358 12.7599C16.678 13.1969 16.9284 13.7916 16.9321 14.4133C16.9357 15.0349 16.6923 15.6326 16.2553 16.0747C15.8183 16.5169 15.2236 16.7673 14.6019 16.771L2.37222 16.9175H2.34409C2.03391 16.9175 1.72681 16.856 1.44059 16.7364C1.15437 16.6169 0.894721 16.4417 0.676697 16.2211C0.458674 16.0004 0.28661 15.7387 0.170478 15.4511C0.0543471 15.1635 -0.00354164 14.8557 0.000167612 14.5455L0.147346 2.31591C0.151046 2.00811 0.215338 1.70404 0.336549 1.42108C0.457761 1.13812 0.633519 0.881802 0.853788 0.666765C1.07406 0.451728 1.33453 0.282182 1.62032 0.167807C1.90611 0.0534328 2.21164 -0.00353076 2.51944 0.000169355C2.82725 0.00386947 3.13132 0.0681609 3.41428 0.189372C3.69724 0.310584 3.95356 0.486342 4.16859 0.706611C4.38363 0.926881 4.55318 1.18735 4.66755 1.47314C4.78193 1.75894 4.83889 2.06446 4.83519 2.37227L4.77171 7.65586C9.37537 3.16334 15.4496 0.489016 21.8718 0.127065C28.2941 -0.234886 34.6303 1.74001 39.7096 5.6868C44.7889 9.63359 48.2679 15.2855 49.5038 21.5981C50.7397 27.9107 49.6485 34.4574 46.4326 40.0282Z",
    fill: color
  }), /*#__PURE__*/React__default.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M25 28C26.6569 28 28 26.6569 28 25C28 23.3431 26.6569 22 25 22C23.3431 22 22 23.3431 22 25C22 26.6569 23.3431 28 25 28ZM25 32C28.866 32 32 28.866 32 25C32 21.134 28.866 18 25 18C21.134 18 18 21.134 18 25C18 28.866 21.134 32 25 32Z",
    fill: color
  }));
});

var Size$1 = {
  Xs: 'xs',
  Sm: 'sm',
  Md: 'md',
  Lg: 'lg'
};

var baseClassName$g = 'CrossButton';
var crossButtonPaddingMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Size$1.Xs, css(["padding:5px;height:20px;"])), Size$1.Sm, css(["padding:6px;height:24px;"])), Size$1.Md, css(["padding:9px;"])), Size$1.Lg, css(["padding:12px;"]));
var CrossButton$2 = /*#__PURE__*/styled.button.attrs({
  className: generateClassNames(baseClassName$g, 'root')
}).withConfig({
  componentId: "sc-ygfku-0"
})(function (_ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? Size$1.Lg : _ref$size,
    theme = _ref.theme;
  return css(["display:flex;justify-content:center;align-items:center;cursor:pointer;border-radius:4px;", " color:", ";background:transparent;border:none;transition:all 100ms ease-out;&:hover{color:", ";background:", ";}&:active{color:", ";background:", ";}"], crossButtonPaddingMixin[size], theme.palette[Color.IconsSecondary], theme.palette[Color.IconsPrimary], theme.palette[Color.BackgroundHover], theme.palette[Color.IconsPrimaryHover], theme.palette[Color.BackgroundActive]);
});
var Styled$v = applyDisplayNames({
  CrossButton: CrossButton$2
});
var Styled$w = Styled$v;

var _excluded$l = ["size"];
var getIconSize$1 = function getIconSize(sizeName) {
  switch (sizeName) {
    case Size$1.Lg:
      return 16;
    case Size$1.Xs:
      return 10;
    case Size$1.Sm:
    default:
      return 12;
  }
};
var CrossButton = intrinsicComponent$1(function (_ref, ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? Size$1.Lg : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$l);
  return /*#__PURE__*/React__default.createElement(Styled$w.CrossButton, _extends({
    type: "button",
    size: size
  }, rest, {
    ref: ref
  }), /*#__PURE__*/React__default.createElement(CrossOutline$1, {
    size: getIconSize$1(size)
  }));
});
var CrossButton$1 = CrossButton;

var baseClassName$f = 'Select';
var Icon$2 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$f, 'Icon')
}).withConfig({
  componentId: "sc-mfrapg-0"
})(function (_ref) {
  var palette = _ref.theme.palette,
    size = _ref.size,
    disabled = _ref.disabled;
  return css(["display:flex;flex-shrink:0;color:", ";padding:", ";"], disabled ? palette[Color.IconsMuted] : palette[Color.IconsPrimary], size === Size$2.Md ? '2.5px' : '2px');
});
var TickIcon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$f, 'tickIcon')
}).withConfig({
  componentId: "sc-mfrapg-1"
})(function (_ref2) {
  var palette = _ref2.theme.palette;
  return css(["color:", ";"], palette[Color.AccentStateless]);
});
var Container$1 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$f, 'Container')
}).withConfig({
  componentId: "sc-mfrapg-2"
})(function (_ref3) {
  var _ref3$fullWidth = _ref3.fullWidth,
    fullWidth = _ref3$fullWidth === void 0 ? false : _ref3$fullWidth;
  return css(["position:relative;display:inline-flex;", ""], fullWidth ? 'width: 100%' : '');
});
var StyledCrossButton = /*#__PURE__*/styled(CrossButton$1).attrs({
  className: generateClassNames(baseClassName$f, 'CrossButton')
}).withConfig({
  componentId: "sc-mfrapg-3"
})(function () {
  return css(["display:none;margin-right:6px;"]);
});
var Select$3 = /*#__PURE__*/styled(StyledInput.Input).attrs({
  className: generateClassNames(baseClassName$f, 'root')
}).withConfig({
  componentId: "sc-mfrapg-4"
})(function (_ref4) {
  var palette = _ref4.theme.palette,
    disabled = _ref4.disabled,
    readOnly = _ref4.readOnly,
    _ref4$size = _ref4.size,
    size = _ref4$size === void 0 ? 'sm' : _ref4$size,
    isValueExists = _ref4.isValueExists;
  return css(["cursor:", ";user-select:none;gap:0px;background:", ";", " ", ";"], disabled || readOnly ? 'default' : 'pointer', disabled ? palette[Color.BackgroundHover] : palette[Color.BackgroundStateless], isValueExists && "\n    &:hover {\n      ".concat(StyledCrossButton, " {\n        display: flex;\n      }\n    }\n    "), fontSizeInputMixin[size]);
});
var Label$1 = /*#__PURE__*/styled.label.attrs({
  className: generateClassNames(baseClassName$f, 'Label')
}).withConfig({
  componentId: "sc-mfrapg-5"
})(function (_ref5) {
  var hideEllipsis = _ref5.hideEllipsis,
    _ref5$size = _ref5.size,
    size = _ref5$size === void 0 ? Size$2.Md : _ref5$size;
  return "\n    flex-grow: 1;\n    margin-right: ".concat(size === Size$2.Md ? 8 : 12, "px;\n\n    ").concat(!hideEllipsis && css(["white-space:nowrap;text-overflow:ellipsis;overflow:hidden;"]), "\n  ");
});
var Placeholder = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$f, 'Placeholder')
}).withConfig({
  componentId: "sc-mfrapg-6"
})(function (_ref6) {
  var palette = _ref6.theme.palette,
    size = _ref6.size;
  return css(["width:100%;color:", ";margin-right:", "px;"], palette[Color.TextPlaceholder], size === Size$2.Md ? 16 : 12);
});
var Input = /*#__PURE__*/styled.input.attrs({
  className: generateClassNames(baseClassName$f, 'Input'),
  'aria-hidden': 'true'
}).withConfig({
  componentId: "sc-mfrapg-7"
})(["left:0;width:100%;bottom:0;opacity:0;position:absolute;pointer-events:none;box-sizing:border-box;"]);
var Styled$t = applyDisplayNames({
  Container: Container$1,
  Select: Select$3,
  Label: Label$1,
  Icon: Icon$2,
  TickIcon: TickIcon,
  Input: Input,
  Placeholder: Placeholder,
  StyledCrossButton: StyledCrossButton
});
var Styled$u = Styled$t;

function ownKeys$6(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$6(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$6(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$6(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var getIconSize = function getIconSize(size) {
  switch (size) {
    case InputSize.Md:
      return 16;
    case InputSize.Sm:
    default:
      return 14;
  }
};
var generateChildren = function generateChildren(children) {
  var isActive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var size = arguments.length > 2 ? arguments[2] : undefined;
  var hideMenuItemsActions = arguments.length > 3 ? arguments[3] : undefined;
  var miChildren = /*#__PURE__*/React__default.createElement(MenuItemLabel$1, null, children);
  if (isActive && children) {
    var miActions = /*#__PURE__*/React__default.createElement(MenuItemActions$1, null, /*#__PURE__*/React__default.createElement(Styled$u.TickIcon, null, /*#__PURE__*/React__default.createElement(Tick, {
      size: getIconSize(size)
    })));
    if (React__default.Children.count(children) === 1) {
      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, miChildren, !hideMenuItemsActions && miActions);
    }
    if (React__default.Children.count(children) > 1 && !React__default.Children.toArray(children).some(function (child) {
      var _child$type;
      return (child === null || child === void 0 || (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.displayName) === 'MenuItemActions';
    })) {
      return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, children, miActions);
    }
  }
  return miChildren;
};
var renderOption = function renderOption(menuItem, _ref) {
  var _type, _props, _props2, _props3;
  var value = _ref.value,
    _ref$multiple = _ref.multiple,
    multiple = _ref$multiple === void 0 ? false : _ref$multiple,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? InputSize.Md : _ref$size,
    _ref$hideMenuItemsAct = _ref.hideMenuItemsActions,
    hideMenuItemsActions = _ref$hideMenuItemsAct === void 0 ? false : _ref$hideMenuItemsAct,
    onClose = _ref.onClose,
    onChange = _ref.onChange;
  if (! /*#__PURE__*/React__default.isValidElement(menuItem)) {
    return menuItem;
  }
  if (((_type = menuItem.type) === null || _type === void 0 ? void 0 : _type.displayName) !== 'MenuItem') {
    return /*#__PURE__*/React__default.cloneElement(menuItem);
  }
  var menuItemValue = menuItem === null || menuItem === void 0 || (_props = menuItem.props) === null || _props === void 0 ? void 0 : _props.value;
  var valueArr = multiple ? Array.isArray(value) ? value : [] : [value];
  var active = valueArr.length > 0 && valueArr.includes(menuItemValue);
  var isDisabledMenuItem = menuItem === null || menuItem === void 0 || (_props2 = menuItem.props) === null || _props2 === void 0 ? void 0 : _props2.disabled;
  return /*#__PURE__*/React__default.cloneElement(menuItem, {
    active: active,
    size: size,
    children: generateChildren(menuItem === null || menuItem === void 0 || (_props3 = menuItem.props) === null || _props3 === void 0 ? void 0 : _props3.children, active, size, hideMenuItemsActions),
    onClick: function onClick() {
      var _menuItemValue$toStri;
      if (!multiple && typeof onClose === 'function') {
        onClose();
      }
      if (typeof onChange === 'function' && !isDisabledMenuItem && !!(menuItemValue !== null && menuItemValue !== void 0 && (_menuItemValue$toStri = menuItemValue.toString()) !== null && _menuItemValue$toStri !== void 0 && _menuItemValue$toStri.length)) {
        var newValue = menuItemValue;
        if (multiple) {
          newValue = _toConsumableArray(Array.isArray(value) ? value : []);
          var index = newValue.indexOf(menuItemValue);
          if (index > -1) {
            newValue.splice(index, 1);
          } else {
            newValue.push(menuItemValue);
          }
        }
        onChange(newValue);
      }
    }
  });
};
var getOptionValue = function getOptionValue(option) {
  var children = option.props ? option.props.children : option;
  if (Array.isArray(children)) return children.map(function (child) {
    return getOptionValue(child);
  }).join(' ');
  if (_typeof(children) === 'object') return getOptionValue(children.props.children);
  return children;
};
var renderOptionValue = function renderOptionValue(option, showSelectionKey) {
  if (option && option.children) {
    var child = showSelectionKey ? option.value : option.children;
    while (typeof child !== 'string') {
      if (Array.isArray(child)) {
        child = getOptionValue(child[1]);
      } else {
        child = getOptionValue(child);
      }
    }
    return child;
  }
};
var renderValue = function renderValue(_ref2) {
  var value = _ref2.value,
    _ref2$multiple = _ref2.multiple,
    multiple = _ref2$multiple === void 0 ? false : _ref2$multiple,
    children = _ref2.children,
    _ref2$showSelectionKe = _ref2.showSelectionKey,
    showSelectionKey = _ref2$showSelectionKe === void 0 ? false : _ref2$showSelectionKe;
  var optionsProps = [];
  React__default.Children.forEach(children, function (child) {
    if ( /*#__PURE__*/React__default.isValidElement(child)) {
      var _ref3 = (child === null || child === void 0 ? void 0 : child.type) || {},
        displayName = _ref3.displayName;
      if (displayName === 'MenuItem' && Boolean(child.props)) {
        optionsProps.push(_objectSpread$6({}, child.props));
      }
    }
  });
  var activeOptions = multiple ? optionsProps.filter(function (itemProps) {
    return Array.isArray(value) && value.includes(itemProps.value);
  }) : [optionsProps.find(function (itemProps) {
    return itemProps.value === value;
  })];
  if (activeOptions.length > 0) {
    return activeOptions.map(function (option) {
      return renderOptionValue(option, showSelectionKey);
    }).join(', ');
  }
  return Array.isArray(value) ? value.join(', ') : value;
};

var _excluded$k = ["children", "size", "error", "multiple", "onChange", "value", "fullWidth", "selectProps", "MenuProps", "readOnly", "disabled", "placeholder", "showSelectionKey", "hideMenuItemsActions", "showClearIcon", "renderLabel", "onRequestClose", "hideEllipsis"];
var Select$1 = intrinsicComponent$1(function (_ref, ref) {
  var _value$toString;
  var children = _ref.children,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? InputSize.Md : _ref$size,
    _ref$error = _ref.error,
    error = _ref$error === void 0 ? false : _ref$error,
    _ref$multiple = _ref.multiple,
    multiple = _ref$multiple === void 0 ? false : _ref$multiple,
    onChange = _ref.onChange,
    value = _ref.value,
    _ref$fullWidth = _ref.fullWidth,
    fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
    selectProps = _ref.selectProps,
    MenuProps = _ref.MenuProps,
    _ref$readOnly = _ref.readOnly,
    readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,
    disabled = _ref.disabled,
    placeholder = _ref.placeholder,
    showSelectionKey = _ref.showSelectionKey,
    _ref$hideMenuItemsAct = _ref.hideMenuItemsActions,
    hideMenuItemsActions = _ref$hideMenuItemsAct === void 0 ? false : _ref$hideMenuItemsAct,
    _ref$showClearIcon = _ref.showClearIcon,
    showClearIcon = _ref$showClearIcon === void 0 ? false : _ref$showClearIcon,
    renderLabel = _ref.renderLabel,
    onRequestClose = _ref.onRequestClose,
    _ref$hideEllipsis = _ref.hideEllipsis,
    hideEllipsis = _ref$hideEllipsis === void 0 ? false : _ref$hideEllipsis,
    rest = _objectWithoutProperties(_ref, _excluded$k);
  var _useState = useState(undefined),
    _useState2 = _slicedToArray(_useState, 2),
    anchorEl = _useState2[0],
    setAnchorEl = _useState2[1];
  var open = Boolean(anchorEl);
  var handleClick = function handleClick(event) {
    return setAnchorEl(event.currentTarget);
  };
  var isValueExists = Array.isArray(value) ? !!value.length : !!(value !== null && value !== void 0 && (_value$toString = value.toString()) !== null && _value$toString !== void 0 && _value$toString.length);
  var handleClose = function handleClose() {
    if (onRequestClose) {
      onRequestClose();
    }
    setAnchorEl(undefined);
  };
  var handleClearSelection = function handleClearSelection(event) {
    event.stopPropagation();
    if (typeof onChange === 'function') {
      onChange('');
    }
  };
  return /*#__PURE__*/React__default.createElement(Styled$u.Container, {
    ref: ref,
    fullWidth: Boolean(fullWidth)
  }, /*#__PURE__*/React__default.createElement(Styled$u.Select, _extends({}, rest, {
    disabled: disabled,
    size: size,
    $error: error,
    $fullWidth: Boolean(fullWidth),
    readOnly: readOnly,
    showSelectionKey: showSelectionKey,
    isValueExists: isValueExists,
    onClick: readOnly || disabled ? undefined : handleClick
  }), isValueExists && /*#__PURE__*/React__default.createElement(Styled$u.Label, {
    hideEllipsis: hideEllipsis,
    size: size
  }, typeof renderLabel === 'function' ? renderLabel(value) : renderValue({
    value: value,
    multiple: multiple,
    children: children,
    showSelectionKey: showSelectionKey
  })), !isValueExists && /*#__PURE__*/React__default.createElement(Styled$u.Placeholder, {
    size: size
  }, placeholder), !readOnly && showClearIcon && /*#__PURE__*/React__default.createElement(Styled$u.StyledCrossButton, {
    size: size === Size$1.Md ? Size$1.Sm : Size$1.Xs,
    onClick: handleClearSelection
  }), /*#__PURE__*/React__default.createElement(Styled$u.Icon, {
    size: size,
    disabled: disabled
  }, /*#__PURE__*/React__default.createElement(ArrowTick$1, {
    type: open ? 'top' : 'bottom',
    IconProps: {
      size: size === Size$1.Md ? 11 : 10
    }
  })), /*#__PURE__*/React__default.createElement(Styled$u.Input, selectProps)), /*#__PURE__*/React__default.createElement(Menu$2, _extends({
    onClose: handleClose
  }, MenuProps, {
    open: open,
    anchorEl: anchorEl
  }), React__default.Children.map(children, function (child) {
    return renderOption(child, {
      value: value,
      multiple: multiple,
      size: size,
      hideMenuItemsActions: hideMenuItemsActions,
      onClose: handleClose,
      onChange: readOnly || disabled ? undefined : onChange
    });
  })));
});
PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.oneOf([null])]);
var Select$2 = Select$1;

function useDrag(onMove, onStart, onEnd) {
  var onDragging = function onDragging(e) {
    if (typeof onMove === 'function') {
      var _e$touches;
      onMove(((_e$touches = e.touches) === null || _e$touches === void 0 ? void 0 : _e$touches[0]) || e);
    }
  };
  var disableSliding = function disableSliding(e) {
    document.removeEventListener('mousemove', onDragging);
    document.removeEventListener('mouseup', disableSliding);
    document.removeEventListener('mouseleave', disableSliding);
    document.removeEventListener('touchmove', onDragging);
    document.removeEventListener('touchend', disableSliding);
    document.removeEventListener('touchcancel', disableSliding);
    if (typeof onEnd === 'function') {
      var _e$touches2;
      onEnd(((_e$touches2 = e.touches) === null || _e$touches2 === void 0 ? void 0 : _e$touches2[0]) || e);
    }
  };
  var enableDrag = function enableDrag(e) {
    document.addEventListener('mousemove', onDragging);
    document.addEventListener('mouseup', disableSliding);
    document.addEventListener('mouseleave', disableSliding);
    document.addEventListener('touchmove', onDragging);
    document.addEventListener('touchend', disableSliding);
    document.addEventListener('touchcancel', disableSliding);
    if (typeof onStart === 'function') {
      var _e$touches3;
      onStart(((_e$touches3 = e.touches) === null || _e$touches3 === void 0 ? void 0 : _e$touches3[0]) || e);
    }
  };
  return {
    onMouseDown: enableDrag,
    onTouchStart: enableDrag
  };
}

function ownKeys$5(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$5(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$5(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$5(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var baseClassName$e = 'ColorPicker';
var colorItemClassName = 'ColorItem';
var ColorPickerWrapper = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$e, 'root')
}).withConfig({
  componentId: "sc-qj4xo5-0"
})(["background-color:", ";box-shadow:0px 1px 2px rgba(78,77,77,0.15);border-radius:2px;padding:12px;max-width:300px;"], function (_ref) {
  var theme = _ref.theme;
  return theme.palette[Color.BackgroundSecondary];
});
var ColorPickerIcon = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$e, 'icon')
}).withConfig({
  componentId: "sc-qj4xo5-1"
})(["display:flex;justify-content:space-between;align-items:center;cursor:pointer;"]);
var RangePickerWrapper = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$e, 'range-picker')
}).withConfig({
  componentId: "sc-qj4xo5-2"
})(function (_ref2) {
  var color = _ref2.color;
  return css(["position:relative;border-radius:2px;width:100%;height:180px;user-select:none;cursor:crosshair;background-color:", ";"], color);
});
var WhiteGradient = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$e, 'white-gradient')
}).withConfig({
  componentId: "sc-qj4xo5-3"
})(["background:linear-gradient(to right,white 0%,rgba(255,255,255,0) 100%);z-index:0;position:absolute;width:100%;height:100%;border-radius:2px;user-select:none;pointer-events:none;top:-1px;"]);
var BlackGradient = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$e, 'black-gradient')
}).withConfig({
  componentId: "sc-qj4xo5-4"
})(["background:linear-gradient(to bottom,rgba(0,0,0,0) 0%,black 100%);z-index:1;position:absolute;width:100%;height:100%;border-radius:2px;user-select:none;pointer-events:none;"]);
var ColorPointer = /*#__PURE__*/styled.span.attrs(function (_ref3) {
  var _ref3$left = _ref3.left,
    left = _ref3$left === void 0 ? 0 : _ref3$left,
    _ref3$top = _ref3.top,
    top = _ref3$top === void 0 ? 0 : _ref3$top,
    _ref3$considerTopWidt = _ref3.considerTopWidth,
    considerTopWidth = _ref3$considerTopWidt === void 0 ? false : _ref3$considerTopWidt,
    style = _ref3.style;
  return {
    className: generateClassNames(baseClassName$e, 'pointer'),
    style: _objectSpread$5({
      left: left - 7,
      // 7
      top: top - (considerTopWidth ? 7 : 0)
    }, style)
  };
}).withConfig({
  componentId: "sc-qj4xo5-5"
})(function (_ref4) {
  var theme = _ref4.theme,
    pointerColor = _ref4.pointerColor;
  return css(["display:inline-block;box-sizing:border-box;width:15px;height:15px;border-radius:20px;box-shadow:0px 1px 2px rgba(78,77,77,0.15);border:2px solid ", ";background-color:", ";position:absolute;cursor:pointer;z-index:11;user-select:none;outline:none;"], theme.palette[Color.BackgroundSecondary], pointerColor);
});
var BarWrapper = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$e, 'bar-wrapper')
}).withConfig({
  componentId: "sc-qj4xo5-6"
})(["margin-top:8px;position:relative;width:100%;height:12px;"]);
var Bar = /*#__PURE__*/styled.table.attrs({
  className: generateClassNames(baseClassName$e, 'bar')
}).withConfig({
  componentId: "sc-qj4xo5-7"
})(["border-radius:4px;width:100%;height:8px;border-collapse:collapse;"]);
var BarColorStop = /*#__PURE__*/styled.td.attrs(function (_ref5) {
  var $color = _ref5.$color;
  return {
    className: generateClassNames(baseClassName$e, 'stop'),
    style: {
      backgroundColor: $color
    }
  };
}).withConfig({
  componentId: "sc-qj4xo5-8"
})(["padding:0;user-select:none;pointer-events:none;&:first-child{width:4px;border-top-left-radius:4px;border-bottom-left-radius:4px;}&:last-child{width:4px;border-top-right-radius:4px;border-bottom-right-radius:4px;}"]);
var ColorPickerAction = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$e, 'action')
}).withConfig({
  componentId: "sc-qj4xo5-9"
})(["display:flex;justify-content:space-between;align-items:center;gap:12px;margin-bottom:12px;"]);
var ColorItemWrapper = /*#__PURE__*/styled.label.attrs({
  className: generateClassNames(colorItemClassName, 'label')
}).withConfig({
  componentId: "sc-qj4xo5-10"
})(function (_ref6) {
  var theme = _ref6.theme,
    size = _ref6.size,
    color = _ref6.color,
    stroke = _ref6.stroke,
    value = _ref6.value;
  return css(["border-radius:2px;border:", ";box-sizing:border-box;width:", "px;height:", "px;background-color:", ";user-select:none;display:flex;align-items:center;justify-content:center;cursor:pointer;transition:all 300ms;margin-bottom:8px;background:", ";input{display:none;}"], "1px solid ".concat(stroke), size, size, color, value === 'rgba(0,0,0,0)' && "repeating-conic-gradient(".concat(theme.palette[Color.LinkPrimary], " 0% 25%, transparent 0% 50%) 50% / 8px 8px"));
});
var ColorItemsContainer = /*#__PURE__*/styled.div.withConfig({
  componentId: "sc-qj4xo5-11"
})(["display:flex;flex-wrap:wrap;align-content:space-between;margin-top:14px;margin-left:12px;& > .item{margin-right:8px;display:flex;justify-content:center;}"]);
var Select = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$e, 'select')
}).withConfig({
  componentId: "sc-qj4xo5-12"
})(function (_ref7) {
  var value = _ref7.value;
  return css(["width:", ";"], value === 'rgb' ? '25%' : '35%');
});
var SelectWrapper = /*#__PURE__*/styled.div.withConfig({
  componentId: "sc-qj4xo5-13"
})({
  display: 'flex',
  alignItems: 'center',
  gap: '12px'
});
var Styled$r = applyDisplayNames({
  ColorPickerWrapper: ColorPickerWrapper,
  RangePickerWrapper: RangePickerWrapper,
  WhiteGradient: WhiteGradient,
  BlackGradient: BlackGradient,
  ColorPointer: ColorPointer,
  BarWrapper: BarWrapper,
  Bar: Bar,
  BarColorStop: BarColorStop,
  ColorPickerAction: ColorPickerAction,
  ColorPickerIcon: ColorPickerIcon,
  ColorItemsContainer: ColorItemsContainer,
  ColorItemWrapper: ColorItemWrapper,
  Select: Select,
  SelectWrapper: SelectWrapper
});
var Styled$s = Styled$r;

var ColorItem = intrinsicComponent$1(function (_ref, ref) {
  var value = _ref.value,
    onChange = _ref.onChange,
    checked = _ref.checked,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 24 : _ref$size;
  var checkIconColor = useMemo(function () {
    if (value === '#ffffff' || value === 'rgba(0,0,0,0)') {
      return 'black';
    }
    return 'white';
  }, [value]);
  return /*#__PURE__*/React__default.createElement(Styled$s.ColorItemWrapper, {
    ref: ref,
    color: value,
    size: size,
    stroke: value === 'rgba(0,0,0,0)' ? '#a8a8a8' : '#E9EEF2',
    value: value
  }, /*#__PURE__*/React__default.createElement("input", {
    type: "radio",
    value: value,
    checked: checked,
    onChange: onChange
  }), checked && /*#__PURE__*/React__default.createElement(Tick, {
    color: checkIconColor
  }));
});
var ColorItem$1 = ColorItem;

var _excluded$j = ["defaultColor", "onChange", "pinnedColors", "showTransparentColor", "hidePinIcon", "containerProps"];
function ownKeys$4(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$4(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$4(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var transparentColor = ['rgba(0,0,0,0)'];
var transparentColorHex = '#00000000';
var colorsHuesCount = 360;
var ColorPicker = intrinsicComponent$1(function (_ref, ref) {
  var _ref$defaultColor = _ref.defaultColor,
    defaultColor = _ref$defaultColor === void 0 ? '#000000' : _ref$defaultColor,
    onChange = _ref.onChange,
    _ref$pinnedColors = _ref.pinnedColors,
    pinnedColors = _ref$pinnedColors === void 0 ? [] : _ref$pinnedColors,
    _ref$showTransparentC = _ref.showTransparentColor,
    showTransparentColor = _ref$showTransparentC === void 0 ? false : _ref$showTransparentC,
    _ref$hidePinIcon = _ref.hidePinIcon,
    hidePinIcon = _ref$hidePinIcon === void 0 ? false : _ref$hidePinIcon,
    containerProps = _ref.containerProps,
    rest = _objectWithoutProperties(_ref, _excluded$j);
  var showedColors = showTransparentColor ? transparentColor.concat(pinnedColors) : pinnedColors;
  var isTransparentColor = function isTransparentColor(color) {
    return color === transparentColorHex || color === transparentColor[0];
  };
  var _useState = useState({
      color: '#ff0000',
      pointerLeft: 0
    }),
    _useState2 = _slicedToArray(_useState, 2),
    bar = _useState2[0],
    setBar = _useState2[1];
  var _useState3 = useState({
      color: isTransparentColor(defaultColor) ? '#00000000' : colorToHex(defaultColor) || '#000000',
      pointer: {
        left: 0,
        top: 0
      }
    }),
    _useState4 = _slicedToArray(_useState3, 2),
    rangePicker = _useState4[0],
    setRangePicker = _useState4[1];
  var _useState5 = useState(showedColors),
    _useState6 = _slicedToArray(_useState5, 2),
    localPinnedColors = _useState6[0],
    setLocalPinnedColors = _useState6[1];
  var _useState7 = useState('hex'),
    _useState8 = _slicedToArray(_useState7, 2),
    inputType = _useState8[0],
    setInputType = _useState8[1];
  var _useState9 = useState([]),
    _useState10 = _slicedToArray(_useState9, 2),
    rgbColorValue = _useState10[0],
    setRgbColorValue = _useState10[1];
  var _useState11 = useState(colorToHex(rangePicker.color)),
    _useState12 = _slicedToArray(_useState11, 2),
    hexInputValue = _useState12[0],
    setHexInputValue = _useState12[1];
  var _useState13 = useState(null),
    _useState14 = _slicedToArray(_useState13, 2),
    barRef = _useState14[0],
    setBarRef = _useState14[1];
  var _useState15 = useState(null),
    _useState16 = _slicedToArray(_useState15, 2),
    rangePickerRef = _useState16[0],
    setRangePickerRef = _useState16[1];
  var isColorChecked = function isColorChecked(checkedColor) {
    if (checkedColor === transparentColor[0] && rangePicker.color === transparentColorHex) {
      return true;
    }
    return checkedColor === rangePicker.color;
  };
  var filterTransparentColor = function filterTransparentColor(colors) {
    return colors.filter(function (item) {
      return item !== 'rgba(0,0,0,0)';
    });
  };
  var getRgbColor = function getRgbColor(color) {
    return isTransparentColor(color) ? transparentColor[0] : "rgb(".concat(hexToRgb(color).join(', '), ")");
  };
  var handlePinnedColors = function handlePinnedColors(hexColor, type) {
    if (type === 'add') {
      var newLocalPinnedColors = [].concat(_toConsumableArray(localPinnedColors), [hexColor]);
      setLocalPinnedColors(newLocalPinnedColors);
      if (typeof onChange === 'function') {
        onChange(rangePicker.color, getRgbColor(hexColor), filterTransparentColor(newLocalPinnedColors));
      }
    } else {
      var _newLocalPinnedColors = localPinnedColors.filter(function (item) {
        return item !== rangePicker.color;
      });
      setLocalPinnedColors(_newLocalPinnedColors);
      if (typeof onChange === 'function') {
        onChange(rangePicker.color, getRgbColor(hexColor), filterTransparentColor(_newLocalPinnedColors));
      }
    }
  };
  var changeBarPosByColor = function changeBarPosByColor(color) {
    if (barRef !== null) {
      var _ref2 = getElemDocumentCoords$1(barRef),
        left = _ref2.left;
      var _colorToHsl = colorToHsl(color || rangePicker.color),
        _colorToHsl2 = _slicedToArray(_colorToHsl, 1),
        h = _colorToHsl2[0];
      var targetColorElem = barRef.querySelector("[data-hue='".concat(h, "']"));
      if (targetColorElem !== null) {
        var targetColorRgb = targetColorElem.style.backgroundColor || bar.color;
        setBar({
          color: targetColorRgb,
          pointerLeft: getElemDocumentCoords$1(targetColorElem).left - left || bar.pointerLeft
        });
      }
    }
  };
  var handleRgbInput = function handleRgbInput(value, index) {
    if (value > 255 || Number.isNaN(value)) {
      return;
    }
    var rgbArr = rgbColorValue;
    rgbArr[index] = value;
    var newHexColor = rgbToHex.apply(void 0, _toConsumableArray(rgbArr));
    setRgbColorValue(_toConsumableArray(rgbArr));
    if (validateHex(newHexColor)) {
      setRangePicker(_objectSpread$4(_objectSpread$4({}, rangePicker), {}, {
        color: newHexColor
      }));
      changeBarPosByColor(newHexColor);
      changeRangePickerPointerPosByColor(newHexColor);
    }
  };
  var updateRgb = function updateRgb(color) {
    if (color.includes('rgb')) {
      setRgbColorValue(rgbStringToArray(color));
    } else {
      setRgbColorValue(hexToRgb(color));
    }
  };
  var getHexColor = function getHexColor(color) {
    return isTransparentColor(color) ? transparentColorHex : color;
  };
  var changeRangePickerPointerPosByColor = function changeRangePickerPointerPosByColor(color) {
    if (rangePickerRef !== null) {
      var _ref3 = getElemDocumentCoords$1(rangePickerRef),
        width = _ref3.width,
        height = _ref3.height;
      var colorHsl = colorToHsl(color);
      var colorHsv = hslToHsv(colorHsl[0], colorHsl[1] / 100, colorHsl[2] / 100);
      var left = mapNumber$1(colorHsv[1], 0, 100, 0, width);
      var top = height - mapNumber$1(colorHsv[2], 0, 100, 0, height);
      setRangePicker({
        color: getHexColor(color),
        pointer: {
          left: left,
          top: top
        }
      });
      changeBarPosByColor(color);
      updateRgb(color);
      if (typeof onChange === 'function') {
        onChange(getHexColor(color), getRgbColor(color), filterTransparentColor(localPinnedColors));
      }
    }
  };
  var changeRangePickerColorByPosition = function changeRangePickerColorByPosition(left, top, barColor) {
    if (rangePickerRef !== null) {
      var _ref4 = getElemDocumentCoords$1(rangePickerRef),
        width = _ref4.width,
        height = _ref4.height;
      var _colorToHsl3 = colorToHsl(barColor),
        _colorToHsl4 = _slicedToArray(_colorToHsl3, 1),
        barColorHue = _colorToHsl4[0];
      var restrictedLeft = restrictNumber$1(left, 0, width) || 0;
      var restrictedTop = restrictNumber$1(top, 0, height) || 0;
      var hsl = hsvToHsl(barColorHue, restrictedLeft / width, (height - restrictedTop) / height);
      var hexColor = hslToHex(hsl[0], hsl[1], hsl[2]);
      setRangePicker({
        color: hexColor,
        pointer: {
          left: restrictedLeft,
          top: restrictedTop
        }
      });
      if (typeof onChange === 'function') {
        onChange(hexColor, "rgb(".concat(hexToRgb(hexColor).join(', '), ")"), filterTransparentColor(localPinnedColors));
      }
    }
  };
  var changeBarColorByPosition = function changeBarColorByPosition(pointerLeft) {
    var barElem = barRef;
    if (barElem !== null) {
      var _ref5 = getElemDocumentCoords$1(barElem),
        width = _ref5.width;
      var mappedPointerLeft = restrictNumber$1(Math.round(mapNumber$1(pointerLeft, 0, width, 0, colorsHuesCount)), 0, colorsHuesCount);
      var targetColorElem = barElem.querySelector("[data-hue='".concat(mappedPointerLeft, "']"));
      var targetColorRgb = targetColorElem.style.backgroundColor;
      setBar({
        color: targetColorRgb,
        pointerLeft: restrictNumber$1(pointerLeft, 0, width)
      });
      return targetColorRgb;
    }
    return bar.color;
  };
  var updateBarColor = function updateBarColor(e) {
    var barElem = barRef;
    if (barElem !== null) {
      var _e$touches;
      var _ref6 = getElemDocumentCoords$1(barElem),
        left = _ref6.left;
      var pointerEvent = ((_e$touches = e.touches) === null || _e$touches === void 0 ? void 0 : _e$touches[0]) || e;
      var barColor = changeBarColorByPosition(pointerEvent.pageX - left);
      changeRangePickerColorByPosition(rangePicker.pointer.left, rangePicker.pointer.top, barColor);
    }
  };
  var updateRangePickerColor = function updateRangePickerColor(e) {
    var rangePickerElem = rangePickerRef;
    if (rangePickerElem !== null) {
      var _ref7 = getElemDocumentCoords$1(rangePickerElem),
        left = _ref7.left,
        top = _ref7.top,
        height = _ref7.height,
        width = _ref7.width;
      var pointerLeft = e ? restrictNumber$1(e.pageX - left, 0, width) : rangePicker.pointer.left || 0;
      var pointerTop = e ? restrictNumber$1(e.pageY - top, 0, height) : rangePicker.pointer.left || 0;
      changeRangePickerColorByPosition(pointerLeft, pointerTop, bar.color);
    }
  };
  var moveBarPointerByArrows = function moveBarPointerByArrows(e) {
    if (e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') {
      return;
    }
    changeBarColorByPosition(bar.pointerLeft + (e.key === 'ArrowLeft' ? -1 : 1));
  };
  var moveRangePickerPointerByArrows = function moveRangePickerPointerByArrows(e) {
    var currentDirection = 0;
    if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {
      currentDirection = -1;
    } else if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {
      currentDirection = 1;
    }
    if (currentDirection) {
      changeRangePickerColorByPosition((rangePicker.pointer.left || 0) + (['ArrowLeft', 'ArrowRight'].includes(e.key) ? currentDirection : 0), (rangePicker.pointer.top || 0) + (['ArrowUp', 'ArrowDown'].includes(e.key) ? currentDirection : 0), bar.color);
    }
  };
  var validateHexAndUpdate = function validateHexAndUpdate(color) {
    var testHex = validateHex(color);
    if (testHex) {
      changeRangePickerPointerPosByColor(color);
    }
    setHexInputValue(color);
  };
  useEffect(function () {
    changeBarPosByColor(rangePicker.color);
    changeRangePickerPointerPosByColor(rangePicker.color);
  }, [barRef]);
  useEffect(function () {
    setHexInputValue(rangePicker.color);
    updateRgb(rangePicker.color);
  }, [rangePicker.color]);
  var barColors = useMemo(function () {
    return _toConsumableArray(new Array(colorsHuesCount + 1)).map(function (_, h) {
      return /*#__PURE__*/React__default.createElement(Styled$s.BarColorStop, {
        key: h,
        $color: "hsl(".concat(h, ", 100%, 50%)"),
        "data-hue": h
      });
    });
  }, []);
  var barPointSliding = useDrag(updateBarColor, updateBarColor, null);
  var rangePickerPointSliding = useDrag(updateRangePickerColor, updateRangePickerColor, null);
  return /*#__PURE__*/React__default.createElement(Styled$s.ColorPickerWrapper, _extends({
    ref: ref
  }, rest), /*#__PURE__*/React__default.createElement(Styled$s.ColorPickerAction, null, /*#__PURE__*/React__default.createElement(Styled$s.SelectWrapper, null, /*#__PURE__*/React__default.createElement(Styled$s.Select, {
    value: inputType
  }, /*#__PURE__*/React__default.createElement(Select$2, {
    size: "sm",
    value: inputType,
    MenuProps: _objectSpread$4({
      zIndex: 11112
    }, containerProps),
    onChange: function onChange(ev) {
      return setInputType(ev);
    },
    fullWidth: true,
    hideEllipsis: true
  }, /*#__PURE__*/React__default.createElement(MenuItem$1, {
    value: "hex"
  }, "Hex"), /*#__PURE__*/React__default.createElement(MenuItem$1, {
    value: "rgb"
  }, "RGB"))), inputType === 'hex' ? /*#__PURE__*/React__default.createElement(Input$2, {
    size: "sm",
    error: !/^#(?:[0-9a-fA-F]{3,4}){1,2}$/i.test(rangePicker.color),
    value: hexInputValue,
    onChange: function onChange(e) {
      return validateHexAndUpdate(e.target.value);
    },
    style: {
      width: '45%'
    }
  }) : rgbColorValue.map(function (rgb, index) {
    return /*#__PURE__*/React__default.createElement(Input$2, {
      key: index,
      size: "sm",
      value: rgb,
      onChange: function onChange(e) {
        var _e$target;
        return handleRgbInput(Number((_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.value), index);
      },
      style: {
        width: '20%'
      }
    });
  })), rangePicker.color !== transparentColorHex && !hidePinIcon && /*#__PURE__*/React__default.createElement(Styled$s.ColorPickerIcon, {
    onClick: function onClick() {
      return localPinnedColors.some(function (checkedColor) {
        return isColorChecked(checkedColor);
      }) ? handlePinnedColors(rangePicker.color, 'delete') : handlePinnedColors(rangePicker.color, 'add');
    }
  }, localPinnedColors.some(function (checkedColor) {
    return isColorChecked(checkedColor);
  }) ? /*#__PURE__*/React__default.createElement(DeleteOutline, null) : /*#__PURE__*/React__default.createElement(PinOutline, null))), /*#__PURE__*/React__default.createElement(Styled$s.RangePickerWrapper, _extends({
    ref: setRangePickerRef,
    color: bar.color
  }, rangePickerPointSliding), /*#__PURE__*/React__default.createElement(Styled$s.WhiteGradient, null), /*#__PURE__*/React__default.createElement(Styled$s.BlackGradient, null), /*#__PURE__*/React__default.createElement(Styled$s.ColorPointer, {
    tabIndex: -1,
    left: rangePicker.pointer.left || 0,
    top: rangePicker.pointer.top || 0,
    onKeyDown: moveRangePickerPointerByArrows,
    pointerColor: hexInputValue,
    considerTopWidth: true
  })), /*#__PURE__*/React__default.createElement(Styled$s.BarWrapper, barPointSliding, /*#__PURE__*/React__default.createElement(Styled$s.Bar, {
    ref: setBarRef
  }, /*#__PURE__*/React__default.createElement("tbody", null, /*#__PURE__*/React__default.createElement("tr", null, barColors))), /*#__PURE__*/React__default.createElement(Styled$s.ColorPointer, {
    tabIndex: -1,
    left: bar.pointerLeft,
    onKeyDown: moveBarPointerByArrows,
    considerTopWidth: false,
    pointerColor: hexInputValue,
    style: {
      top: -3
    }
  })), /*#__PURE__*/React__default.createElement(Styled$s.ColorItemsContainer, null, localPinnedColors.map(function (color) {
    return /*#__PURE__*/React__default.createElement("div", {
      className: "item",
      key: color
    }, /*#__PURE__*/React__default.createElement(ColorItem$1, {
      value: color,
      checked: isColorChecked(color),
      onChange: function onChange(ev) {
        return changeRangePickerPointerPosByColor(ev.target.value);
      }
    }));
  })));
});
var ColorPicker$1 = ColorPicker;

var colorButtonMixin = _defineProperty(_defineProperty(_defineProperty({}, IconButtonColor.Primary, function (_ref) {
  var palette = _ref.theme.palette,
    active = _ref.active;
  return css(["background-color:", ";color:", ";&:hover{background-color:", ";}&:focus{background-color:", ";}&:active{background-color:", ";}", " &:disabled{color:", ";background:", ";cursor:default;}"], palette[Color.AccentStateless], palette[Color.IconsInvert], palette[Color.AccentPrimaryHover], palette[Color.AccentPrimaryActive], palette[Color.AccentPrimaryActive], active && css(["background-color:", ";&:hover,&:focus{background-color:", ";}"], palette[Color.AccentPrimaryActive], palette[Color.AccentPrimaryActive]), palette[Color.BordersDisabled], palette[Color.Accent_1_2_Opacity]);
}), IconButtonColor.Secondary, function (_ref2) {
  var palette = _ref2.theme.palette,
    active = _ref2.active;
  return css(["background-color:", ";color:", ";border:1px solid ", ";&:hover{color:", ";background-color:", ";}&:focus{background-color:", ";color:", ";border:1px solid ", ";}&:active{color:", ";background-color:", ";}", " &:disabled{color:", ";background:", ";border:none;cursor:default;}"], palette[Color.BackgroundStateless], palette[Color.AccentStateless], palette[Color.AccentStateless], palette[Color.IconsInvert], palette[Color.AccentPrimaryHover], palette[Color.Accent_1_2_Opacity], palette[Color.AccentPrimaryActive], palette[Color.AccentPrimaryActive], palette[Color.IconsInvert], palette[Color.AccentPrimaryActive], active && css(["color:", ";background-color:", ";&:hover,&:focus{color:", ";background-color:", ";}"], palette[Color.IconsInvert], palette[Color.AccentPrimaryActive], palette[Color.IconsInvert], palette[Color.AccentPrimaryActive]), palette[Color.BordersDisabled], palette[Color.Accent_1_2_Opacity]);
}), IconButtonColor.Basic, function (_ref3) {
  var palette = _ref3.theme.palette,
    active = _ref3.active;
  return css(["background-color:transparent;color:", ";border:none;&:hover{background-color:", ";color:", ";}&:focus{background-color:", ";color:", ";}&:active{background-color:", ";color:", ";}", " &:disabled{background-color:transparent;color:", ";cursor:default;}"], palette[Color.IconsPrimary], palette[Color.BackgroundHover], palette[Color.IconsPrimaryHover], palette[Color.BackgroundActive], palette[Color.LinkActive], palette[Color.BackgroundActive], palette[Color.LinkActive], active && css(["background-color:", ";color:", ";&:hover,&:focus{background-color:", ";color:", ";}"], palette[Color.BackgroundActive], palette[Color.LinkActive], palette[Color.BackgroundActive], palette[Color.LinkActive]), palette[Color.BordersDisabled]);
});
var squarePaddingMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, ButtonSize.Xs, css(["padding:6px;"])), ButtonSize.Sm, css(["padding:9px;"])), ButtonSize.Md, css(["padding:12px;"])), ButtonSize.Lg, css(["padding:11px;"]));

var baseClassName$d = 'IconButton';
var IconButton$2 = /*#__PURE__*/styled(BStyled.Button).attrs({
  className: generateClassNames(baseClassName$d, 'root')
}).withConfig({
  componentId: "sc-10edh45-0"
})(function (_ref) {
  var theme = _ref.theme,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? IconButtonColor.Secondary : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? ButtonSize.Md : _ref$size,
    _ref$$active = _ref.$active,
    $active = _ref$$active === void 0 ? false : _ref$$active;
  return css(["", " ", ""], squarePaddingMixin[size], colorButtonMixin[color] ? colorButtonMixin[color]({
    theme: theme,
    active: $active
  }) : colorButtonMixin[IconButtonColor.Basic]({
    theme: theme,
    active: $active
  }));
});
var Styled$q = applyDisplayNames({
  IconButton: IconButton$2
});
var IconButtonStyled = Styled$q;

var _excluded$i = ["children", "size", "color", "active"];
var IconButton = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? ButtonSize.Md : _ref$size,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? IconButtonColor.Primary : _ref$color,
    _ref$active = _ref.active,
    active = _ref$active === void 0 ? false : _ref$active,
    rest = _objectWithoutProperties(_ref, _excluded$i);
  return /*#__PURE__*/React__default.createElement(IconButtonStyled.IconButton, _extends({
    type: "button"
  }, rest, {
    size: size,
    color: color,
    $active: active,
    ref: ref
  }), children && (typeof children === 'function' ? children({
    size: getIconSize$2(size)
  }) : children));
});
var IconButton$1 = IconButton;

var onClickByMouseDown = function onClickByMouseDown(event, callback) {
  event.preventDefault();
  if (event.button !== 0) {
    return;
  }
  if (callback) {
    callback(event);
  }
};

var errorMixin = function errorMixin(_ref) {
  var palette = _ref.theme.palette;
  return css(["background:", " !important;border:1px solid ", " !important;"], palette[Color.BackgroundSecondary], palette[Color.Error]);
};
var heightTextAreaMixin = _defineProperty(_defineProperty({}, InputSize.Sm, function () {
  return css(["height:136px;"]);
}), InputSize.Md, function () {
  return css(["height:152px;"]);
});
var sizeTextAreaMixin = _defineProperty(_defineProperty({}, InputSize.Sm, function (_ref2) {
  var font = _ref2.theme.typography.font;
  return css(["padding:8px 12px;", ""], font[FontVariant.InputMd]);
}), InputSize.Md, function (_ref3) {
  var font = _ref3.theme.typography.font;
  return css(["padding:8px 16px;", ""], font[FontVariant.InputLg]);
});

var baseClassName$c = 'Textarea';
var Textarea$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$c, 'root')
}).withConfig({
  componentId: "sc-1usif6k-0"
})(function (_ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? InputSize.Md : _ref$size,
    _ref$error = _ref.error,
    error = _ref$error === void 0 ? false : _ref$error,
    _ref$fullWidth = _ref.fullWidth,
    fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
    _ref$readOnly = _ref.readOnly,
    readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$autoSize = _ref.autoSize,
    autoSize = _ref$autoSize === void 0 ? false : _ref$autoSize,
    theme = _ref.theme;
  return css(["position:relative;display:inline-flex;flex-direction:column;align-items:flex-end;justify-content:space-between;cursor:text;box-sizing:border-box;transition:all 100ms ease-out;width:", ";pointer-events:", ";background-color:", ";border-radius:", ";border:1px solid ", ";color:", ";", " ", " &:hover{color:", ";}", " ", ""], fullWidth ? '100%' : '300px', disabled ? 'none' : 'auto', getInputBackgroundColor(readOnly, disabled), theme.shape.borderRadius[BorderRadiusSize.Md], getInputBorderColor(readOnly, disabled), disabled ? theme.palette[Color.TextPlaceholder] : theme.palette[Color.TextPrimary], heightTextAreaMixin[size], !readOnly && !disabled && css(["&:focus-within{background-color:", "!important;border:1px solid ", ";&:hover{border:1px solid ", ";}}&:hover{background-color:", ";border:1px solid ", ";}"], theme.palette[Color.BackgroundSecondary], theme.palette[Color.AccentStateless], theme.palette[Color.AccentStateless], theme.palette[Color.BackgroundStateless], theme.palette[Color.BordersPrimaryHover]), getInputTextColor(readOnly, disabled), error && errorMixin, autoSize && css(["width:auto;height:auto;"]));
});
var Base = /*#__PURE__*/styled.textarea.attrs({
  className: generateClassNames(baseClassName$c, 'Base')
}).withConfig({
  componentId: "sc-1usif6k-1"
})(function (_ref2) {
  var palette = _ref2.theme.palette,
    _ref2$readOnly = _ref2.readOnly,
    readOnly = _ref2$readOnly === void 0 ? false : _ref2$readOnly,
    _ref2$size = _ref2.size,
    size = _ref2$size === void 0 ? InputSize.Md : _ref2$size;
  return css(["display:block;width:100%;height:100%;color:inherit;outline:none;resize:none;min-width:0;margin:0;padding:0;border:0;background-color:transparent;outline:none;font-size:inherit;line-height:inherit;color:inherit;font-weight:inherit;font-family:inherit;box-sizing:border-box;flex:1;", " ", ";&::placeholder{color:", ";}::-webkit-scrollbar{width:12px;}::-webkit-scrollbar-track{width:8px;}::-webkit-scrollbar-thumb{background:", ";border-radius:8px;border:4px solid ", ";}"], readOnly && "padding-bottom: 0px;", sizeTextAreaMixin[size], palette[Color.TextPlaceholder], palette[Color.BorderPrimaryStateless], palette[Color.BackgroundStateless]);
});
var ActionsButtonsWrapper = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$c, 'ActionsButtonsWrapper')
}).withConfig({
  componentId: "sc-1usif6k-2"
})(function (_ref3) {
  var _ref3$size = _ref3.size,
    size = _ref3$size === void 0 ? InputSize.Md : _ref3$size;
  return css(["display:flex;align-items:center;width:100%;column-gap:12px;box-sizing:border-box;", ";.SfxButton-Label{font-weight:500;}"], sizeTextAreaMixin[size]);
});
var CopyIcon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$c, 'CopyIcon')
}).withConfig({
  componentId: "sc-1usif6k-3"
})(function (_ref4) {
  var palette = _ref4.theme.palette;
  return css(["cursor:pointer;color:", ";margin-left:auto;"], palette[Color.IconsPrimary]);
});
var Styled$o = applyDisplayNames({
  Textarea: Textarea$2,
  CopyIcon: CopyIcon,
  Base: Base,
  ActionsButtonsWrapper: ActionsButtonsWrapper
});
var Styled$p = Styled$o;

var _excluded$h = ["fullWidth", "size", "value", "readOnly", "disabled", "error", "cols", "rows", "copyTextMessage", "copySuccessIcon", "showActionButton", "showClearButton", "hideCopyIcon", "disableActionButton", "isActionButtonLoading", "actionButtonLabel", "clearAllButtonLabel", "onClickActionButton", "onClear", "onChange"];
function ownKeys$3(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$3(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var Textarea = intrinsicComponent$1(function (_ref, ref) {
  var _inputRef$current;
  var _ref$fullWidth = _ref.fullWidth,
    fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? InputSize.Md : _ref$size,
    value = _ref.value,
    _ref$readOnly = _ref.readOnly,
    readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$error = _ref.error,
    error = _ref$error === void 0 ? false : _ref$error,
    cols = _ref.cols,
    rows = _ref.rows,
    _ref$copyTextMessage = _ref.copyTextMessage,
    copyTextMessage = _ref$copyTextMessage === void 0 ? 'Copied!' : _ref$copyTextMessage,
    _ref$copySuccessIcon = _ref.copySuccessIcon,
    copySuccessIcon = _ref$copySuccessIcon === void 0 ? /*#__PURE__*/React__default.createElement(Success$1, {
      size: 16
    }) : _ref$copySuccessIcon,
    _ref$showActionButton = _ref.showActionButton,
    showActionButton = _ref$showActionButton === void 0 ? false : _ref$showActionButton,
    _ref$showClearButton = _ref.showClearButton,
    showClearButton = _ref$showClearButton === void 0 ? false : _ref$showClearButton,
    _ref$hideCopyIcon = _ref.hideCopyIcon,
    hideCopyIcon = _ref$hideCopyIcon === void 0 ? true : _ref$hideCopyIcon,
    _ref$disableActionBut = _ref.disableActionButton,
    disableActionButton = _ref$disableActionBut === void 0 ? false : _ref$disableActionBut,
    _ref$isActionButtonLo = _ref.isActionButtonLoading,
    isActionButtonLoading = _ref$isActionButtonLo === void 0 ? false : _ref$isActionButtonLo,
    _ref$actionButtonLabe = _ref.actionButtonLabel,
    actionButtonLabel = _ref$actionButtonLabe === void 0 ? 'Action' : _ref$actionButtonLabe,
    _ref$clearAllButtonLa = _ref.clearAllButtonLabel,
    clearAllButtonLabel = _ref$clearAllButtonLa === void 0 ? 'Clear all' : _ref$clearAllButtonLa,
    onClickActionButton = _ref.onClickActionButton,
    onClear = _ref.onClear,
    onChange = _ref.onChange,
    rest = _objectWithoutProperties(_ref, _excluded$h);
  var inputRef = useRef(null);
  var textareaRef = useForkRef(inputRef, ref);
  var _useState = useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isHovering = _useState2[0],
    setIsHovering = _useState2[1];
  var _useState3 = useState({}),
    _useState4 = _slicedToArray(_useState3, 2),
    overflowStyles = _useState4[0],
    setOverflowStyles = _useState4[1];
  var _useState5 = useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    showCopyMessage = _useState6[0],
    setShowCopyMessage = _useState6[1];
  var _useState7 = useState(value),
    _useState8 = _slicedToArray(_useState7, 2),
    inputValue = _useState8[0],
    setInputValue = _useState8[1];
  var showCopyIcon = !!(isHovering && inputValue !== null && inputValue !== void 0 && inputValue.length && !hideCopyIcon);
  var actionButtonHandler = function actionButtonHandler(event) {
    if (onClickActionButton) {
      onClickActionButton(event);
    }
  };
  var clearAllHandler = function clearAllHandler(event) {
    setInputValue('');
    if (onClear) {
      onClear(event);
    }
  };
  var onChangeHandler = function onChangeHandler(event) {
    setInputValue(event.target.value);
    if (onChange) {
      onChange(event);
    }
  };
  var copyIconHandler = function copyIconHandler() {
    if (showCopyIcon) {
      handleCopyIcon(inputValue, setShowCopyMessage);
    }
  };
  useEffect(function () {
    var current = inputRef.current;
    if (current && current.scrollHeight > current.clientHeight) {
      setOverflowStyles({
        paddingRight: size === Size$2.Md ? '4px' : '0px'
      });
    }
  }, [(_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.scrollHeight, size]);
  useEffect(function () {
    setTimeout(function () {
      return setShowCopyMessage(false);
    }, 2000);
  }, [showCopyMessage]);
  useEffect(function () {
    setInputValue(value);
  }, [value]);
  var handleEntering = function handleEntering() {
    setTimeout(function () {
      setIsHovering(true);
    }, 150);
  };
  var handleLeaving = function handleLeaving() {
    setTimeout(function () {
      setIsHovering(false);
    }, 200);
  };
  var renderCopyText = function renderCopyText() {
    return /*#__PURE__*/React__default.createElement(StyledInput.NotificationBox, {
      size: size,
      isTextarea: true
    }, /*#__PURE__*/React__default.createElement(StyledInput.NotificationIcon, null, copySuccessIcon), /*#__PURE__*/React__default.createElement(StyledInput.NotificationText, null, copyTextMessage));
  };
  return /*#__PURE__*/React__default.createElement(Styled$p.Textarea, {
    size: size,
    value: inputValue,
    onMouseEnter: handleEntering,
    onMouseLeave: handleLeaving,
    readOnly: readOnly,
    disabled: disabled,
    fullWidth: Boolean(fullWidth),
    error: error,
    autoSize: Boolean(cols) || Boolean(rows)
  }, /*#__PURE__*/React__default.createElement(Styled$p.Base, _extends({}, rest, {
    value: inputValue,
    ref: textareaRef,
    size: size,
    onChange: onChangeHandler,
    readOnly: readOnly,
    disabled: disabled,
    style: _objectSpread$3({}, overflowStyles)
  })), (showActionButton || showClearButton || showCopyIcon) && /*#__PURE__*/React__default.createElement(Styled$p.ActionsButtonsWrapper, {
    size: size
  }, showActionButton && /*#__PURE__*/React__default.createElement(Button$1, {
    color: "link-primary",
    size: "sm",
    disabled: disableActionButton,
    loading: isActionButtonLoading,
    onMouseDown: function onMouseDown(event) {
      return onClickByMouseDown(event, actionButtonHandler);
    }
  }, actionButtonLabel), showClearButton && /*#__PURE__*/React__default.createElement(Button$1, {
    color: "link-secondary",
    size: "sm",
    onMouseDown: function onMouseDown(event) {
      return onClickByMouseDown(event, clearAllHandler);
    }
  }, clearAllButtonLabel), showCopyIcon && /*#__PURE__*/React__default.createElement(Styled$p.CopyIcon, {
    size: size,
    onMouseDown: function onMouseDown(event) {
      return onClickByMouseDown(event, copyIconHandler);
    }
  }, /*#__PURE__*/React__default.createElement(CopyOutline$1, {
    size: getIconSize$2(size)
  }), showCopyMessage && renderCopyText())));
});
var Textarea$1 = Textarea;

var Type = {
  Input: 'input',
  Textarea: 'textarea'
};

var baseClassName$b = 'InputGroup';
var InputGroup$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$b, 'root')
}).withConfig({
  componentId: "sc-zhtjwh-0"
})(["", "{margin-top:4px;}", "{margin-bottom:4px;}"], StyledFormHint.FormHint, StyledLabel.Label);
var Styled$n = applyDisplayNames({
  InputGroup: InputGroup$2
});
var StyledInputGroup = Styled$n;

var _excluded$g = ["type", "error", "label", "hint", "LabelProps", "InputProps", "inputProps", "inputRef", "TextareaProps", "readOnly", "disabled", "size", "value", "hideCopyIcon", "copyTextMessage", "copySuccessIcon", "placeholder", "fullWidth", "onChange"];
var InputGroup = intrinsicComponent$1(function (_ref, ref) {
  var _ref$type = _ref.type,
    type = _ref$type === void 0 ? Type.Input : _ref$type,
    _ref$error = _ref.error,
    error = _ref$error === void 0 ? false : _ref$error,
    label = _ref.label,
    hint = _ref.hint,
    LabelPropsData = _ref.LabelProps,
    InputProps = _ref.InputProps,
    inputProps = _ref.inputProps,
    inputRef = _ref.inputRef,
    TextareaPropsData = _ref.TextareaProps,
    _ref$readOnly = _ref.readOnly,
    readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,
    disabled = _ref.disabled,
    size = _ref.size,
    value = _ref.value,
    hideCopyIcon = _ref.hideCopyIcon,
    _ref$copyTextMessage = _ref.copyTextMessage,
    copyTextMessage = _ref$copyTextMessage === void 0 ? 'Copied!' : _ref$copyTextMessage,
    _ref$copySuccessIcon = _ref.copySuccessIcon,
    copySuccessIcon = _ref$copySuccessIcon === void 0 ? /*#__PURE__*/React__default.createElement(Success$1, {
      size: 16
    }) : _ref$copySuccessIcon,
    placeholder = _ref.placeholder,
    fullWidth = _ref.fullWidth,
    _onChange = _ref.onChange,
    rest = _objectWithoutProperties(_ref, _excluded$g);
  var renderLabel = function renderLabel() {
    if (label) {
      if (typeof label === 'function') {
        return label({
          error: error
        });
      }
      if (_typeof(label) === 'object') {
        return label;
      }
      return /*#__PURE__*/React__default.createElement(Label$6, _extends({
        size: size,
        disabled: disabled
      }, LabelPropsData || {}), label);
    }
    return null;
  };
  var renderField = function renderField() {
    var fieldProps = {
      value: value,
      readOnly: readOnly,
      disabled: disabled,
      size: size,
      error: error,
      placeholder: placeholder,
      hideCopyIcon: hideCopyIcon,
      copyTextMessage: copyTextMessage,
      copySuccessIcon: copySuccessIcon,
      fullWidth: fullWidth
    };
    if (type === Type.Input) {
      return /*#__PURE__*/React__default.createElement(Input$2, _extends({}, fieldProps, rest, inputProps, {
        InputProps: InputProps,
        ref: inputRef,
        readOnly: readOnly,
        disabled: disabled,
        onChange: _onChange
      }));
    }
    if (type === Type.Textarea) {
      return /*#__PURE__*/React__default.createElement(Textarea$1, _extends({}, fieldProps, TextareaPropsData || {}, {
        onChange: function onChange(event) {
          return _onChange(event);
        }
      }));
    }
    return null;
  };
  var renderHint = function renderHint() {
    if (hint) {
      if (typeof hint === 'function') {
        return hint({
          error: error
        });
      }
      if (_typeof(hint) === 'object') {
        return hint;
      }
      return /*#__PURE__*/React__default.createElement(FormHint$1, {
        size: size,
        error: error,
        disabled: disabled
      }, hint);
    }
    return null;
  };
  return /*#__PURE__*/React__default.createElement(StyledInputGroup.InputGroup, {
    ref: ref
  }, renderLabel(), renderField(), renderHint());
});
var InputGroup$1 = InputGroup;

function _objectDestructuringEmpty(t) {
  if (null == t) throw new TypeError("Cannot destructure " + t);
}

var Size = {
  Xs: 'xs',
  Sm: 'sm',
  Md: 'md',
  Lg: 'lg',
  Xl: 'xl'
};

var ModalMenuContext = /*#__PURE__*/React.createContext({
  modalOpened: false
});
if (process.env.NODE_ENV !== 'production') {
  ModalMenuContext.displayName = 'ModalMenuContext';
}
var ModalMenuContext$1 = ModalMenuContext;

var modalSizeMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Size.Xs, css(["max-width:300px;"])), Size.Sm, css(["max-width:600px;"])), Size.Md, css(["max-width:960px;"])), Size.Lg, css(["max-width:1280px;"])), Size.Xl, css(["max-width:1920px;"]));

var baseClassName$a = 'Modal';
var Wrapper = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$a, 'Wrapper')
}).withConfig({
  componentId: "sc-80m07l-0"
})(function (_ref) {
  var open = _ref.open;
  return css(["position:fixed;right:0px;bottom:0px;top:0px;left:0px;z-index:1200;visibility:", ";"], open ? 'visible' : 'hidden');
});
var Overlay = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$a, 'Overlay')
}).withConfig({
  componentId: "sc-80m07l-1"
})(function (_ref2) {
  var open = _ref2.open;
  return css(["position:fixed;right:0px;bottom:0px;top:0px;left:0px;background-color:rgba(0,0,0,0.5);z-index:-1;transition:opacity 251ms cubic-bezier(0.4,0,0.2,1) 0ms;opacity:", ";"], open ? '1' : '0');
});
var Container = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$a, 'Container')
}).withConfig({
  componentId: "sc-80m07l-2"
})(function (_ref3) {
  var theme = _ref3.theme,
    _ref3$open = _ref3.open,
    open = _ref3$open === void 0 ? false : _ref3$open,
    _ref3$fullWidth = _ref3.fullWidth,
    fullWidth = _ref3$fullWidth === void 0 ? false : _ref3$fullWidth,
    _ref3$maxWidth = _ref3.maxWidth,
    maxWidth = _ref3$maxWidth === void 0 ? Size.Sm : _ref3$maxWidth;
  return css(["position:absolute;overflow-x:hidden;overflow-y:auto;transition:opacity 251ms cubic-bezier(0.4,0,0.2,1) 0ms,transform 167ms cubic-bezier(0.4,0,0.2,1) 0ms;outline:0;border-radius:", ";background-color:", ";box-shadow:0px 2px 4px ", ";visibility:", ";opacity:", ";display:flex;max-height:calc(100% - 64px);flex-direction:column;", " ", " top:50%;left:50%;transform:translate(-50%,-50%);"], theme.shape.borderRadius[BorderRadiusSize.Lg], theme.palette[Color.BackgroundSecondary], theme.palette[Color.LightShadow], open ? 'visible' : 'hidden', open ? '1' : '0', fullWidth && css(["width:calc(100% - 64px);"]), modalSizeMixin[maxWidth]);
});
var Modal$3 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$a, 'root')
}).withConfig({
  componentId: "sc-80m07l-3"
})(function () {
  return css(["position:relative;padding-top:8px;padding-bottom:8px;margin:0;padding:0;outline:0;display:flex;flex-direction:column;"]);
});
var Styled$l = applyDisplayNames({
  Modal: Modal$3,
  Wrapper: Wrapper,
  Overlay: Overlay,
  Container: Container
});
var Styled$m = Styled$l;

var _excluded$f = ["children", "open", "onClose", "onDragOver", "onDrop", "maxWidth", "fullWidth", "modalStyles", "hideOverlay", "disableOverlayClick"];
function ownKeys$2(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var isValidSingleFragmentChildren = function isValidSingleFragmentChildren(children) {
  return children && /*#__PURE__*/isValidElement(children) && React__default.Children.count(children) === 1 && children.type === React__default.Fragment;
};
var Modal$1 = intrinsicComponent$1(function (_ref, ref) {
  var _children = _ref.children,
    _ref$open = _ref.open,
    open = _ref$open === void 0 ? false : _ref$open,
    onClose = _ref.onClose,
    onDragOver = _ref.onDragOver,
    onDrop = _ref.onDrop,
    _ref$maxWidth = _ref.maxWidth,
    maxWidth = _ref$maxWidth === void 0 ? Size.Xs : _ref$maxWidth,
    _ref$fullWidth = _ref.fullWidth,
    fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
    modalStyles = _ref.modalStyles,
    _ref$hideOverlay = _ref.hideOverlay,
    hideOverlay = _ref$hideOverlay === void 0 ? false : _ref$hideOverlay,
    _ref$disableOverlayCl = _ref.disableOverlayClick,
    disableOverlayClick = _ref$disableOverlayCl === void 0 ? false : _ref$disableOverlayCl,
    rest = _objectWithoutProperties(_ref, _excluded$f);
  var children = isValidSingleFragmentChildren(_children) ? _children.props.children : _children;

  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  var target = document.querySelector('body');
  useEffect(function () {
    if (open) {
      document.body.classList.add('Modal-open');
    } else {
      document.body.classList.remove('Modal-open');
    }
    return function () {
      document.body.classList.remove('Modal-open');
    };
  }, [open]);
  var handleClose = function handleClose() {
    if (typeof onClose === 'function') {
      onClose();
    }
  };
  useEffect(function () {
    var keyListener = function keyListener(ev) {
      if (ev.key === 'Escape') {
        handleClose();
      }
    };
    document.addEventListener('keydown', keyListener);
    return function () {
      return document.removeEventListener('keydown', keyListener);
    };
  });
  var render = function render() {
    return /*#__PURE__*/React__default.createElement(ModalMenuContext$1.Provider, {
      value: {
        modalOpened: Boolean(open)
      }
    }, /*#__PURE__*/React__default.createElement(Styled$m.Wrapper, {
      style: _objectSpread$2({}, modalStyles),
      open: Boolean(open),
      ref: ref,
      onDragOver: onDragOver ? onDragOver : ignoreEvent,
      onDrop: onDrop ? onDrop : ignoreEvent
    }, !hideOverlay && /*#__PURE__*/React__default.createElement(Styled$m.Overlay, {
      onClick: function onClick() {
        return disableOverlayClick ? null : handleClose();
      },
      open: Boolean(open)
    }), /*#__PURE__*/React__default.createElement(Styled$m.Container, _extends({}, rest, {
      maxWidth: maxWidth,
      fullWidth: fullWidth,
      open: Boolean(open)
    }), /*#__PURE__*/React__default.createElement(Styled$m.Modal, null, React__default.Children.map(children, function (child) {
      if ( /*#__PURE__*/isValidElement(child) && child.type.displayName === 'ModalTitle') {
        return /*#__PURE__*/React__default.cloneElement(child, _objectSpread$2({
          onClose: handleClose
        }, child.props || {}));
      }
      return child;
    })))));
  };
  return /*#__PURE__*/createPortal(render(), target);
});
var Modal$2 = Modal$1;

var Align = {
  Left: 'left',
  Center: 'center',
  Right: 'right'
};

var baseClassName$9 = 'ModalActions';
var ModalActions$3 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$9, 'root')
}).withConfig({
  componentId: "sc-1wg6u00-0"
})(function (_ref) {
  var _ref$align = _ref.align,
    align = _ref$align === void 0 ? Align.Center : _ref$align;
  return css(["position:relative;display:flex;align-items:center;padding:24px;justify-content:", ";gap:12px;"], align === Align.Right ? 'flex-end' : align);
});
var Styled$j = applyDisplayNames({
  ModalActions: ModalActions$3
});
var Styled$k = Styled$j;

var _excluded$e = ["children", "align"];
var ModalActions$1 = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    _ref$align = _ref.align,
    align = _ref$align === void 0 ? Align.Center : _ref$align,
    rest = _objectWithoutProperties(_ref, _excluded$e);
  return /*#__PURE__*/React__default.createElement(Styled$k.ModalActions, _extends({}, rest, {
    align: align,
    ref: ref
  }), children);
});
ModalActions$1.displayName = 'ModalActions';
var ModalActions$2 = ModalActions$1;

var baseClassName$8 = 'ModalContent';
var ModalContent$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$8, 'root')
}).withConfig({
  componentId: "sc-1ng1w0v-0"
})(["position:relative;padding:12px 24px 0px;"]);
var Styled$h = applyDisplayNames({
  ModalContent: ModalContent$2
});
var Styled$i = Styled$h;

var _excluded$d = ["children"];
var ModalContent = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded$d);
  return /*#__PURE__*/React__default.createElement(Styled$i.ModalContent, _extends({}, rest, {
    ref: ref
  }), children);
});
ModalContent.displayName = 'ModalContent';
var ModalContent$1 = ModalContent;

var Variant$1 = {
  Default: 'default',
  WithIcon: 'with-icon'
};

var baseClassName$7 = 'ModalTitle';
var Icon$1 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$7, 'Icon')
}).withConfig({
  componentId: "sc-l3tf49-0"
})(function (_ref) {
  var palette = _ref.theme.palette;
  return css(["display:flex;margin-bottom:8px;padding:14.5px;border-radius:50%;background:", ";color:", ";"], palette[Color.Accent_1_2_Opacity], palette[Color.AccentStateless]);
});
var LabelPrimary = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$7, 'LabelPrimary')
}).withConfig({
  componentId: "sc-l3tf49-1"
})(function (_ref2) {
  var _ref2$variant = _ref2.variant,
    variant = _ref2$variant === void 0 ? Variant$1.Default : _ref2$variant;
  return css(["font-size:18px;line-height:27px;font-weight:", ";"], variant === Variant$1.Default ? 400 : 500);
});
var LabelSecondary = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$7, 'LabelSecondary')
}).withConfig({
  componentId: "sc-l3tf49-2"
})(["font-size:12px;line-height:14px;margin-top:4px;"]);
var Close = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$7, 'Close')
}).withConfig({
  componentId: "sc-l3tf49-3"
})(function (_ref3) {
  var _ref3$variant = _ref3.variant,
    variant = _ref3$variant === void 0 ? Variant$1.Default : _ref3$variant,
    palette = _ref3.theme.palette;
  return css(["position:absolute;display:flex;top:", "px;right:", "px;color:", ";&:hover{color:", ";}cursor:pointer;"], variant === Variant$1.WithIcon ? 2 : 8, variant === Variant$1.WithIcon ? 2 : 8, palette[Color.IconsSecondary], palette[Color.AccentPrimary]);
});
var ModalTitle$1 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$7, 'root')
}).withConfig({
  componentId: "sc-l3tf49-4"
})(function (_ref4) {
  var _ref4$variant = _ref4.variant,
    variant = _ref4$variant === void 0 ? Variant$1.Default : _ref4$variant,
    _ref4$theme = _ref4.theme,
    palette = _ref4$theme.palette,
    borderRadius = _ref4$theme.shape.borderRadius;
  return css(["position:relative;color:", ";border-radius:", " ", " 0px 0px;", " ", " ", ""], palette[Color.TextPrimary], borderRadius[BorderRadiusSize.Md], borderRadius[BorderRadiusSize.Md], function () {
    var paddingY = variant === Variant$1.WithIcon ? 26 : 14;
    var paddingX = variant === Variant$1.WithIcon ? 12 : 14;
    var paddingLeft = 18;
    var paddingRight = variant === Variant$1.WithIcon ? paddingLeft : 40;
    return css(["padding:", "px ", "px ", "px ", "px;"], paddingY, paddingRight, paddingX, paddingLeft);
  }, variant === Variant$1.Default && css(["background:", ";border-bottom:1px solid ", ";"], palette[Color.BackgroundPrimary], palette[Color.BordersSecondary]), variant === Variant$1.WithIcon && css(["display:flex;align-items:center;flex-direction:column;"]));
});
var Styled$f = applyDisplayNames({
  ModalTitle: ModalTitle$1,
  LabelPrimary: LabelPrimary,
  LabelSecondary: LabelSecondary,
  Close: Close,
  Icon: Icon$1
});
var Styled$g = Styled$f;

var _excluded$c = ["secondary", "onClose", "primaryLabelStyles", "iconShadow", "variant"];
var ModalTitle = intrinsicComponent$1(function (_ref, ref) {
  var secondary = _ref.secondary,
    onClose = _ref.onClose,
    primaryLabelStyles = _ref.primaryLabelStyles,
    _ref$iconShadow = _ref.iconShadow,
    iconShadow = _ref$iconShadow === void 0 ? true : _ref$iconShadow,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? Variant$1.Default : _ref$variant,
    rest = _objectWithoutProperties(_ref, _excluded$c);
  return /*#__PURE__*/React__default.createElement(Styled$g.ModalTitle, _extends({}, rest, {
    variant: variant,
    ref: ref
  }), rest.icon && /*#__PURE__*/React__default.createElement(Styled$g.Icon, {
    iconShadow: Boolean(iconShadow)
  }, rest.icon), /*#__PURE__*/React__default.createElement(Styled$g.LabelPrimary, {
    variant: variant,
    style: primaryLabelStyles
  }, rest.primary), variant === Variant$1.WithIcon && secondary && /*#__PURE__*/React__default.createElement(Styled$g.LabelSecondary, null, secondary), /*#__PURE__*/React__default.createElement(Styled$g.Close, {
    variant: variant
  }, /*#__PURE__*/React__default.createElement(CrossButton$1, {
    size: "lg",
    onClick: onClose
  })));
});
ModalTitle.displayName = 'ModalTitle';
var modalTitle = ModalTitle;

var Status = {
  Success: 'success',
  Info: 'info',
  Error: 'error',
  Warning: 'warning'
};

var baseClassName$6 = 'PopupStatus';
var PopupStatus$3 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$6, 'root')
}).withConfig({
  componentId: "sc-qash56-0"
})(["display:flex;"]);
var Styled$d = applyDisplayNames({
  PopupStatus: PopupStatus$3
});
var Styled$e = Styled$d;

var _excluded$b = ["status", "notificationBackground"];
var getPopupStatusIcon = function getPopupStatusIcon(status, notificationBackground) {
  switch (status) {
    case Status.Warning:
      return notificationBackground ? /*#__PURE__*/React__default.createElement(Warning, {
        color: lightPalette[Color.Warning],
        size: 20
      }) : /*#__PURE__*/React__default.createElement(WarningOutline, {
        color: lightPalette[Color.Warning],
        size: 12
      });
    case Status.Error:
      return notificationBackground ? /*#__PURE__*/React__default.createElement(Error$1, {
        color: lightPalette[Color.Error],
        size: 20
      }) : /*#__PURE__*/React__default.createElement(ErrorOutline, {
        color: lightPalette[Color.Error],
        size: 12
      });
    case Status.Info:
      return notificationBackground ? /*#__PURE__*/React__default.createElement(About, {
        color: lightPalette[Color.Info],
        size: 20
      }) : /*#__PURE__*/React__default.createElement(InfoOutline, {
        color: lightPalette[Color.Info],
        size: 12
      });
    case Status.Success:
    default:
      return /*#__PURE__*/React__default.createElement(Success, {
        color: lightPalette[Color.Success],
        size: 20
      });
  }
};
var PopupStatus$1 = intrinsicComponent$1(function (_ref, ref) {
  var status = _ref.status,
    _ref$notificationBack = _ref.notificationBackground,
    notificationBackground = _ref$notificationBack === void 0 ? true : _ref$notificationBack,
    rest = _objectWithoutProperties(_ref, _excluded$b);
  return /*#__PURE__*/React__default.createElement(Styled$e.PopupStatus, _extends({
    status: status
  }, rest, {
    ref: ref
  }), getPopupStatusIcon(status, notificationBackground));
});
var PopupStatus$2 = PopupStatus$1;

var popupContentMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Status.Success, function (_ref) {
  var palette = _ref.theme.palette;
  return css(["background-color:", ";"], palette[Color.BackgroundGreen]);
}), Status.Info, function (_ref2) {
  var palette = _ref2.theme.palette;
  return css(["background-color:", ";"], palette[Color.BackgroundBlue]);
}), Status.Error, function (_ref3) {
  var palette = _ref3.theme.palette;
  return css(["background-color:", ";"], palette[Color.BackgroundRed]);
}), Status.Warning, function (_ref4) {
  var palette = _ref4.theme.palette;
  return css(["background-color:", ";"], palette[Color.BackgroundOrange]);
});

var baseClassName$5 = 'PopupContent';
var LabelWrapper = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$5, 'LabelWrapper')
}).withConfig({
  componentId: "sc-njbmnt-0"
})(function (_ref) {
  var palette = _ref.theme.palette;
  return css(["display:flex;flex-grow:1;margin-left:44px;padding:16px;padding-right:0;overflow:hidden;background:", ";"], palette[Color.ButtonPrimaryText]);
});
var Label = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$5, 'Label')
}).withConfig({
  componentId: "sc-njbmnt-1"
})(function (_ref2) {
  var _ref2$theme = _ref2.theme,
    palette = _ref2$theme.palette,
    font = _ref2$theme.typography.font;
  return css(["max-width:calc(100% - 40px);overflow:hidden;text-overflow:ellipsis;color:", ";", ""], palette[Color.TextPrimary], font[FontVariant.TextSmallUp]);
});
var PopupContent$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$5, 'PopupContent')
}).withConfig({
  componentId: "sc-njbmnt-2"
})(function (_ref3) {
  var theme = _ref3.theme;
  return css(["position:relative;display:flex;align-items:center;width:360px;border-radius:4px;box-shadow:0px 2px 6px ", ";"], theme.palette[Color.LargeShadow]);
});
var CloseWrapper = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$5, 'PopupContent')
}).withConfig({
  componentId: "sc-njbmnt-3"
})(function (_ref4) {
  var theme = _ref4.theme;
  return css(["position:absolute;top:0;right:0;display:flex;justify-content:center;align-items:flex-start;box-sizing:border-box;padding:2px;height:fit-content;cursor:pointer;background:", ";border-radius:0 4px 4px 0;height:100%;"], theme.palette[Color.BackgroundStateless]);
});
var PopupStatus = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$5, 'PopupStatus')
}).withConfig({
  componentId: "sc-njbmnt-4"
})(function (_ref5) {
  var _ref5$status = _ref5.status,
    status = _ref5$status === void 0 ? 'success' : _ref5$status;
  return css(["position:absolute;display:flex;left:0;z-index:1;height:100%;min-width:44px;align-items:center;justify-content:center;box-sizing:border-box;border-radius:4px 0 0 4px;", ""], popupContentMixin[status]);
});
var Styled$b = applyDisplayNames({
  PopupContent: PopupContent$2,
  PopupStatus: PopupStatus,
  LabelWrapper: LabelWrapper,
  CloseWrapper: CloseWrapper,
  Label: Label
});
var Styled$c = Styled$b;

var _excluded$a = ["onClose", "message", "status", "popupStatusProps"];
var PopupContent = intrinsicComponent$1(function (_ref, ref) {
  var onClose = _ref.onClose,
    message = _ref.message,
    _ref$status = _ref.status,
    status = _ref$status === void 0 ? Status.Success : _ref$status,
    popupStatusProps = _ref.popupStatusProps,
    rest = _objectWithoutProperties(_ref, _excluded$a);
  return /*#__PURE__*/React__default.createElement(Styled$c.PopupContent, _extends({}, rest, {
    ref: ref
  }), /*#__PURE__*/React__default.createElement(Styled$c.PopupStatus, _extends({
    status: status,
    message: message
  }, popupStatusProps), /*#__PURE__*/React__default.createElement(PopupStatus$2, {
    status: status
  })), /*#__PURE__*/React__default.createElement(Styled$c.LabelWrapper, null, /*#__PURE__*/React__default.createElement(Styled$c.Label, null, message)), /*#__PURE__*/React__default.createElement(Styled$c.CloseWrapper, null, /*#__PURE__*/React__default.createElement(CrossButton$1, {
    size: "sm",
    onClick: onClose
  })));
});
var PopupContent$1 = PopupContent;

var Horizontal = {
  Center: 'center',
  Left: 'left',
  Right: 'right'
};

var Vertical = {
  Top: 'top',
  Bottom: 'bottom'
};

var positionHorizontalMixin = _defineProperty(_defineProperty(_defineProperty({}, Horizontal.Left, css(["left:25px;right:auto;"])), Horizontal.Center, css(["left:50%;right:auto;transform:translateX(-50%);"])), Horizontal.Right, css(["left:auto;right:25px;"]));
var positionVerticalMixin = _defineProperty(_defineProperty({}, Vertical.Top, css(["top:25px;bottom:auto;"])), Vertical.Bottom, css(["top:auto;bottom:25px;"]));

var baseClassName$4 = 'Popup';
var Popup$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$4, 'root')
}).withConfig({
  componentId: "sc-jmtjri-0"
})(function (_ref) {
  var anchorOrigin = _ref.anchorOrigin;
  return css(["position:fixed;display:flex;align-items:center;justify-content:center;z-index:1400;", " ", ""], positionHorizontalMixin[(anchorOrigin === null || anchorOrigin === void 0 ? void 0 : anchorOrigin.horizontal) || Horizontal.Left], positionVerticalMixin[(anchorOrigin === null || anchorOrigin === void 0 ? void 0 : anchorOrigin.vertical) || Vertical.Bottom]);
});
var Styled$9 = applyDisplayNames({
  Popup: Popup$2
});
var Styled$a = Styled$9;

var _excluded$9 = ["autoHideDuration", "anchorOrigin", "open", "onClose", "status"];
var Popup = intrinsicComponent$1(function (props, ref) {
  var _props$autoHideDurati = props.autoHideDuration,
    autoHideDuration = _props$autoHideDurati === void 0 ? 5000 : _props$autoHideDurati,
    _props$anchorOrigin = props.anchorOrigin,
    anchorOrigin = _props$anchorOrigin === void 0 ? {
      vertical: Vertical.Bottom,
      horizontal: Horizontal.Left
    } : _props$anchorOrigin,
    _props$open = props.open,
    open = _props$open === void 0 ? false : _props$open,
    onClose = props.onClose,
    _props$status = props.status,
    status = _props$status === void 0 ? Status.Success : _props$status,
    rest = _objectWithoutProperties(props, _excluded$9);
  var target = usePortal(generateClassNames('Popup'));
  var _useState = useState(autoHideDuration),
    _useState2 = _slicedToArray(_useState, 2),
    hoverHideDuration = _useState2[0],
    setHoverHideDuration = _useState2[1];
  var _useState3 = useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    isHovering = _useState4[0],
    setIsHovering = _useState4[1];
  var handleMouseLeave = function handleMouseLeave() {
    setIsHovering(false);
    setHoverHideDuration(1000);
  };
  useEffect(function () {
    if (open) setHoverHideDuration(autoHideDuration);
  }, [open]);
  useEffect(function () {
    var timeout = null;
    if (open && !isHovering && hoverHideDuration && typeof onClose === 'function') {
      timeout = setTimeout(onClose, hoverHideDuration);
    }
    return function () {
      if (timeout) {
        clearTimeout(timeout);
      }
    };
  }, [hoverHideDuration, isHovering, open, onClose]);
  var render = function render() {
    if (!open) {
      return null;
    }
    return /*#__PURE__*/React__default.createElement(Styled$a.Popup, _extends({
      onMouseEnter: function onMouseEnter() {
        return setIsHovering(true);
      },
      onMouseLeave: handleMouseLeave,
      anchorOrigin: anchorOrigin
    }, props), /*#__PURE__*/React__default.createElement(PopupContent$1, _extends({
      onClose: onClose,
      status: status,
      ref: ref
    }, rest)));
  };
  return /*#__PURE__*/createPortal(render(), target);
});
var Popup$1 = Popup;

var baseClassName$3 = 'RotationSlider';
var RotationSliderList = /*#__PURE__*/styled.ul.attrs({
  className: generateClassNames(baseClassName$3, 'list')
}).withConfig({
  componentId: "sc-1xuruq0-0"
})(["display:flex;align-items:center;position:relative;padding:0;width:100%;list-style:none;"]);
var RotationSliderBigDot = /*#__PURE__*/styled.li.attrs({
  className: generateClassNames(baseClassName$3, 'big-dot')
}).withConfig({
  componentId: "sc-1xuruq0-1"
})(function (_ref) {
  var palette = _ref.theme.palette;
  return css(["width:8px;height:8px;border-radius:50%;background-color:", ";cursor:pointer;"], palette[Color.LinkPrimary]);
});
var RotationSliderSmallDotWrapper = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$3, 'small-dot-wrapper')
}).withConfig({
  componentId: "sc-1xuruq0-2"
})(["padding:2px;"]);
var RotationSliderSmallDot = /*#__PURE__*/styled.li.attrs({
  className: generateClassNames(baseClassName$3, 'small-dot')
}).withConfig({
  componentId: "sc-1xuruq0-3"
})(function (_ref2) {
  var palette = _ref2.theme.palette;
  return css(["width:2px;height:2px;border-radius:50%;background-color:", ";cursor:pointer;"], palette[Color.LinkPrimary]);
});
var RotationSliderControl = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$3, 'control')
}).withConfig({
  componentId: "sc-1xuruq0-4"
})(function (_ref3) {
  var palette = _ref3.theme.palette;
  return css(["display:flex;justify-content:center;align-items:center;position:absolute;height:18px;width:2px;transform:translate(-50%,-50%);top:50%;background-color:", ";& > input{border:0px;clip:rect(0px,0px,0px,0px);height:100%;margin:-1px;overflow:hidden;padding:0px;position:absolute;white-space:nowrap;width:100%;direction:ltr;}&::before{position:absolute;content:'';border-radius:inherit;width:100%;height:100%;box-shadow:0px 3px 1px -2px rgb(0 0 0 / 20%),0px 2px 2px 0px rgb(0 0 0 / 14%),0px 1px 5px 0px rgb(0 0 0 / 12%);}&::after{position:absolute;content:'';border-radius:50%;width:42px;height:42px;top:50%;left:50%;transform:translate(-50%,-50%);}"], palette[Color.LinkActive]);
});
var RotationSliderMark = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$3, 'mark')
}).withConfig({
  componentId: "sc-1xuruq0-5"
})(["padding:4px;"]);
var RotationSliderMarkText = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$3, 'mark-text')
}).withConfig({
  componentId: "sc-1xuruq0-6"
})(function (_ref4) {
  var palette = _ref4.theme.palette;
  return css(["position:absolute;top:20px;font-size:14px;transform:translateX(-10%);color:", ";"], palette[Color.TextPrimary]);
});
var Styled$7 = applyDisplayNames({
  RotationSliderList: RotationSliderList,
  RotationSliderBigDot: RotationSliderBigDot,
  RotationSliderSmallDotWrapper: RotationSliderSmallDotWrapper,
  RotationSliderSmallDot: RotationSliderSmallDot,
  RotationSliderControl: RotationSliderControl,
  RotationSliderMark: RotationSliderMark,
  RotationSliderMarkText: RotationSliderMarkText
});
var Styled$8 = Styled$7;

var _excluded$8 = ["min", "max", "angle", "onChange", "onMouseDown", "onMouseUp", "step", "labelTooltipOptions", "annotation", "hideMarkText", "showCurrentMarkText", "value", "railProps", "trackProps", "thumbProps", "labelTooltipProps", "markStyles", "markTextStyles"];
function ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var RotationSlider = intrinsicComponent$1(function (_ref, ref) {
  var _ref$min = _ref.min,
    min = _ref$min === void 0 ? 0 : _ref$min,
    _ref$max = _ref.max,
    max = _ref$max === void 0 ? 100 : _ref$max,
    _ref$angle = _ref.angle,
    angle = _ref$angle === void 0 ? 10 : _ref$angle,
    onChange = _ref.onChange,
    onMouseDown = _ref.onMouseDown,
    onMouseUp = _ref.onMouseUp,
    _ref$step = _ref.step,
    step = _ref$step === void 0 ? 1 : _ref$step,
    _ref$labelTooltipOpti = _ref.labelTooltipOptions,
    labelTooltipOptions = _ref$labelTooltipOpti === void 0 ? LabelTooltip$1.Off : _ref$labelTooltipOpti,
    _ref$annotation = _ref.annotation,
    annotation = _ref$annotation === void 0 ? '°' : _ref$annotation,
    _ref$hideMarkText = _ref.hideMarkText,
    hideMarkText = _ref$hideMarkText === void 0 ? false : _ref$hideMarkText,
    _ref$showCurrentMarkT = _ref.showCurrentMarkText,
    showCurrentMarkText = _ref$showCurrentMarkT === void 0 ? false : _ref$showCurrentMarkT,
    value = _ref.value,
    _ref$railProps = _ref.railProps,
    railProps = _ref$railProps === void 0 ? {} : _ref$railProps,
    _ref$trackProps = _ref.trackProps,
    trackProps = _ref$trackProps === void 0 ? {} : _ref$trackProps,
    _ref$thumbProps = _ref.thumbProps,
    thumbProps = _ref$thumbProps === void 0 ? {} : _ref$thumbProps,
    _ref$labelTooltipProp = _ref.labelTooltipProps,
    labelTooltipProps = _ref$labelTooltipProp === void 0 ? {} : _ref$labelTooltipProp,
    _ref$markStyles = _ref.markStyles,
    markStyles = _ref$markStyles === void 0 ? {} : _ref$markStyles,
    _ref$markTextStyles = _ref.markTextStyles,
    markTextStyles = _ref$markTextStyles === void 0 ? {} : _ref$markTextStyles,
    rest = _objectWithoutProperties(_ref, _excluded$8);
  var handleChange = function handleChange(event, newValue) {
    if (onChange) {
      onChange(event, newValue);
    }
  };
  var getValue = function getValue() {
    if (value || value === 0) {
      if (value > max) {
        return max;
      }
      if (value < min) {
        return min;
      }
      return value;
    }
    return min;
  };
  var showMarkText = function showMarkText(index) {
    if (hideMarkText) return false;
    if (!showCurrentMarkText) return true;
    return getValue() === index;
  };
  var renderBar = function renderBar() {
    var barDom = [];
    var barDiv;
    for (var i = min; i <= max; i += step) {
      barDiv = [];
      if (i % angle === 0 || i === max) {
        barDiv = /*#__PURE__*/React__default.createElement(Styled$8.RotationSliderMark, {
          key: i,
          style: _objectSpread$1({}, markStyles)
        }, showMarkText(i) && /*#__PURE__*/React__default.createElement(Styled$8.RotationSliderMarkText, {
          style: _objectSpread$1({}, markTextStyles)
        }, i === min + 1 ? max : i, /*#__PURE__*/React__default.createElement("sup", null, annotation)), /*#__PURE__*/React__default.createElement(Styled$8.RotationSliderBigDot, null));
      } else if (i % 10 === 0) {
        barDiv = /*#__PURE__*/React__default.createElement(Styled$8.RotationSliderSmallDotWrapper, {
          key: i
        }, /*#__PURE__*/React__default.createElement(Styled$8.RotationSliderSmallDot, null));
      }
      if (!Array.isArray(barDiv)) {
        barDom.push(barDiv);
      }
    }
    return barDom;
  };
  return /*#__PURE__*/React__default.createElement(Slider$2, _extends({
    min: min,
    max: max,
    step: step,
    value: getValue(),
    hideTrack: true,
    hideAnnotation: true,
    annotation: annotation,
    onChange: function onChange(event, newValue) {
      return handleChange(event, newValue);
    },
    onMouseDown: onMouseDown,
    onMouseUp: onMouseUp,
    labelTooltip: labelTooltipOptions,
    ref: ref,
    components: {
      Rail: function Rail(props, style) {
        return /*#__PURE__*/React__default.createElement(Styled$8.RotationSliderList, _extends({}, props, {
          styles: _objectSpread$1({}, style)
        }), renderBar());
      },
      Thumb: Styled$8.RotationSliderControl
    },
    componentsProps: {
      rail: _objectSpread$1(_objectSpread$1({}, railProps), {}, {
        style: _objectSpread$1({}, railProps.style)
      }),
      track: _objectSpread$1(_objectSpread$1({}, trackProps), {}, {
        style: _objectSpread$1({}, trackProps.style)
      }),
      thumb: _objectSpread$1(_objectSpread$1({}, thumbProps), {}, {
        style: _objectSpread$1({
          top: '15%'
        }, thumbProps.style)
      }),
      labelTooltip: _objectSpread$1(_objectSpread$1({}, labelTooltipProps), {}, {
        style: _objectSpread$1({}, labelTooltipProps.style)
      })
    }
  }, rest, {
    defaultValue: Number(rest.defaultValue),
    style: _objectSpread$1({
      width: 'auto',
      height: 'auto'
    }, rest.style)
  }));
});
var RotationSlider$1 = RotationSlider;

var baseClassName$2 = 'SelectGroup';
var SelectGroup$2 = /*#__PURE__*/styled(StyledInputGroup.InputGroup).attrs({
  className: generateClassNames(baseClassName$2, 'root')
}).withConfig({
  componentId: "sc-1uvutwe-0"
})([""]);
var Styled$5 = applyDisplayNames({
  SelectGroup: SelectGroup$2
});
var Styled$6 = Styled$5;

var _excluded$7 = ["children", "size", "error", "label", "placeholder", "hint", "LabelProps", "SelectProps", "selectProps", "fullWidth", "showSelectionKey", "value", "multiple", "hideMenuItemsActions", "onChange", "readOnly", "disabled", "showClearIcon"];
var SelectGroup = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    size = _ref.size,
    _ref$error = _ref.error,
    error = _ref$error === void 0 ? false : _ref$error,
    label = _ref.label,
    placeholder = _ref.placeholder,
    hint = _ref.hint,
    LabelPropsData = _ref.LabelProps,
    SelectPropsData = _ref.SelectProps,
    selectProps = _ref.selectProps,
    _ref$fullWidth = _ref.fullWidth,
    fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
    showSelectionKey = _ref.showSelectionKey,
    value = _ref.value,
    multiple = _ref.multiple,
    _ref$hideMenuItemsAct = _ref.hideMenuItemsActions,
    hideMenuItemsActions = _ref$hideMenuItemsAct === void 0 ? false : _ref$hideMenuItemsAct,
    onChange = _ref.onChange,
    _ref$readOnly = _ref.readOnly,
    readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    showClearIcon = _ref.showClearIcon,
    rest = _objectWithoutProperties(_ref, _excluded$7);
  var renderLabel = function renderLabel() {
    if (label) {
      if (typeof label === 'function') {
        return label({
          error: error
        });
      }
      if (_typeof(label) === 'object') {
        return label;
      }
      return /*#__PURE__*/React__default.createElement(Label$6, LabelPropsData || {}, label);
    }
    return null;
  };
  var renderHint = function renderHint() {
    if (hint) {
      if (typeof hint === 'function') {
        return hint({
          error: error
        });
      }
      if (_typeof(hint) === 'object') {
        return hint;
      }
      return /*#__PURE__*/React__default.createElement(FormHint$1, {
        error: error
      }, hint);
    }
    return null;
  };
  return /*#__PURE__*/React__default.createElement(Styled$6.SelectGroup, _extends({}, rest, {
    ref: ref
  }), renderLabel(), /*#__PURE__*/React__default.createElement(Select$2, _extends({
    error: error,
    value: value,
    size: size,
    onChange: onChange,
    multiple: multiple,
    fullWidth: Boolean(fullWidth)
  }, SelectPropsData || {}, {
    selectProps: selectProps,
    readOnly: readOnly,
    disabled: disabled,
    placeholder: placeholder,
    showSelectionKey: showSelectionKey,
    hideMenuItemsActions: hideMenuItemsActions,
    showClearIcon: showClearIcon
  }), children), renderHint());
});
var SelectGroup$1 = SelectGroup;

var baseClassName$1 = 'Backdrop';
var Backdrop$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$1, 'root')
}).withConfig({
  componentId: "sc-txa5a-0"
})(function (_ref) {
  var palette = _ref.theme.palette;
  return css(["position:fixed;display:flex;align-items:center;justify-content:center;inset:0px;background-color:", ";transition:opacity 251ms cubic-bezier(0.4,0,0.2,1) 0ms;opacity:1;z-index:-1;"], palette[Color.Extra_0_3_Overlay]);
});
var Styled$3 = applyDisplayNames({
  Backdrop: Backdrop$2
});
var Styled$4 = Styled$3;

// TODO: add story for this component?
var Backdrop = intrinsicComponent$1(function (_ref, ref) {
  var rest = _extends({}, (_objectDestructuringEmpty(_ref), _ref));
  return /*#__PURE__*/React__default.createElement(Styled$4.Backdrop, _extends({}, rest, {
    ref: ref
  }));
});
var Backdrop$1 = Backdrop;

var baseClassName = 'Drawer';
var TemporaryDrawer = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'temporary')
}).withConfig({
  componentId: "sc-1riasfx-0"
})(function (_ref) {
  var open = _ref.open;
  return css(["position:absolute;inset:0px;z-index:1200;visibility:", ";"], !open && 'hidden');
});
var PersistentDrawer = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'persistent')
}).withConfig({
  componentId: "sc-1riasfx-1"
})([""]);
var Drawer$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'root')
}).withConfig({
  componentId: "sc-1riasfx-2"
})(function (_ref2) {
  var open = _ref2.open,
    isCollapsed = _ref2.isCollapsed,
    _ref2$top = _ref2.top,
    top = _ref2$top === void 0 ? 0 : _ref2$top,
    _ref2$theme = _ref2.theme,
    palette = _ref2$theme.palette,
    shadows = _ref2$theme.shadows,
    breakpoints = _ref2$theme.breakpoints;
  return css(["display:flex;flex-direction:column;flex:1 0 auto;background-color:", ";box-shadow:", ";overflow-y:overlay;overflow-x:hidden;transform:", ";visibility:", ";transition:200ms;height:calc(100% - ", "px);", "{margin-top:0px;height:100%;}", " &{margin-top:0px;height:100%;}box-sizing:border-box;width:", ";", ""], palette[Color.BackgroundStateless], shadows[Shadows.LeftPanelMd], open ? 'none' : 'translateX(-100%)', !open && 'hidden', top, breakpoints.down('md'), breakpoints.classes.sm, isCollapsed ? '68px' : '302px', scrollBar);
});
var Header = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'header')
}).withConfig({
  componentId: "sc-1riasfx-3"
})(function (_ref3) {
  var isCollapsed = _ref3.isCollapsed;
  return css(["display:", ";justify-content:flex-start;align-items:center;position:relative;text-decoration:none;width:100%;box-sizing:border-box;text-align:left;margin-top:12px;transition:background-color 100ms ease-out;"], isCollapsed ? 'none' : 'flex');
});
var Body = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'body')
}).withConfig({
  componentId: "sc-1riasfx-4"
})(["flex:1 1 auto;.SfxAccordionDetails-root{margin:0;}"]);
var Footer = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'footer')
}).withConfig({
  componentId: "sc-1riasfx-5"
})(function (_ref4) {
  var isCollapsed = _ref4.isCollapsed;
  return css(["display:flex;flex-direction:column;width:100%;padding:", ";"], isCollapsed ? '0px' : '0px 8px');
});
var List = /*#__PURE__*/styled.ul.attrs({
  className: generateClassNames(baseClassName, 'list')
}).withConfig({
  componentId: "sc-1riasfx-6"
})(["list-style:none;margin:12px 0;padding:0;position:relative;"]);
var Item = /*#__PURE__*/styled.li.attrs({
  className: generateClassNames(baseClassName, 'item')
}).withConfig({
  componentId: "sc-1riasfx-7"
})(function (_ref5) {
  var palette = _ref5.theme.palette,
    isCollapsed = _ref5.isCollapsed,
    selected = _ref5.selected;
  return css(["display:", ";justify-content:flex-start;align-items:center;position:relative;text-decoration:none;width:100%;box-sizing:border-box;text-align:left;padding:13px 16px;transition:background-color 100ms ease-out;margin-bottom:4px;cursor:pointer;&:hover{background-color:", ";& > *{color:", ";}}", ""], isCollapsed ? 'none' : 'flex', palette[Color.BackgroundActive], palette[Color.AccentStateless], selected && css(["background-color:", ";& > *{color:", " !important;}"], palette[Color.BackgroundActive], palette[Color.AccentStateless]));
});
var ItemText = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'text')
}).withConfig({
  componentId: "sc-1riasfx-8"
})(function (_ref6) {
  var _ref6$theme = _ref6.theme,
    palette = _ref6$theme.palette,
    font = _ref6$theme.typography.font,
    fontKey = _ref6.font,
    isCollapsed = _ref6.isCollapsed;
  return css(["flex:1 1 auto;color:", ";", ";transition:color 100ms ease-out;display:", ";user-select:none;"], palette[Color.TextPrimary], font[fontKey || FontVariant.LabelLarge], isCollapsed && 'none');
});
var Icon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'icon')
}).withConfig({
  componentId: "sc-1riasfx-9"
})(function (_ref7) {
  var palette = _ref7.theme.palette,
    isCollapsed = _ref7.isCollapsed;
  return css(["display:flex;flex-shrink:0;color:", ";margin-right:", ";transition:color 100ms ease-out;"], palette[Color.IconsPrimary], isCollapsed ? '0px' : '12px');
});
var ItemButton = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'item-button')
}).withConfig({
  componentId: "sc-1riasfx-10"
})(function (_ref8) {
  var palette = _ref8.theme.palette,
    isCollapsed = _ref8.isCollapsed,
    selected = _ref8.selected;
  return css(["display:flex;justify-content:", ";align-items:center;border-radius:4px;box-sizing:border-box;text-align:left;padding:", ";width:", ";margin-bottom:12px;", ";transition:background-color 150ms cubic-bezier(0.4,0,0.2,1) 0ms;cursor:pointer;&:hover{background-color:", ";& > *{color:", ";}}", ""], isCollapsed ? 'center' : 'flex-start', isCollapsed ? '12px 0px' : '13px 16px', isCollapsed && '44px', isCollapsed && 'margin: 12px', palette[Color.BackgroundActive], palette[Color.AccentStateless], selected && css(["background-color:", ";& > *{color:", ";}"], palette[Color.BackgroundActive], palette[Color.AccentStateless]));
});
var CollapsedButton = /*#__PURE__*/styled(ItemButton).attrs({
  className: generateClassNames(baseClassName, 'item-button')
}).withConfig({
  componentId: "sc-1riasfx-11"
})(function (_ref9) {
  var palette = _ref9.theme.palette,
    isCollapsed = _ref9.isCollapsed;
  return css(["", " &:hover{background-color:", ";& > *{color:", ";}svg{color:", ";background-color:", ";border-radius:50%;path:first-of-type{color:", ";}}}"], !isCollapsed && css(["padding:13px 16px;"]), palette[Color.BackgroundActive], palette[Color.AccentStateless], palette[Color.BackgroundActive], palette[Color.AccentStateless], palette[Color.AccentStateless]);
});
var DrawerAccordion = /*#__PURE__*/styled(Accordion$1).attrs({
  className: generateClassNames(baseClassName, 'accordion')
}).withConfig({
  componentId: "sc-1riasfx-12"
})(function (_ref10) {
  var _ref10$theme = _ref10.theme,
    palette = _ref10$theme.palette,
    font = _ref10$theme.typography.font,
    selected = _ref10.selected;
  return css(["", "{padding:13px 16px;transition:background-color 100ms ease-out;", "{", ";color:", ";}&:hover{background-color:", ";& > *{color:", ";}}", "}", "{padding:0px 16px;}"], AccordionHeaderStyled.Header, AccordionHeaderStyled.Label, font[FontVariant.LabelLargeEmphasis], palette[Color.TextPrimary], palette[Color.BackgroundActive], palette[Color.AccentStateless], selected && css(["", "{color:", ";}"], AccordionHeaderStyled.Label, palette[Color.AccentStateless]), AccordionDetailsStyled.AccordionDetails);
});
var Styled$1 = applyDisplayNames({
  TemporaryDrawer: TemporaryDrawer,
  PersistentDrawer: PersistentDrawer,
  Drawer: Drawer$2,
  Header: Header,
  Body: Body,
  Footer: Footer,
  List: List,
  Item: Item,
  ItemButton: ItemButton,
  Icon: Icon,
  ItemText: ItemText,
  DrawerAccordion: DrawerAccordion,
  CollapsedButton: CollapsedButton
});
var Styled$2 = Styled$1;

var DrawerContext = /*#__PURE__*/createContext({
  isCollapsed: false,
  size: 20
});
if (process.env.NODE_ENV !== 'production') {
  DrawerContext.displayName = 'DrawerContext';
}
var DrawerContext$1 = DrawerContext;

var _excluded$6 = ["children", "font"];
var DrawerItemText = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    font = _ref.font,
    rest = _objectWithoutProperties(_ref, _excluded$6);
  var _useContext = useContext(DrawerContext$1),
    isCollapsed = _useContext.isCollapsed;
  return /*#__PURE__*/React__default.createElement(Styled$2.ItemText, _extends({
    font: font,
    isCollapsed: isCollapsed
  }, rest, {
    ref: ref
  }), children);
});
var DrawerItemText$1 = DrawerItemText;

var _excluded$5 = ["children", "size"];
var DrawerItemIcon = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    _ref$size = _ref.size,
    iconSize = _ref$size === void 0 ? 20 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$5);
  var _useContext = useContext(DrawerContext$1),
    isCollapsed = _useContext.isCollapsed,
    size = _useContext.size;
  return /*#__PURE__*/React__default.createElement(Styled$2.Icon, _extends({}, rest, {
    isCollapsed: isCollapsed,
    ref: ref
  }), children && typeof children === 'function' ? children({
    size: size || iconSize
  }) : children);
});
var DrawerItemIcon$1 = DrawerItemIcon;

var Variant = {
  Auto: 'auto',
  Temporary: 'temporary',
  Persistent: 'persistent'
};

var _excluded$4 = ["children", "open", "iconsSize", "collapsed", "top", "hideBackdrop", "disablePortal", "collapseButtonLabel", "persistentDrawerStyles", "temproryDrawerStyles", "variant", "onClose", "onCollapse", "onCollapseClick"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var Drawer = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    open = _ref.open,
    _ref$iconsSize = _ref.iconsSize,
    iconsSize = _ref$iconsSize === void 0 ? 20 : _ref$iconsSize,
    _ref$collapsed = _ref.collapsed,
    collapsed = _ref$collapsed === void 0 ? false : _ref$collapsed,
    top = _ref.top,
    _ref$hideBackdrop = _ref.hideBackdrop,
    hideBackdrop = _ref$hideBackdrop === void 0 ? false : _ref$hideBackdrop,
    disablePortal = _ref.disablePortal,
    _ref$collapseButtonLa = _ref.collapseButtonLabel,
    collapseButtonLabel = _ref$collapseButtonLa === void 0 ? 'Collapse menu' : _ref$collapseButtonLa,
    _ref$persistentDrawer = _ref.persistentDrawerStyles,
    persistentDrawerStyles = _ref$persistentDrawer === void 0 ? {} : _ref$persistentDrawer,
    _ref$temproryDrawerSt = _ref.temproryDrawerStyles,
    temproryDrawerStyles = _ref$temproryDrawerSt === void 0 ? {} : _ref$temproryDrawerSt,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? Variant.Auto : _ref$variant,
    onClose = _ref.onClose,
    onCollapse = _ref.onCollapse,
    onCollapseClick = _ref.onCollapseClick,
    rest = _objectWithoutProperties(_ref, _excluded$4);
  var theme = useTheme();
  var matchDownXl = useMediaQuery(theme.breakpoints.down('xl'));
  var _useState = useState(collapsed),
    _useState2 = _slicedToArray(_useState, 2),
    isCollapsed = _useState2[0],
    setIsCollapsed = _useState2[1];
  var temporaryDrawerRef = useRef(null);
  var DrawerIconsSize = useMemo(function () {
    return iconsSize;
  }, [iconsSize]);
  var target = document.querySelector('body');
  useEffect(function () {
    setIsCollapsed(collapsed);
  }, [collapsed]);
  useEffect(function () {
    if (onCollapse) {
      onCollapse(isCollapsed);
    }
  }, [isCollapsed]);
  var handleCollapse = function handleCollapse() {
    var newCollapseState = !isCollapsed;
    setIsCollapsed(newCollapseState);
    if (onCollapseClick) {
      onCollapseClick(newCollapseState);
    }
  };
  var handleClose = function handleClose() {
    if (typeof onClose === 'function') {
      onClose();
    }
  };
  var keyListener = function keyListener(ev) {
    var isTemporaryDrawer = false;
    if (temporaryDrawerRef !== null && temporaryDrawerRef !== void 0 && temporaryDrawerRef.current) {
      var _temporaryDrawerRef$c;
      isTemporaryDrawer = (temporaryDrawerRef === null || temporaryDrawerRef === void 0 || (_temporaryDrawerRef$c = temporaryDrawerRef.current) === null || _temporaryDrawerRef$c === void 0 ? void 0 : _temporaryDrawerRef$c.offsetWidth) > 0;
    }
    if (ev.key === 'Escape' && isTemporaryDrawer) {
      handleClose();
    }
  };
  useEffect(function () {
    document.addEventListener('keydown', keyListener);
    return function () {
      return document.removeEventListener('keydown', keyListener);
    };
  }, []);
  var renderDrawer = function renderDrawer(showCollapsedButton) {
    return /*#__PURE__*/React__default.createElement(Styled$2.Drawer, _extends({
      open: open,
      top: top
    }, rest, {
      isCollapsed: showCollapsedButton ? isCollapsed : false,
      ref: ref
    }), children, showCollapsedButton && /*#__PURE__*/React__default.createElement(Styled$2.CollapsedButton, {
      onClick: handleCollapse,
      isCollapsed: isCollapsed
    }, /*#__PURE__*/React__default.createElement(DrawerItemIcon$1, null, isCollapsed ? function (props) {
      return /*#__PURE__*/React__default.createElement(ArrowSidebarRightOutline$1, _extends({}, props, {
        size: iconsSize
      }));
    } : function (props) {
      return /*#__PURE__*/React__default.createElement(ArrowSidebarLeftOutline$1, _extends({}, props, {
        size: iconsSize
      }));
    }), /*#__PURE__*/React__default.createElement(DrawerItemText$1, null, collapseButtonLabel)));
  };
  var renderBackdrop = function renderBackdrop() {
    return !hideBackdrop && open ? /*#__PURE__*/React__default.createElement(Backdrop$1, {
      onClick: onClose
    }) : null;
  };
  var temporaryDrawer = function temporaryDrawer() {
    return disablePortal ? /*#__PURE__*/React__default.createElement(Styled$2.TemporaryDrawer, {
      ref: temporaryDrawerRef,
      style: _objectSpread({}, temproryDrawerStyles),
      open: open
    }, renderBackdrop(), renderDrawer(false)) : ( /*#__PURE__*/createPortal( /*#__PURE__*/React__default.createElement(Styled$2.TemporaryDrawer, {
      ref: temporaryDrawerRef,
      style: _objectSpread({}, temproryDrawerStyles),
      open: open
    }, renderBackdrop(), renderDrawer(false)), target));
  };
  var persistentDrawer = function persistentDrawer() {
    return /*#__PURE__*/React__default.createElement(Styled$2.PersistentDrawer, {
      style: _objectSpread({}, persistentDrawerStyles)
    }, renderDrawer(true));
  };
  var getDrawerVariant = function getDrawerVariant() {
    switch (variant) {
      case Variant.Auto:
        return matchDownXl ? temporaryDrawer() : persistentDrawer();
      case Variant.Temporary:
        return temporaryDrawer();
      case Variant.Persistent:
        return persistentDrawer();
      default:
        return matchDownXl ? temporaryDrawer() : persistentDrawer();
    }
  };
  return /*#__PURE__*/React__default.createElement(DrawerContext$1.Provider, {
    value: {
      isCollapsed: !matchDownXl ? isCollapsed : false,
      size: DrawerIconsSize
    }
  }, getDrawerVariant());
});
var Drawer$1 = Drawer;

var _excluded$3 = ["children"];
var DrawerHeader = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded$3);
  var _useContext = useContext(DrawerContext$1),
    isCollapsed = _useContext.isCollapsed;
  return /*#__PURE__*/React__default.createElement(Styled$2.Header, _extends({}, rest, {
    isCollapsed: isCollapsed,
    ref: ref
  }), children);
});
var DrawerHeader$1 = DrawerHeader;

var _excluded$2 = ["children"];
var DrawerBody = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded$2);
  return /*#__PURE__*/React__default.createElement(Styled$2.Body, _extends({}, rest, {
    ref: ref
  }), children);
});
var DrawerBody$1 = DrawerBody;

var _excluded$1 = ["children"];
var DrawerList = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded$1);
  return /*#__PURE__*/React__default.createElement(Styled$2.List, _extends({}, rest, {
    ref: ref
  }), children);
});
var DrawerList$1 = DrawerList;

var _excluded = ["children", "selected"];
var DrawerItem = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    _ref$selected = _ref.selected,
    selected = _ref$selected === void 0 ? false : _ref$selected,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useContext = useContext(DrawerContext$1),
    isCollapsed = _useContext.isCollapsed;
  return /*#__PURE__*/React__default.createElement(Styled$2.Item, _extends({
    selected: selected,
    isCollapsed: isCollapsed
  }, rest, {
    ref: ref
  }), children);
});
var DrawerItem$1 = DrawerItem;

/** External Dependencies */
const StyledHSVOptions = styled.div`
  display: flex;
  width: 100%;
  justify-content: space-between;
  gap: 10px;

  .SfxSlider-root {
    min-width: 100px;
  }

  ${({
  isPhoneScreen
}) => isPhoneScreen && `
      flex-direction: column;

      .SfxSlider-root {
        min-width: 230px;
      }
    `}
`;
const StyledSliderContainer = styled.div`
  display: flex;
  flex-direction: column;
`;
const StyledSliderLabel = styled(Label$6)`
  color: black;
  font-size: 12px !important;
  line-height: 14px;
  font-family: "Open Sans", sans-serif;
  ${({
  theme
}) => theme.typography.font[FontVariant.LabelExtraSmallUp]};
`;
const StyledSliderWrapper = styled.div`
  display: flex;
  align-items: center;
`;
const StyledSliderInput = styled(Input$2)`
  display: inline-block;
  width: 40px;
  height: 28px;
  padding: 6px 2px;
  margin-left: 10px;
  border: none;
  color: black;
  font-size: 12px !important;
  line-height: 14px;
  font-family: "Open Sans", sans-serif;

  .SfxInput-Base {
    text-align: center;
    width: 100%;
    min-width: 100%;
    max-width: 100%;
    font-size: 12px !important;
  }


`;

/** External Dependencies */
const MIN_VALUE$6 = -1;
const DEFAULT_VALUE$4 = {
  brightness: 0
};
const MAX_VALUE$7 = 1;
const sliderStyle$4 = {
  width: 150,
  padding: 0,
  margin: 0
};
const BrightnessOptions = ({
  t
}) => {
  const [finetuneProps, setFinetuneProps] = useFinetune(Konva$2.Filters.Brighten, DEFAULT_VALUE$4);
  const changeValue = value => {
    setFinetuneProps({
      brightness: restrictNumber(value, MIN_VALUE$6, MAX_VALUE$7)
    });
  };
  return /*#__PURE__*/React__default.createElement(StyledSliderContainer, {
    className: "FIE_brightness-option-wrapper"
  }, /*#__PURE__*/React__default.createElement(StyledSliderLabel, {
    className: "FIE_brightness-option-label"
  }, t('brightness')), /*#__PURE__*/React__default.createElement(StyledSliderWrapper, null, /*#__PURE__*/React__default.createElement(Slider, {
    className: "FIE_brightness-option",
    min: MIN_VALUE$6,
    step: 0.05,
    max: MAX_VALUE$7,
    width: "124px",
    value: finetuneProps.brightness ?? DEFAULT_VALUE$4.brightness,
    onChange: changeValue,
    style: sliderStyle$4
  }), /*#__PURE__*/React__default.createElement(StyledSliderInput, {
    value: finetuneProps.brightness ?? DEFAULT_VALUE$4.brightness,
    onChange: ({
      target: {
        value
      }
    }) => changeValue(value)
  })));
};
BrightnessOptions.propTypes = {
  t: PropTypes.func.isRequired
};

const getZoomFitFactor = (previewDimens, originalDimens) => Math.min(previewDimens.width / originalDimens.width, previewDimens.height / originalDimens.height) || DEFAULT_ZOOM_FACTOR;

/** External Dependencies */
const DEFAULT_CROP_PRESETS = [{
  titleKey: 'custom',
  ratio: CUSTOM_CROP,
  icon: Custom$1,
  hide: ({
    lockCropAreaAt
  } = {}) => lockCropAreaAt
}, {
  titleKey: 'original',
  ratio: ORIGINAL_CROP,
  icon: ImageOutline$1
}, {
  titleKey: 'landscape',
  descriptionKey: '16:9',
  ratio: toPrecisedFloat(16 / 9),
  icon: Landscape$1
}, {
  titleKey: 'portrait',
  descriptionKey: '9:16',
  ratio: toPrecisedFloat(9 / 16),
  icon: Portrait$1
}, {
  titleKey: 'ellipse',
  ratio: ELLIPSE_CROP,
  icon: Ellipse$1
}];

/** External Dependencies */
const StyledToolsBarItemButtonWrapper = styled.div`
  display: flex;
`;
const StyledOpenMenuButton = styled(Button$1)`
  margin: 0 0 0 6px;
  padding: 0;
`;
const StyledMenuItemIcon = styled.div`
  svg,
  span {
    vertical-align: middle;
  }
`;
const StyledRatioDescription = styled(Label$6)`
  cursor: pointer;
  ${({
  theme: {
    typography
  }
}) => typography.font[FontVariant.InputSm]}
`;
const StyledMenu$1 = styled.div`
  min-width: 270px;
  border-radius: 4px;
  overflow: hidden;
  background-color: ${({
  theme: {
    palette
  }
}) => palette[Color.BackgroundStateless]};
`;
const StyledMenuItem$1 = styled(MenuItem$1)`
  display: flex;
  gap: 10px;
  justify-content: flex-start;
  align-items: center;
  border-radius: 4px;
  padding: 8px 16px;

  ${({
  isAccordion
}) => isAccordion && 'padding-left: 22px;'}

  ${({
  isListItem
}) => isListItem && 'padding: 0;'}
`;
const StyledMenuItemLabel = styled(Label$6)(({
  theme
}) => css`
    color: ${theme.palette[Color.TextPrimary]};
    ${theme.typography.font[FontVariant.InputMd]};
  `);
const StyledAccordion = styled(Accordion$1)(({
  theme
}) => css`
    .SfxAccordionHeader-icon {
      padding-left: 0;
    }

    .SfxAccordionHeader-label {
      ${theme.typography.font[FontVariant.LabelMediumEmphasis]};
      color: ${theme.palette[Color.TextPrimary]};
    }

    .SfxAccordionHeader-root {
      display: flex;
      flex-direction: row-reverse;
      width: fit-content;
      gap: 10px;
    }
  `);

/** External Dependeices */
const CropPresetItem = ({
  titleKey,
  description,
  ratio,
  onClick,
  Icon,
  isActive,
  isAccordion,
  theme,
  width,
  height,
  t,
  disableManualResize,
  noEffect
}) => {
  const handleOnClick = e => onClick(e, ratio, {
    ratioTitleKey: titleKey,
    width,
    height,
    disableManualResize,
    noEffect
  });
  return /*#__PURE__*/React__default.createElement(StyledMenuItem$1, {
    active: isActive,
    onClick: handleOnClick,
    isAccordion: isAccordion
  }, Icon && /*#__PURE__*/React__default.createElement(StyledMenuItemIcon, null, typeof Icon === 'string' ?
  /*#__PURE__*/
  // eslint-disable-next-line react/no-danger
  React__default.createElement("span", {
    dangerouslySetInnerHTML: {
      __html: Icon
    }
  }) : /*#__PURE__*/React__default.createElement(Icon, {
    color: theme.palette['icon-primary']
  })), /*#__PURE__*/React__default.createElement(StyledMenuItemLabel, null, t(titleKey)), description && /*#__PURE__*/React__default.createElement(StyledRatioDescription, null, description));
};
CropPresetItem.defaultProps = {
  Icon: undefined,
  width: undefined,
  height: undefined,
  disableManualResize: false,
  isAccordion: false,
  noEffect: false
};
CropPresetItem.propTypes = {
  titleKey: PropTypes.string.isRequired,
  description: PropTypes.string.isRequired,
  onClick: PropTypes.func.isRequired,
  t: PropTypes.func.isRequired,
  isActive: PropTypes.bool.isRequired,
  ratio: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
  disableManualResize: PropTypes.bool,
  isAccordion: PropTypes.bool,
  theme: PropTypes.instanceOf(Object).isRequired,
  width: PropTypes.number,
  height: PropTypes.number,
  Icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.string, PropTypes.instanceOf(HTMLElement)]),
  noEffect: PropTypes.bool
};

/** External Dependencies */
const CropPresetGroup = ({
  groupTitleKey,
  items,
  onItemSelect,
  t,
  isExpanded,
  setExpandedGroup
}) => {
  const {
    adjustments: {
      crop: {
        ratio: currentRatio,
        ratioGroupKey,
        ratioTitleKey
      }
    },
    theme
  } = useStore();
  const toggleExpand = () => {
    setExpandedGroup(isExpanded ? null : groupTitleKey);
  };
  const onItemSelectFromGroup = (e, newRatio, cropProps) => {
    onItemSelect(e, newRatio, {
      ...cropProps,
      ratioGroupKey: groupTitleKey
    });
  };
  return /*#__PURE__*/React__default.createElement(StyledAccordion, {
    label: t(groupTitleKey),
    onChange: toggleExpand,
    expanded: isExpanded
  }, items.map(({
    titleKey,
    ratio,
    width,
    height,
    descriptionKey,
    icon,
    disableManualResize,
    noEffect
  }) => {
    const newRatio = ratio ?? toPrecisedFloat(width / height);
    return /*#__PURE__*/React__default.createElement(CropPresetItem, {
      key: titleKey,
      titleKey: titleKey,
      t: t,
      description: t(descriptionKey),
      size: "sm",
      onClick: onItemSelectFromGroup,
      width: width,
      height: height,
      ratio: newRatio,
      Icon: icon,
      theme: theme,
      isAccordion: true,
      disableManualResize: disableManualResize,
      isActive: currentRatio === newRatio && ratioTitleKey === titleKey && ratioGroupKey === groupTitleKey,
      noEffect: noEffect
    });
  }));
};
CropPresetGroup.propTypes = {
  groupTitleKey: PropTypes.string.isRequired,
  items: PropTypes.instanceOf(Array).isRequired,
  onItemSelect: PropTypes.func.isRequired,
  t: PropTypes.func.isRequired,
  isExpanded: PropTypes.bool.isRequired,
  setExpandedGroup: PropTypes.func.isRequired
};

/** External Dependencies */
const CropPresetGroupsFolder = ({
  titleKey,
  Icon,
  theme,
  groups,
  onItemSelect,
  t
}) => {
  const {
    adjustments: {
      crop: {
        ratioFolderKey,
        ratioGroupKey
      }
    }
  } = useStore();
  const [expandedGroup, setExpandedGroup] = useState('');
  const onItemSelectFromFolder = (e, newRatio, cropProps) => {
    onItemSelect(e, newRatio, {
      ...cropProps,
      ratioFolderKey: titleKey
    });
  };
  return /*#__PURE__*/React__default.createElement(StyledMenuItem$1, {
    isListItem: true,
    list: [{
      content: t(titleKey),
      key: titleKey,
      active: titleKey === ratioFolderKey,
      prefix: Icon && /*#__PURE__*/React__default.createElement(StyledMenuItemIcon, null, typeof Icon === 'string' ?
      /*#__PURE__*/
      // eslint-disable-next-line react/no-danger
      React__default.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: Icon
        }
      }) : /*#__PURE__*/React__default.createElement(Icon, {
        color: theme.palette['icon-primary']
      })),
      subList: groups.map(({
        titleKey: groupTitleKey,
        items
      }) => ({
        content: /*#__PURE__*/React__default.createElement(CropPresetGroup, {
          groupTitleKey: groupTitleKey,
          setExpandedGroup: setExpandedGroup,
          isExpanded: expandedGroup === '' ? ratioGroupKey === groupTitleKey : expandedGroup === groupTitleKey,
          t: t,
          items: items,
          onItemSelect: onItemSelectFromFolder
        }),
        key: groupTitleKey,
        disableHover: true
      })),
      subMenuProps: {
        style: {
          backgroundColor: theme.palette[Color.BackgroundStateless]
        }
      }
    }]
  });
};
CropPresetGroupsFolder.defaultProps = {
  Icon: undefined
};
CropPresetGroupsFolder.propTypes = {
  titleKey: PropTypes.string.isRequired,
  groups: PropTypes.instanceOf(Array).isRequired,
  onItemSelect: PropTypes.func.isRequired,
  t: PropTypes.func.isRequired,
  theme: PropTypes.instanceOf(Object).isRequired,
  Icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.string, PropTypes.instanceOf(HTMLElement)])
};

/** External Dependencies */
const CropPresetsOption = ({
  anchorEl,
  onClose
}) => {
  const {
    dispatch,
    t,
    adjustments: {
      crop: {
        ratio: appliedRatio,
        ratioTitleKey,
        ratioFolderKey
      } = {}
    } = {},
    shownImageDimensions,
    config,
    theme
  } = useStore();
  const currentRatio = appliedRatio || ORIGINAL_CROP; // we consider original as default one if no ratio has been set.
  const cropConfig = config[TOOLS_IDS.CROP];
  const isPhoneScreen = usePhoneScreen();
  const allPresets = useMemo(() => {
    const {
      presetsItems = [],
      presetsFolders = [],
      lockCropAreaAt
    } = cropConfig;
    const defaultPresets = lockCropAreaAt ? DEFAULT_CROP_PRESETS.filter(item => !item.hide?.({
      lockCropAreaAt
    })) : DEFAULT_CROP_PRESETS;
    return [...presetsFolders, ...defaultPresets, ...presetsItems];
  }, [cropConfig]);
  const changeCropRatio = (e, newCropRatio, cropProps) => {
    e.stopPropagation();
    const newCrop = {
      ratio: newCropRatio,
      ratioTitleKey: cropProps.ratioTitleKey,
      ratioGroupKey: cropProps.ratioGroupKey,
      ratioFolderKey: cropProps.ratioFolderKey,
      noEffect: cropProps.noEffect
    };
    dispatch({
      type: SET_CROP,
      payload: newCrop
    });
    if (cropConfig.autoResize) {
      dispatch({
        type: SET_RESIZE,
        payload: {
          width: cropProps.width,
          height: cropProps.height,
          manualChangeDisabled: cropProps.disableManualResize
        }
      });
      dispatch({
        type: ZOOM_CANVAS,
        payload: {
          factor: cropProps.width > shownImageDimensions.width || cropProps.height > shownImageDimensions.height ? getZoomFitFactor(shownImageDimensions, cropProps) : DEFAULT_ZOOM_FACTOR
        }
      });
    }
    onClose();
  };
  const renderPreset = ({
    titleKey,
    descriptionKey,
    ratio,
    width,
    height,
    groups,
    icon: Icon,
    disableManualResize,
    noEffect
  }) => groups ? /*#__PURE__*/React__default.createElement(CropPresetGroupsFolder, {
    key: titleKey,
    titleKey: titleKey,
    groups: groups,
    Icon: Icon,
    theme: theme,
    onItemSelect: changeCropRatio,
    t: t,
    disableManualResize: disableManualResize
  }) : /*#__PURE__*/React__default.createElement(CropPresetItem, {
    key: ratio,
    ratio: ratio ?? toPrecisedFloat(width / height),
    titleKey: titleKey,
    t: t,
    description: t(descriptionKey),
    Icon: Icon,
    isActive: currentRatio === (ratio ?? toPrecisedFloat(width / height)) && !ratioFolderKey,
    theme: theme,
    width: width,
    height: height,
    onClick: changeCropRatio,
    disableManualResize: disableManualResize,
    noEffect: noEffect
  });
  const toolTitleKey = ratioTitleKey || 'cropTool';
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(StyledToolsBarItemButtonWrapper, null, /*#__PURE__*/React__default.createElement(StyledToolsBarItemButtonLabel, {
    className: "FIE_crop-tool-label FIE_selected-crop-preset-label",
    isPhoneScreen: isPhoneScreen
  }, t(toolTitleKey)), /*#__PURE__*/React__default.createElement(StyledOpenMenuButton, {
    className: "FIE_crop-presets-opener-button",
    color: "link-secondary",
    size: "lg"
  }, anchorEl ? /*#__PURE__*/React__default.createElement(MoveUpOutline, {
    size: 10
  }) : /*#__PURE__*/React__default.createElement(MoveDownOutline, {
    size: 10
  }))), /*#__PURE__*/React__default.createElement(Menu$2, {
    className: "FIE_crop-presets-menu",
    anchorEl: anchorEl,
    enableOverlay: true,
    onClose: onClose,
    open: Boolean(anchorEl),
    position: "top",
    style: {
      borderRadius: '10px'
    },
    popperOptions: {
      modifiers: [{
        name: 'offset',
        options: {
          offset: [0, 4]
        }
      }]
    },
    maxHeight: "100%"
  }, /*#__PURE__*/React__default.createElement(StyledMenu$1, null, allPresets.map(renderPreset))));
};
CropPresetsOption.defaultProps = {
  anchorEl: null
};
CropPresetsOption.propTypes = {
  onClose: PropTypes.func.isRequired,
  anchorEl: PropTypes.instanceOf(HTMLElement)
};

/** External Dependencies */
const Crop = ({
  selectTool,
  isSelected
}) => {
  const {
    config,
    t
  } = useStore();
  const [anchorEl, setAnchorEl] = useState();
  const selectToolAndShowPresets = (toolId, e) => {
    selectTool(toolId);
    setAnchorEl(e.currentTarget);
  };
  const closeCropPresets = () => {
    setAnchorEl(null);
  };
  return /*#__PURE__*/React__default.createElement(ToolsBarItemButton$1, {
    className: "FIE_crop-tool",
    id: TOOLS_IDS.CROP,
    Icon: Crop$1,
    onClick: selectToolAndShowPresets,
    isSelected: isSelected
  }, !config[TOOLS_IDS.CROP].noPresets ? /*#__PURE__*/React__default.createElement(CropPresetsOption, {
    anchorEl: anchorEl,
    onClose: closeCropPresets
  }) : /*#__PURE__*/React__default.createElement(StyledToolsBarItemButtonLabel, {
    className: "FIE_crop-tool-label"
  }, t('cropTool')));
};
Crop.defaultProps = {
  isSelected: false
};
Crop.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool
};

/** External Dependencies */
const xFlipReverseSideStyle = {
  transform: 'scaleX(-1)'
};
const FlipX = ({
  selectTool,
  isSelected,
  t
}) => {
  const {
    dispatch,
    adjustments: {
      isFlippedX
    }
  } = useStore();
  const isPhoneScreen = usePhoneScreen(320);
  const getFlipIcon = useCallback(() => /*#__PURE__*/React__default.createElement(FlipX$1, {
    size: isPhoneScreen ? 20 : 16,
    style: isFlippedX ? xFlipReverseSideStyle : undefined
  }), [isFlippedX, isPhoneScreen]);
  const {
    reverseLabelOfCurrXFlipDir,
    reverseIconOfCurrXFlipDir
  } = useMemo(() => ({
    reverseLabelOfCurrXFlipDir: isFlippedX ? t('unFlipX') : t('flipX'),
    reverseIconOfCurrXFlipDir: getFlipIcon
  }), [isFlippedX, getFlipIcon]);
  const toggleFlipX = useCallback(() => {
    dispatch({
      type: TOGGLE_FLIP,
      payload: {
        direction: FLIP_DIRECTIONS.X
      }
    });
  }, []);
  const handleButtonClick = useCallback(flipXToolId => {
    selectTool(flipXToolId);
    toggleFlipX();
  }, []);
  return /*#__PURE__*/React__default.createElement(ToolsBarItemButton$1, {
    className: "FIE_flip-x-tool-button",
    id: TOOLS_IDS.FLIP_X,
    label: reverseLabelOfCurrXFlipDir,
    Icon: reverseIconOfCurrXFlipDir,
    onClick: handleButtonClick,
    isSelected: isSelected
  });
};
FlipX.defaultProps = {
  isSelected: false
};
FlipX.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const yFlipReverseSideStyle = {
  transform: 'scaleY(-1)'
};
const FlipY = ({
  selectTool,
  isSelected,
  t
}) => {
  const {
    dispatch,
    adjustments: {
      isFlippedY
    }
  } = useStore();
  const isPhoneScreen = usePhoneScreen(320);
  const getFlipIcon = useCallback(() => /*#__PURE__*/React__default.createElement(FlipY$1, {
    size: isPhoneScreen ? 20 : 16,
    style: isFlippedY ? yFlipReverseSideStyle : undefined
  }), [isFlippedY, isPhoneScreen]);
  const {
    reverseLabelOfCurrYFlipDir,
    reverseIconOfCurrYFlipDir
  } = useMemo(() => ({
    reverseLabelOfCurrYFlipDir: isFlippedY ? t('unFlipY') : t('flipY'),
    reverseIconOfCurrYFlipDir: getFlipIcon
  }), [isFlippedY]);
  const toggleFlipY = useCallback(() => {
    dispatch({
      type: TOGGLE_FLIP,
      payload: {
        direction: FLIP_DIRECTIONS.Y
      }
    });
  }, []);
  const handleButtonClick = useCallback(flipYToolId => {
    selectTool(flipYToolId);
    toggleFlipY();
  }, []);
  return /*#__PURE__*/React__default.createElement(ToolsBarItemButton$1, {
    className: "FIE_flip-y-tool-button",
    id: TOOLS_IDS.FLIP_Y,
    label: reverseLabelOfCurrYFlipDir,
    Icon: reverseIconOfCurrYFlipDir,
    onClick: handleButtonClick,
    isSelected: isSelected
  });
};
FlipY.defaultProps = {
  isSelected: false
};
FlipY.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const RotateButton = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React__default.createElement(ToolsBarItemButton$1, {
  className: "FIE_rotate-tool-button",
  id: TOOLS_IDS.ROTATE,
  label: t('rotateTool'),
  Icon: RotationLeft,
  onClick: selectTool,
  isSelected: isSelected
});
RotateButton.defaultProps = {
  isSelected: false
};
RotateButton.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const StyledRotationOptions = styled.div`
  display: flex;
  align-items: center;
  gap: 16px;
`;
const StyledRotationSlider = styled(RotationSlider$1)`
  .SfxRotationSlider-control {
    width: 1px;
    height: 10px;
    background-color: ${({
  theme: {
    palette
  }
}) => palette[Color.IconsSecondary]};

    &:before {
      box-shadow: unset;
    }
  }

  .SfxRotationSlider-mark,
  .SfxRotationSlider-small-dot-wrapper {
    padding: 0;

    .SfxRotationSlider-mark-text {
      top: 10px;
    }

    .SfxRotationSlider-big-dot {
      width: 4px;
      height: 4px;
    }

    .SfxRotationSlider-small-dot {
      width: 1px;
      height: 1px;
    }
  }

  .SfxRotationSlider-list {
    gap: 4px;
  }
`;
const StyledRotateButton = styled(IconButton$1)``;

/** External Dependencies */
const RotateOptions = () => {
  const {
    dispatch,
    adjustments: {
      rotation = 0
    },
    resize = {},
    config
  } = useStore();
  const rotateConfig = config[TOOLS_IDS.ROTATE];
  const isPhoneScreen = usePhoneScreen();
  const changeRotation = useDebouncedCallback((_e, newRotation) => {
    const rotationAngle = restrictNumber(newRotation, -180, 180);
    dispatch({
      type: CHANGE_ROTATION,
      payload: {
        rotation: rotationAngle
      }
    });
    if (resize.width && resize.height) {
      const sizeAfterRotation = getSizeAfterRotation(resize.width, resize.height, rotationAngle);
      dispatch({
        type: SET_RESIZE,
        payload: {
          width: sizeAfterRotation.width,
          height: sizeAfterRotation.height
        }
      });
    }
  }, 20);
  const changeRotationButtonPositive = e => {
    const newAngle = rotation + rotateConfig.angle;
    changeRotation(e, newAngle);
  };
  const changeRotationButtonNegative = e => {
    const newAngle = rotation - rotateConfig.angle;
    changeRotation(e, newAngle);
  };
  if (rotateConfig.componentType === 'buttons') {
    return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(ToolsBarItemButton$1, {
      className: "FIE_rotate_button_left",
      id: TOOLS_IDS.IMAGE,
      label: `-${rotateConfig.angle}°`,
      Icon: RotationLeft$1,
      onClick: changeRotationButtonNegative
    }), /*#__PURE__*/React__default.createElement(ToolsBarItemButton$1, {
      className: "FIE_rotate_button_right",
      id: TOOLS_IDS.IMAGE,
      label: `+${rotateConfig.angle}°`,
      Icon: RotationRight$1,
      onClick: changeRotationButtonPositive
    }));
  }
  return /*#__PURE__*/React__default.createElement(StyledRotationOptions, null, /*#__PURE__*/React__default.createElement(StyledRotateButton, {
    size: "sm",
    color: "basic",
    onClick: e => changeRotation(e, rotation - 90)
  }, /*#__PURE__*/React__default.createElement(Rotate90, {
    width: 15
  })), /*#__PURE__*/React__default.createElement(StyledRotationSlider, {
    className: "FIE_rotate-slider",
    showCurrentMarkText: true,
    min: -180,
    max: 180,
    step: isPhoneScreen ? rotateConfig.angle / 3 : 1,
    value: rotation,
    angle: rotateConfig.angle || 90,
    onChange: changeRotation
  }), /*#__PURE__*/React__default.createElement(StyledRotateButton, {
    size: "sm",
    color: "basic",
    onClick: e => changeRotation(e, rotation + 90)
  }, /*#__PURE__*/React__default.createElement(Rotate90, {
    width: 15,
    style: {
      transform: 'scaleX(-1)'
    }
  })));
};

/** External Dependencies */
const Contrast = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React__default.createElement(ToolsBarItemButton$1, {
  className: "FIE_contrast-tool-button",
  id: TOOLS_IDS.CONTRAST,
  label: t('contrastTool'),
  Icon: Contrast$1,
  onClick: selectTool,
  isSelected: isSelected
});
Contrast.defaultProps = {
  isSelected: false
};
Contrast.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Depdencies */
const MIN_VALUE$5 = -100;
const DEFAULT_VALUE$3 = {
  contrast: 0
};
const MAX_VALUE$6 = 100;
const sliderStyle$3 = {
  width: 150,
  padding: 0,
  margin: 0
};
const ContrastOptions = ({
  t
}) => {
  const [finetuneProps, setFinetuneProps] = useFinetune(Konva$2.Filters.Contrast, DEFAULT_VALUE$3);
  const changeValue = value => {
    setFinetuneProps({
      contrast: restrictNumber(value, MIN_VALUE$5, MAX_VALUE$6)
    });
  };
  return /*#__PURE__*/React__default.createElement(StyledSliderContainer, {
    className: "FIE_contrast-option-wrapper"
  }, /*#__PURE__*/React__default.createElement(StyledSliderLabel, {
    className: "FIE_contrast-option-label"
  }, t('contrastTool')), /*#__PURE__*/React__default.createElement(StyledSliderWrapper, null, /*#__PURE__*/React__default.createElement(Slider, {
    className: "FIE_contrast-option",
    min: MIN_VALUE$5,
    max: MAX_VALUE$6,
    width: "124px",
    value: finetuneProps.contrast ?? DEFAULT_VALUE$3.contrast,
    onChange: changeValue,
    style: sliderStyle$3
  }), /*#__PURE__*/React__default.createElement(StyledSliderInput, {
    value: finetuneProps.contrast ?? DEFAULT_VALUE$3.contrast,
    onChange: ({
      target: {
        value
      }
    }) => changeValue(value)
  })));
};
ContrastOptions.propTypes = {
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const HSV = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React__default.createElement(ToolsBarItemButton$1, {
  className: "FIE_hsv-tool-button",
  id: TOOLS_IDS.HSV,
  label: t('hsvTool'),
  Icon: Saturation,
  onClick: selectTool,
  isSelected: isSelected
});
HSV.defaultProps = {
  isSelected: false
};
HSV.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const DEFAULT_VALUE$2 = {
  hue: 0,
  saturation: 0,
  value: 0
};
const MAX_VALUE$5 = {
  hue: 259,
  saturation: 10,
  value: 2
};
const sliderStyle$2 = {
  padding: 0,
  margin: 0
};
const isPhoneScreen = usePhoneScreen();
const HSVOptions = ({
  t
}) => {
  const [finetuneProps, setFinetuneProps] = useFinetune(Konva$2.Filters.HSV, DEFAULT_VALUE$2);
  const changeValue = (name, value) => {
    setFinetuneProps({
      [name]: value > MAX_VALUE$5[name] ? MAX_VALUE$5[name] : +value
    });
  };
  return /*#__PURE__*/React__default.createElement(StyledHSVOptions, {
    isPhoneScreen: isPhoneScreen
  }, /*#__PURE__*/React__default.createElement(StyledSliderContainer, {
    className: "FIE_hue-option-wrapper"
  }, /*#__PURE__*/React__default.createElement(StyledSliderLabel, {
    className: "FIE_hue-option-label"
  }, t('hue')), /*#__PURE__*/React__default.createElement(StyledSliderWrapper, null, /*#__PURE__*/React__default.createElement(Slider, {
    className: "FIE_hue-option",
    min: 0,
    step: 1,
    max: 259,
    value: finetuneProps.hue ?? DEFAULT_VALUE$2.hue,
    onChange: val => changeValue('hue', val),
    style: sliderStyle$2
  }), /*#__PURE__*/React__default.createElement(StyledSliderInput, {
    value: finetuneProps.hue ?? DEFAULT_VALUE$2.hue,
    onChange: ({
      target: {
        value
      }
    }) => changeValue('hue', value)
  }))), /*#__PURE__*/React__default.createElement(StyledSliderContainer, {
    className: "FIE_saturation-option-wrapper"
  }, /*#__PURE__*/React__default.createElement(StyledSliderLabel, {
    className: "FIE_saturation-option-label"
  }, t('saturation')), /*#__PURE__*/React__default.createElement(StyledSliderWrapper, null, /*#__PURE__*/React__default.createElement(Slider, {
    className: "FIE_saturation-option",
    min: -2,
    step: 0.5,
    max: 10,
    value: finetuneProps.saturation ?? DEFAULT_VALUE$2.saturation,
    onChange: val => changeValue('saturation', val),
    style: sliderStyle$2
  }), /*#__PURE__*/React__default.createElement(StyledSliderInput, {
    value: finetuneProps.saturation ?? DEFAULT_VALUE$2.saturation,
    onChange: ({
      target: {
        value
      }
    }) => changeValue('saturation', value)
  }))), /*#__PURE__*/React__default.createElement(StyledSliderContainer, {
    className: "FIE_value-option-wrapper"
  }, /*#__PURE__*/React__default.createElement(StyledSliderLabel, {
    className: "FIE_value-option-label"
  }, t('value')), /*#__PURE__*/React__default.createElement(StyledSliderWrapper, null, /*#__PURE__*/React__default.createElement(Slider, {
    className: "FIE_value-option",
    min: -2,
    step: 0.1,
    max: 2,
    value: finetuneProps.value ?? DEFAULT_VALUE$2.value,
    onChange: val => changeValue('value', val),
    style: sliderStyle$2
  }), /*#__PURE__*/React__default.createElement(StyledSliderInput, {
    value: finetuneProps.value ?? DEFAULT_VALUE$2.value,
    onChange: ({
      target: {
        value
      }
    }) => changeValue('value', value)
  }))));
};
HSVOptions.propTypes = {
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const Blur = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React__default.createElement(ToolsBarItemButton$1, {
  className: "FIE_blur-tool-button",
  id: TOOLS_IDS.BLUR,
  label: t('blurTool'),
  Icon: Blur$1,
  onClick: selectTool,
  isSelected: isSelected
});
Blur.defaultProps = {
  isSelected: false
};
Blur.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const MIN_VALUE$4 = 0;
const DEFAULT_VALUE$1 = {
  blurRadius: MIN_VALUE$4
};
const MAX_VALUE$4 = 100;
const sliderStyle$1 = {
  width: 150,
  padding: 0,
  margin: 0
};
const BlurOptions = ({
  t
}) => {
  const [finetuneProps, setFinetuneProps] = useFinetune(Konva$2.Filters.Blur, DEFAULT_VALUE$1);
  const changeValue = value => {
    setFinetuneProps({
      blurRadius: restrictNumber(value, MIN_VALUE$4, MAX_VALUE$4)
    });
  };
  return /*#__PURE__*/React__default.createElement(StyledSliderContainer, {
    className: "FIE_blur-option-wrapper"
  }, /*#__PURE__*/React__default.createElement(StyledSliderLabel, {
    className: "FIE_blur-option-label"
  }, t('blur')), /*#__PURE__*/React__default.createElement(StyledSliderWrapper, null, /*#__PURE__*/React__default.createElement(Slider, {
    className: "FIE_blur-option",
    min: MIN_VALUE$4,
    max: MAX_VALUE$4,
    width: "124px",
    value: finetuneProps.blurRadius ?? DEFAULT_VALUE$1.blurRadius,
    onChange: changeValue,
    style: sliderStyle$1
  }), /*#__PURE__*/React__default.createElement(StyledSliderInput, {
    value: finetuneProps.blurRadius ?? DEFAULT_VALUE$1.blurRadius,
    onChange: ({
      target: {
        value
      }
    }) => changeValue(value)
  })));
};
BlurOptions.propTypes = {
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const Warmth = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React__default.createElement(ToolsBarItemButton$1, {
  className: "FIE_warmth-tool-button",
  id: TOOLS_IDS.WARMTH,
  label: t('warmthTool'),
  Icon: Temprature,
  onClick: selectTool,
  isSelected: isSelected
});
Warmth.defaultProps = {
  isSelected: false
};
Warmth.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const MIN_VALUE$3 = 0;
const DEFAULT_VALUE = {
  warmth: MIN_VALUE$3
};
const MAX_VALUE$3 = 200;
const sliderStyle = {
  width: 150,
  padding: 0,
  margin: 0
};
const WarmthOptions = ({
  t
}) => {
  const [finetuneProps, setFinetuneProps] = useFinetune(Warmth$1, DEFAULT_VALUE);
  const changeValue = value => {
    setFinetuneProps({
      warmth: restrictNumber(value, MIN_VALUE$3, MAX_VALUE$3)
    });
  };
  return /*#__PURE__*/React__default.createElement(StyledSliderContainer, {
    className: "FIE_warmth-option-wrapper"
  }, /*#__PURE__*/React__default.createElement(StyledSliderLabel, {
    className: "FIE_warmth-option-label"
  }, t('warmthTool')), /*#__PURE__*/React__default.createElement(StyledSliderWrapper, null, /*#__PURE__*/React__default.createElement(Slider, {
    className: "FIE_warmth-option",
    min: MIN_VALUE$3,
    max: MAX_VALUE$3,
    width: "124px",
    value: finetuneProps.warmth ?? DEFAULT_VALUE.warmth,
    onChange: changeValue,
    style: sliderStyle
  }), /*#__PURE__*/React__default.createElement(StyledSliderInput, {
    value: finetuneProps.warmth ?? DEFAULT_VALUE.warmth,
    onChange: ({
      target: {
        value
      }
    }) => changeValue(value)
  })));
};
WarmthOptions.propTypes = {
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const StyledCarouselWrapper = styled.div`
  max-width: 680px;
  min-width: 150px;
  position: relative;
  overflow: hidden;
  touch-action: pan-y pinch-zoom;
`;
const StyledCarousel = styled.ul`
  padding: 0;
  margin: 0;
  white-space: nowrap;
  overflow: hidden;
`;
const StyledCarouselItem = styled.li`
  padding: 4px;
  display: inline-block;
  list-style-type: none;
  user-select: none;
  font-family: 'Open Sans', sans-serif;
  letter-spacing: 0.04rem;
  font-size: 11px;
`;
const arrowsCommonStyles = css`
  position: absolute;
  top: 0;
  height: 100%;
  width: 60px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1;

  svg {
    color: ${({
  theme: {
    palette
  }
}) => palette[Color.IconsSecondary]};
  }
`;
const StyledPrevArrowWrapper = styled.div`
  ${arrowsCommonStyles}
  left: 0;
  justify-content: flex-start;
  background: linear-gradient(
    90deg,
    #ffffff 1.56%,
    rgba(255, 255, 255, 0.89) 52.4%,
    rgba(255, 255, 255, 0.532165) 76.04%,
    rgba(255, 255, 255, 0) 100%
  );
`;
const StyledNextArrowWrapper = styled.div`
  ${arrowsCommonStyles}
  right: 0;
  justify-content: flex-end;
  background: linear-gradient(
    270deg,
    #ffffff 1.56%,
    rgba(255, 255, 255, 0.89) 52.4%,
    rgba(255, 255, 255, 0.532165) 76.04%,
    rgba(255, 255, 255, 0) 100%
  );
`;

/** External Dependencies */
const Carousel = ({
  children,
  style,
  className
}) => {
  const scrollingByDraggingLatestX = useRef(false);
  const carouselRef = useRef();
  const [observeResize] = useResizeObserver();
  const [isPrevArrowShown, setIsPrevArrowShown] = useState(false);
  const [isNextArrowShown, setIsNextArrowShown] = useState(false);
  const childrenArray = Children.toArray(children);
  const updateArrowsVisibility = () => {
    if (carouselRef.current) {
      const {
        scrollWidth,
        offsetWidth,
        scrollLeft
      } = carouselRef.current;
      const scrollableWidth = Math.round(scrollWidth - offsetWidth);
      const scrollRight = Math.round(scrollableWidth - scrollLeft);
      setIsPrevArrowShown(scrollLeft > 0);
      setIsNextArrowShown(scrollRight > 0);
    }
  };
  const scrollCarouselToElement = (foundElements, direction) => {
    const liIndex = foundElements.findIndex(element => element.classList.contains('FIE_carousel-item'));
    if (liIndex !== -1) {
      foundElements[liIndex].scrollIntoView({
        inline: direction,
        behavior: 'smooth',
        block: 'nearest'
      });
      // setTimeout cuz we're not sure when the smooth scroll will be finished, we're waiting for 0.5s to start checking.
      setTimeout(() => {
        updateArrowsVisibility();
      }, 500);
    }
  };
  const scrollToPrev = e => {
    const {
      topOffset,
      leftOffset
    } = getScrollOffset();
    const currentElements = document.elementsFromPoint(e.pageX + e.currentTarget.offsetWidth - leftOffset, e.pageY - topOffset);
    scrollCarouselToElement(currentElements, 'end');
  };
  const scrollToNext = e => {
    const {
      topOffset,
      leftOffset
    } = getScrollOffset();
    const currentElements = document.elementsFromPoint(e.pageX - e.currentTarget.offsetWidth - leftOffset, e.pageY - topOffset);
    scrollCarouselToElement(currentElements, 'start');
  };
  const scrollByDragging = e => {
    if (scrollingByDraggingLatestX.current) {
      const currentX = (e.touches?.[0] || e).pageX;
      carouselRef.current.scrollBy(scrollingByDraggingLatestX.current - currentX, 0);
      scrollingByDraggingLatestX.current = currentX;
      debounce$1(updateArrowsVisibility, 30)();
    }
  };
  const stopScrollByDragging = () => {
    scrollingByDraggingLatestX.current = null;
    document.removeEventListener('mousemove', scrollByDragging);
    document.removeEventListener('mouseup', stopScrollByDragging);
    document.removeEventListener('touchmove', scrollByDragging);
    document.removeEventListener('touchcancel', stopScrollByDragging);
    document.removeEventListener('touchend', stopScrollByDragging);
  };
  const startScrollByDragging = e => {
    scrollingByDraggingLatestX.current = (e.touches?.[0] || e).pageX;
    document.addEventListener('mousemove', scrollByDragging);
    document.addEventListener('mouseup', stopScrollByDragging);
    document.addEventListener('touchmove', scrollByDragging);
    document.addEventListener('touchcancel', stopScrollByDragging);
    document.addEventListener('touchend', stopScrollByDragging);
  };
  useEffect(() => {
    if (carouselRef.current) {
      observeResize(carouselRef.current, updateArrowsVisibility);
    }
  }, []);
  return /*#__PURE__*/React__default.createElement(StyledCarouselWrapper, {
    className: `${className}-wrapper`,
    style: style,
    onMouseDown: startScrollByDragging,
    onTouchStart: startScrollByDragging
  }, isPrevArrowShown && /*#__PURE__*/React__default.createElement(StyledPrevArrowWrapper, {
    className: "FIE_carousel-prev-button",
    onClick: scrollToPrev
  }, /*#__PURE__*/React__default.createElement(ArrowLeftOutline, null)), /*#__PURE__*/React__default.createElement(StyledCarousel, {
    className: `${className}-items`,
    ref: carouselRef
  }, childrenArray.map(child => /*#__PURE__*/React__default.createElement(StyledCarouselItem, {
    className: `${className}-item-wrapper FIE_carousel-item`,
    key: child.key
  }, child))), isNextArrowShown && /*#__PURE__*/React__default.createElement(StyledNextArrowWrapper, {
    className: "FIE_carousel-next-button",
    onClick: scrollToNext
  }, /*#__PURE__*/React__default.createElement(ArrowRightOutline, null)));
};
Carousel.defaultProps = {
  style: null
};
Carousel.propTypes = {
  children: PropTypes.node.isRequired,
  className: PropTypes.string.isRequired,
  style: PropTypes.instanceOf(Object)
};

/** External Dependencies */
const StyledFilterItem = styled.div`
  display: inline-flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 0px 2px;
  gap: 6px;
  cursor: pointer;
  border-radius: 8px;
  color: black;
  canvas {
    border-radius: 10px;
  }
`;
const FilterItemPreview = styled(Stage)`
  [aria-selected="true"] & {
    padding: 2px;
    color: #e35628;
    border: 1px solid black;
    border-radius: 10px;
  }
`;
const FilterItemLabel = styled(Label$6)(({
  theme
}) => css`
    color: black;
    font-size: 0.6875em;
    line-height: 14px;
    font-family: "Open Sans", sans-serif;
    ${theme.typography.font[FontVariant.LabelExtraSmallUp]};

    [aria-selected="true"] & {
      color: black;
    }
  `);

/** External Dependencies */
const MAX_FILTER_PREVIEW_WIDTH = 60;
const MAX_FILTER_PREVIEW_HEIGHT = 45;
const FilterItem = ({
  filterLabel,
  filterFn,
  applyFilter,
  isActive,
  image
}) => {
  const imageNodeRef = useRef();
  const handleFilterApplying = useCallback(() => {
    applyFilter(filterFn);
  }, [filterFn]);
  const cacheImageNode = useCallback(() => {
    if (imageNodeRef.current) {
      imageNodeRef.current.cache();
    } else {
      setTimeout(cacheImageNode, 0);
    }
  }, []);
  useEffect(() => {
    if (image) {
      cacheImageNode();
    }
    return () => {
      imageNodeRef.current?.clearCache();
    };
  }, [image]);
  const imgRatio = image.width / image.height;
  const isVerticalImg = imgRatio < 1;
  const filterImgPreviewWidth = isVerticalImg ? MAX_FILTER_PREVIEW_WIDTH : MAX_FILTER_PREVIEW_HEIGHT * imgRatio;
  const filterImgPreviewHeight = isVerticalImg ? MAX_FILTER_PREVIEW_WIDTH / imgRatio : MAX_FILTER_PREVIEW_HEIGHT;
  return /*#__PURE__*/React__default.createElement(StyledFilterItem, {
    className: "FIE_filters-item",
    onClick: handleFilterApplying,
    "aria-selected": isActive
  }, /*#__PURE__*/React__default.createElement(FilterItemPreview, {
    className: "FIE_filters-item-preview",
    width: MAX_FILTER_PREVIEW_WIDTH,
    height: MAX_FILTER_PREVIEW_HEIGHT
  }, /*#__PURE__*/React__default.createElement(Layer, {
    onTap: handleFilterApplying
  }, /*#__PURE__*/React__default.createElement(Image$1, {
    image: image,
    filters: filterFn ? [filterFn] : [],
    width: filterImgPreviewWidth,
    height: filterImgPreviewHeight,
    x: -(filterImgPreviewWidth - MAX_FILTER_PREVIEW_WIDTH) / 2,
    y: -(filterImgPreviewHeight - MAX_FILTER_PREVIEW_HEIGHT) / 2,
    ref: imageNodeRef
  }))), /*#__PURE__*/React__default.createElement(FilterItemLabel, {
    className: "FIE_filters-item-label"
  }, filterLabel));
};
FilterItem.defaultProps = {
  filterFn: undefined
};
FilterItem.propTypes = {
  image: PropTypes.instanceOf(HTMLImageElement).isRequired,
  filterLabel: PropTypes.string.isRequired,
  filterFn: PropTypes.func,
  applyFilter: PropTypes.func.isRequired,
  isActive: PropTypes.bool.isRequired
};
var FilterItem$1 = /*#__PURE__*/memo(FilterItem);

/** External Dependencies */
const konvaFilters = Konva$2.Filters;
const AVAILABLE_FILTERS = [{
  label: 'Original',
  filterFn: null
}, {
  label: 'Invert',
  filterFn: konvaFilters.Invert
}, {
  label: 'Black & White',
  filterFn: BlackAndWhite
}, {
  label: 'Sepia',
  filterFn: konvaFilters.Sepia
}, {
  label: 'Solarize',
  filterFn: konvaFilters.Solarize
}, {
  label: 'Clarendon',
  filterFn: Clarendon
}, {
  label: 'Gingham',
  filterFn: Gingham
}, {
  label: 'Moon',
  filterFn: Moon
}, {
  label: 'Lark',
  filterFn: Lark
}, {
  label: 'Reyes',
  filterFn: Reyes
}, {
  label: 'Juno',
  filterFn: Juno
}, {
  label: 'Slumber',
  filterFn: Slumber
}, {
  label: 'Crema',
  filterFn: Crema
}, {
  label: 'Ludwig',
  filterFn: Ludwig
}, {
  label: 'Aden',
  filterFn: Aden
}, {
  label: 'Perpetua',
  filterFn: Perpetua
}, {
  label: 'Amaro',
  filterFn: Amaro
}, {
  label: 'Mayfair',
  filterFn: Mayfair
}, {
  label: 'Rise',
  filterFn: Rise
}, {
  label: 'Hudson',
  filterFn: Hudson
}, {
  label: 'Valencia',
  filterFn: Valencia
}, {
  label: 'X-Pro II',
  filterFn: XPro2
}, {
  label: 'Sierra',
  filterFn: Sierra
}, {
  label: 'Willow',
  filterFn: Willow
}, {
  label: 'Lo-Fi',
  filterFn: LoFi
}, {
  label: 'Inkwell',
  filterFn: konvaFilters.Grayscale
}, {
  label: 'Hefe',
  filterFn: Hefe
}, {
  label: 'Nashville',
  filterFn: Nashville
}, {
  label: 'Stinson',
  filterFn: Stinson
}, {
  label: 'Vesper',
  filterFn: Vesper
}, {
  label: 'Earlybird',
  filterFn: Earlybird
}, {
  label: 'Brannan',
  filterFn: Brannan
}, {
  label: 'Sutro',
  filterFn: Sutro
}, {
  label: 'Toaster',
  filterFn: Toaster
}, {
  label: 'Walden',
  filterFn: Walden
}, {
  label: '1977',
  filterFn: NinteenSeventySeven
}, {
  label: 'Kelvin',
  filterFn: Kelvin
}, {
  label: 'Maven',
  filterFn: Maven
}, {
  label: 'Ginza',
  filterFn: Ginza
}, {
  label: 'Skyline',
  filterFn: Skyline
}, {
  label: 'Dogpatch',
  filterFn: Dogpatch
}, {
  label: 'Brooklyn',
  filterFn: Brooklyn
}, {
  label: 'Helena',
  filterFn: Helena
}, {
  label: 'Ashby',
  filterFn: Ashby
}, {
  label: 'Charmes',
  filterFn: Charmes
}];

/** External Dependencies */
const style$1 = {
  maxWidth: '100%',
  width: '100%'
};
const Filters = () => {
  const {
    originalImage
  } = useStore();
  const [appliedFilter, applyFilter] = useFilter();
  return /*#__PURE__*/React__default.createElement(Carousel, {
    className: "FIE_filters",
    style: style$1
  }, AVAILABLE_FILTERS.map(filter => /*#__PURE__*/React__default.createElement(FilterItem$1, {
    key: filter.label,
    filterLabel: filter.label,
    filterFn: filter.filterFn,
    applyFilter: applyFilter,
    isActive: appliedFilter === filter.filterFn,
    image: originalImage
  })));
};

/** External Dependencies */
const TextButton = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React__default.createElement(ToolsBarItemButton$1, {
  className: "FIE_text-tool-button",
  id: TOOLS_IDS.TEXT,
  label: t('textTool'),
  Icon: Text,
  onClick: selectTool,
  isSelected: isSelected
});
TextButton.defaultProps = {
  isSelected: false
};
TextButton.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const StyledOptions = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 8px 16px;
  margin-top: 4px;
  gap: 8px;
  flex-wrap: wrap;

  ${({
  isPhoneScreen
}) => isPhoneScreen && `
    max-width: 315px;
    padding: 0;
  `}

  svg {
    color: ${({
  theme: {
    palette
  }
}) => palette[Color.IconsPrimary]};
  }
`;
const StyledOptionsWrapper = styled.div`
  display: flex;
  flex-wrap: wrap;
  margin-left: -4px;
  gap: 4px;

  .FIE_annotation-option-triggerer {
    padding: 6px;
  }
`;
const StyledOptionPopupContent = styled.div`
  background: ${({
  theme
}) => theme.palette['bg-secondary']};
  border-radius: 4px;
  display: flex;
  flex-direction: column;
  padding: 8px 12px;
  overflow: visible;

  ${({
  position
}) => position && `
    display: grid;
    grid-template-columns: repeat(4, auto);
    padding: 0;
    margin-top: 8px;
    box-shadow: 0px 1px 2px ${({
  theme
}) => theme.palette['light-shadow']};
    `}

  ${({
  disablePadding
}) => disablePadding && `
      padding: 0;
    `}

  * {
  color: black;
  font-size: 11px;
   line-height: 14px;
  font-family: 'Open Sans', sans-serif;
  letter-spacing: 0.04rem;
  }
`;
const StyledSpacedOptionFields = styled.div`
  display: flex;
  align-items: center;
  gap: 12px;

  ${({
  preventFlex
}) => preventFlex && `
      display: block;

      label {
        margin-bottom: 8px;
      }
  `}
`;
const StyledTwoColumnsContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;
const StyledColumn = styled.div`
  &:not(:first-child) {
    margin-left: 12px;
  }
`;
const StyledIconWrapper = styled.div(({
  theme,
  addThinBorder,
  secondaryIconColor,
  active,
  watermarkTool
}) => `
    cursor: pointer;
    padding: ${watermarkTool ? '6px' : '8px 12px'};
    border-radius: 2px;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 6px;

    svg {
      vertical-align: middle;
      margin: 0 auto;
      color: black;
    }

    ${addThinBorder ? `border: 0.5px solid ${theme.palette['borders-secondary']};
        padding: 8px 8px;` : ''};
    color: black;

    ${active && `
      border-radius: 8px;
      border-color: #c9c9c9;
      background-color: #dedede;

        * {
          color: black;
        }
      `}

    :hover {
      background: #dedede;
    }
  `);
const StyledIconLabel = styled(Label$6)`
  color: black;
`;

/** External Dependencies */
const MIN_PERCENTANGE$1 = 0;
const MAX_PERCENTANGE$1 = 1;
const OpacityField = ({
  annotation,
  updateAnnotation,
  t
}) => {
  const {
    opacity
  } = annotation;
  const opacityValue = Math.round(opacity * 100);
  const changeOpacity = newOpactiy => {
    updateAnnotation({
      opacity: restrictNumber(newOpactiy / 100, MIN_PERCENTANGE$1, MAX_PERCENTANGE$1)
    });
  };
  return /*#__PURE__*/React__default.createElement(StyledOptionPopupContent, {
    disablePadding: true
  }, /*#__PURE__*/React__default.createElement(Label$6, null, t('transparency')), /*#__PURE__*/React__default.createElement(StyledSpacedOptionFields, null, /*#__PURE__*/React__default.createElement(Slider, {
    annotation: "%",
    onChange: changeOpacity,
    value: opacityValue,
    noMargin: true
  }), /*#__PURE__*/React__default.createElement(StyledIconLabel, null, `${opacityValue}%`)));
};
OpacityField.propTypes = {
  annotation: PropTypes.instanceOf(Object).isRequired,
  t: PropTypes.func.isRequired,
  updateAnnotation: PropTypes.func.isRequired
};

const ColorPickerModal$1 = styled(Modal$2)`
  max-width: 350px;
`;
const ColorPickerWrap = styled.div`
  .SfxColorPicker-root {
    max-width: 100%;
    padding: 0;
    box-shadow: none;
    border: none;
    ${({
  hideModalTitle
}) => hideModalTitle && "padding-top: 12px;"}
  }

  .SfxColorPicker-action {
    display: flex;
    gap: 12px;

    .SfxColorPicker-select {
      width: 90px;
    }
    .SfxInput-root {
      width: 190px !important;
    }
  }

  .SfxColorPicker-icon {
    color: black;
    padding-right: 10px;
  }

  .SfxColorPicker-range-picker,
  .SfxColorPicker-bar-wrapper {
    width: 100%;
  }
`;
const ModalActions = styled(ModalActions$2)`
  gap: 12px;
  padding: 24px;

  .SfxButton-root {
    flex: 1;
    margin: 0;
    height: 30px;
    color: black;
    border-radius: 50px;
    background-color: white;
    border: 1px solid #c9c9c9;
    line-height: 14px;
    font-family: "Open Sans", sans-serif;
    letter-spacing: 0.04rem;

    & > span > span {
      font-size: 0.75rem;
    }

    &:hover {
      background-color: #dedede;
    }
  }
`;
const Styled = {
  ColorPickerModal: ColorPickerModal$1,
  ColorPickerWrap,
  ModalActions
};

const modalStyles = {
  zIndex: 1301
};
const ColorPickerModal = ({
  hideModalTitle,
  defaultColor = '',
  onChange,
  open,
  pinnedColors,
  onClose,
  onApply
}) => {
  const {
    t
  } = useStore();
  if (!open) {
    return null;
  }
  return /*#__PURE__*/React__default.createElement(Styled.ColorPickerModal, {
    onClose: onClose,
    open: open,
    fullWidth: true,
    modalStyles: modalStyles
  }, !hideModalTitle && /*#__PURE__*/React__default.createElement(modalTitle, {
    onClose: onClose,
    primary: t('colorPickerModalTitleLabel', 'Pick color'),
    icon: /*#__PURE__*/React__default.createElement(ColorPickerIcon$1, {
      size: 29
    }),
    iconShadow: true,
    variant: "with-icon"
  }), /*#__PURE__*/React__default.createElement(ModalContent$1, null, /*#__PURE__*/React__default.createElement(Styled.ColorPickerWrap, {
    hideModalTitle: hideModalTitle
  }, /*#__PURE__*/React__default.createElement(ColorPicker$1, {
    onChange: onChange,
    pinnedColors: pinnedColors,
    defaultColor: defaultColor,
    showTransparentColor: true
  }))), /*#__PURE__*/React__default.createElement(Styled.ModalActions, null, /*#__PURE__*/React__default.createElement(Button$1, {
    onClick: onClose,
    style: {
      fontSize: "11px"
    }
  }, t('cancel')), /*#__PURE__*/React__default.createElement(Button$1, {
    onClick: onApply
  }, t('apply'))));
};
ColorPickerModal.defaultProps = {
  defaultColor: '',
  pinnedColors: [],
  onChange: () => {},
  open: false,
  hideModalTitle: false,
  onClose: () => {},
  onApply: () => {}
};
ColorPickerModal.propTypes = {
  defaultColor: PropTypes.string,
  onChange: PropTypes.func,
  open: PropTypes.bool,
  hideModalTitle: PropTypes.bool,
  pinnedColors: PropTypes.arrayOf(PropTypes.string),
  onClose: PropTypes.func,
  onApply: PropTypes.func
};

/** External Dependencies */
const StyledPickerTrigger = styled.div.attrs(({
  $color
}) => ({
  style: {
    background: $color === 'rgba(0,0,0,0)' ? 'repeating-conic-gradient(#5d6d7e 0% 25%, transparent 0% 50%) 50% / 8px 8px' : $color
  }
}))`
  background: ${({
  theme
}) => theme.palette['icons-primary']};
  width: 32px;
  height: 32px;
  border: 1px solid ${({
  theme
}) => theme.palette[Color.BorderPrimaryStateless]};
  cursor: pointer;
  box-sizing: border-box;
  border-radius: 50px;
`;

/** External Dependencies */
const pinnedColorsKey = 'FIE_pinnedColors';

// colorFor is used to save the latest color for a specific purpose (e.g. fill/shadow/stroke)
const ColorInput = ({
  onChange,
  color,
  colorFor
}) => {
  const {
    selectionsIds = [],
    config: {
      annotationsCommon = {}
    },
    dispatch,
    latestColors = {}
  } = useStore();
  const latestColor = latestColors[colorFor];
  const [anchorEl, setAnchorEl] = useState();
  const [currentColor, setCurrentColor] = useState(() => latestColor || color || annotationsCommon.fill);
  const [pinnedColors, setPinnedColors] = useState(window?.localStorage ? JSON.parse(localStorage.getItem(pinnedColorsKey) || '[]') : []);
  const initialColor = useRef(currentColor);
  const changePinnedColors = newPinnedColors => {
    if (!window?.localStorage) {
      return;
    }
    const localStoragePinnedColors = window.localStorage.getItem(pinnedColorsKey);
    if (JSON.stringify(newPinnedColors) !== localStoragePinnedColors) {
      const maxOfSavedColors = 9;
      const pinnedColorsToSave = newPinnedColors.slice(-maxOfSavedColors);
      window.localStorage.setItem(pinnedColorsKey, JSON.stringify(pinnedColorsToSave));
      setPinnedColors(pinnedColorsToSave);
    }
  };
  const changeColor = (_newColorHex, rgba, newPinnedColors) => {
    setCurrentColor(rgba);
    onChange(rgba);
    changePinnedColors(newPinnedColors);
    if (latestColor !== rgba) {
      dispatch({
        type: SET_LATEST_COLOR,
        payload: {
          latestColors: {
            [colorFor]: rgba
          }
        }
      });
    }
  };
  const togglePicker = e => {
    setAnchorEl(anchorEl ? null : e.currentTarget);
  };
  const closePicker = e => {
    onChange(initialColor.current || currentColor);
    togglePicker(e);
  };
  useEffect(() => {
    const colorToSet = selectionsIds.length === 0 && latestColor || color;
    setCurrentColor(colorToSet);
    onChange(colorToSet);
  }, [color, selectionsIds]);
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(StyledPickerTrigger, {
    className: "FIE_color-picker-triggerer",
    onClick: togglePicker,
    $color: currentColor,
    onChange: onChange
  }), /*#__PURE__*/React__default.createElement(ColorPickerModal, {
    hideModalTitle: true,
    onChange: changeColor,
    defaultColor: currentColor,
    pinnedColors: pinnedColors,
    open: Boolean(anchorEl),
    onClose: closePicker,
    onApply: togglePicker
  }));
};
ColorInput.defaultProps = {
  color: undefined
};
ColorInput.propTypes = {
  onChange: PropTypes.func.isRequired,
  colorFor: PropTypes.string.isRequired,
  color: PropTypes.string
};

/** External Dependencies */
const MIN_PERCENTANGE = 0;
const MAX_PERCENTANGE = 100;
const StrokeFields = ({
  annotation,
  updateAnnotation
}) => {
  const {
    stroke,
    strokeWidth
  } = annotation;
  const changeStrokeWidth = newStrokeWidth => {
    updateAnnotation({
      strokeWidth: restrictNumber(newStrokeWidth, MIN_PERCENTANGE, MAX_PERCENTANGE)
    });
  };
  const changeStrokeColor = newStrokeColor => {
    updateAnnotation({
      stroke: newStrokeColor
    });
  };
  return /*#__PURE__*/React__default.createElement(StyledSpacedOptionFields, null, /*#__PURE__*/React__default.createElement(Slider, {
    annotation: "px",
    onChange: changeStrokeWidth,
    value: strokeWidth,
    noMargin: true
  }), /*#__PURE__*/React__default.createElement(ColorInput, {
    color: stroke,
    onChange: changeStrokeColor,
    colorFor: "stroke"
  }));
};
StrokeFields.propTypes = {
  annotation: PropTypes.instanceOf(Object).isRequired,
  updateAnnotation: PropTypes.func.isRequired
};

/** External Dependencies */
const ShadowFields = ({
  annotation,
  updateAnnotation,
  t
}) => {
  const {
    shadowOffsetX,
    shadowOffsetY,
    shadowBlur,
    shadowColor,
    shadowOpacity
  } = annotation;
  const changeSliderValue = (property, newValue, min = 0, max = 100) => {
    updateAnnotation({
      [property]: restrictNumber(newValue, min, max)
    });
  };
  const changeShadowColor = newShadowColor => {
    updateAnnotation({
      shadowColor: newShadowColor
    });
  };
  return /*#__PURE__*/React__default.createElement(StyledSpacedOptionFields, {
    preventFlex: true
  }, /*#__PURE__*/React__default.createElement(Label$6, null, t('shadow')), /*#__PURE__*/React__default.createElement(StyledTwoColumnsContainer, null, /*#__PURE__*/React__default.createElement(StyledColumn, null, /*#__PURE__*/React__default.createElement(Label$6, null, t('horizontal')), /*#__PURE__*/React__default.createElement(Slider, {
    annotation: "px",
    min: -100,
    max: 100,
    onChange: val => changeSliderValue('shadowOffsetX', val, -100, 100),
    value: shadowOffsetX || 0,
    hideTrack: true
  })), /*#__PURE__*/React__default.createElement(StyledColumn, null, /*#__PURE__*/React__default.createElement(Label$6, null, t('vertical')), /*#__PURE__*/React__default.createElement(Slider, {
    annotation: "px",
    min: -100,
    max: 100,
    onChange: val => changeSliderValue('shadowOffsetY', val, -100, 100),
    value: shadowOffsetY || 0,
    hideTrack: true
  }))), /*#__PURE__*/React__default.createElement(StyledTwoColumnsContainer, null, /*#__PURE__*/React__default.createElement(StyledColumn, null, /*#__PURE__*/React__default.createElement(Label$6, null, t('blur')), /*#__PURE__*/React__default.createElement(Slider, {
    annotation: "%",
    onChange: val => changeSliderValue('shadowBlur', val),
    value: shadowBlur
  })), /*#__PURE__*/React__default.createElement(StyledColumn, null, /*#__PURE__*/React__default.createElement(Label$6, null, t('opacity')), /*#__PURE__*/React__default.createElement(Slider, {
    annotation: "%",
    onChange: val => changeSliderValue('shadowOpacity', val / 100, 0, 1),
    value: Math.round(shadowOpacity * 100)
  }))), /*#__PURE__*/React__default.createElement(ColorInput, {
    color: shadowColor,
    onChange: changeShadowColor,
    colorFor: "shadow"
  }));
};
ShadowFields.propTypes = {
  annotation: PropTypes.instanceOf(Object).isRequired,
  updateAnnotation: PropTypes.func.isRequired,
  t: PropTypes.func.isRequired
};

/** Internal Dependencies */
const mapPositionStringToPoint = (annotation, designLayer, position) => {
  const {
    width,
    height,
    scaleX = 1,
    scaleY = 1,
    rotation = 0,
    padding = 0,
    radius,
    radiusX,
    radiusY
  } = annotation;
  const annotationWidth = width || (radius || radiusX) * 2;
  const annotationHeight = height || (radius || radiusY) * 2;
  const scaledRotatedAnnotationSize = getSizeAfterRotation(annotationWidth * scaleX, annotationHeight * scaleY, rotation);
  const {
    clipWidth: designLayerWidth,
    clipHeight: designLayerHeight,
    clipX: designLayerX = 0,
    clipY: designLayerY = 0
  } = designLayer.attrs;
  const xAxisMapping = {
    left: designLayerX + scaledRotatedAnnotationSize.offsetLeft + padding,
    center: designLayerX + designLayerWidth / 2 - (scaledRotatedAnnotationSize.width / 2 - scaledRotatedAnnotationSize.offsetLeft) + padding,
    right: designLayerX + designLayerWidth - scaledRotatedAnnotationSize.width - padding + scaledRotatedAnnotationSize.offsetLeft
  };
  const yAxisMapping = {
    top: designLayerY + scaledRotatedAnnotationSize.offsetTop + padding,
    middle: designLayerY + designLayerHeight / 2 - (scaledRotatedAnnotationSize.height / 2 - scaledRotatedAnnotationSize.offsetTop) + padding,
    bottom: designLayerY + designLayerHeight - scaledRotatedAnnotationSize.height - padding + scaledRotatedAnnotationSize.offsetTop
  };
  const mapStringToPoint = {
    [POSITIONS.TOP_LEFT]: () => ({
      x: xAxisMapping.left,
      y: yAxisMapping.top
    }),
    [POSITIONS.TOP_CENTER]: () => ({
      x: xAxisMapping.center,
      y: yAxisMapping.top
    }),
    [POSITIONS.TOP_RIGHT]: () => ({
      x: xAxisMapping.right,
      y: yAxisMapping.top
    }),
    [POSITIONS.MIDDLE_LEFT]: () => ({
      x: xAxisMapping.left,
      y: yAxisMapping.middle
    }),
    [POSITIONS.MIDDLE_CENTER]: () => ({
      x: xAxisMapping.center,
      y: yAxisMapping.middle
    }),
    [POSITIONS.MIDDLE_RIGHT]: () => ({
      x: xAxisMapping.right,
      y: yAxisMapping.middle
    }),
    [POSITIONS.BOTTOM_LEFT]: () => ({
      x: xAxisMapping.left,
      y: yAxisMapping.bottom
    }),
    [POSITIONS.BOTTOM_CENTER]: () => ({
      x: xAxisMapping.center,
      y: yAxisMapping.bottom
    }),
    [POSITIONS.BOTTOM_RIGHT]: () => ({
      x: xAxisMapping.right,
      y: yAxisMapping.bottom
    })
  };
  return mapStringToPoint[position]();
};

/** Internal Dependencies */
const AVAILABLE_POSITIONS = Object.values(POSITIONS);
const posCssRotateDegFromRightSide = {
  [POSITIONS.TOP_LEFT]: -145,
  [POSITIONS.TOP_CENTER]: -90,
  [POSITIONS.TOP_RIGHT]: -45,
  [POSITIONS.MIDDLE_LEFT]: 180,
  [POSITIONS.MIDDLE_CENTER]: 0,
  [POSITIONS.MIDDLE_RIGHT]: 0,
  [POSITIONS.BOTTOM_LEFT]: 135,
  [POSITIONS.BOTTOM_CENTER]: 90,
  [POSITIONS.BOTTOM_RIGHT]: 45
};
const POPPABLE_OPTIONS = {
  OPACITY: 'opacity',
  STROKE: 'stroke',
  SHADOW: 'shadow',
  POSITION: 'position'
};

/** External Dependencies */
const PositionFields = ({
  annotation,
  updateAnnotation
}) => {
  const [position, setPosition] = useState(null);
  const {
    designLayer
  } = useStore();
  const changePosition = newPositionStr => {
    updateAnnotation(mapPositionStringToPoint(annotation, designLayer, newPositionStr));
    setPosition(newPositionStr);
  };
  const positionsLength = AVAILABLE_POSITIONS.length;
  return AVAILABLE_POSITIONS.map((pos, i) => /*#__PURE__*/React__default.createElement(Fragment, {
    key: pos
  }, /*#__PURE__*/React__default.createElement(StyledIconWrapper, {
    onClick: () => changePosition(pos),
    active: position === pos,
    secondaryIconColor: true,
    addThinBorder: true
  }, pos === POSITIONS.MIDDLE_CENTER ? /*#__PURE__*/React__default.createElement(Point, null) : /*#__PURE__*/React__default.createElement(ArrowRight, {
    style: {
      transform: `rotate(${posCssRotateDegFromRightSide[pos]}deg)`
    }
  })), (i + 1) % 3 === 0 && i + 1 !== positionsLength && /*#__PURE__*/React__default.createElement("div", null)));
};
PositionFields.propTypes = {
  annotation: PropTypes.instanceOf(Object).isRequired,
  updateAnnotation: PropTypes.func.isRequired
};

const AnnotationOptions = ({
  children,
  morePoppableOptionsPrepended,
  moreOptionsPopupComponentsObj,
  morePoppableOptionsAppended,
  annotation,
  updateAnnotation,
  hideFillOption,
  hidePositionField,
  className,
  ...rest
}) => {
  const [anchorEl, setAnchorEl] = useState(null);
  const [currentOption, setCurrentOption] = useState(null);
  const {
    config: {
      useCloudimage
    },
    t
  } = useStore();
  const isPhoneScreen = usePhoneScreen(320);
  const options = useMemo(() => [...morePoppableOptionsPrepended, {
    titleKey: 'opacity',
    name: POPPABLE_OPTIONS.OPACITY,
    Icon: Transparency$1
  }, ...(!useCloudimage ? [{
    titleKey: 'stroke',
    name: POPPABLE_OPTIONS.STROKE,
    Icon: Stroke$1
  }, {
    titleKey: 'shadow',
    name: POPPABLE_OPTIONS.SHADOW,
    Icon: Shadow$1
  }] : []), !hidePositionField ? {
    titleKey: 'position',
    name: POPPABLE_OPTIONS.POSITION,
    Icon: Position$1
  } : undefined], [morePoppableOptionsPrepended]);
  const optionsPopups = useMemo(() => ({
    ...moreOptionsPopupComponentsObj,
    [POPPABLE_OPTIONS.OPACITY]: OpacityField,
    [POPPABLE_OPTIONS.STROKE]: StrokeFields,
    [POPPABLE_OPTIONS.SHADOW]: ShadowFields,
    [POPPABLE_OPTIONS.POSITION]: PositionFields,
    ...morePoppableOptionsAppended
  }), [moreOptionsPopupComponentsObj]);
  const toggleOptionPopup = useCallback((e, targetOptionName) => {
    const targetAnchorEl = e?.currentTarget;
    setAnchorEl(targetAnchorEl);
    setCurrentOption(targetOptionName);
  }, []);
  const changeAnnotationFill = useCallback(newFill => {
    updateAnnotation({
      fill: newFill
    });
  }, [updateAnnotation]);
  const OptionPopupComponent = anchorEl && currentOption && optionsPopups[currentOption];
  const renderPositionFields = () => /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Label$6, null, t('position')), /*#__PURE__*/React__default.createElement(StyledOptionPopupContent, {
    position: true
  }, /*#__PURE__*/React__default.createElement(OptionPopupComponent, _extends$1({
    annotation: annotation,
    updateAnnotation: updateAnnotation
  }, rest))));
  return /*#__PURE__*/React__default.createElement(StyledOptions, {
    className: `FIE_annotations-options${className ? ` ${className}` : ''}`,
    isPhoneScreen: isPhoneScreen
  }, !hideFillOption && /*#__PURE__*/React__default.createElement(ColorInput, {
    color: annotation.fill,
    onChange: changeAnnotationFill,
    colorFor: "fill"
  }), children, /*#__PURE__*/React__default.createElement(StyledOptionsWrapper, null, options.map(option => option && /*#__PURE__*/React__default.createElement(StyledIconWrapper, {
    className: "FIE_annotation-option-triggerer",
    key: option.name,
    title: t(option.titleKey),
    onClick: e => toggleOptionPopup(e, option.name),
    active: currentOption === option.name
  }, /*#__PURE__*/React__default.createElement(option.Icon, {
    size: 20
  })))), OptionPopupComponent && /*#__PURE__*/React__default.createElement(Menu$2, {
    className: "FIE_annotation-option-popup",
    anchorEl: anchorEl,
    open: Boolean(anchorEl),
    onClose: toggleOptionPopup,
    position: "top"
  }, /*#__PURE__*/React__default.createElement(StyledOptionPopupContent, null, currentOption === POPPABLE_OPTIONS.POSITION ? renderPositionFields() : /*#__PURE__*/React__default.createElement(OptionPopupComponent, _extends$1({
    annotation: annotation,
    updateAnnotation: updateAnnotation
  }, rest)))));
};
AnnotationOptions.defaultProps = {
  children: undefined,
  morePoppableOptionsPrepended: [],
  moreOptionsPopupComponentsObj: {},
  morePoppableOptionsAppended: [],
  hideFillOption: false,
  hidePositionField: false,
  className: undefined
};
AnnotationOptions.propTypes = {
  annotation: PropTypes.instanceOf(Object).isRequired,
  updateAnnotation: PropTypes.func.isRequired,
  children: PropTypes.node,
  hideFillOption: PropTypes.bool,
  morePoppableOptionsPrepended: PropTypes.arrayOf(PropTypes.instanceOf(Object)),
  morePoppableOptionsAppended: PropTypes.arrayOf(PropTypes.instanceOf(Object)),
  moreOptionsPopupComponentsObj: PropTypes.instanceOf(Object),
  hidePositionField: PropTypes.bool,
  className: PropTypes.string
};

/** External Dependencies */
const StyledFontFamilySelect = styled(Select$2)`
  width: 160px;
  border: 1px solid #a8a8a8;
  border-radius: 50px;
  font-size: 11px;
`;
const StyledFontSizeInput = styled(Input$2)`
  width: 72px;
  border: 1px solid #a8a8a8;
  border-radius: 50px;
 input {
    font-size: 11px !important;
  }
`;
const StyledToolsWrapper = styled.div`
  display: flex;
`;

/** External Dependencies */
const MIN_VALUE$2 = 0;
const MAX_VALUE$2 = 100;
const SLIDER_STEP = 1;
const TextSpacingsFields = ({
  annotation: text,
  updateAnnotation: updateText,
  t
}) => {
  const {
    letterSpacing,
    lineHeight
  } = text;
  const updateValue = (prop, val) => {
    updateText({
      [prop]: restrictNumber(val, MIN_VALUE$2, MAX_VALUE$2)
    });
  };
  return /*#__PURE__*/React__default.createElement(StyledSpacedOptionFields, {
    preventFlex: true
  }, /*#__PURE__*/React__default.createElement(Label$6, null, t('letterSpacing')), /*#__PURE__*/React__default.createElement(Slider, {
    annotation: "px",
    isActive: Boolean(letterSpacing),
    onChange: val => updateValue('letterSpacing', val),
    value: letterSpacing,
    step: SLIDER_STEP
  }), /*#__PURE__*/React__default.createElement(Label$6, null, t('lineHeight')), /*#__PURE__*/React__default.createElement(Slider, {
    annotation: "px",
    isActive: Boolean(lineHeight),
    onChange: val => updateValue('lineHeight', val),
    value: lineHeight,
    step: SLIDER_STEP
  }));
};
TextSpacingsFields.propTypes = {
  annotation: PropTypes.instanceOf(Object).isRequired,
  updateAnnotation: PropTypes.func.isRequired,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const rightAlignmentCssTransform = {
  transform: 'scaleX(-1)'
};
const TextAlignmentFields = ({
  annotation: text,
  updateAnnotation: updateText
}) => {
  const {
    align
  } = text;
  const changeHorizontalAlignment = newHorizonalAlignment => {
    updateText({
      align: newHorizonalAlignment
    });
  };
  return /*#__PURE__*/React__default.createElement(StyledSpacedOptionFields, null, /*#__PURE__*/React__default.createElement(StyledIconWrapper, {
    onClick: () => changeHorizontalAlignment('left'),
    active: align === 'left'
  }, /*#__PURE__*/React__default.createElement(TextAlignLeft, null)), /*#__PURE__*/React__default.createElement(StyledIconWrapper, {
    onClick: () => changeHorizontalAlignment('center'),
    active: align === 'center'
  }, /*#__PURE__*/React__default.createElement(TextAlignCenter, null)), /*#__PURE__*/React__default.createElement(StyledIconWrapper, {
    onClick: () => changeHorizontalAlignment('right'),
    active: align === 'right'
  }, /*#__PURE__*/React__default.createElement(TextAlignLeft, {
    style: rightAlignmentCssTransform
  })));
};
TextAlignmentFields.propTypes = {
  annotation: PropTypes.instanceOf(Object).isRequired,
  updateAnnotation: PropTypes.func.isRequired
};

/** External Dependencies */
const TEXT_ALIGNMENT = 'text-alignment';
const TEXT_SPACINGS = 'text-spacings';
const TEXT_POPPABLE_OPTIONS = [{
  titleKey: 'textAlignment',
  name: TEXT_ALIGNMENT,
  Icon: TextAlignCenter
}, {
  titleKey: 'textSpacings',
  name: TEXT_SPACINGS,
  Icon: Spacing$1
}];
const textOptionsPopupComponents = {
  [TEXT_ALIGNMENT]: TextAlignmentFields,
  [TEXT_SPACINGS]: TextSpacingsFields
};

let textarea;
let textNode;
let transformer;
let editFinishCallback;
let disableTextEditCallback;
const handleOutsideClick = e => {
  if (e.target !== textarea) {
    const textValue = textarea.value;
    // eslint-disable-next-line no-use-before-define
    deactivateTextChange();
    editFinishCallback(textValue);
  }
};
const deactivateTextChange = () => {
  if (textarea) {
    textarea.remove(textarea);
  }
  if (window) {
    window.removeEventListener('click', handleOutsideClick);
  }
  if (textNode) {
    textNode.show();
  }
  if (transformer) {
    transformer.show();
    /**
     * Disabled because of bug (#322)
     */
    // transformer.forceUpdate();
  }
  if (typeof disableTextEditCallback === 'function') {
    disableTextEditCallback();
  }
  textNode = null;
  textarea = null;
  transformer = null;
};
const activateTextChange = (textNodeId, canvasStage, currentTransformer, finishingCallback, dismissingTextEditing) => {
  editFinishCallback = finishingCallback;
  disableTextEditCallback = dismissingTextEditing;
  transformer = currentTransformer;
  textNode = canvasStage.findOne(`#${textNodeId}`);
  // hide text node and transformer:
  textNode.hide();
  transformer.hide();

  // at first lets find position of text node relative to the stage:
  const textPosition = textNode.absolutePosition();

  // create textarea and style it
  textarea = document.createElement('textarea');
  canvasStage.container().parentNode.appendChild(textarea);

  // apply many styles to match text on canvas as close as possible
  // remember that text rendering on canvas and on the textarea can be different
  // and sometimes it is hard to make it 100% the same. But we will try...
  textarea.value = textNode.text();
  textarea.style.position = 'absolute';
  textarea.style.top = `${textPosition.y}px`;
  textarea.style.left = `${textPosition.x}px`;
  textarea.style.width = `${textNode.width() - textNode.padding() * 2}px`;
  textarea.style.height = `${textNode.height() - textNode.padding() * 2 + 5}px`;
  textarea.style.maxWidth = `${textNode.width() - textNode.padding() * 2}px`;
  textarea.style.maxHeight = `${textNode.height() - textNode.padding() * 2 + 5}px`;
  textarea.style.fontSize = `${textNode.fontSize()}px`;
  textarea.style.border = '1px solid rgba(0, 0, 0, 0.5)';
  textarea.style.padding = '0px';
  textarea.style.margin = '0px';
  textarea.style.overflow = 'hidden';
  textarea.style.background = 'none';
  textarea.style.outline = 'none';
  textarea.style.resize = 'none';
  textarea.style.lineHeight = textNode.lineHeight();
  textarea.style.fontFamily = textNode.fontFamily();
  textarea.style.transformOrigin = 'left top';
  textarea.style.textAlign = textNode.align();
  textarea.style.fontStyle = textNode.fontStyle();
  textarea.style.letterSpacing = textNode.letterSpacing();
  textarea.style.lineHeight = textNode.lineHeight();
  textarea.style.color = textNode.fill();
  const rotation = textNode.rotation();
  let transform = '';
  if (rotation) {
    transform += `rotateZ(${rotation}deg)`;
  }
  let firefoxMovePx = 0;
  // also we need to slightly move textarea on firefox
  // because it jumps a bit
  const isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
  if (isFirefox) {
    firefoxMovePx += 2 + Math.round(textNode.fontSize() / 20);
  }
  transform += `translateY(-${firefoxMovePx}px)`;
  textarea.style.transform = transform;

  // reset height
  textarea.style.height = 'auto';
  // after browsers resized it we can set actual value
  textarea.style.height = `${textarea.scrollHeight + 3}px`;
  textarea.focus();
  function setTextareaWidth(newTextWidth) {
    let newWidth = newTextWidth;
    if (!newWidth) {
      // set width for placeholder
      newWidth = textNode.placeholder.length * textNode.fontSize();
    }
    // some extra fixes on different browsers
    const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    if (isSafari || isFirefox) {
      newWidth = Math.ceil(newWidth);
    }
    const isEdge = document.documentMode || /Edge/.test(navigator.userAgent);
    if (isEdge) {
      newWidth += 1;
    }
    textarea.style.width = `${newWidth}px`;
  }
  textarea.addEventListener('keydown', event => {
    // hide on enter
    // but don't hide on shift + enter
    if (event.key === 'Enter' && !event.shiftKey) {
      const textContent = textarea.value;
      deactivateTextChange();
      editFinishCallback(textContent);
    }
    // on esc do not set value back to node
    if (event.key === 'Escape') {
      deactivateTextChange();
    }
  });
  textarea.addEventListener('keydown', event => {
    if (event.key === 'Enter' || event.key === 'Escape') {
      return;
    }
    const scale = textNode.getAbsoluteScale().x;
    setTextareaWidth(textNode.width() * scale);
    textarea.style.height = 'auto';
    textarea.style.height = `${textarea.scrollHeight + textNode.fontSize()}px`;
  });
  if (window) {
    setTimeout(() => {
      window.addEventListener('click', handleOutsideClick);
    });
  }
};

/** External Dependencies */
const TextControls = ({
  text,
  saveText,
  children
}) => {
  const {
    dispatch,
    textIdOfEditableContent,
    designLayer,
    t,
    config
  } = useStore();
  const {
    useCloudimage
  } = config;
  const {
    fonts = [],
    onFontChange
  } = config[TOOLS_IDS.TEXT];
  const changeTextProps = useCallback(e => {
    const {
      name,
      value,
      type
    } = e.target;
    saveText(latestText => ({
      id: latestText.id,
      [name]: type === 'number' ? restrictNumber(value, 1, 500) : value
    }));
  }, [saveText]);
  const changeFontFamily = useCallback(newFontFamily => {
    changeTextProps({
      target: {
        name: 'fontFamily',
        value: newFontFamily
      }
    });
    if (text.fontFamily !== newFontFamily && typeof onFontChange === 'function') {
      const reRenderCanvasFn = designLayer.draw.bind(designLayer);
      onFontChange(newFontFamily, reRenderCanvasFn);
    }
  }, [changeTextProps, text, designLayer]);
  const changeFontStyle = useCallback(newStyle => {
    let fontStyle = text.fontStyle?.replace('normal', '').split(' ') || [];
    if (Object.keys(fontStyle).length > 0 && fontStyle.includes(newStyle)) {
      fontStyle = fontStyle.filter(style => style !== newStyle);
    } else {
      fontStyle.push(newStyle);
    }
    changeTextProps({
      target: {
        name: 'fontStyle',
        value: fontStyle.join(' ').trim() || 'normal'
      }
    });
  }, [text]);
  const disableTextEdit = useCallback(() => {
    dispatch({
      type: ENABLE_TEXT_CONTENT_EDIT,
      payload: {
        textIdOfEditableContent: null
      }
    });
  }, []);
  const changeTextContent = useCallback(newContent => {
    changeTextProps({
      target: {
        name: 'text',
        value: newContent
      }
    });
    disableTextEdit();
  }, []);
  useEffect(() => {
    let transformer;
    if (textIdOfEditableContent && text.id === textIdOfEditableContent) {
      const canvasStage = designLayer.getStage();
      [transformer] = canvasStage.findOne(`#${TRANSFORMERS_LAYER_ID}`).children;
      activateTextChange(textIdOfEditableContent, canvasStage, transformer, changeTextContent, disableTextEdit);
    }
    return () => {
      if (transformer && textIdOfEditableContent) deactivateTextChange();
    };
  }, [textIdOfEditableContent]);
  return /*#__PURE__*/React__default.createElement(AnnotationOptions, {
    className: "FIE_text-tool-options",
    annotation: text,
    updateAnnotation: saveText,
    morePoppableOptionsPrepended: !useCloudimage ? TEXT_POPPABLE_OPTIONS : [],
    moreOptionsPopupComponentsObj: !useCloudimage ? textOptionsPopupComponents : {},
    t: t
  }, Array.isArray(fonts) && fonts.length > 1 && /*#__PURE__*/React__default.createElement(StyledFontFamilySelect, {
    className: "FIE_text-font-family-option",
    onChange: changeFontFamily,
    value: text.fontFamily,
    placeholder: t('fontFamily'),
    size: "sm"
  }, fonts.map((fontFamily = '') => /*#__PURE__*/React__default.createElement(MenuItem$1, {
    className: "FIE_text-font-family-item",
    key: fontFamily.value ?? fontFamily,
    value: fontFamily.value ?? fontFamily
  }, fontFamily.label ?? fontFamily))), /*#__PURE__*/React__default.createElement(StyledFontSizeInput, {
    className: "FIE_text-size-option",
    value: text.fontSize || '',
    name: "fontSize",
    onChange: changeTextProps,
    inputMode: "numeric",
    type: "number",
    size: "sm",
    placeholder: t('size')
  }), /*#__PURE__*/React__default.createElement(StyledToolsWrapper, null, !useCloudimage && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(StyledIconWrapper, {
    className: "FIE_text-bold-option",
    active: (text.fontStyle || '').includes('bold'),
    onClick: () => changeFontStyle('bold'),
    watermarkTool: true
  }, /*#__PURE__*/React__default.createElement(FontBold$1, {
    size: 20
  })), /*#__PURE__*/React__default.createElement(StyledIconWrapper, {
    className: "FIE_text-italic-option",
    active: (text.fontStyle || '').includes('italic'),
    onClick: () => changeFontStyle('italic'),
    watermarkTool: true
  }, /*#__PURE__*/React__default.createElement(FontItalic$1, {
    size: 20
  }))), children));
};
TextControls.defaultProps = {
  children: null
};
TextControls.propTypes = {
  text: PropTypes.instanceOf(Object).isRequired,
  saveText: PropTypes.func.isRequired,
  children: PropTypes.node
};

/** External Dependencies */
const TextOptions = ({
  t
}) => {
  const [text, saveText] = useAnnotation({
    name: TOOLS_IDS.TEXT
  });
  return /*#__PURE__*/React__default.createElement(TextControls, {
    text: text,
    saveText: saveText,
    t: t
  });
};
TextOptions.propTypes = {
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const ImageButton = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React__default.createElement(ToolsBarItemButton$1, {
  className: "FIE_image-tool-button",
  id: TOOLS_IDS.IMAGE,
  label: t('imageTool'),
  Icon: ImageOutline,
  onClick: selectTool,
  isSelected: isSelected
});
ImageButton.defaultProps = {
  isSelected: false
};
ImageButton.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const StyledHiddenUploadInput = styled.input`
  display: none;
  width: 1px;
  height: 1px;
  position: absolute;
  z-index: -1;
`;

const HiddenUploadInput = (props, ref) => {
  return /*#__PURE__*/React__default.createElement(StyledHiddenUploadInput, _extends$1({
    type: "file",
    ref: ref
  }, props));
};
var HiddenUploadInput$1 = /*#__PURE__*/forwardRef(HiddenUploadInput);

/** External Dependencies */
const StyledButtonWrapper = styled.div`
  display: flex;
  align-items: center;
  margin: ${({
  $noMargin
}) => $noMargin ? "0" : "12px"};
  flex-shrink: 0;
`;
const StyledMainButton = styled(Button$1)`
  flex-grow: 1;
  justify-content: center;
  align-items: center;
  background-color: #ffd843;
  & > span > span {
    font-size: 0.75rem !important;
  }
  &:hover {
    background-color: #fcc638;
  }
  border: 1px solid #fcc638;
  padding: 6px 12px;
  &.FIE_watermark-add-button {
    background-color: white;
    border: 1px solid black;
  }
  &.fie_topbar-save-button: hover {
    background-color: #fcc638;
  }
  &.FIE_watermark-add-button:hover {
    background-color: #dedede;
    border: 1px solid black;
    color: black;
  }
  color: black;
  border-radius: 20px;

`;
const StyledMenu = styled(Menu$2)`
  padding: 8px;
  background-color: ${({
  theme: {
    palette
  }
}) => palette[Color.BackgroundStateless]};
`;
const StyledMenuItem = styled(MenuItem$1)`
  border-radius: 4px;
`;
const StyledMenuIcon = styled(MenuItemIcon$1)`
  display: flex;
  align-items: center;
`;

/** External Dependencies */
const ButtonWithMenu = ({
  onClick,
  title,
  label,
  color,
  menuFromBtn,
  menuItems,
  menuPosition = 'bottom',
  disabled = false,
  className,
  menuStyle,
  wrapperStyle,
  buttonRef,
  noMargin
}) => {
  const {
    t
  } = useStore();
  const isMounted = useRef(true);
  const [anchorEl, setAnchorEl] = useState(null);
  const buttonSize = 'sm';
  const filteredMenuItems = menuItems.filter(Boolean);
  const hasMultipleMenuItems = filteredMenuItems.length > 1;
  const openMenu = e => {
    if (isMounted.current) {
      setAnchorEl(e.currentTarget);
    }
  };
  const closeMenu = () => {
    if (isMounted.current) {
      setAnchorEl(null);
    }
  };
  const handleMenuItemClick = onItemClick => {
    if (typeof onItemClick === 'function') {
      onItemClick();
    }
    closeMenu();
  };
  const handleButtonClick = e => {
    if (menuFromBtn && hasMultipleMenuItems) {
      openMenu(e);
      return;
    }
    if (typeof onClick === 'function') {
      onClick();
    } else if (filteredMenuItems[0]?.onClick) {
      filteredMenuItems[0].onClick();
    }
  };
  useEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(StyledButtonWrapper, {
    className: `${className}-wrapper`,
    style: wrapperStyle,
    ref: buttonRef,
    $noMargin: noMargin
  }, /*#__PURE__*/React__default.createElement(StyledMainButton, {
    className: `${className}-button`,
    color: color,
    size: buttonSize,
    title: title,
    onClick: disabled ? undefined : handleButtonClick,
    disabled: disabled
  }, label === "Save" ? "Done" : label || t('saveAs'))), hasMultipleMenuItems && /*#__PURE__*/React__default.createElement(StyledMenu, {
    className: `${className}-menu`,
    anchorEl: anchorEl,
    onClose: closeMenu,
    open: Boolean(anchorEl),
    style: menuStyle,
    position: menuPosition
  }, menuItems.map(item => item && /*#__PURE__*/React__default.createElement(StyledMenuItem, {
    className: `${className}-menu-item`,
    key: item.key,
    active: item.isActive,
    onClick: () => handleMenuItemClick(item.onClick),
    size: buttonSize
  }, item.icon && /*#__PURE__*/React__default.createElement(StyledMenuIcon, {
    size: buttonSize
  }, typeof item.icon === 'string' ?
  /*#__PURE__*/
  // eslint-disable-next-line react/no-danger
  React__default.createElement("span", {
    dangerouslySetInnerHTML: {
      __html: item.icon
    }
  }) : /*#__PURE__*/React__default.createElement(item.icon, null)), /*#__PURE__*/React__default.createElement(MenuItemLabel$1, null, item.label)))));
};
ButtonWithMenu.defaultProps = {
  title: '',
  label: '',
  color: 'primary',
  menuFromBtn: false,
  noMargin: false,
  menuPosition: 'bottom',
  onClick: undefined,
  disabled: false,
  menuStyle: undefined,
  wrapperStyle: undefined,
  buttonRef: undefined
};
ButtonWithMenu.propTypes = {
  menuItems: PropTypes.instanceOf(Array).isRequired,
  className: PropTypes.string.isRequired,
  onClick: PropTypes.func,
  title: PropTypes.string,
  label: PropTypes.string,
  color: PropTypes.string,
  menuFromBtn: PropTypes.bool,
  noMargin: PropTypes.bool,
  menuPosition: PropTypes.string,
  disabled: PropTypes.bool,
  menuStyle: PropTypes.instanceOf(Object),
  wrapperStyle: PropTypes.instanceOf(Object),
  buttonRef: PropTypes.instanceOf(Object)
};

/** External Dependencies */
const ImageControls = ({
  image,
  saveImage,
  children,
  t
}) => /*#__PURE__*/React__default.createElement(AnnotationOptions, {
  className: "FIE_image-tool-options",
  annotation: image,
  updateAnnotation: saveImage,
  t: t,
  hideFillOption: true
}, children);
ImageControls.defaultProps = {
  children: null
};
ImageControls.propTypes = {
  image: PropTypes.instanceOf(Object).isRequired,
  saveImage: PropTypes.func.isRequired,
  children: PropTypes.node,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const StyledImagesGallery = styled.div`
  background: ${({
  theme
}) => theme.palette['bg-secondary']};
  box-shadow: 0px 1px 2px ${({
  theme
}) => theme.palette['light-shadow']};
  border-radius: 4px;
  padding: 8px;
  overflow-y: auto;
  max-height: 350px;
  max-width: 300px;
`;
const StyledImageWrapper = styled.div`
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 60px;
  height: 60px;
  margin: 4px;
  padding: 4px;
  cursor: pointer;
  border-radius: 4px;
  border: 2px solid ${({
  theme
}) => theme.palette['bg-primary-active']};
  user-select: none;

  :hover {
    border-color: ${({
  theme
}) => theme.palette['accent-primary-active']};
  }

  img {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }
`;

/** External Dependencies */
const ImagesGallery = ({
  gallery,
  anchorEl,
  onClose,
  onSelect
}) => /*#__PURE__*/React__default.createElement(Popper$1, {
  className: "FIE_image-tool-gallery",
  anchorEl: anchorEl,
  open: Boolean(anchorEl),
  position: "top",
  onClick: onClose,
  overlay: true
}, /*#__PURE__*/React__default.createElement(StyledImagesGallery, null, gallery.map(({
  originalUrl,
  previewUrl
}) => /*#__PURE__*/React__default.createElement(StyledImageWrapper, {
  key: originalUrl,
  onClick: () => onSelect(originalUrl)
}, /*#__PURE__*/React__default.createElement("img", {
  src: previewUrl,
  alt: previewUrl,
  crossOrigin: "Anonymous",
  draggable: false
})))));
ImagesGallery.defaultProps = {
  gallery: [],
  anchorEl: null
};
ImagesGallery.propTypes = {
  onClose: PropTypes.func.isRequired,
  onSelect: PropTypes.func.isRequired,
  gallery: PropTypes.arrayOf(Object),
  anchorEl: PropTypes.instanceOf(Object)
};

/** External Dependencies */
const ADDED_IMG_SPACING_PERCENT = 0.15;
const ImageOptions = () => {
  const [isLoading, setIsLoading] = useState();
  const [galleryAnchorEl, setGalleryAnchorEl] = useState(null);
  const uploadImgsInput = useRef();
  const menuItemsBtnRef = useRef();
  const {
    shownImageDimensions,
    dispatch,
    adjustments: {
      crop = {}
    },
    t,
    config = {}
  } = useStore();
  const imageConfig = config[TOOLS_IDS.IMAGE];
  const isUploadEnabled = !imageConfig.disableUpload;
  const isGalleryEnabled = Array.isArray(imageConfig.gallery) && imageConfig.gallery.length > 0;
  const [image, saveImage, addNewImage] = useAnnotation({
    name: TOOLS_IDS.IMAGE,
    opacity: 1
  }, false);
  const requestedImgsCount = useRef(0);
  const addImgScaled = loadedImg => {
    const layerWidth = crop.width || shownImageDimensions.width;
    const layerHeight = crop.height || shownImageDimensions.height;
    const layerCropX = crop.x || 0;
    const layerCropY = crop.y || 0;
    const newImgRatio = Math.min(1, layerWidth / (loadedImg.width + loadedImg.width * ADDED_IMG_SPACING_PERCENT), layerHeight / (loadedImg.height + loadedImg.height * ADDED_IMG_SPACING_PERCENT));
    addNewImage({
      image: loadedImg,
      x: layerCropX + layerWidth / 2 - loadedImg.width * newImgRatio / 2,
      y: layerCropY + layerHeight / 2 - loadedImg.height * newImgRatio / 2,
      width: loadedImg.width * newImgRatio,
      height: loadedImg.height * newImgRatio
    });
  };
  const hideLoaderAfterDone = filesLength => {
    requestedImgsCount.current += 1;
    if (requestedImgsCount.current === filesLength) {
      requestedImgsCount.current = 0;
      setIsLoading(false);
    }
  };
  const setFeedback = msg => {
    dispatch({
      type: SET_FEEDBACK,
      payload: {
        feedback: {
          message: msg,
          status: FEEDBACK_STATUSES.WARNING
        }
      }
    });
  };
  const importImages = e => {
    if (e.target.files) {
      setIsLoading(true);
      const wrongFilesNames = [];
      const filesArray = Array.from(e.target.files);
      const filesLength = filesArray.length;
      filesArray.forEach(file => {
        if (file.type.startsWith('image/')) {
          const img = new Image();
          img.onload = () => {
            addImgScaled(img);
            URL.revokeObjectURL(file);
            hideLoaderAfterDone(filesLength);
          };
          img.onerror = () => {
            setFeedback(t('uploadImageError'));
            hideLoaderAfterDone(filesLength);
          };
          img.src = URL.createObjectURL(file);
        } else {
          wrongFilesNames.push(file.name);
          hideLoaderAfterDone(filesLength);
        }
      });
      if (wrongFilesNames.length > 0) {
        const errorLabel = wrongFilesNames.length > 1 ? t('areNotImages') : t('isNotImage');
        setFeedback(`${wrongFilesNames.join(', ')} ${errorLabel} ${t('toBeUploaded')}.`);
      }
    }
    e.target.value = '';
  };
  const triggerUploadInput = () => {
    if (uploadImgsInput.current) {
      uploadImgsInput.current.click();
    }
  };
  const importImgFromGallery = imgUrl => {
    setIsLoading(true);
    const img = new Image();
    img.onload = () => {
      addImgScaled(img);
      hideLoaderAfterDone(1);
    };
    img.onerror = () => {
      setFeedback(t('uploadImageError'));
      hideLoaderAfterDone(1);
    };
    img.crossOrigin = 'Anonymous';
    img.src = imgUrl;
  };
  const openGalleryPanel = () => {
    setGalleryAnchorEl(menuItemsBtnRef.current);
  };
  const closeGalleryPanel = () => {
    setGalleryAnchorEl(null);
  };
  const menuItems = useMemo(() => [isUploadEnabled && {
    key: 'add-by-upload-image',
    label: isLoading ? t('importing') : t('uploadImage'),
    icon: UploadOutline,
    onClick: isLoading ? undefined : triggerUploadInput
  }, isGalleryEnabled && {
    key: 'add-from-gallery',
    label: t('fromGallery'),
    icon: Images,
    onClick: openGalleryPanel
  }], [imageConfig, isLoading, t]);
  return /*#__PURE__*/React__default.createElement(ImageControls, {
    image: image,
    saveImage: saveImage,
    t: t
  }, /*#__PURE__*/React__default.createElement(ButtonWithMenu, {
    className: "FIE_image-tool-add-option",
    color: "secondary",
    label: t('addImage'),
    title: t('addImageTitle'),
    menuPosition: "top",
    menuItems: menuItems,
    size: "sm",
    style: {
      maxHeight: 24
    },
    buttonRef: menuItemsBtnRef,
    menuFromBtn: true
  }), isUploadEnabled && /*#__PURE__*/React__default.createElement(HiddenUploadInput$1, {
    ref: uploadImgsInput,
    onChange: isLoading ? undefined : importImages,
    disabled: isLoading,
    multiple: true
  }), isGalleryEnabled && /*#__PURE__*/React__default.createElement(ImagesGallery, {
    gallery: imageConfig.gallery,
    onSelect: importImgFromGallery,
    onClose: closeGalleryPanel,
    anchorEl: galleryAnchorEl
  }));
};

/** External Dependencies */
const RectButton = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React__default.createElement(ToolsBarItemButton$1, {
  className: "FIE_rect-tool-button",
  id: TOOLS_IDS.RECT,
  label: t('rectangleTool'),
  Icon: CropLandscape,
  onClick: selectTool,
  isSelected: isSelected
});
RectButton.defaultProps = {
  isSelected: false
};
RectButton.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const MIN_VALUE$1 = 0;
const MAX_VALUE$1 = 150;
const RectCornerField = ({
  annotation: rect,
  updateAnnotation: updateRect,
  t
}) => {
  const {
    cornerRadius
  } = rect;
  const updateCornerRadius = newCornerRadius => {
    updateRect({
      cornerRadius: restrictNumber(newCornerRadius, MIN_VALUE$1, MAX_VALUE$1)
    });
  };
  return /*#__PURE__*/React__default.createElement(StyledSpacedOptionFields, null, /*#__PURE__*/React__default.createElement(Label$6, null, t('cornerRadius')), /*#__PURE__*/React__default.createElement(Slider, {
    annotation: "px",
    onChange: updateCornerRadius,
    value: cornerRadius,
    min: MIN_VALUE$1,
    max: MAX_VALUE$1,
    noMargin: true
  }));
};
RectCornerField.propTypes = {
  annotation: PropTypes.instanceOf(Object).isRequired,
  updateAnnotation: PropTypes.func.isRequired,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const CORNER_RADIUS = 'corner-radius';
const RECT_POPPABLE_OPTIONS = [{
  titleKey: 'cornerRadius',
  name: CORNER_RADIUS,
  Icon: RadiusCorner$1
}];
const rectOptionsPopupComponents = {
  [CORNER_RADIUS]: RectCornerField
};

/** External Dependencies */
const RectOptions = ({
  t
}) => {
  const [rect, saveRect] = useAnnotation({
    name: TOOLS_IDS.RECT
  });
  return /*#__PURE__*/React__default.createElement(AnnotationOptions, {
    className: "FIE_rect-tool-options",
    moreOptionsPopupComponentsObj: rectOptionsPopupComponents,
    morePoppableOptionsPrepended: RECT_POPPABLE_OPTIONS,
    annotation: rect,
    updateAnnotation: saveRect,
    t: t
  });
};
RectOptions.propTypes = {
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const EllipseButton = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React__default.createElement(ToolsBarItemButton$1, {
  className: "FIE_ellipse-tool-button",
  id: TOOLS_IDS.ELLIPSE,
  label: t('ellipseTool'),
  Icon: Ellipse,
  onClick: selectTool,
  isSelected: isSelected
});
EllipseButton.defaultProps = {
  isSelected: false
};
EllipseButton.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const EllipseOptions = ({
  t
}) => {
  const [ellipse, saveEllipse] = useAnnotation({
    name: TOOLS_IDS.ELLIPSE
  });
  return /*#__PURE__*/React__default.createElement(AnnotationOptions, {
    className: "FIE_ellipse-tool-options",
    annotation: ellipse,
    updateAnnotation: saveEllipse,
    t: t
  });
};
EllipseOptions.propTypes = {
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const PenButton = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React__default.createElement(ToolsBarItemButton$1, {
  className: "FIE_pen-tool-button",
  id: TOOLS_IDS.PEN,
  label: t('penTool'),
  Icon: Annotation,
  onClick: selectTool,
  isSelected: isSelected
});
PenButton.defaultProps = {
  isSelected: false
};
PenButton.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const eventsOptions = {
  passive: true
};
const PenOptions = ({
  t
}) => {
  const {
    dispatch,
    designLayer,
    previewGroup,
    config
  } = useStore();
  const [pen, savePenDebounced, savePenNoDebounce] = useAnnotation({
    ...config.annotationsCommon,
    ...config[TOOLS_IDS.PEN],
    name: TOOLS_IDS.PEN
  }, false);
  const canvasRef = useRef(null);
  const updatedPen = useRef({
    points: [],
    moved: false,
    id: ''
  });
  const getPointerPosition = useCallback(() => {
    const canvasBoundingRect = getElemDocumentCoords(canvasRef.current.content);
    const pos = getPointerOffsetPositionBoundedToObject(previewGroup, canvasBoundingRect);
    return [pos.offsetX - (designLayer.attrs.xPadding || 0), pos.offsetY - (designLayer.attrs.yPadding || 0)];
  }, [designLayer]);
  const handlePointerMove = useCallback(() => {
    if (!updatedPen.current.moved) {
      updatedPen.current = {
        moved: true,
        id: randomId(TOOLS_IDS.PEN),
        points: [...updatedPen.current.points, ...getPointerPosition()]
      };
      savePenNoDebounce({
        id: updatedPen.current.id,
        name: TOOLS_IDS.PEN,
        points: updatedPen.current.points
      });
    } else {
      updatedPen.current.points = updatedPen.current.points.concat(getPointerPosition());
      dispatch({
        type: SET_ANNOTATION,
        payload: {
          id: updatedPen.current.id,
          points: updatedPen.current.points,
          dismissHistory: true
        }
      });
    }
  }, [getPointerPosition]);
  const handlePointerUp = useCallback(() => {
    if (updatedPen.current.id && config[TOOLS_IDS.PEN].selectAnnotationAfterDrawing) {
      dispatch({
        type: SELECT_ANNOTATION,
        payload: {
          annotationId: updatedPen.current.id
        }
      });
    }
    updatedPen.current = null;
    canvasRef.current.off('mousemove touchmove', handlePointerMove);
    canvasRef.current.off('mouseleave touchcancel', handlePointerUp);
    document.removeEventListener('mouseup', handlePointerUp, eventsOptions);
    document.removeEventListener('touchend', handlePointerUp, eventsOptions);
    document.removeEventListener('mouseleave', handlePointerUp, eventsOptions);
    document.removeEventListener('touchcancel', handlePointerUp, eventsOptions);
  }, [handlePointerMove]);
  const handlePointerDown = useCallback(e => {
    if (e.target.attrs.draggable) {
      return;
    }
    e.evt.preventDefault();
    updatedPen.current = {
      points: getPointerPosition()
    };
    canvasRef.current.on('mousemove touchmove', handlePointerMove);
    canvasRef.current.on('mouseleave touchcancel', handlePointerUp);
    document.addEventListener('mouseup', handlePointerUp, eventsOptions);
    document.addEventListener('touchend', handlePointerUp, eventsOptions);
    document.addEventListener('mouseleave', handlePointerUp, eventsOptions);
    document.addEventListener('touchcancel', handlePointerUp, eventsOptions);
  }, [getPointerPosition, handlePointerMove, handlePointerUp]);
  useEffect(() => {
    canvasRef.current = designLayer?.getStage();
    if (canvasRef.current) {
      canvasRef.current.on('mousedown touchstart', handlePointerDown);
    }
    return () => {
      if (canvasRef.current) {
        canvasRef.current.off('mousedown touchstart', handlePointerDown);
      }
    };
  }, [designLayer]);
  return /*#__PURE__*/React__default.createElement(AnnotationOptions, {
    className: "FIE_pen-tool-options",
    annotation: pen,
    updateAnnotation: savePenDebounced,
    t: t,
    hidePositionField: true,
    hideFillOption: true
  });
};
PenOptions.propTypes = {
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const LineButton = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React__default.createElement(ToolsBarItemButton$1, {
  className: "FIE_line-tool-button",
  id: TOOLS_IDS.LINE,
  label: t('lineTool'),
  Icon: Line$1,
  onClick: selectTool,
  isSelected: isSelected
});
LineButton.defaultProps = {
  isSelected: false
};
LineButton.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const LineOptions = ({
  t
}) => {
  const [line, saveLine] = useAnnotation({
    name: TOOLS_IDS.LINE
  });
  return /*#__PURE__*/React__default.createElement(AnnotationOptions, {
    className: "FIE_line-tool-options",
    annotation: line,
    updateAnnotation: saveLine,
    t: t,
    hidePositionField: true,
    hideFillOption: true
  });
};
LineOptions.propTypes = {
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const ArrowButton = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React__default.createElement(ToolsBarItemButton$1, {
  className: "FIE_arrow-tool-button",
  id: TOOLS_IDS.ARROW,
  label: t('arrowTool'),
  Icon: ArrowTool,
  onClick: selectTool,
  isSelected: isSelected
});
ArrowButton.defaultProps = {
  isSelected: false
};
ArrowButton.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const ArrowOptions = ({
  t
}) => {
  const [arrow, saveArrow] = useAnnotation({
    name: TOOLS_IDS.ARROW
  });
  return /*#__PURE__*/React__default.createElement(AnnotationOptions, {
    className: "FIE_arrow-tool-options",
    annotation: arrow,
    updateAnnotation: saveArrow,
    t: t,
    hidePositionField: true,
    hideFillOption: true
  });
};
ArrowOptions.propTypes = {
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const PolygonButton = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React__default.createElement(ToolsBarItemButton$1, {
  className: "FIE_polygon-tool-button",
  id: TOOLS_IDS.POLYGON,
  label: t('polygonTool'),
  Icon: Polygon,
  onClick: selectTool,
  isSelected: isSelected
});
PolygonButton.defaultProps = {
  isSelected: false
};
PolygonButton.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const MIN_VALUE = 3;
const MAX_VALUE = 25;
const PolygonSidesField = ({
  annotation: polygon,
  updateAnnotation: updatePolygon,
  t
}) => {
  const {
    sides
  } = polygon;
  const updateSidesNumber = newSidesNumber => {
    updatePolygon({
      sides: restrictNumber(newSidesNumber, MIN_VALUE, MAX_VALUE)
    });
  };
  return /*#__PURE__*/React__default.createElement(StyledSpacedOptionFields, null, /*#__PURE__*/React__default.createElement(Label$6, null, t('sides')), /*#__PURE__*/React__default.createElement(Slider, {
    annotation: "",
    onChange: updateSidesNumber,
    value: sides,
    min: MIN_VALUE,
    max: MAX_VALUE,
    noMargin: true
  }));
};
PolygonSidesField.propTypes = {
  annotation: PropTypes.instanceOf(Object).isRequired,
  updateAnnotation: PropTypes.func.isRequired,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const SIDES_NUMBER = 'sides-number';
const POLYGON_POPPABLE_OPTIONS = [{
  titleKey: 'sides',
  name: SIDES_NUMBER,
  Icon: PolygonSides$1
}];
const polygonOptionsPopupComponents = {
  [SIDES_NUMBER]: PolygonSidesField
};

/** External Dependencies */
const PolygonOptions = ({
  t
}) => {
  const [polygon, savePolygon] = useAnnotation({
    name: TOOLS_IDS.POLYGON
  });
  return /*#__PURE__*/React__default.createElement(AnnotationOptions, {
    className: "FIE_polygon-tool-options",
    morePoppableOptionsPrepended: POLYGON_POPPABLE_OPTIONS,
    moreOptionsPopupComponentsObj: polygonOptionsPopupComponents,
    annotation: polygon,
    updateAnnotation: savePolygon,
    t: t,
    hidePositionField: true
  });
};
PolygonOptions.propTypes = {
  t: PropTypes.func.isRequired
};

/** Internal Dependencies */
const getProperDimensions = (resizeDimensions, cropDimensions, shownImageDimensions, originalDimensions, rotationAngle = 0) => {
  if (resizeDimensions.width && resizeDimensions.height) {
    return resizeDimensions;
  }
  const mappedCropArea = mapCropBox(cropDimensions, shownImageDimensions, originalDimensions);
  const croppedRotatedArea = getSizeAfterRotation(mappedCropArea.width, mappedCropArea.height, rotationAngle);
  if (resizeDimensions.width || resizeDimensions.height) {
    return {
      width: resizeDimensions.width || croppedRotatedArea.width,
      height: resizeDimensions.height || croppedRotatedArea.height
    };
  }
  return croppedRotatedArea.width && croppedRotatedArea.height && croppedRotatedArea || {
    ...originalDimensions,
    ...getSizeAfterRotation(originalDimensions.width, originalDimensions.height, rotationAngle)
  };
};

/** External Dependencies */
const StyledResizeWrapper = styled.div`
  display: flex;
  justify-content: ${({
  alignment
}) => alignment || 'center'};
  align-items: flex-end;
  gap: 3px;
  flex-wrap: wrap;
`;
const StyledResizeInput = styled(InputGroup$1)(({
  theme
}) => css`
    width: 106px;
    max-width: 106px;
    margin-top: 4px;

    .SfxInput-Base {
      width: 100%;
      min-width: 100%;
      max-width: 100%;
    }

    span {
      color: ${theme.palette[Color.TextSecondary]};
      ${theme.typography.font[FontVariant.LabelMedium]};
    }
  `);
const StyledRatioLockIcon = styled(IconButton$1)`
  svg {
    margin-bottom: 1px;
  }
`;
const StyledResetButton = styled(IconButton$1)`
  margin-left: 12px;
`;

/** External Dependencies */
const Resize = ({
  onChange,
  currentSize,
  hideResetButton,
  alignment
}) => {
  const {
    dispatch,
    originalImage,
    resize,
    shownImageDimensions,
    adjustments: {
      crop,
      rotation = 0
    },
    theme,
    t
  } = useStore();
  const dimensions = getProperDimensions((currentSize.width || currentSize.height) && currentSize || resize, crop, shownImageDimensions, originalImage, rotation);
  const changeResize = e => {
    const {
      name,
      value
    } = e.target;
    if (parseFloat(value) < 1) {
      return;
    }
    const maxResizeNumber = Math.min(originalImage.width * 10, originalImage.height * 10);
    const originalImgSizeAfterRotation = getSizeAfterRotation(originalImage.width, originalImage.height, rotation);
    const isHeight = name === 'height';
    const secondDimensionName = isHeight ? 'width' : 'height';
    const newResize = {
      [name]: value ? restrictNumber(value, 0, maxResizeNumber) : value,
      [secondDimensionName]: dimensions[secondDimensionName]
    };
    const isRatioUnlocked = currentSize.ratioUnlocked ?? resize.ratioUnlocked;
    if (!isRatioUnlocked) {
      const originalImgRatio = originalImgSizeAfterRotation.width / originalImgSizeAfterRotation.height;
      newResize[secondDimensionName] = isHeight ? Math.round(newResize[name] * originalImgRatio) : Math.round(newResize[name] / originalImgRatio);
    }
    if (newResize[name] === resize[name] && newResize[secondDimensionName] === resize[secondDimensionName]) {
      return;
    }
    if (typeof onChange === 'function') {
      onChange(newResize);
      return;
    }
    dispatch({
      type: SET_RESIZE,
      payload: newResize
    });

    // Fit if there was no resized width/height before for avoiding jumping on change resize
    // as we are simulating zoom relative to original image dimensions but not applying the real original image dimensions
    const dimensUsedInFit = crop.width && crop.height && crop || shownImageDimensions;
    const updatedResize = {
      ...resize,
      ...newResize
    };
    dispatch({
      type: ZOOM_CANVAS,
      payload: {
        factor: updatedResize.width && updatedResize.height ? getZoomFitFactor(dimensUsedInFit, updatedResize) : DEFAULT_ZOOM_FACTOR,
        isAbsoluteZoom: true
      }
    });
  };
  const toggleRatioLock = () => {
    if (typeof onChange === 'function') {
      onChange({
        ratioUnlocked: !currentSize.ratioUnlocked
      });
      return;
    }
    dispatch({
      type: SET_RESIZE,
      payload: {
        ratioUnlocked: !resize.ratioUnlocked
      }
    });
  };
  const resetResize = () => {
    dispatch({
      type: SET_RESIZE,
      payload: {
        width: undefined,
        height: undefined,
        ratioUnlocked: false
      }
    });
    const dimensUsedInFit = crop.width && crop.height && crop || shownImageDimensions;
    // Fitting after reset resize
    dispatch({
      type: ZOOM_CANVAS,
      payload: {
        factor: getZoomFitFactor(dimensUsedInFit, dimensUsedInFit)
      }
    });
  };
  const isOriginalSize = typeof resize.width === 'undefined' && typeof resize.height === 'undefined' || originalImage.width === resize.width && originalImage.height === resize.height;
  const isManualChangeDisabled = resize.manualChangeDisabled;
  const isEmptyEditedWidth = typeof resize.width !== 'undefined' && !resize.width;
  const isEmptyEditedHeight = typeof resize.height !== 'undefined' && !resize.height;
  return /*#__PURE__*/React__default.createElement(StyledResizeWrapper, {
    className: "FIE_resize-tool-options",
    alignment: alignment
  }, /*#__PURE__*/React__default.createElement(StyledResizeInput, {
    className: "FIE_resize-width-option",
    value: isEmptyEditedWidth ? '' : dimensions.width,
    name: "width",
    onChange: isManualChangeDisabled ? undefined : changeResize,
    inputMode: "numeric",
    title: t('resizeWidthTitle'),
    label: t('width'),
    inputProps: {
      type: 'number'
    },
    size: "sm",
    iconEnd: "px",
    placeholder: "Width",
    disabled: isManualChangeDisabled
  }), /*#__PURE__*/React__default.createElement(StyledRatioLockIcon, {
    className: "FIE_resize-ratio-locker",
    title: t('toggleRatioLockTitle'),
    onClick: isManualChangeDisabled ? undefined : toggleRatioLock,
    color: "basic",
    size: "sm",
    disabled: isManualChangeDisabled
  }, currentSize.ratioUnlocked || resize.ratioUnlocked ? /*#__PURE__*/React__default.createElement(UnlockOutline$1, {
    size: 16,
    color: theme.palette.success
  }) : /*#__PURE__*/React__default.createElement(LockOutline$1, {
    size: 16,
    color: theme.palette.error
  })), /*#__PURE__*/React__default.createElement(StyledResizeInput, {
    className: "FIE_resize-height-option",
    value: isEmptyEditedHeight ? '' : dimensions.height,
    name: "height",
    onChange: isManualChangeDisabled ? undefined : changeResize,
    inputMode: "numeric",
    title: t('resizeHeightTitle'),
    label: t('height'),
    inputProps: {
      type: 'number'
    },
    size: "sm",
    iconEnd: "px",
    placeholder: "Height",
    disabled: isManualChangeDisabled
  }), !hideResetButton && /*#__PURE__*/React__default.createElement(StyledResetButton, {
    className: "FIE_resize-reset-button",
    size: "sm",
    color: "basic",
    onClick: isOriginalSize || isManualChangeDisabled ? undefined : resetResize,
    disabled: isOriginalSize || isManualChangeDisabled
  }, /*#__PURE__*/React__default.createElement(Reset, null)));
};
Resize.defaultProps = {
  onChange: undefined,
  currentSize: {},
  hideResetButton: false,
  alignment: 'center'
};
Resize.propTypes = {
  alignment: PropTypes.string,
  hideResetButton: PropTypes.bool,
  onChange: PropTypes.func,
  currentSize: PropTypes.shape({
    width: PropTypes.number,
    height: PropTypes.number,
    ratioUnlocked: false
  })
};

/** External Dependencies */
const StyledWatermarkWrapper = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  gap: 8px;
  overflow: hidden;

  ${({
  noWrap
}) => noWrap ? 'flex-wrap: nowrap;' : ''};
`;
const StyledControlsWrapper = styled.div`
  margin-bottom: 8px;
`;
const StyledWatermarkGalleryItem = styled.div(({
  theme
}) => `
    padding: 6px 4px;
    border: 1px solid ${theme.palette['borders-secondary']};
    width: fit-content;
    height: 32px;
    border-radius: 2px;
    overflow: hidden;
    cursor: pointer;
    border-radius: 4px;

    :hover {
      background: ${theme.palette['bg-primary-active']};
    }

    &[aria-selected='true'] {
      background: ${theme.palette['bg-primary-active']};
      border-color: ${theme.palette['accent-primary-active']};
    }

    img {
      max-width: 100%;
      max-height: 100%;
    }
  `);

/** External Dependencies */
const WatermarksGallery = ({
  addImgWatermark,
  loadAndSetWatermarkImg,
  style
}) => {
  const {
    config,
    annotations,
    dispatch,
    t
  } = useStore();
  const currentWatermarkUrl = useMemo(() => (annotations[WATERMARK_ANNOTATION_ID$1] || {}).image?.src, [annotations[WATERMARK_ANNOTATION_ID$1]]);
  const getWatermarkImgAndSelect = e => {
    const watermarkImgEl = e.currentTarget.children[0];
    if (watermarkImgEl.complete) {
      if (!watermarkImgEl.naturalWidth) {
        dispatch({
          type: SET_FEEDBACK,
          payload: {
            feedback: {
              message: t('mutualizedFailedToLoadImg'),
              duration: 2000
            }
          }
        });
        return;
      }
      addImgWatermark(watermarkImgEl);
    }
  };
  const {
    gallery = []
  } = config[TOOLS_IDS.WATERMARK] || {};
  if (gallery.length === 0) {
    return null;
  }
  return /*#__PURE__*/React__default.createElement(Carousel, {
    className: "FIE_watermark-gallery",
    style: style
  }, gallery.map(watermark => {
    const watermarkUrl = watermark?.url || watermark;
    const previewUrl = watermark?.previewUrl || watermarkUrl;
    const isSameUrl = watermarkUrl === previewUrl;
    return /*#__PURE__*/React__default.createElement(StyledWatermarkGalleryItem, {
      className: "FIE_watermark-selected-item",
      onClick: e => isSameUrl ? getWatermarkImgAndSelect(e) : loadAndSetWatermarkImg(watermarkUrl),
      key: watermarkUrl,
      "aria-selected": watermarkUrl === currentWatermarkUrl
    }, /*#__PURE__*/React__default.createElement("img", {
      src: previewUrl,
      alt: "Failed to load.",
      crossOrigin: "Anonymous",
      draggable: false
    }));
  }));
};
WatermarksGallery.defaultProps = {
  style: undefined
};
WatermarksGallery.propTypes = {
  addImgWatermark: PropTypes.func.isRequired,
  loadAndSetWatermarkImg: PropTypes.func.isRequired,
  style: PropTypes.instanceOf(Object)
};

/** External Dependencies */
const WatermarkPadding = ({
  watermark,
  saveWatermark,
  t
}) => {
  const [anchorEl, setAnchorEl] = useState(null);
  const openOptionPopup = e => {
    setAnchorEl(e.currentTarget);
  };
  const closeOptionPopup = () => {
    setAnchorEl(null);
  };
  const updatePadding = newPadding => {
    saveWatermark({
      padding: restrictNumber(newPadding, 0, 100)
    });
  };
  const currentPadding = watermark.padding || 0;
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(StyledIconWrapper, {
    className: "FIE_watermark-padding-triggerer",
    title: t('padding'),
    onClick: openOptionPopup,
    active: anchorEl
  }, /*#__PURE__*/React__default.createElement(Padding$1, {
    size: 20
  })), /*#__PURE__*/React__default.createElement(Menu$2, {
    className: "FIE_watermark-padding-popup",
    anchorEl: anchorEl,
    open: Boolean(anchorEl),
    onClose: closeOptionPopup,
    position: "top"
  }, /*#__PURE__*/React__default.createElement(StyledOptionPopupContent, null, /*#__PURE__*/React__default.createElement(Label$6, null, t('padding')), /*#__PURE__*/React__default.createElement(StyledSpacedOptionFields, null, /*#__PURE__*/React__default.createElement(Slider, {
    annotation: "px",
    onChange: updatePadding,
    value: currentPadding,
    noMargin: true
  }), /*#__PURE__*/React__default.createElement(StyledIconLabel, null, `${currentPadding}px`)))));
};
WatermarkPadding.propTypes = {
  watermark: PropTypes.instanceOf(Object).isRequired,
  saveWatermark: PropTypes.func.isRequired,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const WATERMARK_IMG_RATIO_FROM_ORIGINAL = 0.33;
const WATERMARK_ANNOTATION_ID = 'watermark';
const Watermark = () => {
  const {
    annotations,
    shownImageDimensions,
    selectionsIds,
    config,
    dispatch,
    t,
    adjustments: {
      crop = {}
    }
  } = useStore();
  const isPhoneScreen = usePhoneScreen();
  const [isLoading, setIsLoading] = useState(false);
  const uploadImgInput = useRef();
  const watermarkConfig = config[TOOLS_IDS.WATERMARK];
  const watermark = useMemo(() => annotations[WATERMARK_ANNOTATION_ID], [annotations[WATERMARK_ANNOTATION_ID]]);
  const layerWidth = crop.width || shownImageDimensions.width;
  const layerHeight = crop.height || shownImageDimensions.height;
  const layerCropX = crop.x || 0;
  const layerCropY = crop.y || 0;
  const watermarkTextRatio = watermarkConfig.textScalingRatio || WATERMARK_IMG_RATIO_FROM_ORIGINAL;
  const watermarkImageRatio = watermarkConfig.imageScalingRatio || WATERMARK_IMG_RATIO_FROM_ORIGINAL;
  const addTextWatermark = () => {
    const dimensions = {};
    dimensions.height = layerHeight * watermarkTextRatio;
    dimensions.width = layerWidth * watermarkTextRatio;
    const textWatermark = {
      ...config.annotationsCommon,
      ...config[TOOLS_IDS.TEXT],
      ...dimensions,
      padding: 1,
      x: layerCropX + layerWidth / 2 - dimensions.width / 2,
      y: layerCropY + layerHeight / 2 - dimensions.height / 2,
      fill: '#000000',
      id: WATERMARK_ANNOTATION_ID,
      name: TOOLS_IDS.TEXT,
      replaceCurrent: true
    };
    dispatch({
      type: SET_ANNOTATION,
      payload: textWatermark
    });
  };
  const addImgWatermark = loadedImg => {
    const imgWidth = loadedImg.naturalWidth || loadedImg.width;
    const imgHeight = loadedImg.naturalHeight || loadedImg.height;
    const newImgScale = layerHeight > layerWidth ? layerHeight * watermarkImageRatio / imgHeight : layerWidth * watermarkImageRatio / imgWidth;
    const x = layerCropX + layerWidth / 2 - imgWidth * newImgScale / 2;
    const y = layerCropY + layerHeight / 2 - imgHeight * newImgScale / 2;
    const scaledWatermarkImg = {
      ...config.annotationsCommon,
      ...config[TOOLS_IDS.IMAGE],
      scaleX: newImgScale,
      scaleY: newImgScale,
      padding: 1,
      image: loadedImg,
      width: imgWidth,
      height: imgHeight,
      x,
      y,
      id: WATERMARK_ANNOTATION_ID,
      name: TOOLS_IDS.IMAGE,
      replaceCurrent: true
    };
    dispatch({
      type: SET_ANNOTATION,
      payload: scaledWatermarkImg
    });
  };
  const updateWatermarkOptions = newOptions => {
    dispatch({
      type: SET_ANNOTATION,
      payload: {
        ...(typeof newOptions === 'function' ? newOptions(watermark) : newOptions),
        id: WATERMARK_ANNOTATION_ID
      }
    });
  };
  const setFeedback = errorMsg => {
    dispatch({
      type: SET_FEEDBACK,
      payload: {
        feedback: {
          message: errorMsg,
          status: FEEDBACK_STATUSES.WARNING
        }
      }
    });
  };
  const loadAndSetWatermarkImg = (imgUrl, revokeObjectUrl) => {
    if (!imgUrl) {
      return;
    }
    setIsLoading(true);
    const img = new Image();
    img.onload = () => {
      addImgWatermark(img);
      if (revokeObjectUrl) {
        URL.revokeObjectURL(imgUrl);
      }
      setIsLoading(false);
    };
    img.onerror = () => {
      setFeedback(t('mutualizedFailedToLoadImg'));
      if (revokeObjectUrl) {
        URL.revokeObjectURL(imgUrl);
      }
      setIsLoading(false);
    };
    img.src = imgUrl;
  };
  const importWatermarkImg = e => {
    if (e.target.files) {
      const imgFile = e.target.files[0];
      if (imgFile.type.startsWith('image/')) {
        loadAndSetWatermarkImg(URL.createObjectURL(imgFile), true);
      }
    }
    e.target.value = '';
  };
  const handleUploadWatermarkClick = () => {
    if (typeof watermarkConfig.onUploadWatermarkImgClick === 'function') {
      const res = watermarkConfig.onUploadWatermarkImgClick(loadAndSetWatermarkImg);
      if (res instanceof Promise) {
        res.then(({
          url,
          revokeObjectUrl = false
        } = {}) => loadAndSetWatermarkImg(url, revokeObjectUrl));
      }
      return;
    }
    if (uploadImgInput.current) {
      uploadImgInput.current.click();
    }
  };
  useEffect(() => {
    if (watermark) {
      dispatch({
        type: CLEAR_ANNOTATIONS_SELECTIONS
      });
      dispatch({
        type: SELECT_ANNOTATION,
        payload: {
          annotationId: 'watermark'
        }
      });
    }
  }, [watermark]);

  // Always keep watermark selected
  useEffect(() => {
    if (watermark && (selectionsIds.length === 0 || selectionsIds[0].id !== WATERMARK_ANNOTATION_ID)) {
      dispatch({
        type: SELECT_ANNOTATION,
        payload: {
          annotationId: 'watermark'
        }
      });
    }
  }, [selectionsIds]);
  const menuItems = [(!config.useCloudimage || typeof watermarkConfig.onUploadWatermarkImgClick === 'function') && {
    key: 'upload-watermark',
    label: t('uploadWatermark'),
    icon: UploadOutline$1,
    onClick: handleUploadWatermarkClick
  }, !watermarkConfig.hideTextWatermark && {
    key: 'add-text-watermark',
    label: t('addWatermarkAsText'),
    icon: Text$1,
    onClick: addTextWatermark
  }];
  const addWatermarkLabel = () => {
    if (isPhoneScreen) return t('plus');
    if (menuItems[0]) return t('addWatermark');
    return t('addTextWatermark');
  };
  const renderWatermarkPadding = () => /*#__PURE__*/React__default.createElement(WatermarkPadding, {
    watermark: watermark,
    saveWatermark: updateWatermarkOptions,
    t: t
  });
  return /*#__PURE__*/React__default.createElement("div", {
    className: "FIE_watermark-tool-wrapper"
  }, watermark?.name === TOOLS_IDS.TEXT && /*#__PURE__*/React__default.createElement(StyledControlsWrapper, {
    className: "FIE_watermark-options-wrapper"
  }, /*#__PURE__*/React__default.createElement(TextControls, {
    text: watermark,
    saveText: updateWatermarkOptions,
    t: t
  }, renderWatermarkPadding())), watermark?.name === TOOLS_IDS.IMAGE && /*#__PURE__*/React__default.createElement(StyledControlsWrapper, {
    className: "FIE_watermark-options-wrapper"
  }, /*#__PURE__*/React__default.createElement(ImageControls, {
    image: watermark,
    saveImage: updateWatermarkOptions,
    t: t
  }, renderWatermarkPadding())), /*#__PURE__*/React__default.createElement(StyledWatermarkWrapper, {
    className: "FIE_watermark-add-wrapper",
    noWrap: true
  }, /*#__PURE__*/React__default.createElement(ButtonWithMenu, {
    className: "FIE_watermark-add",
    color: "secondary",
    label: addWatermarkLabel(),
    title: t('addWatermarkTitle'),
    menuPosition: "top",
    menuItems: menuItems,
    menuFromBtn: true,
    noMargin: true
  }), /*#__PURE__*/React__default.createElement(WatermarksGallery, {
    loadAndSetWatermarkImg: loadAndSetWatermarkImg,
    addImgWatermark: addImgWatermark,
    style: isPhoneScreen && Boolean(watermark?.name) ? {
      width: '55%'
    } : undefined
  }), /*#__PURE__*/React__default.createElement(HiddenUploadInput$1, {
    onChange: isLoading ? undefined : importWatermarkImg,
    disabled: isLoading,
    ref: uploadImgInput
  })));
};

/** Internal Dependencies */
const TOOLS_ITEMS = {
  [TOOLS_IDS.CROP]: {
    id: TOOLS_IDS.CROP,
    Item: Crop
  },
  [TOOLS_IDS.ROTATE]: {
    id: TOOLS_IDS.ROTATE,
    Item: RotateButton,
    ItemOptions: RotateOptions
  },
  [TOOLS_IDS.FLIP_X]: {
    id: TOOLS_IDS.FLIP_X,
    Item: FlipX
  },
  [TOOLS_IDS.FLIP_Y]: {
    id: TOOLS_IDS.FLIP_Y,
    Item: FlipY
  },
  [TOOLS_IDS.BRIGHTNESS]: {
    id: TOOLS_IDS.BRIGHTNESS,
    Item: Brightness,
    ItemOptions: BrightnessOptions
  },
  [TOOLS_IDS.CONTRAST]: {
    id: TOOLS_IDS.CONTRAST,
    Item: Contrast,
    ItemOptions: ContrastOptions
  },
  [TOOLS_IDS.HSV]: {
    id: TOOLS_IDS.HSV,
    Item: HSV,
    ItemOptions: HSVOptions,
    hideFn: ({
      useCloudimage
    }) => useCloudimage
  },
  [TOOLS_IDS.BLUR]: {
    id: TOOLS_IDS.BLUR,
    Item: Blur,
    ItemOptions: BlurOptions
  },
  [TOOLS_IDS.WARMTH]: {
    id: TOOLS_IDS.WARMTH,
    Item: Warmth,
    ItemOptions: WarmthOptions,
    hideFn: ({
      useCloudimage
    }) => useCloudimage
  },
  [TOOLS_IDS.FILTERS]: {
    id: TOOLS_IDS.FILTERS,
    Item: Filters
  },
  [TOOLS_IDS.WATERMARK]: {
    id: TOOLS_IDS.WATERMARK,
    Item: Watermark
  },
  [TOOLS_IDS.TEXT]: {
    id: TOOLS_IDS.TEXT,
    Item: TextButton,
    ItemOptions: TextOptions
  },
  [TOOLS_IDS.IMAGE]: {
    id: TOOLS_IDS.IMAGE,
    Item: ImageButton,
    ItemOptions: ImageOptions
  },
  [TOOLS_IDS.RECT]: {
    id: TOOLS_IDS.RECT,
    Item: RectButton,
    ItemOptions: RectOptions
  },
  [TOOLS_IDS.POLYGON]: {
    id: TOOLS_IDS.POLYGON,
    Item: PolygonButton,
    ItemOptions: PolygonOptions
  },
  [TOOLS_IDS.ELLIPSE]: {
    id: TOOLS_IDS.ELLIPSE,
    Item: EllipseButton,
    ItemOptions: EllipseOptions
  },
  [TOOLS_IDS.PEN]: {
    id: TOOLS_IDS.PEN,
    Item: PenButton,
    ItemOptions: PenOptions
  },
  [TOOLS_IDS.LINE]: {
    id: TOOLS_IDS.LINE,
    Item: LineButton,
    ItemOptions: LineOptions
  },
  [TOOLS_IDS.ARROW]: {
    id: TOOLS_IDS.ARROW,
    Item: ArrowButton,
    ItemOptions: ArrowOptions
  },
  [TOOLS_IDS.RESIZE]: {
    id: TOOLS_IDS.RESIZE,
    Item: Resize
  }
};
const TABS_TOOLS = {
  [TABS_IDS.ADJUST]: [TOOLS_IDS.CROP, TOOLS_IDS.ROTATE, TOOLS_IDS.FLIP_X, TOOLS_IDS.FLIP_Y],
  [TABS_IDS.FINETUNE]: [TOOLS_IDS.BRIGHTNESS, TOOLS_IDS.CONTRAST, TOOLS_IDS.HSV, TOOLS_IDS.BLUR, TOOLS_IDS.WARMTH],
  [TABS_IDS.FILTERS]: [TOOLS_IDS.FILTERS],
  [TABS_IDS.WATERMARK]: [TOOLS_IDS.WATERMARK],
  [TABS_IDS.ANNOTATE]: [TOOLS_IDS.TEXT, TOOLS_IDS.IMAGE, TOOLS_IDS.RECT, TOOLS_IDS.ELLIPSE, TOOLS_IDS.POLYGON, TOOLS_IDS.PEN, TOOLS_IDS.LINE, TOOLS_IDS.ARROW],
  [TABS_IDS.RESIZE]: [TOOLS_IDS.RESIZE]
};

const SELECT_TAB = 'SELECT_TAB';
const selectTab = (state, payload) => payload.tabId === state.tabId ? state : {
  ...state,
  tabId: payload.tabId,
  toolId: TABS_TOOLS[payload.tabId][0],
  selectionsIds: [],
  pointerCssIcon: payload.tabId === TABS_IDS.ANNOTATE ? POINTER_ICONS.DRAW : POINTER_ICONS.DEFAULT
};

/** Internal Dependencies */
const UNDO = 'UNDO';
const undo = state => {
  if (state.pastDesignStates && state.pastDesignStates.length > 0) {
    const currentDesignState = extractCurrentDesignState(state);
    const [presentDesignState, ...newPastDesignStates] = state.pastDesignStates;
    const newFutureDesignStates = [currentDesignState, ...(state.futureDesignStates || [])];
    return {
      ...state,
      ...presentDesignState,
      selectionsIds: [],
      pastDesignStates: newPastDesignStates,
      futureDesignStates: newFutureDesignStates,
      hasUndo: newPastDesignStates.length > 0,
      hasRedo: true,
      haveNotSavedChanges: newPastDesignStates.length > 0
    };
  }
  return state;
};

const SET_FINETUNE = 'SET_FINETUNE';
const setFinetune = (state, payload) => ({
  ...state,
  isDesignState: !payload.dismissHistory,
  // not stored in state, used in reducer to consider in undo/redo stacks
  finetunes: !payload.finetune || state.finetunes.includes(payload.finetune) ? state.finetunes : [...state.finetunes, payload.finetune],
  finetunesProps: {
    ...state.finetunesProps,
    ...payload.finetuneProps
  }
});

const SET_ANNOTATION = 'SET_ANNOTATION';
const setAnnotation = (state, payload = {}) => {
  // dismissHistory is used to prevent considering this change in history (undo/redo).
  const {
    dismissHistory = false,
    replaceCurrent = false,
    ...newAnnotation
  } = payload;
  const annotationId = newAnnotation.id ?? randomId(newAnnotation.name);
  const existedAnnotation = state.annotations[annotationId];
  // If annotation not changed don't update it.
  if (existedAnnotation && !Object.keys(newAnnotation).some(key => (newAnnotation[key] || newAnnotation[key] === 0) && newAnnotation[key] !== existedAnnotation[key])) {
    return state;
  }
  return {
    ...state,
    isDesignState: !dismissHistory,
    // not stored in state, used in reducer to consider in undo/redo stacks
    annotations: {
      ...state.annotations,
      [annotationId]: {
        ...(replaceCurrent ? {} : existedAnnotation),
        ...newAnnotation
      }
    }
  };
};

const CHANGE_POINTER_ICON = 'CHANGE_POINTER_ICON';
const changingPointerIcon = (state, payload) => state.pointerCssIcon !== payload.pointerCssIcon ? {
  ...state,
  pointerCssIcon: payload.pointerCssIcon
} : state;

const SELECT_ANNOTATION = 'SELECT_ANNOTATION';
const selectAnnotation = (state, payload) => {
  if (state.selectionsIds.length === 1 && state.selectionsIds[0] === payload.annotationId) {
    return state;
  }
  let newSelectionsIds;
  if (payload.multiple) {
    newSelectionsIds = state.selectionsIds.filter(id => id !== payload.annotationId);
    const wasAnnotationAlreadySelected = newSelectionsIds.length !== state.selectionsIds.length;
    if (!wasAnnotationAlreadySelected) {
      newSelectionsIds.push(payload.annotationId);
    }
  } else {
    newSelectionsIds = [payload.annotationId];
  }
  return {
    ...state,
    selectionsIds: newSelectionsIds
  };
};

const CLEAR_ANNOTATIONS_SELECTIONS = 'CLEAR_ANNOTATIONS_SELECTIONS';
const clearAnnotationsSelections = state => state.selectionsIds.length === 0 ? state : {
  ...state,
  selectionsIds: []
};

const TOGGLE_ORIGINAL_IMAGE_DISPLAY = 'TOGGLE_ORIGINAL_IMAGE_DISPLAY';
const toggleOriginalImageDisplay = (state, payload) => ({
  ...state,
  isShowOriginalImage: payload.isShow
});

const SELECT_TOOL = 'SELECT_TOOL';
const selectTool = (state, payload) => state.toolId === payload.toolId ? state : {
  ...state,
  toolId: payload.toolId,
  selectionsIds: payload.keepSelections ? state.selectionsIds : []
};

/** Internal Dependencies */
const TOGGLE_FLIP = 'TOGGLE_FLIP';
const toggleFlip = (state, payload) => {
  const flipProperty = `isFlipped${payload.direction === FLIP_DIRECTIONS.X ? 'X' : 'Y'}`;
  return {
    ...state,
    isDesignState: !payload.dismissHistory,
    adjustments: {
      ...state.adjustments,
      [flipProperty]: !state.adjustments[flipProperty]
    }
  };
};

const SET_CROP = 'SET_CROP';
const setCrop = (state, payload) => {
  const oldCrop = state.adjustments.crop ?? {};
  const newCrop = {
    x: toPrecisedFloat(payload.x) ?? oldCrop.x,
    y: toPrecisedFloat(payload.y) ?? oldCrop.y,
    ratio: typeof payload.ratio === 'string' ? payload.ratio : toPrecisedFloat(payload.ratio) ?? oldCrop.ratio,
    width: toPrecisedFloat(payload.width) ?? oldCrop.width,
    height: toPrecisedFloat(payload.height) ?? oldCrop.height,
    ratioTitleKey: payload.ratioTitleKey ?? oldCrop.ratioTitleKey,
    ratioGroupKey: payload.ratioGroupKey,
    ratioFolderKey: payload.ratioFolderKey,
    noEffect: payload.noEffect
  };

  // Disabled as it wasn't allow to revert the crop area to the original image dimensions if changed before,
  // let's remove this if no other issues arisen while being commented.
  // if (
  //   oldCrop.x === newCrop.x &&
  //   oldCrop.y === newCrop.y &&
  //   (oldCrop.width === newCrop.width ||
  //     (newCrop.width === toPrecisedFloat(state.shownImageDimensions.width) &&
  //       !oldCrop.width !== null &&
  //       newCrop.ratio !== ORIGINAL_CROP)) &&
  //   (oldCrop.height === newCrop.height ||
  //     (newCrop.height === toPrecisedFloat(state.shownImageDimensions.height) &&
  //       oldCrop.height !== null &&
  //       newCrop.ratio !== ORIGINAL_CROP)) &&
  //   oldCrop.ratio === newCrop.ratio &&
  //   oldCrop.ratioTitleKey === newCrop.ratioTitleKey &&
  //   oldCrop.ratioGroupKey === newCrop.ratioGroupKey &&
  //   oldCrop.ratioFolderKey === newCrop.ratioFolderKey
  // ) {
  //   return state;
  // }

  return {
    ...state,
    isDesignState: !payload.dismissHistory,
    adjustments: {
      ...state.adjustments,
      crop: {
        ...oldCrop,
        ...newCrop
      }
    }
  };
};

const CHANGE_ROTATION = 'CHANGE_ROTATION';
const changeRotation = (state, payload) => state.adjustments.rotation !== payload.rotation ? {
  ...state,
  isDesignState: !payload.dismissHistory,
  adjustments: {
    ...state.adjustments,
    rotation: payload.rotation
  }
} : state;

const calculateZoomData = (newZoom, oldZoom, canvasWidth, canvasHeight) => {
  if (newZoom.factor === DEFAULT_ZOOM_FACTOR) {
    return {
      x: 0,
      y: 0,
      factor: DEFAULT_ZOOM_FACTOR
    };
  }
  const isZoomIn = newZoom.factor > oldZoom.factor;
  const mousePointTo = {
    x: (newZoom.x - oldZoom.x || 0) / oldZoom.factor,
    y: (newZoom.y - oldZoom.y || 0) / oldZoom.factor
  };
  const newPos = {
    x: newZoom.x - mousePointTo.x * newZoom.factor,
    y: newZoom.y - mousePointTo.y * newZoom.factor
  };
  if (!isZoomIn || oldZoom.factor !== 1) {
    newPos.x = Math.min(0, Math.max(newPos.x, canvasWidth * (1 - oldZoom.factor)));
    newPos.y = Math.min(0, Math.max(newPos.y, canvasHeight * (1 - oldZoom.factor)));
  }
  if (newZoom.factor < 1) {
    const initialAndScaledWidthDiff = canvasWidth - canvasWidth * newZoom.factor;
    const initialAndScaledHeightDiff = canvasHeight - canvasHeight * newZoom.factor;
    newPos.x += initialAndScaledWidthDiff / 2;
    newPos.y += initialAndScaledHeightDiff / 2;
  }
  return {
    ...newPos,
    factor: newZoom.factor
  };
};

/** Internal Dependencies */
const ZOOM_CANVAS = 'ZOOM_CANVAS';
const MIN_ZOOM_FACTOR = 0.03;
const MAX_ZOOM_FACTOR = 60;
const zoomCanvas = (state, payload) => {
  const newZoomFactor = restrictNumber(parseFloat(payload.factor).toFixed(2), MIN_ZOOM_FACTOR, MAX_ZOOM_FACTOR);
  let newZoomData;
  if (payload.preparedDimensions) {
    const {
      preparedDimensions,
      ...zoomProps
    } = payload;
    newZoomData = zoomProps;
  } else {
    const newZoomPoint = {
      x: !payload.x && payload.x !== 0 ? state.canvasWidth / 2 : payload.x ?? state.zoom.x,
      y: !payload.y && payload.y !== 0 ? state.canvasHeight / 2 : payload.y ?? state.zoom.y
    };
    newZoomData = calculateZoomData({
      ...newZoomPoint,
      factor: newZoomFactor
    },
    // `isAbsoluteZoom` means we don't depend on the old zoom, and we are going to zoom & pan assuming it's happening for firsst time.
    payload.isAbsoluteZoom ? {
      factor: DEFAULT_ZOOM_FACTOR,
      x: null,
      y: null
    } : state.zoom, state.canvasWidth, state.canvasHeight);
  }
  return newZoomData.factor === state.zoom.factor && newZoomData.x === state.zoom.x && newZoomData.y === state.zoom.y ? state : {
    ...state,
    zoom: {
      ...state.zoom,
      ...newZoomData
    }
  };
};

/** Internal Dependencies */
const SET_CANVAS_SIZE = 'SET_CANVAS_SIZE';
const setCanvasSize = (state, payload) => {
  if (state.canvasWidth === payload.canvasWidth && state.canvasHeight === payload.canvasHeight) {
    return state;
  }

  /** if enabled, it wouldn't increase the image size in the container to be more clear for the user to edit the image....
   * which means if the image is small it would be hard to edit after having this enabled...
   * is should replace payload.canvasWidth & payload.canvasHeight in the code afterwards..
   * also it might cause some improper behavior that needs to be debugged if generated.
   */
  // const restrictedWidth = restrictNumber(
  //   payload.canvasWidth,
  //   0,
  //   state.originalImage.width
  // );

  // const restrictedHeight = restrictNumber(
  //   payload.canvasHeight,
  //   0,
  //   state.originalImage.height
  // );

  const {
    initialCanvasWidth = payload.canvasWidth,
    initialCanvasHeight = payload.canvasHeight
  } = state;
  const originalImageInitialScale = getDimensionsMinimalRatio(state.initialCanvasWidth, state.initialCanvasHeight, state.originalImage.width, state.originalImage.height);
  const originalImageInitialResizedWidth = originalImageInitialScale * state.originalImage.width;
  const originalImageInitialResizedHeight = originalImageInitialScale * state.originalImage.height;
  let scale = 1;
  if (initialCanvasWidth !== payload.canvasWidth || initialCanvasHeight !== payload.canvasHeight) {
    const widthScale = payload.canvasWidth / originalImageInitialResizedWidth;
    const heightScale = payload.canvasHeight / originalImageInitialResizedHeight;
    scale = Math.min(widthScale, heightScale);
  }
  return {
    ...state,
    initialCanvasWidth,
    initialCanvasHeight,
    canvasWidth: payload.canvasWidth,
    canvasHeight: payload.canvasHeight,
    canvasScale: scale
  };
};

const SET_ORIGINAL_IMAGE = 'SET_ORIGINAL_IMAGE';
const setOriginalImage = (state, payload) => ({
  ...state,
  feedback: {},
  originalImage: payload.originalImage,
  imgSrc: payload.originalImage.src
});

const SET_SHOWN_IMAGE_DIMENSIONS = 'SET_SHOWN_IMAGE_DIMENSIONS';
const setShownImageDimensions = (state, payload) => ({
  ...state,
  shownImageDimensions: {
    ...state.shownImageDimensions,
    ...payload.shownImageDimensions
  },
  designLayer: payload.designLayer || state.designLayer,
  previewGroup: payload.previewGroup || state.previewGroup
});

const REMOVE_ANNOTATIONS = 'REMOVE_ANNOTATIONS';
const removeAnnotations = (state, payload) => {
  const {
    annotations
  } = state;
  let newSelectionsIds = state.selectionsIds;
  payload.annotationsIds.forEach(id => {
    newSelectionsIds = newSelectionsIds.filter(selectionId => selectionId !== id);
    if (state.designLayer && annotations[id]) {
      const annotationNode = state.designLayer.findOne(`#${id}`);
      if (annotationNode) {
        annotationNode.destroy();
      }
      delete annotations[id];
    }
  });
  return {
    ...state,
    // not stored in state, used in reducer to consider in undo/redo stacks
    isDesignState: payload.isDesignState || true,
    annotations,
    selectionsIds: []
  };
};

/** Internal Dependencies */
const DUPLICATE_ANNOTATIONS = 'DUPLICATE_ANNOTATIONS';
const duplicateAnnotations = (state, payload) => {
  const {
    annotations
  } = state;
  const duplicatedAnnotations = {};
  payload.annotationsIds.forEach(id => {
    const annotation = annotations[id];
    if (annotation) {
      const clonedAnnotationId = randomId(annotation.name);
      duplicatedAnnotations[clonedAnnotationId] = {
        ...annotation,
        id: clonedAnnotationId,
        x: annotation.x + 20,
        y: annotation.y + 20
      };
    }
  });
  return {
    ...state,
    // not stored in state, used in reducer to consider in undo/redo stacks
    isDesignState: !payload.dismissHistory,
    annotations: {
      ...annotations,
      ...duplicatedAnnotations
    }
  };
};

const ENABLE_TEXT_CONTENT_EDIT = 'ENABLE_TEXT_CONTENT_EDIT';
const enableTextContentEdit = (state, payload) => ({
  ...state,
  textIdOfEditableContent: payload.textIdOfEditableContent || null
});

const SET_RESIZE = 'SET_RESIZE';
const setResize = (state, payload) => ({
  ...state,
  isDesignState: !payload.dismissHistory,
  resize: {
    ...state.resize,
    // width, height, manualChangeDisabled (false by default), ratioUnlocked (locked by default).
    ...payload,
    manualChangeDisabled: payload.manualChangeDisabled ?? false
  }
});

const SET_SAVED = 'SET_SAVED';
const setSaved = state => !state.haveNotSavedChanges ? state : {
  ...state,
  haveNotSavedChanges: false
};

const deepMerge = (source, object = {}, considerArray = false) => {
  const mergedObject = {
    ...source
  };
  const keys = Object.keys(object);
  keys.forEach(k => {
    // considers null in the values.
    const val = object[k];
    if (val !== undefined) {
      const valType = typeof val;
      if (valType !== 'object' || val instanceof HTMLElement || val === null || Array.isArray(val) || !source[k] || typeof source[k] !== 'object') {
        mergedObject[k] = considerArray && Array.isArray(mergedObject[k]) && Array.isArray(val) ? [...mergedObject[k], ...val] : val;
        return;
      }

      // After the above condition we now have both of them in type objects.
      mergedObject[k] = deepMerge(source[k], val);
    }
  });
  return mergedObject;
};

/** Internal Dependencies */
const UPDATE_STATE = 'UPDATE_STATE';
const updateState = (state, payloadObjOrFn) => {
  const payload = payloadObjOrFn && typeof payloadObjOrFn === 'function' ? payloadObjOrFn(state) : payloadObjOrFn;
  return payload ? deepMerge(state, payload) : state;
};

const SET_LATEST_COLOR = 'SET_LATEST_COLOR';
const setLatestColor = (state, payload) => ({
  ...state,
  latestColors: {
    ...state.latestColors,
    ...payload.latestColors
  }
});

const SET_SHOWN_TABS_MENU = 'SET_SHOWN_TABS_MENU';
const setShowTabsMenu = (state, payload) => ({
  ...state,
  showTabsMenu: payload.opened
});

const SET_SAVING = 'SET_SAVING';
const setSaving = (state, payload) => ({
  ...state,
  isSaving: payload.isSaving,
  isLoadingGlobally: payload.isSaving
});

var actions = {
  [SET_ORIGINAL_IMAGE]: setOriginalImage,
  [SET_FEEDBACK]: setFeedback,
  [SHOW_LOADER]: showLoader,
  [HIDE_LOADER]: hideLoader,
  [CHANGE_POINTER_ICON]: changingPointerIcon,
  [SELECT_ANNOTATION]: selectAnnotation,
  [CLEAR_ANNOTATIONS_SELECTIONS]: clearAnnotationsSelections,
  [TOGGLE_ORIGINAL_IMAGE_DISPLAY]: toggleOriginalImageDisplay,
  [SELECT_TAB]: selectTab,
  [SELECT_TOOL]: selectTool,
  [ZOOM_CANVAS]: zoomCanvas,
  [SET_CANVAS_SIZE]: setCanvasSize,
  [SET_SHOWN_IMAGE_DIMENSIONS]: setShownImageDimensions,
  [ENABLE_TEXT_CONTENT_EDIT]: enableTextContentEdit,
  [SET_LATEST_COLOR]: setLatestColor,
  [SET_SHOWN_TABS_MENU]: setShowTabsMenu,
  [SET_SAVING]: setSaving,
  // Start of Design actions...
  [ADD_FILTER]: addFilter,
  [SET_FINETUNE]: setFinetune,
  [SET_ANNOTATION]: setAnnotation,
  [SET_CROP]: setCrop,
  [CHANGE_ROTATION]: changeRotation,
  [TOGGLE_FLIP]: toggleFlip,
  [SET_RESIZE]: setResize,
  [REMOVE_ANNOTATIONS]: removeAnnotations,
  [DUPLICATE_ANNOTATIONS]: duplicateAnnotations,
  // End of Design actions.
  [UNDO]: undo,
  [REDO]: redo,
  [RESET]: reset,
  [SET_SAVED]: setSaved,
  [UPDATE_STATE]: updateState
};

const SPACING_PERCENTAGE = 0.05;
const DEFAULT_SPACING = 12;
const getProperImageToCanvasSpacing = () => (window ? Math.min(window.innerHeight, window.innerWidth) * SPACING_PERCENTAGE : DEFAULT_SPACING) * 2;

const getRotatedPoint = ({
  x,
  y
}, angleDegree) => {
  const radianAngle = angleDegree * Math.PI / 180;
  const rcos = Math.cos(radianAngle);
  const rsin = Math.sin(radianAngle);
  return {
    x: x * rcos - y * rsin,
    y: y * rcos + x * rsin
  };
};
const getCenterRotatedPoint = (width, height, newRotationAngleDegree) => {
  if (!width || !height || !newRotationAngleDegree && newRotationAngleDegree !== 0) {
    return {
      x: 0,
      y: 0,
      rotation: newRotationAngleDegree
    };
  }
  const topLeft = {
    x: -width / 2,
    y: -height / 2
  };
  const current = getRotatedPoint(topLeft, 0);
  const rotated = getRotatedPoint(topLeft, newRotationAngleDegree);
  const dx = rotated.x - current.x;
  const dy = rotated.y - current.y;
  return {
    x: dx,
    y: dy,
    rotation: newRotationAngleDegree
  };
};

const nodesCommonPropTypes = {
  definitions: {
    id: PropTypes.string.isRequired,
    name: PropTypes.string.isRequired,
    rotation: PropTypes.number,
    scaleX: PropTypes.number,
    scaleY: PropTypes.number,
    stroke: PropTypes.string,
    strokeWidth: PropTypes.number,
    shadowOffsetX: PropTypes.number,
    shadowOffsetY: PropTypes.number,
    shadowBlur: PropTypes.number,
    shadowColor: PropTypes.string,
    shadowOpacity: PropTypes.number,
    opacity: PropTypes.number
  },
  defaults: {
    rotation: 0,
    scaleX: 1,
    scaleY: 1,
    stroke: undefined,
    strokeWidth: undefined,
    shadowOffsetX: undefined,
    shadowOffsetY: undefined,
    shadowBlur: undefined,
    shadowColor: undefined,
    shadowOpacity: undefined,
    opacity: 1
  }
};

const RectNode = ({
  id,
  name,
  fill,
  x,
  y,
  width,
  height,
  scaleX,
  scaleY,
  rotation,
  annotationEvents,
  stroke,
  strokeWidth,
  shadowOffsetX,
  shadowOffsetY,
  shadowBlur,
  shadowColor,
  shadowOpacity,
  opacity,
  cornerRadius,
  ...otherProps
}) => /*#__PURE__*/React__default.createElement(Rect, _extends$1({
  id: id,
  name: name,
  rotation: rotation,
  scaleX: scaleX,
  scaleY: scaleY,
  stroke: stroke,
  strokeWidth: strokeWidth,
  shadowOffsetX: shadowOffsetX,
  shadowOffsetY: shadowOffsetY,
  shadowBlur: shadowBlur,
  shadowColor: shadowColor,
  shadowOpacity: shadowOpacity,
  fill: fill,
  x: x,
  y: y,
  width: width,
  height: height,
  opacity: opacity,
  cornerRadius: cornerRadius
}, annotationEvents, otherProps));
RectNode.defaultProps = {
  ...nodesCommonPropTypes.defaults,
  fill: '#000',
  cornerRadius: 0,
  width: 0,
  height: 0
};
RectNode.propTypes = {
  ...nodesCommonPropTypes.definitions,
  x: PropTypes.number.isRequired,
  y: PropTypes.number.isRequired,
  annotationEvents: PropTypes.instanceOf(Object).isRequired,
  width: PropTypes.number,
  height: PropTypes.number,
  fill: PropTypes.string,
  cornerRadius: PropTypes.number
};

const EllipseNode = ({
  id,
  name,
  fill,
  x,
  y,
  radiusX,
  radiusY,
  scaleX,
  scaleY,
  rotation,
  annotationEvents,
  stroke,
  strokeWidth,
  shadowOffsetX,
  shadowOffsetY,
  shadowBlur,
  shadowColor,
  shadowOpacity,
  opacity,
  ...otherProps
}) => /*#__PURE__*/React__default.createElement(Ellipse$2, _extends$1({
  id: id,
  name: name,
  rotation: rotation,
  scaleX: scaleX,
  scaleY: scaleY,
  stroke: stroke,
  strokeWidth: strokeWidth,
  shadowOffsetX: shadowOffsetX,
  shadowOffsetY: shadowOffsetY,
  shadowBlur: shadowBlur,
  shadowColor: shadowColor,
  shadowOpacity: shadowOpacity,
  fill: fill,
  x: x,
  y: y,
  radiusX: radiusX,
  radiusY: radiusY,
  offsetX: -radiusX,
  offsetY: -radiusY,
  opacity: opacity
}, annotationEvents, otherProps));
EllipseNode.defaultProps = {
  ...nodesCommonPropTypes.defaults,
  fill: '#000',
  radiusX: 0,
  radiusY: 0
};
EllipseNode.propTypes = {
  ...nodesCommonPropTypes.definitions,
  x: PropTypes.number.isRequired,
  y: PropTypes.number.isRequired,
  annotationEvents: PropTypes.instanceOf(Object).isRequired,
  radiusX: PropTypes.number,
  radiusY: PropTypes.number,
  fill: PropTypes.string
};

const PolygonNode = ({
  id,
  name,
  fill,
  x,
  y,
  radius,
  scaleX,
  scaleY,
  rotation,
  sides,
  annotationEvents,
  stroke,
  strokeWidth,
  shadowOffsetX,
  shadowOffsetY,
  shadowBlur,
  shadowColor,
  shadowOpacity,
  opacity,
  ...otherProps
}) => /*#__PURE__*/React__default.createElement(RegularPolygon, _extends$1({
  id: id,
  name: name,
  rotation: rotation,
  scaleX: scaleX,
  scaleY: scaleY,
  stroke: stroke,
  strokeWidth: strokeWidth,
  shadowOffsetX: shadowOffsetX,
  shadowOffsetY: shadowOffsetY,
  shadowBlur: shadowBlur,
  shadowColor: shadowColor,
  shadowOpacity: shadowOpacity,
  fill: fill,
  x: x,
  y: y,
  radius: radius,
  offsetX: -radius,
  offsetY: -radius,
  sides: sides,
  opacity: opacity
}, annotationEvents, otherProps));
PolygonNode.defaultProps = {
  ...nodesCommonPropTypes.defaults,
  fill: '#000',
  sides: 3
};
PolygonNode.propTypes = {
  ...nodesCommonPropTypes.definitions,
  x: PropTypes.number.isRequired,
  y: PropTypes.number.isRequired,
  annotationEvents: PropTypes.instanceOf(Object).isRequired,
  radius: PropTypes.number.isRequired,
  fill: PropTypes.string,
  sides: PropTypes.number
};

const TextNode = ({
  id,
  name,
  text,
  fontFamily,
  fontSize,
  fontStyle,
  fill,
  x,
  y,
  width,
  height,
  scaleX,
  scaleY,
  rotation,
  annotationEvents,
  stroke,
  strokeWidth,
  shadowOffsetX,
  shadowOffsetY,
  shadowBlur,
  shadowColor,
  shadowOpacity,
  opacity,
  letterSpacing,
  lineHeight,
  align,
  ...otherProps
}) => /*#__PURE__*/React__default.createElement(Text$3, _extends$1({
  id: id,
  name: name,
  rotation: rotation,
  scaleX: scaleX,
  scaleY: scaleY,
  stroke: stroke,
  strokeWidth: strokeWidth,
  shadowOffsetX: shadowOffsetX,
  shadowOffsetY: shadowOffsetY,
  shadowBlur: shadowBlur,
  shadowColor: shadowColor,
  shadowOpacity: shadowOpacity,
  opacity: opacity,
  fill: fill,
  text: text,
  fontFamily: fontFamily,
  fontStyle: fontStyle,
  fontSize: fontSize,
  letterSpacing: letterSpacing,
  lineHeight: lineHeight,
  align: align,
  x: x,
  y: y,
  width: width,
  height: height
}, annotationEvents, otherProps));
TextNode.defaultProps = {
  ...nodesCommonPropTypes.defaults,
  text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur imperdiet tortor quis odio facilisis, id aliquet nulla facilisis. Etiam tincidunt tempor odio nec placerat.',
  fontFamily: 'Arial',
  fontSize: 14,
  fill: '#000',
  width: 0,
  height: 0,
  letterSpacing: undefined,
  lineHeight: undefined,
  align: 'left'
};
TextNode.propTypes = {
  ...nodesCommonPropTypes.definitions,
  x: PropTypes.number.isRequired,
  y: PropTypes.number.isRequired,
  annotationEvents: PropTypes.instanceOf(Object).isRequired,
  width: PropTypes.number,
  height: PropTypes.number,
  text: PropTypes.string,
  fontFamily: PropTypes.string,
  fontSize: PropTypes.number,
  fill: PropTypes.string,
  letterSpacing: PropTypes.number,
  lineHeight: PropTypes.number,
  align: PropTypes.string
};

const extractNameFromUrl = url => {
  const urlParts = url.split('/');
  return urlParts[urlParts.length - 1].split('?')[0];
};

const loadImage = (imageSrc, imageFileName, noCrossOrigin = false) => new Promise((resolve, reject) => {
  const imageElement = new Image();
  if (!noCrossOrigin) {
    imageElement.crossOrigin = 'Anonymous';
  }
  imageElement.src = imageSrc;
  imageElement.name = imageFileName ?? extractNameFromUrl(imageSrc);
  imageElement.onload = () => {
    resolve(imageElement);
  };
  imageElement.onerror = () => {
    reject(new Error(`Error in loading the image with the provided url: ${imageSrc}`));
  };
});

const ImageNode = ({
  id,
  name,
  image,
  x,
  y,
  width,
  height,
  scaleX,
  scaleY,
  rotation,
  annotationEvents,
  stroke,
  strokeWidth,
  shadowOffsetX,
  shadowOffsetY,
  shadowBlur,
  shadowColor,
  shadowOpacity,
  opacity,
  ...otherProps
}) => {
  const [imgElement, setImgElement] = useState(null);
  useEffect(() => {
    if (typeof image === 'string') {
      loadImage(image).then(setImgElement);
    }
  }, [image]);
  const isImgElement = image instanceof HTMLImageElement;
  if (!isImgElement && !imgElement) {
    return null;
  }
  const finalImg = isImgElement ? image : imgElement;
  return /*#__PURE__*/React__default.createElement(Image$1, _extends$1({
    id: id,
    name: name,
    rotation: rotation,
    scaleX: scaleX,
    scaleY: scaleY,
    stroke: stroke,
    strokeWidth: strokeWidth,
    shadowOffsetX: shadowOffsetX,
    shadowOffsetY: shadowOffsetY,
    shadowBlur: shadowBlur,
    shadowColor: shadowColor,
    shadowOpacity: shadowOpacity,
    image: finalImg,
    x: x,
    y: y,
    width: width,
    height: height,
    opacity: opacity
  }, otherProps, annotationEvents, otherProps));
};
ImageNode.defaultProps = {
  ...nodesCommonPropTypes.defaults,
  width: 0,
  height: 0
};
ImageNode.propTypes = {
  ...nodesCommonPropTypes.definitions,
  image: PropTypes.oneOfType([PropTypes.instanceOf(HTMLImageElement), PropTypes.instanceOf(SVGImageElement),
  // PropTypes.instanceOf(HTMLVideoElement),
  PropTypes.instanceOf(ImageBitmap), PropTypes.string]).isRequired,
  x: PropTypes.number.isRequired,
  y: PropTypes.number.isRequired,
  annotationEvents: PropTypes.instanceOf(Object).isRequired,
  width: PropTypes.number,
  height: PropTypes.number
};

const LineNode = ({
  id,
  name,
  scaleX,
  scaleY,
  rotation,
  annotationEvents,
  points,
  lineCap,
  stroke,
  strokeWidth,
  shadowOffsetX,
  shadowOffsetY,
  shadowBlur,
  shadowColor,
  shadowOpacity,
  tension,
  opacity,
  ...otherProps
}) => /*#__PURE__*/React__default.createElement(Line$2, _extends$1({
  id: id,
  name: name,
  rotation: rotation,
  scaleX: scaleX,
  scaleY: scaleY,
  stroke: stroke,
  strokeWidth: strokeWidth,
  shadowOffsetX: shadowOffsetX,
  shadowOffsetY: shadowOffsetY,
  shadowBlur: shadowBlur,
  shadowColor: shadowColor,
  shadowOpacity: shadowOpacity,
  points: points,
  lineCap: lineCap,
  tension: tension,
  hitStrokeWidth: 20,
  x: 0,
  y: 0,
  opacity: opacity
}, annotationEvents, otherProps));
LineNode.defaultProps = {
  ...nodesCommonPropTypes.defaults,
  stroke: '#000000',
  strokeWidth: 1,
  lineCap: 'butt',
  // butt/round/square
  annotationEvents: {},
  tension: undefined
};
LineNode.propTypes = {
  ...nodesCommonPropTypes.definitions,
  points: PropTypes.instanceOf(Array).isRequired,
  annotationEvents: PropTypes.instanceOf(Object),
  lineCap: PropTypes.string,
  tension: PropTypes.number
};

const ArrowNode = ({
  id,
  name,
  fill,
  pointerLength,
  pointerWidth,
  scaleX,
  scaleY,
  rotation,
  annotationEvents,
  points,
  lineCap,
  stroke,
  strokeWidth,
  shadowOffsetX,
  shadowOffsetY,
  shadowBlur,
  shadowColor,
  shadowOpacity,
  opacity,
  ...otherProps
}) => /*#__PURE__*/React__default.createElement(Arrow$3, _extends$1({
  id: id,
  name: name,
  rotation: rotation,
  scaleX: scaleX,
  scaleY: scaleY,
  stroke: stroke,
  strokeWidth: strokeWidth,
  shadowOffsetX: shadowOffsetX,
  shadowOffsetY: shadowOffsetY,
  shadowBlur: shadowBlur,
  shadowColor: shadowColor,
  shadowOpacity: shadowOpacity,
  fill: fill,
  x: 0,
  y: 0,
  points: points,
  pointerLength: pointerLength,
  pointerWidth: pointerWidth,
  lineCap: lineCap,
  opacity: opacity
}, annotationEvents, otherProps));
ArrowNode.defaultProps = {
  ...nodesCommonPropTypes.defaults,
  stroke: '#000000',
  strokeWidth: 6,
  fill: undefined,
  lineCap: 'butt',
  pointerLength: undefined,
  pointerWidth: undefined
};
ArrowNode.propTypes = {
  ...nodesCommonPropTypes.definitions,
  points: PropTypes.instanceOf(Array).isRequired,
  annotationEvents: PropTypes.instanceOf(Object).isRequired,
  pointerLength: PropTypes.number,
  pointerWidth: PropTypes.number,
  fill: PropTypes.string,
  lineCap: PropTypes.string
};

/** Internal Dependencies */
const ANNOTATION_NAMES_TO_COMPONENT = {
  [TOOLS_IDS.RECT]: RectNode,
  [TOOLS_IDS.ELLIPSE]: EllipseNode,
  [TOOLS_IDS.POLYGON]: PolygonNode,
  [TOOLS_IDS.TEXT]: TextNode,
  [TOOLS_IDS.IMAGE]: ImageNode,
  [TOOLS_IDS.LINE]: LineNode,
  [TOOLS_IDS.ARROW]: ArrowNode,
  [TOOLS_IDS.PEN]: LineNode
};

const MemoizedAnnotation = ({
  annotation,
  annotationEvents,
  selectionsIds
}) => {
  const AnnotationComponent = ANNOTATION_NAMES_TO_COMPONENT[annotation.name];
  if (!AnnotationComponent) return null;
  return /*#__PURE__*/React__default.createElement(AnnotationComponent, _extends$1({
    key: annotation.id,
    annotationEvents: annotationEvents,
    draggable: selectionsIds.includes(annotation.id)
  }, annotation));
};
MemoizedAnnotation.propTypes = {
  annotation: PropTypes.instanceOf(Object).isRequired,
  annotationEvents: PropTypes.instanceOf(Object).isRequired,
  selectionsIds: PropTypes.instanceOf(Object).isRequired
};
var MemoizedAnnotation$1 = /*#__PURE__*/memo(MemoizedAnnotation);

/** External Dependencies */
const AnnotationNodes = () => {
  const {
    annotations = {},
    selectionsIds = []
  } = useStore();
  const annotationEvents = useAnnotationEvents();
  return useMemo(() => Object.values(annotations).map(annotation => /*#__PURE__*/React__default.createElement(MemoizedAnnotation$1, {
    key: annotation.id,
    annotation: annotation,
    annotationEvents: annotationEvents,
    selectionsIds: selectionsIds
  })), [annotations, annotationEvents, selectionsIds]);
};

const PreviewGroup = (props, ref) => {
  return /*#__PURE__*/React__default.createElement(Group, _extends$1({
    ref: ref
  }, props));
};
var PreviewGroup$1 = /*#__PURE__*/forwardRef(PreviewGroup);

const CANVAS_TO_IMG_SPACING = getProperImageToCanvasSpacing();
const MIN_SPACED_WIDTH = 10; // As sometimes the spaced width is less than that and it might be hard to view the image initially.

const DesignLayer = () => {
  const designLayerRef = useRef();
  const {
    initialCanvasWidth,
    initialCanvasHeight,
    canvasWidth,
    canvasHeight,
    dispatch,
    toolId,
    canvasScale,
    originalImage = {},
    finetunes = [],
    finetunesProps = {},
    filter = null,
    adjustments: {
      rotation = 0,
      crop = {},
      isFlippedX,
      isFlippedY
    } = {},
    resize,
    isSaving,
    config = {}
  } = useStore();
  const {
    backgroundColor,
    backgroundImage
  } = config;
  const imageNodeRef = useRef();
  const previewGroupRef = useRef();
  const isCurrentlyCropping = toolId === TOOLS_IDS.CROP;
  const finetunesAndFilter = useMemo(() => filter ? [...finetunes, filter] : finetunes, [finetunes, filter]);
  const spacedOriginalImg = useMemo(() => {
    const spacedWidth = Math.max(MIN_SPACED_WIDTH, originalImage.width - CANVAS_TO_IMG_SPACING);
    const imgRatio = originalImage.width / originalImage.height;
    return {
      width: spacedWidth,
      height: spacedWidth / imgRatio
    };
  }, [originalImage]);
  const originalImgSizeAfterRotation = useMemo(() => getSizeAfterRotation(originalImage.width, originalImage.height, rotation), [originalImage, rotation]);
  const originalImgInitialScale = useMemo(() => getDimensionsMinimalRatio(initialCanvasWidth, initialCanvasHeight, originalImage.width, originalImage.height), [originalImage, initialCanvasWidth, initialCanvasHeight]);
  const scaledSpacedOriginalImg = useMemo(() => ({
    width: spacedOriginalImg.width * originalImgInitialScale,
    height: spacedOriginalImg.height * originalImgInitialScale
  }), [spacedOriginalImg, originalImgInitialScale]);
  const resizedX = resize.width && !isCurrentlyCropping ? resize.width / (crop.width ?? scaledSpacedOriginalImg.width ?? originalImgSizeAfterRotation.width) : 1;
  const resizedY = resize.height && !isCurrentlyCropping ? resize.height / (crop.height ?? scaledSpacedOriginalImg.height ?? originalImgSizeAfterRotation.height) : 1;
  const xPointToCenterImgInCanvas = canvasWidth / (2 * canvasScale) - scaledSpacedOriginalImg.width * resizedX / 2;
  const yPointToCenterImgInCanvas = canvasHeight / (2 * canvasScale) - scaledSpacedOriginalImg.height * resizedY / 2;
  const xPointNoResizeNoCrop = canvasWidth / (2 * canvasScale) - scaledSpacedOriginalImg.width / 2;
  const yPointNoResizeNoCrop = canvasHeight / (2 * canvasScale) - scaledSpacedOriginalImg.height / 2;
  const imageDimensions = useMemo(() => ({
    x: Math.round(xPointToCenterImgInCanvas),
    y: Math.round(yPointToCenterImgInCanvas),
    abstractX: Math.round(xPointNoResizeNoCrop),
    abstractY: Math.round(yPointNoResizeNoCrop),
    width: scaledSpacedOriginalImg.width,
    height: scaledSpacedOriginalImg.height,
    scaledBy: canvasScale
  }), [canvasScale, xPointToCenterImgInCanvas, yPointToCenterImgInCanvas, xPointNoResizeNoCrop, yPointNoResizeNoCrop, scaledSpacedOriginalImg]);
  const clipFunc = ctx => {
    // We are using isSaving to apply ellitpical crop if we're saving the image while in crop tool and it's elliptical crop ratio,
    // As elliptical crop isn't applied while in crop tool.
    const isCroppingAndNotSaving = isCurrentlyCropping && !designLayerRef.current?.attrs?.isSaving;
    const clipBox = isCroppingAndNotSaving || crop.noEffect ? {
      ...imageDimensions,
      x: 0,
      y: 0
    } : {
      width: crop.width || imageDimensions.width,
      height: crop.height || imageDimensions.height,
      x: crop.x || 0,
      y: crop.y || 0
    };
    cropImage(ctx, {
      ratio: crop.ratio,
      ...clipBox
    }, isCroppingAndNotSaving);
    if (designLayerRef.current) {
      designLayerRef.current.setAttrs({
        clipX: clipBox.x,
        clipY: clipBox.y,
        clipWidth: clipBox.width,
        clipHeight: clipBox.height
      });
    }
  };
  const cacheImageNode = useCallback(() => {
    if (imageNodeRef.current) {
      imageNodeRef.current.cache();
    } else {
      setTimeout(cacheImageNode, 0);
    }
  }, []);
  const sizeAfterRotation = getSizeAfterRotation(imageDimensions.width, imageDimensions.height, rotation);
  const scaleAfterRotation = !isCurrentlyCropping ? getDimensionsMinimalRatio(imageDimensions.width, imageDimensions.height, sizeAfterRotation.width, sizeAfterRotation.height) : 1;
  useEffect(() => {
    if (originalImage) {
      cacheImageNode();
    }
    return () => {
      imageNodeRef.current?.clearCache();
    };
  }, [originalImage]);
  useEffect(() => {
    if (imageDimensions) {
      dispatch({
        type: SET_SHOWN_IMAGE_DIMENSIONS,
        payload: {
          shownImageDimensions: imageDimensions,
          designLayer: designLayerRef.current,
          previewGroup: previewGroupRef.current
        }
      });
    }
  }, [imageDimensions]);
  if (!xPointToCenterImgInCanvas || !yPointToCenterImgInCanvas || !imageDimensions) {
    return null;
  }
  const cropCenterRotatedPoint = getCenterRotatedPoint(crop.x, crop.y, rotation);
  const xPointAfterCrop = xPointToCenterImgInCanvas + (!isCurrentlyCropping && crop.width ? (imageDimensions.width / 2 - crop.x - crop.width / 2 + cropCenterRotatedPoint.x) * resizedX : 0);
  const yPointAfterCrop = yPointToCenterImgInCanvas + (!isCurrentlyCropping && crop.height ? (imageDimensions.height / 2 - crop.y - crop.height / 2 + cropCenterRotatedPoint.y) * resizedY : 0);
  const xPoint = isCurrentlyCropping ? xPointNoResizeNoCrop : xPointAfterCrop;
  const yPoint = isCurrentlyCropping ? yPointNoResizeNoCrop : yPointAfterCrop;
  const finalScaleX = (isCurrentlyCropping ? 1 : resizedX) * scaleAfterRotation;
  const finalScaleY = (isCurrentlyCropping ? 1 : resizedY) * scaleAfterRotation;
  return /*#__PURE__*/React__default.createElement(Layer, {
    id: DESIGN_LAYER_ID,
    ref: designLayerRef,
    xPadding: xPoint,
    yPadding: yPoint,
    offsetX: scaledSpacedOriginalImg.width / 2,
    offsetY: scaledSpacedOriginalImg.height / 2,
    x: scaledSpacedOriginalImg.width * resizedX / 2 + xPoint,
    y: scaledSpacedOriginalImg.height * resizedY / 2 + yPoint,
    scaleX: finalScaleX,
    scaleY: finalScaleY,
    rotation: isCurrentlyCropping ? 0 : rotation,
    clipFunc: clipFunc
  }, !isSaving && /*#__PURE__*/React__default.createElement(Rect, {
    x: isFlippedX ? scaledSpacedOriginalImg.width : 0,
    y: isFlippedY ? scaledSpacedOriginalImg.height : 0,
    fill: backgroundColor,
    fillPatternImage: backgroundImage,
    fillPatternRepeat: "repeat",
    width: scaledSpacedOriginalImg.width,
    height: scaledSpacedOriginalImg.height,
    listening: false,
    scaleX: isFlippedX ? -1 : 1,
    scaleY: isFlippedY ? -1 : 1
  }), /*#__PURE__*/React__default.createElement(Image$1, _extends$1({
    id: IMAGE_NODE_ID,
    image: originalImage,
    width: scaledSpacedOriginalImg.width,
    height: scaledSpacedOriginalImg.height,
    offsetX: scaledSpacedOriginalImg.width / 2,
    offsetY: scaledSpacedOriginalImg.height / 2,
    x: scaledSpacedOriginalImg.width / 2,
    y: scaledSpacedOriginalImg.height / 2,
    listening: false,
    filters: finetunesAndFilter,
    ref: imageNodeRef,
    scaleX: isFlippedX ? -1 : 1,
    scaleY: isFlippedY ? -1 : 1
  }, finetunesProps)), /*#__PURE__*/React__default.createElement(AnnotationNodes, null), /*#__PURE__*/React__default.createElement(PreviewGroup$1, {
    ref: previewGroupRef
  }));
};

const compareRatios = (ratio1, ratio2) => toPrecisedFloat(ratio1) === toPrecisedFloat(ratio2);

const boundDragging = (newDimensions, allowedArea) => {
  const maxAllowedX = allowedArea.width - (newDimensions.radiusX * 2 || newDimensions.width);
  const maxAllowedY = allowedArea.height - (newDimensions.radiusY * 2 || newDimensions.height);
  return {
    x: toPrecisedFloat(Math.min(Math.max(newDimensions.x, 0), maxAllowedX)),
    y: toPrecisedFloat(Math.min(Math.max(newDimensions.y, 0), maxAllowedY))
  };
};
const getPositionByPlaceLabel = (position, allowedArea, currentDimensions) => {
  const [yPlace, xPlace] = position.split('-');
  const newPosition = {
    x: 0,
    y: 0
  };
  if (yPlace === 'center') {
    newPosition.y = allowedArea.height / 2 - currentDimensions.height / 2;
  } else if (yPlace === 'bottom') {
    newPosition.y = allowedArea.height - currentDimensions.height;
  }
  if (xPlace === 'center') {
    newPosition.x = allowedArea.width / 2 - currentDimensions.width / 2;
  } else if (xPlace === 'right') {
    newPosition.x = allowedArea.width - currentDimensions.width;
  }
  return newPosition;
};
const boundResizing = (oldDimensions, newDimensions, allowedArea, ratio, cropRestrictions = {}) => {
  const scaledAllowedArea = {
    x: toPrecisedFloat(allowedArea.abstractX * allowedArea.scaledBy),
    y: toPrecisedFloat(allowedArea.abstractY * allowedArea.scaledBy),
    width: toPrecisedFloat(allowedArea.width * (cropRestrictions.noScale ? 1 : allowedArea.scaledBy)),
    height: toPrecisedFloat(allowedArea.height * (cropRestrictions.noScale ? 1 : allowedArea.scaledBy))
  };
  const boundedDimensions = {
    ...newDimensions
  };
  if (newDimensions.x < scaledAllowedArea.x) {
    boundedDimensions.x = scaledAllowedArea.x;
    boundedDimensions.width = oldDimensions.x - scaledAllowedArea.x + oldDimensions.width;
  }
  if (newDimensions.y < scaledAllowedArea.y) {
    boundedDimensions.y = scaledAllowedArea.y;
    boundedDimensions.height = oldDimensions.y - scaledAllowedArea.y + oldDimensions.height;
  }
  if (boundedDimensions.x + boundedDimensions.width > scaledAllowedArea.x + scaledAllowedArea.width) {
    boundedDimensions.width = scaledAllowedArea.x + scaledAllowedArea.width - boundedDimensions.x;
  }
  if (boundedDimensions.y + boundedDimensions.height > scaledAllowedArea.y + scaledAllowedArea.height) {
    boundedDimensions.height = scaledAllowedArea.y + scaledAllowedArea.height - boundedDimensions.y;
  }
  if (typeof ratio === 'number' && !compareRatios(boundedDimensions.width / boundedDimensions.height, ratio)) {
    const ratioedBoundedWidth = boundedDimensions.height * ratio;
    const ratioedBoundedHeight = boundedDimensions.width / ratio;
    if (toPrecisedFloat(boundedDimensions.y + ratioedBoundedHeight) <= scaledAllowedArea.y + scaledAllowedArea.height) {
      boundedDimensions.height = ratioedBoundedHeight;
    } else {
      boundedDimensions.width = ratioedBoundedWidth;
    }
  }
  if (cropRestrictions.minWidth && boundedDimensions.width <= cropRestrictions.minWidth || cropRestrictions.maxWidth && boundedDimensions.width >= cropRestrictions.maxWidth) {
    boundedDimensions.width = restrictNumber(boundedDimensions.width, cropRestrictions.minWidth, cropRestrictions.maxWidth);
    boundedDimensions.x = oldDimensions.x;
    boundedDimensions.y = oldDimensions.y;
    if (typeof ratio === 'number') {
      boundedDimensions.height = boundedDimensions.width / ratio;
    }
  }
  if (cropRestrictions.minHeight && newDimensions.height <= cropRestrictions.minHeight || cropRestrictions.maxHeight && newDimensions.height >= cropRestrictions.maxHeight) {
    boundedDimensions.height = restrictNumber(boundedDimensions.height, cropRestrictions.minHeight, cropRestrictions.maxHeight);
    boundedDimensions.x = oldDimensions.x;
    boundedDimensions.y = oldDimensions.y;
    if (typeof ratio === 'number') {
      boundedDimensions.width = boundedDimensions.height * ratio;
    }
  }
  if (typeof cropRestrictions.lockCropAreaAt === 'string') {
    const {
      x,
      y
    } = getPositionByPlaceLabel(cropRestrictions.lockCropAreaAt, scaledAllowedArea, boundedDimensions);
    boundedDimensions.x = x;
    boundedDimensions.y = y;
  }
  return boundedDimensions;
};

const noEffectTextDimensions = {
  width: 200,
  height: 100
};
const CropTransformer = () => {
  const {
    dispatch,
    theme,
    designLayer,
    originalImage,
    shownImageDimensions,
    adjustments: {
      crop = {},
      isFlippedX,
      isFlippedY
    } = {},
    resize = {},
    config,
    t
  } = useStore();
  const cropShapeRef = useRef();
  const cropTransformerRef = useRef();
  const tmpImgNodeRef = useRef();
  const shownImageDimensionsRef = useRef();
  const cropConfig = config[TOOLS_IDS.CROP];
  const cropSettings = useMemo(() => ({
    ...cropConfig,
    lockCropAreaAt: crop.lockCropAreaAt ?? cropConfig?.lockCropAreaAt
  }), [crop.lockCropAreaAt, cropConfig]);
  const {
    lockCropAreaAt
  } = cropSettings;
  const cropRatio = crop.ratio || cropSettings.ratio;
  const isCustom = cropRatio === CUSTOM_CROP;
  const isEllipse = cropRatio === ELLIPSE_CROP;
  const getProperCropRatio = () => cropRatio === ORIGINAL_CROP ? originalImage.width / originalImage.height : cropRatio;
  const saveCrop = ({
    width,
    height,
    x,
    y
  }, noHistory) => {
    const newCrop = {
      x,
      y,
      width,
      height
    };
    const isOldCropBiggerThanResize = crop.width >= resize.width && crop.height >= resize.height;
    if (resize.width && resize.height && (width < resize.width || height < resize.height) && isOldCropBiggerThanResize) {
      dispatch({
        type: SET_FEEDBACK,
        payload: {
          feedback: {
            message: t('cropSizeLowerThanResizedWarning'),
            status: FEEDBACK_STATUSES.WARNING
          }
        }
      });
    }
    dispatch({
      type: SET_CROP,
      payload: {
        ...crop,
        ...newCrop,
        dismissHistory: noHistory
      }
    });
  };
  const saveBoundedCropWithLatestConfig = (cropWidth, cropHeight, restrictions = {
    noScale: true
  }) => {
    if (cropTransformerRef.current && cropShapeRef.current) {
      cropTransformerRef.current.nodes([cropShapeRef.current]);
    }
    const imageDimensions = shownImageDimensionsRef.current;
    const attrs = {
      width: cropWidth,
      height: cropHeight,
      x: crop.x ?? 0,
      y: crop.y ?? 0
    };
    saveCrop(boundResizing(attrs, attrs, {
      ...imageDimensions,
      abstractX: 0,
      abstractY: 0
    }, isCustom || isEllipse ? false : getProperCropRatio(), {
      ...cropSettings,
      ...restrictions
    }), true);
  };
  useEffect(() => {
    if (designLayer && cropTransformerRef.current && cropShapeRef.current) {
      if (tmpImgNodeRef.current) {
        tmpImgNodeRef.current.cache();
      }
      cropTransformerRef.current.nodes([cropShapeRef.current]);
    }
    return () => {
      if (tmpImgNodeRef.current) {
        tmpImgNodeRef.current.clearCache();
      }
    };
  }, [designLayer, originalImage, shownImageDimensions]);
  useEffect(() => {
    if (shownImageDimensions) {
      shownImageDimensionsRef.current = shownImageDimensions;
      if (typeof shownImageDimensions.x !== 'undefined' && shownImageDimensions.width) {
        saveBoundedCropWithLatestConfig(crop.width ?? shownImageDimensions.width, crop.height ?? shownImageDimensions.height);
      }
    }
  }, [cropRatio, shownImageDimensions, cropSettings]);
  if (!designLayer) {
    return null;
  }
  const enabledAnchors = (lockCropAreaAt || crop.noEffect) && [] || (isCustom || isEllipse ? undefined : ['top-left', 'bottom-left', 'top-right', 'bottom-right']);
  const saveCropFromEvent = (e, noHistory = false) => {
    if (!e.target) {
      return;
    }
    saveCrop({
      width: e.target.width() * e.target.scaleX(),
      height: e.target.height() * e.target.scaleY(),
      x: e.target.x(),
      y: e.target.y()
    }, noHistory);
  };
  const limitDragging = e => {
    const currentCropShape = e.target;
    currentCropShape.setAttrs(boundDragging(currentCropShape.attrs, shownImageDimensionsRef.current));
  };
  let attrs;
  if (!crop.width && !crop.height) {
    const scaleFactor = shownImageDimensions.scaledBy < 1 ? shownImageDimensions.scaledBy : 1;
    const unscaledImgDimensions = {
      ...shownImageDimensions,
      width: shownImageDimensions.width / scaleFactor,
      height: shownImageDimensions.height / scaleFactor
    };
    attrs = boundResizing(unscaledImgDimensions, {
      ...unscaledImgDimensions,
      x: 0,
      y: 0
    }, {
      ...unscaledImgDimensions,
      abstractX: 0,
      abstractY: 0
    }, isCustom || isEllipse ? false : getProperCropRatio(), cropSettings);
  } else {
    attrs = crop;
  }
  const {
    x = 0,
    y = 0,
    width,
    height
  } = attrs;
  const cropShapeProps = {
    x,
    y,
    ref: cropShapeRef,
    fill: '#FFFFFF',
    scaleX: 1,
    scaleY: 1,
    globalCompositeOperation: 'destination-out',
    onDragEnd: lockCropAreaAt ? undefined : saveCropFromEvent,
    onDragMove: lockCropAreaAt ? undefined : limitDragging,
    onTransformEnd: lockCropAreaAt ? undefined : saveCropFromEvent,
    draggable: !lockCropAreaAt
  };

  // ALT is used to center scaling
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Image$1, {
    image: originalImage,
    x: isFlippedX ? shownImageDimensions.width : 0,
    y: isFlippedY ? shownImageDimensions.height : 0,
    width: shownImageDimensions.width,
    height: shownImageDimensions.height,
    filters: [Konva$2.Filters.Blur, Konva$2.Filters.Brighten],
    blurRadius: 10,
    brightness: -0.3,
    scaleX: isFlippedX ? -1 : 1,
    scaleY: isFlippedY ? -1 : 1,
    ref: tmpImgNodeRef
  }), isEllipse ? /*#__PURE__*/React__default.createElement(Ellipse$2, _extends$1({}, cropShapeProps, {
    radiusX: width / 2,
    radiusY: height / 2,
    offset: {
      x: -width / 2,
      y: -height / 2
    }
  })) : /*#__PURE__*/React__default.createElement(Rect, _extends$1({}, cropShapeProps, {
    width: crop.noEffect ? 0 : width,
    height: crop.noEffect ? 0 : height
  })), crop.noEffect && /*#__PURE__*/React__default.createElement(TextNode, {
    name: "Text",
    id: "no-preview-text-node",
    text: t('cropItemNoEffect'),
    x: shownImageDimensions.width / 2 - noEffectTextDimensions.width / 2,
    y: shownImageDimensions.height / 2 - noEffectTextDimensions.height / 2,
    fontSize: 20,
    fill: "#ffffff",
    stroke: "#ff0000",
    strokeWidth: 0.2,
    shadowColor: "#ff0000",
    shadowBlur: 10,
    annotationEvents: {},
    align: "center",
    width: noEffectTextDimensions.width,
    height: noEffectTextDimensions.height
  }), /*#__PURE__*/React__default.createElement(Transformer, {
    centeredScaling: false,
    flipEnabled: false,
    rotateEnabled: false,
    nodes: cropShapeRef.current ? [cropShapeRef.current] : [],
    anchorSize: 14,
    anchorCornerRadius: 7,
    enabledAnchors: enabledAnchors,
    ignoreStroke: false,
    anchorStroke: theme.palette['accent-primary'],
    anchorFill: theme.palette['access-primary'],
    anchorStrokeWidth: 2,
    borderStroke: theme.palette['accent-primary'],
    borderStrokeWidth: 2,
    borderDash: [4],
    keepRatio: !isCustom || !isEllipse,
    ref: cropTransformerRef,
    boundBoxFunc: (absOldBox, absNewBox) => boundResizing(absOldBox, absNewBox, shownImageDimensionsRef.current, isCustom || isEllipse ? false : getProperCropRatio(), cropSettings)
  }));
};

/** External Dependencies */
const NodesTransformer = () => {
  const {
    selectionsIds = [],
    theme,
    designLayer,
    dispatch,
    config: {
      useCloudimage
    }
  } = useStore();
  const selections = useMemo(() => designLayer?.findOne ? selectionsIds.map(selectionId => designLayer.findOne(`#${selectionId}`)).filter(Boolean) : [], [selectionsIds]);
  const changePointerIconToMove = () => {
    dispatch({
      type: CHANGE_POINTER_ICON,
      payload: {
        pointerCssIcon: POINTER_ICONS.MOVE
      }
    });
  };
  const changePointerIconToDraw = () => {
    dispatch({
      type: CHANGE_POINTER_ICON,
      payload: {
        pointerCssIcon: POINTER_ICONS.DRAW
      }
    });
  };
  const enableTextContentChangeOnDblClick = () => {
    if (selections.length === 1 && selections[0].name() === TOOLS_IDS.TEXT) {
      dispatch({
        type: ENABLE_TEXT_CONTENT_EDIT,
        payload: {
          textIdOfEditableContent: selections[0].id()
        }
      });
    }
  };
  const enabledAnchors = useCloudimage ? ['top-left', 'bottom-left', 'top-right', 'bottom-right'] : undefined;

  // ALT is used to center scaling
  // SHIFT is used to scaling with keeping ratio
  return /*#__PURE__*/React__default.createElement(Transformer, {
    id: NODES_TRANSFORMER_ID,
    centeredScaling: false,
    rotationSnaps: [0, 45, 90, 135, 180, 225, 270, 315],
    nodes: selections,
    rotateAnchorOffset: 30,
    anchorSize: 14,
    anchorCornerRadius: 7,
    padding: selections.length === 1 ? selections[0].attrs.padding ?? 1 : 1,
    ignoreStroke: false,
    anchorStroke: theme.palette['accent-primary'],
    anchorFill: theme.palette['access-primary'],
    anchorStrokeWidth: 2,
    borderStroke: theme.palette['accent-primary'],
    borderStrokeWidth: 2,
    borderDash: [4],
    rotateEnabled: !useCloudimage,
    onMouseOver: changePointerIconToMove,
    onMouseLeave: changePointerIconToDraw,
    onDblClick: enableTextContentChangeOnDblClick,
    onDblTap: enableTextContentChangeOnDblClick,
    enabledAnchors: enabledAnchors,
    flipEnabled: !useCloudimage,
    shouldOverdrawWholeArea: true
  });
};

/** External Dependencies */
const TransformersLayer = () => {
  const {
    toolId,
    shownImageDimensions
  } = useStore();
  return /*#__PURE__*/React__default.createElement(Layer, {
    id: TRANSFORMERS_LAYER_ID,
    x: shownImageDimensions.abstractX || 0,
    y: shownImageDimensions.abstractY || 0
  }, /*#__PURE__*/React__default.createElement(NodesTransformer, null), toolId === TOOLS_IDS.CROP && /*#__PURE__*/React__default.createElement(CropTransformer, null));
};

/** External Dependencies */
const StyledNodeControls = styled.div(({
  theme,
  top,
  left
}) => `
  position: absolute;
  z-index: 1;
  background: ${theme.palette["bg-secondary"]};
  border-radius: 50px;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0px 1px 2px ${theme.palette["light-shadow"]};
  top: ${(top || 0) + 8}px;
  left: ${(left || 0) + 4}px;
  transform: translateX(-50%);
  height: 32px;
  color: black;
  & > button {
    color: black;
  }
  & > button:hover {
    color: black;
    background-color: #dedede;
  }

  & > button:first-child:hover {
    border-top-left-radius: 50px;
    border-bottom-left-radius: 50px;
  }

  & > button:last-child:hover {
    border-top-right-radius: 50px;
    border-bottom-right-radius: 50px;
  }
`);

/** External Dependencies */
const NodeControls = () => {
  const {
    selectionsIds = [],
    designLayer,
    annotations,
    dispatch
  } = useStore();
  const [position, setPosition] = useState({
    left: 0,
    top: 0
  });
  const nodesTransformer = useMemo(() => designLayer?.getStage()?.findOne(`#${NODES_TRANSFORMER_ID}`), [designLayer]);
  const selectionsLength = selectionsIds.length;
  const updatePosition = debounce$1(() => {
    if (!nodesTransformer) {
      return;
    }
    setPosition({
      left: (nodesTransformer.x() + nodesTransformer.width() / 2) * nodesTransformer.scaleX(),
      top: (nodesTransformer.y() + nodesTransformer.height()) * nodesTransformer.scaleY()
    });
  }, 0);
  useEffect(() => {
    updatePosition();
  }, [selectionsIds, nodesTransformer, annotations]);
  if (selectionsLength === 0 || !nodesTransformer) return null;

  // TODO: Implemenet annotation ordering.
  // const changeAnnotationOrder = () => {};

  const duplicateSelectedNodes = () => {
    dispatch({
      type: DUPLICATE_ANNOTATIONS,
      payload: {
        annotationsIds: selectionsIds
      }
    });
  };
  const removeSelectedNodes = () => {
    dispatch({
      type: REMOVE_ANNOTATIONS,
      payload: {
        annotationsIds: selectionsIds
      }
    });
  };
  return /*#__PURE__*/React__default.createElement(StyledNodeControls, {
    className: "FIE_annotation-controls-overlay",
    left: position.left,
    top: position.top
  }, selectionsIds[0] !== WATERMARK_ANNOTATION_ID$1 && /*#__PURE__*/React__default.createElement(IconButton$1, {
    color: "basic",
    size: "sm",
    onClick: duplicateSelectedNodes
  }, /*#__PURE__*/React__default.createElement(Duplicate$1, null)), /*#__PURE__*/React__default.createElement(IconButton$1, {
    color: "basic",
    size: "sm",
    onClick: removeSelectedNodes
  }, /*#__PURE__*/React__default.createElement(DeleteOutline$1, null)));
};

function getDistance(p1, p2) {
  return Math.sqrt((p2.x - p1.x) ** 2 + (p2.y - p1.y) ** 2);
}
function getCenter(p1, p2) {
  return {
    x: (p1.x + p2.x) / 2,
    y: (p1.y + p2.y) / 2
  };
}
let lastCenter = null;
let lastDist = 0;
const zoomOnTouchesMove = (e, saveZoomFn) => {
  e.evt.preventDefault();
  const touch1 = e.evt.touches[0];
  const touch2 = e.evt.touches[1];
  if (!touch1 || !touch2) {
    return;
  }
  const stageCanvas = e.currentTarget;
  // if the stageCanvas was under Konva's drag&drop
  // we need to stop it, and implement our own pan logic with two pointers
  if (stageCanvas.isDragging()) {
    stageCanvas.stopDrag();
  }
  const p1 = {
    x: touch1.clientX,
    y: touch1.clientY
  };
  const p2 = {
    x: touch2.clientX,
    y: touch2.clientY
  };
  if (!lastCenter) {
    lastCenter = getCenter(p1, p2);
    return;
  }
  const newCenter = getCenter(p1, p2);
  const dist = getDistance(p1, p2);
  if (!lastDist) {
    lastDist = dist;
  }
  const currentZoomFactor = stageCanvas.attrs.zoomFactor || DEFAULT_ZOOM_FACTOR;

  // local coordinates of center point
  const pointTo = {
    x: (newCenter.x - stageCanvas.x()) / currentZoomFactor,
    y: (newCenter.y - stageCanvas.y()) / currentZoomFactor
  };
  const scale = (currentZoomFactor || DEFAULT_ZOOM_FACTOR) * (dist / lastDist);

  // calculate new position of the stageCanvas
  const dx = newCenter.x - lastCenter.x;
  const dy = newCenter.y - lastCenter.y;
  const newPos = {
    x: newCenter.x - pointTo.x * scale + dx,
    y: newCenter.y - pointTo.y * scale + dy
  };
  lastDist = dist;
  lastCenter = newCenter;
  saveZoomFn({
    ...newPos,
    factor: scale,
    preparedDimensions: true
  });
};
const endTouchesZooming = cb => {
  lastDist = 0;
  lastCenter = null;
  if (typeof cb === 'function') {
    cb();
  }
};

/** External Dependencies */
const CanvasContainer = styled.div`
  width: 100%;
  position: relative;
  // backup for flex-grow, 94px, 12px = toolsbar's maxheight, app container padding.
  height: calc(100% - 112px - 16px);
  overflow: hidden;
  min-height: 250px;
  padding: 16px;
  flex-grow: 1;
`;
const StyledOrignalImage = styled.img`
  max-width: 98%;
  max-height: 98%;
  box-shadow: 0 0 0 5px rgba(0, 0, 0, 0.1);
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 2;
`;
const StyledCanvasNode = styled(Stage)`
  outline: none;
`;

/** External Dependencies */
const ZOOM_DELTA_TO_SCALE_CONVERT_FACTOR = 0.006;
const CanvasNode = ({
  children
}) => {
  useStrictMode(true);
  const canvasRef = useRef();
  const {
    dispatch,
    pointerCssIcon,
    tabId,
    toolId,
    canvasWidth,
    canvasHeight,
    canvasScale,
    selectionsIds = [],
    zoom = {},
    config: {
      previewPixelRatio,
      disableZooming
    }
  } = useStore();
  Konva$2.pixelRatio = previewPixelRatio;
  const defaultZoomFactor = DEFAULT_ZOOM_FACTOR;
  const isZoomEnabled = !disableZooming && toolId !== TOOLS_IDS.CROP;
  const [isPanningEnabled, setIsPanningEnabled] = useState(tabId !== TABS_IDS.ANNOTATE && tabId !== TABS_IDS.WATERMARK && zoom.factor > defaultZoomFactor);
  const cursorStyle = useMemo(() => ({
    cursor: pointerCssIcon === POINTER_ICONS.DEFAULT && tabId === TABS_IDS.ANNOTATE ? POINTER_ICONS.DRAW : pointerCssIcon
  }), [tabId, pointerCssIcon]);
  const saveZoom = newZoomProps => {
    dispatch({
      type: ZOOM_CANVAS,
      payload: newZoomProps
    });
  };
  const handleCanvasDragEnd = e => {
    if (e.currentTarget.draggable() && e.target.nodeType.toLowerCase() === 'stage' && isZoomEnabled && isPanningEnabled) {
      saveZoom({
        factor: zoom.factor,
        x: e.target.x(),
        y: e.target.y(),
        preparedDimensions: true
      });
    }
  };
  const clearSelections = useCallback(e => {
    e.evt.preventDefault();
    e.currentTarget.container?.().focus();
    if (e.target instanceof Konva$2.Stage && selectionsIds.length > 0) {
      dispatch({
        type: CLEAR_ANNOTATIONS_SELECTIONS
      });
    }
  }, [selectionsIds]);
  const dragBoundFunc = pos => {
    const x = Math.min(0, Math.max(pos.x, canvasWidth * (1 - zoom.factor)));
    const y = Math.min(0, Math.max(pos.y, canvasHeight * (1 - zoom.factor)));
    return {
      x,
      y
    };
  };
  const handleZoom = e => {
    e.evt.preventDefault();
    const newScale = (zoom.factor || defaultZoomFactor) + e.evt.deltaY * -ZOOM_DELTA_TO_SCALE_CONVERT_FACTOR;
    const pointer = e.currentTarget.getPointerPosition();
    saveZoom({
      ...pointer,
      factor: newScale
    });
  };
  const preventDraggingIfMultiTouches = e => {
    if (e.evt.touches?.length > 1) {
      setIsPanningEnabled(false);
    }
  };
  const resetPanningAbility = () => setIsPanningEnabled(tabId !== TABS_IDS.ANNOTATE || tabId === TABS_IDS.WATERMARK);
  const endTouchesZoomingEnablePanning = () => {
    endTouchesZooming(resetPanningAbility);
  };
  const mapKeyboardKeys = e => {
    if ((e.code === 'Space' || e.key === 'Control') && !e.repeat && zoom.factor > defaultZoomFactor && isZoomEnabled) {
      e.preventDefault();
      setIsPanningEnabled(true);
      dispatch({
        type: CHANGE_POINTER_ICON,
        payload: {
          pointerCssIcon: POINTER_ICONS.DRAG
        }
      });
    }
  };
  const revertKeyboardKeysEffect = e => {
    if (e.code === 'Space') {
      e.preventDefault();
      resetPanningAbility();
    }
  };
  const focusCanvasOnEnter = () => {
    if (canvasRef.current) {
      canvasRef.current.container().focus();
    }
  };
  useEffect(() => {
    dispatch({
      type: CHANGE_POINTER_ICON,
      payload: {
        pointerCssIcon: POINTER_ICONS[isPanningEnabled ? 'DRAG' : 'DEFAULT']
      }
    });
  }, [isPanningEnabled]);
  useEffect(() => {
    setIsPanningEnabled(tabId !== TABS_IDS.ANNOTATE && tabId !== TABS_IDS.WATERMARK && zoom.factor > defaultZoomFactor);

    // Remove & register the event on changing tabId, zoom.factor, defaultZoomFactor to always access latest state.
    let canvasContainer;
    if (canvasRef.current) {
      canvasContainer = canvasRef.current.container();
      canvasContainer.addEventListener('mouseenter', focusCanvasOnEnter);
      canvasContainer.addEventListener('keydown', mapKeyboardKeys);
      canvasContainer.addEventListener('keyup', revertKeyboardKeysEffect);
    }
    return () => {
      if (canvasContainer) {
        canvasContainer.removeEventListener('mouseenter', focusCanvasOnEnter);
        canvasContainer.removeEventListener('keydown', mapKeyboardKeys);
        canvasContainer.removeEventListener('keyup', revertKeyboardKeysEffect);
      }
    };
  }, [tabId, zoom.factor, defaultZoomFactor]);

  // Zoom panning is done by dragging mouse except in annotate tab,
  // it's done by toggling panning through mouse right click (enable/disable) then drag mouse.
  const zoomedResponsiveCanvasScale = canvasScale * (isZoomEnabled && zoom.factor || defaultZoomFactor);
  return /*#__PURE__*/React__default.createElement(StyledCanvasNode, {
    className: "FIE_canvas-node",
    tabIndex: -1,
    ref: canvasRef,
    width: canvasWidth,
    height: canvasHeight,
    scaleX: zoomedResponsiveCanvasScale,
    scaleY: zoomedResponsiveCanvasScale,
    x: isZoomEnabled && zoom.x || null,
    y: isZoomEnabled && zoom.y || null,
    zoomFactor: isZoomEnabled && zoom.factor || defaultZoomFactor,
    onWheel: isZoomEnabled ? handleZoom : undefined,
    onTap: clearSelections,
    onClick: clearSelections,
    onTouchMove: isZoomEnabled ? e => zoomOnTouchesMove(e, saveZoom) : undefined,
    onDragStart: preventDraggingIfMultiTouches,
    onTouchEnd: isZoomEnabled ? endTouchesZoomingEnablePanning : undefined,
    dragBoundFunc: dragBoundFunc,
    draggable: isZoomEnabled && isPanningEnabled,
    onDragEnd: handleCanvasDragEnd,
    style: cursorStyle
  }, children);
};
CanvasNode.propTypes = {
  children: PropTypes.node.isRequired
};
var CanvasNode$1 = /*#__PURE__*/memo(CanvasNode);

/** External Dependencies */
const MainCanvas = () => {
  const [observeResize] = useResizeObserver();
  const providedAppContext = useStore();
  const canvasContainerRef = useRef(null);
  const setNewCanvasSize = useCallback(({
    width: containerWidth,
    height: containerHeight
  }) => {
    providedAppContext.dispatch({
      type: SET_CANVAS_SIZE,
      payload: {
        canvasWidth: containerWidth,
        canvasHeight: containerHeight
      }
    });
  }, []);
  useEffect(() => {
    observeResize(canvasContainerRef.current, setNewCanvasSize);
  }, []);
  return /*#__PURE__*/React__default.createElement(CanvasContainer, {
    className: "FIE_canvas-container",
    ref: canvasContainerRef
  }, !providedAppContext.textIdOfEditableContent && /*#__PURE__*/React__default.createElement(NodeControls, null), providedAppContext.isShowOriginalImage && /*#__PURE__*/React__default.createElement(StyledOrignalImage, {
    className: "FIE_original-image-compare",
    src: providedAppContext.originalImage.src
  }), /*#__PURE__*/React__default.createElement(CanvasNode$1, null, /*#__PURE__*/React__default.createElement(AppProviderOverridenValue, {
    overridingValue: providedAppContext
  }, /*#__PURE__*/React__default.createElement(DesignLayer, null), /*#__PURE__*/React__default.createElement(TransformersLayer, null))));
};

styled.div`
  display: inline-block;
  height: ${props => props.height};
  width: ${props => props.width};
  border-radius: 1px;
  background: ${({
  theme: {
    palette
  }
}) => palette[Color.BordersSecondary]};
`;

/** External Dependencies */
({
  height: PropTypes.string,
  width: PropTypes.string
});

/** External Dependencies */
const StyledTopbar = styled.div`
  padding: 16px;
  box-sizing: border-box;
  position: relative;
  width: 100%;
  display: flex;
  flex-wrap: wrap;
  gap: 16px;
  align-items: center;
  justify-content: space-between;
  border-bottom: 1px solid
    ${({
  theme: {
    palette
  }
}) => palette[Color.BordersSecondary]};

  [data-phone="true"] & {
    padding: 6px 6px 4px 6px;

    ${({
  isPhoneScreen
}) => isPhoneScreen && `
      padding: 12px 12px 0px;
      gap: 12px;
    `}
  }
`;
const StyledMainButtonsWrapper = styled.div`
  display: flex;
  align-items: center;
  order: 3;
`;
const StyledControlButtonsWrapper = styled.div`
  display: flex;
  align-items: center;
  order: 1;
  gap: 4px;
`;
const StyledHistoryButton = styled(IconButton$1)`
  margin: ${({
  margin
}) => margin ?? "0 4px"};
  color: black;
  &.FIE_topbar-undo-button {
    border-right: 1px solid #dedede;
    padding-right: 10px;
    padding-left: 10px;
    padding-top: 6px;
    padding-bottom: 6px;
    border-radius: 0px;
  }
  &.FIE_topbar-redo-button {
    padding-top: 6px;
    padding-bottom: 6px;
    padding-right: 10px;
    padding-left: 10px;
  }
  &.FIE_topbar-undo-button:hover {
    background-color: #dedede;
    border-bottom-left-radius: 50px;
    border-top-left-radius: 50px;
  }
  &.FIE_topbar-redo-button:hover {
    background-color: #dedede;
    border-bottom-right-radius: 50px;
    border-top-right-radius: 50px;
  }
  svg {
    color: ${({
  theme: {
    palette
  },
  disabled
}) => !disabled ? "black" : palette[Color.IconsMuted]};
  }
`;
const StyledZoomingWrapper = styled.div`
  display: flex;
  align-items: center;
  gap: 2px;
  border-radius: 20px;
  border: 1px solid #dedede;
  color: black;
`;
styled(Label$6)`
  flex-shrink: 0;
  color: ${({
  theme: {
    palette
  }
}) => palette[Color.TextPlaceholder]};
  ${({
  theme: {
    typography
  }
}) => typography.font[FontVariant.LabelMedium]};
`;
const StyledSmallButton = styled(IconButton$1)`
  padding: 8px;
  border-radius: 0px !important;
  &.FIE_topbar-zoom-out-btn {
    border-right: 1px solid #dedede;
    padding-left: 10px;
    padding-right: 10px;
  }
  &.FIE_topbar-zoom-in-btn {
    border-left: 1px solid #dedede;
    padding-left: 10px;
    padding-right: 10px;
  }
  svg {
    color: black;
  }

  &:hover {
    background-color: transparent;
  }

  &:focus {
    background-color: transparent;
  }
`;
const StyledFlexCenterAlignedContainer = styled.div`
  width: ${({
  $showBackButton
}) => $showBackButton ? "318px" : "384px"};
  height: 32px;
  display: block;
  width: 100%;
  order: 2;
  ${({
  reverseDirection
}) => reverseDirection ? "flex-direction: row-reverse" : ""};
  @media (min-width: 761px) {
    display: flex;
    align-items: center;
    justify-content: center;
    width: fit-content;
    order: 2;
  }
`;
const StyledZoomPercentageLabel = styled(Label$6)`
  cursor: pointer;
  color: black;
  padding: 0px 10px;
  font-size: 12px;
`;
const StyledBackButtonLabel = styled.span`
  color: black;
`;
const StyledCloseButton = styled(CrossButton$1)`
  padding: 8px;
  z-index: 111;
`;
styled(Button$1)`
  padding: 4px 12px;
`;
styled(InputGroup$1)``;
styled(SelectGroup$1)`
  margin-top: 16px;
`;
styled.div`
  width: 100%;
  margin-top: 16px;
`;
styled.div`
  margin-top: 16px;
  width: 100%;
`;
styled(Label$6)`
  margin-bottom: 4px;
`;
const StyledHistoryButtons = styled.div`
  display: flex;
  border: 1px solid #dedede;
  border-radius: 20px;
`;
const StyledImageOptionsButtons = styled.div`
  display: flex;
  gap: 12px;
  justify-content: ${({
  isPhoneScreen
}) => isPhoneScreen ? "space-between" : "center"};
`;
const StyledMenuIconButton = styled(IconButton$1)`
  @media (min-width: 761px) {
    display: none;
  }
`;
const StyledDimensionsButtons = styled.div`
  display: flex;
  gap: 12px;
  align-items: center;
`;

/** External Dependencies */
const StyledModal = styled(Modal$2)`
  width: ${({
  width
}) => width || '300px'};
  max-width: unset;
`;
const StyledModalTitle = styled(modalTitle)(({
  theme,
  isWarning
}) => css`
    padding-bottom: 0;

    .SfxModalTitle-Icon {
      background-color: ${isWarning && theme.palette[Color.Orange_0_1_Overlay]};
    }

    .SfxModalTitle-LabelPrimary {
      margin-bottom: 24px;
      font-size: 1.25rem !important;
      font-family: "Open Sans", sans-serif !important;
      color: black !important;
      }
      
      .SfxModalTitle-LabelSecondary {
        font-size: 1rem !important;
    font-family: "Open Sans", sans-serif !important;
    color: black !important;
      text-align: center;
    }
  `);
const StyledModalActions = styled(ModalActions$2)`
  gap: 12px;
  padding: 24px;
  .SfxButton-root {
    flex: 1;
    margin: 0;
    height: 30px;
    color: black;
    border-radius: 50px;
    background-color: white;
    border: 1px solid #c9c9c9;
    line-height: 14px;
    font-family: "Open Sans", sans-serif;
    letter-spacing: 0.04rem;

    & > span > span {
      font-size: 0.75rem;
    }

    &:hover {
      background-color: #dedede;
    }
  }
`;

/** External Dependencies */
const Modal = ({
  title,
  hint,
  Icon,
  onDone,
  onCancel,
  doneLabel,
  cancelLabel,
  isOpened,
  doneButtonStyle,
  doneButtonColor = 'basic',
  cancelButtonColor = 'basic',
  children,
  areButtonsDisabled,
  zIndex,
  className,
  width,
  isWarning
}) => {
  const onKeyUp = e => {
    if (e.key === 'Enter') {
      onDone(e);
    }
    if (e.key === 'Escape') {
      onCancel();
    }
  };
  return /*#__PURE__*/React__default.createElement(StyledModal, {
    className: className,
    open: isOpened,
    onClose: onCancel,
    style: {
      zIndex
    },
    onKeyUp: onKeyUp,
    width: width,
    role: "dialog",
    tabIndex: -1,
    "aria-modal": "true",
    "aria-label": title
  }, /*#__PURE__*/React__default.createElement(StyledModalTitle, {
    icon: /*#__PURE__*/React__default.createElement(Icon, {
      size: 25
    }),
    iconShadow: true,
    isWarning: isWarning,
    onClose: onCancel,
    primary: title,
    secondary: hint,
    variant: "with-icon"
  }), children && /*#__PURE__*/React__default.createElement(ModalContent$1, null, children), /*#__PURE__*/React__default.createElement(StyledModalActions, {
    align: "center"
  }, /*#__PURE__*/React__default.createElement(Button$1, {
    color: cancelButtonColor,
    onClick: onCancel,
    size: "md",
    disabled: areButtonsDisabled
  }, cancelLabel), /*#__PURE__*/React__default.createElement(Button$1, {
    color: doneButtonColor,
    onClick: onDone,
    size: "md",
    warning: isWarning,
    style: doneButtonStyle,
    disabled: areButtonsDisabled
  }, doneLabel)));
};
Modal.defaultProps = {
  hint: '',
  isOpened: false,
  doneLabel: 'Yes',
  cancelLabel: 'No',
  doneButtonStyle: undefined,
  doneButtonColor: 'basic',
  cancelButtonColor: 'basic',
  children: undefined,
  areButtonsDisabled: false,
  zIndex: undefined,
  className: undefined,
  width: '',
  isWarning: false
};
Modal.propTypes = {
  title: PropTypes.string.isRequired,
  Icon: PropTypes.instanceOf(Object).isRequired,
  onDone: PropTypes.func.isRequired,
  onCancel: PropTypes.func.isRequired,
  hint: PropTypes.string,
  isOpened: PropTypes.bool,
  doneLabel: PropTypes.string,
  cancelLabel: PropTypes.string,
  doneButtonStyle: PropTypes.instanceOf(Object),
  doneButtonColor: PropTypes.string,
  cancelButtonColor: PropTypes.string,
  children: PropTypes.node,
  areButtonsDisabled: PropTypes.bool,
  zIndex: PropTypes.number,
  className: PropTypes.string,
  width: PropTypes.string,
  isWarning: PropTypes.bool
};

/** External Dependencies */
const ConfirmationModal = ({
  children,
  isReset
}) => {
  const {
    t,
    theme,
    config,
    dispatch,
    isResetted = true,
    haveNotSavedChanges,
    config: {
      onClose
    }
  } = useStore();
  const [isModalOpened, setIsModalOpened] = useState(false);
  const WarningIcon = () => /*#__PURE__*/React__default.createElement(Warning, {
    color: theme.palette.warning,
    size: 25
  });

  //   Hacky solution for avoiding (zoom & image info) components go to right if we have no close button.
  if (typeof onClose !== 'function' && !isReset) {
    return /*#__PURE__*/React__default.createElement("span", null);
  }
  const cancelModal = () => {
    setIsModalOpened(false);
  };
  const openModal = () => {
    setIsModalOpened(true);
  };
  const dispatchReset = useCallback(() => {
    dispatch({
      type: RESET,
      payload: {
        config
      }
    });
    cancelModal();
  }, [config]);
  const closeWithReason = () => {
    if (isReset) return;
    onClose(CLOSING_REASONS.CLOSE_BUTTON, haveNotSavedChanges);
    dispatchReset();
  };
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.cloneElement(children, {
    onClick: isResetted ? closeWithReason : openModal
  }), isModalOpened && /*#__PURE__*/React__default.createElement(Modal, {
    title: isReset ? t('warning') : t('discardChanges'),
    hint: isReset ? t('changesLoseWarningHint') : t('discardChangesWarningHint'),
    isOpened: isModalOpened,
    onCancel: cancelModal,
    onDone: isReset ? dispatchReset : closeWithReason,
    Icon: WarningIcon,
    doneLabel: t('confirm'),
    doneButtonColor: "warning-primary",
    cancelLabel: t('cancel'),
    width: "400px",
    isWarning: true
  }));
};
ConfirmationModal.defaultProps = {
  isReset: false
};
ConfirmationModal.propTypes = {
  children: PropTypes.node.isRequired,
  isReset: PropTypes.bool
};

/** External Dependencies */
const CloseButton = () => {
  const {
    config: {
      onClose
    }
  } = useStore();
  if (typeof onClose !== 'function') {
    return null;
  }
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(ConfirmationModal, null, /*#__PURE__*/React__default.createElement(StyledCloseButton, {
    className: "FIE_topbar-close-button",
    color: "basic",
    size: "md"
  }, /*#__PURE__*/React__default.createElement(CrossOutline$1, null))));
};

const getDefaultSaveQuality = providedDefaultQuality => providedDefaultQuality <= 0 || providedDefaultQuality > 1 ? DEFAULT_SAVE_QUALITY : providedDefaultQuality;

/** External Dependencies */
const saveButtonWrapperStyle = {
  minWidth: 67,
  width: 'fit-content'
}; // 67px same width as tabs bar
const saveButtonMenuStyle = {
  marginLeft: 12
};
const SaveButton = () => {
  const state = useStore();
  const optionSaveFnRef = useRef();
  const {
    theme,
    dispatch,
    originalImage,
    resize,
    isLoadingGlobally,
    haveNotSavedChanges,
    feedback,
    hasUndo,
    t,
    config: {
      onClose,
      closeAfterSave,
      onBeforeSave,
      onSave,
      forceToPngInEllipticalCrop,
      defaultSavedImageName,
      defaultSavedImageType,
      defaultSavedImageQuality = DEFAULT_SAVE_QUALITY,
      useCloudimage,
      moreSaveOptions,
      disableSaveIfNoChanges,
      removeSaveButton
    }
  } = state;
  const [imageFileInfo, setImageFileInfo] = useState({
    quality: getDefaultSaveQuality(defaultSavedImageQuality)
  });
  const transformImgFn = useTransformedImgData();
  const isBlockerError = feedback.duration === 0;
  const handleSave = () => {
    const transformedData = transformImgFn(imageFileInfo, false, true);
    const onSaveFn = optionSaveFnRef.current || onSave;
    const savingResult = onSaveFn(transformedData.imageData, transformedData.designState);
    const finalizeSaving = () => {
      dispatch({
        type: SET_SAVING,
        payload: {
          isSaving: false
        }
      });
    };
    if (savingResult instanceof Promise) {
      savingResult.finally(finalizeSaving);
    } else {
      finalizeSaving();
    }
    optionSaveFnRef.current = null;
    if (closeAfterSave && onClose) {
      onClose(CLOSING_REASONS.AFTER_SAVE, haveNotSavedChanges);
    }
  };
  const startSaving = () => {
    dispatch({
      type: SET_SAVING,
      payload: {
        isSaving: true
      }
    });
    setTimeout(handleSave, 3);
  };
  const triggerSaveHandler = () => {
    if (disableSaveIfNoChanges && !hasUndo) return;
    if (useCloudimage) {
      const transformedCloudimageData = transformImgFn(imageFileInfo);
      const onSaveFn = optionSaveFnRef.current || onSave;
      onSaveFn(transformedCloudimageData.imageData, transformedCloudimageData.designState);
      return;
    }
    if (!optionSaveFnRef.current && typeof onBeforeSave === 'function' && onBeforeSave(imageFileInfo) === false) {
      return;
    }
    startSaving();
  };
  const changeSaveFnAndTriggerAnother = (saveFn, fnToTrigger) => {
    if (typeof saveFn === 'function') {
      optionSaveFnRef.current = saveFn;
      fnToTrigger();
    } else {
      throw new Error('onSave function callback is required.');
    }
  };
  const setFileNameAndExtension = () => {
    const {
      name,
      extension
    } = getFileFullName(defaultSavedImageName || originalImage.name, forceToPngInEllipticalCrop && crop?.ratio === ELLIPSE_CROP ? 'png' : SUPPORTED_IMAGE_TYPES.includes(defaultSavedImageType?.toLowerCase()) && defaultSavedImageType);
    setImageFileInfo({
      ...imageFileInfo,
      name,
      extension
    });
  };
  useEffect(() => {
    if (originalImage) setFileNameAndExtension();
  }, [originalImage]);
  useEffect(() => {
    setImageFileInfo({
      ...imageFileInfo,
      size: {
        width: resize.width,
        height: resize.height
      }
    });
  }, [resize]);
  useEffect(() => {
    return () => {
    };
  }, []);
  if (removeSaveButton) return null;
  const menuItems = Array.isArray(moreSaveOptions) && moreSaveOptions.length > 0 ? moreSaveOptions.map((option, i) => ({
    ...option,
    key: `${option.label || i}-option-key`,
    onClick: typeof option.onClick === 'function' ? () => option.onClick(saveCallback => changeSaveFnAndTriggerAnother(saveCallback, triggerSaveHandler), saveCallback => changeSaveFnAndTriggerAnother(saveCallback, startSaving)) : undefined
  })) : [];
  return /*#__PURE__*/React__default.createElement(ButtonWithMenu, {
    className: "FIE_topbar-save",
    color: "primary",
    onClick: triggerSaveHandler,
    menuPosition: "bottom",
    menuFromBtn: true,
    label: menuItems.length > 0 ? t('saveAs') : t('save'),
    menuItems: menuItems,
    menuStyle: saveButtonMenuStyle,
    wrapperStyle: saveButtonWrapperStyle,
    disabled: isLoadingGlobally || disableSaveIfNoChanges && !hasUndo || isBlockerError,
    noMargin: true
  });
};

/** External Dependencies */
({
  margin: PropTypes.string
});

/** External Dependencies */
const UndoButton = ({
  margin
}) => {
  const {
    dispatch,
    hasUndo = false,
    t,
    feedback
  } = useStore();
  const isBlockerError = feedback.duration === 0;
  const dispatchUndo = useCallback(() => {
    dispatch({
      type: UNDO
    });
  }, []);
  return /*#__PURE__*/React__default.createElement(StyledHistoryButton, {
    className: "FIE_topbar-undo-button",
    color: "basic",
    size: "sm",
    onClick: hasUndo ? dispatchUndo : undefined,
    disabled: !hasUndo || isBlockerError,
    title: t('undoTitle'),
    margin: margin
  }, /*#__PURE__*/React__default.createElement(Undo$1, {
    size: 12
  }));
};
UndoButton.defaultProps = {
  margin: undefined
};
UndoButton.propTypes = {
  margin: PropTypes.string
};

/** External Dependencies */
const RedoButton = ({
  margin
}) => {
  const {
    dispatch,
    hasRedo = false,
    t
  } = useStore();
  const dispatchRedo = useCallback(() => {
    dispatch({
      type: REDO
    });
  }, []);
  return /*#__PURE__*/React__default.createElement(StyledHistoryButton, {
    className: "FIE_topbar-redo-button",
    color: "basic",
    size: "sm",
    onClick: hasRedo ? dispatchRedo : undefined,
    disabled: !hasRedo,
    title: t('redoTitle'),
    margin: margin
  }, /*#__PURE__*/React__default.createElement(Redo$1, {
    size: 12
  }));
};
RedoButton.defaultProps = {
  margin: undefined
};
RedoButton.propTypes = {
  margin: PropTypes.string
};

const ZOOM_FACTORS_PRESETS = [{
  labelKey: 'fitSize',
  factor: 'fit'
}, {
  labelKey: 'actualSize',
  factor: 1
}, {
  label: '25%',
  factor: 0.25
}, {
  label: '50%',
  factor: 0.5
}, {
  label: '75%',
  factor: 0.75
}, {
  label: '125%',
  factor: 1.25
}, {
  label: '170%',
  factor: 1.7
}, {
  label: '300%',
  factor: 3
}, {
  label: '500%',
  factor: 5
}, {
  label: '1000%',
  factor: 10
}];

/** External Dependencies */
const MULTIPLY_ZOOM_FACTOR = 1.1;
const CanvasZooming = ({
  showBackButton
}) => {
  const {
    dispatch,
    zoom = {},
    toolId,
    feedback,
    t,
    shownImageDimensions,
    resize,
    originalImage,
    adjustments: {
      crop
    },
    config: {
      useZoomPresetsMenu
    }
  } = useStore();
  const isBlockerError = feedback.duration === 0;
  const [zoomingMenuAnchorEl, setZoomingMenuAnchorEl] = useState(null);
  const saveZoom = (zoomFactor, isAbsoluteZoom) => {
    dispatch({
      type: ZOOM_CANVAS,
      payload: {
        factor: zoomFactor,
        isAbsoluteZoom
      }
    });
  };
  const zoomIn = () => {
    saveZoom(zoom.factor * MULTIPLY_ZOOM_FACTOR);
  };
  const fitCanvas = () => {
    const usedAsOrgDimens = resize.width && resize.height && resize || crop.width && crop.height && crop || shownImageDimensions;
    const fitCanvasFactor = getZoomFitFactor(crop.width && crop.height && crop || shownImageDimensions, usedAsOrgDimens);
    saveZoom(fitCanvasFactor || DEFAULT_ZOOM_FACTOR, true);
  };
  const zoomOut = () => {
    saveZoom(zoom.factor / MULTIPLY_ZOOM_FACTOR);
  };
  const toggleZoomingMenu = event => {
    setZoomingMenuAnchorEl(zoomingMenuAnchorEl ? null : event.target);
  };
  const applyZoomFactorPreset = factor => {
    if (factor === 'fit') {
      fitCanvas();
      toggleZoomingMenu();
      return;
    }
    const factorToAchieveSelected = resize.width || resize.height ? factor : Math.min(factor * originalImage.width / shownImageDimensions.width, factor * originalImage.height / shownImageDimensions.height);
    saveZoom(factorToAchieveSelected, true);
    toggleZoomingMenu();
  };
  const isZoomDisabled = toolId === TOOLS_IDS.CROP || isBlockerError;
  const previewToRealImgFactor = originalImage && !resize.width && !resize.height ? Math.min(shownImageDimensions.width * zoom.factor / originalImage.width, shownImageDimensions.height * zoom.factor / originalImage.height) : zoom.factor;
  return /*#__PURE__*/React__default.createElement(StyledZoomingWrapper, {
    className: "text-black"
  }, /*#__PURE__*/React__default.createElement(StyledSmallButton, {
    onClick: zoomOut,
    color: "basic",
    title: t('zoomOutTitle'),
    disabled: isZoomDisabled,
    showBackButton: showBackButton,
    className: "FIE_topbar-zoom-out-btn"
  }, /*#__PURE__*/React__default.createElement(MinusOutline, {
    size: 8
  })), /*#__PURE__*/React__default.createElement(StyledZoomPercentageLabel, {
    title: t('toggleZoomMenuTitle'),
    onClick: isZoomDisabled ? undefined : useZoomPresetsMenu && toggleZoomingMenu || fitCanvas,
    "aria-disabled": isZoomDisabled,
    className: "FIE_topbar-zoom-label"
  }, `${toPrecisedFloat(previewToRealImgFactor * 100, 0)}%`), /*#__PURE__*/React__default.createElement(StyledSmallButton, {
    onClick: zoomIn,
    color: "basic",
    title: t('zoomInTitle'),
    disabled: isZoomDisabled,
    showBackButton: showBackButton,
    className: "FIE_topbar-zoom-in-btn"
  }, /*#__PURE__*/React__default.createElement(PlusOutline, {
    size: 9
  })), /*#__PURE__*/React__default.createElement(Menu$2, {
    anchorEl: zoomingMenuAnchorEl,
    onClose: toggleZoomingMenu,
    open: Boolean(zoomingMenuAnchorEl),
    position: "bottom",
    className: "FIE_topbar-zoom-menu"
  }, ZOOM_FACTORS_PRESETS.map(({
    factor,
    labelKey,
    label
  }) => /*#__PURE__*/React__default.createElement(MenuItem$1, {
    key: label || labelKey,
    onClick: () => applyZoomFactorPreset(factor)
  }, /*#__PURE__*/React__default.createElement(MenuItemLabel$1, null, label ?? t(labelKey))))));
};
CanvasZooming.defaultProps = {
  showBackButton: false
};
CanvasZooming.propTypes = {
  showBackButton: PropTypes.bool
};

/** External Dependencies */
const ImageDimensionsAndDisplayToggle = ({
  showBackButton,
  isPhoneScreen
}) => {
  const {
    dispatch,
    isResetted = true,
    originalImage,
    resize = {},
    adjustments: {
      crop,
      rotation = 0
    },
    shownImageDimensions,
    config: {
      disableZooming
    },
    t
  } = useStore();
  if (!originalImage) {
    return null;
  }
  getProperDimensions(resize, crop, shownImageDimensions, originalImage, rotation);
  return /*#__PURE__*/React__default.createElement(StyledImageOptionsButtons, {
    isPhoneScreen: isPhoneScreen
  }, /*#__PURE__*/React__default.createElement(StyledDimensionsButtons, null, !disableZooming && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(CanvasZooming, {
    showBackButton: showBackButton
  }))));

  // return (
  //   <StyledImageOptionsButtons isPhoneScreen={isPhoneScreen}>
  //     <StyledDimensionsLabel title={t('imageDimensionsHoverTitle')}>
  //       {`${dimensions.width} x ${dimensions.height} px`}
  //     </StyledDimensionsLabel>

  //     <StyledDimensionsButtons>
  //       <StyledSmallButton
  //         color="basic"
  //         onMouseDown={isResetted ? undefined : showOriginalImage}
  //         onTouchStart={isResetted ? undefined : showOriginalImage}
  //         disabled={isResetted}
  //         showBackButton={showBackButton}
  //         title={t('showImageTitle')}
  //       >
  //         <Compare />
  //       </StyledSmallButton>
  //       {!disableZooming && (
  //         <>
  //           <Separator />
  //           <CanvasZooming showBackButton={showBackButton} />
  //         </>
  //       )}
  //     </StyledDimensionsButtons>
  //   </StyledImageOptionsButtons>
  // );
};
ImageDimensionsAndDisplayToggle.defaultProps = {
  showBackButton: false,
  isPhoneScreen: false
};
ImageDimensionsAndDisplayToggle.propTypes = {
  showBackButton: PropTypes.bool,
  isPhoneScreen: PropTypes.bool
};

/** External Dependencies */
const BackButton = () => {
  const {
    t
  } = useStore();
  const isPhone = usePhoneScreen();
  return /*#__PURE__*/React__default.createElement(ConfirmationModal, null, /*#__PURE__*/React__default.createElement(Button$1, {
    className: "FIE_topbar-back-button",
    color: "link-secondary",
    size: "sm",
    startIcon: /*#__PURE__*/React__default.createElement(ArrowLeftOutline, null)
  }, !isPhone && /*#__PURE__*/React__default.createElement(StyledBackButtonLabel, null, t('back'))));
};

/** External Dependencies */
const Topbar = ({
  toggleMainMenu
}) => {
  const {
    config: {
      showBackButton
    }
  } = useStore();
  const isPhoneScreen = usePhoneScreen(320);
  return /*#__PURE__*/React__default.createElement(StyledTopbar, {
    className: "FIE_topbar",
    $isPhoneScreen: isPhoneScreen
  }, /*#__PURE__*/React__default.createElement(StyledMainButtonsWrapper, {
    className: "FIE_topbar-buttons-wrapper"
  }, /*#__PURE__*/React__default.createElement(StyledMenuIconButton, {
    className: "FIE_tabs_toggle_btn",
    size: isPhoneScreen ? 'sm' : 'lg',
    color: "basic",
    onClick: () => toggleMainMenu(true)
  }, props => /*#__PURE__*/React__default.createElement(Menu, props)), showBackButton ? /*#__PURE__*/React__default.createElement(BackButton, null) : /*#__PURE__*/React__default.createElement(SaveButton, null)), /*#__PURE__*/React__default.createElement(StyledFlexCenterAlignedContainer, {
    className: "FIE_topbar-center-options",
    $showBackButton: showBackButton
  }, /*#__PURE__*/React__default.createElement(ImageDimensionsAndDisplayToggle, {
    showBackButton: showBackButton,
    isPhoneScreen: isPhoneScreen
  })), /*#__PURE__*/React__default.createElement(StyledControlButtonsWrapper, null, /*#__PURE__*/React__default.createElement(StyledHistoryButtons, {
    className: "FIE_topbar-history-buttons"
  }, /*#__PURE__*/React__default.createElement(UndoButton, {
    margin: "0",
    showBackButton: showBackButton
  }), /*#__PURE__*/React__default.createElement(RedoButton, {
    margin: "0",
    showBackButton: showBackButton
  })), showBackButton ? /*#__PURE__*/React__default.createElement(SaveButton, null) : /*#__PURE__*/React__default.createElement(CloseButton, null)));
};
Topbar.defaultProps = {
  toggleMainMenu: () => {}
};
Topbar.propTypes = {
  toggleMainMenu: PropTypes.func
};

/** External Dependencies */
const StyledTabItem = styled.div(({
  theme
}) => `
    width: 72px;
    min-height: 72px;
    padding: 4px 10px;
    border-radius: 10px;
    display: flex;
    flex-direction: column;
    gap: 6px;
    background: white;
    align-items: center;
    justify-content: center;
    border: 0.01rem solid #dedede;
    [data-phone='true'] & {
      margin-bottom: 0;
      height: 50px;
      border-radius: 0;
    }

    svg {
      color: black;
    }

    &,
    * {
      cursor: pointer;
    }

    &:hover {
     border: 1px solid #d6d6d6;
    }

    &[aria-selected='true'] {
    background: #dedede;
     border: 0.062rem solid #c9c9c9;
      * {
        color: black;
      }
    }
  `);
const StyledTabItemLabel = styled(Label$6)(({
  theme
}) => `
  color: black;
  font-size: 0.6875em;
   line-height: 14px;
  font-family: 'Open Sans', sans-serif;
  letter-spacing: 0.04rem;
  span {
    white-space: normal;
  }

  [data-phone='true'] & {
    font-size: 10px;
  }
`);

/** External Dependencies */
const TabItem = ({
  id,
  label,
  Icon,
  isSelected,
  onClick
}) => {
  const handleClick = useCallback(() => {
    if (typeof onClick === 'function') {
      onClick(id);
    }
  }, [id]);
  return /*#__PURE__*/React__default.createElement(StyledTabItem, {
    className: "FIE_tab",
    "aria-selected": isSelected,
    onClick: handleClick
  }, /*#__PURE__*/React__default.createElement(Icon, {
    size: 20
  }), label && /*#__PURE__*/React__default.createElement(StyledTabItemLabel, {
    className: "FIE_tab-label"
  }, label));
};
TabItem.defaultProps = {
  isSelected: false,
  onClick: undefined,
  label: undefined
};
TabItem.propTypes = {
  id: PropTypes.string.isRequired,
  label: PropTypes.string,
  Icon: PropTypes.oneOfType([PropTypes.node, PropTypes.func, PropTypes.instanceOf(Object)]).isRequired,
  onClick: PropTypes.func,
  isSelected: PropTypes.bool
};
var TabItem$1 = /*#__PURE__*/memo(TabItem);

/** External Dependencies */
const AVAILABLE_TABS = [{
  id: TABS_IDS.ADJUST,
  labelKey: 'adjustTab',
  icon: CropFrame
}, {
  id: TABS_IDS.FINETUNE,
  labelKey: 'finetuneTab',
  icon: FineTune
}, {
  id: TABS_IDS.FILTERS,
  labelKey: 'filtersTab',
  icon: ImageFilters,
  hideFn: ({
    useCloudimage
  }) => useCloudimage
}, {
  id: TABS_IDS.WATERMARK,
  labelKey: 'watermarkTab',
  icon: Watermark$1
}, {
  id: TABS_IDS.ANNOTATE,
  labelKey: 'annotateTabLabel',
  icon: Annotate,
  hideFn: ({
    useCloudimage
  }) => useCloudimage
}, {
  id: TABS_IDS.RESIZE,
  labelKey: 'resizeTab',
  icon: Resize$1
}];

/** External Dependencies */
const Tabs = ({
  toggleMainMenu,
  isDrawer
}) => {
  const {
    t,
    tabId = null,
    dispatch,
    config: {
      defaultTabId,
      tabsIds,
      useCloudimage
    }
  } = useStore();
  const currentTabId = tabId || defaultTabId;
  const selectTab = useCallback(newTabId => {
    dispatch({
      type: SELECT_TAB,
      payload: {
        tabId: newTabId
      }
    });
    toggleMainMenu(false);
  }, []);
  const chosenTabs = useMemo(() => {
    let tabs = [];
    if (Object.keys(tabsIds).length > 0) {
      AVAILABLE_TABS.forEach(tab => {
        const index = tabsIds.indexOf(tab.id);
        if (index !== -1) {
          tabs[index] = tab;
        }
      });
    } else {
      tabs = AVAILABLE_TABS;
    }
    return (tabs.length > 0 ? tabs : AVAILABLE_TABS).filter(({
      hideFn
    }) => !hideFn || !hideFn({
      useCloudimage
    }));
  }, [tabsIds]);

  // If only 1 tab is needed then no need to have the tabs sidebar.
  if (chosenTabs.length === 1) {
    return null;
  }
  const tabItems = ({
    id,
    labelKey,
    icon
  }) => /*#__PURE__*/React__default.createElement(TabItem$1, {
    key: id,
    id: id,
    label: t(labelKey),
    Icon: icon,
    isSelected: currentTabId === id,
    onClick: selectTab
  });
  return /*#__PURE__*/React__default.createElement(React__default.Fragment, null, chosenTabs.map(tab => isDrawer ? /*#__PURE__*/React__default.createElement(DrawerItem$1, {
    key: tab.id
  }, tabItems(tab)) : tabItems(tab)));
};
Tabs.defaultProps = {
  toggleMainMenu: () => {},
  isDrawer: false
};
Tabs.propTypes = {
  toggleMainMenu: PropTypes.func,
  isDrawer: PropTypes.bool
};

/** External Dependencies */
const ToolsBarItemOptionsWrapper = ({
  children,
  isPhoneScreen
}) => /*#__PURE__*/React__default.createElement(StyledToolsBarItemOptionsWrapper, {
  className: "FIE_tool-options-wrapper",
  hasChildren: Boolean(children),
  isPhoneScreen: isPhoneScreen
}, children);
ToolsBarItemOptionsWrapper.defaultProps = {
  children: undefined,
  isPhoneScreen: false
};
ToolsBarItemOptionsWrapper.propTypes = {
  children: PropTypes.node,
  isPhoneScreen: PropTypes.bool
};

/** External Depepdencneis */
const style = {
  maxWidth: '100%',
  width: '100%'
};
const ToolsBar = ({
  isPhoneScreen
}) => {
  const {
    t,
    dispatch,
    tabId,
    toolId,
    annotations,
    selectionsIds = [],
    config: {
      defaultTabId,
      defaultToolId,
      useCloudimage
    }
  } = useStore();
  const currentTabId = tabId || defaultTabId;
  const currentToolId = toolId || defaultToolId || TABS_TOOLS[currentTabId]?.[0];
  const tabTools = useMemo(() => TABS_TOOLS[currentTabId] || [], [currentTabId]);
  const selectTool = useCallback(newToolId => {
    dispatch({
      type: SELECT_TOOL,
      payload: {
        toolId: newToolId
      }
    });
  }, []);
  const items = useMemo(() => tabTools.map(id => {
    const {
      Item,
      hideFn
    } = TOOLS_ITEMS[id];
    return Item && (!hideFn || !hideFn({
      useCloudimage
    })) && /*#__PURE__*/React__default.createElement(Item, {
      key: id,
      selectTool: selectTool,
      t: t,
      isSelected: currentToolId === id
    });
  }), [tabTools, currentToolId]);
  const ToolOptionsComponent = useMemo(() => {
    if (!currentToolId) {
      return false;
    }
    if (currentTabId === TABS_IDS.ANNOTATE) {
      const selectionsLength = selectionsIds.length;
      if (selectionsLength === 1) {
        const selectedAnnotation = annotations[selectionsIds[0]];
        return TOOLS_ITEMS[selectedAnnotation.name]?.ItemOptions;
      }
      if (selectionsLength > 1) {
        return null;
      }
    }
    return currentTabId && currentToolId && TABS_TOOLS[currentTabId].includes(currentToolId) && (!TOOLS_ITEMS[toolId]?.hideFn || !TOOLS_ITEMS[toolId]?.hideFn({
      useCloudimage
    })) && TOOLS_ITEMS[toolId]?.ItemOptions;
  }, [currentTabId, currentToolId, annotations, selectionsIds]);
  useEffect(() => {
    if (!toolId && currentToolId) {
      dispatch({
        type: SELECT_TOOL,
        payload: {
          toolId: currentToolId
        }
      });
    }
  }, []);
  return /*#__PURE__*/React__default.createElement(StyledToolsBar, {
    className: "FIE_tools-bar-wrapper"
  }, /*#__PURE__*/React__default.createElement(ToolsBarItemOptionsWrapper, {
    isPhoneScreen: isPhoneScreen
  }, ToolOptionsComponent && /*#__PURE__*/React__default.createElement(ToolOptionsComponent, {
    t: t
  })), items && /*#__PURE__*/React__default.createElement(StyledToolsBarItems, {
    className: "FIE_tools-bar",
    isPhoneScreen: isPhoneScreen
  }, currentTabId !== TABS_IDS.WATERMARK ? /*#__PURE__*/React__default.createElement(Carousel, {
    className: "FIE_tools",
    style: style
  }, items) : items));
};
ToolsBar.defaultProps = {
  isPhoneScreen: false
};
ToolsBar.propTypes = {
  isPhoneScreen: PropTypes.bool
};

/** External Dependencies */
const defaultAnchorOrigin = {
  horizontal: 'center',
  vertical: 'bottom'
};
const ERROR_TO_ROBOT_STATUS = {
  [FEEDBACK_STATUSES.ERROR]: 'error',
  [FEEDBACK_STATUSES.WARNING]: 'warning'
};
const FeedbackPopup = ({
  anchorOrigin
}) => {
  const {
    feedback = {},
    dispatch
  } = useStore();
  if (!feedback.message) {
    return null;
  }
  const onClose = () => {
    dispatch({
      type: SET_FEEDBACK,
      payload: {
        feedback: {}
      }
    });
  };
  return /*#__PURE__*/React__default.createElement(Popup$1, {
    className: "FIE_feedback-robot",
    anchorOrigin: anchorOrigin,
    autoHideDuration: feedback.duration ?? 5000,
    message: feedback.message,
    open: Boolean(feedback.message),
    status: ERROR_TO_ROBOT_STATUS[feedback.status || FEEDBACK_STATUSES.ERROR],
    onClose: onClose
  });
};
FeedbackPopup.defaultProps = {
  anchorOrigin: defaultAnchorOrigin
};
FeedbackPopup.propTypes = {
  anchorOrigin: PropTypes.instanceOf(Object)
};

/** External Dependencies */
const spin = keyframes`
  to { transform: rotate(360deg); }
`;
const StyledSpinnerWrapper = styled.div`
  background: ${({
  theme: {
    palette
  }
}) => palette[Color.BackgroundStateless]};
  display: flex;
  align-items: center;
  justify-content: center;
  position: absolute;
  z-index: 11111;
  top: 0;
  bottom: 0;
  right: 0;
  left: 0;
  flex-direction: column;
  user-select: none;
`;
const StyledSpinner = styled(Loading)`
  animation: ${spin} 1.2s infinite;
`;

/** External Dependencies */
const Spinner = ({
  theme
}) => {
  return /*#__PURE__*/React__default.createElement(StyledSpinnerWrapper, {
    className: "FIE_spinner-wrapper"
  }, /*#__PURE__*/React__default.createElement(StyledSpinner, {
    size: 50,
    color: theme.palette[Color.AccentStateless]
  }));
};
Spinner.defaultProps = {
  theme: {}
};
Spinner.propTypes = {
  theme: PropTypes.instanceOf(Object)
};

const propertyToOperation = (operation, value, shownImageDimensions = {}, originalImage = {}) => {
  const lockCropAreaAt = CLOUDIMG_TO_EDITOR_POSITIONS[value];
  switch (operation) {
    case 'wat_text':
      return {
        watermark: {
          text: value.replaceAll('+', ' ')
        }
      };
    case 'wat_font':
      return {
        watermark: {
          fontFamily: value
        }
      };
    case 'wat_color':
      return {
        watermark: {
          fill: `#${value}`
        }
      };
    case 'wat_fontsize':
      return {
        watermark: {
          fontSize: parseFloat(value)
        }
      };
    case 'wat_opacity':
      return {
        watermark: {
          opacity: parseFloat(value)
        }
      };
    case 'wat_pos':
      {
        const [x, y] = value.split(',');
        return {
          watermark: {
            x: parseFloat(x) / 100 * shownImageDimensions.width,
            y: parseFloat(y) / 100 * shownImageDimensions.height
          }
        };
      }
    case 'wat_url':
      return {
        watermark: {
          image: decodeURIComponent(value)
        }
      };
    case 'wat_scale':
      {
        const [scaleX, scaleY] = value.split(',');
        return {
          watermark: {
            width: parseFloat(scaleX) / 100 * (shownImageDimensions.width || 0),
            height: parseFloat(scaleY) / 100 * (shownImageDimensions.height || 0)
          }
        };
      }
    case 'tl_px':
      {
        const [x, y] = value.split(',');
        return {
          crop: {
            x: mapNumber(parseFloat(x), 0, originalImage.width, 0, shownImageDimensions.width),
            y: mapNumber(parseFloat(y), 0, originalImage.height, 0, shownImageDimensions.height)
          }
        };
      }
    case 'br_px':
      {
        const [x, y] = value.split(',');
        return {
          cropX2: mapNumber(parseFloat(x), 0, originalImage.width, 0, shownImageDimensions.width),
          cropY2: mapNumber(parseFloat(y), 0, originalImage.height, 0, shownImageDimensions.height)
        };
      }
    case 'round':
      return {
        crop: {
          ratio: ELLIPSE_CROP
        }
      };
    case 'gravity':
      return {
        crop: lockCropAreaAt ? {
          lockCropAreaAt,
          width: null,
          height: null
        } : {
          noEffect: true,
          ratio: value,
          ratioTitleKey: value,
          width: null,
          height: null
        }
      };
    case 'aspect_ratio':
      return {
        crop: {
          ratio: Number(value)
        }
      };
    case 'w':
      return {
        resize: {
          width: parseFloat(value)
        }
      };
    case 'h':
      {
        return {
          resize: {
            height: parseFloat(value)
          }
        };
      }
    case 'r':
      {
        return {
          adjustments: {
            rotation: -parseInt(value, 10)
          }
        };
      }
    case 'flip':
    case 'mirror':
      return {
        adjustments: {
          isFlippedX: value.includes('x') || value.includes('h'),
          isFlippedY: value.includes('y') || value.includes('v')
        }
      };
    default:
      {
        let finetuneName;
        Object.keys(finetuneNameToParamInfo).forEach(key => {
          if (finetuneNameToParamInfo[key].cloudimage.name === operation.toLowerCase()) {
            finetuneName = key;
          }
        });
        if (!finetuneName) return null;
        const {
          cloudimage,
          internal
        } = finetuneNameToParamInfo[finetuneName];
        return {
          finetunes: [Konva$2.Filters[finetuneName]],
          finetunesProps: {
            [internal.propName]: mapNumber(parseFloat(value), cloudimage.min, cloudimage.max, internal.min, internal.max)
          }
        };
      }
  }
};
const cloudimageQueryToDesignState = (cloudimageQuery, shownImageDimensions, originalImage) => {
  if (!cloudimageQuery) {
    return null;
  }
  const operationsStrings = cloudimageQuery.split('&');
  let designState = {};
  operationsStrings.forEach(operationStr => {
    const [operation, value] = operationStr.split('=');
    const operationDesignStateObject = propertyToOperation(operation, value, shownImageDimensions, originalImage);
    if (operationDesignStateObject) {
      designState = deepMerge(designState, operationDesignStateObject, true);
    }
  });
  const {
    cropX2,
    cropY2,
    crop,
    watermark,
    ...unPreparedDesignState
  } = designState;
  const validDesignState = {
    ...unPreparedDesignState,
    ...(cropX2 && cropY2 && crop || crop?.noEffect || crop?.lockCropAreaAt ? {
      adjustments: {
        ...unPreparedDesignState.adjustments,
        crop: {
          width: (cropX2 || 0) - crop.x,
          height: (cropY2 || 0) - crop.y,
          ...crop
        }
      }
    } : {}),
    annotations: {
      ...(watermark ? {
        [WATERMARK_ANNOTATION_ID$1]: {
          ...watermark,
          x: (crop?.x || 0) + (watermark.x || 0),
          y: (crop?.y || 0) + (watermark.y || 0),
          id: WATERMARK_ANNOTATION_ID$1,
          name: watermark.text ? TOOLS_IDS.TEXT : TOOLS_IDS.IMAGE,
          ...(watermark.text ? {
            width: watermark.text.length * watermark.fontSize,
            height: watermark.fontSize
          } : {})
        }
      } : {})
    }
  };
  return validDesignState;
};

const isSameImage = (img1, img2HtmlElement) => img1 && img2HtmlElement && (img1 instanceof HTMLImageElement && img1.src === img2HtmlElement.src && img1.width === img2HtmlElement.width && img1.height === img2HtmlElement.height || (img1?.src || img1) === img2HtmlElement.src);

/** External Dependencies */
const useUpdateEffect = (effectCallback, dependencies) => {
  const isFirstRender = useRef(true);
  useEffect(() => () => {
    isFirstRender.current = true;
  }, []);
  useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
    } else if (typeof effectCallback === 'function') {
      return effectCallback();
    }
    return undefined;
  }, dependencies);
};

/** External Dependencies */
const StyledAppWrapper = styled.div.attrs(({
  $size = {}
}) => ({
  style: {
    width: $size.width ?? '100%',
    height: $size.height ?? '100%'
  }
}))`
  display: flex;
  flex-direction: column;
  align-items: center;
  height: 100%;
  max-height: 100%;
  width: 100%;
  max-width: 100%;
  overflow: auto;
  border-radius: 8px;
  position: relative;
  min-height: 250px;
  background: ${({
  theme
}) => theme.palette['bg-secondary']};

  ${({
  showTabsDrawer
}) => showTabsDrawer && `
      overflow: unset;
  `}
`;
const StyledMainContent = styled.div`
  display: flex;
  align-items: flex-start;
  width: 100%;
  box-sizing: border-box;
  height: calc(100% - 95px); // 95px = possible max height of topbar w/ spaces
  flex-grow: 1;

  [data-phone='true'] & {
    padding: 0;
  }
`;
const StyledCanvasAndTools = styled.div`
  height: 100%;
  width: calc(100% - 80px); // 80px = tabsbar's width.
  flex-grow: 1;
  overflow-y: auto;
  display: flex;
  flex-direction: column;

  ${({
  showTabsDrawer
}) => showTabsDrawer && `
     overflow-y: unset;
  `}
`;
const StyledTabs = styled.div`
  min-width: 108px;
  height: 100%;
  padding: 16px;
  display: flex;
  flex-direction: column;
  gap: 16px;
  overflow-y: auto;
  max-height: 100%;
  [data-phone='true'] & {
    display: flex;
    padding: 0;
  }
`;
const StyledDrawer = styled(Drawer$1)`
  transition: transform 200ms ease-in-out;
  width: 92px;
  height: 100%;
  padding: 12px;

  .SfxDrawer-list,
  .SfxDrawer-item {
    padding: 0;
  }
`;

// added

const StyledCanvasWrapper = styled.div`
  flex-grow: 1;
  position: relative;
  display: flex;
  flex-direction: column;
  min-height: 300px; 
`;
const StyledToolsBarContainer = styled.div`
  background: #fff;
  padding: 8px 12px;
  z-index: 5;
`;

/** External Dependencies */
const TabsDrawer = ({
  toggleMainMenu
}) => {
  const {
    t,
    showTabsMenu
  } = useStore();
  return /*#__PURE__*/React__default.createElement(StyledDrawer, {
    className: "FIE_tabs-drawer",
    open: showTabsMenu,
    onClose: () => toggleMainMenu(false),
    disablePortal: true
  }, /*#__PURE__*/React__default.createElement(DrawerHeader$1, null, /*#__PURE__*/React__default.createElement(Button$1, {
    color: "link-basic-secondary",
    startIcon: /*#__PURE__*/React__default.createElement(Menu, null),
    onClick: () => toggleMainMenu(false)
  }, t('tabsMenu'))), /*#__PURE__*/React__default.createElement(DrawerBody$1, null, /*#__PURE__*/React__default.createElement(DrawerList$1, null, /*#__PURE__*/React__default.createElement(Tabs, {
    toggleMainMenu: toggleMainMenu,
    isDrawer: true
  }))));
};
TabsDrawer.defaultProps = {
  toggleMainMenu: () => {}
};
TabsDrawer.propTypes = {
  toggleMainMenu: PropTypes.func
};

/** External Dependencies */
const App = () => {
  const {
    config,
    isLoadingGlobally,
    haveNotSavedChanges,
    dispatch,
    originalImage,
    shownImageDimensions,
    t,
    theme,
    feedback = {}
  } = useStore();
  const {
    loadableDesignState,
    useCloudimage,
    cloudimage,
    source,
    avoidChangesNotSavedAlertOnLeave,
    useBackendTranslations,
    translations,
    language,
    defaultSavedImageName,
    observePluginContainerSize,
    showCanvasOnly,
    getCurrentImgDataFnRef,
    updateStateFnRef,
    noCrossOrigin,
    resetOnImageSourceChange
  } = config;
  const showTabsDrawer = window.matchMedia('(max-width: 760px)').matches;
  const [observeResize, unobserveElement] = useResizeObserver();
  const [rootSize, setRootSize] = useState({
    width: undefined,
    height: undefined
  });
  const isPhoneScreen = usePhoneScreen();
  const pluginRootRef = useRef(null);
  const cloudimageQueryLoaded = useRef(false);
  const imageBeingLoadedSrc = useRef(null);
  // Hacky solution, For being used in beforeunload event
  // as it won't be possible to have the latest value of the state variable in js event handler.
  const haveNotSavedChangesRef = useRef(haveNotSavedChanges);
  const transformImgFn = useTransformedImgData();
  const setNewOriginalImage = useCallback(newOriginalImage => {
    dispatch({
      type: SET_ORIGINAL_IMAGE,
      payload: {
        originalImage: newOriginalImage
      }
    });
  }, []);
  const setError = useCallback(newError => {
    dispatch({
      type: SET_FEEDBACK,
      payload: {
        feedback: {
          message: newError.message || newError,
          duration: 0
        }
      }
    });
  }, []);

  // We are promisifying the image loading for mixing it with other promises
  const loadAndSetOriginalImage = imgToLoad => new Promise(resolve => {
    const imgSrc = imgToLoad?.src || imgToLoad;
    if (imageBeingLoadedSrc.current === imgSrc || !imgSrc && originalImage || isSameImage(imgSrc, originalImage)) {
      if (!imageBeingLoadedSrc.current) {
        resolve();
      }
      return;
    }
    const triggerResolve = () => {
      imageBeingLoadedSrc.current = null;
      resolve();
    };
    imageBeingLoadedSrc.current = imgSrc;

    // This timeout is a workaround when re-initializing
    // the react app from vanilla JS. Due to a bug in react
    // the dispatch method that is called in setNewOriginalImage
    // still points to the old dispatch method after re-init,
    // so we need to wait for one tick to make sure it's updated.
    //
    // This applies to both URLs and HTMLImageElement, since URLs
    // may resolve immediately in some cases, e.g. memory cache.
    setTimeout(() => {
      if (typeof imgToLoad === 'string') {
        loadImage(imgToLoad, defaultSavedImageName, noCrossOrigin).then(setNewOriginalImage).catch(setError).finally(triggerResolve);
      } else if (imgToLoad instanceof HTMLImageElement) {
        if (!imgToLoad.name && defaultSavedImageName) {
          // eslint-disable-next-line no-param-reassign
          imgToLoad.name = defaultSavedImageName;
        }
        if (!imgToLoad.complete) {
          imgToLoad.addEventListener('load', () => {
            setNewOriginalImage(imgToLoad);
            triggerResolve();
          });
          return;
        }
        setNewOriginalImage(imgToLoad);
        triggerResolve();
      } else {
        setError(t('invalidImageError'));
        triggerResolve();
      }
    }, 0);
  });
  const promptDialogIfHasChangeNotSaved = e => {
    if (haveNotSavedChangesRef.current) {
      e.preventDefault();
      e.returnValue = '';
    }
  };

  // loadingPromisesFn is a function for enabling the ability to show loader first then trigger requests not vice versa.
  const handleLoading = (loadingPromisesFn = () => []) => {
    dispatch({
      type: SHOW_LOADER
    });
    return Promise.all(loadingPromisesFn()).finally(() => {
      dispatch({
        type: HIDE_LOADER
      });
    });
  };
  const updateDesignStateWithLoadableOne = () => {
    if (loadableDesignState && Object.keys(loadableDesignState).length > 0) {
      dispatch({
        type: UPDATE_STATE,
        payload: {
          ...loadableDesignState,
          finetunes: finetunesStrsToClasses(loadableDesignState?.finetunes),
          filter: filterStrToClass(loadableDesignState?.filter)
        }
      });
    }
  };
  useUpdateEffect(() => {
    if (source && !isSameImage(source, originalImage)) {
      cloudimageQueryLoaded.current = false;
      handleLoading(() => [loadAndSetOriginalImage(source)]);
    }
    if (resetOnImageSourceChange) {
      dispatch({
        type: RESET,
        payload: {
          config
        }
      });
    }
  }, [source]);
  useUpdateEffect(() => {
    const newImgSrc = loadableDesignState?.imgSrc;
    if (newImgSrc && !isSameImage(newImgSrc, originalImage)) {
      handleLoading(() => [loadAndSetOriginalImage(newImgSrc).then(updateDesignStateWithLoadableOne)]);
    } else {
      updateDesignStateWithLoadableOne();
    }
  }, [loadableDesignState]);
  useEffect(() => {
    if (Object.keys(shownImageDimensions || {}).length > 0 && !Object.keys(shownImageDimensions).some(k => !shownImageDimensions[k]) && originalImage && useCloudimage && cloudimage?.loadableQuery && !cloudimageQueryLoaded.current) {
      dispatch({
        type: UPDATE_STATE,
        payload: cloudimageQueryToDesignState(cloudimage.loadableQuery, shownImageDimensions, originalImage)
      });
      cloudimageQueryLoaded.current = true;
    }
  }, [shownImageDimensions, originalImage, useCloudimage, cloudimage]);
  useEffect(() => {
    let isUnmounted = false;
    if (observePluginContainerSize && pluginRootRef.current) {
      observeResize(pluginRootRef.current.parentNode, ({
        width,
        height
      }) => setRootSize({
        width,
        height
      }));
    } else if (rootSize.width && rootSize.height && !isUnmounted) {
      setRootSize({
        width: undefined,
        height: undefined
      });
    }
    return () => {
      if (observePluginContainerSize && pluginRootRef.current) {
        unobserveElement(pluginRootRef.current);
      }
      isUnmounted = true;
    };
  }, [observePluginContainerSize]);
  useEffect(() => {
    const initialRequestsPromisesFn = () => [loadAndSetOriginalImage(loadableDesignState?.imgSrc || source), ...(useBackendTranslations ? [getBackendTranslations(language, translations)] : [])];
    handleLoading(initialRequestsPromisesFn);
    if (window && !avoidChangesNotSavedAlertOnLeave) {
      window.addEventListener('beforeunload', promptDialogIfHasChangeNotSaved);
    }
    return () => {
      if (window && !avoidChangesNotSavedAlertOnLeave) {
        window.removeEventListener('beforeunload', promptDialogIfHasChangeNotSaved);
      }
    };
  }, []);
  useEffect(() => {
    if (updateStateFnRef && typeof updateStateFnRef === 'object') {
      updateStateFnRef.current = newStatePartObjOrFn => {
        dispatch({
          type: UPDATE_STATE,
          payload: newStatePartObjOrFn
        });
      };
    }
  }, [updateStateFnRef, dispatch]);
  useEffect(() => {
    if (getCurrentImgDataFnRef && typeof getCurrentImgDataFnRef === 'object') {
      getCurrentImgDataFnRef.current = transformImgFn;
    }
  }, [transformImgFn]);
  useEffect(() => {
    haveNotSavedChangesRef.current = haveNotSavedChanges;
  }, [haveNotSavedChanges]);
  const toggleMainMenu = open => {
    dispatch({
      type: SET_SHOWN_TABS_MENU,
      payload: {
        opened: open
      }
    });
  };
  const renderContent = () => /*#__PURE__*/React__default.createElement(React__default.Fragment, null, !showCanvasOnly && /*#__PURE__*/React__default.createElement(React__default.Fragment, null, showTabsDrawer && /*#__PURE__*/React__default.createElement(TabsDrawer, {
    toggleMainMenu: toggleMainMenu
  }), /*#__PURE__*/React__default.createElement(Topbar, {
    toggleMainMenu: toggleMainMenu
  })), originalImage && feedback.duration !== 0 && /*#__PURE__*/React__default.createElement(StyledMainContent, {
    className: "FIE_main-container"
  }, !showCanvasOnly && !showTabsDrawer && /*#__PURE__*/React__default.createElement(StyledTabs, {
    className: "FIE_tabs"
  }, /*#__PURE__*/React__default.createElement(Tabs, {
    toggleMainMenu: toggleMainMenu
  })), /*#__PURE__*/React__default.createElement(StyledCanvasAndTools, {
    showTabsDrawer: showTabsDrawer
  }, /*#__PURE__*/React__default.createElement(StyledCanvasWrapper, null, /*#__PURE__*/React__default.createElement(MainCanvas, null)), !showCanvasOnly && /*#__PURE__*/React__default.createElement(StyledToolsBarContainer, null, /*#__PURE__*/React__default.createElement(ToolsBar, {
    isPhoneScreen: isPhoneScreen
  })))));
  return /*#__PURE__*/React__default.createElement(StyledAppWrapper, {
    className: ROOT_CONTAINER_CLASS_NAME,
    "data-phone": isPhoneScreen,
    $showTabsDrawer: showTabsDrawer,
    ref: pluginRootRef,
    $size: rootSize
  }, isLoadingGlobally && /*#__PURE__*/React__default.createElement(Spinner, {
    theme: theme
  }), renderContent(), /*#__PURE__*/React__default.createElement(FeedbackPopup, null));
};
var App$1 = /*#__PURE__*/memo(App);

const assignFinetuneNamesToKonva = () => {
  Object.keys(Konva.Filters).forEach(key => Konva.Filters[key].finetuneName = key);
};

/** External Dependencies */
const FontsFaces = createGlobalStyle`
  .${ROOT_CONTAINER_CLASS_NAME} {
    font-family: ${({
  theme = {}
}) => theme.typography?.fontFamily || 'Arial'};
  }

  .SfxModal-Wrapper * {
    font-family: ${({
  theme = {}
}) => theme.typography?.fontFamily || 'Arial'};
  }
`;
const OverrideDefaultStyles = createGlobalStyle`
  .Menu-open {
    overflow: visible !important;
  }

  .${ROOT_CONTAINER_CLASS_NAME}, #SfxPopper {
    box-sizing: border-box;

    .SfxPopper-root .SfxMenu-root {
      overflow: visible;
      width: max-content;
      border-radius: 10px;
      padding-right: 2px;
      padding-left: 2px;

      .SfxMenuItem-prefix {
        margin-right: 6px;
      }
    }
  }
  .${ROOT_CONTAINER_CLASS_NAME} *, #SfxPopper * {
    box-sizing: border-box;
    scrollbar-color: rgba(203, 211, 218, 1) rgba(203, 211, 218, 0.35);
    
    :not(button) > svg:not([color]) {
      color: ${({
  theme
}) => theme.palette['icons-primary']}
    }

    :disabled, [aria-disabled="true"] {
      cursor: not-allowed;
    }

    &::-webkit-scrollbar {
      width: 4px;
      height: 4px;
    }

    &::-webkit-scrollbar-track {
      background: rgba(203, 211, 218, 0.35);
    }

    &::-webkit-scrollbar-thumb {
      background: rgba(203, 211, 218, 1);
      border-radius: 10px;
    }
  }
`;

// /** External Dependencies */
// import React, { useEffect, memo } from 'react';
// import PropTypes from 'prop-types';
// import ThemeProvider from '@scaleflex/ui/theme';

const AssemblyPoint = props => {
  const {
    source,
    useCloudimage,
    cloudimage
  } = props;
  if (!source || typeof source !== 'string' && !(source instanceof HTMLImageElement)) {
    throw new Error('`source` property is required either a string of image url or a HTMLImageElement for the image that will be edited.');
  }
  if (useCloudimage) {
    if (cloudimage?.imageSealing?.enable && !cloudimage?.imageSealing?.salt) {
      throw new Error('`salt` property of imageSealing object is required in cloudimage mode as long as `imageSealing` is enabled.');
    }
  }
  useEffect(() => {
    assignFinetuneNamesToKonva();
  }, []);
  const defaultAndProvidedConfigMerged = deepMerge(defaultConfig, props);
  return /*#__PURE__*/React__default.createElement(React__default.StrictMode, null, /*#__PURE__*/React__default.createElement(ThemeProvider$1, {
    theme: defaultAndProvidedConfigMerged.theme
  }, /*#__PURE__*/React__default.createElement(FontsFaces, null), /*#__PURE__*/React__default.createElement(OverrideDefaultStyles, null), /*#__PURE__*/React__default.createElement(AppProvider, {
    config: defaultAndProvidedConfigMerged
  }, /*#__PURE__*/React__default.createElement(App$1, null))));
};
AssemblyPoint.defaultProps = {
  useCloudimage: false,
  cloudimage: {}
};
AssemblyPoint.propTypes = {
  source: propTypesExports.oneOfType([propTypesExports.string, propTypesExports.instanceOf(HTMLImageElement), propTypesExports.instanceOf(SVGImageElement), propTypesExports.instanceOf(ImageBitmap)]).isRequired,
  useCloudimage: propTypesExports.bool,
  cloudimage: propTypesExports.instanceOf(Object)
};
var FilerobotImageEditor = /*#__PURE__*/memo(AssemblyPoint);

/** Internal Dependencies */
// import FilerobotImageEditor from './components/AssemblyPoint';
// import { TABS_IDS, TOOLS_IDS } from './utils/constants';

export { TABS_IDS as TABS, TOOLS_IDS as TOOLS, FilerobotImageEditor as default };
