'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var require$$1 = require('canvas');
var styled = require('styled-components');
var reactDom = require('react-dom');

function _interopNamespaceDefault(e) {
	var n = Object.create(null);
	if (e) {
		Object.keys(e).forEach(function (k) {
			if (k !== 'default') {
				var d = Object.getOwnPropertyDescriptor(e, k);
				Object.defineProperty(n, k, d.get ? d : {
					enumerable: true,
					get: function () { return e[k]; }
				});
			}
		});
	}
	n.default = e;
	return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespaceDefault(React);

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function getDefaultExportFromCjs (x) {
	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
}

var propTypes = {exports: {}};

var reactIs = {exports: {}};

var reactIs_production_min = {};

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_production_min;

function requireReactIs_production_min () {
	if (hasRequiredReactIs_production_min) return reactIs_production_min;
	hasRequiredReactIs_production_min = 1;
var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
	Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
	function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}reactIs_production_min.AsyncMode=l;reactIs_production_min.ConcurrentMode=m;reactIs_production_min.ContextConsumer=k;reactIs_production_min.ContextProvider=h;reactIs_production_min.Element=c;reactIs_production_min.ForwardRef=n;reactIs_production_min.Fragment=e;reactIs_production_min.Lazy=t;reactIs_production_min.Memo=r;reactIs_production_min.Portal=d;
	reactIs_production_min.Profiler=g;reactIs_production_min.StrictMode=f;reactIs_production_min.Suspense=p;reactIs_production_min.isAsyncMode=function(a){return A(a)||z(a)===l};reactIs_production_min.isConcurrentMode=A;reactIs_production_min.isContextConsumer=function(a){return z(a)===k};reactIs_production_min.isContextProvider=function(a){return z(a)===h};reactIs_production_min.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};reactIs_production_min.isForwardRef=function(a){return z(a)===n};reactIs_production_min.isFragment=function(a){return z(a)===e};reactIs_production_min.isLazy=function(a){return z(a)===t};
	reactIs_production_min.isMemo=function(a){return z(a)===r};reactIs_production_min.isPortal=function(a){return z(a)===d};reactIs_production_min.isProfiler=function(a){return z(a)===g};reactIs_production_min.isStrictMode=function(a){return z(a)===f};reactIs_production_min.isSuspense=function(a){return z(a)===p};
	reactIs_production_min.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};reactIs_production_min.typeOf=z;
	return reactIs_production_min;
}

var reactIs_development = {};

/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactIs_development;

function requireReactIs_development () {
	if (hasRequiredReactIs_development) return reactIs_development;
	hasRequiredReactIs_development = 1;



	if (process.env.NODE_ENV !== "production") {
	  (function() {

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?

	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	} // AsyncMode is deprecated along with isAsyncMode

	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }

	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	reactIs_development.AsyncMode = AsyncMode;
	reactIs_development.ConcurrentMode = ConcurrentMode;
	reactIs_development.ContextConsumer = ContextConsumer;
	reactIs_development.ContextProvider = ContextProvider;
	reactIs_development.Element = Element;
	reactIs_development.ForwardRef = ForwardRef;
	reactIs_development.Fragment = Fragment;
	reactIs_development.Lazy = Lazy;
	reactIs_development.Memo = Memo;
	reactIs_development.Portal = Portal;
	reactIs_development.Profiler = Profiler;
	reactIs_development.StrictMode = StrictMode;
	reactIs_development.Suspense = Suspense;
	reactIs_development.isAsyncMode = isAsyncMode;
	reactIs_development.isConcurrentMode = isConcurrentMode;
	reactIs_development.isContextConsumer = isContextConsumer;
	reactIs_development.isContextProvider = isContextProvider;
	reactIs_development.isElement = isElement;
	reactIs_development.isForwardRef = isForwardRef;
	reactIs_development.isFragment = isFragment;
	reactIs_development.isLazy = isLazy;
	reactIs_development.isMemo = isMemo;
	reactIs_development.isPortal = isPortal;
	reactIs_development.isProfiler = isProfiler;
	reactIs_development.isStrictMode = isStrictMode;
	reactIs_development.isSuspense = isSuspense;
	reactIs_development.isValidElementType = isValidElementType;
	reactIs_development.typeOf = typeOf;
	  })();
	}
	return reactIs_development;
}

var hasRequiredReactIs;

function requireReactIs () {
	if (hasRequiredReactIs) return reactIs.exports;
	hasRequiredReactIs = 1;

	if (process.env.NODE_ENV === 'production') {
	  reactIs.exports = requireReactIs_production_min();
	} else {
	  reactIs.exports = requireReactIs_development();
	}
	return reactIs.exports;
}

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

var objectAssign;
var hasRequiredObjectAssign;

function requireObjectAssign () {
	if (hasRequiredObjectAssign) return objectAssign;
	hasRequiredObjectAssign = 1;
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};
	return objectAssign;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var ReactPropTypesSecret_1;
var hasRequiredReactPropTypesSecret;

function requireReactPropTypesSecret () {
	if (hasRequiredReactPropTypesSecret) return ReactPropTypesSecret_1;
	hasRequiredReactPropTypesSecret = 1;

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	ReactPropTypesSecret_1 = ReactPropTypesSecret;
	return ReactPropTypesSecret_1;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var checkPropTypes_1;
var hasRequiredCheckPropTypes;

function requireCheckPropTypes () {
	if (hasRequiredCheckPropTypes) return checkPropTypes_1;
	hasRequiredCheckPropTypes = 1;

	var printWarning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  var ReactPropTypesSecret = requireReactPropTypesSecret();
	  var loggedTypeFailures = {};
	  var has = Function.call.bind(Object.prototype.hasOwnProperty);

	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (process.env.NODE_ENV !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          );
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          printWarning(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}

	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */
	checkPropTypes.resetWarningCache = function() {
	  if (process.env.NODE_ENV !== 'production') {
	    loggedTypeFailures = {};
	  }
	};

	checkPropTypes_1 = checkPropTypes;
	return checkPropTypes_1;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var factoryWithTypeCheckers;
var hasRequiredFactoryWithTypeCheckers;

function requireFactoryWithTypeCheckers () {
	if (hasRequiredFactoryWithTypeCheckers) return factoryWithTypeCheckers;
	hasRequiredFactoryWithTypeCheckers = 1;

	var ReactIs = requireReactIs();
	var assign = requireObjectAssign();

	var ReactPropTypesSecret = requireReactPropTypesSecret();
	var checkPropTypes = requireCheckPropTypes();

	var has = Function.call.bind(Object.prototype.hasOwnProperty);
	var printWarning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull() {
	  return null;
	}

	factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    if (process.env.NODE_ENV !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!ReactIs.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (arguments.length > 1) {
	          printWarning(
	            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
	            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
	          );
	        } else {
	          printWarning('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }
	      return emptyFunctionThatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);
	        if (type === 'symbol') {
	          return String(value);
	        }
	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (has(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
	          return null;
	        }
	      }

	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from
	      // props.
	      var allKeys = assign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // falsy value can't be a Symbol
	    if (!propValue) {
	      return false;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes;
	  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};
	return factoryWithTypeCheckers;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var factoryWithThrowingShims;
var hasRequiredFactoryWithThrowingShims;

function requireFactoryWithThrowingShims () {
	if (hasRequiredFactoryWithThrowingShims) return factoryWithThrowingShims;
	hasRequiredFactoryWithThrowingShims = 1;

	var ReactPropTypesSecret = requireReactPropTypesSecret();

	function emptyFunction() {}
	function emptyFunctionWithReset() {}
	emptyFunctionWithReset.resetWarningCache = emptyFunction;

	factoryWithThrowingShims = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error(
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	    err.name = 'Invariant Violation';
	    throw err;
	  }	  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  }	  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    elementType: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim,

	    checkPropTypes: emptyFunctionWithReset,
	    resetWarningCache: emptyFunction
	  };

	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};
	return factoryWithThrowingShims;
}

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredPropTypes;

function requirePropTypes () {
	if (hasRequiredPropTypes) return propTypes.exports;
	hasRequiredPropTypes = 1;
	if (process.env.NODE_ENV !== 'production') {
	  var ReactIs = requireReactIs();

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  propTypes.exports = requireFactoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  propTypes.exports = requireFactoryWithThrowingShims()();
	}
	return propTypes.exports;
}

var propTypesExports = requirePropTypes();
var PropTypes = /*@__PURE__*/getDefaultExportFromCjs(propTypesExports);

function _typeof(o) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) {
    return typeof o;
  } : function (o) {
    return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
  }, _typeof(o);
}

function toPrimitive(t, r) {
  if ("object" != _typeof(t) || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != _typeof(i)) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}

function toPropertyKey(t) {
  var i = toPrimitive(t, "string");
  return "symbol" == _typeof(i) ? i : i + "";
}

function _defineProperty(e, r, t) {
  return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {
    value: t,
    enumerable: !0,
    configurable: !0,
    writable: !0
  }) : e[r] = t, e;
}

var lodash_merge = {exports: {}};

/**
 * Lodash (Custom Build) <https://lodash.com/>
 * Build: `lodash modularize exports="npm" -o ./`
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
lodash_merge.exports;

var hasRequiredLodash_merge;

function requireLodash_merge () {
	if (hasRequiredLodash_merge) return lodash_merge.exports;
	hasRequiredLodash_merge = 1;
	(function (module, exports) {
		/** Used as the size to enable large array optimizations. */
		var LARGE_ARRAY_SIZE = 200;

		/** Used to stand-in for `undefined` hash values. */
		var HASH_UNDEFINED = '__lodash_hash_undefined__';

		/** Used to detect hot functions by number of calls within a span of milliseconds. */
		var HOT_COUNT = 800,
		    HOT_SPAN = 16;

		/** Used as references for various `Number` constants. */
		var MAX_SAFE_INTEGER = 9007199254740991;

		/** `Object#toString` result references. */
		var argsTag = '[object Arguments]',
		    arrayTag = '[object Array]',
		    asyncTag = '[object AsyncFunction]',
		    boolTag = '[object Boolean]',
		    dateTag = '[object Date]',
		    errorTag = '[object Error]',
		    funcTag = '[object Function]',
		    genTag = '[object GeneratorFunction]',
		    mapTag = '[object Map]',
		    numberTag = '[object Number]',
		    nullTag = '[object Null]',
		    objectTag = '[object Object]',
		    proxyTag = '[object Proxy]',
		    regexpTag = '[object RegExp]',
		    setTag = '[object Set]',
		    stringTag = '[object String]',
		    undefinedTag = '[object Undefined]',
		    weakMapTag = '[object WeakMap]';

		var arrayBufferTag = '[object ArrayBuffer]',
		    dataViewTag = '[object DataView]',
		    float32Tag = '[object Float32Array]',
		    float64Tag = '[object Float64Array]',
		    int8Tag = '[object Int8Array]',
		    int16Tag = '[object Int16Array]',
		    int32Tag = '[object Int32Array]',
		    uint8Tag = '[object Uint8Array]',
		    uint8ClampedTag = '[object Uint8ClampedArray]',
		    uint16Tag = '[object Uint16Array]',
		    uint32Tag = '[object Uint32Array]';

		/**
		 * Used to match `RegExp`
		 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
		 */
		var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

		/** Used to detect host constructors (Safari). */
		var reIsHostCtor = /^\[object .+?Constructor\]$/;

		/** Used to detect unsigned integer values. */
		var reIsUint = /^(?:0|[1-9]\d*)$/;

		/** Used to identify `toStringTag` values of typed arrays. */
		var typedArrayTags = {};
		typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
		typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
		typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
		typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
		typedArrayTags[uint32Tag] = true;
		typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
		typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
		typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
		typedArrayTags[errorTag] = typedArrayTags[funcTag] =
		typedArrayTags[mapTag] = typedArrayTags[numberTag] =
		typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
		typedArrayTags[setTag] = typedArrayTags[stringTag] =
		typedArrayTags[weakMapTag] = false;

		/** Detect free variable `global` from Node.js. */
		var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

		/** Detect free variable `self`. */
		var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

		/** Used as a reference to the global object. */
		var root = freeGlobal || freeSelf || Function('return this')();

		/** Detect free variable `exports`. */
		var freeExports = exports && !exports.nodeType && exports;

		/** Detect free variable `module`. */
		var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

		/** Detect the popular CommonJS extension `module.exports`. */
		var moduleExports = freeModule && freeModule.exports === freeExports;

		/** Detect free variable `process` from Node.js. */
		var freeProcess = moduleExports && freeGlobal.process;

		/** Used to access faster Node.js helpers. */
		var nodeUtil = (function() {
		  try {
		    // Use `util.types` for Node.js 10+.
		    var types = freeModule && freeModule.require && freeModule.require('util').types;

		    if (types) {
		      return types;
		    }

		    // Legacy `process.binding('util')` for Node.js < 10.
		    return freeProcess && freeProcess.binding && freeProcess.binding('util');
		  } catch (e) {}
		}());

		/* Node.js helper references. */
		var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

		/**
		 * A faster alternative to `Function#apply`, this function invokes `func`
		 * with the `this` binding of `thisArg` and the arguments of `args`.
		 *
		 * @private
		 * @param {Function} func The function to invoke.
		 * @param {*} thisArg The `this` binding of `func`.
		 * @param {Array} args The arguments to invoke `func` with.
		 * @returns {*} Returns the result of `func`.
		 */
		function apply(func, thisArg, args) {
		  switch (args.length) {
		    case 0: return func.call(thisArg);
		    case 1: return func.call(thisArg, args[0]);
		    case 2: return func.call(thisArg, args[0], args[1]);
		    case 3: return func.call(thisArg, args[0], args[1], args[2]);
		  }
		  return func.apply(thisArg, args);
		}

		/**
		 * The base implementation of `_.times` without support for iteratee shorthands
		 * or max array length checks.
		 *
		 * @private
		 * @param {number} n The number of times to invoke `iteratee`.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @returns {Array} Returns the array of results.
		 */
		function baseTimes(n, iteratee) {
		  var index = -1,
		      result = Array(n);

		  while (++index < n) {
		    result[index] = iteratee(index);
		  }
		  return result;
		}

		/**
		 * The base implementation of `_.unary` without support for storing metadata.
		 *
		 * @private
		 * @param {Function} func The function to cap arguments for.
		 * @returns {Function} Returns the new capped function.
		 */
		function baseUnary(func) {
		  return function(value) {
		    return func(value);
		  };
		}

		/**
		 * Gets the value at `key` of `object`.
		 *
		 * @private
		 * @param {Object} [object] The object to query.
		 * @param {string} key The key of the property to get.
		 * @returns {*} Returns the property value.
		 */
		function getValue(object, key) {
		  return object == null ? undefined : object[key];
		}

		/**
		 * Creates a unary function that invokes `func` with its argument transformed.
		 *
		 * @private
		 * @param {Function} func The function to wrap.
		 * @param {Function} transform The argument transform.
		 * @returns {Function} Returns the new function.
		 */
		function overArg(func, transform) {
		  return function(arg) {
		    return func(transform(arg));
		  };
		}

		/** Used for built-in method references. */
		var arrayProto = Array.prototype,
		    funcProto = Function.prototype,
		    objectProto = Object.prototype;

		/** Used to detect overreaching core-js shims. */
		var coreJsData = root['__core-js_shared__'];

		/** Used to resolve the decompiled source of functions. */
		var funcToString = funcProto.toString;

		/** Used to check objects for own properties. */
		var hasOwnProperty = objectProto.hasOwnProperty;

		/** Used to detect methods masquerading as native. */
		var maskSrcKey = (function() {
		  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
		  return uid ? ('Symbol(src)_1.' + uid) : '';
		}());

		/**
		 * Used to resolve the
		 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
		 * of values.
		 */
		var nativeObjectToString = objectProto.toString;

		/** Used to infer the `Object` constructor. */
		var objectCtorString = funcToString.call(Object);

		/** Used to detect if a method is native. */
		var reIsNative = RegExp('^' +
		  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
		  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
		);

		/** Built-in value references. */
		var Buffer = moduleExports ? root.Buffer : undefined,
		    Symbol = root.Symbol,
		    Uint8Array = root.Uint8Array,
		    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
		    getPrototype = overArg(Object.getPrototypeOf, Object),
		    objectCreate = Object.create,
		    propertyIsEnumerable = objectProto.propertyIsEnumerable,
		    splice = arrayProto.splice,
		    symToStringTag = Symbol ? Symbol.toStringTag : undefined;

		var defineProperty = (function() {
		  try {
		    var func = getNative(Object, 'defineProperty');
		    func({}, '', {});
		    return func;
		  } catch (e) {}
		}());

		/* Built-in method references for those with the same name as other `lodash` methods. */
		var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
		    nativeMax = Math.max,
		    nativeNow = Date.now;

		/* Built-in method references that are verified to be native. */
		var Map = getNative(root, 'Map'),
		    nativeCreate = getNative(Object, 'create');

		/**
		 * The base implementation of `_.create` without support for assigning
		 * properties to the created object.
		 *
		 * @private
		 * @param {Object} proto The object to inherit from.
		 * @returns {Object} Returns the new object.
		 */
		var baseCreate = (function() {
		  function object() {}
		  return function(proto) {
		    if (!isObject(proto)) {
		      return {};
		    }
		    if (objectCreate) {
		      return objectCreate(proto);
		    }
		    object.prototype = proto;
		    var result = new object;
		    object.prototype = undefined;
		    return result;
		  };
		}());

		/**
		 * Creates a hash object.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function Hash(entries) {
		  var index = -1,
		      length = entries == null ? 0 : entries.length;

		  this.clear();
		  while (++index < length) {
		    var entry = entries[index];
		    this.set(entry[0], entry[1]);
		  }
		}

		/**
		 * Removes all key-value entries from the hash.
		 *
		 * @private
		 * @name clear
		 * @memberOf Hash
		 */
		function hashClear() {
		  this.__data__ = nativeCreate ? nativeCreate(null) : {};
		  this.size = 0;
		}

		/**
		 * Removes `key` and its value from the hash.
		 *
		 * @private
		 * @name delete
		 * @memberOf Hash
		 * @param {Object} hash The hash to modify.
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function hashDelete(key) {
		  var result = this.has(key) && delete this.__data__[key];
		  this.size -= result ? 1 : 0;
		  return result;
		}

		/**
		 * Gets the hash value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf Hash
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function hashGet(key) {
		  var data = this.__data__;
		  if (nativeCreate) {
		    var result = data[key];
		    return result === HASH_UNDEFINED ? undefined : result;
		  }
		  return hasOwnProperty.call(data, key) ? data[key] : undefined;
		}

		/**
		 * Checks if a hash value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf Hash
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function hashHas(key) {
		  var data = this.__data__;
		  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
		}

		/**
		 * Sets the hash `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf Hash
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the hash instance.
		 */
		function hashSet(key, value) {
		  var data = this.__data__;
		  this.size += this.has(key) ? 0 : 1;
		  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
		  return this;
		}

		// Add methods to `Hash`.
		Hash.prototype.clear = hashClear;
		Hash.prototype['delete'] = hashDelete;
		Hash.prototype.get = hashGet;
		Hash.prototype.has = hashHas;
		Hash.prototype.set = hashSet;

		/**
		 * Creates an list cache object.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function ListCache(entries) {
		  var index = -1,
		      length = entries == null ? 0 : entries.length;

		  this.clear();
		  while (++index < length) {
		    var entry = entries[index];
		    this.set(entry[0], entry[1]);
		  }
		}

		/**
		 * Removes all key-value entries from the list cache.
		 *
		 * @private
		 * @name clear
		 * @memberOf ListCache
		 */
		function listCacheClear() {
		  this.__data__ = [];
		  this.size = 0;
		}

		/**
		 * Removes `key` and its value from the list cache.
		 *
		 * @private
		 * @name delete
		 * @memberOf ListCache
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function listCacheDelete(key) {
		  var data = this.__data__,
		      index = assocIndexOf(data, key);

		  if (index < 0) {
		    return false;
		  }
		  var lastIndex = data.length - 1;
		  if (index == lastIndex) {
		    data.pop();
		  } else {
		    splice.call(data, index, 1);
		  }
		  --this.size;
		  return true;
		}

		/**
		 * Gets the list cache value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf ListCache
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function listCacheGet(key) {
		  var data = this.__data__,
		      index = assocIndexOf(data, key);

		  return index < 0 ? undefined : data[index][1];
		}

		/**
		 * Checks if a list cache value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf ListCache
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function listCacheHas(key) {
		  return assocIndexOf(this.__data__, key) > -1;
		}

		/**
		 * Sets the list cache `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf ListCache
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the list cache instance.
		 */
		function listCacheSet(key, value) {
		  var data = this.__data__,
		      index = assocIndexOf(data, key);

		  if (index < 0) {
		    ++this.size;
		    data.push([key, value]);
		  } else {
		    data[index][1] = value;
		  }
		  return this;
		}

		// Add methods to `ListCache`.
		ListCache.prototype.clear = listCacheClear;
		ListCache.prototype['delete'] = listCacheDelete;
		ListCache.prototype.get = listCacheGet;
		ListCache.prototype.has = listCacheHas;
		ListCache.prototype.set = listCacheSet;

		/**
		 * Creates a map cache object to store key-value pairs.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function MapCache(entries) {
		  var index = -1,
		      length = entries == null ? 0 : entries.length;

		  this.clear();
		  while (++index < length) {
		    var entry = entries[index];
		    this.set(entry[0], entry[1]);
		  }
		}

		/**
		 * Removes all key-value entries from the map.
		 *
		 * @private
		 * @name clear
		 * @memberOf MapCache
		 */
		function mapCacheClear() {
		  this.size = 0;
		  this.__data__ = {
		    'hash': new Hash,
		    'map': new (Map || ListCache),
		    'string': new Hash
		  };
		}

		/**
		 * Removes `key` and its value from the map.
		 *
		 * @private
		 * @name delete
		 * @memberOf MapCache
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function mapCacheDelete(key) {
		  var result = getMapData(this, key)['delete'](key);
		  this.size -= result ? 1 : 0;
		  return result;
		}

		/**
		 * Gets the map value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf MapCache
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function mapCacheGet(key) {
		  return getMapData(this, key).get(key);
		}

		/**
		 * Checks if a map value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf MapCache
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function mapCacheHas(key) {
		  return getMapData(this, key).has(key);
		}

		/**
		 * Sets the map `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf MapCache
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the map cache instance.
		 */
		function mapCacheSet(key, value) {
		  var data = getMapData(this, key),
		      size = data.size;

		  data.set(key, value);
		  this.size += data.size == size ? 0 : 1;
		  return this;
		}

		// Add methods to `MapCache`.
		MapCache.prototype.clear = mapCacheClear;
		MapCache.prototype['delete'] = mapCacheDelete;
		MapCache.prototype.get = mapCacheGet;
		MapCache.prototype.has = mapCacheHas;
		MapCache.prototype.set = mapCacheSet;

		/**
		 * Creates a stack cache object to store key-value pairs.
		 *
		 * @private
		 * @constructor
		 * @param {Array} [entries] The key-value pairs to cache.
		 */
		function Stack(entries) {
		  var data = this.__data__ = new ListCache(entries);
		  this.size = data.size;
		}

		/**
		 * Removes all key-value entries from the stack.
		 *
		 * @private
		 * @name clear
		 * @memberOf Stack
		 */
		function stackClear() {
		  this.__data__ = new ListCache;
		  this.size = 0;
		}

		/**
		 * Removes `key` and its value from the stack.
		 *
		 * @private
		 * @name delete
		 * @memberOf Stack
		 * @param {string} key The key of the value to remove.
		 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
		 */
		function stackDelete(key) {
		  var data = this.__data__,
		      result = data['delete'](key);

		  this.size = data.size;
		  return result;
		}

		/**
		 * Gets the stack value for `key`.
		 *
		 * @private
		 * @name get
		 * @memberOf Stack
		 * @param {string} key The key of the value to get.
		 * @returns {*} Returns the entry value.
		 */
		function stackGet(key) {
		  return this.__data__.get(key);
		}

		/**
		 * Checks if a stack value for `key` exists.
		 *
		 * @private
		 * @name has
		 * @memberOf Stack
		 * @param {string} key The key of the entry to check.
		 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
		 */
		function stackHas(key) {
		  return this.__data__.has(key);
		}

		/**
		 * Sets the stack `key` to `value`.
		 *
		 * @private
		 * @name set
		 * @memberOf Stack
		 * @param {string} key The key of the value to set.
		 * @param {*} value The value to set.
		 * @returns {Object} Returns the stack cache instance.
		 */
		function stackSet(key, value) {
		  var data = this.__data__;
		  if (data instanceof ListCache) {
		    var pairs = data.__data__;
		    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
		      pairs.push([key, value]);
		      this.size = ++data.size;
		      return this;
		    }
		    data = this.__data__ = new MapCache(pairs);
		  }
		  data.set(key, value);
		  this.size = data.size;
		  return this;
		}

		// Add methods to `Stack`.
		Stack.prototype.clear = stackClear;
		Stack.prototype['delete'] = stackDelete;
		Stack.prototype.get = stackGet;
		Stack.prototype.has = stackHas;
		Stack.prototype.set = stackSet;

		/**
		 * Creates an array of the enumerable property names of the array-like `value`.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @param {boolean} inherited Specify returning inherited property names.
		 * @returns {Array} Returns the array of property names.
		 */
		function arrayLikeKeys(value, inherited) {
		  var isArr = isArray(value),
		      isArg = !isArr && isArguments(value),
		      isBuff = !isArr && !isArg && isBuffer(value),
		      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
		      skipIndexes = isArr || isArg || isBuff || isType,
		      result = skipIndexes ? baseTimes(value.length, String) : [],
		      length = result.length;

		  for (var key in value) {
		    if ((inherited || hasOwnProperty.call(value, key)) &&
		        !(skipIndexes && (
		           // Safari 9 has enumerable `arguments.length` in strict mode.
		           key == 'length' ||
		           // Node.js 0.10 has enumerable non-index properties on buffers.
		           (isBuff && (key == 'offset' || key == 'parent')) ||
		           // PhantomJS 2 has enumerable non-index properties on typed arrays.
		           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
		           // Skip index properties.
		           isIndex(key, length)
		        ))) {
		      result.push(key);
		    }
		  }
		  return result;
		}

		/**
		 * This function is like `assignValue` except that it doesn't assign
		 * `undefined` values.
		 *
		 * @private
		 * @param {Object} object The object to modify.
		 * @param {string} key The key of the property to assign.
		 * @param {*} value The value to assign.
		 */
		function assignMergeValue(object, key, value) {
		  if ((value !== undefined && !eq(object[key], value)) ||
		      (value === undefined && !(key in object))) {
		    baseAssignValue(object, key, value);
		  }
		}

		/**
		 * Assigns `value` to `key` of `object` if the existing value is not equivalent
		 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		 * for equality comparisons.
		 *
		 * @private
		 * @param {Object} object The object to modify.
		 * @param {string} key The key of the property to assign.
		 * @param {*} value The value to assign.
		 */
		function assignValue(object, key, value) {
		  var objValue = object[key];
		  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
		      (value === undefined && !(key in object))) {
		    baseAssignValue(object, key, value);
		  }
		}

		/**
		 * Gets the index at which the `key` is found in `array` of key-value pairs.
		 *
		 * @private
		 * @param {Array} array The array to inspect.
		 * @param {*} key The key to search for.
		 * @returns {number} Returns the index of the matched value, else `-1`.
		 */
		function assocIndexOf(array, key) {
		  var length = array.length;
		  while (length--) {
		    if (eq(array[length][0], key)) {
		      return length;
		    }
		  }
		  return -1;
		}

		/**
		 * The base implementation of `assignValue` and `assignMergeValue` without
		 * value checks.
		 *
		 * @private
		 * @param {Object} object The object to modify.
		 * @param {string} key The key of the property to assign.
		 * @param {*} value The value to assign.
		 */
		function baseAssignValue(object, key, value) {
		  if (key == '__proto__' && defineProperty) {
		    defineProperty(object, key, {
		      'configurable': true,
		      'enumerable': true,
		      'value': value,
		      'writable': true
		    });
		  } else {
		    object[key] = value;
		  }
		}

		/**
		 * The base implementation of `baseForOwn` which iterates over `object`
		 * properties returned by `keysFunc` and invokes `iteratee` for each property.
		 * Iteratee functions may exit iteration early by explicitly returning `false`.
		 *
		 * @private
		 * @param {Object} object The object to iterate over.
		 * @param {Function} iteratee The function invoked per iteration.
		 * @param {Function} keysFunc The function to get the keys of `object`.
		 * @returns {Object} Returns `object`.
		 */
		var baseFor = createBaseFor();

		/**
		 * The base implementation of `getTag` without fallbacks for buggy environments.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @returns {string} Returns the `toStringTag`.
		 */
		function baseGetTag(value) {
		  if (value == null) {
		    return value === undefined ? undefinedTag : nullTag;
		  }
		  return (symToStringTag && symToStringTag in Object(value))
		    ? getRawTag(value)
		    : objectToString(value);
		}

		/**
		 * The base implementation of `_.isArguments`.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		 */
		function baseIsArguments(value) {
		  return isObjectLike(value) && baseGetTag(value) == argsTag;
		}

		/**
		 * The base implementation of `_.isNative` without bad shim checks.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a native function,
		 *  else `false`.
		 */
		function baseIsNative(value) {
		  if (!isObject(value) || isMasked(value)) {
		    return false;
		  }
		  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
		  return pattern.test(toSource(value));
		}

		/**
		 * The base implementation of `_.isTypedArray` without Node.js optimizations.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		 */
		function baseIsTypedArray(value) {
		  return isObjectLike(value) &&
		    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
		}

		/**
		 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 */
		function baseKeysIn(object) {
		  if (!isObject(object)) {
		    return nativeKeysIn(object);
		  }
		  var isProto = isPrototype(object),
		      result = [];

		  for (var key in object) {
		    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
		      result.push(key);
		    }
		  }
		  return result;
		}

		/**
		 * The base implementation of `_.merge` without support for multiple sources.
		 *
		 * @private
		 * @param {Object} object The destination object.
		 * @param {Object} source The source object.
		 * @param {number} srcIndex The index of `source`.
		 * @param {Function} [customizer] The function to customize merged values.
		 * @param {Object} [stack] Tracks traversed source values and their merged
		 *  counterparts.
		 */
		function baseMerge(object, source, srcIndex, customizer, stack) {
		  if (object === source) {
		    return;
		  }
		  baseFor(source, function(srcValue, key) {
		    stack || (stack = new Stack);
		    if (isObject(srcValue)) {
		      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
		    }
		    else {
		      var newValue = customizer
		        ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
		        : undefined;

		      if (newValue === undefined) {
		        newValue = srcValue;
		      }
		      assignMergeValue(object, key, newValue);
		    }
		  }, keysIn);
		}

		/**
		 * A specialized version of `baseMerge` for arrays and objects which performs
		 * deep merges and tracks traversed objects enabling objects with circular
		 * references to be merged.
		 *
		 * @private
		 * @param {Object} object The destination object.
		 * @param {Object} source The source object.
		 * @param {string} key The key of the value to merge.
		 * @param {number} srcIndex The index of `source`.
		 * @param {Function} mergeFunc The function to merge values.
		 * @param {Function} [customizer] The function to customize assigned values.
		 * @param {Object} [stack] Tracks traversed source values and their merged
		 *  counterparts.
		 */
		function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
		  var objValue = safeGet(object, key),
		      srcValue = safeGet(source, key),
		      stacked = stack.get(srcValue);

		  if (stacked) {
		    assignMergeValue(object, key, stacked);
		    return;
		  }
		  var newValue = customizer
		    ? customizer(objValue, srcValue, (key + ''), object, source, stack)
		    : undefined;

		  var isCommon = newValue === undefined;

		  if (isCommon) {
		    var isArr = isArray(srcValue),
		        isBuff = !isArr && isBuffer(srcValue),
		        isTyped = !isArr && !isBuff && isTypedArray(srcValue);

		    newValue = srcValue;
		    if (isArr || isBuff || isTyped) {
		      if (isArray(objValue)) {
		        newValue = objValue;
		      }
		      else if (isArrayLikeObject(objValue)) {
		        newValue = copyArray(objValue);
		      }
		      else if (isBuff) {
		        isCommon = false;
		        newValue = cloneBuffer(srcValue, true);
		      }
		      else if (isTyped) {
		        isCommon = false;
		        newValue = cloneTypedArray(srcValue, true);
		      }
		      else {
		        newValue = [];
		      }
		    }
		    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
		      newValue = objValue;
		      if (isArguments(objValue)) {
		        newValue = toPlainObject(objValue);
		      }
		      else if (!isObject(objValue) || isFunction(objValue)) {
		        newValue = initCloneObject(srcValue);
		      }
		    }
		    else {
		      isCommon = false;
		    }
		  }
		  if (isCommon) {
		    // Recursively merge objects and arrays (susceptible to call stack limits).
		    stack.set(srcValue, newValue);
		    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
		    stack['delete'](srcValue);
		  }
		  assignMergeValue(object, key, newValue);
		}

		/**
		 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
		 *
		 * @private
		 * @param {Function} func The function to apply a rest parameter to.
		 * @param {number} [start=func.length-1] The start position of the rest parameter.
		 * @returns {Function} Returns the new function.
		 */
		function baseRest(func, start) {
		  return setToString(overRest(func, start, identity), func + '');
		}

		/**
		 * The base implementation of `setToString` without support for hot loop shorting.
		 *
		 * @private
		 * @param {Function} func The function to modify.
		 * @param {Function} string The `toString` result.
		 * @returns {Function} Returns `func`.
		 */
		var baseSetToString = !defineProperty ? identity : function(func, string) {
		  return defineProperty(func, 'toString', {
		    'configurable': true,
		    'enumerable': false,
		    'value': constant(string),
		    'writable': true
		  });
		};

		/**
		 * Creates a clone of  `buffer`.
		 *
		 * @private
		 * @param {Buffer} buffer The buffer to clone.
		 * @param {boolean} [isDeep] Specify a deep clone.
		 * @returns {Buffer} Returns the cloned buffer.
		 */
		function cloneBuffer(buffer, isDeep) {
		  if (isDeep) {
		    return buffer.slice();
		  }
		  var length = buffer.length,
		      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

		  buffer.copy(result);
		  return result;
		}

		/**
		 * Creates a clone of `arrayBuffer`.
		 *
		 * @private
		 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
		 * @returns {ArrayBuffer} Returns the cloned array buffer.
		 */
		function cloneArrayBuffer(arrayBuffer) {
		  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
		  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
		  return result;
		}

		/**
		 * Creates a clone of `typedArray`.
		 *
		 * @private
		 * @param {Object} typedArray The typed array to clone.
		 * @param {boolean} [isDeep] Specify a deep clone.
		 * @returns {Object} Returns the cloned typed array.
		 */
		function cloneTypedArray(typedArray, isDeep) {
		  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
		  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
		}

		/**
		 * Copies the values of `source` to `array`.
		 *
		 * @private
		 * @param {Array} source The array to copy values from.
		 * @param {Array} [array=[]] The array to copy values to.
		 * @returns {Array} Returns `array`.
		 */
		function copyArray(source, array) {
		  var index = -1,
		      length = source.length;

		  array || (array = Array(length));
		  while (++index < length) {
		    array[index] = source[index];
		  }
		  return array;
		}

		/**
		 * Copies properties of `source` to `object`.
		 *
		 * @private
		 * @param {Object} source The object to copy properties from.
		 * @param {Array} props The property identifiers to copy.
		 * @param {Object} [object={}] The object to copy properties to.
		 * @param {Function} [customizer] The function to customize copied values.
		 * @returns {Object} Returns `object`.
		 */
		function copyObject(source, props, object, customizer) {
		  var isNew = !object;
		  object || (object = {});

		  var index = -1,
		      length = props.length;

		  while (++index < length) {
		    var key = props[index];

		    var newValue = customizer
		      ? customizer(object[key], source[key], key, object, source)
		      : undefined;

		    if (newValue === undefined) {
		      newValue = source[key];
		    }
		    if (isNew) {
		      baseAssignValue(object, key, newValue);
		    } else {
		      assignValue(object, key, newValue);
		    }
		  }
		  return object;
		}

		/**
		 * Creates a function like `_.assign`.
		 *
		 * @private
		 * @param {Function} assigner The function to assign values.
		 * @returns {Function} Returns the new assigner function.
		 */
		function createAssigner(assigner) {
		  return baseRest(function(object, sources) {
		    var index = -1,
		        length = sources.length,
		        customizer = length > 1 ? sources[length - 1] : undefined,
		        guard = length > 2 ? sources[2] : undefined;

		    customizer = (assigner.length > 3 && typeof customizer == 'function')
		      ? (length--, customizer)
		      : undefined;

		    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
		      customizer = length < 3 ? undefined : customizer;
		      length = 1;
		    }
		    object = Object(object);
		    while (++index < length) {
		      var source = sources[index];
		      if (source) {
		        assigner(object, source, index, customizer);
		      }
		    }
		    return object;
		  });
		}

		/**
		 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
		 *
		 * @private
		 * @param {boolean} [fromRight] Specify iterating from right to left.
		 * @returns {Function} Returns the new base function.
		 */
		function createBaseFor(fromRight) {
		  return function(object, iteratee, keysFunc) {
		    var index = -1,
		        iterable = Object(object),
		        props = keysFunc(object),
		        length = props.length;

		    while (length--) {
		      var key = props[fromRight ? length : ++index];
		      if (iteratee(iterable[key], key, iterable) === false) {
		        break;
		      }
		    }
		    return object;
		  };
		}

		/**
		 * Gets the data for `map`.
		 *
		 * @private
		 * @param {Object} map The map to query.
		 * @param {string} key The reference key.
		 * @returns {*} Returns the map data.
		 */
		function getMapData(map, key) {
		  var data = map.__data__;
		  return isKeyable(key)
		    ? data[typeof key == 'string' ? 'string' : 'hash']
		    : data.map;
		}

		/**
		 * Gets the native function at `key` of `object`.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {string} key The key of the method to get.
		 * @returns {*} Returns the function if it's native, else `undefined`.
		 */
		function getNative(object, key) {
		  var value = getValue(object, key);
		  return baseIsNative(value) ? value : undefined;
		}

		/**
		 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
		 *
		 * @private
		 * @param {*} value The value to query.
		 * @returns {string} Returns the raw `toStringTag`.
		 */
		function getRawTag(value) {
		  var isOwn = hasOwnProperty.call(value, symToStringTag),
		      tag = value[symToStringTag];

		  try {
		    value[symToStringTag] = undefined;
		    var unmasked = true;
		  } catch (e) {}

		  var result = nativeObjectToString.call(value);
		  if (unmasked) {
		    if (isOwn) {
		      value[symToStringTag] = tag;
		    } else {
		      delete value[symToStringTag];
		    }
		  }
		  return result;
		}

		/**
		 * Initializes an object clone.
		 *
		 * @private
		 * @param {Object} object The object to clone.
		 * @returns {Object} Returns the initialized clone.
		 */
		function initCloneObject(object) {
		  return (typeof object.constructor == 'function' && !isPrototype(object))
		    ? baseCreate(getPrototype(object))
		    : {};
		}

		/**
		 * Checks if `value` is a valid array-like index.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
		 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
		 */
		function isIndex(value, length) {
		  var type = typeof value;
		  length = length == null ? MAX_SAFE_INTEGER : length;

		  return !!length &&
		    (type == 'number' ||
		      (type != 'symbol' && reIsUint.test(value))) &&
		        (value > -1 && value % 1 == 0 && value < length);
		}

		/**
		 * Checks if the given arguments are from an iteratee call.
		 *
		 * @private
		 * @param {*} value The potential iteratee value argument.
		 * @param {*} index The potential iteratee index or key argument.
		 * @param {*} object The potential iteratee object argument.
		 * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
		 *  else `false`.
		 */
		function isIterateeCall(value, index, object) {
		  if (!isObject(object)) {
		    return false;
		  }
		  var type = typeof index;
		  if (type == 'number'
		        ? (isArrayLike(object) && isIndex(index, object.length))
		        : (type == 'string' && index in object)
		      ) {
		    return eq(object[index], value);
		  }
		  return false;
		}

		/**
		 * Checks if `value` is suitable for use as unique object key.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
		 */
		function isKeyable(value) {
		  var type = typeof value;
		  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
		    ? (value !== '__proto__')
		    : (value === null);
		}

		/**
		 * Checks if `func` has its source masked.
		 *
		 * @private
		 * @param {Function} func The function to check.
		 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
		 */
		function isMasked(func) {
		  return !!maskSrcKey && (maskSrcKey in func);
		}

		/**
		 * Checks if `value` is likely a prototype object.
		 *
		 * @private
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
		 */
		function isPrototype(value) {
		  var Ctor = value && value.constructor,
		      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

		  return value === proto;
		}

		/**
		 * This function is like
		 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
		 * except that it includes inherited enumerable properties.
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 */
		function nativeKeysIn(object) {
		  var result = [];
		  if (object != null) {
		    for (var key in Object(object)) {
		      result.push(key);
		    }
		  }
		  return result;
		}

		/**
		 * Converts `value` to a string using `Object.prototype.toString`.
		 *
		 * @private
		 * @param {*} value The value to convert.
		 * @returns {string} Returns the converted string.
		 */
		function objectToString(value) {
		  return nativeObjectToString.call(value);
		}

		/**
		 * A specialized version of `baseRest` which transforms the rest array.
		 *
		 * @private
		 * @param {Function} func The function to apply a rest parameter to.
		 * @param {number} [start=func.length-1] The start position of the rest parameter.
		 * @param {Function} transform The rest array transform.
		 * @returns {Function} Returns the new function.
		 */
		function overRest(func, start, transform) {
		  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
		  return function() {
		    var args = arguments,
		        index = -1,
		        length = nativeMax(args.length - start, 0),
		        array = Array(length);

		    while (++index < length) {
		      array[index] = args[start + index];
		    }
		    index = -1;
		    var otherArgs = Array(start + 1);
		    while (++index < start) {
		      otherArgs[index] = args[index];
		    }
		    otherArgs[start] = transform(array);
		    return apply(func, this, otherArgs);
		  };
		}

		/**
		 * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
		 *
		 * @private
		 * @param {Object} object The object to query.
		 * @param {string} key The key of the property to get.
		 * @returns {*} Returns the property value.
		 */
		function safeGet(object, key) {
		  if (key === 'constructor' && typeof object[key] === 'function') {
		    return;
		  }

		  if (key == '__proto__') {
		    return;
		  }

		  return object[key];
		}

		/**
		 * Sets the `toString` method of `func` to return `string`.
		 *
		 * @private
		 * @param {Function} func The function to modify.
		 * @param {Function} string The `toString` result.
		 * @returns {Function} Returns `func`.
		 */
		var setToString = shortOut(baseSetToString);

		/**
		 * Creates a function that'll short out and invoke `identity` instead
		 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
		 * milliseconds.
		 *
		 * @private
		 * @param {Function} func The function to restrict.
		 * @returns {Function} Returns the new shortable function.
		 */
		function shortOut(func) {
		  var count = 0,
		      lastCalled = 0;

		  return function() {
		    var stamp = nativeNow(),
		        remaining = HOT_SPAN - (stamp - lastCalled);

		    lastCalled = stamp;
		    if (remaining > 0) {
		      if (++count >= HOT_COUNT) {
		        return arguments[0];
		      }
		    } else {
		      count = 0;
		    }
		    return func.apply(undefined, arguments);
		  };
		}

		/**
		 * Converts `func` to its source code.
		 *
		 * @private
		 * @param {Function} func The function to convert.
		 * @returns {string} Returns the source code.
		 */
		function toSource(func) {
		  if (func != null) {
		    try {
		      return funcToString.call(func);
		    } catch (e) {}
		    try {
		      return (func + '');
		    } catch (e) {}
		  }
		  return '';
		}

		/**
		 * Performs a
		 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
		 * comparison between two values to determine if they are equivalent.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to compare.
		 * @param {*} other The other value to compare.
		 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
		 * @example
		 *
		 * var object = { 'a': 1 };
		 * var other = { 'a': 1 };
		 *
		 * _.eq(object, object);
		 * // => true
		 *
		 * _.eq(object, other);
		 * // => false
		 *
		 * _.eq('a', 'a');
		 * // => true
		 *
		 * _.eq('a', Object('a'));
		 * // => false
		 *
		 * _.eq(NaN, NaN);
		 * // => true
		 */
		function eq(value, other) {
		  return value === other || (value !== value && other !== other);
		}

		/**
		 * Checks if `value` is likely an `arguments` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
		 *  else `false`.
		 * @example
		 *
		 * _.isArguments(function() { return arguments; }());
		 * // => true
		 *
		 * _.isArguments([1, 2, 3]);
		 * // => false
		 */
		var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
		  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
		    !propertyIsEnumerable.call(value, 'callee');
		};

		/**
		 * Checks if `value` is classified as an `Array` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
		 * @example
		 *
		 * _.isArray([1, 2, 3]);
		 * // => true
		 *
		 * _.isArray(document.body.children);
		 * // => false
		 *
		 * _.isArray('abc');
		 * // => false
		 *
		 * _.isArray(_.noop);
		 * // => false
		 */
		var isArray = Array.isArray;

		/**
		 * Checks if `value` is array-like. A value is considered array-like if it's
		 * not a function and has a `value.length` that's an integer greater than or
		 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
		 * @example
		 *
		 * _.isArrayLike([1, 2, 3]);
		 * // => true
		 *
		 * _.isArrayLike(document.body.children);
		 * // => true
		 *
		 * _.isArrayLike('abc');
		 * // => true
		 *
		 * _.isArrayLike(_.noop);
		 * // => false
		 */
		function isArrayLike(value) {
		  return value != null && isLength(value.length) && !isFunction(value);
		}

		/**
		 * This method is like `_.isArrayLike` except that it also checks if `value`
		 * is an object.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an array-like object,
		 *  else `false`.
		 * @example
		 *
		 * _.isArrayLikeObject([1, 2, 3]);
		 * // => true
		 *
		 * _.isArrayLikeObject(document.body.children);
		 * // => true
		 *
		 * _.isArrayLikeObject('abc');
		 * // => false
		 *
		 * _.isArrayLikeObject(_.noop);
		 * // => false
		 */
		function isArrayLikeObject(value) {
		  return isObjectLike(value) && isArrayLike(value);
		}

		/**
		 * Checks if `value` is a buffer.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.3.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
		 * @example
		 *
		 * _.isBuffer(new Buffer(2));
		 * // => true
		 *
		 * _.isBuffer(new Uint8Array(2));
		 * // => false
		 */
		var isBuffer = nativeIsBuffer || stubFalse;

		/**
		 * Checks if `value` is classified as a `Function` object.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
		 * @example
		 *
		 * _.isFunction(_);
		 * // => true
		 *
		 * _.isFunction(/abc/);
		 * // => false
		 */
		function isFunction(value) {
		  if (!isObject(value)) {
		    return false;
		  }
		  // The use of `Object#toString` avoids issues with the `typeof` operator
		  // in Safari 9 which returns 'object' for typed arrays and other constructors.
		  var tag = baseGetTag(value);
		  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
		}

		/**
		 * Checks if `value` is a valid array-like length.
		 *
		 * **Note:** This method is loosely based on
		 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
		 * @example
		 *
		 * _.isLength(3);
		 * // => true
		 *
		 * _.isLength(Number.MIN_VALUE);
		 * // => false
		 *
		 * _.isLength(Infinity);
		 * // => false
		 *
		 * _.isLength('3');
		 * // => false
		 */
		function isLength(value) {
		  return typeof value == 'number' &&
		    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
		}

		/**
		 * Checks if `value` is the
		 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
		 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
		 *
		 * @static
		 * @memberOf _
		 * @since 0.1.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
		 * @example
		 *
		 * _.isObject({});
		 * // => true
		 *
		 * _.isObject([1, 2, 3]);
		 * // => true
		 *
		 * _.isObject(_.noop);
		 * // => true
		 *
		 * _.isObject(null);
		 * // => false
		 */
		function isObject(value) {
		  var type = typeof value;
		  return value != null && (type == 'object' || type == 'function');
		}

		/**
		 * Checks if `value` is object-like. A value is object-like if it's not `null`
		 * and has a `typeof` result of "object".
		 *
		 * @static
		 * @memberOf _
		 * @since 4.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
		 * @example
		 *
		 * _.isObjectLike({});
		 * // => true
		 *
		 * _.isObjectLike([1, 2, 3]);
		 * // => true
		 *
		 * _.isObjectLike(_.noop);
		 * // => false
		 *
		 * _.isObjectLike(null);
		 * // => false
		 */
		function isObjectLike(value) {
		  return value != null && typeof value == 'object';
		}

		/**
		 * Checks if `value` is a plain object, that is, an object created by the
		 * `Object` constructor or one with a `[[Prototype]]` of `null`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.8.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 * }
		 *
		 * _.isPlainObject(new Foo);
		 * // => false
		 *
		 * _.isPlainObject([1, 2, 3]);
		 * // => false
		 *
		 * _.isPlainObject({ 'x': 0, 'y': 0 });
		 * // => true
		 *
		 * _.isPlainObject(Object.create(null));
		 * // => true
		 */
		function isPlainObject(value) {
		  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
		    return false;
		  }
		  var proto = getPrototype(value);
		  if (proto === null) {
		    return true;
		  }
		  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
		  return typeof Ctor == 'function' && Ctor instanceof Ctor &&
		    funcToString.call(Ctor) == objectCtorString;
		}

		/**
		 * Checks if `value` is classified as a typed array.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Lang
		 * @param {*} value The value to check.
		 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
		 * @example
		 *
		 * _.isTypedArray(new Uint8Array);
		 * // => true
		 *
		 * _.isTypedArray([]);
		 * // => false
		 */
		var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

		/**
		 * Converts `value` to a plain object flattening inherited enumerable string
		 * keyed properties of `value` to own properties of the plain object.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Lang
		 * @param {*} value The value to convert.
		 * @returns {Object} Returns the converted plain object.
		 * @example
		 *
		 * function Foo() {
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.assign({ 'a': 1 }, new Foo);
		 * // => { 'a': 1, 'b': 2 }
		 *
		 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
		 * // => { 'a': 1, 'b': 2, 'c': 3 }
		 */
		function toPlainObject(value) {
		  return copyObject(value, keysIn(value));
		}

		/**
		 * Creates an array of the own and inherited enumerable property names of `object`.
		 *
		 * **Note:** Non-object values are coerced to objects.
		 *
		 * @static
		 * @memberOf _
		 * @since 3.0.0
		 * @category Object
		 * @param {Object} object The object to query.
		 * @returns {Array} Returns the array of property names.
		 * @example
		 *
		 * function Foo() {
		 *   this.a = 1;
		 *   this.b = 2;
		 * }
		 *
		 * Foo.prototype.c = 3;
		 *
		 * _.keysIn(new Foo);
		 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
		 */
		function keysIn(object) {
		  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
		}

		/**
		 * This method is like `_.assign` except that it recursively merges own and
		 * inherited enumerable string keyed properties of source objects into the
		 * destination object. Source properties that resolve to `undefined` are
		 * skipped if a destination value exists. Array and plain object properties
		 * are merged recursively. Other objects and value types are overridden by
		 * assignment. Source objects are applied from left to right. Subsequent
		 * sources overwrite property assignments of previous sources.
		 *
		 * **Note:** This method mutates `object`.
		 *
		 * @static
		 * @memberOf _
		 * @since 0.5.0
		 * @category Object
		 * @param {Object} object The destination object.
		 * @param {...Object} [sources] The source objects.
		 * @returns {Object} Returns `object`.
		 * @example
		 *
		 * var object = {
		 *   'a': [{ 'b': 2 }, { 'd': 4 }]
		 * };
		 *
		 * var other = {
		 *   'a': [{ 'c': 3 }, { 'e': 5 }]
		 * };
		 *
		 * _.merge(object, other);
		 * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
		 */
		var merge = createAssigner(function(object, source, srcIndex) {
		  baseMerge(object, source, srcIndex);
		});

		/**
		 * Creates a function that returns `value`.
		 *
		 * @static
		 * @memberOf _
		 * @since 2.4.0
		 * @category Util
		 * @param {*} value The value to return from the new function.
		 * @returns {Function} Returns the new constant function.
		 * @example
		 *
		 * var objects = _.times(2, _.constant({ 'a': 1 }));
		 *
		 * console.log(objects);
		 * // => [{ 'a': 1 }, { 'a': 1 }]
		 *
		 * console.log(objects[0] === objects[1]);
		 * // => true
		 */
		function constant(value) {
		  return function() {
		    return value;
		  };
		}

		/**
		 * This method returns the first argument it receives.
		 *
		 * @static
		 * @since 0.1.0
		 * @memberOf _
		 * @category Util
		 * @param {*} value Any value.
		 * @returns {*} Returns `value`.
		 * @example
		 *
		 * var object = { 'a': 1 };
		 *
		 * console.log(_.identity(object) === object);
		 * // => true
		 */
		function identity(value) {
		  return value;
		}

		/**
		 * This method returns `false`.
		 *
		 * @static
		 * @memberOf _
		 * @since 4.13.0
		 * @category Util
		 * @returns {boolean} Returns `false`.
		 * @example
		 *
		 * _.times(2, _.stubFalse);
		 * // => [false, false]
		 */
		function stubFalse() {
		  return false;
		}

		module.exports = merge; 
	} (lodash_merge, lodash_merge.exports));
	return lodash_merge.exports;
}

var lodash_mergeExports = requireLodash_merge();
var merge = /*@__PURE__*/getDefaultExportFromCjs(lodash_mergeExports);

function _arrayLikeToArray(r, a) {
  (null == a || a > r.length) && (a = r.length);
  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];
  return n;
}

function _arrayWithoutHoles(r) {
  if (Array.isArray(r)) return _arrayLikeToArray(r);
}

function _iterableToArray(r) {
  if ("undefined" != typeof Symbol && null != r[Symbol.iterator] || null != r["@@iterator"]) return Array.from(r);
}

function _unsupportedIterableToArray(r, a) {
  if (r) {
    if ("string" == typeof r) return _arrayLikeToArray(r, a);
    var t = {}.toString.call(r).slice(8, -1);
    return "Object" === t && r.constructor && (t = r.constructor.name), "Map" === t || "Set" === t ? Array.from(r) : "Arguments" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;
  }
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _toConsumableArray(r) {
  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();
}

function generateClassNames(componentName, subClassNames) {
  var generateClassName = function generateClassName(subClassName) {
    return "Sfx".concat(componentName).concat(subClassName ? "-".concat(subClassName) : '');
  };
  var classNameArray = [];
  if (subClassNames) {
    if (Array.isArray(subClassNames)) {
      classNameArray.push.apply(classNameArray, _toConsumableArray(subClassNames.filter(function (subClassName) {
        return typeof subClassName === 'string';
      }).map(function (subClassName) {
        return generateClassName(subClassName);
      })));
    } else if (typeof subClassNames === 'string') {
      classNameArray.push(generateClassName(subClassNames));
    }
  }
  if (classNameArray.length === 0) {
    classNameArray.push(generateClassName());
  }
  return classNameArray.join(' ');
}

/**
 * Wrapper around React's `forwardRef` function, which adds a `displayName` to each component
 * created using it
 */
function intrinsicComponent$1(render, displayName) {
  var component = /*#__PURE__*/React.forwardRef(render);
  component.displayName = displayName || render.name;
  return component;
}

/**
 * If your prop can be either a function or a plain value, this function handles
 * its usage for you – just provide the reference for a 'maybe function' and the arguments
 * to call it with
 */
function applyPolymorphicFunctionProp(prop) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }
  return typeof prop === 'function' ? prop.apply(void 0, args) : prop;
}

/**
 * If you are using a namespace for your styled components, this can come in handy giving each
 * styled component in this namespace a displayName which gives better debugging experience
 */
function applyDisplayNames(styledObject) {
  return Object.keys(styledObject).reduce(function (newStyledObject, styledComponentName) {
    var styledComponent = styledObject[styledComponentName];
    styledComponent.displayName = "".concat(styledComponentName);
    return Object.assign(newStyledObject, _defineProperty({}, styledComponentName, styledComponent));
  }, {});
}

/**
 * passes {value} to {ref}
 * Useful if you want to expose the ref of an inner component to the public API
 * while still using it inside the component.
 * @param ref A ref callback or ref object. If anything falsy, this is a no-op.
 */
function setRef(ref, value) {
  if (typeof ref === 'function') {
    ref(value);
  } else if (ref) {
    ref.current = value;
  }
}

function useForkRef(refA, refB) {
  /**
   * This will create a new function if the ref props change and are defined.
   * This means react will call the old forkRef with `null` and the new forkRef
   * with the ref. Cleanup naturally emerges from this behavior.
   */
  return React__namespace.useMemo(function () {
    if (refA == null && refB == null) {
      return null;
    }
    return function (refValue) {
      setRef(refA, refValue);
      setRef(refB, refValue);
    };
  }, [refA, refB]);
}

function restrictNumber$1(number) {
  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var max = arguments.length > 2 ? arguments[2] : undefined;
  // we are not assigning default value for it as if max was null it will override the default value.
  var currentMax = max || 1000000;
  var convertedNumber = +number;
  return Math.min(Math.max(min, convertedNumber), currentMax);
}

function mapNumber$1(number, oldMin, oldMax, newMin, newMax) {
  return (number - oldMin) * (newMax - newMin) / (oldMax - oldMin) + newMin;
}

var rgbStringToArray = function rgbStringToArray(rgbColorString) {
  return rgbColorString.replaceAll(/[^\d,]/gi, '').split(',').map(function (n) {
    return +n;
  });
};
var hexToRgb = function hexToRgb(hexColor) {
  // if (!hexColor) return { r: 0, g: 0, b: 0 };
  if (!hexColor) return [0, 0, 0];
  return [Number.parseInt(hexColor.slice(1, 3), 16), Number.parseInt(hexColor.slice(3, 5), 16), Number.parseInt(hexColor.slice(5, 7), 16)];
};
var rgbChannelToHex = function rgbChannelToHex(channel) {
  return channel.toString(16).padStart(2, '0');
};
var rgbToHex = function rgbToHex() {
  for (var _len = arguments.length, rgbColor = new Array(_len), _key = 0; _key < _len; _key++) {
    rgbColor[_key] = arguments[_key];
  }
  return "#".concat(rgbColor.map(rgbChannelToHex).join(''));
};
var hslToHex = function hslToHex(h, s, l) {
  var dividedL = l / 100;
  var a = s * Math.min(dividedL, 1 - dividedL) / 100;
  var f = function f(n) {
    var k = (n + h / 30) % 12;
    var color = dividedL - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    return rgbChannelToHex(Math.round(255 * color));
  };
  return "#".concat(f(0)).concat(f(8)).concat(f(4));
};
var rgbToHsl = function rgbToHsl() {
  for (var _len2 = arguments.length, rgbColor = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
    rgbColor[_key2] = arguments[_key2];
  }
  var r = rgbColor[0],
    g = rgbColor[1],
    b = rgbColor[2];
  r /= 255;
  g /= 255;
  b /= 255;
  var min = Math.min(r, g, b);
  var max = Math.max(r, g, b);
  var h;
  var s;
  var l = (max + min) / 2;
  if (max === min) {
    h = 0;
    s = 0;
  } else {
    var diff = max - min;
    s = l > 0.5 ? diff / (2 - max - min) : diff / (max + min);
    switch (max) {
      case r:
        h = (g - b) / diff + (g < b ? 6 : 0);
        break;
      case g:
        h = (b - r) / diff + 2;
        break;
      case b:
        h = (r - g) / diff + 4;
        break;
      default:
        h = 0;
    }
    h /= 6;
  }

  // * 360 for having the hue in degrees
  return [Math.round(h * 360), Math.round(s * 100), Math.round(l * 100)];
};
var colorToHsl = function colorToHsl(color) {
  if (color.startsWith('#')) {
    var hex = color;
    if (color.length === 4) {
      hex = "#".concat(color[1]).concat(color[1]).concat(color[2]).concat(color[2]).concat(color[3]).concat(color[3]);
    }
    return rgbToHsl.apply(void 0, _toConsumableArray(hexToRgb(hex)));
  }
  if (color.startsWith('rgb')) {
    var colorInRgb = rgbStringToArray(color);
    return rgbToHsl.apply(void 0, _toConsumableArray(colorInRgb));
  }

  // if the color is in text and no one from previous then return the default color which is black
  if (typeof color === 'string') {
    return [0, 0, 0];
  }
  return color;
};
var colorToHex = function colorToHex(color) {
  if (color.startsWith('#')) {
    if (color.length === 7) {
      return color;
    }
    return "#".concat(color[0]).concat(color[0]).concat(color[1]).concat(color[1]).concat(color[2]).concat(color[2]);
  }
  if (color.startsWith('rgb')) {
    return rgbToHex.apply(void 0, _toConsumableArray(rgbStringToArray(color)));
  }
  if (typeof color === 'string') {
    return '#000000';
  }
  return color;
};
var checkIsBlack = function checkIsBlack(s, l) {
  return l === 0 && (s === 0 || s === 1);
};
var checkIsWhite = function checkIsWhite(s, l) {
  return s === 0 && l === 1;
};

// both hsv and hsl values are in [0, 1] except h is in [0, 360]
var hsvToHsl = function hsvToHsl(h, s, v) {
  var newS = s;
  var l = (2 - s) * v / 2;
  if (l !== 0) {
    if (l === 1) {
      newS = 0;
    } else if (l < 0.5) {
      newS = newS * v / (l * 2);
    } else {
      newS = newS * v / (2 - l * 2);
    }
  }
  var isBlack = checkIsBlack(newS, l);
  return [isBlack || checkIsWhite(newS, l) ? 0 : h, isBlack ? 0 : Math.round(newS * 100), Math.round(l * 100)];
};

// both hsv and hsl values are in [0, 1] except h is in [0, 360]
var hslToHsv = function hslToHsv(h, s, l) {
  var newS = s;
  var newL = l * 2;
  newS *= newL <= 1 ? newL : 2 - newL;
  var v = (newL + newS) / 2;
  newS = 2 * newS / (newL + newS);

  // return [h, newS, v];
  var isBlack = checkIsBlack(newS, l);
  return [isBlack || checkIsWhite(newS, l) ? 0 : h, isBlack ? 0 : Math.round(newS * 100), Math.round(v * 100)];
};

// TODO: validating 3 color code for Hex
// /^#([\da-f]{3}){1,2}$/i.test(color)colorToHex
var validateHex = function validateHex(color) {
  return /^#[\da-f]{6}$/i.test(color);
};

function getElemDocumentCoords$1(elem) {
  if (!elem) {
    return null;
  }
  var box = elem.getBoundingClientRect();
  var _document = document,
    body = _document.body;
  var docEl = document.documentElement;
  var scrollTop = window.pageYOffset || docEl.scrollTop || body.scrollTop;
  var scrollLeft = window.pageXOffset || docEl.scrollLeft || body.scrollLeft;
  var clientTop = docEl.clientTop || body.clientTop || 0;
  var clientLeft = docEl.clientLeft || body.clientLeft || 0;
  var top = box.top + scrollTop - clientTop;
  var left = box.left + scrollLeft - clientLeft;
  return {
    top: Math.round(top),
    left: Math.round(left),
    width: box.width,
    height: box.height
  };
}

function asc(a, b) {
  return a - b;
}
function valueToPercent(value, min, max) {
  return (value - min) * 100 / (max - min);
}
function percentToValue(percent, min, max) {
  return (max - min) * percent + min;
}
function getDecimalPrecision(num) {
  // This handles the case when num is very small (0.00000001), js will turn this into 1e-8.
  // When num is bigger than 1 or less than -1 it won't get converted to this notation so it's fine.
  if (Math.abs(num) < 1) {
    var parts = num.toExponential().split('e-');
    var matissaDecimalPart = parts[0].split('.')[1];
    return (matissaDecimalPart ? matissaDecimalPart.length : 0) + Number.parseInt(parts[1], 10);
  }
  var decimalPart = num.toString().split('.')[1];
  return decimalPart ? decimalPart.length : 0;
}
function roundValueToStep(value, step, min) {
  var nearest = Math.round((value - min) / step) * step + min;
  return Number(nearest.toFixed(getDecimalPrecision(step)));
}
function setValueIndex(_ref) {
  var values = _ref.values,
    newValue = _ref.newValue,
    index = _ref.index;
  var output = values.slice();
  output[index] = newValue;
  return output.sort(asc);
}
function findClosest(values, currentValue) {
  var _values$reduce = values.reduce(function (acc, value, index) {
      var distance = Math.abs(currentValue - value);
      if (acc === null || distance < acc.distance || distance === acc.distance) {
        return {
          distance: distance,
          index: index
        };
      }
      return acc;
    }, null),
    closestIndex = _values$reduce.index;
  return closestIndex;
}
function ownerDocument(node) {
  return node && node.ownerDocument || document;
}
function clamp(value, min, max) {
  if (value == null) {
    return min;
  }
  return Math.min(Math.max(min, value), max);
}
function trackFinger(event, touchId) {
  if (touchId.current !== undefined && event.changedTouches) {
    for (var i = 0; i < event.changedTouches.length; i += 1) {
      var touch = event.changedTouches[i];
      if (touch.identifier === touchId.current) {
        return {
          x: touch.clientX,
          y: touch.clientY
        };
      }
    }
    return false;
  }
  return {
    x: event.clientX,
    y: event.clientY
  };
}
var axisProps = {
  horizontal: {
    offset: function offset(percent) {
      return {
        left: "".concat(percent, "%")
      };
    },
    leap: function leap(percent) {
      return {
        width: "".concat(percent, "%")
      };
    }
  },
  'horizontal-reverse': {
    offset: function offset(percent) {
      return {
        right: "".concat(percent, "%")
      };
    },
    leap: function leap(percent) {
      return {
        width: "".concat(percent, "%")
      };
    }
  },
  vertical: {
    offset: function offset(percent) {
      return {
        bottom: "".concat(percent, "%")
      };
    },
    leap: function leap(percent) {
      return {
        height: "".concat(percent, "%")
      };
    }
  }
};
function focusThumb(_ref2) {
  var sliderRef = _ref2.sliderRef,
    activeIndex = _ref2.activeIndex,
    setActive = _ref2.setActive;
  var doc = ownerDocument(sliderRef.current);
  if (!sliderRef.current.contains(doc.activeElement) || Number(doc.activeElement.getAttribute('data-index')) !== activeIndex) {
    var _sliderRef$current$qu;
    (_sliderRef$current$qu = sliderRef.current.querySelector("[type=\"range\"][data-index=\"".concat(activeIndex, "\"]"))) === null || _sliderRef$current$qu === void 0 || _sliderRef$current$qu.focus();
  }
  if (setActive) {
    setActive(activeIndex);
  }
}

var Color = {
  TextPrimary: 'txt-primary',
  TextSecondary: 'txt-secondary',
  TextSecondaryInvert: 'txt-secondary-invert',
  TextPlaceholder: 'txt-placeholder',
  TextWarning: 'txt-warning',
  TextError: 'txt-error',
  TextInfo: 'txt-info',
  AccentPrimary: 'accent-primary',
  AccentPrimaryHover: 'accent-primary-hover',
  AccentPrimaryActive: 'accent-primary-active',
  AccentPrimaryDisabled: 'accent-primary-disabled',
  AccentSecondaryDisabled: 'accent-secondary-disabled',
  AccentStateless: 'accent-stateless',
  AccentStateless_0_4_Opacity: 'accent-stateless_0_4_opacity',
  Accent_0_5_5_Opacity: 'accent_0_5_5_opacity',
  Accent_0_5_Opacity: 'accent_0_5_opacity',
  Accent_0_7_Opacity: 'accent_0_7_opacity',
  Accent_1_2_Opacity: 'accent_1_2_opacity',
  Accent_1_8_Opacity: 'accent_1_8_opacity',
  Accent_2_8_Opacity: 'accent_2_8_opacity',
  Accent_4_0_Opacity: 'accent_4_0_opacity',
  BackgroundGrey: 'bg-grey',
  BackgroundStateless: 'bg-stateless',
  BackgroundActive: 'bg-active',
  BackgroundBaseLight: 'bg-base-light',
  BackgroundBaseMedium: 'bg-base-medium',
  BackgroundPrimary: 'bg-primary',
  BackgroundPrimaryLight: 'bg-primary-light',
  BackgroundPrimaryHover: 'bg-primary-hover',
  BackgroundPrimaryActive: 'bg-primary-active',
  BackgroundPrimaryStateless: 'bg-primary-stateless',
  BackgroundPrimary_0_5_Opacity: 'bg-primary-0-5-opacity',
  BackgroundSecondary: 'bg-secondary',
  BackgroundHover: 'bg-hover',
  BackgroundGreen: 'bg-green',
  BackgroundGreenMedium: 'bg-green-medium',
  BackgroundBlue: 'bg-blue',
  BackgroundRed: 'bg-red',
  BackgroundRedLight: 'bg-red-light',
  BackgroundRedMedium: 'background-red-medium',
  BackgroundOrange: 'bg-orange',
  BackgroundTooltip: 'bg-tooltip',
  IconsPrimary: 'icon-primary',
  IconsPrimaryOpacity_0_6: 'icons-primary-opacity-0-6',
  IconsSecondary: 'icons-secondary',
  IconsPlaceholder: 'icons-placeholder',
  IconsInvert: 'icons-invert',
  IconsMuted: 'icons-muted',
  IconsPrimaryHover: 'icons-primary-hover',
  IconsSecondaryHover: 'icons-secondary-hover',
  ButtonPrimaryText: 'btn-primary-text',
  ButtonPrimaryText_0_6: 'btn-primary-text-0-6',
  ButtonPrimaryText_0_4: 'btn-primary-text-0-4',
  ButtonDisabledText: 'btn-disabled-text',
  ButtonSecondaryText: 'btn-secondary-text',
  LinkPrimary: 'link-primary',
  LinkStateless: 'link-stateless',
  LinkHover: 'link-hover',
  LinkActive: 'link-active',
  LinkMuted: 'link-muted',
  LinkPressed: 'link-pressed',
  BordersPrimary: 'borders-primary',
  BordersPrimaryHover: 'borders-primary-hover',
  BordersSecondary: 'borders-secondary',
  BordersStrong: 'borders-strong',
  BordersInvert: 'borders-invert',
  BorderHoverBottom: 'border-hover-bottom',
  BorderActiveBottom: 'border-active-bottom',
  BorderPrimaryStateless: 'border-primary-stateless',
  BordersDisabled: 'borders-disabled',
  BordersButton: 'borders-button',
  BordersItem: 'borders-item',
  BordersBaseLight: 'borders-base-light',
  BordersBaseMedium: 'borders-base-medium',
  BordersGreen: 'borders-green',
  BordersGreenMedium: 'borders-green-medium',
  BordersRed: 'borders-red',
  ActiveSecondary: 'active-secondary',
  ActiveSecondaryHover: 'active-secondary-hover',
  Tag: 'tag',
  StatesErrorDisabledText: 'states-error-disabled-text',
  Error: 'error',
  Error_0_28_Opacity: 'error-0-28-opacity',
  Error_0_12_Opacity: 'error-0-12-opacity',
  ErrorHover: 'error-hover',
  ErrorActive: 'error-active',
  Success: 'success',
  SuccessHover: 'success-hover',
  SuccessActive: 'success-Active',
  Warning: 'warning',
  WarningHover: 'warning-hover',
  WarningActive: 'warning-active',
  Info: 'info',
  Modified: 'modified',
  Red: 'red',
  Orange: 'orange',
  Salad: 'salad',
  Green: 'green',
  Blue: 'blue',
  Indigo: 'indigo',
  Violet: 'violet',
  Pink: 'pink',
  GradientRight: 'gradient-right',
  Extra_0_3_Overlay: 'extra-0-3-overlay',
  GradientRightActive: 'gradient-right-active',
  GradientRightHover: 'gradient-right-hover',
  Extra_0_5_Overlay: 'extra-0-5-overlay',
  Extra_0_7_Overlay: 'extra-0-7-overlay',
  Extra_0_9_Overlay: 'extra-0-9-overlay',
  Red_0_1_Overlay: 'red-0-1-overlay',
  Orange_0_1_Overlay: 'orange-0-1-overlay',
  Accent_0_8_Overlay: 'accent-0-8-overlay',
  Green_0_2_Overlay: 'green-0-2-Overlay',
  Link: 'link',
  Camera: 'camera',
  GoogleDrive: 'google-drive',
  Dropbox: 'dropbox',
  OneDrive: 'one-drive',
  Device: 'device',
  Instagram: 'instagram',
  FreeImages: 'free-images',
  FreeIcons: 'free-icons',
  Canvas: 'canvas',
  Box: 'box',
  ScreenCast: 'screen-cast',
  Unsplash: 'unsplash',
  LightShadow: 'light-shadow',
  MediumShadow: 'medium-shadow',
  LargeShadow: 'large-shadow',
  XLargeShadow: 'x-large-shadow'
};

var scrollBar = function scrollBar(_ref) {
  var palette = _ref.theme.palette;
  return styled.css(["&::-webkit-scrollbar{width:12px;}&::-webkit-scrollbar-thumb{background:", ";border:4px solid ", ";border-radius:99px;height:92px;padding:4px 6px;}"], palette[Color.BorderPrimaryStateless], palette[Color.ActiveSecondary]);
};

var ignoreEvent = function ignoreEvent(event) {
  var tagName = event.target.tagName;
  if (tagName === 'INPUT' || tagName === 'TEXTAREA') {
    event.stopPropagation();
    return;
  }
  event.preventDefault();
  event.stopPropagation();
};

var BorderRadiusSize = {
  Sm: 'sm',
  Md: 'md',
  Lg: 'lg'
};

var Typography = /*#__PURE__*/styled.createGlobalStyle(["", ";"], function (_ref) {
  var theme = _ref.theme;
  var baseLineHeight = theme.typography.baseLineHeight;
  return styled.css(["h1,h2,h3,h4,h5,h6,p,small{line-height:", ";}"], baseLineHeight);
});
var Typography$1 = Typography;

var FontWeight = {
  Thin: 100,
  ExtraLight: 200,
  Light: 300,
  Regular: 400,
  Medium: 500,
  SemiBold: 600,
  Bold: 700,
  ExtraBold: 800,
  Black: 900
};

var FontVariant = {
  TextExtraSmall: 'text-extra-small',
  TextSmall: 'text-small',
  TextSmallUp: 'text-small-up',
  TextMedium: 'text-medium',
  TextLarge: 'text-large',
  TextExtraLarge: 'text-extra-large',
  TextXExtraLarge: 'text-x-extra-large',
  TitleH6: 'title-h6',
  TitleH5: 'title-h5',
  TitleH4: 'title-h4',
  TitleH3: 'title-h3',
  TitleH2: 'title-h2',
  TitleH1: 'title-h1',
  LabelExtraSmall: 'label-extra-small',
  LabelExtraSmallEmphasis: 'label-extra-small-emphasis',
  LabelExtraSmallUp: 'label-extra-small-up',
  LabelSmall: 'label-small',
  LabelSmallEmphasis: 'label-small-emphasis',
  LabelSmallUp: 'label-small-up',
  LabelSmallUpEmphasis: 'label-small-up-emphasis',
  LabelMedium: 'label-medium',
  LabelMediumEmphasis: 'label-medium-emphasis',
  LabelLarge: 'label-large',
  LabelLargeEmphasis: 'label-large-emphasis',
  LabelLargeUp: 'label-large-up',
  LabelExtraLargeEmphasis: 'label-extra-large-emphasis',
  LabelExtraLarge: 'label-extra-large',
  LabelXExtraLargeEmphasis: 'label-x-extra-large-emphasis',
  LabelXExtraLarge: 'label-x-extra-large',
  LabelXXExtraLargeEmphasis: 'label-x-x-extra-large-emphasis',
  LabelXXExtraLarge: 'label-x-x-extra-large',
  LabelXXXExtraLarge: 'label-x-x-x-extra-large',
  ButtonSmEmphasis: 'btn-sm-emphasis',
  ButtonSm: 'btn-sm',
  ButtonSmUpEmphasis: 'btn-sm-up-emphasis',
  ButtonSmUp: 'btn-sm-up',
  ButtonMdEmphasis: 'btn-md-emphasis',
  ButtonMd: 'btn-md',
  ButtonLgEmphasis: 'btn-lg-emphasis',
  ButtonLg: 'btn-lg',
  ButtonLgUpEmphasis: 'btn-lg-up-emphasis',
  ButtonLgUp: 'btn-lg-up',
  LinkSmall: 'link-small',
  LinkSmallEmphasis: 'link-small-emphasis',
  LinkSmallUp: 'link-small-up',
  LinkSmallUpEmphasis: 'link-small-up-emphasis',
  LinkMedium: 'link-medium',
  LinkMediumEmphasis: 'link-medium-emphasis',
  LinkLarge: 'link-large',
  LinkLargeEmphasis: 'link-large-emphasis',
  LinkLargeUp: 'link-large-up',
  LinkLargeUpEmphasis: 'link-large-up-emphasis',
  InputSm: 'input-sm',
  InputSmUp: 'input-sm-up',
  InputMd: 'input-md',
  InputLg: 'input-lg'
};

function ownKeys$e(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$e(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$e(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$e(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var defaultFontValue = {
  fontFamily: '"Roboto"',
  fontStyle: 'normal',
  fontWeight: FontWeight.Regular
};
var getLabelFontVariants = function getLabelFontVariants() {
  var _ref;
  var fontOverride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _ref = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref, FontVariant.LabelExtraSmall, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '10px',
    lineHeight: '12px'
  }, fontOverride)), FontVariant.LabelExtraSmallEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: 'Bold',
    fontSize: '10px',
    lineHeight: '12px'
  }, fontOverride)), FontVariant.LabelExtraSmallUp, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '11px',
    lineHeight: '12px'
  }, fontOverride)), FontVariant.LabelSmall, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '12px',
    lineHeight: '14px'
  }, fontOverride)), FontVariant.LabelSmallEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '12px',
    lineHeight: '14px'
  }, fontOverride)), FontVariant.LabelSmallUp, _objectSpread$e(_objectSpread$e({
    fontSize: '13px',
    lineHeight: '16px'
  }, defaultFontValue), fontOverride)), FontVariant.LabelSmallUpEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '13px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.LabelMedium, _objectSpread$e(_objectSpread$e({
    fontSize: '14px',
    lineHeight: '16px'
  }, defaultFontValue), fontOverride)), FontVariant.LabelMediumEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '14px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.LabelLarge, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '16px',
    lineHeight: '18px'
  }, fontOverride)), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref, FontVariant.LabelLargeEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '16px',
    lineHeight: '18px'
  }, fontOverride)), FontVariant.LabelLargeUp, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Regular,
    fontSize: '18px',
    lineHeight: '20px'
  }, fontOverride)), FontVariant.LabelExtraLargeEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '24px',
    lineHeight: '28px'
  }, fontOverride)), FontVariant.LabelExtraLarge, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Regular,
    fontSize: '24px',
    lineHeight: '28px'
  }, fontOverride)), FontVariant.LabelXExtraLargeEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '32px',
    lineHeight: '36px'
  }, fontOverride)), FontVariant.LabelXExtraLarge, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '32px',
    lineHeight: '36px'
  }, fontOverride)), FontVariant.LabelXXExtraLargeEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '48px',
    lineHeight: '54px'
  }, fontOverride)), FontVariant.LabelXXExtraLarge, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '48px',
    lineHeight: '54px'
  }, fontOverride)), FontVariant.LabelXXXExtraLarge, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '60px',
    lineHeight: '68px'
  }, fontOverride));
};
var getTextFontVariants = function getTextFontVariants() {
  var fontOverride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, FontVariant.TextExtraSmall, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '11px',
    lineHeight: '14px'
  }, fontOverride)), FontVariant.TextSmall, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '12px',
    lineHeight: '18px'
  }, fontOverride)), FontVariant.TextSmallUp, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '13px',
    lineHeight: '18px'
  }, fontOverride)), FontVariant.TextMedium, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '14px',
    lineHeight: '20px'
  }, fontOverride)), FontVariant.TextLarge, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '16px',
    lineHeight: '22px'
  }, fontOverride)), FontVariant.TextExtraLarge, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '18px',
    lineHeight: '26px'
  }, fontOverride)), FontVariant.TextXExtraLarge, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '28px',
    lineHeight: '40px'
  }, fontOverride));
};
var getButtonFontVariants = function getButtonFontVariants() {
  var fontOverride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, FontVariant.ButtonSmEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '12px',
    lineHeight: '14px'
  }, fontOverride)), FontVariant.ButtonSm, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '12px',
    lineHeight: '14px'
  }, fontOverride)), FontVariant.ButtonSmUpEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '13px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.ButtonSmUp, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '13px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.ButtonMdEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '14px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.ButtonMd, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '14px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.ButtonLgEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '16px',
    lineHeight: '18px'
  }, fontOverride)), FontVariant.ButtonLg, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '16px',
    lineHeight: '18px'
  }, fontOverride)), FontVariant.ButtonLgUpEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '18px',
    lineHeight: '20px'
  }, fontOverride)), FontVariant.ButtonLgUp, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '18px',
    lineHeight: '20px'
  }, fontOverride));
};
var getLinkFontVariants = function getLinkFontVariants() {
  var fontOverride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, FontVariant.LinkSmall, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '12px',
    lineHeight: '14px'
  }, fontOverride)), FontVariant.LinkSmallEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '12px',
    lineHeight: '14px'
  }, fontOverride)), FontVariant.LinkSmallUp, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '13px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.LinkSmallUpEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '13px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.LinkMedium, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '14px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.LinkMediumEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '14px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.LinkLarge, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '16px',
    lineHeight: '18px'
  }, fontOverride)), FontVariant.LinkLargeEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '16px',
    lineHeight: '18px'
  }, fontOverride)), FontVariant.LinkLargeUp, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '18px',
    lineHeight: '20px'
  }, fontOverride)), FontVariant.LinkLargeUpEmphasis, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '18px',
    lineHeight: '20px'
  }, fontOverride));
};
var getInputFontVariants = function getInputFontVariants() {
  var fontOverride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, FontVariant.InputSm, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '12px',
    lineHeight: '14px'
  }, fontOverride)), FontVariant.InputSmUp, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '13px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.InputMd, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '14px',
    lineHeight: '16px'
  }, fontOverride)), FontVariant.InputLg, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontSize: '16px',
    lineHeight: '18px'
  }, fontOverride));
};
var getTitleFontVariants = function getTitleFontVariants() {
  var fontOverride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, FontVariant.TitleH6, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '12px',
    lineHeight: '18px'
  }, fontOverride)), FontVariant.TitleH5, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '14px',
    lineHeight: '21px'
  }, fontOverride)), FontVariant.TitleH4, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '16px',
    lineHeight: '24px'
  }, fontOverride)), FontVariant.TitleH3, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '18px',
    lineHeight: '27px'
  }, fontOverride)), FontVariant.TitleH2, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '20px',
    lineHeight: '30px'
  }, fontOverride)), FontVariant.TitleH1, _objectSpread$e(_objectSpread$e({}, defaultFontValue), {}, {
    fontWeight: FontWeight.Medium,
    fontSize: '28px',
    lineHeight: '42px'
  }, fontOverride));
};
var getDefaultTypography = function getDefaultTypography() {
  var typographyOverride = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return _objectSpread$e(_objectSpread$e({
    fontFamily: defaultFontValue.fontFamily,
    baseLineHeight: 1.375
  }, typographyOverride), {}, {
    font: _objectSpread$e(_objectSpread$e(_objectSpread$e(_objectSpread$e(_objectSpread$e(_objectSpread$e({}, getLabelFontVariants(typographyOverride)), getTextFontVariants(typographyOverride)), getButtonFontVariants(typographyOverride)), getLinkFontVariants(typographyOverride)), getInputFontVariants(typographyOverride)), getTitleFontVariants(typographyOverride))
  });
};

// Example with theme: ${({ theme }) => css``;

var CommonStyles = /*#__PURE__*/styled.createGlobalStyle(["@keyframes spinner{0%{transform:rotate(0deg);}100%{transform:rotate(360deg);}}.Menu-open{overflow:hidden;}.Modal-open{overflow:hidden;}"]);
var CommonStyles$1 = CommonStyles;

var _accent, _background, _borders, _states, _uploader, _extra;
function ownKeys$d(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$d(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$d(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$d(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
//TODO: update theme to include grouped palette
//TODO:change color values from rgb to hex
var groupedPalette = {
  text: _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Color.TextPrimary, 'rgba(55, 65, 75, 1)'), Color.TextSecondary, 'rgba(118, 138, 159, 1)'), Color.TextSecondaryInvert, 'rgba(213, 216, 220, 1)'), Color.TextPlaceholder, 'rgba(169, 182, 194, 1)'), Color.TextWarning, 'rgba(196, 110, 0, 1)'), Color.TextError, 'rgba(185, 33, 46, 1)'), Color.TextInfo, 'rgba(35, 117, 171, 1)'),
  accent: (_accent = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_accent, Color.AccentPrimary, 'rgba(104, 121, 235, 1)'), Color.AccentPrimaryHover, 'rgba(96, 111, 209, 1)'), Color.AccentPrimaryActive, 'rgba(73, 88, 188, 1)'), Color.AccentPrimaryDisabled, 'rgba(233, 238, 242, 1)'), Color.AccentSecondaryDisabled, '#F9FBFC'), Color.AccentStateless, 'rgba(104, 121, 235, 1)'), Color.AccentStateless_0_4_Opacity, 'rgba(104, 121, 235, 0.4)'), Color.Accent_0_5_5_Opacity, 'rgba(96, 111, 209, 0.55)'), Color.Accent_0_7_Opacity, 'rgba(96, 111, 209, 0.7)'), Color.Accent_0_5_Opacity, 'rgba(104, 121, 235, 0.05)'), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_accent, Color.Accent_1_2_Opacity, 'rgba(104, 121, 235, 0.12)'), Color.Accent_1_8_Opacity, 'rgba(104, 121, 235, 0.18)'), Color.Accent_2_8_Opacity, 'rgba(104, 121, 235, 0.28)'), Color.Accent_4_0_Opacity, 'rgba(104, 121, 235, 0.4)')),
  background: (_background = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_background, Color.BackgroundGrey, 'rgba(216, 224, 232, 1)'), Color.BackgroundStateless, 'rgba(255, 255, 255, 1)'), Color.BackgroundActive, 'rgba(243, 247, 250, 1)'), Color.BackgroundBaseLight, 'rgba(235, 239, 252, 1)'), Color.BackgroundBaseMedium, 'rgba(227, 231, 251, 1)'), Color.BackgroundPrimary, 'rgba(243, 245, 247, 1)'), Color.BackgroundPrimaryLight, 'rgba(243, 245, 247, 1)'), Color.BackgroundPrimaryHover, 'rgba(239, 243, 246, 1)'), Color.BackgroundPrimaryActive, 'rgba(93, 109, 126, 1)'), Color.BackgroundPrimary_0_5_Opacity, 'rgba(255, 255, 255, 0.500)'), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_background, Color.BackgroundPrimaryStateless, '#CCD6DE'), Color.BackgroundSecondary, 'rgba(255, 255, 255, 1)'), Color.BackgroundHover, 'rgba(249, 251, 252, 1)'), Color.BackgroundGreen, 'rgba(237, 250, 244, 1)'), Color.BackgroundGreenMedium, 'rgba(227, 250, 239, 1)'), Color.BackgroundBlue, 'rgba(244, 249, 255, 1)'), Color.BackgroundRed, 'rgba(253, 244, 242, 1)'), Color.BackgroundRedLight, 'rgba(255, 245, 245, 1)'), Color.BackgroundRedMedium, 'rgba(247, 228, 230, 1)'), Color.BackgroundOrange, 'rgba(255, 249, 242, 1)'), _defineProperty(_background, Color.BackgroundTooltip, 'rgba(79, 98, 118, 1)')),
  icons: _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Color.IconsPrimary, 'rgba(118, 138, 159, 1)'), Color.IconsPrimaryOpacity_0_6, 'rgba(93, 109, 126, 0.600)'), Color.IconsSecondary, 'rgba(151, 166, 182, 1)'), Color.IconsPlaceholder, 'rgba(223, 231, 237, 1)'), Color.IconsInvert, 'rgba(255, 255, 255, 1)'), Color.IconsMuted, 'rgba(169, 182, 194, 1)'), Color.IconsPrimaryHover, 'rgba(79, 98, 118, 1)'), Color.IconsSecondaryHover, 'rgba(118, 138, 159, 1)'),
  button: _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Color.ButtonPrimaryText, 'rgba(255, 255, 255, 1)'), Color.ButtonPrimaryText_0_6, 'rgba(255, 255, 255, 0.6)'), Color.ButtonPrimaryText_0_4, 'rgba(255, 255, 255, 0.4)'), Color.ButtonDisabledText, 'rgba(169, 182, 194, 1)'), Color.ButtonSecondaryText, 'rgba(0, 0, 0, 1)'),
  link: _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Color.LinkPrimary, 'rgba(118, 138, 159, 1)'), Color.LinkStateless, 'rgba(118, 138, 159, 1)'), Color.LinkHover, 'rgba(79, 98, 118, 1)'), Color.LinkActive, 'rgba(55, 65, 75, 1)'), Color.LinkPressed, 'rgba(104, 121, 235, 1)'), Color.LinkMuted, 'rgba(169, 182, 194, 1)'),
  borders: (_borders = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_borders, Color.BordersPrimary, 'rgba(204, 214, 222, 1)'), Color.BordersPrimaryHover, 'rgba(104, 118, 134, 1)'), Color.BordersSecondary, 'rgba(236, 240, 243, 1)'), Color.BordersStrong, 'rgba(204, 214, 222, 1)'), Color.BordersInvert, 'rgba(85, 99, 115, 1)'), Color.BorderHoverBottom, 'rgba(104, 121, 235, 0.18)'), Color.BorderActiveBottom, '#4958BC'), Color.BorderPrimaryStateless, 'rgba(204, 214, 222, 1)'), Color.BordersDisabled, 'rgba(73, 88, 188, 0.4)'), Color.BordersButton, 'rgba(151, 166, 182, 1)'), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_borders, Color.BordersItem, 'rgba(226, 232, 236, 1)'), Color.BordersBaseLight, 'rgba(211, 219, 250, 1)'), Color.BordersBaseMedium, 'rgba(164, 175, 227, 1)'), Color.BordersGreen, 'rgba(27, 161, 99, 0.22)'), Color.BordersGreenMedium, 'rgba(27, 161, 99, 0.4)'), Color.BordersRed, 'rgba(185, 33, 46, 0.4)')),
  states: (_states = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_states, Color.Error, 'rgba(246, 61, 61, 1)'), Color.Error_0_28_Opacity, 'rgba(185, 33, 46, 0.28)'), Color.Error_0_12_Opacity, 'rgba(255, 86, 78, 0.1)'), Color.ErrorHover, 'rgba(216, 46, 46, 1)'), Color.ErrorActive, 'rgba(185, 33, 46, 1)'), Color.Success, 'rgba(38, 193, 122, 1)'), Color.SuccessHover, 'rgba(30, 154, 98, 1)'), Color.SuccessActive, 'rgba(23, 116, 73, 1)'), Color.Warning, 'rgba(255, 172, 74, 1)'), Color.WarningHover, 'rgba(237, 145, 7, 1)'), _defineProperty(_defineProperty(_defineProperty(_states, Color.WarningActive, 'rgba(224, 135, 0, 1)'), Color.Info, 'rgba(41, 127, 184, 1)'), Color.Modified, 'rgba(165, 166, 246, 1)')),
  flat: _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Color.Red, 'rgba(219, 46, 50, 1)'), Color.Orange, 'rgba(255, 168, 0, 1)'), Color.Salad, 'rgba(143, 176, 33, 1)'), Color.Green, 'rgba(22, 160, 134, 1)'), Color.Blue, 'rgba(41, 127, 184, 1)'), Color.Indigo, 'rgba(91, 72, 162, 1)'), Color.Violet, 'rgba(141, 68, 173, 1)'), Color.Pink, 'rgba(211, 92, 158, 1)'),
  uploader: (_uploader = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_uploader, Color.Link, 'rgba(250, 166, 68, 1)'), Color.Camera, 'rgba(73, 186, 224, 1)'), Color.GoogleDrive, 'rgba(81, 136, 238, 1)'), Color.Dropbox, 'rgba(17, 40, 124, 1)'), Color.OneDrive, 'rgba(40, 100, 186, 1)'), Color.Device, 'rgba(102, 73, 209, 1)'), Color.Instagram, 'rgba(244, 70, 154, 1)'), Color.Unsplash, 'rgba(173, 38, 220, 1)'), Color.FreeImages, 'rgba(16, 163, 135, 1)'), Color.FreeIcons, 'rgba(62, 207, 139, 1)'), _defineProperty(_defineProperty(_defineProperty(_uploader, Color.Canvas, 'rgba(36, 190, 202, 1)'), Color.Box, 'rgba(0, 97, 213, 1)'), Color.ScreenCast, 'rgba(48, 61, 78, 1)')),
  extra: (_extra = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_extra, Color.GradientRight, 'linear-gradient(270deg, #FFFFFF 1.56%, rgba(255, 255, 255, 0.89) 52.4%, rgba(255, 255, 255, 0.532165) 76.04%, rgba(255, 255, 255, 0) 100%)'), Color.Extra_0_3_Overlay, 'rgba(79, 98, 118, 0.3)'), Color.GradientRightActive, 'linear-gradient(270deg, #F3F7FA 1.56%, #F3F7FA 52.4%, rgba(243, 247, 250, 0.53) 76.04%, rgba(243, 247, 250, 0) 100%)'), Color.GradientRightHover, 'linear-gradient(270deg, #F9FBFC 1.56%, #F9FBFC 52.4%, rgba(249, 251, 252, 0.53) 76.04%, rgba(249, 251, 252, 0) 100%)'), Color.Extra_0_5_Overlay, 'rgba(79, 98, 118, 0.5)'), Color.Extra_0_7_Overlay, 'rgba(79, 98, 118, 0.7)'), Color.Extra_0_9_Overlay, 'rgba(79, 98, 118, 0.9)'), Color.Red_0_1_Overlay, 'rgba(232, 91, 70, 0.1)'), Color.Orange_0_1_Overlay, 'rgba(250, 157, 47, 0.1)'), Color.Accent_0_8_Overlay, 'rgba(104, 121, 235, 0.08)'), _defineProperty(_extra, Color.Green_0_2_Overlay, 'rgba(27, 161, 99, 0.2)'))
};
var lightPalette = _objectSpread$d(_objectSpread$d(_objectSpread$d(_objectSpread$d(_objectSpread$d(_objectSpread$d(_objectSpread$d(_objectSpread$d(_objectSpread$d(_objectSpread$d(_objectSpread$d(_objectSpread$d({}, groupedPalette.text), groupedPalette.accent), groupedPalette.background), groupedPalette.icons), groupedPalette.button), groupedPalette.link), groupedPalette.borders), groupedPalette.states), groupedPalette.flat), groupedPalette.uploader), groupedPalette.extra), {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Color.ActiveSecondary, '#FFFFFF'), Color.ActiveSecondaryHover, 'rgba(104, 121, 235, 0.05)'), Color.Tag, '#889AAC'), Color.StatesErrorDisabledText, 'rgba(185, 33, 46, 0.3)'), Color.LightShadow, 'rgba(146, 166, 188, 0.2)'), Color.MediumShadow, 'rgba(146, 166, 188, 0.24)'), Color.LargeShadow, 'rgba(146, 166, 188, 0.32)'), Color.XLargeShadow, 'rgba(146, 166, 188, 0.5)'));
var defaultPalette = lightPalette;

var Shadows = {
  ShadowSm: 'shadow-sm',
  ShadowMd: 'shadow-md',
  ShadowLg: 'shadow-lg',
  ShadowXl: 'shadow-xl',
  Label: 'label',
  Header: 'header',
  HeaderPopup: 'header-popup',
  FooterPopup: 'footer-popup',
  LeftPanelMd: 'left-panel-md',
  RightPanelMd: 'right-panel-md',
  LeftPanelSm: 'left-panel-sm',
  RightPanelSm: 'right-panel-sm'
};

var _shadows;
var shadows = (_shadows = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_shadows, Shadows.ShadowSm, '0px 1px 2px 0px rgba(146, 166, 188, 0.2)'), Shadows.ShadowMd, ' 0px 1px 4px 0px rgba(146, 166, 188, 0.24)'), Shadows.ShadowLg, ' 0px 2px 6px 0px rgba(146, 166, 188, 0.32)'), Shadows.ShadowXl, ' 0px 2px 6px 0px rgba(146, 166, 188, 0.5)'), Shadows.Label, ' 0px 1px 3px 0px rgba(77, 78, 78, 0.15)'), Shadows.Header, ' 0px 6px 10px 0px rgba(146, 166, 188, 0.2)'), Shadows.HeaderPopup, ' 0px 3px 7px 0px rgba(146, 166, 188, 0.16)'), Shadows.FooterPopup, ' 0px -4px 8px 0px rgba(208, 215, 220, 0.22)'), Shadows.LeftPanelMd, ' 6px 8px 12px 0px rgba(146, 166, 188, 0.14)'), Shadows.RightPanelMd, '-6px 8px 12px 0px rgba(146, 166, 188, 0.14)'), _defineProperty(_defineProperty(_shadows, Shadows.LeftPanelSm, '6px -4px 12px 0px rgba(146, 166, 188, 0.14)'), Shadows.RightPanelSm, '-6px -4px 12px 0px rgba(146, 166, 188, 0.14)'));
var defaultShadows = shadows;

var Breakpoint = {
  Xs: 'xs',
  Sm: 'sm',
  Md: 'md',
  Lg: 'lg',
  Xl: 'xl',
  Xxl: 'xxl',
  Xxxl: 'xxxl'
};

var defaultBreakpoints = {
  keys: [Breakpoint.Xs, Breakpoint.Sm, Breakpoint.Md, Breakpoint.Lg, Breakpoint.Xl],
  values: _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Breakpoint.Xs, 0), Breakpoint.Sm, 576), Breakpoint.Md, 768), Breakpoint.Lg, 1084), Breakpoint.Xl, 1342), Breakpoint.Xxl, 1600), Breakpoint.Xxxl, 1920),
  classes: _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Breakpoint.Xs, '.sfx-breakpoint-xs'), Breakpoint.Sm, '.sfx-breakpoint-sm'), Breakpoint.Md, '.sfx-breakpoint-md'), Breakpoint.Lg, '.sfx-breakpoint-lg'), Breakpoint.Xl, '.sfx-breakpoint-xl'), Breakpoint.Xxl, '.sfx-breakpoint-xxl'), Breakpoint.Xxxl, '.sfx-breakpoint-xxxl'),
  getBreakpointClass: function getBreakpointClass() {
    return '';
  },
  up: function up() {
    return '';
  },
  down: function down() {
    return '';
  },
  between: function between() {
    return '';
  },
  only: function only() {
    return '';
  }
};

var createBreakpoints = function createBreakpoints(breakpoints) {
  var _breakpoints$values = breakpoints.values,
    values = _breakpoints$values === void 0 ? defaultBreakpoints.values : _breakpoints$values,
    _breakpoints$classes = breakpoints.classes,
    classes = _breakpoints$classes === void 0 ? defaultBreakpoints.classes : _breakpoints$classes;
  var unit = 'px';
  var keys = Object.keys(values);
  var up = function up(key) {
    var value = typeof values[key] === 'number' ? values[key] : key;
    return "@media (min-width:".concat(value).concat(unit, ")");
  };
  var down = function down(key) {
    var value = values[key];
    return "@media (max-width:".concat(value).concat(unit, ")");
  };
  var between = function between(start, end) {
    var endIndex = keys.indexOf(end);
    return "@media (min-width:".concat(values[start]).concat(unit, ") and (max-width:").concat(values[keys[endIndex]]).concat(unit, ")");
  };
  var only = function only(key) {
    if (keys.indexOf(key) + 1 < keys.length) {
      return between(key, keys[keys.indexOf(key) + 1]);
    }
    return up(key);
  };
  var getBreakpointClass = function getBreakpointClass(width, hideSelector) {
    var removeSelector = function removeSelector(str) {
      return str.slice(1);
    };
    if (width >= values.xs && width < values.sm) {
      return hideSelector ? removeSelector(classes.xs) : classes.xs;
    }
    if (width >= values.sm && width < values.md) {
      return hideSelector ? removeSelector(classes.sm) : classes.sm;
    }
    if (width >= values.md && width < values.lg) {
      return hideSelector ? removeSelector(classes.md) : classes.md;
    }
    if (width >= values.lg && width < values.xl) {
      return hideSelector ? removeSelector(classes.lg) : classes.lg;
    }
    if (width >= values.xl && width < values.xxl) {
      return hideSelector ? removeSelector(classes.xl) : classes.xl;
    }
    if (width >= values.xxl && width < values.xxxl) {
      return hideSelector ? removeSelector(classes.xxl) : classes.xxl;
    }
    if (width >= values.xxxl) {
      return hideSelector ? removeSelector(classes.xxxl) : classes.xxxl;
    }
    return hideSelector ? removeSelector(classes.md) : classes.md;
  };
  return {
    keys: keys,
    values: values,
    classes: classes,
    getBreakpointClass: getBreakpointClass,
    up: up,
    down: down,
    between: between,
    only: only
  };
};
var createBreakpoints$1 = createBreakpoints;

function ownKeys$c(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$c(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$c(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$c(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var defaultShape = {
  borderRadius: _defineProperty(_defineProperty(_defineProperty({}, BorderRadiusSize.Sm, '2px'), BorderRadiusSize.Md, '4px'), BorderRadiusSize.Lg, '8px')
};
var ThemeProvider = function ThemeProvider(_ref) {
  var children = _ref.children,
    _ref$theme = _ref.theme,
    theme = _ref$theme === void 0 ? {} : _ref$theme;
  var _theme$palette = theme.palette,
    paletteOverride = _theme$palette === void 0 ? {} : _theme$palette,
    _theme$breakpoints = theme.breakpoints,
    breakpointsOverride = _theme$breakpoints === void 0 ? {} : _theme$breakpoints,
    _theme$typography = theme.typography,
    typographyOverride = _theme$typography === void 0 ? {} : _theme$typography,
    _theme$shape = theme.shape,
    shapeOverride = _theme$shape === void 0 ? {} : _theme$shape,
    _theme$shadows = theme.shadows,
    shadowsOverride = _theme$shadows === void 0 ? {} : _theme$shadows;
  var finalTheme = React.useMemo(function () {
    var palette = _objectSpread$c(_objectSpread$c({}, defaultPalette), paletteOverride);
    var breakpoints = createBreakpoints$1(breakpointsOverride);
    var shadows = _objectSpread$c(_objectSpread$c({}, defaultShadows), shadowsOverride);
    return {
      palette: palette,
      breakpoints: breakpoints,
      typography: getDefaultTypography(typographyOverride),
      shape: _objectSpread$c({}, merge(_objectSpread$c({}, defaultShape), _objectSpread$c({}, shapeOverride))),
      shadows: shadows
    };
  }, [JSON.stringify(theme)]);
  return /*#__PURE__*/React.createElement(styled.ThemeProvider, {
    theme: finalTheme
  }, /*#__PURE__*/React.createElement(React.Fragment, null, applyPolymorphicFunctionProp(children, finalTheme), /*#__PURE__*/React.createElement(CommonStyles$1, null), /*#__PURE__*/React.createElement(Typography$1, null)));
};
var ThemeProvider$1 = ThemeProvider;

function _extends$1() {
  return _extends$1 = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends$1.apply(null, arguments);
}

var indexNode$1 = {exports: {}};

var _FullInternals = {};

var _CoreInternals = {};

var Global = {};

var hasRequiredGlobal;

function requireGlobal () {
	if (hasRequiredGlobal) return Global;
	hasRequiredGlobal = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports._registerNode = exports.Konva = exports.glob = void 0;
		const PI_OVER_180 = Math.PI / 180;
		function detectBrowser() {
		    return (typeof window !== 'undefined' &&
		        ({}.toString.call(window) === '[object Window]' ||
		            {}.toString.call(window) === '[object global]'));
		}
		exports.glob = typeof commonjsGlobal !== 'undefined'
		    ? commonjsGlobal
		    : typeof window !== 'undefined'
		        ? window
		        : typeof WorkerGlobalScope !== 'undefined'
		            ? self
		            : {};
		exports.Konva = {
		    _global: exports.glob,
		    version: '9.3.6',
		    isBrowser: detectBrowser(),
		    isUnminified: /param/.test(function (param) { }.toString()),
		    dblClickWindow: 400,
		    getAngle(angle) {
		        return exports.Konva.angleDeg ? angle * PI_OVER_180 : angle;
		    },
		    enableTrace: false,
		    pointerEventsEnabled: true,
		    autoDrawEnabled: true,
		    hitOnDragEnabled: false,
		    capturePointerEventsEnabled: false,
		    _mouseListenClick: false,
		    _touchListenClick: false,
		    _pointerListenClick: false,
		    _mouseInDblClickWindow: false,
		    _touchInDblClickWindow: false,
		    _pointerInDblClickWindow: false,
		    _mouseDblClickPointerId: null,
		    _touchDblClickPointerId: null,
		    _pointerDblClickPointerId: null,
		    pixelRatio: (typeof window !== 'undefined' && window.devicePixelRatio) || 1,
		    dragDistance: 3,
		    angleDeg: true,
		    showWarnings: true,
		    dragButtons: [0, 1],
		    isDragging() {
		        return exports.Konva['DD'].isDragging;
		    },
		    isTransforming() {
		        var _a;
		        return (_a = exports.Konva['Transformer']) === null || _a === void 0 ? void 0 : _a.isTransforming();
		    },
		    isDragReady() {
		        return !!exports.Konva['DD'].node;
		    },
		    releaseCanvasOnDestroy: true,
		    document: exports.glob.document,
		    _injectGlobal(Konva) {
		        exports.glob.Konva = Konva;
		    },
		};
		const _registerNode = (NodeClass) => {
		    exports.Konva[NodeClass.prototype.getClassName()] = NodeClass;
		};
		exports._registerNode = _registerNode;
		exports.Konva._injectGlobal(exports.Konva); 
	} (Global));
	return Global;
}

var Util = {};

var hasRequiredUtil;

function requireUtil () {
	if (hasRequiredUtil) return Util;
	hasRequiredUtil = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Util = exports.Transform = void 0;
		const Global_1 = requireGlobal();
		class Transform {
		    constructor(m = [1, 0, 0, 1, 0, 0]) {
		        this.dirty = false;
		        this.m = (m && m.slice()) || [1, 0, 0, 1, 0, 0];
		    }
		    reset() {
		        this.m[0] = 1;
		        this.m[1] = 0;
		        this.m[2] = 0;
		        this.m[3] = 1;
		        this.m[4] = 0;
		        this.m[5] = 0;
		    }
		    copy() {
		        return new Transform(this.m);
		    }
		    copyInto(tr) {
		        tr.m[0] = this.m[0];
		        tr.m[1] = this.m[1];
		        tr.m[2] = this.m[2];
		        tr.m[3] = this.m[3];
		        tr.m[4] = this.m[4];
		        tr.m[5] = this.m[5];
		    }
		    point(point) {
		        var m = this.m;
		        return {
		            x: m[0] * point.x + m[2] * point.y + m[4],
		            y: m[1] * point.x + m[3] * point.y + m[5],
		        };
		    }
		    translate(x, y) {
		        this.m[4] += this.m[0] * x + this.m[2] * y;
		        this.m[5] += this.m[1] * x + this.m[3] * y;
		        return this;
		    }
		    scale(sx, sy) {
		        this.m[0] *= sx;
		        this.m[1] *= sx;
		        this.m[2] *= sy;
		        this.m[3] *= sy;
		        return this;
		    }
		    rotate(rad) {
		        var c = Math.cos(rad);
		        var s = Math.sin(rad);
		        var m11 = this.m[0] * c + this.m[2] * s;
		        var m12 = this.m[1] * c + this.m[3] * s;
		        var m21 = this.m[0] * -s + this.m[2] * c;
		        var m22 = this.m[1] * -s + this.m[3] * c;
		        this.m[0] = m11;
		        this.m[1] = m12;
		        this.m[2] = m21;
		        this.m[3] = m22;
		        return this;
		    }
		    getTranslation() {
		        return {
		            x: this.m[4],
		            y: this.m[5],
		        };
		    }
		    skew(sx, sy) {
		        var m11 = this.m[0] + this.m[2] * sy;
		        var m12 = this.m[1] + this.m[3] * sy;
		        var m21 = this.m[2] + this.m[0] * sx;
		        var m22 = this.m[3] + this.m[1] * sx;
		        this.m[0] = m11;
		        this.m[1] = m12;
		        this.m[2] = m21;
		        this.m[3] = m22;
		        return this;
		    }
		    multiply(matrix) {
		        var m11 = this.m[0] * matrix.m[0] + this.m[2] * matrix.m[1];
		        var m12 = this.m[1] * matrix.m[0] + this.m[3] * matrix.m[1];
		        var m21 = this.m[0] * matrix.m[2] + this.m[2] * matrix.m[3];
		        var m22 = this.m[1] * matrix.m[2] + this.m[3] * matrix.m[3];
		        var dx = this.m[0] * matrix.m[4] + this.m[2] * matrix.m[5] + this.m[4];
		        var dy = this.m[1] * matrix.m[4] + this.m[3] * matrix.m[5] + this.m[5];
		        this.m[0] = m11;
		        this.m[1] = m12;
		        this.m[2] = m21;
		        this.m[3] = m22;
		        this.m[4] = dx;
		        this.m[5] = dy;
		        return this;
		    }
		    invert() {
		        var d = 1 / (this.m[0] * this.m[3] - this.m[1] * this.m[2]);
		        var m0 = this.m[3] * d;
		        var m1 = -this.m[1] * d;
		        var m2 = -this.m[2] * d;
		        var m3 = this.m[0] * d;
		        var m4 = d * (this.m[2] * this.m[5] - this.m[3] * this.m[4]);
		        var m5 = d * (this.m[1] * this.m[4] - this.m[0] * this.m[5]);
		        this.m[0] = m0;
		        this.m[1] = m1;
		        this.m[2] = m2;
		        this.m[3] = m3;
		        this.m[4] = m4;
		        this.m[5] = m5;
		        return this;
		    }
		    getMatrix() {
		        return this.m;
		    }
		    decompose() {
		        var a = this.m[0];
		        var b = this.m[1];
		        var c = this.m[2];
		        var d = this.m[3];
		        var e = this.m[4];
		        var f = this.m[5];
		        var delta = a * d - b * c;
		        let result = {
		            x: e,
		            y: f,
		            rotation: 0,
		            scaleX: 0,
		            scaleY: 0,
		            skewX: 0,
		            skewY: 0,
		        };
		        if (a != 0 || b != 0) {
		            var r = Math.sqrt(a * a + b * b);
		            result.rotation = b > 0 ? Math.acos(a / r) : -Math.acos(a / r);
		            result.scaleX = r;
		            result.scaleY = delta / r;
		            result.skewX = (a * c + b * d) / delta;
		            result.skewY = 0;
		        }
		        else if (c != 0 || d != 0) {
		            var s = Math.sqrt(c * c + d * d);
		            result.rotation =
		                Math.PI / 2 - (d > 0 ? Math.acos(-c / s) : -Math.acos(c / s));
		            result.scaleX = delta / s;
		            result.scaleY = s;
		            result.skewX = 0;
		            result.skewY = (a * c + b * d) / delta;
		        }
		        else ;
		        result.rotation = exports.Util._getRotation(result.rotation);
		        return result;
		    }
		}
		exports.Transform = Transform;
		var OBJECT_ARRAY = '[object Array]', OBJECT_NUMBER = '[object Number]', OBJECT_STRING = '[object String]', OBJECT_BOOLEAN = '[object Boolean]', PI_OVER_DEG180 = Math.PI / 180, DEG180_OVER_PI = 180 / Math.PI, HASH = '#', EMPTY_STRING = '', ZERO = '0', KONVA_WARNING = 'Konva warning: ', KONVA_ERROR = 'Konva error: ', RGB_PAREN = 'rgb(', COLORS = {
		    aliceblue: [240, 248, 255],
		    antiquewhite: [250, 235, 215],
		    aqua: [0, 255, 255],
		    aquamarine: [127, 255, 212],
		    azure: [240, 255, 255],
		    beige: [245, 245, 220],
		    bisque: [255, 228, 196],
		    black: [0, 0, 0],
		    blanchedalmond: [255, 235, 205],
		    blue: [0, 0, 255],
		    blueviolet: [138, 43, 226],
		    brown: [165, 42, 42],
		    burlywood: [222, 184, 135],
		    cadetblue: [95, 158, 160],
		    chartreuse: [127, 255, 0],
		    chocolate: [210, 105, 30],
		    coral: [255, 127, 80],
		    cornflowerblue: [100, 149, 237],
		    cornsilk: [255, 248, 220],
		    crimson: [220, 20, 60],
		    cyan: [0, 255, 255],
		    darkblue: [0, 0, 139],
		    darkcyan: [0, 139, 139],
		    darkgoldenrod: [184, 132, 11],
		    darkgray: [169, 169, 169],
		    darkgreen: [0, 100, 0],
		    darkgrey: [169, 169, 169],
		    darkkhaki: [189, 183, 107],
		    darkmagenta: [139, 0, 139],
		    darkolivegreen: [85, 107, 47],
		    darkorange: [255, 140, 0],
		    darkorchid: [153, 50, 204],
		    darkred: [139, 0, 0],
		    darksalmon: [233, 150, 122],
		    darkseagreen: [143, 188, 143],
		    darkslateblue: [72, 61, 139],
		    darkslategray: [47, 79, 79],
		    darkslategrey: [47, 79, 79],
		    darkturquoise: [0, 206, 209],
		    darkviolet: [148, 0, 211],
		    deeppink: [255, 20, 147],
		    deepskyblue: [0, 191, 255],
		    dimgray: [105, 105, 105],
		    dimgrey: [105, 105, 105],
		    dodgerblue: [30, 144, 255],
		    firebrick: [178, 34, 34],
		    floralwhite: [255, 255, 240],
		    forestgreen: [34, 139, 34],
		    fuchsia: [255, 0, 255],
		    gainsboro: [220, 220, 220],
		    ghostwhite: [248, 248, 255],
		    gold: [255, 215, 0],
		    goldenrod: [218, 165, 32],
		    gray: [128, 128, 128],
		    green: [0, 128, 0],
		    greenyellow: [173, 255, 47],
		    grey: [128, 128, 128],
		    honeydew: [240, 255, 240],
		    hotpink: [255, 105, 180],
		    indianred: [205, 92, 92],
		    indigo: [75, 0, 130],
		    ivory: [255, 255, 240],
		    khaki: [240, 230, 140],
		    lavender: [230, 230, 250],
		    lavenderblush: [255, 240, 245],
		    lawngreen: [124, 252, 0],
		    lemonchiffon: [255, 250, 205],
		    lightblue: [173, 216, 230],
		    lightcoral: [240, 128, 128],
		    lightcyan: [224, 255, 255],
		    lightgoldenrodyellow: [250, 250, 210],
		    lightgray: [211, 211, 211],
		    lightgreen: [144, 238, 144],
		    lightgrey: [211, 211, 211],
		    lightpink: [255, 182, 193],
		    lightsalmon: [255, 160, 122],
		    lightseagreen: [32, 178, 170],
		    lightskyblue: [135, 206, 250],
		    lightslategray: [119, 136, 153],
		    lightslategrey: [119, 136, 153],
		    lightsteelblue: [176, 196, 222],
		    lightyellow: [255, 255, 224],
		    lime: [0, 255, 0],
		    limegreen: [50, 205, 50],
		    linen: [250, 240, 230],
		    magenta: [255, 0, 255],
		    maroon: [128, 0, 0],
		    mediumaquamarine: [102, 205, 170],
		    mediumblue: [0, 0, 205],
		    mediumorchid: [186, 85, 211],
		    mediumpurple: [147, 112, 219],
		    mediumseagreen: [60, 179, 113],
		    mediumslateblue: [123, 104, 238],
		    mediumspringgreen: [0, 250, 154],
		    mediumturquoise: [72, 209, 204],
		    mediumvioletred: [199, 21, 133],
		    midnightblue: [25, 25, 112],
		    mintcream: [245, 255, 250],
		    mistyrose: [255, 228, 225],
		    moccasin: [255, 228, 181],
		    navajowhite: [255, 222, 173],
		    navy: [0, 0, 128],
		    oldlace: [253, 245, 230],
		    olive: [128, 128, 0],
		    olivedrab: [107, 142, 35],
		    orange: [255, 165, 0],
		    orangered: [255, 69, 0],
		    orchid: [218, 112, 214],
		    palegoldenrod: [238, 232, 170],
		    palegreen: [152, 251, 152],
		    paleturquoise: [175, 238, 238],
		    palevioletred: [219, 112, 147],
		    papayawhip: [255, 239, 213],
		    peachpuff: [255, 218, 185],
		    peru: [205, 133, 63],
		    pink: [255, 192, 203],
		    plum: [221, 160, 203],
		    powderblue: [176, 224, 230],
		    purple: [128, 0, 128],
		    rebeccapurple: [102, 51, 153],
		    red: [255, 0, 0],
		    rosybrown: [188, 143, 143],
		    royalblue: [65, 105, 225],
		    saddlebrown: [139, 69, 19],
		    salmon: [250, 128, 114],
		    sandybrown: [244, 164, 96],
		    seagreen: [46, 139, 87],
		    seashell: [255, 245, 238],
		    sienna: [160, 82, 45],
		    silver: [192, 192, 192],
		    skyblue: [135, 206, 235],
		    slateblue: [106, 90, 205],
		    slategray: [119, 128, 144],
		    slategrey: [119, 128, 144],
		    snow: [255, 255, 250],
		    springgreen: [0, 255, 127],
		    steelblue: [70, 130, 180],
		    tan: [210, 180, 140],
		    teal: [0, 128, 128],
		    thistle: [216, 191, 216],
		    transparent: [255, 255, 255, 0],
		    tomato: [255, 99, 71],
		    turquoise: [64, 224, 208],
		    violet: [238, 130, 238],
		    wheat: [245, 222, 179],
		    white: [255, 255, 255],
		    whitesmoke: [245, 245, 245],
		    yellow: [255, 255, 0],
		    yellowgreen: [154, 205, 5],
		}, RGB_REGEX = /rgb\((\d{1,3}),(\d{1,3}),(\d{1,3})\)/, animQueue = [];
		const req = (typeof requestAnimationFrame !== 'undefined' && requestAnimationFrame) ||
		    function (f) {
		        setTimeout(f, 60);
		    };
		exports.Util = {
		    _isElement(obj) {
		        return !!(obj && obj.nodeType == 1);
		    },
		    _isFunction(obj) {
		        return !!(obj && obj.constructor && obj.call && obj.apply);
		    },
		    _isPlainObject(obj) {
		        return !!obj && obj.constructor === Object;
		    },
		    _isArray(obj) {
		        return Object.prototype.toString.call(obj) === OBJECT_ARRAY;
		    },
		    _isNumber(obj) {
		        return (Object.prototype.toString.call(obj) === OBJECT_NUMBER &&
		            !isNaN(obj) &&
		            isFinite(obj));
		    },
		    _isString(obj) {
		        return Object.prototype.toString.call(obj) === OBJECT_STRING;
		    },
		    _isBoolean(obj) {
		        return Object.prototype.toString.call(obj) === OBJECT_BOOLEAN;
		    },
		    isObject(val) {
		        return val instanceof Object;
		    },
		    isValidSelector(selector) {
		        if (typeof selector !== 'string') {
		            return false;
		        }
		        var firstChar = selector[0];
		        return (firstChar === '#' ||
		            firstChar === '.' ||
		            firstChar === firstChar.toUpperCase());
		    },
		    _sign(number) {
		        if (number === 0) {
		            return 1;
		        }
		        if (number > 0) {
		            return 1;
		        }
		        else {
		            return -1;
		        }
		    },
		    requestAnimFrame(callback) {
		        animQueue.push(callback);
		        if (animQueue.length === 1) {
		            req(function () {
		                const queue = animQueue;
		                animQueue = [];
		                queue.forEach(function (cb) {
		                    cb();
		                });
		            });
		        }
		    },
		    createCanvasElement() {
		        var canvas = document.createElement('canvas');
		        try {
		            canvas.style = canvas.style || {};
		        }
		        catch (e) { }
		        return canvas;
		    },
		    createImageElement() {
		        return document.createElement('img');
		    },
		    _isInDocument(el) {
		        while ((el = el.parentNode)) {
		            if (el == document) {
		                return true;
		            }
		        }
		        return false;
		    },
		    _urlToImage(url, callback) {
		        var imageObj = exports.Util.createImageElement();
		        imageObj.onload = function () {
		            callback(imageObj);
		        };
		        imageObj.src = url;
		    },
		    _rgbToHex(r, g, b) {
		        return ((1 << 24) + (r << 16) + (g << 8) + b).toString(16).slice(1);
		    },
		    _hexToRgb(hex) {
		        hex = hex.replace(HASH, EMPTY_STRING);
		        var bigint = parseInt(hex, 16);
		        return {
		            r: (bigint >> 16) & 255,
		            g: (bigint >> 8) & 255,
		            b: bigint & 255,
		        };
		    },
		    getRandomColor() {
		        var randColor = ((Math.random() * 0xffffff) << 0).toString(16);
		        while (randColor.length < 6) {
		            randColor = ZERO + randColor;
		        }
		        return HASH + randColor;
		    },
		    getRGB(color) {
		        var rgb;
		        if (color in COLORS) {
		            rgb = COLORS[color];
		            return {
		                r: rgb[0],
		                g: rgb[1],
		                b: rgb[2],
		            };
		        }
		        else if (color[0] === HASH) {
		            return this._hexToRgb(color.substring(1));
		        }
		        else if (color.substr(0, 4) === RGB_PAREN) {
		            rgb = RGB_REGEX.exec(color.replace(/ /g, ''));
		            return {
		                r: parseInt(rgb[1], 10),
		                g: parseInt(rgb[2], 10),
		                b: parseInt(rgb[3], 10),
		            };
		        }
		        else {
		            return {
		                r: 0,
		                g: 0,
		                b: 0,
		            };
		        }
		    },
		    colorToRGBA(str) {
		        str = str || 'black';
		        return (exports.Util._namedColorToRBA(str) ||
		            exports.Util._hex3ColorToRGBA(str) ||
		            exports.Util._hex4ColorToRGBA(str) ||
		            exports.Util._hex6ColorToRGBA(str) ||
		            exports.Util._hex8ColorToRGBA(str) ||
		            exports.Util._rgbColorToRGBA(str) ||
		            exports.Util._rgbaColorToRGBA(str) ||
		            exports.Util._hslColorToRGBA(str));
		    },
		    _namedColorToRBA(str) {
		        var c = COLORS[str.toLowerCase()];
		        if (!c) {
		            return null;
		        }
		        return {
		            r: c[0],
		            g: c[1],
		            b: c[2],
		            a: 1,
		        };
		    },
		    _rgbColorToRGBA(str) {
		        if (str.indexOf('rgb(') === 0) {
		            str = str.match(/rgb\(([^)]+)\)/)[1];
		            var parts = str.split(/ *, */).map(Number);
		            return {
		                r: parts[0],
		                g: parts[1],
		                b: parts[2],
		                a: 1,
		            };
		        }
		    },
		    _rgbaColorToRGBA(str) {
		        if (str.indexOf('rgba(') === 0) {
		            str = str.match(/rgba\(([^)]+)\)/)[1];
		            var parts = str.split(/ *, */).map((n, index) => {
		                if (n.slice(-1) === '%') {
		                    return index === 3 ? parseInt(n) / 100 : (parseInt(n) / 100) * 255;
		                }
		                return Number(n);
		            });
		            return {
		                r: parts[0],
		                g: parts[1],
		                b: parts[2],
		                a: parts[3],
		            };
		        }
		    },
		    _hex8ColorToRGBA(str) {
		        if (str[0] === '#' && str.length === 9) {
		            return {
		                r: parseInt(str.slice(1, 3), 16),
		                g: parseInt(str.slice(3, 5), 16),
		                b: parseInt(str.slice(5, 7), 16),
		                a: parseInt(str.slice(7, 9), 16) / 0xff,
		            };
		        }
		    },
		    _hex6ColorToRGBA(str) {
		        if (str[0] === '#' && str.length === 7) {
		            return {
		                r: parseInt(str.slice(1, 3), 16),
		                g: parseInt(str.slice(3, 5), 16),
		                b: parseInt(str.slice(5, 7), 16),
		                a: 1,
		            };
		        }
		    },
		    _hex4ColorToRGBA(str) {
		        if (str[0] === '#' && str.length === 5) {
		            return {
		                r: parseInt(str[1] + str[1], 16),
		                g: parseInt(str[2] + str[2], 16),
		                b: parseInt(str[3] + str[3], 16),
		                a: parseInt(str[4] + str[4], 16) / 0xff,
		            };
		        }
		    },
		    _hex3ColorToRGBA(str) {
		        if (str[0] === '#' && str.length === 4) {
		            return {
		                r: parseInt(str[1] + str[1], 16),
		                g: parseInt(str[2] + str[2], 16),
		                b: parseInt(str[3] + str[3], 16),
		                a: 1,
		            };
		        }
		    },
		    _hslColorToRGBA(str) {
		        if (/hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.test(str)) {
		            const [_, ...hsl] = /hsl\((\d+),\s*([\d.]+)%,\s*([\d.]+)%\)/g.exec(str);
		            const h = Number(hsl[0]) / 360;
		            const s = Number(hsl[1]) / 100;
		            const l = Number(hsl[2]) / 100;
		            let t2;
		            let t3;
		            let val;
		            if (s === 0) {
		                val = l * 255;
		                return {
		                    r: Math.round(val),
		                    g: Math.round(val),
		                    b: Math.round(val),
		                    a: 1,
		                };
		            }
		            if (l < 0.5) {
		                t2 = l * (1 + s);
		            }
		            else {
		                t2 = l + s - l * s;
		            }
		            const t1 = 2 * l - t2;
		            const rgb = [0, 0, 0];
		            for (let i = 0; i < 3; i++) {
		                t3 = h + (1 / 3) * -(i - 1);
		                if (t3 < 0) {
		                    t3++;
		                }
		                if (t3 > 1) {
		                    t3--;
		                }
		                if (6 * t3 < 1) {
		                    val = t1 + (t2 - t1) * 6 * t3;
		                }
		                else if (2 * t3 < 1) {
		                    val = t2;
		                }
		                else if (3 * t3 < 2) {
		                    val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
		                }
		                else {
		                    val = t1;
		                }
		                rgb[i] = val * 255;
		            }
		            return {
		                r: Math.round(rgb[0]),
		                g: Math.round(rgb[1]),
		                b: Math.round(rgb[2]),
		                a: 1,
		            };
		        }
		    },
		    haveIntersection(r1, r2) {
		        return !(r2.x > r1.x + r1.width ||
		            r2.x + r2.width < r1.x ||
		            r2.y > r1.y + r1.height ||
		            r2.y + r2.height < r1.y);
		    },
		    cloneObject(obj) {
		        var retObj = {};
		        for (var key in obj) {
		            if (this._isPlainObject(obj[key])) {
		                retObj[key] = this.cloneObject(obj[key]);
		            }
		            else if (this._isArray(obj[key])) {
		                retObj[key] = this.cloneArray(obj[key]);
		            }
		            else {
		                retObj[key] = obj[key];
		            }
		        }
		        return retObj;
		    },
		    cloneArray(arr) {
		        return arr.slice(0);
		    },
		    degToRad(deg) {
		        return deg * PI_OVER_DEG180;
		    },
		    radToDeg(rad) {
		        return rad * DEG180_OVER_PI;
		    },
		    _degToRad(deg) {
		        exports.Util.warn('Util._degToRad is removed. Please use public Util.degToRad instead.');
		        return exports.Util.degToRad(deg);
		    },
		    _radToDeg(rad) {
		        exports.Util.warn('Util._radToDeg is removed. Please use public Util.radToDeg instead.');
		        return exports.Util.radToDeg(rad);
		    },
		    _getRotation(radians) {
		        return Global_1.Konva.angleDeg ? exports.Util.radToDeg(radians) : radians;
		    },
		    _capitalize(str) {
		        return str.charAt(0).toUpperCase() + str.slice(1);
		    },
		    throw(str) {
		        throw new Error(KONVA_ERROR + str);
		    },
		    error(str) {
		        console.error(KONVA_ERROR + str);
		    },
		    warn(str) {
		        if (!Global_1.Konva.showWarnings) {
		            return;
		        }
		        console.warn(KONVA_WARNING + str);
		    },
		    each(obj, func) {
		        for (var key in obj) {
		            func(key, obj[key]);
		        }
		    },
		    _inRange(val, left, right) {
		        return left <= val && val < right;
		    },
		    _getProjectionToSegment(x1, y1, x2, y2, x3, y3) {
		        var x, y, dist;
		        var pd2 = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);
		        if (pd2 == 0) {
		            x = x1;
		            y = y1;
		            dist = (x3 - x2) * (x3 - x2) + (y3 - y2) * (y3 - y2);
		        }
		        else {
		            var u = ((x3 - x1) * (x2 - x1) + (y3 - y1) * (y2 - y1)) / pd2;
		            if (u < 0) {
		                x = x1;
		                y = y1;
		                dist = (x1 - x3) * (x1 - x3) + (y1 - y3) * (y1 - y3);
		            }
		            else if (u > 1.0) {
		                x = x2;
		                y = y2;
		                dist = (x2 - x3) * (x2 - x3) + (y2 - y3) * (y2 - y3);
		            }
		            else {
		                x = x1 + u * (x2 - x1);
		                y = y1 + u * (y2 - y1);
		                dist = (x - x3) * (x - x3) + (y - y3) * (y - y3);
		            }
		        }
		        return [x, y, dist];
		    },
		    _getProjectionToLine(pt, line, isClosed) {
		        var pc = exports.Util.cloneObject(pt);
		        var dist = Number.MAX_VALUE;
		        line.forEach(function (p1, i) {
		            if (!isClosed && i === line.length - 1) {
		                return;
		            }
		            var p2 = line[(i + 1) % line.length];
		            var proj = exports.Util._getProjectionToSegment(p1.x, p1.y, p2.x, p2.y, pt.x, pt.y);
		            var px = proj[0], py = proj[1], pdist = proj[2];
		            if (pdist < dist) {
		                pc.x = px;
		                pc.y = py;
		                dist = pdist;
		            }
		        });
		        return pc;
		    },
		    _prepareArrayForTween(startArray, endArray, isClosed) {
		        var n, start = [], end = [];
		        if (startArray.length > endArray.length) {
		            var temp = endArray;
		            endArray = startArray;
		            startArray = temp;
		        }
		        for (n = 0; n < startArray.length; n += 2) {
		            start.push({
		                x: startArray[n],
		                y: startArray[n + 1],
		            });
		        }
		        for (n = 0; n < endArray.length; n += 2) {
		            end.push({
		                x: endArray[n],
		                y: endArray[n + 1],
		            });
		        }
		        var newStart = [];
		        end.forEach(function (point) {
		            var pr = exports.Util._getProjectionToLine(point, start, isClosed);
		            newStart.push(pr.x);
		            newStart.push(pr.y);
		        });
		        return newStart;
		    },
		    _prepareToStringify(obj) {
		        var desc;
		        obj.visitedByCircularReferenceRemoval = true;
		        for (var key in obj) {
		            if (!(obj.hasOwnProperty(key) && obj[key] && typeof obj[key] == 'object')) {
		                continue;
		            }
		            desc = Object.getOwnPropertyDescriptor(obj, key);
		            if (obj[key].visitedByCircularReferenceRemoval ||
		                exports.Util._isElement(obj[key])) {
		                if (desc.configurable) {
		                    delete obj[key];
		                }
		                else {
		                    return null;
		                }
		            }
		            else if (exports.Util._prepareToStringify(obj[key]) === null) {
		                if (desc.configurable) {
		                    delete obj[key];
		                }
		                else {
		                    return null;
		                }
		            }
		        }
		        delete obj.visitedByCircularReferenceRemoval;
		        return obj;
		    },
		    _assign(target, source) {
		        for (var key in source) {
		            target[key] = source[key];
		        }
		        return target;
		    },
		    _getFirstPointerId(evt) {
		        if (!evt.touches) {
		            return evt.pointerId || 999;
		        }
		        else {
		            return evt.changedTouches[0].identifier;
		        }
		    },
		    releaseCanvas(...canvases) {
		        if (!Global_1.Konva.releaseCanvasOnDestroy)
		            return;
		        canvases.forEach((c) => {
		            c.width = 0;
		            c.height = 0;
		        });
		    },
		    drawRoundedRectPath(context, width, height, cornerRadius) {
		        let topLeft = 0;
		        let topRight = 0;
		        let bottomLeft = 0;
		        let bottomRight = 0;
		        if (typeof cornerRadius === 'number') {
		            topLeft =
		                topRight =
		                    bottomLeft =
		                        bottomRight =
		                            Math.min(cornerRadius, width / 2, height / 2);
		        }
		        else {
		            topLeft = Math.min(cornerRadius[0] || 0, width / 2, height / 2);
		            topRight = Math.min(cornerRadius[1] || 0, width / 2, height / 2);
		            bottomRight = Math.min(cornerRadius[2] || 0, width / 2, height / 2);
		            bottomLeft = Math.min(cornerRadius[3] || 0, width / 2, height / 2);
		        }
		        context.moveTo(topLeft, 0);
		        context.lineTo(width - topRight, 0);
		        context.arc(width - topRight, topRight, topRight, (Math.PI * 3) / 2, 0, false);
		        context.lineTo(width, height - bottomRight);
		        context.arc(width - bottomRight, height - bottomRight, bottomRight, 0, Math.PI / 2, false);
		        context.lineTo(bottomLeft, height);
		        context.arc(bottomLeft, height - bottomLeft, bottomLeft, Math.PI / 2, Math.PI, false);
		        context.lineTo(0, topLeft);
		        context.arc(topLeft, topLeft, topLeft, Math.PI, (Math.PI * 3) / 2, false);
		    },
		}; 
	} (Util));
	return Util;
}

var Node = {};

var Factory = {};

var Validators = {};

var hasRequiredValidators;

function requireValidators () {
	if (hasRequiredValidators) return Validators;
	hasRequiredValidators = 1;
	Object.defineProperty(Validators, "__esModule", { value: true });
	Validators.getComponentValidator = Validators.getBooleanValidator = Validators.getNumberArrayValidator = Validators.getFunctionValidator = Validators.getStringOrGradientValidator = Validators.getStringValidator = Validators.getNumberOrAutoValidator = Validators.getNumberOrArrayOfNumbersValidator = Validators.getNumberValidator = Validators.alphaComponent = Validators.RGBComponent = void 0;
	const Global_1 = requireGlobal();
	const Util_1 = requireUtil();
	function _formatValue(val) {
	    if (Util_1.Util._isString(val)) {
	        return '"' + val + '"';
	    }
	    if (Object.prototype.toString.call(val) === '[object Number]') {
	        return val;
	    }
	    if (Util_1.Util._isBoolean(val)) {
	        return val;
	    }
	    return Object.prototype.toString.call(val);
	}
	function RGBComponent(val) {
	    if (val > 255) {
	        return 255;
	    }
	    else if (val < 0) {
	        return 0;
	    }
	    return Math.round(val);
	}
	Validators.RGBComponent = RGBComponent;
	function alphaComponent(val) {
	    if (val > 1) {
	        return 1;
	    }
	    else if (val < 0.0001) {
	        return 0.0001;
	    }
	    return val;
	}
	Validators.alphaComponent = alphaComponent;
	function getNumberValidator() {
	    if (Global_1.Konva.isUnminified) {
	        return function (val, attr) {
	            if (!Util_1.Util._isNumber(val)) {
	                Util_1.Util.warn(_formatValue(val) +
	                    ' is a not valid value for "' +
	                    attr +
	                    '" attribute. The value should be a number.');
	            }
	            return val;
	        };
	    }
	}
	Validators.getNumberValidator = getNumberValidator;
	function getNumberOrArrayOfNumbersValidator(noOfElements) {
	    if (Global_1.Konva.isUnminified) {
	        return function (val, attr) {
	            let isNumber = Util_1.Util._isNumber(val);
	            let isValidArray = Util_1.Util._isArray(val) && val.length == noOfElements;
	            if (!isNumber && !isValidArray) {
	                Util_1.Util.warn(_formatValue(val) +
	                    ' is a not valid value for "' +
	                    attr +
	                    '" attribute. The value should be a number or Array<number>(' +
	                    noOfElements +
	                    ')');
	            }
	            return val;
	        };
	    }
	}
	Validators.getNumberOrArrayOfNumbersValidator = getNumberOrArrayOfNumbersValidator;
	function getNumberOrAutoValidator() {
	    if (Global_1.Konva.isUnminified) {
	        return function (val, attr) {
	            var isNumber = Util_1.Util._isNumber(val);
	            var isAuto = val === 'auto';
	            if (!(isNumber || isAuto)) {
	                Util_1.Util.warn(_formatValue(val) +
	                    ' is a not valid value for "' +
	                    attr +
	                    '" attribute. The value should be a number or "auto".');
	            }
	            return val;
	        };
	    }
	}
	Validators.getNumberOrAutoValidator = getNumberOrAutoValidator;
	function getStringValidator() {
	    if (Global_1.Konva.isUnminified) {
	        return function (val, attr) {
	            if (!Util_1.Util._isString(val)) {
	                Util_1.Util.warn(_formatValue(val) +
	                    ' is a not valid value for "' +
	                    attr +
	                    '" attribute. The value should be a string.');
	            }
	            return val;
	        };
	    }
	}
	Validators.getStringValidator = getStringValidator;
	function getStringOrGradientValidator() {
	    if (Global_1.Konva.isUnminified) {
	        return function (val, attr) {
	            const isString = Util_1.Util._isString(val);
	            const isGradient = Object.prototype.toString.call(val) === '[object CanvasGradient]' ||
	                (val && val.addColorStop);
	            if (!(isString || isGradient)) {
	                Util_1.Util.warn(_formatValue(val) +
	                    ' is a not valid value for "' +
	                    attr +
	                    '" attribute. The value should be a string or a native gradient.');
	            }
	            return val;
	        };
	    }
	}
	Validators.getStringOrGradientValidator = getStringOrGradientValidator;
	function getFunctionValidator() {
	    if (Global_1.Konva.isUnminified) {
	        return function (val, attr) {
	            if (!Util_1.Util._isFunction(val)) {
	                Util_1.Util.warn(_formatValue(val) +
	                    ' is a not valid value for "' +
	                    attr +
	                    '" attribute. The value should be a function.');
	            }
	            return val;
	        };
	    }
	}
	Validators.getFunctionValidator = getFunctionValidator;
	function getNumberArrayValidator() {
	    if (Global_1.Konva.isUnminified) {
	        return function (val, attr) {
	            const TypedArray = Int8Array ? Object.getPrototypeOf(Int8Array) : null;
	            if (TypedArray && val instanceof TypedArray) {
	                return val;
	            }
	            if (!Util_1.Util._isArray(val)) {
	                Util_1.Util.warn(_formatValue(val) +
	                    ' is a not valid value for "' +
	                    attr +
	                    '" attribute. The value should be a array of numbers.');
	            }
	            else {
	                val.forEach(function (item) {
	                    if (!Util_1.Util._isNumber(item)) {
	                        Util_1.Util.warn('"' +
	                            attr +
	                            '" attribute has non numeric element ' +
	                            item +
	                            '. Make sure that all elements are numbers.');
	                    }
	                });
	            }
	            return val;
	        };
	    }
	}
	Validators.getNumberArrayValidator = getNumberArrayValidator;
	function getBooleanValidator() {
	    if (Global_1.Konva.isUnminified) {
	        return function (val, attr) {
	            var isBool = val === true || val === false;
	            if (!isBool) {
	                Util_1.Util.warn(_formatValue(val) +
	                    ' is a not valid value for "' +
	                    attr +
	                    '" attribute. The value should be a boolean.');
	            }
	            return val;
	        };
	    }
	}
	Validators.getBooleanValidator = getBooleanValidator;
	function getComponentValidator(components) {
	    if (Global_1.Konva.isUnminified) {
	        return function (val, attr) {
	            if (val === undefined || val === null) {
	                return val;
	            }
	            if (!Util_1.Util.isObject(val)) {
	                Util_1.Util.warn(_formatValue(val) +
	                    ' is a not valid value for "' +
	                    attr +
	                    '" attribute. The value should be an object with properties ' +
	                    components);
	            }
	            return val;
	        };
	    }
	}
	Validators.getComponentValidator = getComponentValidator;
	return Validators;
}

var hasRequiredFactory;

function requireFactory () {
	if (hasRequiredFactory) return Factory;
	hasRequiredFactory = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Factory = void 0;
		const Util_1 = requireUtil();
		const Validators_1 = requireValidators();
		var GET = 'get', SET = 'set';
		exports.Factory = {
		    addGetterSetter(constructor, attr, def, validator, after) {
		        exports.Factory.addGetter(constructor, attr, def);
		        exports.Factory.addSetter(constructor, attr, validator, after);
		        exports.Factory.addOverloadedGetterSetter(constructor, attr);
		    },
		    addGetter(constructor, attr, def) {
		        var method = GET + Util_1.Util._capitalize(attr);
		        constructor.prototype[method] =
		            constructor.prototype[method] ||
		                function () {
		                    var val = this.attrs[attr];
		                    return val === undefined ? def : val;
		                };
		    },
		    addSetter(constructor, attr, validator, after) {
		        var method = SET + Util_1.Util._capitalize(attr);
		        if (!constructor.prototype[method]) {
		            exports.Factory.overWriteSetter(constructor, attr, validator, after);
		        }
		    },
		    overWriteSetter(constructor, attr, validator, after) {
		        var method = SET + Util_1.Util._capitalize(attr);
		        constructor.prototype[method] = function (val) {
		            if (validator && val !== undefined && val !== null) {
		                val = validator.call(this, val, attr);
		            }
		            this._setAttr(attr, val);
		            if (after) {
		                after.call(this);
		            }
		            return this;
		        };
		    },
		    addComponentsGetterSetter(constructor, attr, components, validator, after) {
		        var len = components.length, capitalize = Util_1.Util._capitalize, getter = GET + capitalize(attr), setter = SET + capitalize(attr), n, component;
		        constructor.prototype[getter] = function () {
		            var ret = {};
		            for (n = 0; n < len; n++) {
		                component = components[n];
		                ret[component] = this.getAttr(attr + capitalize(component));
		            }
		            return ret;
		        };
		        var basicValidator = (0, Validators_1.getComponentValidator)(components);
		        constructor.prototype[setter] = function (val) {
		            var oldVal = this.attrs[attr], key;
		            if (validator) {
		                val = validator.call(this, val);
		            }
		            if (basicValidator) {
		                basicValidator.call(this, val, attr);
		            }
		            for (key in val) {
		                if (!val.hasOwnProperty(key)) {
		                    continue;
		                }
		                this._setAttr(attr + capitalize(key), val[key]);
		            }
		            if (!val) {
		                components.forEach((component) => {
		                    this._setAttr(attr + capitalize(component), undefined);
		                });
		            }
		            this._fireChangeEvent(attr, oldVal, val);
		            if (after) {
		                after.call(this);
		            }
		            return this;
		        };
		        exports.Factory.addOverloadedGetterSetter(constructor, attr);
		    },
		    addOverloadedGetterSetter(constructor, attr) {
		        var capitalizedAttr = Util_1.Util._capitalize(attr), setter = SET + capitalizedAttr, getter = GET + capitalizedAttr;
		        constructor.prototype[attr] = function () {
		            if (arguments.length) {
		                this[setter](arguments[0]);
		                return this;
		            }
		            return this[getter]();
		        };
		    },
		    addDeprecatedGetterSetter(constructor, attr, def, validator) {
		        Util_1.Util.error('Adding deprecated ' + attr);
		        var method = GET + Util_1.Util._capitalize(attr);
		        var message = attr +
		            ' property is deprecated and will be removed soon. Look at Konva change log for more information.';
		        constructor.prototype[method] = function () {
		            Util_1.Util.error(message);
		            var val = this.attrs[attr];
		            return val === undefined ? def : val;
		        };
		        exports.Factory.addSetter(constructor, attr, validator, function () {
		            Util_1.Util.error(message);
		        });
		        exports.Factory.addOverloadedGetterSetter(constructor, attr);
		    },
		    backCompat(constructor, methods) {
		        Util_1.Util.each(methods, function (oldMethodName, newMethodName) {
		            var method = constructor.prototype[newMethodName];
		            var oldGetter = GET + Util_1.Util._capitalize(oldMethodName);
		            var oldSetter = SET + Util_1.Util._capitalize(oldMethodName);
		            function deprecated() {
		                method.apply(this, arguments);
		                Util_1.Util.error('"' +
		                    oldMethodName +
		                    '" method is deprecated and will be removed soon. Use ""' +
		                    newMethodName +
		                    '" instead.');
		            }
		            constructor.prototype[oldMethodName] = deprecated;
		            constructor.prototype[oldGetter] = deprecated;
		            constructor.prototype[oldSetter] = deprecated;
		        });
		    },
		    afterSetFilter() {
		        this._filterUpToDate = false;
		    },
		}; 
	} (Factory));
	return Factory;
}

var Canvas = {};

var Context = {};

var hasRequiredContext;

function requireContext () {
	if (hasRequiredContext) return Context;
	hasRequiredContext = 1;
	Object.defineProperty(Context, "__esModule", { value: true });
	Context.HitContext = Context.SceneContext = Context.Context = void 0;
	const Util_1 = requireUtil();
	const Global_1 = requireGlobal();
	function simplifyArray(arr) {
	    var retArr = [], len = arr.length, util = Util_1.Util, n, val;
	    for (n = 0; n < len; n++) {
	        val = arr[n];
	        if (util._isNumber(val)) {
	            val = Math.round(val * 1000) / 1000;
	        }
	        else if (!util._isString(val)) {
	            val = val + '';
	        }
	        retArr.push(val);
	    }
	    return retArr;
	}
	var COMMA = ',', OPEN_PAREN = '(', CLOSE_PAREN = ')', OPEN_PAREN_BRACKET = '([', CLOSE_BRACKET_PAREN = '])', SEMICOLON = ';', DOUBLE_PAREN = '()', EQUALS = '=', CONTEXT_METHODS = [
	    'arc',
	    'arcTo',
	    'beginPath',
	    'bezierCurveTo',
	    'clearRect',
	    'clip',
	    'closePath',
	    'createLinearGradient',
	    'createPattern',
	    'createRadialGradient',
	    'drawImage',
	    'ellipse',
	    'fill',
	    'fillText',
	    'getImageData',
	    'createImageData',
	    'lineTo',
	    'moveTo',
	    'putImageData',
	    'quadraticCurveTo',
	    'rect',
	    'roundRect',
	    'restore',
	    'rotate',
	    'save',
	    'scale',
	    'setLineDash',
	    'setTransform',
	    'stroke',
	    'strokeText',
	    'transform',
	    'translate',
	];
	var CONTEXT_PROPERTIES = [
	    'fillStyle',
	    'strokeStyle',
	    'shadowColor',
	    'shadowBlur',
	    'shadowOffsetX',
	    'shadowOffsetY',
	    'letterSpacing',
	    'lineCap',
	    'lineDashOffset',
	    'lineJoin',
	    'lineWidth',
	    'miterLimit',
	    'direction',
	    'font',
	    'textAlign',
	    'textBaseline',
	    'globalAlpha',
	    'globalCompositeOperation',
	    'imageSmoothingEnabled',
	];
	const traceArrMax = 100;
	let Context$1 = class Context {
	    constructor(canvas) {
	        this.canvas = canvas;
	        if (Global_1.Konva.enableTrace) {
	            this.traceArr = [];
	            this._enableTrace();
	        }
	    }
	    fillShape(shape) {
	        if (shape.fillEnabled()) {
	            this._fill(shape);
	        }
	    }
	    _fill(shape) {
	    }
	    strokeShape(shape) {
	        if (shape.hasStroke()) {
	            this._stroke(shape);
	        }
	    }
	    _stroke(shape) {
	    }
	    fillStrokeShape(shape) {
	        if (shape.attrs.fillAfterStrokeEnabled) {
	            this.strokeShape(shape);
	            this.fillShape(shape);
	        }
	        else {
	            this.fillShape(shape);
	            this.strokeShape(shape);
	        }
	    }
	    getTrace(relaxed, rounded) {
	        var traceArr = this.traceArr, len = traceArr.length, str = '', n, trace, method, args;
	        for (n = 0; n < len; n++) {
	            trace = traceArr[n];
	            method = trace.method;
	            if (method) {
	                args = trace.args;
	                str += method;
	                if (relaxed) {
	                    str += DOUBLE_PAREN;
	                }
	                else {
	                    if (Util_1.Util._isArray(args[0])) {
	                        str += OPEN_PAREN_BRACKET + args.join(COMMA) + CLOSE_BRACKET_PAREN;
	                    }
	                    else {
	                        if (rounded) {
	                            args = args.map((a) => typeof a === 'number' ? Math.floor(a) : a);
	                        }
	                        str += OPEN_PAREN + args.join(COMMA) + CLOSE_PAREN;
	                    }
	                }
	            }
	            else {
	                str += trace.property;
	                if (!relaxed) {
	                    str += EQUALS + trace.val;
	                }
	            }
	            str += SEMICOLON;
	        }
	        return str;
	    }
	    clearTrace() {
	        this.traceArr = [];
	    }
	    _trace(str) {
	        var traceArr = this.traceArr, len;
	        traceArr.push(str);
	        len = traceArr.length;
	        if (len >= traceArrMax) {
	            traceArr.shift();
	        }
	    }
	    reset() {
	        var pixelRatio = this.getCanvas().getPixelRatio();
	        this.setTransform(1 * pixelRatio, 0, 0, 1 * pixelRatio, 0, 0);
	    }
	    getCanvas() {
	        return this.canvas;
	    }
	    clear(bounds) {
	        var canvas = this.getCanvas();
	        if (bounds) {
	            this.clearRect(bounds.x || 0, bounds.y || 0, bounds.width || 0, bounds.height || 0);
	        }
	        else {
	            this.clearRect(0, 0, canvas.getWidth() / canvas.pixelRatio, canvas.getHeight() / canvas.pixelRatio);
	        }
	    }
	    _applyLineCap(shape) {
	        const lineCap = shape.attrs.lineCap;
	        if (lineCap) {
	            this.setAttr('lineCap', lineCap);
	        }
	    }
	    _applyOpacity(shape) {
	        var absOpacity = shape.getAbsoluteOpacity();
	        if (absOpacity !== 1) {
	            this.setAttr('globalAlpha', absOpacity);
	        }
	    }
	    _applyLineJoin(shape) {
	        const lineJoin = shape.attrs.lineJoin;
	        if (lineJoin) {
	            this.setAttr('lineJoin', lineJoin);
	        }
	    }
	    setAttr(attr, val) {
	        this._context[attr] = val;
	    }
	    arc(x, y, radius, startAngle, endAngle, counterClockwise) {
	        this._context.arc(x, y, radius, startAngle, endAngle, counterClockwise);
	    }
	    arcTo(x1, y1, x2, y2, radius) {
	        this._context.arcTo(x1, y1, x2, y2, radius);
	    }
	    beginPath() {
	        this._context.beginPath();
	    }
	    bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y) {
	        this._context.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
	    }
	    clearRect(x, y, width, height) {
	        this._context.clearRect(x, y, width, height);
	    }
	    clip(...args) {
	        this._context.clip.apply(this._context, args);
	    }
	    closePath() {
	        this._context.closePath();
	    }
	    createImageData(width, height) {
	        var a = arguments;
	        if (a.length === 2) {
	            return this._context.createImageData(width, height);
	        }
	        else if (a.length === 1) {
	            return this._context.createImageData(width);
	        }
	    }
	    createLinearGradient(x0, y0, x1, y1) {
	        return this._context.createLinearGradient(x0, y0, x1, y1);
	    }
	    createPattern(image, repetition) {
	        return this._context.createPattern(image, repetition);
	    }
	    createRadialGradient(x0, y0, r0, x1, y1, r1) {
	        return this._context.createRadialGradient(x0, y0, r0, x1, y1, r1);
	    }
	    drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) {
	        var a = arguments, _context = this._context;
	        if (a.length === 3) {
	            _context.drawImage(image, sx, sy);
	        }
	        else if (a.length === 5) {
	            _context.drawImage(image, sx, sy, sWidth, sHeight);
	        }
	        else if (a.length === 9) {
	            _context.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);
	        }
	    }
	    ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, counterclockwise) {
	        this._context.ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle, counterclockwise);
	    }
	    isPointInPath(x, y, path, fillRule) {
	        if (path) {
	            return this._context.isPointInPath(path, x, y, fillRule);
	        }
	        return this._context.isPointInPath(x, y, fillRule);
	    }
	    fill(...args) {
	        this._context.fill.apply(this._context, args);
	    }
	    fillRect(x, y, width, height) {
	        this._context.fillRect(x, y, width, height);
	    }
	    strokeRect(x, y, width, height) {
	        this._context.strokeRect(x, y, width, height);
	    }
	    fillText(text, x, y, maxWidth) {
	        if (maxWidth) {
	            this._context.fillText(text, x, y, maxWidth);
	        }
	        else {
	            this._context.fillText(text, x, y);
	        }
	    }
	    measureText(text) {
	        return this._context.measureText(text);
	    }
	    getImageData(sx, sy, sw, sh) {
	        return this._context.getImageData(sx, sy, sw, sh);
	    }
	    lineTo(x, y) {
	        this._context.lineTo(x, y);
	    }
	    moveTo(x, y) {
	        this._context.moveTo(x, y);
	    }
	    rect(x, y, width, height) {
	        this._context.rect(x, y, width, height);
	    }
	    roundRect(x, y, width, height, radii) {
	        this._context.roundRect(x, y, width, height, radii);
	    }
	    putImageData(imageData, dx, dy) {
	        this._context.putImageData(imageData, dx, dy);
	    }
	    quadraticCurveTo(cpx, cpy, x, y) {
	        this._context.quadraticCurveTo(cpx, cpy, x, y);
	    }
	    restore() {
	        this._context.restore();
	    }
	    rotate(angle) {
	        this._context.rotate(angle);
	    }
	    save() {
	        this._context.save();
	    }
	    scale(x, y) {
	        this._context.scale(x, y);
	    }
	    setLineDash(segments) {
	        if (this._context.setLineDash) {
	            this._context.setLineDash(segments);
	        }
	        else if ('mozDash' in this._context) {
	            this._context['mozDash'] = segments;
	        }
	        else if ('webkitLineDash' in this._context) {
	            this._context['webkitLineDash'] = segments;
	        }
	    }
	    getLineDash() {
	        return this._context.getLineDash();
	    }
	    setTransform(a, b, c, d, e, f) {
	        this._context.setTransform(a, b, c, d, e, f);
	    }
	    stroke(path2d) {
	        if (path2d) {
	            this._context.stroke(path2d);
	        }
	        else {
	            this._context.stroke();
	        }
	    }
	    strokeText(text, x, y, maxWidth) {
	        this._context.strokeText(text, x, y, maxWidth);
	    }
	    transform(a, b, c, d, e, f) {
	        this._context.transform(a, b, c, d, e, f);
	    }
	    translate(x, y) {
	        this._context.translate(x, y);
	    }
	    _enableTrace() {
	        var that = this, len = CONTEXT_METHODS.length, origSetter = this.setAttr, n, args;
	        var func = function (methodName) {
	            var origMethod = that[methodName], ret;
	            that[methodName] = function () {
	                args = simplifyArray(Array.prototype.slice.call(arguments, 0));
	                ret = origMethod.apply(that, arguments);
	                that._trace({
	                    method: methodName,
	                    args: args,
	                });
	                return ret;
	            };
	        };
	        for (n = 0; n < len; n++) {
	            func(CONTEXT_METHODS[n]);
	        }
	        that.setAttr = function () {
	            origSetter.apply(that, arguments);
	            var prop = arguments[0];
	            var val = arguments[1];
	            if (prop === 'shadowOffsetX' ||
	                prop === 'shadowOffsetY' ||
	                prop === 'shadowBlur') {
	                val = val / this.canvas.getPixelRatio();
	            }
	            that._trace({
	                property: prop,
	                val: val,
	            });
	        };
	    }
	    _applyGlobalCompositeOperation(node) {
	        const op = node.attrs.globalCompositeOperation;
	        var def = !op || op === 'source-over';
	        if (!def) {
	            this.setAttr('globalCompositeOperation', op);
	        }
	    }
	};
	Context.Context = Context$1;
	CONTEXT_PROPERTIES.forEach(function (prop) {
	    Object.defineProperty(Context$1.prototype, prop, {
	        get() {
	            return this._context[prop];
	        },
	        set(val) {
	            this._context[prop] = val;
	        },
	    });
	});
	class SceneContext extends Context$1 {
	    constructor(canvas, { willReadFrequently = false } = {}) {
	        super(canvas);
	        this._context = canvas._canvas.getContext('2d', {
	            willReadFrequently,
	        });
	    }
	    _fillColor(shape) {
	        var fill = shape.fill();
	        this.setAttr('fillStyle', fill);
	        shape._fillFunc(this);
	    }
	    _fillPattern(shape) {
	        this.setAttr('fillStyle', shape._getFillPattern());
	        shape._fillFunc(this);
	    }
	    _fillLinearGradient(shape) {
	        var grd = shape._getLinearGradient();
	        if (grd) {
	            this.setAttr('fillStyle', grd);
	            shape._fillFunc(this);
	        }
	    }
	    _fillRadialGradient(shape) {
	        const grd = shape._getRadialGradient();
	        if (grd) {
	            this.setAttr('fillStyle', grd);
	            shape._fillFunc(this);
	        }
	    }
	    _fill(shape) {
	        const hasColor = shape.fill(), fillPriority = shape.getFillPriority();
	        if (hasColor && fillPriority === 'color') {
	            this._fillColor(shape);
	            return;
	        }
	        const hasPattern = shape.getFillPatternImage();
	        if (hasPattern && fillPriority === 'pattern') {
	            this._fillPattern(shape);
	            return;
	        }
	        const hasLinearGradient = shape.getFillLinearGradientColorStops();
	        if (hasLinearGradient && fillPriority === 'linear-gradient') {
	            this._fillLinearGradient(shape);
	            return;
	        }
	        const hasRadialGradient = shape.getFillRadialGradientColorStops();
	        if (hasRadialGradient && fillPriority === 'radial-gradient') {
	            this._fillRadialGradient(shape);
	            return;
	        }
	        if (hasColor) {
	            this._fillColor(shape);
	        }
	        else if (hasPattern) {
	            this._fillPattern(shape);
	        }
	        else if (hasLinearGradient) {
	            this._fillLinearGradient(shape);
	        }
	        else if (hasRadialGradient) {
	            this._fillRadialGradient(shape);
	        }
	    }
	    _strokeLinearGradient(shape) {
	        const start = shape.getStrokeLinearGradientStartPoint(), end = shape.getStrokeLinearGradientEndPoint(), colorStops = shape.getStrokeLinearGradientColorStops(), grd = this.createLinearGradient(start.x, start.y, end.x, end.y);
	        if (colorStops) {
	            for (var n = 0; n < colorStops.length; n += 2) {
	                grd.addColorStop(colorStops[n], colorStops[n + 1]);
	            }
	            this.setAttr('strokeStyle', grd);
	        }
	    }
	    _stroke(shape) {
	        var dash = shape.dash(), strokeScaleEnabled = shape.getStrokeScaleEnabled();
	        if (shape.hasStroke()) {
	            if (!strokeScaleEnabled) {
	                this.save();
	                var pixelRatio = this.getCanvas().getPixelRatio();
	                this.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
	            }
	            this._applyLineCap(shape);
	            if (dash && shape.dashEnabled()) {
	                this.setLineDash(dash);
	                this.setAttr('lineDashOffset', shape.dashOffset());
	            }
	            this.setAttr('lineWidth', shape.strokeWidth());
	            if (!shape.getShadowForStrokeEnabled()) {
	                this.setAttr('shadowColor', 'rgba(0,0,0,0)');
	            }
	            var hasLinearGradient = shape.getStrokeLinearGradientColorStops();
	            if (hasLinearGradient) {
	                this._strokeLinearGradient(shape);
	            }
	            else {
	                this.setAttr('strokeStyle', shape.stroke());
	            }
	            shape._strokeFunc(this);
	            if (!strokeScaleEnabled) {
	                this.restore();
	            }
	        }
	    }
	    _applyShadow(shape) {
	        var _a, _b, _c;
	        var color = (_a = shape.getShadowRGBA()) !== null && _a !== void 0 ? _a : 'black', blur = (_b = shape.getShadowBlur()) !== null && _b !== void 0 ? _b : 5, offset = (_c = shape.getShadowOffset()) !== null && _c !== void 0 ? _c : {
	            x: 0,
	            y: 0,
	        }, scale = shape.getAbsoluteScale(), ratio = this.canvas.getPixelRatio(), scaleX = scale.x * ratio, scaleY = scale.y * ratio;
	        this.setAttr('shadowColor', color);
	        this.setAttr('shadowBlur', blur * Math.min(Math.abs(scaleX), Math.abs(scaleY)));
	        this.setAttr('shadowOffsetX', offset.x * scaleX);
	        this.setAttr('shadowOffsetY', offset.y * scaleY);
	    }
	}
	Context.SceneContext = SceneContext;
	class HitContext extends Context$1 {
	    constructor(canvas) {
	        super(canvas);
	        this._context = canvas._canvas.getContext('2d', {
	            willReadFrequently: true,
	        });
	    }
	    _fill(shape) {
	        this.save();
	        this.setAttr('fillStyle', shape.colorKey);
	        shape._fillFuncHit(this);
	        this.restore();
	    }
	    strokeShape(shape) {
	        if (shape.hasHitStroke()) {
	            this._stroke(shape);
	        }
	    }
	    _stroke(shape) {
	        if (shape.hasHitStroke()) {
	            const strokeScaleEnabled = shape.getStrokeScaleEnabled();
	            if (!strokeScaleEnabled) {
	                this.save();
	                var pixelRatio = this.getCanvas().getPixelRatio();
	                this.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
	            }
	            this._applyLineCap(shape);
	            var hitStrokeWidth = shape.hitStrokeWidth();
	            var strokeWidth = hitStrokeWidth === 'auto' ? shape.strokeWidth() : hitStrokeWidth;
	            this.setAttr('lineWidth', strokeWidth);
	            this.setAttr('strokeStyle', shape.colorKey);
	            shape._strokeFuncHit(this);
	            if (!strokeScaleEnabled) {
	                this.restore();
	            }
	        }
	    }
	}
	Context.HitContext = HitContext;
	return Context;
}

var hasRequiredCanvas;

function requireCanvas () {
	if (hasRequiredCanvas) return Canvas;
	hasRequiredCanvas = 1;
	Object.defineProperty(Canvas, "__esModule", { value: true });
	Canvas.HitCanvas = Canvas.SceneCanvas = Canvas.Canvas = void 0;
	const Util_1 = requireUtil();
	const Context_1 = requireContext();
	const Global_1 = requireGlobal();
	const Factory_1 = requireFactory();
	const Validators_1 = requireValidators();
	var _pixelRatio;
	function getDevicePixelRatio() {
	    if (_pixelRatio) {
	        return _pixelRatio;
	    }
	    var canvas = Util_1.Util.createCanvasElement();
	    var context = canvas.getContext('2d');
	    _pixelRatio = (function () {
	        var devicePixelRatio = Global_1.Konva._global.devicePixelRatio || 1, backingStoreRatio = context.webkitBackingStorePixelRatio ||
	            context.mozBackingStorePixelRatio ||
	            context.msBackingStorePixelRatio ||
	            context.oBackingStorePixelRatio ||
	            context.backingStorePixelRatio ||
	            1;
	        return devicePixelRatio / backingStoreRatio;
	    })();
	    Util_1.Util.releaseCanvas(canvas);
	    return _pixelRatio;
	}
	let Canvas$1 = class Canvas {
	    constructor(config) {
	        this.pixelRatio = 1;
	        this.width = 0;
	        this.height = 0;
	        this.isCache = false;
	        var conf = config || {};
	        var pixelRatio = conf.pixelRatio || Global_1.Konva.pixelRatio || getDevicePixelRatio();
	        this.pixelRatio = pixelRatio;
	        this._canvas = Util_1.Util.createCanvasElement();
	        this._canvas.style.padding = '0';
	        this._canvas.style.margin = '0';
	        this._canvas.style.border = '0';
	        this._canvas.style.background = 'transparent';
	        this._canvas.style.position = 'absolute';
	        this._canvas.style.top = '0';
	        this._canvas.style.left = '0';
	    }
	    getContext() {
	        return this.context;
	    }
	    getPixelRatio() {
	        return this.pixelRatio;
	    }
	    setPixelRatio(pixelRatio) {
	        var previousRatio = this.pixelRatio;
	        this.pixelRatio = pixelRatio;
	        this.setSize(this.getWidth() / previousRatio, this.getHeight() / previousRatio);
	    }
	    setWidth(width) {
	        this.width = this._canvas.width = width * this.pixelRatio;
	        this._canvas.style.width = width + 'px';
	        var pixelRatio = this.pixelRatio, _context = this.getContext()._context;
	        _context.scale(pixelRatio, pixelRatio);
	    }
	    setHeight(height) {
	        this.height = this._canvas.height = height * this.pixelRatio;
	        this._canvas.style.height = height + 'px';
	        var pixelRatio = this.pixelRatio, _context = this.getContext()._context;
	        _context.scale(pixelRatio, pixelRatio);
	    }
	    getWidth() {
	        return this.width;
	    }
	    getHeight() {
	        return this.height;
	    }
	    setSize(width, height) {
	        this.setWidth(width || 0);
	        this.setHeight(height || 0);
	    }
	    toDataURL(mimeType, quality) {
	        try {
	            return this._canvas.toDataURL(mimeType, quality);
	        }
	        catch (e) {
	            try {
	                return this._canvas.toDataURL();
	            }
	            catch (err) {
	                Util_1.Util.error('Unable to get data URL. ' +
	                    err.message +
	                    ' For more info read https://konvajs.org/docs/posts/Tainted_Canvas.html.');
	                return '';
	            }
	        }
	    }
	};
	Canvas.Canvas = Canvas$1;
	Factory_1.Factory.addGetterSetter(Canvas$1, 'pixelRatio', undefined, (0, Validators_1.getNumberValidator)());
	class SceneCanvas extends Canvas$1 {
	    constructor(config = { width: 0, height: 0, willReadFrequently: false }) {
	        super(config);
	        this.context = new Context_1.SceneContext(this, {
	            willReadFrequently: config.willReadFrequently,
	        });
	        this.setSize(config.width, config.height);
	    }
	}
	Canvas.SceneCanvas = SceneCanvas;
	class HitCanvas extends Canvas$1 {
	    constructor(config = { width: 0, height: 0 }) {
	        super(config);
	        this.hitCanvas = true;
	        this.context = new Context_1.HitContext(this);
	        this.setSize(config.width, config.height);
	    }
	}
	Canvas.HitCanvas = HitCanvas;
	return Canvas;
}

var DragAndDrop = {};

var hasRequiredDragAndDrop;

function requireDragAndDrop () {
	if (hasRequiredDragAndDrop) return DragAndDrop;
	hasRequiredDragAndDrop = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.DD = void 0;
		const Global_1 = requireGlobal();
		const Util_1 = requireUtil();
		exports.DD = {
		    get isDragging() {
		        var flag = false;
		        exports.DD._dragElements.forEach((elem) => {
		            if (elem.dragStatus === 'dragging') {
		                flag = true;
		            }
		        });
		        return flag;
		    },
		    justDragged: false,
		    get node() {
		        var node;
		        exports.DD._dragElements.forEach((elem) => {
		            node = elem.node;
		        });
		        return node;
		    },
		    _dragElements: new Map(),
		    _drag(evt) {
		        const nodesToFireEvents = [];
		        exports.DD._dragElements.forEach((elem, key) => {
		            const { node } = elem;
		            const stage = node.getStage();
		            stage.setPointersPositions(evt);
		            if (elem.pointerId === undefined) {
		                elem.pointerId = Util_1.Util._getFirstPointerId(evt);
		            }
		            const pos = stage._changedPointerPositions.find((pos) => pos.id === elem.pointerId);
		            if (!pos) {
		                return;
		            }
		            if (elem.dragStatus !== 'dragging') {
		                var dragDistance = node.dragDistance();
		                var distance = Math.max(Math.abs(pos.x - elem.startPointerPos.x), Math.abs(pos.y - elem.startPointerPos.y));
		                if (distance < dragDistance) {
		                    return;
		                }
		                node.startDrag({ evt });
		                if (!node.isDragging()) {
		                    return;
		                }
		            }
		            node._setDragPosition(evt, elem);
		            nodesToFireEvents.push(node);
		        });
		        nodesToFireEvents.forEach((node) => {
		            node.fire('dragmove', {
		                type: 'dragmove',
		                target: node,
		                evt: evt,
		            }, true);
		        });
		    },
		    _endDragBefore(evt) {
		        const drawNodes = [];
		        exports.DD._dragElements.forEach((elem) => {
		            const { node } = elem;
		            const stage = node.getStage();
		            if (evt) {
		                stage.setPointersPositions(evt);
		            }
		            const pos = stage._changedPointerPositions.find((pos) => pos.id === elem.pointerId);
		            if (!pos) {
		                return;
		            }
		            if (elem.dragStatus === 'dragging' || elem.dragStatus === 'stopped') {
		                exports.DD.justDragged = true;
		                Global_1.Konva._mouseListenClick = false;
		                Global_1.Konva._touchListenClick = false;
		                Global_1.Konva._pointerListenClick = false;
		                elem.dragStatus = 'stopped';
		            }
		            const drawNode = elem.node.getLayer() ||
		                (elem.node instanceof Global_1.Konva['Stage'] && elem.node);
		            if (drawNode && drawNodes.indexOf(drawNode) === -1) {
		                drawNodes.push(drawNode);
		            }
		        });
		        drawNodes.forEach((drawNode) => {
		            drawNode.draw();
		        });
		    },
		    _endDragAfter(evt) {
		        exports.DD._dragElements.forEach((elem, key) => {
		            if (elem.dragStatus === 'stopped') {
		                elem.node.fire('dragend', {
		                    type: 'dragend',
		                    target: elem.node,
		                    evt: evt,
		                }, true);
		            }
		            if (elem.dragStatus !== 'dragging') {
		                exports.DD._dragElements.delete(key);
		            }
		        });
		    },
		};
		if (Global_1.Konva.isBrowser) {
		    window.addEventListener('mouseup', exports.DD._endDragBefore, true);
		    window.addEventListener('touchend', exports.DD._endDragBefore, true);
		    window.addEventListener('mousemove', exports.DD._drag);
		    window.addEventListener('touchmove', exports.DD._drag);
		    window.addEventListener('mouseup', exports.DD._endDragAfter, false);
		    window.addEventListener('touchend', exports.DD._endDragAfter, false);
		} 
	} (DragAndDrop));
	return DragAndDrop;
}

var hasRequiredNode;

function requireNode () {
	if (hasRequiredNode) return Node;
	hasRequiredNode = 1;
	Object.defineProperty(Node, "__esModule", { value: true });
	Node.Node = void 0;
	const Util_1 = requireUtil();
	const Factory_1 = requireFactory();
	const Canvas_1 = requireCanvas();
	const Global_1 = requireGlobal();
	const DragAndDrop_1 = requireDragAndDrop();
	const Validators_1 = requireValidators();
	var ABSOLUTE_OPACITY = 'absoluteOpacity', ALL_LISTENERS = 'allEventListeners', ABSOLUTE_TRANSFORM = 'absoluteTransform', ABSOLUTE_SCALE = 'absoluteScale', CANVAS = 'canvas', CHANGE = 'Change', CHILDREN = 'children', KONVA = 'konva', LISTENING = 'listening', MOUSEENTER = 'mouseenter', MOUSELEAVE = 'mouseleave', SET = 'set', SHAPE = 'Shape', SPACE = ' ', STAGE = 'stage', TRANSFORM = 'transform', UPPER_STAGE = 'Stage', VISIBLE = 'visible', TRANSFORM_CHANGE_STR = [
	    'xChange.konva',
	    'yChange.konva',
	    'scaleXChange.konva',
	    'scaleYChange.konva',
	    'skewXChange.konva',
	    'skewYChange.konva',
	    'rotationChange.konva',
	    'offsetXChange.konva',
	    'offsetYChange.konva',
	    'transformsEnabledChange.konva',
	].join(SPACE);
	let idCounter = 1;
	let Node$1 = class Node {
	    constructor(config) {
	        this._id = idCounter++;
	        this.eventListeners = {};
	        this.attrs = {};
	        this.index = 0;
	        this._allEventListeners = null;
	        this.parent = null;
	        this._cache = new Map();
	        this._attachedDepsListeners = new Map();
	        this._lastPos = null;
	        this._batchingTransformChange = false;
	        this._needClearTransformCache = false;
	        this._filterUpToDate = false;
	        this._isUnderCache = false;
	        this._dragEventId = null;
	        this._shouldFireChangeEvents = false;
	        this.setAttrs(config);
	        this._shouldFireChangeEvents = true;
	    }
	    hasChildren() {
	        return false;
	    }
	    _clearCache(attr) {
	        if ((attr === TRANSFORM || attr === ABSOLUTE_TRANSFORM) &&
	            this._cache.get(attr)) {
	            this._cache.get(attr).dirty = true;
	        }
	        else if (attr) {
	            this._cache.delete(attr);
	        }
	        else {
	            this._cache.clear();
	        }
	    }
	    _getCache(attr, privateGetter) {
	        var cache = this._cache.get(attr);
	        var isTransform = attr === TRANSFORM || attr === ABSOLUTE_TRANSFORM;
	        var invalid = cache === undefined || (isTransform && cache.dirty === true);
	        if (invalid) {
	            cache = privateGetter.call(this);
	            this._cache.set(attr, cache);
	        }
	        return cache;
	    }
	    _calculate(name, deps, getter) {
	        if (!this._attachedDepsListeners.get(name)) {
	            const depsString = deps.map((dep) => dep + 'Change.konva').join(SPACE);
	            this.on(depsString, () => {
	                this._clearCache(name);
	            });
	            this._attachedDepsListeners.set(name, true);
	        }
	        return this._getCache(name, getter);
	    }
	    _getCanvasCache() {
	        return this._cache.get(CANVAS);
	    }
	    _clearSelfAndDescendantCache(attr) {
	        this._clearCache(attr);
	        if (attr === ABSOLUTE_TRANSFORM) {
	            this.fire('absoluteTransformChange');
	        }
	    }
	    clearCache() {
	        if (this._cache.has(CANVAS)) {
	            const { scene, filter, hit } = this._cache.get(CANVAS);
	            Util_1.Util.releaseCanvas(scene, filter, hit);
	            this._cache.delete(CANVAS);
	        }
	        this._clearSelfAndDescendantCache();
	        this._requestDraw();
	        return this;
	    }
	    cache(config) {
	        var conf = config || {};
	        var rect = {};
	        if (conf.x === undefined ||
	            conf.y === undefined ||
	            conf.width === undefined ||
	            conf.height === undefined) {
	            rect = this.getClientRect({
	                skipTransform: true,
	                relativeTo: this.getParent() || undefined,
	            });
	        }
	        var width = Math.ceil(conf.width || rect.width), height = Math.ceil(conf.height || rect.height), pixelRatio = conf.pixelRatio, x = conf.x === undefined ? Math.floor(rect.x) : conf.x, y = conf.y === undefined ? Math.floor(rect.y) : conf.y, offset = conf.offset || 0, drawBorder = conf.drawBorder || false, hitCanvasPixelRatio = conf.hitCanvasPixelRatio || 1;
	        if (!width || !height) {
	            Util_1.Util.error('Can not cache the node. Width or height of the node equals 0. Caching is skipped.');
	            return;
	        }
	        const extraPaddingX = Math.abs(Math.round(rect.x) - x) > 0.5 ? 1 : 0;
	        const extraPaddingY = Math.abs(Math.round(rect.y) - y) > 0.5 ? 1 : 0;
	        width += offset * 2 + extraPaddingX;
	        height += offset * 2 + extraPaddingY;
	        x -= offset;
	        y -= offset;
	        var cachedSceneCanvas = new Canvas_1.SceneCanvas({
	            pixelRatio: pixelRatio,
	            width: width,
	            height: height,
	        }), cachedFilterCanvas = new Canvas_1.SceneCanvas({
	            pixelRatio: pixelRatio,
	            width: 0,
	            height: 0,
	            willReadFrequently: true,
	        }), cachedHitCanvas = new Canvas_1.HitCanvas({
	            pixelRatio: hitCanvasPixelRatio,
	            width: width,
	            height: height,
	        }), sceneContext = cachedSceneCanvas.getContext(), hitContext = cachedHitCanvas.getContext();
	        cachedHitCanvas.isCache = true;
	        cachedSceneCanvas.isCache = true;
	        this._cache.delete(CANVAS);
	        this._filterUpToDate = false;
	        if (conf.imageSmoothingEnabled === false) {
	            cachedSceneCanvas.getContext()._context.imageSmoothingEnabled = false;
	            cachedFilterCanvas.getContext()._context.imageSmoothingEnabled = false;
	        }
	        sceneContext.save();
	        hitContext.save();
	        sceneContext.translate(-x, -y);
	        hitContext.translate(-x, -y);
	        this._isUnderCache = true;
	        this._clearSelfAndDescendantCache(ABSOLUTE_OPACITY);
	        this._clearSelfAndDescendantCache(ABSOLUTE_SCALE);
	        this.drawScene(cachedSceneCanvas, this);
	        this.drawHit(cachedHitCanvas, this);
	        this._isUnderCache = false;
	        sceneContext.restore();
	        hitContext.restore();
	        if (drawBorder) {
	            sceneContext.save();
	            sceneContext.beginPath();
	            sceneContext.rect(0, 0, width, height);
	            sceneContext.closePath();
	            sceneContext.setAttr('strokeStyle', 'red');
	            sceneContext.setAttr('lineWidth', 5);
	            sceneContext.stroke();
	            sceneContext.restore();
	        }
	        this._cache.set(CANVAS, {
	            scene: cachedSceneCanvas,
	            filter: cachedFilterCanvas,
	            hit: cachedHitCanvas,
	            x: x,
	            y: y,
	        });
	        this._requestDraw();
	        return this;
	    }
	    isCached() {
	        return this._cache.has(CANVAS);
	    }
	    getClientRect(config) {
	        throw new Error('abstract "getClientRect" method call');
	    }
	    _transformedRect(rect, top) {
	        var points = [
	            { x: rect.x, y: rect.y },
	            { x: rect.x + rect.width, y: rect.y },
	            { x: rect.x + rect.width, y: rect.y + rect.height },
	            { x: rect.x, y: rect.y + rect.height },
	        ];
	        var minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;
	        var trans = this.getAbsoluteTransform(top);
	        points.forEach(function (point) {
	            var transformed = trans.point(point);
	            if (minX === undefined) {
	                minX = maxX = transformed.x;
	                minY = maxY = transformed.y;
	            }
	            minX = Math.min(minX, transformed.x);
	            minY = Math.min(minY, transformed.y);
	            maxX = Math.max(maxX, transformed.x);
	            maxY = Math.max(maxY, transformed.y);
	        });
	        return {
	            x: minX,
	            y: minY,
	            width: maxX - minX,
	            height: maxY - minY,
	        };
	    }
	    _drawCachedSceneCanvas(context) {
	        context.save();
	        context._applyOpacity(this);
	        context._applyGlobalCompositeOperation(this);
	        const canvasCache = this._getCanvasCache();
	        context.translate(canvasCache.x, canvasCache.y);
	        var cacheCanvas = this._getCachedSceneCanvas();
	        var ratio = cacheCanvas.pixelRatio;
	        context.drawImage(cacheCanvas._canvas, 0, 0, cacheCanvas.width / ratio, cacheCanvas.height / ratio);
	        context.restore();
	    }
	    _drawCachedHitCanvas(context) {
	        var canvasCache = this._getCanvasCache(), hitCanvas = canvasCache.hit;
	        context.save();
	        context.translate(canvasCache.x, canvasCache.y);
	        context.drawImage(hitCanvas._canvas, 0, 0, hitCanvas.width / hitCanvas.pixelRatio, hitCanvas.height / hitCanvas.pixelRatio);
	        context.restore();
	    }
	    _getCachedSceneCanvas() {
	        var filters = this.filters(), cachedCanvas = this._getCanvasCache(), sceneCanvas = cachedCanvas.scene, filterCanvas = cachedCanvas.filter, filterContext = filterCanvas.getContext(), len, imageData, n, filter;
	        if (filters) {
	            if (!this._filterUpToDate) {
	                var ratio = sceneCanvas.pixelRatio;
	                filterCanvas.setSize(sceneCanvas.width / sceneCanvas.pixelRatio, sceneCanvas.height / sceneCanvas.pixelRatio);
	                try {
	                    len = filters.length;
	                    filterContext.clear();
	                    filterContext.drawImage(sceneCanvas._canvas, 0, 0, sceneCanvas.getWidth() / ratio, sceneCanvas.getHeight() / ratio);
	                    imageData = filterContext.getImageData(0, 0, filterCanvas.getWidth(), filterCanvas.getHeight());
	                    for (n = 0; n < len; n++) {
	                        filter = filters[n];
	                        if (typeof filter !== 'function') {
	                            Util_1.Util.error('Filter should be type of function, but got ' +
	                                typeof filter +
	                                ' instead. Please check correct filters');
	                            continue;
	                        }
	                        filter.call(this, imageData);
	                        filterContext.putImageData(imageData, 0, 0);
	                    }
	                }
	                catch (e) {
	                    Util_1.Util.error('Unable to apply filter. ' +
	                        e.message +
	                        ' This post my help you https://konvajs.org/docs/posts/Tainted_Canvas.html.');
	                }
	                this._filterUpToDate = true;
	            }
	            return filterCanvas;
	        }
	        return sceneCanvas;
	    }
	    on(evtStr, handler) {
	        this._cache && this._cache.delete(ALL_LISTENERS);
	        if (arguments.length === 3) {
	            return this._delegate.apply(this, arguments);
	        }
	        var events = evtStr.split(SPACE), len = events.length, n, event, parts, baseEvent, name;
	        for (n = 0; n < len; n++) {
	            event = events[n];
	            parts = event.split('.');
	            baseEvent = parts[0];
	            name = parts[1] || '';
	            if (!this.eventListeners[baseEvent]) {
	                this.eventListeners[baseEvent] = [];
	            }
	            this.eventListeners[baseEvent].push({
	                name: name,
	                handler: handler,
	            });
	        }
	        return this;
	    }
	    off(evtStr, callback) {
	        var events = (evtStr || '').split(SPACE), len = events.length, n, t, event, parts, baseEvent, name;
	        this._cache && this._cache.delete(ALL_LISTENERS);
	        if (!evtStr) {
	            for (t in this.eventListeners) {
	                this._off(t);
	            }
	        }
	        for (n = 0; n < len; n++) {
	            event = events[n];
	            parts = event.split('.');
	            baseEvent = parts[0];
	            name = parts[1];
	            if (baseEvent) {
	                if (this.eventListeners[baseEvent]) {
	                    this._off(baseEvent, name, callback);
	                }
	            }
	            else {
	                for (t in this.eventListeners) {
	                    this._off(t, name, callback);
	                }
	            }
	        }
	        return this;
	    }
	    dispatchEvent(evt) {
	        var e = {
	            target: this,
	            type: evt.type,
	            evt: evt,
	        };
	        this.fire(evt.type, e);
	        return this;
	    }
	    addEventListener(type, handler) {
	        this.on(type, function (evt) {
	            handler.call(this, evt.evt);
	        });
	        return this;
	    }
	    removeEventListener(type) {
	        this.off(type);
	        return this;
	    }
	    _delegate(event, selector, handler) {
	        var stopNode = this;
	        this.on(event, function (evt) {
	            var targets = evt.target.findAncestors(selector, true, stopNode);
	            for (var i = 0; i < targets.length; i++) {
	                evt = Util_1.Util.cloneObject(evt);
	                evt.currentTarget = targets[i];
	                handler.call(targets[i], evt);
	            }
	        });
	    }
	    remove() {
	        if (this.isDragging()) {
	            this.stopDrag();
	        }
	        DragAndDrop_1.DD._dragElements.delete(this._id);
	        this._remove();
	        return this;
	    }
	    _clearCaches() {
	        this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);
	        this._clearSelfAndDescendantCache(ABSOLUTE_OPACITY);
	        this._clearSelfAndDescendantCache(ABSOLUTE_SCALE);
	        this._clearSelfAndDescendantCache(STAGE);
	        this._clearSelfAndDescendantCache(VISIBLE);
	        this._clearSelfAndDescendantCache(LISTENING);
	    }
	    _remove() {
	        this._clearCaches();
	        var parent = this.getParent();
	        if (parent && parent.children) {
	            parent.children.splice(this.index, 1);
	            parent._setChildrenIndices();
	            this.parent = null;
	        }
	    }
	    destroy() {
	        this.remove();
	        this.clearCache();
	        return this;
	    }
	    getAttr(attr) {
	        var method = 'get' + Util_1.Util._capitalize(attr);
	        if (Util_1.Util._isFunction(this[method])) {
	            return this[method]();
	        }
	        return this.attrs[attr];
	    }
	    getAncestors() {
	        var parent = this.getParent(), ancestors = [];
	        while (parent) {
	            ancestors.push(parent);
	            parent = parent.getParent();
	        }
	        return ancestors;
	    }
	    getAttrs() {
	        return (this.attrs || {});
	    }
	    setAttrs(config) {
	        this._batchTransformChanges(() => {
	            var key, method;
	            if (!config) {
	                return this;
	            }
	            for (key in config) {
	                if (key === CHILDREN) {
	                    continue;
	                }
	                method = SET + Util_1.Util._capitalize(key);
	                if (Util_1.Util._isFunction(this[method])) {
	                    this[method](config[key]);
	                }
	                else {
	                    this._setAttr(key, config[key]);
	                }
	            }
	        });
	        return this;
	    }
	    isListening() {
	        return this._getCache(LISTENING, this._isListening);
	    }
	    _isListening(relativeTo) {
	        const listening = this.listening();
	        if (!listening) {
	            return false;
	        }
	        const parent = this.getParent();
	        if (parent && parent !== relativeTo && this !== relativeTo) {
	            return parent._isListening(relativeTo);
	        }
	        else {
	            return true;
	        }
	    }
	    isVisible() {
	        return this._getCache(VISIBLE, this._isVisible);
	    }
	    _isVisible(relativeTo) {
	        const visible = this.visible();
	        if (!visible) {
	            return false;
	        }
	        const parent = this.getParent();
	        if (parent && parent !== relativeTo && this !== relativeTo) {
	            return parent._isVisible(relativeTo);
	        }
	        else {
	            return true;
	        }
	    }
	    shouldDrawHit(top, skipDragCheck = false) {
	        if (top) {
	            return this._isVisible(top) && this._isListening(top);
	        }
	        var layer = this.getLayer();
	        var layerUnderDrag = false;
	        DragAndDrop_1.DD._dragElements.forEach((elem) => {
	            if (elem.dragStatus !== 'dragging') {
	                return;
	            }
	            else if (elem.node.nodeType === 'Stage') {
	                layerUnderDrag = true;
	            }
	            else if (elem.node.getLayer() === layer) {
	                layerUnderDrag = true;
	            }
	        });
	        var dragSkip = !skipDragCheck &&
	            !Global_1.Konva.hitOnDragEnabled &&
	            (layerUnderDrag || Global_1.Konva.isTransforming());
	        return this.isListening() && this.isVisible() && !dragSkip;
	    }
	    show() {
	        this.visible(true);
	        return this;
	    }
	    hide() {
	        this.visible(false);
	        return this;
	    }
	    getZIndex() {
	        return this.index || 0;
	    }
	    getAbsoluteZIndex() {
	        var depth = this.getDepth(), that = this, index = 0, nodes, len, n, child;
	        function addChildren(children) {
	            nodes = [];
	            len = children.length;
	            for (n = 0; n < len; n++) {
	                child = children[n];
	                index++;
	                if (child.nodeType !== SHAPE) {
	                    nodes = nodes.concat(child.getChildren().slice());
	                }
	                if (child._id === that._id) {
	                    n = len;
	                }
	            }
	            if (nodes.length > 0 && nodes[0].getDepth() <= depth) {
	                addChildren(nodes);
	            }
	        }
	        const stage = this.getStage();
	        if (that.nodeType !== UPPER_STAGE && stage) {
	            addChildren(stage.getChildren());
	        }
	        return index;
	    }
	    getDepth() {
	        var depth = 0, parent = this.parent;
	        while (parent) {
	            depth++;
	            parent = parent.parent;
	        }
	        return depth;
	    }
	    _batchTransformChanges(func) {
	        this._batchingTransformChange = true;
	        func();
	        this._batchingTransformChange = false;
	        if (this._needClearTransformCache) {
	            this._clearCache(TRANSFORM);
	            this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);
	        }
	        this._needClearTransformCache = false;
	    }
	    setPosition(pos) {
	        this._batchTransformChanges(() => {
	            this.x(pos.x);
	            this.y(pos.y);
	        });
	        return this;
	    }
	    getPosition() {
	        return {
	            x: this.x(),
	            y: this.y(),
	        };
	    }
	    getRelativePointerPosition() {
	        const stage = this.getStage();
	        if (!stage) {
	            return null;
	        }
	        var pos = stage.getPointerPosition();
	        if (!pos) {
	            return null;
	        }
	        var transform = this.getAbsoluteTransform().copy();
	        transform.invert();
	        return transform.point(pos);
	    }
	    getAbsolutePosition(top) {
	        let haveCachedParent = false;
	        let parent = this.parent;
	        while (parent) {
	            if (parent.isCached()) {
	                haveCachedParent = true;
	                break;
	            }
	            parent = parent.parent;
	        }
	        if (haveCachedParent && !top) {
	            top = true;
	        }
	        var absoluteMatrix = this.getAbsoluteTransform(top).getMatrix(), absoluteTransform = new Util_1.Transform(), offset = this.offset();
	        absoluteTransform.m = absoluteMatrix.slice();
	        absoluteTransform.translate(offset.x, offset.y);
	        return absoluteTransform.getTranslation();
	    }
	    setAbsolutePosition(pos) {
	        const { x, y, ...origTrans } = this._clearTransform();
	        this.attrs.x = x;
	        this.attrs.y = y;
	        this._clearCache(TRANSFORM);
	        var it = this._getAbsoluteTransform().copy();
	        it.invert();
	        it.translate(pos.x, pos.y);
	        pos = {
	            x: this.attrs.x + it.getTranslation().x,
	            y: this.attrs.y + it.getTranslation().y,
	        };
	        this._setTransform(origTrans);
	        this.setPosition({ x: pos.x, y: pos.y });
	        this._clearCache(TRANSFORM);
	        this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);
	        return this;
	    }
	    _setTransform(trans) {
	        var key;
	        for (key in trans) {
	            this.attrs[key] = trans[key];
	        }
	    }
	    _clearTransform() {
	        var trans = {
	            x: this.x(),
	            y: this.y(),
	            rotation: this.rotation(),
	            scaleX: this.scaleX(),
	            scaleY: this.scaleY(),
	            offsetX: this.offsetX(),
	            offsetY: this.offsetY(),
	            skewX: this.skewX(),
	            skewY: this.skewY(),
	        };
	        this.attrs.x = 0;
	        this.attrs.y = 0;
	        this.attrs.rotation = 0;
	        this.attrs.scaleX = 1;
	        this.attrs.scaleY = 1;
	        this.attrs.offsetX = 0;
	        this.attrs.offsetY = 0;
	        this.attrs.skewX = 0;
	        this.attrs.skewY = 0;
	        return trans;
	    }
	    move(change) {
	        var changeX = change.x, changeY = change.y, x = this.x(), y = this.y();
	        if (changeX !== undefined) {
	            x += changeX;
	        }
	        if (changeY !== undefined) {
	            y += changeY;
	        }
	        this.setPosition({ x: x, y: y });
	        return this;
	    }
	    _eachAncestorReverse(func, top) {
	        var family = [], parent = this.getParent(), len, n;
	        if (top && top._id === this._id) {
	            return;
	        }
	        family.unshift(this);
	        while (parent && (!top || parent._id !== top._id)) {
	            family.unshift(parent);
	            parent = parent.parent;
	        }
	        len = family.length;
	        for (n = 0; n < len; n++) {
	            func(family[n]);
	        }
	    }
	    rotate(theta) {
	        this.rotation(this.rotation() + theta);
	        return this;
	    }
	    moveToTop() {
	        if (!this.parent) {
	            Util_1.Util.warn('Node has no parent. moveToTop function is ignored.');
	            return false;
	        }
	        var index = this.index, len = this.parent.getChildren().length;
	        if (index < len - 1) {
	            this.parent.children.splice(index, 1);
	            this.parent.children.push(this);
	            this.parent._setChildrenIndices();
	            return true;
	        }
	        return false;
	    }
	    moveUp() {
	        if (!this.parent) {
	            Util_1.Util.warn('Node has no parent. moveUp function is ignored.');
	            return false;
	        }
	        var index = this.index, len = this.parent.getChildren().length;
	        if (index < len - 1) {
	            this.parent.children.splice(index, 1);
	            this.parent.children.splice(index + 1, 0, this);
	            this.parent._setChildrenIndices();
	            return true;
	        }
	        return false;
	    }
	    moveDown() {
	        if (!this.parent) {
	            Util_1.Util.warn('Node has no parent. moveDown function is ignored.');
	            return false;
	        }
	        var index = this.index;
	        if (index > 0) {
	            this.parent.children.splice(index, 1);
	            this.parent.children.splice(index - 1, 0, this);
	            this.parent._setChildrenIndices();
	            return true;
	        }
	        return false;
	    }
	    moveToBottom() {
	        if (!this.parent) {
	            Util_1.Util.warn('Node has no parent. moveToBottom function is ignored.');
	            return false;
	        }
	        var index = this.index;
	        if (index > 0) {
	            this.parent.children.splice(index, 1);
	            this.parent.children.unshift(this);
	            this.parent._setChildrenIndices();
	            return true;
	        }
	        return false;
	    }
	    setZIndex(zIndex) {
	        if (!this.parent) {
	            Util_1.Util.warn('Node has no parent. zIndex parameter is ignored.');
	            return this;
	        }
	        if (zIndex < 0 || zIndex >= this.parent.children.length) {
	            Util_1.Util.warn('Unexpected value ' +
	                zIndex +
	                ' for zIndex property. zIndex is just index of a node in children of its parent. Expected value is from 0 to ' +
	                (this.parent.children.length - 1) +
	                '.');
	        }
	        var index = this.index;
	        this.parent.children.splice(index, 1);
	        this.parent.children.splice(zIndex, 0, this);
	        this.parent._setChildrenIndices();
	        return this;
	    }
	    getAbsoluteOpacity() {
	        return this._getCache(ABSOLUTE_OPACITY, this._getAbsoluteOpacity);
	    }
	    _getAbsoluteOpacity() {
	        var absOpacity = this.opacity();
	        var parent = this.getParent();
	        if (parent && !parent._isUnderCache) {
	            absOpacity *= parent.getAbsoluteOpacity();
	        }
	        return absOpacity;
	    }
	    moveTo(newContainer) {
	        if (this.getParent() !== newContainer) {
	            this._remove();
	            newContainer.add(this);
	        }
	        return this;
	    }
	    toObject() {
	        var attrs = this.getAttrs(), key, val, getter, defaultValue, nonPlainObject;
	        const obj = {
	            attrs: {},
	            className: this.getClassName(),
	        };
	        for (key in attrs) {
	            val = attrs[key];
	            nonPlainObject =
	                Util_1.Util.isObject(val) && !Util_1.Util._isPlainObject(val) && !Util_1.Util._isArray(val);
	            if (nonPlainObject) {
	                continue;
	            }
	            getter = typeof this[key] === 'function' && this[key];
	            delete attrs[key];
	            defaultValue = getter ? getter.call(this) : null;
	            attrs[key] = val;
	            if (defaultValue !== val) {
	                obj.attrs[key] = val;
	            }
	        }
	        return Util_1.Util._prepareToStringify(obj);
	    }
	    toJSON() {
	        return JSON.stringify(this.toObject());
	    }
	    getParent() {
	        return this.parent;
	    }
	    findAncestors(selector, includeSelf, stopNode) {
	        var res = [];
	        if (includeSelf && this._isMatch(selector)) {
	            res.push(this);
	        }
	        var ancestor = this.parent;
	        while (ancestor) {
	            if (ancestor === stopNode) {
	                return res;
	            }
	            if (ancestor._isMatch(selector)) {
	                res.push(ancestor);
	            }
	            ancestor = ancestor.parent;
	        }
	        return res;
	    }
	    isAncestorOf(node) {
	        return false;
	    }
	    findAncestor(selector, includeSelf, stopNode) {
	        return this.findAncestors(selector, includeSelf, stopNode)[0];
	    }
	    _isMatch(selector) {
	        if (!selector) {
	            return false;
	        }
	        if (typeof selector === 'function') {
	            return selector(this);
	        }
	        var selectorArr = selector.replace(/ /g, '').split(','), len = selectorArr.length, n, sel;
	        for (n = 0; n < len; n++) {
	            sel = selectorArr[n];
	            if (!Util_1.Util.isValidSelector(sel)) {
	                Util_1.Util.warn('Selector "' +
	                    sel +
	                    '" is invalid. Allowed selectors examples are "#foo", ".bar" or "Group".');
	                Util_1.Util.warn('If you have a custom shape with such className, please change it to start with upper letter like "Triangle".');
	                Util_1.Util.warn('Konva is awesome, right?');
	            }
	            if (sel.charAt(0) === '#') {
	                if (this.id() === sel.slice(1)) {
	                    return true;
	                }
	            }
	            else if (sel.charAt(0) === '.') {
	                if (this.hasName(sel.slice(1))) {
	                    return true;
	                }
	            }
	            else if (this.className === sel || this.nodeType === sel) {
	                return true;
	            }
	        }
	        return false;
	    }
	    getLayer() {
	        var parent = this.getParent();
	        return parent ? parent.getLayer() : null;
	    }
	    getStage() {
	        return this._getCache(STAGE, this._getStage);
	    }
	    _getStage() {
	        var parent = this.getParent();
	        if (parent) {
	            return parent.getStage();
	        }
	        else {
	            return null;
	        }
	    }
	    fire(eventType, evt = {}, bubble) {
	        evt.target = evt.target || this;
	        if (bubble) {
	            this._fireAndBubble(eventType, evt);
	        }
	        else {
	            this._fire(eventType, evt);
	        }
	        return this;
	    }
	    getAbsoluteTransform(top) {
	        if (top) {
	            return this._getAbsoluteTransform(top);
	        }
	        else {
	            return this._getCache(ABSOLUTE_TRANSFORM, this._getAbsoluteTransform);
	        }
	    }
	    _getAbsoluteTransform(top) {
	        var at;
	        if (top) {
	            at = new Util_1.Transform();
	            this._eachAncestorReverse(function (node) {
	                var transformsEnabled = node.transformsEnabled();
	                if (transformsEnabled === 'all') {
	                    at.multiply(node.getTransform());
	                }
	                else if (transformsEnabled === 'position') {
	                    at.translate(node.x() - node.offsetX(), node.y() - node.offsetY());
	                }
	            }, top);
	            return at;
	        }
	        else {
	            at = this._cache.get(ABSOLUTE_TRANSFORM) || new Util_1.Transform();
	            if (this.parent) {
	                this.parent.getAbsoluteTransform().copyInto(at);
	            }
	            else {
	                at.reset();
	            }
	            var transformsEnabled = this.transformsEnabled();
	            if (transformsEnabled === 'all') {
	                at.multiply(this.getTransform());
	            }
	            else if (transformsEnabled === 'position') {
	                const x = this.attrs.x || 0;
	                const y = this.attrs.y || 0;
	                const offsetX = this.attrs.offsetX || 0;
	                const offsetY = this.attrs.offsetY || 0;
	                at.translate(x - offsetX, y - offsetY);
	            }
	            at.dirty = false;
	            return at;
	        }
	    }
	    getAbsoluteScale(top) {
	        var parent = this;
	        while (parent) {
	            if (parent._isUnderCache) {
	                top = parent;
	            }
	            parent = parent.getParent();
	        }
	        const transform = this.getAbsoluteTransform(top);
	        const attrs = transform.decompose();
	        return {
	            x: attrs.scaleX,
	            y: attrs.scaleY,
	        };
	    }
	    getAbsoluteRotation() {
	        return this.getAbsoluteTransform().decompose().rotation;
	    }
	    getTransform() {
	        return this._getCache(TRANSFORM, this._getTransform);
	    }
	    _getTransform() {
	        var _a, _b;
	        var m = this._cache.get(TRANSFORM) || new Util_1.Transform();
	        m.reset();
	        var x = this.x(), y = this.y(), rotation = Global_1.Konva.getAngle(this.rotation()), scaleX = (_a = this.attrs.scaleX) !== null && _a !== void 0 ? _a : 1, scaleY = (_b = this.attrs.scaleY) !== null && _b !== void 0 ? _b : 1, skewX = this.attrs.skewX || 0, skewY = this.attrs.skewY || 0, offsetX = this.attrs.offsetX || 0, offsetY = this.attrs.offsetY || 0;
	        if (x !== 0 || y !== 0) {
	            m.translate(x, y);
	        }
	        if (rotation !== 0) {
	            m.rotate(rotation);
	        }
	        if (skewX !== 0 || skewY !== 0) {
	            m.skew(skewX, skewY);
	        }
	        if (scaleX !== 1 || scaleY !== 1) {
	            m.scale(scaleX, scaleY);
	        }
	        if (offsetX !== 0 || offsetY !== 0) {
	            m.translate(-1 * offsetX, -1 * offsetY);
	        }
	        m.dirty = false;
	        return m;
	    }
	    clone(obj) {
	        var attrs = Util_1.Util.cloneObject(this.attrs), key, allListeners, len, n, listener;
	        for (key in obj) {
	            attrs[key] = obj[key];
	        }
	        var node = new this.constructor(attrs);
	        for (key in this.eventListeners) {
	            allListeners = this.eventListeners[key];
	            len = allListeners.length;
	            for (n = 0; n < len; n++) {
	                listener = allListeners[n];
	                if (listener.name.indexOf(KONVA) < 0) {
	                    if (!node.eventListeners[key]) {
	                        node.eventListeners[key] = [];
	                    }
	                    node.eventListeners[key].push(listener);
	                }
	            }
	        }
	        return node;
	    }
	    _toKonvaCanvas(config) {
	        config = config || {};
	        var box = this.getClientRect();
	        var stage = this.getStage(), x = config.x !== undefined ? config.x : Math.floor(box.x), y = config.y !== undefined ? config.y : Math.floor(box.y), pixelRatio = config.pixelRatio || 1, canvas = new Canvas_1.SceneCanvas({
	            width: config.width || Math.ceil(box.width) || (stage ? stage.width() : 0),
	            height: config.height ||
	                Math.ceil(box.height) ||
	                (stage ? stage.height() : 0),
	            pixelRatio: pixelRatio,
	        }), context = canvas.getContext();
	        const bufferCanvas = new Canvas_1.SceneCanvas({
	            width: canvas.width / canvas.pixelRatio + Math.abs(x),
	            height: canvas.height / canvas.pixelRatio + Math.abs(y),
	            pixelRatio: canvas.pixelRatio,
	        });
	        if (config.imageSmoothingEnabled === false) {
	            context._context.imageSmoothingEnabled = false;
	        }
	        context.save();
	        if (x || y) {
	            context.translate(-1 * x, -1 * y);
	        }
	        this.drawScene(canvas, undefined, bufferCanvas);
	        context.restore();
	        return canvas;
	    }
	    toCanvas(config) {
	        return this._toKonvaCanvas(config)._canvas;
	    }
	    toDataURL(config) {
	        config = config || {};
	        var mimeType = config.mimeType || null, quality = config.quality || null;
	        var url = this._toKonvaCanvas(config).toDataURL(mimeType, quality);
	        if (config.callback) {
	            config.callback(url);
	        }
	        return url;
	    }
	    toImage(config) {
	        return new Promise((resolve, reject) => {
	            try {
	                const callback = config === null || config === void 0 ? void 0 : config.callback;
	                if (callback)
	                    delete config.callback;
	                Util_1.Util._urlToImage(this.toDataURL(config), function (img) {
	                    resolve(img);
	                    callback === null || callback === void 0 ? void 0 : callback(img);
	                });
	            }
	            catch (err) {
	                reject(err);
	            }
	        });
	    }
	    toBlob(config) {
	        return new Promise((resolve, reject) => {
	            try {
	                const callback = config === null || config === void 0 ? void 0 : config.callback;
	                if (callback)
	                    delete config.callback;
	                this.toCanvas(config).toBlob((blob) => {
	                    resolve(blob);
	                    callback === null || callback === void 0 ? void 0 : callback(blob);
	                }, config === null || config === void 0 ? void 0 : config.mimeType, config === null || config === void 0 ? void 0 : config.quality);
	            }
	            catch (err) {
	                reject(err);
	            }
	        });
	    }
	    setSize(size) {
	        this.width(size.width);
	        this.height(size.height);
	        return this;
	    }
	    getSize() {
	        return {
	            width: this.width(),
	            height: this.height(),
	        };
	    }
	    getClassName() {
	        return this.className || this.nodeType;
	    }
	    getType() {
	        return this.nodeType;
	    }
	    getDragDistance() {
	        if (this.attrs.dragDistance !== undefined) {
	            return this.attrs.dragDistance;
	        }
	        else if (this.parent) {
	            return this.parent.getDragDistance();
	        }
	        else {
	            return Global_1.Konva.dragDistance;
	        }
	    }
	    _off(type, name, callback) {
	        var evtListeners = this.eventListeners[type], i, evtName, handler;
	        for (i = 0; i < evtListeners.length; i++) {
	            evtName = evtListeners[i].name;
	            handler = evtListeners[i].handler;
	            if ((evtName !== 'konva' || name === 'konva') &&
	                (!name || evtName === name) &&
	                (!callback || callback === handler)) {
	                evtListeners.splice(i, 1);
	                if (evtListeners.length === 0) {
	                    delete this.eventListeners[type];
	                    break;
	                }
	                i--;
	            }
	        }
	    }
	    _fireChangeEvent(attr, oldVal, newVal) {
	        this._fire(attr + CHANGE, {
	            oldVal: oldVal,
	            newVal: newVal,
	        });
	    }
	    addName(name) {
	        if (!this.hasName(name)) {
	            var oldName = this.name();
	            var newName = oldName ? oldName + ' ' + name : name;
	            this.name(newName);
	        }
	        return this;
	    }
	    hasName(name) {
	        if (!name) {
	            return false;
	        }
	        const fullName = this.name();
	        if (!fullName) {
	            return false;
	        }
	        var names = (fullName || '').split(/\s/g);
	        return names.indexOf(name) !== -1;
	    }
	    removeName(name) {
	        var names = (this.name() || '').split(/\s/g);
	        var index = names.indexOf(name);
	        if (index !== -1) {
	            names.splice(index, 1);
	            this.name(names.join(' '));
	        }
	        return this;
	    }
	    setAttr(attr, val) {
	        var func = this[SET + Util_1.Util._capitalize(attr)];
	        if (Util_1.Util._isFunction(func)) {
	            func.call(this, val);
	        }
	        else {
	            this._setAttr(attr, val);
	        }
	        return this;
	    }
	    _requestDraw() {
	        if (Global_1.Konva.autoDrawEnabled) {
	            const drawNode = this.getLayer() || this.getStage();
	            drawNode === null || drawNode === void 0 ? void 0 : drawNode.batchDraw();
	        }
	    }
	    _setAttr(key, val) {
	        var oldVal = this.attrs[key];
	        if (oldVal === val && !Util_1.Util.isObject(val)) {
	            return;
	        }
	        if (val === undefined || val === null) {
	            delete this.attrs[key];
	        }
	        else {
	            this.attrs[key] = val;
	        }
	        if (this._shouldFireChangeEvents) {
	            this._fireChangeEvent(key, oldVal, val);
	        }
	        this._requestDraw();
	    }
	    _setComponentAttr(key, component, val) {
	        var oldVal;
	        if (val !== undefined) {
	            oldVal = this.attrs[key];
	            if (!oldVal) {
	                this.attrs[key] = this.getAttr(key);
	            }
	            this.attrs[key][component] = val;
	            this._fireChangeEvent(key, oldVal, val);
	        }
	    }
	    _fireAndBubble(eventType, evt, compareShape) {
	        if (evt && this.nodeType === SHAPE) {
	            evt.target = this;
	        }
	        var shouldStop = (eventType === MOUSEENTER || eventType === MOUSELEAVE) &&
	            ((compareShape &&
	                (this === compareShape ||
	                    (this.isAncestorOf && this.isAncestorOf(compareShape)))) ||
	                (this.nodeType === 'Stage' && !compareShape));
	        if (!shouldStop) {
	            this._fire(eventType, evt);
	            var stopBubble = (eventType === MOUSEENTER || eventType === MOUSELEAVE) &&
	                compareShape &&
	                compareShape.isAncestorOf &&
	                compareShape.isAncestorOf(this) &&
	                !compareShape.isAncestorOf(this.parent);
	            if (((evt && !evt.cancelBubble) || !evt) &&
	                this.parent &&
	                this.parent.isListening() &&
	                !stopBubble) {
	                if (compareShape && compareShape.parent) {
	                    this._fireAndBubble.call(this.parent, eventType, evt, compareShape);
	                }
	                else {
	                    this._fireAndBubble.call(this.parent, eventType, evt);
	                }
	            }
	        }
	    }
	    _getProtoListeners(eventType) {
	        var _a, _b, _c;
	        const allListeners = (_a = this._cache.get(ALL_LISTENERS)) !== null && _a !== void 0 ? _a : {};
	        let events = allListeners === null || allListeners === void 0 ? void 0 : allListeners[eventType];
	        if (events === undefined) {
	            events = [];
	            let obj = Object.getPrototypeOf(this);
	            while (obj) {
	                const hierarchyEvents = (_c = (_b = obj.eventListeners) === null || _b === void 0 ? void 0 : _b[eventType]) !== null && _c !== void 0 ? _c : [];
	                events.push(...hierarchyEvents);
	                obj = Object.getPrototypeOf(obj);
	            }
	            allListeners[eventType] = events;
	            this._cache.set(ALL_LISTENERS, allListeners);
	        }
	        return events;
	    }
	    _fire(eventType, evt) {
	        evt = evt || {};
	        evt.currentTarget = this;
	        evt.type = eventType;
	        const topListeners = this._getProtoListeners(eventType);
	        if (topListeners) {
	            for (var i = 0; i < topListeners.length; i++) {
	                topListeners[i].handler.call(this, evt);
	            }
	        }
	        const selfListeners = this.eventListeners[eventType];
	        if (selfListeners) {
	            for (var i = 0; i < selfListeners.length; i++) {
	                selfListeners[i].handler.call(this, evt);
	            }
	        }
	    }
	    draw() {
	        this.drawScene();
	        this.drawHit();
	        return this;
	    }
	    _createDragElement(evt) {
	        var pointerId = evt ? evt.pointerId : undefined;
	        var stage = this.getStage();
	        var ap = this.getAbsolutePosition();
	        if (!stage) {
	            return;
	        }
	        var pos = stage._getPointerById(pointerId) ||
	            stage._changedPointerPositions[0] ||
	            ap;
	        DragAndDrop_1.DD._dragElements.set(this._id, {
	            node: this,
	            startPointerPos: pos,
	            offset: {
	                x: pos.x - ap.x,
	                y: pos.y - ap.y,
	            },
	            dragStatus: 'ready',
	            pointerId,
	        });
	    }
	    startDrag(evt, bubbleEvent = true) {
	        if (!DragAndDrop_1.DD._dragElements.has(this._id)) {
	            this._createDragElement(evt);
	        }
	        const elem = DragAndDrop_1.DD._dragElements.get(this._id);
	        elem.dragStatus = 'dragging';
	        this.fire('dragstart', {
	            type: 'dragstart',
	            target: this,
	            evt: evt && evt.evt,
	        }, bubbleEvent);
	    }
	    _setDragPosition(evt, elem) {
	        const pos = this.getStage()._getPointerById(elem.pointerId);
	        if (!pos) {
	            return;
	        }
	        var newNodePos = {
	            x: pos.x - elem.offset.x,
	            y: pos.y - elem.offset.y,
	        };
	        var dbf = this.dragBoundFunc();
	        if (dbf !== undefined) {
	            const bounded = dbf.call(this, newNodePos, evt);
	            if (!bounded) {
	                Util_1.Util.warn('dragBoundFunc did not return any value. That is unexpected behavior. You must return new absolute position from dragBoundFunc.');
	            }
	            else {
	                newNodePos = bounded;
	            }
	        }
	        if (!this._lastPos ||
	            this._lastPos.x !== newNodePos.x ||
	            this._lastPos.y !== newNodePos.y) {
	            this.setAbsolutePosition(newNodePos);
	            this._requestDraw();
	        }
	        this._lastPos = newNodePos;
	    }
	    stopDrag(evt) {
	        const elem = DragAndDrop_1.DD._dragElements.get(this._id);
	        if (elem) {
	            elem.dragStatus = 'stopped';
	        }
	        DragAndDrop_1.DD._endDragBefore(evt);
	        DragAndDrop_1.DD._endDragAfter(evt);
	    }
	    setDraggable(draggable) {
	        this._setAttr('draggable', draggable);
	        this._dragChange();
	    }
	    isDragging() {
	        const elem = DragAndDrop_1.DD._dragElements.get(this._id);
	        return elem ? elem.dragStatus === 'dragging' : false;
	    }
	    _listenDrag() {
	        this._dragCleanup();
	        this.on('mousedown.konva touchstart.konva', function (evt) {
	            var shouldCheckButton = evt.evt['button'] !== undefined;
	            var canDrag = !shouldCheckButton || Global_1.Konva.dragButtons.indexOf(evt.evt['button']) >= 0;
	            if (!canDrag) {
	                return;
	            }
	            if (this.isDragging()) {
	                return;
	            }
	            var hasDraggingChild = false;
	            DragAndDrop_1.DD._dragElements.forEach((elem) => {
	                if (this.isAncestorOf(elem.node)) {
	                    hasDraggingChild = true;
	                }
	            });
	            if (!hasDraggingChild) {
	                this._createDragElement(evt);
	            }
	        });
	    }
	    _dragChange() {
	        if (this.attrs.draggable) {
	            this._listenDrag();
	        }
	        else {
	            this._dragCleanup();
	            var stage = this.getStage();
	            if (!stage) {
	                return;
	            }
	            const dragElement = DragAndDrop_1.DD._dragElements.get(this._id);
	            const isDragging = dragElement && dragElement.dragStatus === 'dragging';
	            const isReady = dragElement && dragElement.dragStatus === 'ready';
	            if (isDragging) {
	                this.stopDrag();
	            }
	            else if (isReady) {
	                DragAndDrop_1.DD._dragElements.delete(this._id);
	            }
	        }
	    }
	    _dragCleanup() {
	        this.off('mousedown.konva');
	        this.off('touchstart.konva');
	    }
	    isClientRectOnScreen(margin = { x: 0, y: 0 }) {
	        const stage = this.getStage();
	        if (!stage) {
	            return false;
	        }
	        const screenRect = {
	            x: -margin.x,
	            y: -margin.y,
	            width: stage.width() + 2 * margin.x,
	            height: stage.height() + 2 * margin.y,
	        };
	        return Util_1.Util.haveIntersection(screenRect, this.getClientRect());
	    }
	    static create(data, container) {
	        if (Util_1.Util._isString(data)) {
	            data = JSON.parse(data);
	        }
	        return this._createNode(data, container);
	    }
	    static _createNode(obj, container) {
	        var className = Node.prototype.getClassName.call(obj), children = obj.children, no, len, n;
	        if (container) {
	            obj.attrs.container = container;
	        }
	        if (!Global_1.Konva[className]) {
	            Util_1.Util.warn('Can not find a node with class name "' +
	                className +
	                '". Fallback to "Shape".');
	            className = 'Shape';
	        }
	        const Class = Global_1.Konva[className];
	        no = new Class(obj.attrs);
	        if (children) {
	            len = children.length;
	            for (n = 0; n < len; n++) {
	                no.add(Node._createNode(children[n]));
	            }
	        }
	        return no;
	    }
	};
	Node.Node = Node$1;
	Node$1.prototype.nodeType = 'Node';
	Node$1.prototype._attrsAffectingSize = [];
	Node$1.prototype.eventListeners = {};
	Node$1.prototype.on.call(Node$1.prototype, TRANSFORM_CHANGE_STR, function () {
	    if (this._batchingTransformChange) {
	        this._needClearTransformCache = true;
	        return;
	    }
	    this._clearCache(TRANSFORM);
	    this._clearSelfAndDescendantCache(ABSOLUTE_TRANSFORM);
	});
	Node$1.prototype.on.call(Node$1.prototype, 'visibleChange.konva', function () {
	    this._clearSelfAndDescendantCache(VISIBLE);
	});
	Node$1.prototype.on.call(Node$1.prototype, 'listeningChange.konva', function () {
	    this._clearSelfAndDescendantCache(LISTENING);
	});
	Node$1.prototype.on.call(Node$1.prototype, 'opacityChange.konva', function () {
	    this._clearSelfAndDescendantCache(ABSOLUTE_OPACITY);
	});
	const addGetterSetter = Factory_1.Factory.addGetterSetter;
	addGetterSetter(Node$1, 'zIndex');
	addGetterSetter(Node$1, 'absolutePosition');
	addGetterSetter(Node$1, 'position');
	addGetterSetter(Node$1, 'x', 0, (0, Validators_1.getNumberValidator)());
	addGetterSetter(Node$1, 'y', 0, (0, Validators_1.getNumberValidator)());
	addGetterSetter(Node$1, 'globalCompositeOperation', 'source-over', (0, Validators_1.getStringValidator)());
	addGetterSetter(Node$1, 'opacity', 1, (0, Validators_1.getNumberValidator)());
	addGetterSetter(Node$1, 'name', '', (0, Validators_1.getStringValidator)());
	addGetterSetter(Node$1, 'id', '', (0, Validators_1.getStringValidator)());
	addGetterSetter(Node$1, 'rotation', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addComponentsGetterSetter(Node$1, 'scale', ['x', 'y']);
	addGetterSetter(Node$1, 'scaleX', 1, (0, Validators_1.getNumberValidator)());
	addGetterSetter(Node$1, 'scaleY', 1, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addComponentsGetterSetter(Node$1, 'skew', ['x', 'y']);
	addGetterSetter(Node$1, 'skewX', 0, (0, Validators_1.getNumberValidator)());
	addGetterSetter(Node$1, 'skewY', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addComponentsGetterSetter(Node$1, 'offset', ['x', 'y']);
	addGetterSetter(Node$1, 'offsetX', 0, (0, Validators_1.getNumberValidator)());
	addGetterSetter(Node$1, 'offsetY', 0, (0, Validators_1.getNumberValidator)());
	addGetterSetter(Node$1, 'dragDistance', null, (0, Validators_1.getNumberValidator)());
	addGetterSetter(Node$1, 'width', 0, (0, Validators_1.getNumberValidator)());
	addGetterSetter(Node$1, 'height', 0, (0, Validators_1.getNumberValidator)());
	addGetterSetter(Node$1, 'listening', true, (0, Validators_1.getBooleanValidator)());
	addGetterSetter(Node$1, 'preventDefault', true, (0, Validators_1.getBooleanValidator)());
	addGetterSetter(Node$1, 'filters', null, function (val) {
	    this._filterUpToDate = false;
	    return val;
	});
	addGetterSetter(Node$1, 'visible', true, (0, Validators_1.getBooleanValidator)());
	addGetterSetter(Node$1, 'transformsEnabled', 'all', (0, Validators_1.getStringValidator)());
	addGetterSetter(Node$1, 'size');
	addGetterSetter(Node$1, 'dragBoundFunc');
	addGetterSetter(Node$1, 'draggable', false, (0, Validators_1.getBooleanValidator)());
	Factory_1.Factory.backCompat(Node$1, {
	    rotateDeg: 'rotate',
	    setRotationDeg: 'setRotation',
	    getRotationDeg: 'getRotation',
	});
	return Node;
}

var Container$3 = {};

var hasRequiredContainer;

function requireContainer () {
	if (hasRequiredContainer) return Container$3;
	hasRequiredContainer = 1;
	Object.defineProperty(Container$3, "__esModule", { value: true });
	Container$3.Container = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	class Container extends Node_1.Node {
	    constructor() {
	        super(...arguments);
	        this.children = [];
	    }
	    getChildren(filterFunc) {
	        if (!filterFunc) {
	            return this.children || [];
	        }
	        const children = this.children || [];
	        var results = [];
	        children.forEach(function (child) {
	            if (filterFunc(child)) {
	                results.push(child);
	            }
	        });
	        return results;
	    }
	    hasChildren() {
	        return this.getChildren().length > 0;
	    }
	    removeChildren() {
	        this.getChildren().forEach((child) => {
	            child.parent = null;
	            child.index = 0;
	            child.remove();
	        });
	        this.children = [];
	        this._requestDraw();
	        return this;
	    }
	    destroyChildren() {
	        this.getChildren().forEach((child) => {
	            child.parent = null;
	            child.index = 0;
	            child.destroy();
	        });
	        this.children = [];
	        this._requestDraw();
	        return this;
	    }
	    add(...children) {
	        if (children.length === 0) {
	            return this;
	        }
	        if (children.length > 1) {
	            for (var i = 0; i < children.length; i++) {
	                this.add(children[i]);
	            }
	            return this;
	        }
	        const child = children[0];
	        if (child.getParent()) {
	            child.moveTo(this);
	            return this;
	        }
	        this._validateAdd(child);
	        child.index = this.getChildren().length;
	        child.parent = this;
	        child._clearCaches();
	        this.getChildren().push(child);
	        this._fire('add', {
	            child: child,
	        });
	        this._requestDraw();
	        return this;
	    }
	    destroy() {
	        if (this.hasChildren()) {
	            this.destroyChildren();
	        }
	        super.destroy();
	        return this;
	    }
	    find(selector) {
	        return this._generalFind(selector, false);
	    }
	    findOne(selector) {
	        var result = this._generalFind(selector, true);
	        return result.length > 0 ? result[0] : undefined;
	    }
	    _generalFind(selector, findOne) {
	        var retArr = [];
	        this._descendants((node) => {
	            const valid = node._isMatch(selector);
	            if (valid) {
	                retArr.push(node);
	            }
	            if (valid && findOne) {
	                return true;
	            }
	            return false;
	        });
	        return retArr;
	    }
	    _descendants(fn) {
	        let shouldStop = false;
	        const children = this.getChildren();
	        for (const child of children) {
	            shouldStop = fn(child);
	            if (shouldStop) {
	                return true;
	            }
	            if (!child.hasChildren()) {
	                continue;
	            }
	            shouldStop = child._descendants(fn);
	            if (shouldStop) {
	                return true;
	            }
	        }
	        return false;
	    }
	    toObject() {
	        var obj = Node_1.Node.prototype.toObject.call(this);
	        obj.children = [];
	        this.getChildren().forEach((child) => {
	            obj.children.push(child.toObject());
	        });
	        return obj;
	    }
	    isAncestorOf(node) {
	        var parent = node.getParent();
	        while (parent) {
	            if (parent._id === this._id) {
	                return true;
	            }
	            parent = parent.getParent();
	        }
	        return false;
	    }
	    clone(obj) {
	        var node = Node_1.Node.prototype.clone.call(this, obj);
	        this.getChildren().forEach(function (no) {
	            node.add(no.clone());
	        });
	        return node;
	    }
	    getAllIntersections(pos) {
	        var arr = [];
	        this.find('Shape').forEach((shape) => {
	            if (shape.isVisible() && shape.intersects(pos)) {
	                arr.push(shape);
	            }
	        });
	        return arr;
	    }
	    _clearSelfAndDescendantCache(attr) {
	        var _a;
	        super._clearSelfAndDescendantCache(attr);
	        if (this.isCached()) {
	            return;
	        }
	        (_a = this.children) === null || _a === void 0 ? void 0 : _a.forEach(function (node) {
	            node._clearSelfAndDescendantCache(attr);
	        });
	    }
	    _setChildrenIndices() {
	        var _a;
	        (_a = this.children) === null || _a === void 0 ? void 0 : _a.forEach(function (child, n) {
	            child.index = n;
	        });
	        this._requestDraw();
	    }
	    drawScene(can, top, bufferCanvas) {
	        var layer = this.getLayer(), canvas = can || (layer && layer.getCanvas()), context = canvas && canvas.getContext(), cachedCanvas = this._getCanvasCache(), cachedSceneCanvas = cachedCanvas && cachedCanvas.scene;
	        var caching = canvas && canvas.isCache;
	        if (!this.isVisible() && !caching) {
	            return this;
	        }
	        if (cachedSceneCanvas) {
	            context.save();
	            var m = this.getAbsoluteTransform(top).getMatrix();
	            context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	            this._drawCachedSceneCanvas(context);
	            context.restore();
	        }
	        else {
	            this._drawChildren('drawScene', canvas, top, bufferCanvas);
	        }
	        return this;
	    }
	    drawHit(can, top) {
	        if (!this.shouldDrawHit(top)) {
	            return this;
	        }
	        var layer = this.getLayer(), canvas = can || (layer && layer.hitCanvas), context = canvas && canvas.getContext(), cachedCanvas = this._getCanvasCache(), cachedHitCanvas = cachedCanvas && cachedCanvas.hit;
	        if (cachedHitCanvas) {
	            context.save();
	            var m = this.getAbsoluteTransform(top).getMatrix();
	            context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	            this._drawCachedHitCanvas(context);
	            context.restore();
	        }
	        else {
	            this._drawChildren('drawHit', canvas, top);
	        }
	        return this;
	    }
	    _drawChildren(drawMethod, canvas, top, bufferCanvas) {
	        var _a;
	        var context = canvas && canvas.getContext(), clipWidth = this.clipWidth(), clipHeight = this.clipHeight(), clipFunc = this.clipFunc(), hasClip = (typeof clipWidth === 'number' && typeof clipHeight === 'number') ||
	            clipFunc;
	        const selfCache = top === this;
	        if (hasClip) {
	            context.save();
	            var transform = this.getAbsoluteTransform(top);
	            var m = transform.getMatrix();
	            context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	            context.beginPath();
	            let clipArgs;
	            if (clipFunc) {
	                clipArgs = clipFunc.call(this, context, this);
	            }
	            else {
	                var clipX = this.clipX();
	                var clipY = this.clipY();
	                context.rect(clipX || 0, clipY || 0, clipWidth, clipHeight);
	            }
	            context.clip.apply(context, clipArgs);
	            m = transform.copy().invert().getMatrix();
	            context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
	        }
	        var hasComposition = !selfCache &&
	            this.globalCompositeOperation() !== 'source-over' &&
	            drawMethod === 'drawScene';
	        if (hasComposition) {
	            context.save();
	            context._applyGlobalCompositeOperation(this);
	        }
	        (_a = this.children) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {
	            child[drawMethod](canvas, top, bufferCanvas);
	        });
	        if (hasComposition) {
	            context.restore();
	        }
	        if (hasClip) {
	            context.restore();
	        }
	    }
	    getClientRect(config = {}) {
	        var _a;
	        var skipTransform = config.skipTransform;
	        var relativeTo = config.relativeTo;
	        var minX, minY, maxX, maxY;
	        var selfRect = {
	            x: Infinity,
	            y: Infinity,
	            width: 0,
	            height: 0,
	        };
	        var that = this;
	        (_a = this.children) === null || _a === void 0 ? void 0 : _a.forEach(function (child) {
	            if (!child.visible()) {
	                return;
	            }
	            var rect = child.getClientRect({
	                relativeTo: that,
	                skipShadow: config.skipShadow,
	                skipStroke: config.skipStroke,
	            });
	            if (rect.width === 0 && rect.height === 0) {
	                return;
	            }
	            if (minX === undefined) {
	                minX = rect.x;
	                minY = rect.y;
	                maxX = rect.x + rect.width;
	                maxY = rect.y + rect.height;
	            }
	            else {
	                minX = Math.min(minX, rect.x);
	                minY = Math.min(minY, rect.y);
	                maxX = Math.max(maxX, rect.x + rect.width);
	                maxY = Math.max(maxY, rect.y + rect.height);
	            }
	        });
	        var shapes = this.find('Shape');
	        var hasVisible = false;
	        for (var i = 0; i < shapes.length; i++) {
	            var shape = shapes[i];
	            if (shape._isVisible(this)) {
	                hasVisible = true;
	                break;
	            }
	        }
	        if (hasVisible && minX !== undefined) {
	            selfRect = {
	                x: minX,
	                y: minY,
	                width: maxX - minX,
	                height: maxY - minY,
	            };
	        }
	        else {
	            selfRect = {
	                x: 0,
	                y: 0,
	                width: 0,
	                height: 0,
	            };
	        }
	        if (!skipTransform) {
	            return this._transformedRect(selfRect, relativeTo);
	        }
	        return selfRect;
	    }
	}
	Container$3.Container = Container;
	Factory_1.Factory.addComponentsGetterSetter(Container, 'clip', [
	    'x',
	    'y',
	    'width',
	    'height',
	]);
	Factory_1.Factory.addGetterSetter(Container, 'clipX', undefined, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Container, 'clipY', undefined, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Container, 'clipWidth', undefined, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Container, 'clipHeight', undefined, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Container, 'clipFunc');
	return Container$3;
}

var Stage$1 = {};

var PointerEvents = {};

var hasRequiredPointerEvents;

function requirePointerEvents () {
	if (hasRequiredPointerEvents) return PointerEvents;
	hasRequiredPointerEvents = 1;
	Object.defineProperty(PointerEvents, "__esModule", { value: true });
	PointerEvents.releaseCapture = PointerEvents.setPointerCapture = PointerEvents.hasPointerCapture = PointerEvents.createEvent = PointerEvents.getCapturedShape = void 0;
	const Global_1 = requireGlobal();
	const Captures = new Map();
	const SUPPORT_POINTER_EVENTS = Global_1.Konva._global['PointerEvent'] !== undefined;
	function getCapturedShape(pointerId) {
	    return Captures.get(pointerId);
	}
	PointerEvents.getCapturedShape = getCapturedShape;
	function createEvent(evt) {
	    return {
	        evt,
	        pointerId: evt.pointerId,
	    };
	}
	PointerEvents.createEvent = createEvent;
	function hasPointerCapture(pointerId, shape) {
	    return Captures.get(pointerId) === shape;
	}
	PointerEvents.hasPointerCapture = hasPointerCapture;
	function setPointerCapture(pointerId, shape) {
	    releaseCapture(pointerId);
	    const stage = shape.getStage();
	    if (!stage)
	        return;
	    Captures.set(pointerId, shape);
	    if (SUPPORT_POINTER_EVENTS) {
	        shape._fire('gotpointercapture', createEvent(new PointerEvent('gotpointercapture')));
	    }
	}
	PointerEvents.setPointerCapture = setPointerCapture;
	function releaseCapture(pointerId, target) {
	    const shape = Captures.get(pointerId);
	    if (!shape)
	        return;
	    const stage = shape.getStage();
	    if (stage && stage.content) ;
	    Captures.delete(pointerId);
	    if (SUPPORT_POINTER_EVENTS) {
	        shape._fire('lostpointercapture', createEvent(new PointerEvent('lostpointercapture')));
	    }
	}
	PointerEvents.releaseCapture = releaseCapture;
	return PointerEvents;
}

var hasRequiredStage;

function requireStage () {
	if (hasRequiredStage) return Stage$1;
	hasRequiredStage = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Stage = exports.stages = void 0;
		const Util_1 = requireUtil();
		const Factory_1 = requireFactory();
		const Container_1 = requireContainer();
		const Global_1 = requireGlobal();
		const Canvas_1 = requireCanvas();
		const DragAndDrop_1 = requireDragAndDrop();
		const Global_2 = requireGlobal();
		const PointerEvents = requirePointerEvents();
		var STAGE = 'Stage', STRING = 'string', PX = 'px', MOUSEOUT = 'mouseout', MOUSELEAVE = 'mouseleave', MOUSEOVER = 'mouseover', MOUSEENTER = 'mouseenter', MOUSEMOVE = 'mousemove', MOUSEDOWN = 'mousedown', MOUSEUP = 'mouseup', POINTERMOVE = 'pointermove', POINTERDOWN = 'pointerdown', POINTERUP = 'pointerup', POINTERCANCEL = 'pointercancel', LOSTPOINTERCAPTURE = 'lostpointercapture', POINTEROUT = 'pointerout', POINTERLEAVE = 'pointerleave', POINTEROVER = 'pointerover', POINTERENTER = 'pointerenter', CONTEXTMENU = 'contextmenu', TOUCHSTART = 'touchstart', TOUCHEND = 'touchend', TOUCHMOVE = 'touchmove', TOUCHCANCEL = 'touchcancel', WHEEL = 'wheel', MAX_LAYERS_NUMBER = 5, EVENTS = [
		    [MOUSEENTER, '_pointerenter'],
		    [MOUSEDOWN, '_pointerdown'],
		    [MOUSEMOVE, '_pointermove'],
		    [MOUSEUP, '_pointerup'],
		    [MOUSELEAVE, '_pointerleave'],
		    [TOUCHSTART, '_pointerdown'],
		    [TOUCHMOVE, '_pointermove'],
		    [TOUCHEND, '_pointerup'],
		    [TOUCHCANCEL, '_pointercancel'],
		    [MOUSEOVER, '_pointerover'],
		    [WHEEL, '_wheel'],
		    [CONTEXTMENU, '_contextmenu'],
		    [POINTERDOWN, '_pointerdown'],
		    [POINTERMOVE, '_pointermove'],
		    [POINTERUP, '_pointerup'],
		    [POINTERCANCEL, '_pointercancel'],
		    [LOSTPOINTERCAPTURE, '_lostpointercapture'],
		];
		const EVENTS_MAP = {
		    mouse: {
		        [POINTEROUT]: MOUSEOUT,
		        [POINTERLEAVE]: MOUSELEAVE,
		        [POINTEROVER]: MOUSEOVER,
		        [POINTERENTER]: MOUSEENTER,
		        [POINTERMOVE]: MOUSEMOVE,
		        [POINTERDOWN]: MOUSEDOWN,
		        [POINTERUP]: MOUSEUP,
		        [POINTERCANCEL]: 'mousecancel',
		        pointerclick: 'click',
		        pointerdblclick: 'dblclick',
		    },
		    touch: {
		        [POINTEROUT]: 'touchout',
		        [POINTERLEAVE]: 'touchleave',
		        [POINTEROVER]: 'touchover',
		        [POINTERENTER]: 'touchenter',
		        [POINTERMOVE]: TOUCHMOVE,
		        [POINTERDOWN]: TOUCHSTART,
		        [POINTERUP]: TOUCHEND,
		        [POINTERCANCEL]: TOUCHCANCEL,
		        pointerclick: 'tap',
		        pointerdblclick: 'dbltap',
		    },
		    pointer: {
		        [POINTEROUT]: POINTEROUT,
		        [POINTERLEAVE]: POINTERLEAVE,
		        [POINTEROVER]: POINTEROVER,
		        [POINTERENTER]: POINTERENTER,
		        [POINTERMOVE]: POINTERMOVE,
		        [POINTERDOWN]: POINTERDOWN,
		        [POINTERUP]: POINTERUP,
		        [POINTERCANCEL]: POINTERCANCEL,
		        pointerclick: 'pointerclick',
		        pointerdblclick: 'pointerdblclick',
		    },
		};
		const getEventType = (type) => {
		    if (type.indexOf('pointer') >= 0) {
		        return 'pointer';
		    }
		    if (type.indexOf('touch') >= 0) {
		        return 'touch';
		    }
		    return 'mouse';
		};
		const getEventsMap = (eventType) => {
		    const type = getEventType(eventType);
		    if (type === 'pointer') {
		        return Global_1.Konva.pointerEventsEnabled && EVENTS_MAP.pointer;
		    }
		    if (type === 'touch') {
		        return EVENTS_MAP.touch;
		    }
		    if (type === 'mouse') {
		        return EVENTS_MAP.mouse;
		    }
		};
		function checkNoClip(attrs = {}) {
		    if (attrs.clipFunc || attrs.clipWidth || attrs.clipHeight) {
		        Util_1.Util.warn('Stage does not support clipping. Please use clip for Layers or Groups.');
		    }
		    return attrs;
		}
		const NO_POINTERS_MESSAGE = `Pointer position is missing and not registered by the stage. Looks like it is outside of the stage container. You can set it manually from event: stage.setPointersPositions(event);`;
		exports.stages = [];
		class Stage extends Container_1.Container {
		    constructor(config) {
		        super(checkNoClip(config));
		        this._pointerPositions = [];
		        this._changedPointerPositions = [];
		        this._buildDOM();
		        this._bindContentEvents();
		        exports.stages.push(this);
		        this.on('widthChange.konva heightChange.konva', this._resizeDOM);
		        this.on('visibleChange.konva', this._checkVisibility);
		        this.on('clipWidthChange.konva clipHeightChange.konva clipFuncChange.konva', () => {
		            checkNoClip(this.attrs);
		        });
		        this._checkVisibility();
		    }
		    _validateAdd(child) {
		        const isLayer = child.getType() === 'Layer';
		        const isFastLayer = child.getType() === 'FastLayer';
		        const valid = isLayer || isFastLayer;
		        if (!valid) {
		            Util_1.Util.throw('You may only add layers to the stage.');
		        }
		    }
		    _checkVisibility() {
		        if (!this.content) {
		            return;
		        }
		        const style = this.visible() ? '' : 'none';
		        this.content.style.display = style;
		    }
		    setContainer(container) {
		        if (typeof container === STRING) {
		            if (container.charAt(0) === '.') {
		                var className = container.slice(1);
		                container = document.getElementsByClassName(className)[0];
		            }
		            else {
		                var id;
		                if (container.charAt(0) !== '#') {
		                    id = container;
		                }
		                else {
		                    id = container.slice(1);
		                }
		                container = document.getElementById(id);
		            }
		            if (!container) {
		                throw 'Can not find container in document with id ' + id;
		            }
		        }
		        this._setAttr('container', container);
		        if (this.content) {
		            if (this.content.parentElement) {
		                this.content.parentElement.removeChild(this.content);
		            }
		            container.appendChild(this.content);
		        }
		        return this;
		    }
		    shouldDrawHit() {
		        return true;
		    }
		    clear() {
		        var layers = this.children, len = layers.length, n;
		        for (n = 0; n < len; n++) {
		            layers[n].clear();
		        }
		        return this;
		    }
		    clone(obj) {
		        if (!obj) {
		            obj = {};
		        }
		        obj.container =
		            typeof document !== 'undefined' && document.createElement('div');
		        return Container_1.Container.prototype.clone.call(this, obj);
		    }
		    destroy() {
		        super.destroy();
		        var content = this.content;
		        if (content && Util_1.Util._isInDocument(content)) {
		            this.container().removeChild(content);
		        }
		        var index = exports.stages.indexOf(this);
		        if (index > -1) {
		            exports.stages.splice(index, 1);
		        }
		        Util_1.Util.releaseCanvas(this.bufferCanvas._canvas, this.bufferHitCanvas._canvas);
		        return this;
		    }
		    getPointerPosition() {
		        const pos = this._pointerPositions[0] || this._changedPointerPositions[0];
		        if (!pos) {
		            Util_1.Util.warn(NO_POINTERS_MESSAGE);
		            return null;
		        }
		        return {
		            x: pos.x,
		            y: pos.y,
		        };
		    }
		    _getPointerById(id) {
		        return this._pointerPositions.find((p) => p.id === id);
		    }
		    getPointersPositions() {
		        return this._pointerPositions;
		    }
		    getStage() {
		        return this;
		    }
		    getContent() {
		        return this.content;
		    }
		    _toKonvaCanvas(config) {
		        config = config || {};
		        config.x = config.x || 0;
		        config.y = config.y || 0;
		        config.width = config.width || this.width();
		        config.height = config.height || this.height();
		        var canvas = new Canvas_1.SceneCanvas({
		            width: config.width,
		            height: config.height,
		            pixelRatio: config.pixelRatio || 1,
		        });
		        var _context = canvas.getContext()._context;
		        var layers = this.children;
		        if (config.x || config.y) {
		            _context.translate(-1 * config.x, -1 * config.y);
		        }
		        layers.forEach(function (layer) {
		            if (!layer.isVisible()) {
		                return;
		            }
		            var layerCanvas = layer._toKonvaCanvas(config);
		            _context.drawImage(layerCanvas._canvas, config.x, config.y, layerCanvas.getWidth() / layerCanvas.getPixelRatio(), layerCanvas.getHeight() / layerCanvas.getPixelRatio());
		        });
		        return canvas;
		    }
		    getIntersection(pos) {
		        if (!pos) {
		            return null;
		        }
		        var layers = this.children, len = layers.length, end = len - 1, n;
		        for (n = end; n >= 0; n--) {
		            const shape = layers[n].getIntersection(pos);
		            if (shape) {
		                return shape;
		            }
		        }
		        return null;
		    }
		    _resizeDOM() {
		        var width = this.width();
		        var height = this.height();
		        if (this.content) {
		            this.content.style.width = width + PX;
		            this.content.style.height = height + PX;
		        }
		        this.bufferCanvas.setSize(width, height);
		        this.bufferHitCanvas.setSize(width, height);
		        this.children.forEach((layer) => {
		            layer.setSize({ width, height });
		            layer.draw();
		        });
		    }
		    add(layer, ...rest) {
		        if (arguments.length > 1) {
		            for (var i = 0; i < arguments.length; i++) {
		                this.add(arguments[i]);
		            }
		            return this;
		        }
		        super.add(layer);
		        var length = this.children.length;
		        if (length > MAX_LAYERS_NUMBER) {
		            Util_1.Util.warn('The stage has ' +
		                length +
		                ' layers. Recommended maximum number of layers is 3-5. Adding more layers into the stage may drop the performance. Rethink your tree structure, you can use Konva.Group.');
		        }
		        layer.setSize({ width: this.width(), height: this.height() });
		        layer.draw();
		        if (Global_1.Konva.isBrowser) {
		            this.content.appendChild(layer.canvas._canvas);
		        }
		        return this;
		    }
		    getParent() {
		        return null;
		    }
		    getLayer() {
		        return null;
		    }
		    hasPointerCapture(pointerId) {
		        return PointerEvents.hasPointerCapture(pointerId, this);
		    }
		    setPointerCapture(pointerId) {
		        PointerEvents.setPointerCapture(pointerId, this);
		    }
		    releaseCapture(pointerId) {
		        PointerEvents.releaseCapture(pointerId, this);
		    }
		    getLayers() {
		        return this.children;
		    }
		    _bindContentEvents() {
		        if (!Global_1.Konva.isBrowser) {
		            return;
		        }
		        EVENTS.forEach(([event, methodName]) => {
		            this.content.addEventListener(event, (evt) => {
		                this[methodName](evt);
		            }, { passive: false });
		        });
		    }
		    _pointerenter(evt) {
		        this.setPointersPositions(evt);
		        const events = getEventsMap(evt.type);
		        if (events) {
		            this._fire(events.pointerenter, {
		                evt: evt,
		                target: this,
		                currentTarget: this,
		            });
		        }
		    }
		    _pointerover(evt) {
		        this.setPointersPositions(evt);
		        const events = getEventsMap(evt.type);
		        if (events) {
		            this._fire(events.pointerover, {
		                evt: evt,
		                target: this,
		                currentTarget: this,
		            });
		        }
		    }
		    _getTargetShape(evenType) {
		        let shape = this[evenType + 'targetShape'];
		        if (shape && !shape.getStage()) {
		            shape = null;
		        }
		        return shape;
		    }
		    _pointerleave(evt) {
		        const events = getEventsMap(evt.type);
		        const eventType = getEventType(evt.type);
		        if (!events) {
		            return;
		        }
		        this.setPointersPositions(evt);
		        var targetShape = this._getTargetShape(eventType);
		        var eventsEnabled = !(Global_1.Konva.isDragging() || Global_1.Konva.isTransforming()) || Global_1.Konva.hitOnDragEnabled;
		        if (targetShape && eventsEnabled) {
		            targetShape._fireAndBubble(events.pointerout, { evt: evt });
		            targetShape._fireAndBubble(events.pointerleave, { evt: evt });
		            this._fire(events.pointerleave, {
		                evt: evt,
		                target: this,
		                currentTarget: this,
		            });
		            this[eventType + 'targetShape'] = null;
		        }
		        else if (eventsEnabled) {
		            this._fire(events.pointerleave, {
		                evt: evt,
		                target: this,
		                currentTarget: this,
		            });
		            this._fire(events.pointerout, {
		                evt: evt,
		                target: this,
		                currentTarget: this,
		            });
		        }
		        this.pointerPos = null;
		        this._pointerPositions = [];
		    }
		    _pointerdown(evt) {
		        const events = getEventsMap(evt.type);
		        const eventType = getEventType(evt.type);
		        if (!events) {
		            return;
		        }
		        this.setPointersPositions(evt);
		        var triggeredOnShape = false;
		        this._changedPointerPositions.forEach((pos) => {
		            var shape = this.getIntersection(pos);
		            DragAndDrop_1.DD.justDragged = false;
		            Global_1.Konva['_' + eventType + 'ListenClick'] = true;
		            if (!shape || !shape.isListening()) {
		                return;
		            }
		            if (Global_1.Konva.capturePointerEventsEnabled) {
		                shape.setPointerCapture(pos.id);
		            }
		            this[eventType + 'ClickStartShape'] = shape;
		            shape._fireAndBubble(events.pointerdown, {
		                evt: evt,
		                pointerId: pos.id,
		            });
		            triggeredOnShape = true;
		            const isTouch = evt.type.indexOf('touch') >= 0;
		            if (shape.preventDefault() && evt.cancelable && isTouch) {
		                evt.preventDefault();
		            }
		        });
		        if (!triggeredOnShape) {
		            this._fire(events.pointerdown, {
		                evt: evt,
		                target: this,
		                currentTarget: this,
		                pointerId: this._pointerPositions[0].id,
		            });
		        }
		    }
		    _pointermove(evt) {
		        const events = getEventsMap(evt.type);
		        const eventType = getEventType(evt.type);
		        if (!events) {
		            return;
		        }
		        if (Global_1.Konva.isDragging() && DragAndDrop_1.DD.node.preventDefault() && evt.cancelable) {
		            evt.preventDefault();
		        }
		        this.setPointersPositions(evt);
		        var eventsEnabled = !(Global_1.Konva.isDragging() || Global_1.Konva.isTransforming()) || Global_1.Konva.hitOnDragEnabled;
		        if (!eventsEnabled) {
		            return;
		        }
		        var processedShapesIds = {};
		        let triggeredOnShape = false;
		        var targetShape = this._getTargetShape(eventType);
		        this._changedPointerPositions.forEach((pos) => {
		            const shape = (PointerEvents.getCapturedShape(pos.id) ||
		                this.getIntersection(pos));
		            const pointerId = pos.id;
		            const event = { evt: evt, pointerId };
		            var differentTarget = targetShape !== shape;
		            if (differentTarget && targetShape) {
		                targetShape._fireAndBubble(events.pointerout, { ...event }, shape);
		                targetShape._fireAndBubble(events.pointerleave, { ...event }, shape);
		            }
		            if (shape) {
		                if (processedShapesIds[shape._id]) {
		                    return;
		                }
		                processedShapesIds[shape._id] = true;
		            }
		            if (shape && shape.isListening()) {
		                triggeredOnShape = true;
		                if (differentTarget) {
		                    shape._fireAndBubble(events.pointerover, { ...event }, targetShape);
		                    shape._fireAndBubble(events.pointerenter, { ...event }, targetShape);
		                    this[eventType + 'targetShape'] = shape;
		                }
		                shape._fireAndBubble(events.pointermove, { ...event });
		            }
		            else {
		                if (targetShape) {
		                    this._fire(events.pointerover, {
		                        evt: evt,
		                        target: this,
		                        currentTarget: this,
		                        pointerId,
		                    });
		                    this[eventType + 'targetShape'] = null;
		                }
		            }
		        });
		        if (!triggeredOnShape) {
		            this._fire(events.pointermove, {
		                evt: evt,
		                target: this,
		                currentTarget: this,
		                pointerId: this._changedPointerPositions[0].id,
		            });
		        }
		    }
		    _pointerup(evt) {
		        const events = getEventsMap(evt.type);
		        const eventType = getEventType(evt.type);
		        if (!events) {
		            return;
		        }
		        this.setPointersPositions(evt);
		        const clickStartShape = this[eventType + 'ClickStartShape'];
		        const clickEndShape = this[eventType + 'ClickEndShape'];
		        var processedShapesIds = {};
		        let triggeredOnShape = false;
		        this._changedPointerPositions.forEach((pos) => {
		            const shape = (PointerEvents.getCapturedShape(pos.id) ||
		                this.getIntersection(pos));
		            if (shape) {
		                shape.releaseCapture(pos.id);
		                if (processedShapesIds[shape._id]) {
		                    return;
		                }
		                processedShapesIds[shape._id] = true;
		            }
		            const pointerId = pos.id;
		            const event = { evt: evt, pointerId };
		            let fireDblClick = false;
		            if (Global_1.Konva['_' + eventType + 'InDblClickWindow']) {
		                fireDblClick = true;
		                clearTimeout(this[eventType + 'DblTimeout']);
		            }
		            else if (!DragAndDrop_1.DD.justDragged) {
		                Global_1.Konva['_' + eventType + 'InDblClickWindow'] = true;
		                clearTimeout(this[eventType + 'DblTimeout']);
		            }
		            this[eventType + 'DblTimeout'] = setTimeout(function () {
		                Global_1.Konva['_' + eventType + 'InDblClickWindow'] = false;
		            }, Global_1.Konva.dblClickWindow);
		            if (shape && shape.isListening()) {
		                triggeredOnShape = true;
		                this[eventType + 'ClickEndShape'] = shape;
		                shape._fireAndBubble(events.pointerup, { ...event });
		                if (Global_1.Konva['_' + eventType + 'ListenClick'] &&
		                    clickStartShape &&
		                    clickStartShape === shape) {
		                    shape._fireAndBubble(events.pointerclick, { ...event });
		                    if (fireDblClick && clickEndShape && clickEndShape === shape) {
		                        shape._fireAndBubble(events.pointerdblclick, { ...event });
		                    }
		                }
		            }
		            else {
		                this[eventType + 'ClickEndShape'] = null;
		                if (Global_1.Konva['_' + eventType + 'ListenClick']) {
		                    this._fire(events.pointerclick, {
		                        evt: evt,
		                        target: this,
		                        currentTarget: this,
		                        pointerId,
		                    });
		                }
		                if (fireDblClick) {
		                    this._fire(events.pointerdblclick, {
		                        evt: evt,
		                        target: this,
		                        currentTarget: this,
		                        pointerId,
		                    });
		                }
		            }
		        });
		        if (!triggeredOnShape) {
		            this._fire(events.pointerup, {
		                evt: evt,
		                target: this,
		                currentTarget: this,
		                pointerId: this._changedPointerPositions[0].id,
		            });
		        }
		        Global_1.Konva['_' + eventType + 'ListenClick'] = false;
		        if (evt.cancelable && eventType !== 'touch') {
		            evt.preventDefault();
		        }
		    }
		    _contextmenu(evt) {
		        this.setPointersPositions(evt);
		        var shape = this.getIntersection(this.getPointerPosition());
		        if (shape && shape.isListening()) {
		            shape._fireAndBubble(CONTEXTMENU, { evt: evt });
		        }
		        else {
		            this._fire(CONTEXTMENU, {
		                evt: evt,
		                target: this,
		                currentTarget: this,
		            });
		        }
		    }
		    _wheel(evt) {
		        this.setPointersPositions(evt);
		        var shape = this.getIntersection(this.getPointerPosition());
		        if (shape && shape.isListening()) {
		            shape._fireAndBubble(WHEEL, { evt: evt });
		        }
		        else {
		            this._fire(WHEEL, {
		                evt: evt,
		                target: this,
		                currentTarget: this,
		            });
		        }
		    }
		    _pointercancel(evt) {
		        this.setPointersPositions(evt);
		        const shape = PointerEvents.getCapturedShape(evt.pointerId) ||
		            this.getIntersection(this.getPointerPosition());
		        if (shape) {
		            shape._fireAndBubble(POINTERUP, PointerEvents.createEvent(evt));
		        }
		        PointerEvents.releaseCapture(evt.pointerId);
		    }
		    _lostpointercapture(evt) {
		        PointerEvents.releaseCapture(evt.pointerId);
		    }
		    setPointersPositions(evt) {
		        var contentPosition = this._getContentPosition(), x = null, y = null;
		        evt = evt ? evt : window.event;
		        if (evt.touches !== undefined) {
		            this._pointerPositions = [];
		            this._changedPointerPositions = [];
		            Array.prototype.forEach.call(evt.touches, (touch) => {
		                this._pointerPositions.push({
		                    id: touch.identifier,
		                    x: (touch.clientX - contentPosition.left) / contentPosition.scaleX,
		                    y: (touch.clientY - contentPosition.top) / contentPosition.scaleY,
		                });
		            });
		            Array.prototype.forEach.call(evt.changedTouches || evt.touches, (touch) => {
		                this._changedPointerPositions.push({
		                    id: touch.identifier,
		                    x: (touch.clientX - contentPosition.left) / contentPosition.scaleX,
		                    y: (touch.clientY - contentPosition.top) / contentPosition.scaleY,
		                });
		            });
		        }
		        else {
		            x = (evt.clientX - contentPosition.left) / contentPosition.scaleX;
		            y = (evt.clientY - contentPosition.top) / contentPosition.scaleY;
		            this.pointerPos = {
		                x: x,
		                y: y,
		            };
		            this._pointerPositions = [{ x, y, id: Util_1.Util._getFirstPointerId(evt) }];
		            this._changedPointerPositions = [
		                { x, y, id: Util_1.Util._getFirstPointerId(evt) },
		            ];
		        }
		    }
		    _setPointerPosition(evt) {
		        Util_1.Util.warn('Method _setPointerPosition is deprecated. Use "stage.setPointersPositions(event)" instead.');
		        this.setPointersPositions(evt);
		    }
		    _getContentPosition() {
		        if (!this.content || !this.content.getBoundingClientRect) {
		            return {
		                top: 0,
		                left: 0,
		                scaleX: 1,
		                scaleY: 1,
		            };
		        }
		        var rect = this.content.getBoundingClientRect();
		        return {
		            top: rect.top,
		            left: rect.left,
		            scaleX: rect.width / this.content.clientWidth || 1,
		            scaleY: rect.height / this.content.clientHeight || 1,
		        };
		    }
		    _buildDOM() {
		        this.bufferCanvas = new Canvas_1.SceneCanvas({
		            width: this.width(),
		            height: this.height(),
		        });
		        this.bufferHitCanvas = new Canvas_1.HitCanvas({
		            pixelRatio: 1,
		            width: this.width(),
		            height: this.height(),
		        });
		        if (!Global_1.Konva.isBrowser) {
		            return;
		        }
		        var container = this.container();
		        if (!container) {
		            throw 'Stage has no container. A container is required.';
		        }
		        container.innerHTML = '';
		        this.content = document.createElement('div');
		        this.content.style.position = 'relative';
		        this.content.style.userSelect = 'none';
		        this.content.className = 'konvajs-content';
		        this.content.setAttribute('role', 'presentation');
		        container.appendChild(this.content);
		        this._resizeDOM();
		    }
		    cache() {
		        Util_1.Util.warn('Cache function is not allowed for stage. You may use cache only for layers, groups and shapes.');
		        return this;
		    }
		    clearCache() {
		        return this;
		    }
		    batchDraw() {
		        this.getChildren().forEach(function (layer) {
		            layer.batchDraw();
		        });
		        return this;
		    }
		}
		exports.Stage = Stage;
		Stage.prototype.nodeType = STAGE;
		(0, Global_2._registerNode)(Stage);
		Factory_1.Factory.addGetterSetter(Stage, 'container'); 
	} (Stage$1));
	return Stage$1;
}

var Layer$1 = {};

var Shape = {};

var hasRequiredShape;

function requireShape () {
	if (hasRequiredShape) return Shape;
	hasRequiredShape = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Shape = exports.shapes = void 0;
		const Global_1 = requireGlobal();
		const Util_1 = requireUtil();
		const Factory_1 = requireFactory();
		const Node_1 = requireNode();
		const Validators_1 = requireValidators();
		const Global_2 = requireGlobal();
		const PointerEvents = requirePointerEvents();
		var HAS_SHADOW = 'hasShadow';
		var SHADOW_RGBA = 'shadowRGBA';
		var patternImage = 'patternImage';
		var linearGradient = 'linearGradient';
		var radialGradient = 'radialGradient';
		let dummyContext;
		function getDummyContext() {
		    if (dummyContext) {
		        return dummyContext;
		    }
		    dummyContext = Util_1.Util.createCanvasElement().getContext('2d');
		    return dummyContext;
		}
		exports.shapes = {};
		function _fillFunc(context) {
		    const fillRule = this.attrs.fillRule;
		    if (fillRule) {
		        context.fill(fillRule);
		    }
		    else {
		        context.fill();
		    }
		}
		function _strokeFunc(context) {
		    context.stroke();
		}
		function _fillFuncHit(context) {
		    context.fill();
		}
		function _strokeFuncHit(context) {
		    context.stroke();
		}
		function _clearHasShadowCache() {
		    this._clearCache(HAS_SHADOW);
		}
		function _clearGetShadowRGBACache() {
		    this._clearCache(SHADOW_RGBA);
		}
		function _clearFillPatternCache() {
		    this._clearCache(patternImage);
		}
		function _clearLinearGradientCache() {
		    this._clearCache(linearGradient);
		}
		function _clearRadialGradientCache() {
		    this._clearCache(radialGradient);
		}
		class Shape extends Node_1.Node {
		    constructor(config) {
		        super(config);
		        let key;
		        while (true) {
		            key = Util_1.Util.getRandomColor();
		            if (key && !(key in exports.shapes)) {
		                break;
		            }
		        }
		        this.colorKey = key;
		        exports.shapes[key] = this;
		    }
		    getContext() {
		        Util_1.Util.warn('shape.getContext() method is deprecated. Please do not use it.');
		        return this.getLayer().getContext();
		    }
		    getCanvas() {
		        Util_1.Util.warn('shape.getCanvas() method is deprecated. Please do not use it.');
		        return this.getLayer().getCanvas();
		    }
		    getSceneFunc() {
		        return this.attrs.sceneFunc || this['_sceneFunc'];
		    }
		    getHitFunc() {
		        return this.attrs.hitFunc || this['_hitFunc'];
		    }
		    hasShadow() {
		        return this._getCache(HAS_SHADOW, this._hasShadow);
		    }
		    _hasShadow() {
		        return (this.shadowEnabled() &&
		            this.shadowOpacity() !== 0 &&
		            !!(this.shadowColor() ||
		                this.shadowBlur() ||
		                this.shadowOffsetX() ||
		                this.shadowOffsetY()));
		    }
		    _getFillPattern() {
		        return this._getCache(patternImage, this.__getFillPattern);
		    }
		    __getFillPattern() {
		        if (this.fillPatternImage()) {
		            var ctx = getDummyContext();
		            const pattern = ctx.createPattern(this.fillPatternImage(), this.fillPatternRepeat() || 'repeat');
		            if (pattern && pattern.setTransform) {
		                const tr = new Util_1.Transform();
		                tr.translate(this.fillPatternX(), this.fillPatternY());
		                tr.rotate(Global_1.Konva.getAngle(this.fillPatternRotation()));
		                tr.scale(this.fillPatternScaleX(), this.fillPatternScaleY());
		                tr.translate(-1 * this.fillPatternOffsetX(), -1 * this.fillPatternOffsetY());
		                const m = tr.getMatrix();
		                const matrix = typeof DOMMatrix === 'undefined'
		                    ? {
		                        a: m[0],
		                        b: m[1],
		                        c: m[2],
		                        d: m[3],
		                        e: m[4],
		                        f: m[5],
		                    }
		                    : new DOMMatrix(m);
		                pattern.setTransform(matrix);
		            }
		            return pattern;
		        }
		    }
		    _getLinearGradient() {
		        return this._getCache(linearGradient, this.__getLinearGradient);
		    }
		    __getLinearGradient() {
		        var colorStops = this.fillLinearGradientColorStops();
		        if (colorStops) {
		            var ctx = getDummyContext();
		            var start = this.fillLinearGradientStartPoint();
		            var end = this.fillLinearGradientEndPoint();
		            var grd = ctx.createLinearGradient(start.x, start.y, end.x, end.y);
		            for (var n = 0; n < colorStops.length; n += 2) {
		                grd.addColorStop(colorStops[n], colorStops[n + 1]);
		            }
		            return grd;
		        }
		    }
		    _getRadialGradient() {
		        return this._getCache(radialGradient, this.__getRadialGradient);
		    }
		    __getRadialGradient() {
		        var colorStops = this.fillRadialGradientColorStops();
		        if (colorStops) {
		            var ctx = getDummyContext();
		            var start = this.fillRadialGradientStartPoint();
		            var end = this.fillRadialGradientEndPoint();
		            var grd = ctx.createRadialGradient(start.x, start.y, this.fillRadialGradientStartRadius(), end.x, end.y, this.fillRadialGradientEndRadius());
		            for (var n = 0; n < colorStops.length; n += 2) {
		                grd.addColorStop(colorStops[n], colorStops[n + 1]);
		            }
		            return grd;
		        }
		    }
		    getShadowRGBA() {
		        return this._getCache(SHADOW_RGBA, this._getShadowRGBA);
		    }
		    _getShadowRGBA() {
		        if (!this.hasShadow()) {
		            return;
		        }
		        var rgba = Util_1.Util.colorToRGBA(this.shadowColor());
		        if (rgba) {
		            return ('rgba(' +
		                rgba.r +
		                ',' +
		                rgba.g +
		                ',' +
		                rgba.b +
		                ',' +
		                rgba.a * (this.shadowOpacity() || 1) +
		                ')');
		        }
		    }
		    hasFill() {
		        return this._calculate('hasFill', [
		            'fillEnabled',
		            'fill',
		            'fillPatternImage',
		            'fillLinearGradientColorStops',
		            'fillRadialGradientColorStops',
		        ], () => {
		            return (this.fillEnabled() &&
		                !!(this.fill() ||
		                    this.fillPatternImage() ||
		                    this.fillLinearGradientColorStops() ||
		                    this.fillRadialGradientColorStops()));
		        });
		    }
		    hasStroke() {
		        return this._calculate('hasStroke', [
		            'strokeEnabled',
		            'strokeWidth',
		            'stroke',
		            'strokeLinearGradientColorStops',
		        ], () => {
		            return (this.strokeEnabled() &&
		                this.strokeWidth() &&
		                !!(this.stroke() || this.strokeLinearGradientColorStops()));
		        });
		    }
		    hasHitStroke() {
		        const width = this.hitStrokeWidth();
		        if (width === 'auto') {
		            return this.hasStroke();
		        }
		        return this.strokeEnabled() && !!width;
		    }
		    intersects(point) {
		        var stage = this.getStage();
		        if (!stage) {
		            return false;
		        }
		        const bufferHitCanvas = stage.bufferHitCanvas;
		        bufferHitCanvas.getContext().clear();
		        this.drawHit(bufferHitCanvas, undefined, true);
		        const p = bufferHitCanvas.context.getImageData(Math.round(point.x), Math.round(point.y), 1, 1).data;
		        return p[3] > 0;
		    }
		    destroy() {
		        Node_1.Node.prototype.destroy.call(this);
		        delete exports.shapes[this.colorKey];
		        delete this.colorKey;
		        return this;
		    }
		    _useBufferCanvas(forceFill) {
		        var _a;
		        const perfectDrawEnabled = (_a = this.attrs.perfectDrawEnabled) !== null && _a !== void 0 ? _a : true;
		        if (!perfectDrawEnabled) {
		            return false;
		        }
		        const hasFill = forceFill || this.hasFill();
		        const hasStroke = this.hasStroke();
		        const isTransparent = this.getAbsoluteOpacity() !== 1;
		        if (hasFill && hasStroke && isTransparent) {
		            return true;
		        }
		        const hasShadow = this.hasShadow();
		        const strokeForShadow = this.shadowForStrokeEnabled();
		        if (hasFill && hasStroke && hasShadow && strokeForShadow) {
		            return true;
		        }
		        return false;
		    }
		    setStrokeHitEnabled(val) {
		        Util_1.Util.warn('strokeHitEnabled property is deprecated. Please use hitStrokeWidth instead.');
		        if (val) {
		            this.hitStrokeWidth('auto');
		        }
		        else {
		            this.hitStrokeWidth(0);
		        }
		    }
		    getStrokeHitEnabled() {
		        if (this.hitStrokeWidth() === 0) {
		            return false;
		        }
		        else {
		            return true;
		        }
		    }
		    getSelfRect() {
		        var size = this.size();
		        return {
		            x: this._centroid ? -size.width / 2 : 0,
		            y: this._centroid ? -size.height / 2 : 0,
		            width: size.width,
		            height: size.height,
		        };
		    }
		    getClientRect(config = {}) {
		        const skipTransform = config.skipTransform;
		        const relativeTo = config.relativeTo;
		        const fillRect = this.getSelfRect();
		        const applyStroke = !config.skipStroke && this.hasStroke();
		        const strokeWidth = (applyStroke && this.strokeWidth()) || 0;
		        const fillAndStrokeWidth = fillRect.width + strokeWidth;
		        const fillAndStrokeHeight = fillRect.height + strokeWidth;
		        const applyShadow = !config.skipShadow && this.hasShadow();
		        const shadowOffsetX = applyShadow ? this.shadowOffsetX() : 0;
		        const shadowOffsetY = applyShadow ? this.shadowOffsetY() : 0;
		        const preWidth = fillAndStrokeWidth + Math.abs(shadowOffsetX);
		        const preHeight = fillAndStrokeHeight + Math.abs(shadowOffsetY);
		        const blurRadius = (applyShadow && this.shadowBlur()) || 0;
		        const width = preWidth + blurRadius * 2;
		        const height = preHeight + blurRadius * 2;
		        const rect = {
		            width: width,
		            height: height,
		            x: -(strokeWidth / 2 + blurRadius) +
		                Math.min(shadowOffsetX, 0) +
		                fillRect.x,
		            y: -(strokeWidth / 2 + blurRadius) +
		                Math.min(shadowOffsetY, 0) +
		                fillRect.y,
		        };
		        if (!skipTransform) {
		            return this._transformedRect(rect, relativeTo);
		        }
		        return rect;
		    }
		    drawScene(can, top, bufferCanvas) {
		        var layer = this.getLayer();
		        var canvas = can || layer.getCanvas(), context = canvas.getContext(), cachedCanvas = this._getCanvasCache(), drawFunc = this.getSceneFunc(), hasShadow = this.hasShadow(), stage, bufferContext;
		        var skipBuffer = canvas.isCache;
		        var cachingSelf = top === this;
		        if (!this.isVisible() && !cachingSelf) {
		            return this;
		        }
		        if (cachedCanvas) {
		            context.save();
		            var m = this.getAbsoluteTransform(top).getMatrix();
		            context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
		            this._drawCachedSceneCanvas(context);
		            context.restore();
		            return this;
		        }
		        if (!drawFunc) {
		            return this;
		        }
		        context.save();
		        if (this._useBufferCanvas() && !skipBuffer) {
		            stage = this.getStage();
		            const bc = bufferCanvas || stage.bufferCanvas;
		            bufferContext = bc.getContext();
		            bufferContext.clear();
		            bufferContext.save();
		            bufferContext._applyLineJoin(this);
		            var o = this.getAbsoluteTransform(top).getMatrix();
		            bufferContext.transform(o[0], o[1], o[2], o[3], o[4], o[5]);
		            drawFunc.call(this, bufferContext, this);
		            bufferContext.restore();
		            var ratio = bc.pixelRatio;
		            if (hasShadow) {
		                context._applyShadow(this);
		            }
		            context._applyOpacity(this);
		            context._applyGlobalCompositeOperation(this);
		            context.drawImage(bc._canvas, 0, 0, bc.width / ratio, bc.height / ratio);
		        }
		        else {
		            context._applyLineJoin(this);
		            if (!cachingSelf) {
		                var o = this.getAbsoluteTransform(top).getMatrix();
		                context.transform(o[0], o[1], o[2], o[3], o[4], o[5]);
		                context._applyOpacity(this);
		                context._applyGlobalCompositeOperation(this);
		            }
		            if (hasShadow) {
		                context._applyShadow(this);
		            }
		            drawFunc.call(this, context, this);
		        }
		        context.restore();
		        return this;
		    }
		    drawHit(can, top, skipDragCheck = false) {
		        if (!this.shouldDrawHit(top, skipDragCheck)) {
		            return this;
		        }
		        var layer = this.getLayer(), canvas = can || layer.hitCanvas, context = canvas && canvas.getContext(), drawFunc = this.hitFunc() || this.sceneFunc(), cachedCanvas = this._getCanvasCache(), cachedHitCanvas = cachedCanvas && cachedCanvas.hit;
		        if (!this.colorKey) {
		            Util_1.Util.warn('Looks like your canvas has a destroyed shape in it. Do not reuse shape after you destroyed it. If you want to reuse shape you should call remove() instead of destroy()');
		        }
		        if (cachedHitCanvas) {
		            context.save();
		            var m = this.getAbsoluteTransform(top).getMatrix();
		            context.transform(m[0], m[1], m[2], m[3], m[4], m[5]);
		            this._drawCachedHitCanvas(context);
		            context.restore();
		            return this;
		        }
		        if (!drawFunc) {
		            return this;
		        }
		        context.save();
		        context._applyLineJoin(this);
		        const selfCache = this === top;
		        if (!selfCache) {
		            var o = this.getAbsoluteTransform(top).getMatrix();
		            context.transform(o[0], o[1], o[2], o[3], o[4], o[5]);
		        }
		        drawFunc.call(this, context, this);
		        context.restore();
		        return this;
		    }
		    drawHitFromCache(alphaThreshold = 0) {
		        var cachedCanvas = this._getCanvasCache(), sceneCanvas = this._getCachedSceneCanvas(), hitCanvas = cachedCanvas.hit, hitContext = hitCanvas.getContext(), hitWidth = hitCanvas.getWidth(), hitHeight = hitCanvas.getHeight(), hitImageData, hitData, len, rgbColorKey, i, alpha;
		        hitContext.clear();
		        hitContext.drawImage(sceneCanvas._canvas, 0, 0, hitWidth, hitHeight);
		        try {
		            hitImageData = hitContext.getImageData(0, 0, hitWidth, hitHeight);
		            hitData = hitImageData.data;
		            len = hitData.length;
		            rgbColorKey = Util_1.Util._hexToRgb(this.colorKey);
		            for (i = 0; i < len; i += 4) {
		                alpha = hitData[i + 3];
		                if (alpha > alphaThreshold) {
		                    hitData[i] = rgbColorKey.r;
		                    hitData[i + 1] = rgbColorKey.g;
		                    hitData[i + 2] = rgbColorKey.b;
		                    hitData[i + 3] = 255;
		                }
		                else {
		                    hitData[i + 3] = 0;
		                }
		            }
		            hitContext.putImageData(hitImageData, 0, 0);
		        }
		        catch (e) {
		            Util_1.Util.error('Unable to draw hit graph from cached scene canvas. ' + e.message);
		        }
		        return this;
		    }
		    hasPointerCapture(pointerId) {
		        return PointerEvents.hasPointerCapture(pointerId, this);
		    }
		    setPointerCapture(pointerId) {
		        PointerEvents.setPointerCapture(pointerId, this);
		    }
		    releaseCapture(pointerId) {
		        PointerEvents.releaseCapture(pointerId, this);
		    }
		}
		exports.Shape = Shape;
		Shape.prototype._fillFunc = _fillFunc;
		Shape.prototype._strokeFunc = _strokeFunc;
		Shape.prototype._fillFuncHit = _fillFuncHit;
		Shape.prototype._strokeFuncHit = _strokeFuncHit;
		Shape.prototype._centroid = false;
		Shape.prototype.nodeType = 'Shape';
		(0, Global_2._registerNode)(Shape);
		Shape.prototype.eventListeners = {};
		Shape.prototype.on.call(Shape.prototype, 'shadowColorChange.konva shadowBlurChange.konva shadowOffsetChange.konva shadowOpacityChange.konva shadowEnabledChange.konva', _clearHasShadowCache);
		Shape.prototype.on.call(Shape.prototype, 'shadowColorChange.konva shadowOpacityChange.konva shadowEnabledChange.konva', _clearGetShadowRGBACache);
		Shape.prototype.on.call(Shape.prototype, 'fillPriorityChange.konva fillPatternImageChange.konva fillPatternRepeatChange.konva fillPatternScaleXChange.konva fillPatternScaleYChange.konva fillPatternOffsetXChange.konva fillPatternOffsetYChange.konva fillPatternXChange.konva fillPatternYChange.konva fillPatternRotationChange.konva', _clearFillPatternCache);
		Shape.prototype.on.call(Shape.prototype, 'fillPriorityChange.konva fillLinearGradientColorStopsChange.konva fillLinearGradientStartPointXChange.konva fillLinearGradientStartPointYChange.konva fillLinearGradientEndPointXChange.konva fillLinearGradientEndPointYChange.konva', _clearLinearGradientCache);
		Shape.prototype.on.call(Shape.prototype, 'fillPriorityChange.konva fillRadialGradientColorStopsChange.konva fillRadialGradientStartPointXChange.konva fillRadialGradientStartPointYChange.konva fillRadialGradientEndPointXChange.konva fillRadialGradientEndPointYChange.konva fillRadialGradientStartRadiusChange.konva fillRadialGradientEndRadiusChange.konva', _clearRadialGradientCache);
		Factory_1.Factory.addGetterSetter(Shape, 'stroke', undefined, (0, Validators_1.getStringOrGradientValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'strokeWidth', 2, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'fillAfterStrokeEnabled', false);
		Factory_1.Factory.addGetterSetter(Shape, 'hitStrokeWidth', 'auto', (0, Validators_1.getNumberOrAutoValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'strokeHitEnabled', true, (0, Validators_1.getBooleanValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'perfectDrawEnabled', true, (0, Validators_1.getBooleanValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'shadowForStrokeEnabled', true, (0, Validators_1.getBooleanValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'lineJoin');
		Factory_1.Factory.addGetterSetter(Shape, 'lineCap');
		Factory_1.Factory.addGetterSetter(Shape, 'sceneFunc');
		Factory_1.Factory.addGetterSetter(Shape, 'hitFunc');
		Factory_1.Factory.addGetterSetter(Shape, 'dash');
		Factory_1.Factory.addGetterSetter(Shape, 'dashOffset', 0, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'shadowColor', undefined, (0, Validators_1.getStringValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'shadowBlur', 0, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'shadowOpacity', 1, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addComponentsGetterSetter(Shape, 'shadowOffset', ['x', 'y']);
		Factory_1.Factory.addGetterSetter(Shape, 'shadowOffsetX', 0, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'shadowOffsetY', 0, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'fillPatternImage');
		Factory_1.Factory.addGetterSetter(Shape, 'fill', undefined, (0, Validators_1.getStringOrGradientValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'fillPatternX', 0, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'fillPatternY', 0, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'fillLinearGradientColorStops');
		Factory_1.Factory.addGetterSetter(Shape, 'strokeLinearGradientColorStops');
		Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientStartRadius', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientEndRadius', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientColorStops');
		Factory_1.Factory.addGetterSetter(Shape, 'fillPatternRepeat', 'repeat');
		Factory_1.Factory.addGetterSetter(Shape, 'fillEnabled', true);
		Factory_1.Factory.addGetterSetter(Shape, 'strokeEnabled', true);
		Factory_1.Factory.addGetterSetter(Shape, 'shadowEnabled', true);
		Factory_1.Factory.addGetterSetter(Shape, 'dashEnabled', true);
		Factory_1.Factory.addGetterSetter(Shape, 'strokeScaleEnabled', true);
		Factory_1.Factory.addGetterSetter(Shape, 'fillPriority', 'color');
		Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillPatternOffset', ['x', 'y']);
		Factory_1.Factory.addGetterSetter(Shape, 'fillPatternOffsetX', 0, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'fillPatternOffsetY', 0, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillPatternScale', ['x', 'y']);
		Factory_1.Factory.addGetterSetter(Shape, 'fillPatternScaleX', 1, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addGetterSetter(Shape, 'fillPatternScaleY', 1, (0, Validators_1.getNumberValidator)());
		Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillLinearGradientStartPoint', [
		    'x',
		    'y',
		]);
		Factory_1.Factory.addComponentsGetterSetter(Shape, 'strokeLinearGradientStartPoint', [
		    'x',
		    'y',
		]);
		Factory_1.Factory.addGetterSetter(Shape, 'fillLinearGradientStartPointX', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'strokeLinearGradientStartPointX', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'fillLinearGradientStartPointY', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'strokeLinearGradientStartPointY', 0);
		Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillLinearGradientEndPoint', [
		    'x',
		    'y',
		]);
		Factory_1.Factory.addComponentsGetterSetter(Shape, 'strokeLinearGradientEndPoint', [
		    'x',
		    'y',
		]);
		Factory_1.Factory.addGetterSetter(Shape, 'fillLinearGradientEndPointX', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'strokeLinearGradientEndPointX', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'fillLinearGradientEndPointY', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'strokeLinearGradientEndPointY', 0);
		Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillRadialGradientStartPoint', [
		    'x',
		    'y',
		]);
		Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientStartPointX', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientStartPointY', 0);
		Factory_1.Factory.addComponentsGetterSetter(Shape, 'fillRadialGradientEndPoint', [
		    'x',
		    'y',
		]);
		Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientEndPointX', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'fillRadialGradientEndPointY', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'fillPatternRotation', 0);
		Factory_1.Factory.addGetterSetter(Shape, 'fillRule', undefined, (0, Validators_1.getStringValidator)());
		Factory_1.Factory.backCompat(Shape, {
		    dashArray: 'dash',
		    getDashArray: 'getDash',
		    setDashArray: 'getDash',
		    drawFunc: 'sceneFunc',
		    getDrawFunc: 'getSceneFunc',
		    setDrawFunc: 'setSceneFunc',
		    drawHitFunc: 'hitFunc',
		    getDrawHitFunc: 'getHitFunc',
		    setDrawHitFunc: 'setHitFunc',
		}); 
	} (Shape));
	return Shape;
}

var hasRequiredLayer;

function requireLayer () {
	if (hasRequiredLayer) return Layer$1;
	hasRequiredLayer = 1;
	Object.defineProperty(Layer$1, "__esModule", { value: true });
	Layer$1.Layer = void 0;
	const Util_1 = requireUtil();
	const Container_1 = requireContainer();
	const Node_1 = requireNode();
	const Factory_1 = requireFactory();
	const Canvas_1 = requireCanvas();
	const Validators_1 = requireValidators();
	const Shape_1 = requireShape();
	const Global_1 = requireGlobal();
	var HASH = '#', BEFORE_DRAW = 'beforeDraw', DRAW = 'draw', INTERSECTION_OFFSETS = [
	    { x: 0, y: 0 },
	    { x: -1, y: -1 },
	    { x: 1, y: -1 },
	    { x: 1, y: 1 },
	    { x: -1, y: 1 },
	], INTERSECTION_OFFSETS_LEN = INTERSECTION_OFFSETS.length;
	class Layer extends Container_1.Container {
	    constructor(config) {
	        super(config);
	        this.canvas = new Canvas_1.SceneCanvas();
	        this.hitCanvas = new Canvas_1.HitCanvas({
	            pixelRatio: 1,
	        });
	        this._waitingForDraw = false;
	        this.on('visibleChange.konva', this._checkVisibility);
	        this._checkVisibility();
	        this.on('imageSmoothingEnabledChange.konva', this._setSmoothEnabled);
	        this._setSmoothEnabled();
	    }
	    createPNGStream() {
	        const c = this.canvas._canvas;
	        return c.createPNGStream();
	    }
	    getCanvas() {
	        return this.canvas;
	    }
	    getNativeCanvasElement() {
	        return this.canvas._canvas;
	    }
	    getHitCanvas() {
	        return this.hitCanvas;
	    }
	    getContext() {
	        return this.getCanvas().getContext();
	    }
	    clear(bounds) {
	        this.getContext().clear(bounds);
	        this.getHitCanvas().getContext().clear(bounds);
	        return this;
	    }
	    setZIndex(index) {
	        super.setZIndex(index);
	        var stage = this.getStage();
	        if (stage && stage.content) {
	            stage.content.removeChild(this.getNativeCanvasElement());
	            if (index < stage.children.length - 1) {
	                stage.content.insertBefore(this.getNativeCanvasElement(), stage.children[index + 1].getCanvas()._canvas);
	            }
	            else {
	                stage.content.appendChild(this.getNativeCanvasElement());
	            }
	        }
	        return this;
	    }
	    moveToTop() {
	        Node_1.Node.prototype.moveToTop.call(this);
	        var stage = this.getStage();
	        if (stage && stage.content) {
	            stage.content.removeChild(this.getNativeCanvasElement());
	            stage.content.appendChild(this.getNativeCanvasElement());
	        }
	        return true;
	    }
	    moveUp() {
	        var moved = Node_1.Node.prototype.moveUp.call(this);
	        if (!moved) {
	            return false;
	        }
	        var stage = this.getStage();
	        if (!stage || !stage.content) {
	            return false;
	        }
	        stage.content.removeChild(this.getNativeCanvasElement());
	        if (this.index < stage.children.length - 1) {
	            stage.content.insertBefore(this.getNativeCanvasElement(), stage.children[this.index + 1].getCanvas()._canvas);
	        }
	        else {
	            stage.content.appendChild(this.getNativeCanvasElement());
	        }
	        return true;
	    }
	    moveDown() {
	        if (Node_1.Node.prototype.moveDown.call(this)) {
	            var stage = this.getStage();
	            if (stage) {
	                var children = stage.children;
	                if (stage.content) {
	                    stage.content.removeChild(this.getNativeCanvasElement());
	                    stage.content.insertBefore(this.getNativeCanvasElement(), children[this.index + 1].getCanvas()._canvas);
	                }
	            }
	            return true;
	        }
	        return false;
	    }
	    moveToBottom() {
	        if (Node_1.Node.prototype.moveToBottom.call(this)) {
	            var stage = this.getStage();
	            if (stage) {
	                var children = stage.children;
	                if (stage.content) {
	                    stage.content.removeChild(this.getNativeCanvasElement());
	                    stage.content.insertBefore(this.getNativeCanvasElement(), children[1].getCanvas()._canvas);
	                }
	            }
	            return true;
	        }
	        return false;
	    }
	    getLayer() {
	        return this;
	    }
	    remove() {
	        var _canvas = this.getNativeCanvasElement();
	        Node_1.Node.prototype.remove.call(this);
	        if (_canvas && _canvas.parentNode && Util_1.Util._isInDocument(_canvas)) {
	            _canvas.parentNode.removeChild(_canvas);
	        }
	        return this;
	    }
	    getStage() {
	        return this.parent;
	    }
	    setSize({ width, height }) {
	        this.canvas.setSize(width, height);
	        this.hitCanvas.setSize(width, height);
	        this._setSmoothEnabled();
	        return this;
	    }
	    _validateAdd(child) {
	        var type = child.getType();
	        if (type !== 'Group' && type !== 'Shape') {
	            Util_1.Util.throw('You may only add groups and shapes to a layer.');
	        }
	    }
	    _toKonvaCanvas(config) {
	        config = config || {};
	        config.width = config.width || this.getWidth();
	        config.height = config.height || this.getHeight();
	        config.x = config.x !== undefined ? config.x : this.x();
	        config.y = config.y !== undefined ? config.y : this.y();
	        return Node_1.Node.prototype._toKonvaCanvas.call(this, config);
	    }
	    _checkVisibility() {
	        const visible = this.visible();
	        if (visible) {
	            this.canvas._canvas.style.display = 'block';
	        }
	        else {
	            this.canvas._canvas.style.display = 'none';
	        }
	    }
	    _setSmoothEnabled() {
	        this.getContext()._context.imageSmoothingEnabled =
	            this.imageSmoothingEnabled();
	    }
	    getWidth() {
	        if (this.parent) {
	            return this.parent.width();
	        }
	    }
	    setWidth() {
	        Util_1.Util.warn('Can not change width of layer. Use "stage.width(value)" function instead.');
	    }
	    getHeight() {
	        if (this.parent) {
	            return this.parent.height();
	        }
	    }
	    setHeight() {
	        Util_1.Util.warn('Can not change height of layer. Use "stage.height(value)" function instead.');
	    }
	    batchDraw() {
	        if (!this._waitingForDraw) {
	            this._waitingForDraw = true;
	            Util_1.Util.requestAnimFrame(() => {
	                this.draw();
	                this._waitingForDraw = false;
	            });
	        }
	        return this;
	    }
	    getIntersection(pos) {
	        if (!this.isListening() || !this.isVisible()) {
	            return null;
	        }
	        var spiralSearchDistance = 1;
	        var continueSearch = false;
	        while (true) {
	            for (let i = 0; i < INTERSECTION_OFFSETS_LEN; i++) {
	                const intersectionOffset = INTERSECTION_OFFSETS[i];
	                const obj = this._getIntersection({
	                    x: pos.x + intersectionOffset.x * spiralSearchDistance,
	                    y: pos.y + intersectionOffset.y * spiralSearchDistance,
	                });
	                const shape = obj.shape;
	                if (shape) {
	                    return shape;
	                }
	                continueSearch = !!obj.antialiased;
	                if (!obj.antialiased) {
	                    break;
	                }
	            }
	            if (continueSearch) {
	                spiralSearchDistance += 1;
	            }
	            else {
	                return null;
	            }
	        }
	    }
	    _getIntersection(pos) {
	        const ratio = this.hitCanvas.pixelRatio;
	        const p = this.hitCanvas.context.getImageData(Math.round(pos.x * ratio), Math.round(pos.y * ratio), 1, 1).data;
	        const p3 = p[3];
	        if (p3 === 255) {
	            const colorKey = Util_1.Util._rgbToHex(p[0], p[1], p[2]);
	            const shape = Shape_1.shapes[HASH + colorKey];
	            if (shape) {
	                return {
	                    shape: shape,
	                };
	            }
	            return {
	                antialiased: true,
	            };
	        }
	        else if (p3 > 0) {
	            return {
	                antialiased: true,
	            };
	        }
	        return {};
	    }
	    drawScene(can, top) {
	        var layer = this.getLayer(), canvas = can || (layer && layer.getCanvas());
	        this._fire(BEFORE_DRAW, {
	            node: this,
	        });
	        if (this.clearBeforeDraw()) {
	            canvas.getContext().clear();
	        }
	        Container_1.Container.prototype.drawScene.call(this, canvas, top);
	        this._fire(DRAW, {
	            node: this,
	        });
	        return this;
	    }
	    drawHit(can, top) {
	        var layer = this.getLayer(), canvas = can || (layer && layer.hitCanvas);
	        if (layer && layer.clearBeforeDraw()) {
	            layer.getHitCanvas().getContext().clear();
	        }
	        Container_1.Container.prototype.drawHit.call(this, canvas, top);
	        return this;
	    }
	    enableHitGraph() {
	        this.hitGraphEnabled(true);
	        return this;
	    }
	    disableHitGraph() {
	        this.hitGraphEnabled(false);
	        return this;
	    }
	    setHitGraphEnabled(val) {
	        Util_1.Util.warn('hitGraphEnabled method is deprecated. Please use layer.listening() instead.');
	        this.listening(val);
	    }
	    getHitGraphEnabled(val) {
	        Util_1.Util.warn('hitGraphEnabled method is deprecated. Please use layer.listening() instead.');
	        return this.listening();
	    }
	    toggleHitCanvas() {
	        if (!this.parent || !this.parent['content']) {
	            return;
	        }
	        var parent = this.parent;
	        var added = !!this.hitCanvas._canvas.parentNode;
	        if (added) {
	            parent.content.removeChild(this.hitCanvas._canvas);
	        }
	        else {
	            parent.content.appendChild(this.hitCanvas._canvas);
	        }
	    }
	    destroy() {
	        Util_1.Util.releaseCanvas(this.getNativeCanvasElement(), this.getHitCanvas()._canvas);
	        return super.destroy();
	    }
	}
	Layer$1.Layer = Layer;
	Layer.prototype.nodeType = 'Layer';
	(0, Global_1._registerNode)(Layer);
	Factory_1.Factory.addGetterSetter(Layer, 'imageSmoothingEnabled', true);
	Factory_1.Factory.addGetterSetter(Layer, 'clearBeforeDraw', true);
	Factory_1.Factory.addGetterSetter(Layer, 'hitGraphEnabled', true, (0, Validators_1.getBooleanValidator)());
	return Layer$1;
}

var FastLayer = {};

var hasRequiredFastLayer;

function requireFastLayer () {
	if (hasRequiredFastLayer) return FastLayer;
	hasRequiredFastLayer = 1;
	Object.defineProperty(FastLayer, "__esModule", { value: true });
	FastLayer.FastLayer = void 0;
	const Util_1 = requireUtil();
	const Layer_1 = requireLayer();
	const Global_1 = requireGlobal();
	let FastLayer$1 = class FastLayer extends Layer_1.Layer {
	    constructor(attrs) {
	        super(attrs);
	        this.listening(false);
	        Util_1.Util.warn('Konva.Fast layer is deprecated. Please use "new Konva.Layer({ listening: false })" instead.');
	    }
	};
	FastLayer.FastLayer = FastLayer$1;
	FastLayer$1.prototype.nodeType = 'FastLayer';
	(0, Global_1._registerNode)(FastLayer$1);
	return FastLayer;
}

var Group$1 = {};

var hasRequiredGroup;

function requireGroup () {
	if (hasRequiredGroup) return Group$1;
	hasRequiredGroup = 1;
	Object.defineProperty(Group$1, "__esModule", { value: true });
	Group$1.Group = void 0;
	const Util_1 = requireUtil();
	const Container_1 = requireContainer();
	const Global_1 = requireGlobal();
	class Group extends Container_1.Container {
	    _validateAdd(child) {
	        var type = child.getType();
	        if (type !== 'Group' && type !== 'Shape') {
	            Util_1.Util.throw('You may only add groups and shapes to groups.');
	        }
	    }
	}
	Group$1.Group = Group;
	Group.prototype.nodeType = 'Group';
	(0, Global_1._registerNode)(Group);
	return Group$1;
}

var Animation = {};

var hasRequiredAnimation;

function requireAnimation () {
	if (hasRequiredAnimation) return Animation;
	hasRequiredAnimation = 1;
	Object.defineProperty(Animation, "__esModule", { value: true });
	Animation.Animation = void 0;
	const Global_1 = requireGlobal();
	const Util_1 = requireUtil();
	const now = (function () {
	    if (Global_1.glob.performance && Global_1.glob.performance.now) {
	        return function () {
	            return Global_1.glob.performance.now();
	        };
	    }
	    return function () {
	        return new Date().getTime();
	    };
	})();
	let Animation$1 = class Animation {
	    constructor(func, layers) {
	        this.id = Animation.animIdCounter++;
	        this.frame = {
	            time: 0,
	            timeDiff: 0,
	            lastTime: now(),
	            frameRate: 0,
	        };
	        this.func = func;
	        this.setLayers(layers);
	    }
	    setLayers(layers) {
	        let lays = [];
	        if (layers) {
	            lays = Array.isArray(layers) ? layers : [layers];
	        }
	        this.layers = lays;
	        return this;
	    }
	    getLayers() {
	        return this.layers;
	    }
	    addLayer(layer) {
	        const layers = this.layers;
	        const len = layers.length;
	        for (let n = 0; n < len; n++) {
	            if (layers[n]._id === layer._id) {
	                return false;
	            }
	        }
	        this.layers.push(layer);
	        return true;
	    }
	    isRunning() {
	        const a = Animation;
	        const animations = a.animations;
	        const len = animations.length;
	        for (let n = 0; n < len; n++) {
	            if (animations[n].id === this.id) {
	                return true;
	            }
	        }
	        return false;
	    }
	    start() {
	        this.stop();
	        this.frame.timeDiff = 0;
	        this.frame.lastTime = now();
	        Animation._addAnimation(this);
	        return this;
	    }
	    stop() {
	        Animation._removeAnimation(this);
	        return this;
	    }
	    _updateFrameObject(time) {
	        this.frame.timeDiff = time - this.frame.lastTime;
	        this.frame.lastTime = time;
	        this.frame.time += this.frame.timeDiff;
	        this.frame.frameRate = 1000 / this.frame.timeDiff;
	    }
	    static _addAnimation(anim) {
	        this.animations.push(anim);
	        this._handleAnimation();
	    }
	    static _removeAnimation(anim) {
	        const id = anim.id;
	        const animations = this.animations;
	        const len = animations.length;
	        for (let n = 0; n < len; n++) {
	            if (animations[n].id === id) {
	                this.animations.splice(n, 1);
	                break;
	            }
	        }
	    }
	    static _runFrames() {
	        const layerHash = {};
	        const animations = this.animations;
	        for (let n = 0; n < animations.length; n++) {
	            const anim = animations[n];
	            const layers = anim.layers;
	            const func = anim.func;
	            anim._updateFrameObject(now());
	            const layersLen = layers.length;
	            let needRedraw;
	            if (func) {
	                needRedraw = func.call(anim, anim.frame) !== false;
	            }
	            else {
	                needRedraw = true;
	            }
	            if (!needRedraw) {
	                continue;
	            }
	            for (let i = 0; i < layersLen; i++) {
	                const layer = layers[i];
	                if (layer._id !== undefined) {
	                    layerHash[layer._id] = layer;
	                }
	            }
	        }
	        for (let key in layerHash) {
	            if (!layerHash.hasOwnProperty(key)) {
	                continue;
	            }
	            layerHash[key].batchDraw();
	        }
	    }
	    static _animationLoop() {
	        const Anim = Animation;
	        if (Anim.animations.length) {
	            Anim._runFrames();
	            Util_1.Util.requestAnimFrame(Anim._animationLoop);
	        }
	        else {
	            Anim.animRunning = false;
	        }
	    }
	    static _handleAnimation() {
	        if (!this.animRunning) {
	            this.animRunning = true;
	            Util_1.Util.requestAnimFrame(this._animationLoop);
	        }
	    }
	};
	Animation.Animation = Animation$1;
	Animation$1.animations = [];
	Animation$1.animIdCounter = 0;
	Animation$1.animRunning = false;
	return Animation;
}

var Tween = {};

var hasRequiredTween;

function requireTween () {
	if (hasRequiredTween) return Tween;
	hasRequiredTween = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Easings = exports.Tween = void 0;
		const Util_1 = requireUtil();
		const Animation_1 = requireAnimation();
		const Node_1 = requireNode();
		const Global_1 = requireGlobal();
		var blacklist = {
		    node: 1,
		    duration: 1,
		    easing: 1,
		    onFinish: 1,
		    yoyo: 1,
		}, PAUSED = 1, PLAYING = 2, REVERSING = 3, idCounter = 0, colorAttrs = ['fill', 'stroke', 'shadowColor'];
		class TweenEngine {
		    constructor(prop, propFunc, func, begin, finish, duration, yoyo) {
		        this.prop = prop;
		        this.propFunc = propFunc;
		        this.begin = begin;
		        this._pos = begin;
		        this.duration = duration;
		        this._change = 0;
		        this.prevPos = 0;
		        this.yoyo = yoyo;
		        this._time = 0;
		        this._position = 0;
		        this._startTime = 0;
		        this._finish = 0;
		        this.func = func;
		        this._change = finish - this.begin;
		        this.pause();
		    }
		    fire(str) {
		        var handler = this[str];
		        if (handler) {
		            handler();
		        }
		    }
		    setTime(t) {
		        if (t > this.duration) {
		            if (this.yoyo) {
		                this._time = this.duration;
		                this.reverse();
		            }
		            else {
		                this.finish();
		            }
		        }
		        else if (t < 0) {
		            if (this.yoyo) {
		                this._time = 0;
		                this.play();
		            }
		            else {
		                this.reset();
		            }
		        }
		        else {
		            this._time = t;
		            this.update();
		        }
		    }
		    getTime() {
		        return this._time;
		    }
		    setPosition(p) {
		        this.prevPos = this._pos;
		        this.propFunc(p);
		        this._pos = p;
		    }
		    getPosition(t) {
		        if (t === undefined) {
		            t = this._time;
		        }
		        return this.func(t, this.begin, this._change, this.duration);
		    }
		    play() {
		        this.state = PLAYING;
		        this._startTime = this.getTimer() - this._time;
		        this.onEnterFrame();
		        this.fire('onPlay');
		    }
		    reverse() {
		        this.state = REVERSING;
		        this._time = this.duration - this._time;
		        this._startTime = this.getTimer() - this._time;
		        this.onEnterFrame();
		        this.fire('onReverse');
		    }
		    seek(t) {
		        this.pause();
		        this._time = t;
		        this.update();
		        this.fire('onSeek');
		    }
		    reset() {
		        this.pause();
		        this._time = 0;
		        this.update();
		        this.fire('onReset');
		    }
		    finish() {
		        this.pause();
		        this._time = this.duration;
		        this.update();
		        this.fire('onFinish');
		    }
		    update() {
		        this.setPosition(this.getPosition(this._time));
		        this.fire('onUpdate');
		    }
		    onEnterFrame() {
		        var t = this.getTimer() - this._startTime;
		        if (this.state === PLAYING) {
		            this.setTime(t);
		        }
		        else if (this.state === REVERSING) {
		            this.setTime(this.duration - t);
		        }
		    }
		    pause() {
		        this.state = PAUSED;
		        this.fire('onPause');
		    }
		    getTimer() {
		        return new Date().getTime();
		    }
		}
		class Tween {
		    constructor(config) {
		        var that = this, node = config.node, nodeId = node._id, duration, easing = config.easing || exports.Easings.Linear, yoyo = !!config.yoyo, key;
		        if (typeof config.duration === 'undefined') {
		            duration = 0.3;
		        }
		        else if (config.duration === 0) {
		            duration = 0.001;
		        }
		        else {
		            duration = config.duration;
		        }
		        this.node = node;
		        this._id = idCounter++;
		        var layers = node.getLayer() ||
		            (node instanceof Global_1.Konva['Stage'] ? node.getLayers() : null);
		        if (!layers) {
		            Util_1.Util.error('Tween constructor have `node` that is not in a layer. Please add node into layer first.');
		        }
		        this.anim = new Animation_1.Animation(function () {
		            that.tween.onEnterFrame();
		        }, layers);
		        this.tween = new TweenEngine(key, function (i) {
		            that._tweenFunc(i);
		        }, easing, 0, 1, duration * 1000, yoyo);
		        this._addListeners();
		        if (!Tween.attrs[nodeId]) {
		            Tween.attrs[nodeId] = {};
		        }
		        if (!Tween.attrs[nodeId][this._id]) {
		            Tween.attrs[nodeId][this._id] = {};
		        }
		        if (!Tween.tweens[nodeId]) {
		            Tween.tweens[nodeId] = {};
		        }
		        for (key in config) {
		            if (blacklist[key] === undefined) {
		                this._addAttr(key, config[key]);
		            }
		        }
		        this.reset();
		        this.onFinish = config.onFinish;
		        this.onReset = config.onReset;
		        this.onUpdate = config.onUpdate;
		    }
		    _addAttr(key, end) {
		        var node = this.node, nodeId = node._id, start, diff, tweenId, n, len, trueEnd, trueStart, endRGBA;
		        tweenId = Tween.tweens[nodeId][key];
		        if (tweenId) {
		            delete Tween.attrs[nodeId][tweenId][key];
		        }
		        start = node.getAttr(key);
		        if (Util_1.Util._isArray(end)) {
		            diff = [];
		            len = Math.max(end.length, start.length);
		            if (key === 'points' && end.length !== start.length) {
		                if (end.length > start.length) {
		                    trueStart = start;
		                    start = Util_1.Util._prepareArrayForTween(start, end, node.closed());
		                }
		                else {
		                    trueEnd = end;
		                    end = Util_1.Util._prepareArrayForTween(end, start, node.closed());
		                }
		            }
		            if (key.indexOf('fill') === 0) {
		                for (n = 0; n < len; n++) {
		                    if (n % 2 === 0) {
		                        diff.push(end[n] - start[n]);
		                    }
		                    else {
		                        var startRGBA = Util_1.Util.colorToRGBA(start[n]);
		                        endRGBA = Util_1.Util.colorToRGBA(end[n]);
		                        start[n] = startRGBA;
		                        diff.push({
		                            r: endRGBA.r - startRGBA.r,
		                            g: endRGBA.g - startRGBA.g,
		                            b: endRGBA.b - startRGBA.b,
		                            a: endRGBA.a - startRGBA.a,
		                        });
		                    }
		                }
		            }
		            else {
		                for (n = 0; n < len; n++) {
		                    diff.push(end[n] - start[n]);
		                }
		            }
		        }
		        else if (colorAttrs.indexOf(key) !== -1) {
		            start = Util_1.Util.colorToRGBA(start);
		            endRGBA = Util_1.Util.colorToRGBA(end);
		            diff = {
		                r: endRGBA.r - start.r,
		                g: endRGBA.g - start.g,
		                b: endRGBA.b - start.b,
		                a: endRGBA.a - start.a,
		            };
		        }
		        else {
		            diff = end - start;
		        }
		        Tween.attrs[nodeId][this._id][key] = {
		            start: start,
		            diff: diff,
		            end: end,
		            trueEnd: trueEnd,
		            trueStart: trueStart,
		        };
		        Tween.tweens[nodeId][key] = this._id;
		    }
		    _tweenFunc(i) {
		        var node = this.node, attrs = Tween.attrs[node._id][this._id], key, attr, start, diff, newVal, n, len, end;
		        for (key in attrs) {
		            attr = attrs[key];
		            start = attr.start;
		            diff = attr.diff;
		            end = attr.end;
		            if (Util_1.Util._isArray(start)) {
		                newVal = [];
		                len = Math.max(start.length, end.length);
		                if (key.indexOf('fill') === 0) {
		                    for (n = 0; n < len; n++) {
		                        if (n % 2 === 0) {
		                            newVal.push((start[n] || 0) + diff[n] * i);
		                        }
		                        else {
		                            newVal.push('rgba(' +
		                                Math.round(start[n].r + diff[n].r * i) +
		                                ',' +
		                                Math.round(start[n].g + diff[n].g * i) +
		                                ',' +
		                                Math.round(start[n].b + diff[n].b * i) +
		                                ',' +
		                                (start[n].a + diff[n].a * i) +
		                                ')');
		                        }
		                    }
		                }
		                else {
		                    for (n = 0; n < len; n++) {
		                        newVal.push((start[n] || 0) + diff[n] * i);
		                    }
		                }
		            }
		            else if (colorAttrs.indexOf(key) !== -1) {
		                newVal =
		                    'rgba(' +
		                        Math.round(start.r + diff.r * i) +
		                        ',' +
		                        Math.round(start.g + diff.g * i) +
		                        ',' +
		                        Math.round(start.b + diff.b * i) +
		                        ',' +
		                        (start.a + diff.a * i) +
		                        ')';
		            }
		            else {
		                newVal = start + diff * i;
		            }
		            node.setAttr(key, newVal);
		        }
		    }
		    _addListeners() {
		        this.tween.onPlay = () => {
		            this.anim.start();
		        };
		        this.tween.onReverse = () => {
		            this.anim.start();
		        };
		        this.tween.onPause = () => {
		            this.anim.stop();
		        };
		        this.tween.onFinish = () => {
		            var node = this.node;
		            var attrs = Tween.attrs[node._id][this._id];
		            if (attrs.points && attrs.points.trueEnd) {
		                node.setAttr('points', attrs.points.trueEnd);
		            }
		            if (this.onFinish) {
		                this.onFinish.call(this);
		            }
		        };
		        this.tween.onReset = () => {
		            var node = this.node;
		            var attrs = Tween.attrs[node._id][this._id];
		            if (attrs.points && attrs.points.trueStart) {
		                node.points(attrs.points.trueStart);
		            }
		            if (this.onReset) {
		                this.onReset();
		            }
		        };
		        this.tween.onUpdate = () => {
		            if (this.onUpdate) {
		                this.onUpdate.call(this);
		            }
		        };
		    }
		    play() {
		        this.tween.play();
		        return this;
		    }
		    reverse() {
		        this.tween.reverse();
		        return this;
		    }
		    reset() {
		        this.tween.reset();
		        return this;
		    }
		    seek(t) {
		        this.tween.seek(t * 1000);
		        return this;
		    }
		    pause() {
		        this.tween.pause();
		        return this;
		    }
		    finish() {
		        this.tween.finish();
		        return this;
		    }
		    destroy() {
		        var nodeId = this.node._id, thisId = this._id, attrs = Tween.tweens[nodeId], key;
		        this.pause();
		        for (key in attrs) {
		            delete Tween.tweens[nodeId][key];
		        }
		        delete Tween.attrs[nodeId][thisId];
		    }
		}
		exports.Tween = Tween;
		Tween.attrs = {};
		Tween.tweens = {};
		Node_1.Node.prototype.to = function (params) {
		    var onFinish = params.onFinish;
		    params.node = this;
		    params.onFinish = function () {
		        this.destroy();
		        if (onFinish) {
		            onFinish();
		        }
		    };
		    var tween = new Tween(params);
		    tween.play();
		};
		exports.Easings = {
		    BackEaseIn(t, b, c, d) {
		        var s = 1.70158;
		        return c * (t /= d) * t * ((s + 1) * t - s) + b;
		    },
		    BackEaseOut(t, b, c, d) {
		        var s = 1.70158;
		        return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;
		    },
		    BackEaseInOut(t, b, c, d) {
		        var s = 1.70158;
		        if ((t /= d / 2) < 1) {
		            return (c / 2) * (t * t * (((s *= 1.525) + 1) * t - s)) + b;
		        }
		        return (c / 2) * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2) + b;
		    },
		    ElasticEaseIn(t, b, c, d, a, p) {
		        var s = 0;
		        if (t === 0) {
		            return b;
		        }
		        if ((t /= d) === 1) {
		            return b + c;
		        }
		        if (!p) {
		            p = d * 0.3;
		        }
		        if (!a || a < Math.abs(c)) {
		            a = c;
		            s = p / 4;
		        }
		        else {
		            s = (p / (2 * Math.PI)) * Math.asin(c / a);
		        }
		        return (-(a *
		            Math.pow(2, 10 * (t -= 1)) *
		            Math.sin(((t * d - s) * (2 * Math.PI)) / p)) + b);
		    },
		    ElasticEaseOut(t, b, c, d, a, p) {
		        var s = 0;
		        if (t === 0) {
		            return b;
		        }
		        if ((t /= d) === 1) {
		            return b + c;
		        }
		        if (!p) {
		            p = d * 0.3;
		        }
		        if (!a || a < Math.abs(c)) {
		            a = c;
		            s = p / 4;
		        }
		        else {
		            s = (p / (2 * Math.PI)) * Math.asin(c / a);
		        }
		        return (a * Math.pow(2, -10 * t) * Math.sin(((t * d - s) * (2 * Math.PI)) / p) +
		            c +
		            b);
		    },
		    ElasticEaseInOut(t, b, c, d, a, p) {
		        var s = 0;
		        if (t === 0) {
		            return b;
		        }
		        if ((t /= d / 2) === 2) {
		            return b + c;
		        }
		        if (!p) {
		            p = d * (0.3 * 1.5);
		        }
		        if (!a || a < Math.abs(c)) {
		            a = c;
		            s = p / 4;
		        }
		        else {
		            s = (p / (2 * Math.PI)) * Math.asin(c / a);
		        }
		        if (t < 1) {
		            return (-0.5 *
		                (a *
		                    Math.pow(2, 10 * (t -= 1)) *
		                    Math.sin(((t * d - s) * (2 * Math.PI)) / p)) +
		                b);
		        }
		        return (a *
		            Math.pow(2, -10 * (t -= 1)) *
		            Math.sin(((t * d - s) * (2 * Math.PI)) / p) *
		            0.5 +
		            c +
		            b);
		    },
		    BounceEaseOut(t, b, c, d) {
		        if ((t /= d) < 1 / 2.75) {
		            return c * (7.5625 * t * t) + b;
		        }
		        else if (t < 2 / 2.75) {
		            return c * (7.5625 * (t -= 1.5 / 2.75) * t + 0.75) + b;
		        }
		        else if (t < 2.5 / 2.75) {
		            return c * (7.5625 * (t -= 2.25 / 2.75) * t + 0.9375) + b;
		        }
		        else {
		            return c * (7.5625 * (t -= 2.625 / 2.75) * t + 0.984375) + b;
		        }
		    },
		    BounceEaseIn(t, b, c, d) {
		        return c - exports.Easings.BounceEaseOut(d - t, 0, c, d) + b;
		    },
		    BounceEaseInOut(t, b, c, d) {
		        if (t < d / 2) {
		            return exports.Easings.BounceEaseIn(t * 2, 0, c, d) * 0.5 + b;
		        }
		        else {
		            return exports.Easings.BounceEaseOut(t * 2 - d, 0, c, d) * 0.5 + c * 0.5 + b;
		        }
		    },
		    EaseIn(t, b, c, d) {
		        return c * (t /= d) * t + b;
		    },
		    EaseOut(t, b, c, d) {
		        return -c * (t /= d) * (t - 2) + b;
		    },
		    EaseInOut(t, b, c, d) {
		        if ((t /= d / 2) < 1) {
		            return (c / 2) * t * t + b;
		        }
		        return (-c / 2) * (--t * (t - 2) - 1) + b;
		    },
		    StrongEaseIn(t, b, c, d) {
		        return c * (t /= d) * t * t * t * t + b;
		    },
		    StrongEaseOut(t, b, c, d) {
		        return c * ((t = t / d - 1) * t * t * t * t + 1) + b;
		    },
		    StrongEaseInOut(t, b, c, d) {
		        if ((t /= d / 2) < 1) {
		            return (c / 2) * t * t * t * t * t + b;
		        }
		        return (c / 2) * ((t -= 2) * t * t * t * t + 2) + b;
		    },
		    Linear(t, b, c, d) {
		        return (c * t) / d + b;
		    },
		}; 
	} (Tween));
	return Tween;
}

var hasRequired_CoreInternals;

function require_CoreInternals () {
	if (hasRequired_CoreInternals) return _CoreInternals;
	hasRequired_CoreInternals = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Konva = void 0;
		const Global_1 = requireGlobal();
		const Util_1 = requireUtil();
		const Node_1 = requireNode();
		const Container_1 = requireContainer();
		const Stage_1 = requireStage();
		const Layer_1 = requireLayer();
		const FastLayer_1 = requireFastLayer();
		const Group_1 = requireGroup();
		const DragAndDrop_1 = requireDragAndDrop();
		const Shape_1 = requireShape();
		const Animation_1 = requireAnimation();
		const Tween_1 = requireTween();
		const Context_1 = requireContext();
		const Canvas_1 = requireCanvas();
		exports.Konva = Util_1.Util._assign(Global_1.Konva, {
		    Util: Util_1.Util,
		    Transform: Util_1.Transform,
		    Node: Node_1.Node,
		    Container: Container_1.Container,
		    Stage: Stage_1.Stage,
		    stages: Stage_1.stages,
		    Layer: Layer_1.Layer,
		    FastLayer: FastLayer_1.FastLayer,
		    Group: Group_1.Group,
		    DD: DragAndDrop_1.DD,
		    Shape: Shape_1.Shape,
		    shapes: Shape_1.shapes,
		    Animation: Animation_1.Animation,
		    Tween: Tween_1.Tween,
		    Easings: Tween_1.Easings,
		    Context: Context_1.Context,
		    Canvas: Canvas_1.Canvas,
		});
		exports.default = exports.Konva; 
	} (_CoreInternals));
	return _CoreInternals;
}

var Arc = {};

var hasRequiredArc;

function requireArc () {
	if (hasRequiredArc) return Arc;
	hasRequiredArc = 1;
	Object.defineProperty(Arc, "__esModule", { value: true });
	Arc.Arc = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Global_1 = requireGlobal();
	const Validators_1 = requireValidators();
	const Global_2 = requireGlobal();
	let Arc$1 = class Arc extends Shape_1.Shape {
	    _sceneFunc(context) {
	        var angle = Global_1.Konva.getAngle(this.angle()), clockwise = this.clockwise();
	        context.beginPath();
	        context.arc(0, 0, this.outerRadius(), 0, angle, clockwise);
	        context.arc(0, 0, this.innerRadius(), angle, 0, !clockwise);
	        context.closePath();
	        context.fillStrokeShape(this);
	    }
	    getWidth() {
	        return this.outerRadius() * 2;
	    }
	    getHeight() {
	        return this.outerRadius() * 2;
	    }
	    setWidth(width) {
	        this.outerRadius(width / 2);
	    }
	    setHeight(height) {
	        this.outerRadius(height / 2);
	    }
	    getSelfRect() {
	        const innerRadius = this.innerRadius();
	        const outerRadius = this.outerRadius();
	        const clockwise = this.clockwise();
	        const angle = Global_1.Konva.getAngle(clockwise ? 360 - this.angle() : this.angle());
	        const boundLeftRatio = Math.cos(Math.min(angle, Math.PI));
	        const boundRightRatio = 1;
	        const boundTopRatio = Math.sin(Math.min(Math.max(Math.PI, angle), (3 * Math.PI) / 2));
	        const boundBottomRatio = Math.sin(Math.min(angle, Math.PI / 2));
	        const boundLeft = boundLeftRatio * (boundLeftRatio > 0 ? innerRadius : outerRadius);
	        const boundRight = boundRightRatio * (outerRadius );
	        const boundTop = boundTopRatio * (boundTopRatio > 0 ? innerRadius : outerRadius);
	        const boundBottom = boundBottomRatio * (boundBottomRatio > 0 ? outerRadius : innerRadius);
	        return {
	            x: boundLeft,
	            y: clockwise ? -1 * boundBottom : boundTop,
	            width: boundRight - boundLeft,
	            height: boundBottom - boundTop,
	        };
	    }
	};
	Arc.Arc = Arc$1;
	Arc$1.prototype._centroid = true;
	Arc$1.prototype.className = 'Arc';
	Arc$1.prototype._attrsAffectingSize = ['innerRadius', 'outerRadius'];
	(0, Global_2._registerNode)(Arc$1);
	Factory_1.Factory.addGetterSetter(Arc$1, 'innerRadius', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Arc$1, 'outerRadius', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Arc$1, 'angle', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Arc$1, 'clockwise', false, (0, Validators_1.getBooleanValidator)());
	return Arc;
}

var Arrow$4 = {};

var Line$3 = {};

var hasRequiredLine;

function requireLine () {
	if (hasRequiredLine) return Line$3;
	hasRequiredLine = 1;
	Object.defineProperty(Line$3, "__esModule", { value: true });
	Line$3.Line = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Validators_1 = requireValidators();
	const Global_1 = requireGlobal();
	function getControlPoints(x0, y0, x1, y1, x2, y2, t) {
	    var d01 = Math.sqrt(Math.pow(x1 - x0, 2) + Math.pow(y1 - y0, 2)), d12 = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)), fa = (t * d01) / (d01 + d12), fb = (t * d12) / (d01 + d12), p1x = x1 - fa * (x2 - x0), p1y = y1 - fa * (y2 - y0), p2x = x1 + fb * (x2 - x0), p2y = y1 + fb * (y2 - y0);
	    return [p1x, p1y, p2x, p2y];
	}
	function expandPoints(p, tension) {
	    var len = p.length, allPoints = [], n, cp;
	    for (n = 2; n < len - 2; n += 2) {
	        cp = getControlPoints(p[n - 2], p[n - 1], p[n], p[n + 1], p[n + 2], p[n + 3], tension);
	        if (isNaN(cp[0])) {
	            continue;
	        }
	        allPoints.push(cp[0]);
	        allPoints.push(cp[1]);
	        allPoints.push(p[n]);
	        allPoints.push(p[n + 1]);
	        allPoints.push(cp[2]);
	        allPoints.push(cp[3]);
	    }
	    return allPoints;
	}
	class Line extends Shape_1.Shape {
	    constructor(config) {
	        super(config);
	        this.on('pointsChange.konva tensionChange.konva closedChange.konva bezierChange.konva', function () {
	            this._clearCache('tensionPoints');
	        });
	    }
	    _sceneFunc(context) {
	        var points = this.points(), length = points.length, tension = this.tension(), closed = this.closed(), bezier = this.bezier(), tp, len, n;
	        if (!length) {
	            return;
	        }
	        context.beginPath();
	        context.moveTo(points[0], points[1]);
	        if (tension !== 0 && length > 4) {
	            tp = this.getTensionPoints();
	            len = tp.length;
	            n = closed ? 0 : 4;
	            if (!closed) {
	                context.quadraticCurveTo(tp[0], tp[1], tp[2], tp[3]);
	            }
	            while (n < len - 2) {
	                context.bezierCurveTo(tp[n++], tp[n++], tp[n++], tp[n++], tp[n++], tp[n++]);
	            }
	            if (!closed) {
	                context.quadraticCurveTo(tp[len - 2], tp[len - 1], points[length - 2], points[length - 1]);
	            }
	        }
	        else if (bezier) {
	            n = 2;
	            while (n < length) {
	                context.bezierCurveTo(points[n++], points[n++], points[n++], points[n++], points[n++], points[n++]);
	            }
	        }
	        else {
	            for (n = 2; n < length; n += 2) {
	                context.lineTo(points[n], points[n + 1]);
	            }
	        }
	        if (closed) {
	            context.closePath();
	            context.fillStrokeShape(this);
	        }
	        else {
	            context.strokeShape(this);
	        }
	    }
	    getTensionPoints() {
	        return this._getCache('tensionPoints', this._getTensionPoints);
	    }
	    _getTensionPoints() {
	        if (this.closed()) {
	            return this._getTensionPointsClosed();
	        }
	        else {
	            return expandPoints(this.points(), this.tension());
	        }
	    }
	    _getTensionPointsClosed() {
	        var p = this.points(), len = p.length, tension = this.tension(), firstControlPoints = getControlPoints(p[len - 2], p[len - 1], p[0], p[1], p[2], p[3], tension), lastControlPoints = getControlPoints(p[len - 4], p[len - 3], p[len - 2], p[len - 1], p[0], p[1], tension), middle = expandPoints(p, tension), tp = [firstControlPoints[2], firstControlPoints[3]]
	            .concat(middle)
	            .concat([
	            lastControlPoints[0],
	            lastControlPoints[1],
	            p[len - 2],
	            p[len - 1],
	            lastControlPoints[2],
	            lastControlPoints[3],
	            firstControlPoints[0],
	            firstControlPoints[1],
	            p[0],
	            p[1],
	        ]);
	        return tp;
	    }
	    getWidth() {
	        return this.getSelfRect().width;
	    }
	    getHeight() {
	        return this.getSelfRect().height;
	    }
	    getSelfRect() {
	        var points = this.points();
	        if (points.length < 4) {
	            return {
	                x: points[0] || 0,
	                y: points[1] || 0,
	                width: 0,
	                height: 0,
	            };
	        }
	        if (this.tension() !== 0) {
	            points = [
	                points[0],
	                points[1],
	                ...this._getTensionPoints(),
	                points[points.length - 2],
	                points[points.length - 1],
	            ];
	        }
	        else {
	            points = this.points();
	        }
	        var minX = points[0];
	        var maxX = points[0];
	        var minY = points[1];
	        var maxY = points[1];
	        var x, y;
	        for (var i = 0; i < points.length / 2; i++) {
	            x = points[i * 2];
	            y = points[i * 2 + 1];
	            minX = Math.min(minX, x);
	            maxX = Math.max(maxX, x);
	            minY = Math.min(minY, y);
	            maxY = Math.max(maxY, y);
	        }
	        return {
	            x: minX,
	            y: minY,
	            width: maxX - minX,
	            height: maxY - minY,
	        };
	    }
	}
	Line$3.Line = Line;
	Line.prototype.className = 'Line';
	Line.prototype._attrsAffectingSize = ['points', 'bezier', 'tension'];
	(0, Global_1._registerNode)(Line);
	Factory_1.Factory.addGetterSetter(Line, 'closed', false);
	Factory_1.Factory.addGetterSetter(Line, 'bezier', false);
	Factory_1.Factory.addGetterSetter(Line, 'tension', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Line, 'points', [], (0, Validators_1.getNumberArrayValidator)());
	return Line$3;
}

var Path = {};

var BezierFunctions = {};

var hasRequiredBezierFunctions;

function requireBezierFunctions () {
	if (hasRequiredBezierFunctions) return BezierFunctions;
	hasRequiredBezierFunctions = 1;
	(function (exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.t2length = exports.getQuadraticArcLength = exports.getCubicArcLength = exports.binomialCoefficients = exports.cValues = exports.tValues = void 0;
		exports.tValues = [
		    [],
		    [],
		    [
		        -0.5773502691896257645091487805019574556476,
		        0.5773502691896257645091487805019574556476,
		    ],
		    [
		        0, -0.7745966692414833770358530799564799221665,
		        0.7745966692414833770358530799564799221665,
		    ],
		    [
		        -0.3399810435848562648026657591032446872005,
		        0.3399810435848562648026657591032446872005,
		        -0.8611363115940525752239464888928095050957,
		        0.8611363115940525752239464888928095050957,
		    ],
		    [
		        0, -0.5384693101056830910363144207002088049672,
		        0.5384693101056830910363144207002088049672,
		        -0.9061798459386639927976268782993929651256,
		        0.9061798459386639927976268782993929651256,
		    ],
		    [
		        0.6612093864662645136613995950199053470064,
		        -0.6612093864662645136613995950199053470064,
		        -0.2386191860831969086305017216807119354186,
		        0.2386191860831969086305017216807119354186,
		        -0.9324695142031520278123015544939946091347,
		        0.9324695142031520278123015544939946091347,
		    ],
		    [
		        0, 0.4058451513773971669066064120769614633473,
		        -0.4058451513773971669066064120769614633473,
		        -0.7415311855993944398638647732807884070741,
		        0.7415311855993944398638647732807884070741,
		        -0.9491079123427585245261896840478512624007,
		        0.9491079123427585245261896840478512624007,
		    ],
		    [
		        -0.1834346424956498049394761423601839806667,
		        0.1834346424956498049394761423601839806667,
		        -0.5255324099163289858177390491892463490419,
		        0.5255324099163289858177390491892463490419,
		        -0.7966664774136267395915539364758304368371,
		        0.7966664774136267395915539364758304368371,
		        -0.9602898564975362316835608685694729904282,
		        0.9602898564975362316835608685694729904282,
		    ],
		    [
		        0, -0.8360311073266357942994297880697348765441,
		        0.8360311073266357942994297880697348765441,
		        -0.9681602395076260898355762029036728700494,
		        0.9681602395076260898355762029036728700494,
		        -0.3242534234038089290385380146433366085719,
		        0.3242534234038089290385380146433366085719,
		        -0.6133714327005903973087020393414741847857,
		        0.6133714327005903973087020393414741847857,
		    ],
		    [
		        -0.1488743389816312108848260011297199846175,
		        0.1488743389816312108848260011297199846175,
		        -0.4333953941292471907992659431657841622,
		        0.4333953941292471907992659431657841622,
		        -0.6794095682990244062343273651148735757692,
		        0.6794095682990244062343273651148735757692,
		        -0.8650633666889845107320966884234930485275,
		        0.8650633666889845107320966884234930485275,
		        -0.9739065285171717200779640120844520534282,
		        0.9739065285171717200779640120844520534282,
		    ],
		    [
		        0, -0.2695431559523449723315319854008615246796,
		        0.2695431559523449723315319854008615246796,
		        -0.5190961292068118159257256694586095544802,
		        0.5190961292068118159257256694586095544802,
		        -0.7301520055740493240934162520311534580496,
		        0.7301520055740493240934162520311534580496,
		        -0.8870625997680952990751577693039272666316,
		        0.8870625997680952990751577693039272666316,
		        -0.9782286581460569928039380011228573907714,
		        0.9782286581460569928039380011228573907714,
		    ],
		    [
		        -0.1252334085114689154724413694638531299833,
		        0.1252334085114689154724413694638531299833,
		        -0.3678314989981801937526915366437175612563,
		        0.3678314989981801937526915366437175612563,
		        -0.587317954286617447296702418940534280369,
		        0.587317954286617447296702418940534280369,
		        -0.7699026741943046870368938332128180759849,
		        0.7699026741943046870368938332128180759849,
		        -0.9041172563704748566784658661190961925375,
		        0.9041172563704748566784658661190961925375,
		        -0.9815606342467192506905490901492808229601,
		        0.9815606342467192506905490901492808229601,
		    ],
		    [
		        0, -0.2304583159551347940655281210979888352115,
		        0.2304583159551347940655281210979888352115,
		        -0.4484927510364468528779128521276398678019,
		        0.4484927510364468528779128521276398678019,
		        -0.6423493394403402206439846069955156500716,
		        0.6423493394403402206439846069955156500716,
		        -0.8015780907333099127942064895828598903056,
		        0.8015780907333099127942064895828598903056,
		        -0.9175983992229779652065478365007195123904,
		        0.9175983992229779652065478365007195123904,
		        -0.9841830547185881494728294488071096110649,
		        0.9841830547185881494728294488071096110649,
		    ],
		    [
		        -0.1080549487073436620662446502198347476119,
		        0.1080549487073436620662446502198347476119,
		        -0.3191123689278897604356718241684754668342,
		        0.3191123689278897604356718241684754668342,
		        -0.5152486363581540919652907185511886623088,
		        0.5152486363581540919652907185511886623088,
		        -0.6872929048116854701480198030193341375384,
		        0.6872929048116854701480198030193341375384,
		        -0.8272013150697649931897947426503949610397,
		        0.8272013150697649931897947426503949610397,
		        -0.928434883663573517336391139377874264477,
		        0.928434883663573517336391139377874264477,
		        -0.986283808696812338841597266704052801676,
		        0.986283808696812338841597266704052801676,
		    ],
		    [
		        0, -0.2011940939974345223006283033945962078128,
		        0.2011940939974345223006283033945962078128,
		        -0.3941513470775633698972073709810454683627,
		        0.3941513470775633698972073709810454683627,
		        -0.5709721726085388475372267372539106412383,
		        0.5709721726085388475372267372539106412383,
		        -0.7244177313601700474161860546139380096308,
		        0.7244177313601700474161860546139380096308,
		        -0.8482065834104272162006483207742168513662,
		        0.8482065834104272162006483207742168513662,
		        -0.9372733924007059043077589477102094712439,
		        0.9372733924007059043077589477102094712439,
		        -0.9879925180204854284895657185866125811469,
		        0.9879925180204854284895657185866125811469,
		    ],
		    [
		        -0.0950125098376374401853193354249580631303,
		        0.0950125098376374401853193354249580631303,
		        -0.281603550779258913230460501460496106486,
		        0.281603550779258913230460501460496106486,
		        -0.45801677765722738634241944298357757354,
		        0.45801677765722738634241944298357757354,
		        -0.6178762444026437484466717640487910189918,
		        0.6178762444026437484466717640487910189918,
		        -0.7554044083550030338951011948474422683538,
		        0.7554044083550030338951011948474422683538,
		        -0.8656312023878317438804678977123931323873,
		        0.8656312023878317438804678977123931323873,
		        -0.9445750230732325760779884155346083450911,
		        0.9445750230732325760779884155346083450911,
		        -0.9894009349916499325961541734503326274262,
		        0.9894009349916499325961541734503326274262,
		    ],
		    [
		        0, -0.1784841814958478558506774936540655574754,
		        0.1784841814958478558506774936540655574754,
		        -0.3512317634538763152971855170953460050405,
		        0.3512317634538763152971855170953460050405,
		        -0.5126905370864769678862465686295518745829,
		        0.5126905370864769678862465686295518745829,
		        -0.6576711592166907658503022166430023351478,
		        0.6576711592166907658503022166430023351478,
		        -0.7815140038968014069252300555204760502239,
		        0.7815140038968014069252300555204760502239,
		        -0.8802391537269859021229556944881556926234,
		        0.8802391537269859021229556944881556926234,
		        -0.9506755217687677612227169578958030214433,
		        0.9506755217687677612227169578958030214433,
		        -0.9905754753144173356754340199406652765077,
		        0.9905754753144173356754340199406652765077,
		    ],
		    [
		        -0.0847750130417353012422618529357838117333,
		        0.0847750130417353012422618529357838117333,
		        -0.2518862256915055095889728548779112301628,
		        0.2518862256915055095889728548779112301628,
		        -0.4117511614628426460359317938330516370789,
		        0.4117511614628426460359317938330516370789,
		        -0.5597708310739475346078715485253291369276,
		        0.5597708310739475346078715485253291369276,
		        -0.6916870430603532078748910812888483894522,
		        0.6916870430603532078748910812888483894522,
		        -0.8037049589725231156824174550145907971032,
		        0.8037049589725231156824174550145907971032,
		        -0.8926024664975557392060605911271455154078,
		        0.8926024664975557392060605911271455154078,
		        -0.9558239495713977551811958929297763099728,
		        0.9558239495713977551811958929297763099728,
		        -0.9915651684209309467300160047061507702525,
		        0.9915651684209309467300160047061507702525,
		    ],
		    [
		        0, -0.1603586456402253758680961157407435495048,
		        0.1603586456402253758680961157407435495048,
		        -0.3165640999636298319901173288498449178922,
		        0.3165640999636298319901173288498449178922,
		        -0.4645707413759609457172671481041023679762,
		        0.4645707413759609457172671481041023679762,
		        -0.6005453046616810234696381649462392798683,
		        0.6005453046616810234696381649462392798683,
		        -0.7209661773352293786170958608237816296571,
		        0.7209661773352293786170958608237816296571,
		        -0.8227146565371428249789224867127139017745,
		        0.8227146565371428249789224867127139017745,
		        -0.9031559036148179016426609285323124878093,
		        0.9031559036148179016426609285323124878093,
		        -0.960208152134830030852778840687651526615,
		        0.960208152134830030852778840687651526615,
		        -0.9924068438435844031890176702532604935893,
		        0.9924068438435844031890176702532604935893,
		    ],
		    [
		        -0.0765265211334973337546404093988382110047,
		        0.0765265211334973337546404093988382110047,
		        -0.227785851141645078080496195368574624743,
		        0.227785851141645078080496195368574624743,
		        -0.3737060887154195606725481770249272373957,
		        0.3737060887154195606725481770249272373957,
		        -0.5108670019508270980043640509552509984254,
		        0.5108670019508270980043640509552509984254,
		        -0.6360536807265150254528366962262859367433,
		        0.6360536807265150254528366962262859367433,
		        -0.7463319064601507926143050703556415903107,
		        0.7463319064601507926143050703556415903107,
		        -0.8391169718222188233945290617015206853296,
		        0.8391169718222188233945290617015206853296,
		        -0.9122344282513259058677524412032981130491,
		        0.9122344282513259058677524412032981130491,
		        -0.963971927277913791267666131197277221912,
		        0.963971927277913791267666131197277221912,
		        -0.9931285991850949247861223884713202782226,
		        0.9931285991850949247861223884713202782226,
		    ],
		    [
		        0, -0.1455618541608950909370309823386863301163,
		        0.1455618541608950909370309823386863301163,
		        -0.288021316802401096600792516064600319909,
		        0.288021316802401096600792516064600319909,
		        -0.4243421202074387835736688885437880520964,
		        0.4243421202074387835736688885437880520964,
		        -0.551618835887219807059018796724313286622,
		        0.551618835887219807059018796724313286622,
		        -0.667138804197412319305966669990339162597,
		        0.667138804197412319305966669990339162597,
		        -0.7684399634756779086158778513062280348209,
		        0.7684399634756779086158778513062280348209,
		        -0.8533633645833172836472506385875676702761,
		        0.8533633645833172836472506385875676702761,
		        -0.9200993341504008287901871337149688941591,
		        0.9200993341504008287901871337149688941591,
		        -0.9672268385663062943166222149076951614246,
		        0.9672268385663062943166222149076951614246,
		        -0.9937521706203895002602420359379409291933,
		        0.9937521706203895002602420359379409291933,
		    ],
		    [
		        -0.0697392733197222212138417961186280818222,
		        0.0697392733197222212138417961186280818222,
		        -0.2078604266882212854788465339195457342156,
		        0.2078604266882212854788465339195457342156,
		        -0.3419358208920842251581474204273796195591,
		        0.3419358208920842251581474204273796195591,
		        -0.4693558379867570264063307109664063460953,
		        0.4693558379867570264063307109664063460953,
		        -0.5876404035069115929588769276386473488776,
		        0.5876404035069115929588769276386473488776,
		        -0.6944872631866827800506898357622567712673,
		        0.6944872631866827800506898357622567712673,
		        -0.7878168059792081620042779554083515213881,
		        0.7878168059792081620042779554083515213881,
		        -0.8658125777203001365364256370193787290847,
		        0.8658125777203001365364256370193787290847,
		        -0.9269567721871740005206929392590531966353,
		        0.9269567721871740005206929392590531966353,
		        -0.9700604978354287271239509867652687108059,
		        0.9700604978354287271239509867652687108059,
		        -0.994294585482399292073031421161298980393,
		        0.994294585482399292073031421161298980393,
		    ],
		    [
		        0, -0.1332568242984661109317426822417661370104,
		        0.1332568242984661109317426822417661370104,
		        -0.264135680970344930533869538283309602979,
		        0.264135680970344930533869538283309602979,
		        -0.390301038030290831421488872880605458578,
		        0.390301038030290831421488872880605458578,
		        -0.5095014778460075496897930478668464305448,
		        0.5095014778460075496897930478668464305448,
		        -0.6196098757636461563850973116495956533871,
		        0.6196098757636461563850973116495956533871,
		        -0.7186613631319501944616244837486188483299,
		        0.7186613631319501944616244837486188483299,
		        -0.8048884016188398921511184069967785579414,
		        0.8048884016188398921511184069967785579414,
		        -0.8767523582704416673781568859341456716389,
		        0.8767523582704416673781568859341456716389,
		        -0.9329710868260161023491969890384229782357,
		        0.9329710868260161023491969890384229782357,
		        -0.9725424712181152319560240768207773751816,
		        0.9725424712181152319560240768207773751816,
		        -0.9947693349975521235239257154455743605736,
		        0.9947693349975521235239257154455743605736,
		    ],
		    [
		        -0.0640568928626056260850430826247450385909,
		        0.0640568928626056260850430826247450385909,
		        -0.1911188674736163091586398207570696318404,
		        0.1911188674736163091586398207570696318404,
		        -0.3150426796961633743867932913198102407864,
		        0.3150426796961633743867932913198102407864,
		        -0.4337935076260451384870842319133497124524,
		        0.4337935076260451384870842319133497124524,
		        -0.5454214713888395356583756172183723700107,
		        0.5454214713888395356583756172183723700107,
		        -0.6480936519369755692524957869107476266696,
		        0.6480936519369755692524957869107476266696,
		        -0.7401241915785543642438281030999784255232,
		        0.7401241915785543642438281030999784255232,
		        -0.8200019859739029219539498726697452080761,
		        0.8200019859739029219539498726697452080761,
		        -0.8864155270044010342131543419821967550873,
		        0.8864155270044010342131543419821967550873,
		        -0.9382745520027327585236490017087214496548,
		        0.9382745520027327585236490017087214496548,
		        -0.9747285559713094981983919930081690617411,
		        0.9747285559713094981983919930081690617411,
		        -0.9951872199970213601799974097007368118745,
		        0.9951872199970213601799974097007368118745,
		    ],
		];
		exports.cValues = [
		    [],
		    [],
		    [1.0, 1.0],
		    [
		        0.8888888888888888888888888888888888888888,
		        0.5555555555555555555555555555555555555555,
		        0.5555555555555555555555555555555555555555,
		    ],
		    [
		        0.6521451548625461426269360507780005927646,
		        0.6521451548625461426269360507780005927646,
		        0.3478548451374538573730639492219994072353,
		        0.3478548451374538573730639492219994072353,
		    ],
		    [
		        0.5688888888888888888888888888888888888888,
		        0.4786286704993664680412915148356381929122,
		        0.4786286704993664680412915148356381929122,
		        0.2369268850561890875142640407199173626432,
		        0.2369268850561890875142640407199173626432,
		    ],
		    [
		        0.3607615730481386075698335138377161116615,
		        0.3607615730481386075698335138377161116615,
		        0.4679139345726910473898703439895509948116,
		        0.4679139345726910473898703439895509948116,
		        0.1713244923791703450402961421727328935268,
		        0.1713244923791703450402961421727328935268,
		    ],
		    [
		        0.4179591836734693877551020408163265306122,
		        0.3818300505051189449503697754889751338783,
		        0.3818300505051189449503697754889751338783,
		        0.2797053914892766679014677714237795824869,
		        0.2797053914892766679014677714237795824869,
		        0.1294849661688696932706114326790820183285,
		        0.1294849661688696932706114326790820183285,
		    ],
		    [
		        0.3626837833783619829651504492771956121941,
		        0.3626837833783619829651504492771956121941,
		        0.3137066458778872873379622019866013132603,
		        0.3137066458778872873379622019866013132603,
		        0.2223810344533744705443559944262408844301,
		        0.2223810344533744705443559944262408844301,
		        0.1012285362903762591525313543099621901153,
		        0.1012285362903762591525313543099621901153,
		    ],
		    [
		        0.3302393550012597631645250692869740488788,
		        0.1806481606948574040584720312429128095143,
		        0.1806481606948574040584720312429128095143,
		        0.0812743883615744119718921581105236506756,
		        0.0812743883615744119718921581105236506756,
		        0.3123470770400028400686304065844436655987,
		        0.3123470770400028400686304065844436655987,
		        0.2606106964029354623187428694186328497718,
		        0.2606106964029354623187428694186328497718,
		    ],
		    [
		        0.295524224714752870173892994651338329421,
		        0.295524224714752870173892994651338329421,
		        0.2692667193099963550912269215694693528597,
		        0.2692667193099963550912269215694693528597,
		        0.2190863625159820439955349342281631924587,
		        0.2190863625159820439955349342281631924587,
		        0.1494513491505805931457763396576973324025,
		        0.1494513491505805931457763396576973324025,
		        0.0666713443086881375935688098933317928578,
		        0.0666713443086881375935688098933317928578,
		    ],
		    [
		        0.272925086777900630714483528336342189156,
		        0.2628045445102466621806888698905091953727,
		        0.2628045445102466621806888698905091953727,
		        0.2331937645919904799185237048431751394317,
		        0.2331937645919904799185237048431751394317,
		        0.1862902109277342514260976414316558916912,
		        0.1862902109277342514260976414316558916912,
		        0.1255803694649046246346942992239401001976,
		        0.1255803694649046246346942992239401001976,
		        0.0556685671161736664827537204425485787285,
		        0.0556685671161736664827537204425485787285,
		    ],
		    [
		        0.2491470458134027850005624360429512108304,
		        0.2491470458134027850005624360429512108304,
		        0.2334925365383548087608498989248780562594,
		        0.2334925365383548087608498989248780562594,
		        0.2031674267230659217490644558097983765065,
		        0.2031674267230659217490644558097983765065,
		        0.160078328543346226334652529543359071872,
		        0.160078328543346226334652529543359071872,
		        0.1069393259953184309602547181939962242145,
		        0.1069393259953184309602547181939962242145,
		        0.047175336386511827194615961485017060317,
		        0.047175336386511827194615961485017060317,
		    ],
		    [
		        0.2325515532308739101945895152688359481566,
		        0.2262831802628972384120901860397766184347,
		        0.2262831802628972384120901860397766184347,
		        0.2078160475368885023125232193060527633865,
		        0.2078160475368885023125232193060527633865,
		        0.1781459807619457382800466919960979955128,
		        0.1781459807619457382800466919960979955128,
		        0.1388735102197872384636017768688714676218,
		        0.1388735102197872384636017768688714676218,
		        0.0921214998377284479144217759537971209236,
		        0.0921214998377284479144217759537971209236,
		        0.0404840047653158795200215922009860600419,
		        0.0404840047653158795200215922009860600419,
		    ],
		    [
		        0.2152638534631577901958764433162600352749,
		        0.2152638534631577901958764433162600352749,
		        0.2051984637212956039659240656612180557103,
		        0.2051984637212956039659240656612180557103,
		        0.1855383974779378137417165901251570362489,
		        0.1855383974779378137417165901251570362489,
		        0.1572031671581935345696019386238421566056,
		        0.1572031671581935345696019386238421566056,
		        0.1215185706879031846894148090724766259566,
		        0.1215185706879031846894148090724766259566,
		        0.0801580871597602098056332770628543095836,
		        0.0801580871597602098056332770628543095836,
		        0.0351194603317518630318328761381917806197,
		        0.0351194603317518630318328761381917806197,
		    ],
		    [
		        0.2025782419255612728806201999675193148386,
		        0.1984314853271115764561183264438393248186,
		        0.1984314853271115764561183264438393248186,
		        0.1861610000155622110268005618664228245062,
		        0.1861610000155622110268005618664228245062,
		        0.1662692058169939335532008604812088111309,
		        0.1662692058169939335532008604812088111309,
		        0.1395706779261543144478047945110283225208,
		        0.1395706779261543144478047945110283225208,
		        0.1071592204671719350118695466858693034155,
		        0.1071592204671719350118695466858693034155,
		        0.0703660474881081247092674164506673384667,
		        0.0703660474881081247092674164506673384667,
		        0.0307532419961172683546283935772044177217,
		        0.0307532419961172683546283935772044177217,
		    ],
		    [
		        0.1894506104550684962853967232082831051469,
		        0.1894506104550684962853967232082831051469,
		        0.1826034150449235888667636679692199393835,
		        0.1826034150449235888667636679692199393835,
		        0.1691565193950025381893120790303599622116,
		        0.1691565193950025381893120790303599622116,
		        0.1495959888165767320815017305474785489704,
		        0.1495959888165767320815017305474785489704,
		        0.1246289712555338720524762821920164201448,
		        0.1246289712555338720524762821920164201448,
		        0.0951585116824927848099251076022462263552,
		        0.0951585116824927848099251076022462263552,
		        0.0622535239386478928628438369943776942749,
		        0.0622535239386478928628438369943776942749,
		        0.0271524594117540948517805724560181035122,
		        0.0271524594117540948517805724560181035122,
		    ],
		    [
		        0.1794464703562065254582656442618856214487,
		        0.1765627053669926463252709901131972391509,
		        0.1765627053669926463252709901131972391509,
		        0.1680041021564500445099706637883231550211,
		        0.1680041021564500445099706637883231550211,
		        0.1540457610768102880814315948019586119404,
		        0.1540457610768102880814315948019586119404,
		        0.1351363684685254732863199817023501973721,
		        0.1351363684685254732863199817023501973721,
		        0.1118838471934039710947883856263559267358,
		        0.1118838471934039710947883856263559267358,
		        0.0850361483171791808835353701910620738504,
		        0.0850361483171791808835353701910620738504,
		        0.0554595293739872011294401653582446605128,
		        0.0554595293739872011294401653582446605128,
		        0.0241483028685479319601100262875653246916,
		        0.0241483028685479319601100262875653246916,
		    ],
		    [
		        0.1691423829631435918406564701349866103341,
		        0.1691423829631435918406564701349866103341,
		        0.1642764837458327229860537764659275904123,
		        0.1642764837458327229860537764659275904123,
		        0.1546846751262652449254180038363747721932,
		        0.1546846751262652449254180038363747721932,
		        0.1406429146706506512047313037519472280955,
		        0.1406429146706506512047313037519472280955,
		        0.1225552067114784601845191268002015552281,
		        0.1225552067114784601845191268002015552281,
		        0.1009420441062871655628139849248346070628,
		        0.1009420441062871655628139849248346070628,
		        0.0764257302548890565291296776166365256053,
		        0.0764257302548890565291296776166365256053,
		        0.0497145488949697964533349462026386416808,
		        0.0497145488949697964533349462026386416808,
		        0.0216160135264833103133427102664524693876,
		        0.0216160135264833103133427102664524693876,
		    ],
		    [
		        0.1610544498487836959791636253209167350399,
		        0.1589688433939543476499564394650472016787,
		        0.1589688433939543476499564394650472016787,
		        0.152766042065859666778855400897662998461,
		        0.152766042065859666778855400897662998461,
		        0.1426067021736066117757461094419029724756,
		        0.1426067021736066117757461094419029724756,
		        0.1287539625393362276755157848568771170558,
		        0.1287539625393362276755157848568771170558,
		        0.1115666455473339947160239016817659974813,
		        0.1115666455473339947160239016817659974813,
		        0.0914900216224499994644620941238396526609,
		        0.0914900216224499994644620941238396526609,
		        0.0690445427376412265807082580060130449618,
		        0.0690445427376412265807082580060130449618,
		        0.0448142267656996003328381574019942119517,
		        0.0448142267656996003328381574019942119517,
		        0.0194617882297264770363120414644384357529,
		        0.0194617882297264770363120414644384357529,
		    ],
		    [
		        0.1527533871307258506980843319550975934919,
		        0.1527533871307258506980843319550975934919,
		        0.1491729864726037467878287370019694366926,
		        0.1491729864726037467878287370019694366926,
		        0.1420961093183820513292983250671649330345,
		        0.1420961093183820513292983250671649330345,
		        0.1316886384491766268984944997481631349161,
		        0.1316886384491766268984944997481631349161,
		        0.118194531961518417312377377711382287005,
		        0.118194531961518417312377377711382287005,
		        0.1019301198172404350367501354803498761666,
		        0.1019301198172404350367501354803498761666,
		        0.0832767415767047487247581432220462061001,
		        0.0832767415767047487247581432220462061001,
		        0.0626720483341090635695065351870416063516,
		        0.0626720483341090635695065351870416063516,
		        0.040601429800386941331039952274932109879,
		        0.040601429800386941331039952274932109879,
		        0.0176140071391521183118619623518528163621,
		        0.0176140071391521183118619623518528163621,
		    ],
		    [
		        0.1460811336496904271919851476833711882448,
		        0.1445244039899700590638271665537525436099,
		        0.1445244039899700590638271665537525436099,
		        0.1398873947910731547221334238675831108927,
		        0.1398873947910731547221334238675831108927,
		        0.132268938633337461781052574496775604329,
		        0.132268938633337461781052574496775604329,
		        0.1218314160537285341953671771257335983563,
		        0.1218314160537285341953671771257335983563,
		        0.1087972991671483776634745780701056420336,
		        0.1087972991671483776634745780701056420336,
		        0.0934444234560338615532897411139320884835,
		        0.0934444234560338615532897411139320884835,
		        0.0761001136283793020170516533001831792261,
		        0.0761001136283793020170516533001831792261,
		        0.0571344254268572082836358264724479574912,
		        0.0571344254268572082836358264724479574912,
		        0.0369537897708524937999506682993296661889,
		        0.0369537897708524937999506682993296661889,
		        0.0160172282577743333242246168584710152658,
		        0.0160172282577743333242246168584710152658,
		    ],
		    [
		        0.1392518728556319933754102483418099578739,
		        0.1392518728556319933754102483418099578739,
		        0.1365414983460151713525738312315173965863,
		        0.1365414983460151713525738312315173965863,
		        0.1311735047870623707329649925303074458757,
		        0.1311735047870623707329649925303074458757,
		        0.1232523768105124242855609861548144719594,
		        0.1232523768105124242855609861548144719594,
		        0.1129322960805392183934006074217843191142,
		        0.1129322960805392183934006074217843191142,
		        0.1004141444428809649320788378305362823508,
		        0.1004141444428809649320788378305362823508,
		        0.0859416062170677274144436813727028661891,
		        0.0859416062170677274144436813727028661891,
		        0.0697964684245204880949614189302176573987,
		        0.0697964684245204880949614189302176573987,
		        0.0522933351526832859403120512732112561121,
		        0.0522933351526832859403120512732112561121,
		        0.0337749015848141547933022468659129013491,
		        0.0337749015848141547933022468659129013491,
		        0.0146279952982722006849910980471854451902,
		        0.0146279952982722006849910980471854451902,
		    ],
		    [
		        0.1336545721861061753514571105458443385831,
		        0.132462039404696617371642464703316925805,
		        0.132462039404696617371642464703316925805,
		        0.1289057221880821499785953393997936532597,
		        0.1289057221880821499785953393997936532597,
		        0.1230490843067295304675784006720096548158,
		        0.1230490843067295304675784006720096548158,
		        0.1149966402224113649416435129339613014914,
		        0.1149966402224113649416435129339613014914,
		        0.1048920914645414100740861850147438548584,
		        0.1048920914645414100740861850147438548584,
		        0.0929157660600351474770186173697646486034,
		        0.0929157660600351474770186173697646486034,
		        0.0792814117767189549228925247420432269137,
		        0.0792814117767189549228925247420432269137,
		        0.0642324214085258521271696151589109980391,
		        0.0642324214085258521271696151589109980391,
		        0.0480376717310846685716410716320339965612,
		        0.0480376717310846685716410716320339965612,
		        0.0309880058569794443106942196418845053837,
		        0.0309880058569794443106942196418845053837,
		        0.0134118594871417720813094934586150649766,
		        0.0134118594871417720813094934586150649766,
		    ],
		    [
		        0.1279381953467521569740561652246953718517,
		        0.1279381953467521569740561652246953718517,
		        0.1258374563468282961213753825111836887264,
		        0.1258374563468282961213753825111836887264,
		        0.121670472927803391204463153476262425607,
		        0.121670472927803391204463153476262425607,
		        0.1155056680537256013533444839067835598622,
		        0.1155056680537256013533444839067835598622,
		        0.1074442701159656347825773424466062227946,
		        0.1074442701159656347825773424466062227946,
		        0.0976186521041138882698806644642471544279,
		        0.0976186521041138882698806644642471544279,
		        0.086190161531953275917185202983742667185,
		        0.086190161531953275917185202983742667185,
		        0.0733464814110803057340336152531165181193,
		        0.0733464814110803057340336152531165181193,
		        0.0592985849154367807463677585001085845412,
		        0.0592985849154367807463677585001085845412,
		        0.0442774388174198061686027482113382288593,
		        0.0442774388174198061686027482113382288593,
		        0.0285313886289336631813078159518782864491,
		        0.0285313886289336631813078159518782864491,
		        0.0123412297999871995468056670700372915759,
		        0.0123412297999871995468056670700372915759,
		    ],
		];
		exports.binomialCoefficients = [[1], [1, 1], [1, 2, 1], [1, 3, 3, 1]];
		const getCubicArcLength = (xs, ys, t) => {
		    let z;
		    let sum;
		    let correctedT;
		    const n = 20;
		    z = t / 2;
		    sum = 0;
		    for (let i = 0; i < n; i++) {
		        correctedT = z * exports.tValues[n][i] + z;
		        sum += exports.cValues[n][i] * BFunc(xs, ys, correctedT);
		    }
		    return z * sum;
		};
		exports.getCubicArcLength = getCubicArcLength;
		const getQuadraticArcLength = (xs, ys, t) => {
		    if (t === undefined) {
		        t = 1;
		    }
		    const ax = xs[0] - 2 * xs[1] + xs[2];
		    const ay = ys[0] - 2 * ys[1] + ys[2];
		    const bx = 2 * xs[1] - 2 * xs[0];
		    const by = 2 * ys[1] - 2 * ys[0];
		    const A = 4 * (ax * ax + ay * ay);
		    const B = 4 * (ax * bx + ay * by);
		    const C = bx * bx + by * by;
		    if (A === 0) {
		        return (t * Math.sqrt(Math.pow(xs[2] - xs[0], 2) + Math.pow(ys[2] - ys[0], 2)));
		    }
		    const b = B / (2 * A);
		    const c = C / A;
		    const u = t + b;
		    const k = c - b * b;
		    const uuk = u * u + k > 0 ? Math.sqrt(u * u + k) : 0;
		    const bbk = b * b + k > 0 ? Math.sqrt(b * b + k) : 0;
		    const term = b + Math.sqrt(b * b + k) !== 0
		        ? k * Math.log(Math.abs((u + uuk) / (b + bbk)))
		        : 0;
		    return (Math.sqrt(A) / 2) * (u * uuk - b * bbk + term);
		};
		exports.getQuadraticArcLength = getQuadraticArcLength;
		function BFunc(xs, ys, t) {
		    const xbase = getDerivative(1, t, xs);
		    const ybase = getDerivative(1, t, ys);
		    const combined = xbase * xbase + ybase * ybase;
		    return Math.sqrt(combined);
		}
		const getDerivative = (derivative, t, vs) => {
		    const n = vs.length - 1;
		    let _vs;
		    let value;
		    if (n === 0) {
		        return 0;
		    }
		    if (derivative === 0) {
		        value = 0;
		        for (let k = 0; k <= n; k++) {
		            value +=
		                exports.binomialCoefficients[n][k] *
		                    Math.pow(1 - t, n - k) *
		                    Math.pow(t, k) *
		                    vs[k];
		        }
		        return value;
		    }
		    else {
		        _vs = new Array(n);
		        for (let k = 0; k < n; k++) {
		            _vs[k] = n * (vs[k + 1] - vs[k]);
		        }
		        return getDerivative(derivative - 1, t, _vs);
		    }
		};
		const t2length = (length, totalLength, func) => {
		    let error = 1;
		    let t = length / totalLength;
		    let step = (length - func(t)) / totalLength;
		    let numIterations = 0;
		    while (error > 0.001) {
		        const increasedTLength = func(t + step);
		        const increasedTError = Math.abs(length - increasedTLength) / totalLength;
		        if (increasedTError < error) {
		            error = increasedTError;
		            t += step;
		        }
		        else {
		            const decreasedTLength = func(t - step);
		            const decreasedTError = Math.abs(length - decreasedTLength) / totalLength;
		            if (decreasedTError < error) {
		                error = decreasedTError;
		                t -= step;
		            }
		            else {
		                step /= 2;
		            }
		        }
		        numIterations++;
		        if (numIterations > 500) {
		            break;
		        }
		    }
		    return t;
		};
		exports.t2length = t2length; 
	} (BezierFunctions));
	return BezierFunctions;
}

var hasRequiredPath;

function requirePath () {
	if (hasRequiredPath) return Path;
	hasRequiredPath = 1;
	Object.defineProperty(Path, "__esModule", { value: true });
	Path.Path = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Global_1 = requireGlobal();
	const BezierFunctions_1 = requireBezierFunctions();
	let Path$1 = class Path extends Shape_1.Shape {
	    constructor(config) {
	        super(config);
	        this.dataArray = [];
	        this.pathLength = 0;
	        this._readDataAttribute();
	        this.on('dataChange.konva', function () {
	            this._readDataAttribute();
	        });
	    }
	    _readDataAttribute() {
	        this.dataArray = Path.parsePathData(this.data());
	        this.pathLength = Path.getPathLength(this.dataArray);
	    }
	    _sceneFunc(context) {
	        var ca = this.dataArray;
	        context.beginPath();
	        var isClosed = false;
	        for (var n = 0; n < ca.length; n++) {
	            var c = ca[n].command;
	            var p = ca[n].points;
	            switch (c) {
	                case 'L':
	                    context.lineTo(p[0], p[1]);
	                    break;
	                case 'M':
	                    context.moveTo(p[0], p[1]);
	                    break;
	                case 'C':
	                    context.bezierCurveTo(p[0], p[1], p[2], p[3], p[4], p[5]);
	                    break;
	                case 'Q':
	                    context.quadraticCurveTo(p[0], p[1], p[2], p[3]);
	                    break;
	                case 'A':
	                    var cx = p[0], cy = p[1], rx = p[2], ry = p[3], theta = p[4], dTheta = p[5], psi = p[6], fs = p[7];
	                    var r = rx > ry ? rx : ry;
	                    var scaleX = rx > ry ? 1 : rx / ry;
	                    var scaleY = rx > ry ? ry / rx : 1;
	                    context.translate(cx, cy);
	                    context.rotate(psi);
	                    context.scale(scaleX, scaleY);
	                    context.arc(0, 0, r, theta, theta + dTheta, 1 - fs);
	                    context.scale(1 / scaleX, 1 / scaleY);
	                    context.rotate(-psi);
	                    context.translate(-cx, -cy);
	                    break;
	                case 'z':
	                    isClosed = true;
	                    context.closePath();
	                    break;
	            }
	        }
	        if (!isClosed && !this.hasFill()) {
	            context.strokeShape(this);
	        }
	        else {
	            context.fillStrokeShape(this);
	        }
	    }
	    getSelfRect() {
	        var points = [];
	        this.dataArray.forEach(function (data) {
	            if (data.command === 'A') {
	                var start = data.points[4];
	                var dTheta = data.points[5];
	                var end = data.points[4] + dTheta;
	                var inc = Math.PI / 180.0;
	                if (Math.abs(start - end) < inc) {
	                    inc = Math.abs(start - end);
	                }
	                if (dTheta < 0) {
	                    for (let t = start - inc; t > end; t -= inc) {
	                        const point = Path.getPointOnEllipticalArc(data.points[0], data.points[1], data.points[2], data.points[3], t, 0);
	                        points.push(point.x, point.y);
	                    }
	                }
	                else {
	                    for (let t = start + inc; t < end; t += inc) {
	                        const point = Path.getPointOnEllipticalArc(data.points[0], data.points[1], data.points[2], data.points[3], t, 0);
	                        points.push(point.x, point.y);
	                    }
	                }
	            }
	            else if (data.command === 'C') {
	                for (let t = 0.0; t <= 1; t += 0.01) {
	                    const point = Path.getPointOnCubicBezier(t, data.start.x, data.start.y, data.points[0], data.points[1], data.points[2], data.points[3], data.points[4], data.points[5]);
	                    points.push(point.x, point.y);
	                }
	            }
	            else {
	                points = points.concat(data.points);
	            }
	        });
	        var minX = points[0];
	        var maxX = points[0];
	        var minY = points[1];
	        var maxY = points[1];
	        var x, y;
	        for (var i = 0; i < points.length / 2; i++) {
	            x = points[i * 2];
	            y = points[i * 2 + 1];
	            if (!isNaN(x)) {
	                minX = Math.min(minX, x);
	                maxX = Math.max(maxX, x);
	            }
	            if (!isNaN(y)) {
	                minY = Math.min(minY, y);
	                maxY = Math.max(maxY, y);
	            }
	        }
	        return {
	            x: minX,
	            y: minY,
	            width: maxX - minX,
	            height: maxY - minY,
	        };
	    }
	    getLength() {
	        return this.pathLength;
	    }
	    getPointAtLength(length) {
	        return Path.getPointAtLengthOfDataArray(length, this.dataArray);
	    }
	    static getLineLength(x1, y1, x2, y2) {
	        return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
	    }
	    static getPathLength(dataArray) {
	        let pathLength = 0;
	        for (var i = 0; i < dataArray.length; ++i) {
	            pathLength += dataArray[i].pathLength;
	        }
	        return pathLength;
	    }
	    static getPointAtLengthOfDataArray(length, dataArray) {
	        var point, i = 0, ii = dataArray.length;
	        if (!ii) {
	            return null;
	        }
	        while (i < ii && length > dataArray[i].pathLength) {
	            length -= dataArray[i].pathLength;
	            ++i;
	        }
	        if (i === ii) {
	            point = dataArray[i - 1].points.slice(-2);
	            return {
	                x: point[0],
	                y: point[1],
	            };
	        }
	        if (length < 0.01) {
	            point = dataArray[i].points.slice(0, 2);
	            return {
	                x: point[0],
	                y: point[1],
	            };
	        }
	        var cp = dataArray[i];
	        var p = cp.points;
	        switch (cp.command) {
	            case 'L':
	                return Path.getPointOnLine(length, cp.start.x, cp.start.y, p[0], p[1]);
	            case 'C':
	                return Path.getPointOnCubicBezier((0, BezierFunctions_1.t2length)(length, Path.getPathLength(dataArray), (i) => {
	                    return (0, BezierFunctions_1.getCubicArcLength)([cp.start.x, p[0], p[2], p[4]], [cp.start.y, p[1], p[3], p[5]], i);
	                }), cp.start.x, cp.start.y, p[0], p[1], p[2], p[3], p[4], p[5]);
	            case 'Q':
	                return Path.getPointOnQuadraticBezier((0, BezierFunctions_1.t2length)(length, Path.getPathLength(dataArray), (i) => {
	                    return (0, BezierFunctions_1.getQuadraticArcLength)([cp.start.x, p[0], p[2]], [cp.start.y, p[1], p[3]], i);
	                }), cp.start.x, cp.start.y, p[0], p[1], p[2], p[3]);
	            case 'A':
	                var cx = p[0], cy = p[1], rx = p[2], ry = p[3], theta = p[4], dTheta = p[5], psi = p[6];
	                theta += (dTheta * length) / cp.pathLength;
	                return Path.getPointOnEllipticalArc(cx, cy, rx, ry, theta, psi);
	        }
	        return null;
	    }
	    static getPointOnLine(dist, P1x, P1y, P2x, P2y, fromX, fromY) {
	        if (fromX === undefined) {
	            fromX = P1x;
	        }
	        if (fromY === undefined) {
	            fromY = P1y;
	        }
	        var m = (P2y - P1y) / (P2x - P1x + 0.00000001);
	        var run = Math.sqrt((dist * dist) / (1 + m * m));
	        if (P2x < P1x) {
	            run *= -1;
	        }
	        var rise = m * run;
	        var pt;
	        if (P2x === P1x) {
	            pt = {
	                x: fromX,
	                y: fromY + rise,
	            };
	        }
	        else if ((fromY - P1y) / (fromX - P1x + 0.00000001) === m) {
	            pt = {
	                x: fromX + run,
	                y: fromY + rise,
	            };
	        }
	        else {
	            var ix, iy;
	            var len = this.getLineLength(P1x, P1y, P2x, P2y);
	            var u = (fromX - P1x) * (P2x - P1x) + (fromY - P1y) * (P2y - P1y);
	            u = u / (len * len);
	            ix = P1x + u * (P2x - P1x);
	            iy = P1y + u * (P2y - P1y);
	            var pRise = this.getLineLength(fromX, fromY, ix, iy);
	            var pRun = Math.sqrt(dist * dist - pRise * pRise);
	            run = Math.sqrt((pRun * pRun) / (1 + m * m));
	            if (P2x < P1x) {
	                run *= -1;
	            }
	            rise = m * run;
	            pt = {
	                x: ix + run,
	                y: iy + rise,
	            };
	        }
	        return pt;
	    }
	    static getPointOnCubicBezier(pct, P1x, P1y, P2x, P2y, P3x, P3y, P4x, P4y) {
	        function CB1(t) {
	            return t * t * t;
	        }
	        function CB2(t) {
	            return 3 * t * t * (1 - t);
	        }
	        function CB3(t) {
	            return 3 * t * (1 - t) * (1 - t);
	        }
	        function CB4(t) {
	            return (1 - t) * (1 - t) * (1 - t);
	        }
	        var x = P4x * CB1(pct) + P3x * CB2(pct) + P2x * CB3(pct) + P1x * CB4(pct);
	        var y = P4y * CB1(pct) + P3y * CB2(pct) + P2y * CB3(pct) + P1y * CB4(pct);
	        return {
	            x: x,
	            y: y,
	        };
	    }
	    static getPointOnQuadraticBezier(pct, P1x, P1y, P2x, P2y, P3x, P3y) {
	        function QB1(t) {
	            return t * t;
	        }
	        function QB2(t) {
	            return 2 * t * (1 - t);
	        }
	        function QB3(t) {
	            return (1 - t) * (1 - t);
	        }
	        var x = P3x * QB1(pct) + P2x * QB2(pct) + P1x * QB3(pct);
	        var y = P3y * QB1(pct) + P2y * QB2(pct) + P1y * QB3(pct);
	        return {
	            x: x,
	            y: y,
	        };
	    }
	    static getPointOnEllipticalArc(cx, cy, rx, ry, theta, psi) {
	        var cosPsi = Math.cos(psi), sinPsi = Math.sin(psi);
	        var pt = {
	            x: rx * Math.cos(theta),
	            y: ry * Math.sin(theta),
	        };
	        return {
	            x: cx + (pt.x * cosPsi - pt.y * sinPsi),
	            y: cy + (pt.x * sinPsi + pt.y * cosPsi),
	        };
	    }
	    static parsePathData(data) {
	        if (!data) {
	            return [];
	        }
	        var cs = data;
	        var cc = [
	            'm',
	            'M',
	            'l',
	            'L',
	            'v',
	            'V',
	            'h',
	            'H',
	            'z',
	            'Z',
	            'c',
	            'C',
	            'q',
	            'Q',
	            't',
	            'T',
	            's',
	            'S',
	            'a',
	            'A',
	        ];
	        cs = cs.replace(new RegExp(' ', 'g'), ',');
	        for (var n = 0; n < cc.length; n++) {
	            cs = cs.replace(new RegExp(cc[n], 'g'), '|' + cc[n]);
	        }
	        var arr = cs.split('|');
	        var ca = [];
	        var coords = [];
	        var cpx = 0;
	        var cpy = 0;
	        var re = /([-+]?((\d+\.\d+)|((\d+)|(\.\d+)))(?:e[-+]?\d+)?)/gi;
	        var match;
	        for (n = 1; n < arr.length; n++) {
	            var str = arr[n];
	            var c = str.charAt(0);
	            str = str.slice(1);
	            coords.length = 0;
	            while ((match = re.exec(str))) {
	                coords.push(match[0]);
	            }
	            var p = [];
	            for (var j = 0, jlen = coords.length; j < jlen; j++) {
	                if (coords[j] === '00') {
	                    p.push(0, 0);
	                    continue;
	                }
	                var parsed = parseFloat(coords[j]);
	                if (!isNaN(parsed)) {
	                    p.push(parsed);
	                }
	                else {
	                    p.push(0);
	                }
	            }
	            while (p.length > 0) {
	                if (isNaN(p[0])) {
	                    break;
	                }
	                var cmd = '';
	                var points = [];
	                var startX = cpx, startY = cpy;
	                var prevCmd, ctlPtx, ctlPty;
	                var rx, ry, psi, fa, fs, x1, y1;
	                switch (c) {
	                    case 'l':
	                        cpx += p.shift();
	                        cpy += p.shift();
	                        cmd = 'L';
	                        points.push(cpx, cpy);
	                        break;
	                    case 'L':
	                        cpx = p.shift();
	                        cpy = p.shift();
	                        points.push(cpx, cpy);
	                        break;
	                    case 'm':
	                        var dx = p.shift();
	                        var dy = p.shift();
	                        cpx += dx;
	                        cpy += dy;
	                        cmd = 'M';
	                        if (ca.length > 2 && ca[ca.length - 1].command === 'z') {
	                            for (var idx = ca.length - 2; idx >= 0; idx--) {
	                                if (ca[idx].command === 'M') {
	                                    cpx = ca[idx].points[0] + dx;
	                                    cpy = ca[idx].points[1] + dy;
	                                    break;
	                                }
	                            }
	                        }
	                        points.push(cpx, cpy);
	                        c = 'l';
	                        break;
	                    case 'M':
	                        cpx = p.shift();
	                        cpy = p.shift();
	                        cmd = 'M';
	                        points.push(cpx, cpy);
	                        c = 'L';
	                        break;
	                    case 'h':
	                        cpx += p.shift();
	                        cmd = 'L';
	                        points.push(cpx, cpy);
	                        break;
	                    case 'H':
	                        cpx = p.shift();
	                        cmd = 'L';
	                        points.push(cpx, cpy);
	                        break;
	                    case 'v':
	                        cpy += p.shift();
	                        cmd = 'L';
	                        points.push(cpx, cpy);
	                        break;
	                    case 'V':
	                        cpy = p.shift();
	                        cmd = 'L';
	                        points.push(cpx, cpy);
	                        break;
	                    case 'C':
	                        points.push(p.shift(), p.shift(), p.shift(), p.shift());
	                        cpx = p.shift();
	                        cpy = p.shift();
	                        points.push(cpx, cpy);
	                        break;
	                    case 'c':
	                        points.push(cpx + p.shift(), cpy + p.shift(), cpx + p.shift(), cpy + p.shift());
	                        cpx += p.shift();
	                        cpy += p.shift();
	                        cmd = 'C';
	                        points.push(cpx, cpy);
	                        break;
	                    case 'S':
	                        ctlPtx = cpx;
	                        ctlPty = cpy;
	                        prevCmd = ca[ca.length - 1];
	                        if (prevCmd.command === 'C') {
	                            ctlPtx = cpx + (cpx - prevCmd.points[2]);
	                            ctlPty = cpy + (cpy - prevCmd.points[3]);
	                        }
	                        points.push(ctlPtx, ctlPty, p.shift(), p.shift());
	                        cpx = p.shift();
	                        cpy = p.shift();
	                        cmd = 'C';
	                        points.push(cpx, cpy);
	                        break;
	                    case 's':
	                        ctlPtx = cpx;
	                        ctlPty = cpy;
	                        prevCmd = ca[ca.length - 1];
	                        if (prevCmd.command === 'C') {
	                            ctlPtx = cpx + (cpx - prevCmd.points[2]);
	                            ctlPty = cpy + (cpy - prevCmd.points[3]);
	                        }
	                        points.push(ctlPtx, ctlPty, cpx + p.shift(), cpy + p.shift());
	                        cpx += p.shift();
	                        cpy += p.shift();
	                        cmd = 'C';
	                        points.push(cpx, cpy);
	                        break;
	                    case 'Q':
	                        points.push(p.shift(), p.shift());
	                        cpx = p.shift();
	                        cpy = p.shift();
	                        points.push(cpx, cpy);
	                        break;
	                    case 'q':
	                        points.push(cpx + p.shift(), cpy + p.shift());
	                        cpx += p.shift();
	                        cpy += p.shift();
	                        cmd = 'Q';
	                        points.push(cpx, cpy);
	                        break;
	                    case 'T':
	                        ctlPtx = cpx;
	                        ctlPty = cpy;
	                        prevCmd = ca[ca.length - 1];
	                        if (prevCmd.command === 'Q') {
	                            ctlPtx = cpx + (cpx - prevCmd.points[0]);
	                            ctlPty = cpy + (cpy - prevCmd.points[1]);
	                        }
	                        cpx = p.shift();
	                        cpy = p.shift();
	                        cmd = 'Q';
	                        points.push(ctlPtx, ctlPty, cpx, cpy);
	                        break;
	                    case 't':
	                        ctlPtx = cpx;
	                        ctlPty = cpy;
	                        prevCmd = ca[ca.length - 1];
	                        if (prevCmd.command === 'Q') {
	                            ctlPtx = cpx + (cpx - prevCmd.points[0]);
	                            ctlPty = cpy + (cpy - prevCmd.points[1]);
	                        }
	                        cpx += p.shift();
	                        cpy += p.shift();
	                        cmd = 'Q';
	                        points.push(ctlPtx, ctlPty, cpx, cpy);
	                        break;
	                    case 'A':
	                        rx = p.shift();
	                        ry = p.shift();
	                        psi = p.shift();
	                        fa = p.shift();
	                        fs = p.shift();
	                        x1 = cpx;
	                        y1 = cpy;
	                        cpx = p.shift();
	                        cpy = p.shift();
	                        cmd = 'A';
	                        points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);
	                        break;
	                    case 'a':
	                        rx = p.shift();
	                        ry = p.shift();
	                        psi = p.shift();
	                        fa = p.shift();
	                        fs = p.shift();
	                        x1 = cpx;
	                        y1 = cpy;
	                        cpx += p.shift();
	                        cpy += p.shift();
	                        cmd = 'A';
	                        points = this.convertEndpointToCenterParameterization(x1, y1, cpx, cpy, fa, fs, rx, ry, psi);
	                        break;
	                }
	                ca.push({
	                    command: cmd || c,
	                    points: points,
	                    start: {
	                        x: startX,
	                        y: startY,
	                    },
	                    pathLength: this.calcLength(startX, startY, cmd || c, points),
	                });
	            }
	            if (c === 'z' || c === 'Z') {
	                ca.push({
	                    command: 'z',
	                    points: [],
	                    start: undefined,
	                    pathLength: 0,
	                });
	            }
	        }
	        return ca;
	    }
	    static calcLength(x, y, cmd, points) {
	        var len, p1, p2, t;
	        var path = Path;
	        switch (cmd) {
	            case 'L':
	                return path.getLineLength(x, y, points[0], points[1]);
	            case 'C':
	                return (0, BezierFunctions_1.getCubicArcLength)([x, points[0], points[2], points[4]], [y, points[1], points[3], points[5]], 1);
	            case 'Q':
	                return (0, BezierFunctions_1.getQuadraticArcLength)([x, points[0], points[2]], [y, points[1], points[3]], 1);
	            case 'A':
	                len = 0.0;
	                var start = points[4];
	                var dTheta = points[5];
	                var end = points[4] + dTheta;
	                var inc = Math.PI / 180.0;
	                if (Math.abs(start - end) < inc) {
	                    inc = Math.abs(start - end);
	                }
	                p1 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], start, 0);
	                if (dTheta < 0) {
	                    for (t = start - inc; t > end; t -= inc) {
	                        p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);
	                        len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
	                        p1 = p2;
	                    }
	                }
	                else {
	                    for (t = start + inc; t < end; t += inc) {
	                        p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], t, 0);
	                        len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
	                        p1 = p2;
	                    }
	                }
	                p2 = path.getPointOnEllipticalArc(points[0], points[1], points[2], points[3], end, 0);
	                len += path.getLineLength(p1.x, p1.y, p2.x, p2.y);
	                return len;
	        }
	        return 0;
	    }
	    static convertEndpointToCenterParameterization(x1, y1, x2, y2, fa, fs, rx, ry, psiDeg) {
	        var psi = psiDeg * (Math.PI / 180.0);
	        var xp = (Math.cos(psi) * (x1 - x2)) / 2.0 + (Math.sin(psi) * (y1 - y2)) / 2.0;
	        var yp = (-1 * Math.sin(psi) * (x1 - x2)) / 2.0 +
	            (Math.cos(psi) * (y1 - y2)) / 2.0;
	        var lambda = (xp * xp) / (rx * rx) + (yp * yp) / (ry * ry);
	        if (lambda > 1) {
	            rx *= Math.sqrt(lambda);
	            ry *= Math.sqrt(lambda);
	        }
	        var f = Math.sqrt((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) /
	            (rx * rx * (yp * yp) + ry * ry * (xp * xp)));
	        if (fa === fs) {
	            f *= -1;
	        }
	        if (isNaN(f)) {
	            f = 0;
	        }
	        var cxp = (f * rx * yp) / ry;
	        var cyp = (f * -ry * xp) / rx;
	        var cx = (x1 + x2) / 2.0 + Math.cos(psi) * cxp - Math.sin(psi) * cyp;
	        var cy = (y1 + y2) / 2.0 + Math.sin(psi) * cxp + Math.cos(psi) * cyp;
	        var vMag = function (v) {
	            return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
	        };
	        var vRatio = function (u, v) {
	            return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));
	        };
	        var vAngle = function (u, v) {
	            return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));
	        };
	        var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);
	        var u = [(xp - cxp) / rx, (yp - cyp) / ry];
	        var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];
	        var dTheta = vAngle(u, v);
	        if (vRatio(u, v) <= -1) {
	            dTheta = Math.PI;
	        }
	        if (vRatio(u, v) >= 1) {
	            dTheta = 0;
	        }
	        if (fs === 0 && dTheta > 0) {
	            dTheta = dTheta - 2 * Math.PI;
	        }
	        if (fs === 1 && dTheta < 0) {
	            dTheta = dTheta + 2 * Math.PI;
	        }
	        return [cx, cy, rx, ry, theta, dTheta, psi, fs];
	    }
	};
	Path.Path = Path$1;
	Path$1.prototype.className = 'Path';
	Path$1.prototype._attrsAffectingSize = ['data'];
	(0, Global_1._registerNode)(Path$1);
	Factory_1.Factory.addGetterSetter(Path$1, 'data');
	return Path;
}

var hasRequiredArrow;

function requireArrow () {
	if (hasRequiredArrow) return Arrow$4;
	hasRequiredArrow = 1;
	Object.defineProperty(Arrow$4, "__esModule", { value: true });
	Arrow$4.Arrow = void 0;
	const Factory_1 = requireFactory();
	const Line_1 = requireLine();
	const Validators_1 = requireValidators();
	const Global_1 = requireGlobal();
	const Path_1 = requirePath();
	class Arrow extends Line_1.Line {
	    _sceneFunc(ctx) {
	        super._sceneFunc(ctx);
	        var PI2 = Math.PI * 2;
	        var points = this.points();
	        var tp = points;
	        var fromTension = this.tension() !== 0 && points.length > 4;
	        if (fromTension) {
	            tp = this.getTensionPoints();
	        }
	        var length = this.pointerLength();
	        var n = points.length;
	        var dx, dy;
	        if (fromTension) {
	            const lp = [
	                tp[tp.length - 4],
	                tp[tp.length - 3],
	                tp[tp.length - 2],
	                tp[tp.length - 1],
	                points[n - 2],
	                points[n - 1],
	            ];
	            const lastLength = Path_1.Path.calcLength(tp[tp.length - 4], tp[tp.length - 3], 'C', lp);
	            const previous = Path_1.Path.getPointOnQuadraticBezier(Math.min(1, 1 - length / lastLength), lp[0], lp[1], lp[2], lp[3], lp[4], lp[5]);
	            dx = points[n - 2] - previous.x;
	            dy = points[n - 1] - previous.y;
	        }
	        else {
	            dx = points[n - 2] - points[n - 4];
	            dy = points[n - 1] - points[n - 3];
	        }
	        var radians = (Math.atan2(dy, dx) + PI2) % PI2;
	        var width = this.pointerWidth();
	        if (this.pointerAtEnding()) {
	            ctx.save();
	            ctx.beginPath();
	            ctx.translate(points[n - 2], points[n - 1]);
	            ctx.rotate(radians);
	            ctx.moveTo(0, 0);
	            ctx.lineTo(-length, width / 2);
	            ctx.lineTo(-length, -width / 2);
	            ctx.closePath();
	            ctx.restore();
	            this.__fillStroke(ctx);
	        }
	        if (this.pointerAtBeginning()) {
	            ctx.save();
	            ctx.beginPath();
	            ctx.translate(points[0], points[1]);
	            if (fromTension) {
	                dx = (tp[0] + tp[2]) / 2 - points[0];
	                dy = (tp[1] + tp[3]) / 2 - points[1];
	            }
	            else {
	                dx = points[2] - points[0];
	                dy = points[3] - points[1];
	            }
	            ctx.rotate((Math.atan2(-dy, -dx) + PI2) % PI2);
	            ctx.moveTo(0, 0);
	            ctx.lineTo(-length, width / 2);
	            ctx.lineTo(-length, -width / 2);
	            ctx.closePath();
	            ctx.restore();
	            this.__fillStroke(ctx);
	        }
	    }
	    __fillStroke(ctx) {
	        var isDashEnabled = this.dashEnabled();
	        if (isDashEnabled) {
	            this.attrs.dashEnabled = false;
	            ctx.setLineDash([]);
	        }
	        ctx.fillStrokeShape(this);
	        if (isDashEnabled) {
	            this.attrs.dashEnabled = true;
	        }
	    }
	    getSelfRect() {
	        const lineRect = super.getSelfRect();
	        const offset = this.pointerWidth() / 2;
	        return {
	            x: lineRect.x - offset,
	            y: lineRect.y - offset,
	            width: lineRect.width + offset * 2,
	            height: lineRect.height + offset * 2,
	        };
	    }
	}
	Arrow$4.Arrow = Arrow;
	Arrow.prototype.className = 'Arrow';
	(0, Global_1._registerNode)(Arrow);
	Factory_1.Factory.addGetterSetter(Arrow, 'pointerLength', 10, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Arrow, 'pointerWidth', 10, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Arrow, 'pointerAtBeginning', false);
	Factory_1.Factory.addGetterSetter(Arrow, 'pointerAtEnding', true);
	return Arrow$4;
}

var Circle = {};

var hasRequiredCircle;

function requireCircle () {
	if (hasRequiredCircle) return Circle;
	hasRequiredCircle = 1;
	Object.defineProperty(Circle, "__esModule", { value: true });
	Circle.Circle = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Validators_1 = requireValidators();
	const Global_1 = requireGlobal();
	let Circle$1 = class Circle extends Shape_1.Shape {
	    _sceneFunc(context) {
	        context.beginPath();
	        context.arc(0, 0, this.attrs.radius || 0, 0, Math.PI * 2, false);
	        context.closePath();
	        context.fillStrokeShape(this);
	    }
	    getWidth() {
	        return this.radius() * 2;
	    }
	    getHeight() {
	        return this.radius() * 2;
	    }
	    setWidth(width) {
	        if (this.radius() !== width / 2) {
	            this.radius(width / 2);
	        }
	    }
	    setHeight(height) {
	        if (this.radius() !== height / 2) {
	            this.radius(height / 2);
	        }
	    }
	};
	Circle.Circle = Circle$1;
	Circle$1.prototype._centroid = true;
	Circle$1.prototype.className = 'Circle';
	Circle$1.prototype._attrsAffectingSize = ['radius'];
	(0, Global_1._registerNode)(Circle$1);
	Factory_1.Factory.addGetterSetter(Circle$1, 'radius', 0, (0, Validators_1.getNumberValidator)());
	return Circle;
}

var Ellipse$3 = {};

var hasRequiredEllipse;

function requireEllipse () {
	if (hasRequiredEllipse) return Ellipse$3;
	hasRequiredEllipse = 1;
	Object.defineProperty(Ellipse$3, "__esModule", { value: true });
	Ellipse$3.Ellipse = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Validators_1 = requireValidators();
	const Global_1 = requireGlobal();
	class Ellipse extends Shape_1.Shape {
	    _sceneFunc(context) {
	        var rx = this.radiusX(), ry = this.radiusY();
	        context.beginPath();
	        context.save();
	        if (rx !== ry) {
	            context.scale(1, ry / rx);
	        }
	        context.arc(0, 0, rx, 0, Math.PI * 2, false);
	        context.restore();
	        context.closePath();
	        context.fillStrokeShape(this);
	    }
	    getWidth() {
	        return this.radiusX() * 2;
	    }
	    getHeight() {
	        return this.radiusY() * 2;
	    }
	    setWidth(width) {
	        this.radiusX(width / 2);
	    }
	    setHeight(height) {
	        this.radiusY(height / 2);
	    }
	}
	Ellipse$3.Ellipse = Ellipse;
	Ellipse.prototype.className = 'Ellipse';
	Ellipse.prototype._centroid = true;
	Ellipse.prototype._attrsAffectingSize = ['radiusX', 'radiusY'];
	(0, Global_1._registerNode)(Ellipse);
	Factory_1.Factory.addComponentsGetterSetter(Ellipse, 'radius', ['x', 'y']);
	Factory_1.Factory.addGetterSetter(Ellipse, 'radiusX', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Ellipse, 'radiusY', 0, (0, Validators_1.getNumberValidator)());
	return Ellipse$3;
}

var Image$2 = {};

var hasRequiredImage;

function requireImage () {
	if (hasRequiredImage) return Image$2;
	hasRequiredImage = 1;
	Object.defineProperty(Image$2, "__esModule", { value: true });
	Image$2.Image = void 0;
	const Util_1 = requireUtil();
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Global_1 = requireGlobal();
	const Validators_1 = requireValidators();
	class Image extends Shape_1.Shape {
	    constructor(attrs) {
	        super(attrs);
	        this.on('imageChange.konva', () => {
	            this._setImageLoad();
	        });
	        this._setImageLoad();
	    }
	    _setImageLoad() {
	        const image = this.image();
	        if (image && image.complete) {
	            return;
	        }
	        if (image && image.readyState === 4) {
	            return;
	        }
	        if (image && image['addEventListener']) {
	            image['addEventListener']('load', () => {
	                this._requestDraw();
	            });
	        }
	    }
	    _useBufferCanvas() {
	        return super._useBufferCanvas(true);
	    }
	    _sceneFunc(context) {
	        const width = this.getWidth();
	        const height = this.getHeight();
	        const cornerRadius = this.cornerRadius();
	        const image = this.attrs.image;
	        let params;
	        if (image) {
	            const cropWidth = this.attrs.cropWidth;
	            const cropHeight = this.attrs.cropHeight;
	            if (cropWidth && cropHeight) {
	                params = [
	                    image,
	                    this.cropX(),
	                    this.cropY(),
	                    cropWidth,
	                    cropHeight,
	                    0,
	                    0,
	                    width,
	                    height,
	                ];
	            }
	            else {
	                params = [image, 0, 0, width, height];
	            }
	        }
	        if (this.hasFill() || this.hasStroke() || cornerRadius) {
	            context.beginPath();
	            cornerRadius
	                ? Util_1.Util.drawRoundedRectPath(context, width, height, cornerRadius)
	                : context.rect(0, 0, width, height);
	            context.closePath();
	            context.fillStrokeShape(this);
	        }
	        if (image) {
	            if (cornerRadius) {
	                context.clip();
	            }
	            context.drawImage.apply(context, params);
	        }
	    }
	    _hitFunc(context) {
	        var width = this.width(), height = this.height(), cornerRadius = this.cornerRadius();
	        context.beginPath();
	        if (!cornerRadius) {
	            context.rect(0, 0, width, height);
	        }
	        else {
	            Util_1.Util.drawRoundedRectPath(context, width, height, cornerRadius);
	        }
	        context.closePath();
	        context.fillStrokeShape(this);
	    }
	    getWidth() {
	        var _a, _b;
	        return (_a = this.attrs.width) !== null && _a !== void 0 ? _a : (_b = this.image()) === null || _b === void 0 ? void 0 : _b.width;
	    }
	    getHeight() {
	        var _a, _b;
	        return (_a = this.attrs.height) !== null && _a !== void 0 ? _a : (_b = this.image()) === null || _b === void 0 ? void 0 : _b.height;
	    }
	    static fromURL(url, callback, onError = null) {
	        var img = Util_1.Util.createImageElement();
	        img.onload = function () {
	            var image = new Image({
	                image: img,
	            });
	            callback(image);
	        };
	        img.onerror = onError;
	        img.crossOrigin = 'Anonymous';
	        img.src = url;
	    }
	}
	Image$2.Image = Image;
	Image.prototype.className = 'Image';
	(0, Global_1._registerNode)(Image);
	Factory_1.Factory.addGetterSetter(Image, 'cornerRadius', 0, (0, Validators_1.getNumberOrArrayOfNumbersValidator)(4));
	Factory_1.Factory.addGetterSetter(Image, 'image');
	Factory_1.Factory.addComponentsGetterSetter(Image, 'crop', ['x', 'y', 'width', 'height']);
	Factory_1.Factory.addGetterSetter(Image, 'cropX', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Image, 'cropY', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Image, 'cropWidth', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Image, 'cropHeight', 0, (0, Validators_1.getNumberValidator)());
	return Image$2;
}

var Label$8 = {};

var hasRequiredLabel;

function requireLabel () {
	if (hasRequiredLabel) return Label$8;
	hasRequiredLabel = 1;
	Object.defineProperty(Label$8, "__esModule", { value: true });
	Label$8.Tag = Label$8.Label = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Group_1 = requireGroup();
	const Validators_1 = requireValidators();
	const Global_1 = requireGlobal();
	var ATTR_CHANGE_LIST = [
	    'fontFamily',
	    'fontSize',
	    'fontStyle',
	    'padding',
	    'lineHeight',
	    'text',
	    'width',
	    'height',
	    'pointerDirection',
	    'pointerWidth',
	    'pointerHeight',
	], CHANGE_KONVA = 'Change.konva', NONE = 'none', UP = 'up', RIGHT = 'right', DOWN = 'down', LEFT = 'left', attrChangeListLen = ATTR_CHANGE_LIST.length;
	class Label extends Group_1.Group {
	    constructor(config) {
	        super(config);
	        this.on('add.konva', function (evt) {
	            this._addListeners(evt.child);
	            this._sync();
	        });
	    }
	    getText() {
	        return this.find('Text')[0];
	    }
	    getTag() {
	        return this.find('Tag')[0];
	    }
	    _addListeners(text) {
	        var that = this, n;
	        var func = function () {
	            that._sync();
	        };
	        for (n = 0; n < attrChangeListLen; n++) {
	            text.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, func);
	        }
	    }
	    getWidth() {
	        return this.getText().width();
	    }
	    getHeight() {
	        return this.getText().height();
	    }
	    _sync() {
	        var text = this.getText(), tag = this.getTag(), width, height, pointerDirection, pointerWidth, x, y, pointerHeight;
	        if (text && tag) {
	            width = text.width();
	            height = text.height();
	            pointerDirection = tag.pointerDirection();
	            pointerWidth = tag.pointerWidth();
	            pointerHeight = tag.pointerHeight();
	            x = 0;
	            y = 0;
	            switch (pointerDirection) {
	                case UP:
	                    x = width / 2;
	                    y = -1 * pointerHeight;
	                    break;
	                case RIGHT:
	                    x = width + pointerWidth;
	                    y = height / 2;
	                    break;
	                case DOWN:
	                    x = width / 2;
	                    y = height + pointerHeight;
	                    break;
	                case LEFT:
	                    x = -1 * pointerWidth;
	                    y = height / 2;
	                    break;
	            }
	            tag.setAttrs({
	                x: -1 * x,
	                y: -1 * y,
	                width: width,
	                height: height,
	            });
	            text.setAttrs({
	                x: -1 * x,
	                y: -1 * y,
	            });
	        }
	    }
	}
	Label$8.Label = Label;
	Label.prototype.className = 'Label';
	(0, Global_1._registerNode)(Label);
	class Tag extends Shape_1.Shape {
	    _sceneFunc(context) {
	        var width = this.width(), height = this.height(), pointerDirection = this.pointerDirection(), pointerWidth = this.pointerWidth(), pointerHeight = this.pointerHeight(), cornerRadius = this.cornerRadius();
	        let topLeft = 0;
	        let topRight = 0;
	        let bottomLeft = 0;
	        let bottomRight = 0;
	        if (typeof cornerRadius === 'number') {
	            topLeft =
	                topRight =
	                    bottomLeft =
	                        bottomRight =
	                            Math.min(cornerRadius, width / 2, height / 2);
	        }
	        else {
	            topLeft = Math.min(cornerRadius[0] || 0, width / 2, height / 2);
	            topRight = Math.min(cornerRadius[1] || 0, width / 2, height / 2);
	            bottomRight = Math.min(cornerRadius[2] || 0, width / 2, height / 2);
	            bottomLeft = Math.min(cornerRadius[3] || 0, width / 2, height / 2);
	        }
	        context.beginPath();
	        context.moveTo(topLeft, 0);
	        if (pointerDirection === UP) {
	            context.lineTo((width - pointerWidth) / 2, 0);
	            context.lineTo(width / 2, -1 * pointerHeight);
	            context.lineTo((width + pointerWidth) / 2, 0);
	        }
	        context.lineTo(width - topRight, 0);
	        context.arc(width - topRight, topRight, topRight, (Math.PI * 3) / 2, 0, false);
	        if (pointerDirection === RIGHT) {
	            context.lineTo(width, (height - pointerHeight) / 2);
	            context.lineTo(width + pointerWidth, height / 2);
	            context.lineTo(width, (height + pointerHeight) / 2);
	        }
	        context.lineTo(width, height - bottomRight);
	        context.arc(width - bottomRight, height - bottomRight, bottomRight, 0, Math.PI / 2, false);
	        if (pointerDirection === DOWN) {
	            context.lineTo((width + pointerWidth) / 2, height);
	            context.lineTo(width / 2, height + pointerHeight);
	            context.lineTo((width - pointerWidth) / 2, height);
	        }
	        context.lineTo(bottomLeft, height);
	        context.arc(bottomLeft, height - bottomLeft, bottomLeft, Math.PI / 2, Math.PI, false);
	        if (pointerDirection === LEFT) {
	            context.lineTo(0, (height + pointerHeight) / 2);
	            context.lineTo(-1 * pointerWidth, height / 2);
	            context.lineTo(0, (height - pointerHeight) / 2);
	        }
	        context.lineTo(0, topLeft);
	        context.arc(topLeft, topLeft, topLeft, Math.PI, (Math.PI * 3) / 2, false);
	        context.closePath();
	        context.fillStrokeShape(this);
	    }
	    getSelfRect() {
	        var x = 0, y = 0, pointerWidth = this.pointerWidth(), pointerHeight = this.pointerHeight(), direction = this.pointerDirection(), width = this.width(), height = this.height();
	        if (direction === UP) {
	            y -= pointerHeight;
	            height += pointerHeight;
	        }
	        else if (direction === DOWN) {
	            height += pointerHeight;
	        }
	        else if (direction === LEFT) {
	            x -= pointerWidth * 1.5;
	            width += pointerWidth;
	        }
	        else if (direction === RIGHT) {
	            width += pointerWidth * 1.5;
	        }
	        return {
	            x: x,
	            y: y,
	            width: width,
	            height: height,
	        };
	    }
	}
	Label$8.Tag = Tag;
	Tag.prototype.className = 'Tag';
	(0, Global_1._registerNode)(Tag);
	Factory_1.Factory.addGetterSetter(Tag, 'pointerDirection', NONE);
	Factory_1.Factory.addGetterSetter(Tag, 'pointerWidth', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Tag, 'pointerHeight', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Tag, 'cornerRadius', 0, (0, Validators_1.getNumberOrArrayOfNumbersValidator)(4));
	return Label$8;
}

var Rect$1 = {};

var hasRequiredRect;

function requireRect () {
	if (hasRequiredRect) return Rect$1;
	hasRequiredRect = 1;
	Object.defineProperty(Rect$1, "__esModule", { value: true });
	Rect$1.Rect = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Global_1 = requireGlobal();
	const Util_1 = requireUtil();
	const Validators_1 = requireValidators();
	class Rect extends Shape_1.Shape {
	    _sceneFunc(context) {
	        var cornerRadius = this.cornerRadius(), width = this.width(), height = this.height();
	        context.beginPath();
	        if (!cornerRadius) {
	            context.rect(0, 0, width, height);
	        }
	        else {
	            Util_1.Util.drawRoundedRectPath(context, width, height, cornerRadius);
	        }
	        context.closePath();
	        context.fillStrokeShape(this);
	    }
	}
	Rect$1.Rect = Rect;
	Rect.prototype.className = 'Rect';
	(0, Global_1._registerNode)(Rect);
	Factory_1.Factory.addGetterSetter(Rect, 'cornerRadius', 0, (0, Validators_1.getNumberOrArrayOfNumbersValidator)(4));
	return Rect$1;
}

var RegularPolygon$1 = {};

var hasRequiredRegularPolygon;

function requireRegularPolygon () {
	if (hasRequiredRegularPolygon) return RegularPolygon$1;
	hasRequiredRegularPolygon = 1;
	Object.defineProperty(RegularPolygon$1, "__esModule", { value: true });
	RegularPolygon$1.RegularPolygon = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Validators_1 = requireValidators();
	const Global_1 = requireGlobal();
	class RegularPolygon extends Shape_1.Shape {
	    _sceneFunc(context) {
	        const points = this._getPoints();
	        context.beginPath();
	        context.moveTo(points[0].x, points[0].y);
	        for (var n = 1; n < points.length; n++) {
	            context.lineTo(points[n].x, points[n].y);
	        }
	        context.closePath();
	        context.fillStrokeShape(this);
	    }
	    _getPoints() {
	        const sides = this.attrs.sides;
	        const radius = this.attrs.radius || 0;
	        const points = [];
	        for (var n = 0; n < sides; n++) {
	            points.push({
	                x: radius * Math.sin((n * 2 * Math.PI) / sides),
	                y: -1 * radius * Math.cos((n * 2 * Math.PI) / sides),
	            });
	        }
	        return points;
	    }
	    getSelfRect() {
	        const points = this._getPoints();
	        var minX = points[0].x;
	        var maxX = points[0].y;
	        var minY = points[0].x;
	        var maxY = points[0].y;
	        points.forEach((point) => {
	            minX = Math.min(minX, point.x);
	            maxX = Math.max(maxX, point.x);
	            minY = Math.min(minY, point.y);
	            maxY = Math.max(maxY, point.y);
	        });
	        return {
	            x: minX,
	            y: minY,
	            width: maxX - minX,
	            height: maxY - minY,
	        };
	    }
	    getWidth() {
	        return this.radius() * 2;
	    }
	    getHeight() {
	        return this.radius() * 2;
	    }
	    setWidth(width) {
	        this.radius(width / 2);
	    }
	    setHeight(height) {
	        this.radius(height / 2);
	    }
	}
	RegularPolygon$1.RegularPolygon = RegularPolygon;
	RegularPolygon.prototype.className = 'RegularPolygon';
	RegularPolygon.prototype._centroid = true;
	RegularPolygon.prototype._attrsAffectingSize = ['radius'];
	(0, Global_1._registerNode)(RegularPolygon);
	Factory_1.Factory.addGetterSetter(RegularPolygon, 'radius', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(RegularPolygon, 'sides', 0, (0, Validators_1.getNumberValidator)());
	return RegularPolygon$1;
}

var Ring = {};

var hasRequiredRing;

function requireRing () {
	if (hasRequiredRing) return Ring;
	hasRequiredRing = 1;
	Object.defineProperty(Ring, "__esModule", { value: true });
	Ring.Ring = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Validators_1 = requireValidators();
	const Global_1 = requireGlobal();
	var PIx2 = Math.PI * 2;
	let Ring$1 = class Ring extends Shape_1.Shape {
	    _sceneFunc(context) {
	        context.beginPath();
	        context.arc(0, 0, this.innerRadius(), 0, PIx2, false);
	        context.moveTo(this.outerRadius(), 0);
	        context.arc(0, 0, this.outerRadius(), PIx2, 0, true);
	        context.closePath();
	        context.fillStrokeShape(this);
	    }
	    getWidth() {
	        return this.outerRadius() * 2;
	    }
	    getHeight() {
	        return this.outerRadius() * 2;
	    }
	    setWidth(width) {
	        this.outerRadius(width / 2);
	    }
	    setHeight(height) {
	        this.outerRadius(height / 2);
	    }
	};
	Ring.Ring = Ring$1;
	Ring$1.prototype.className = 'Ring';
	Ring$1.prototype._centroid = true;
	Ring$1.prototype._attrsAffectingSize = ['innerRadius', 'outerRadius'];
	(0, Global_1._registerNode)(Ring$1);
	Factory_1.Factory.addGetterSetter(Ring$1, 'innerRadius', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Ring$1, 'outerRadius', 0, (0, Validators_1.getNumberValidator)());
	return Ring;
}

var Sprite = {};

var hasRequiredSprite;

function requireSprite () {
	if (hasRequiredSprite) return Sprite;
	hasRequiredSprite = 1;
	Object.defineProperty(Sprite, "__esModule", { value: true });
	Sprite.Sprite = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Animation_1 = requireAnimation();
	const Validators_1 = requireValidators();
	const Global_1 = requireGlobal();
	let Sprite$1 = class Sprite extends Shape_1.Shape {
	    constructor(config) {
	        super(config);
	        this._updated = true;
	        this.anim = new Animation_1.Animation(() => {
	            var updated = this._updated;
	            this._updated = false;
	            return updated;
	        });
	        this.on('animationChange.konva', function () {
	            this.frameIndex(0);
	        });
	        this.on('frameIndexChange.konva', function () {
	            this._updated = true;
	        });
	        this.on('frameRateChange.konva', function () {
	            if (!this.anim.isRunning()) {
	                return;
	            }
	            clearInterval(this.interval);
	            this._setInterval();
	        });
	    }
	    _sceneFunc(context) {
	        var anim = this.animation(), index = this.frameIndex(), ix4 = index * 4, set = this.animations()[anim], offsets = this.frameOffsets(), x = set[ix4 + 0], y = set[ix4 + 1], width = set[ix4 + 2], height = set[ix4 + 3], image = this.image();
	        if (this.hasFill() || this.hasStroke()) {
	            context.beginPath();
	            context.rect(0, 0, width, height);
	            context.closePath();
	            context.fillStrokeShape(this);
	        }
	        if (image) {
	            if (offsets) {
	                var offset = offsets[anim], ix2 = index * 2;
	                context.drawImage(image, x, y, width, height, offset[ix2 + 0], offset[ix2 + 1], width, height);
	            }
	            else {
	                context.drawImage(image, x, y, width, height, 0, 0, width, height);
	            }
	        }
	    }
	    _hitFunc(context) {
	        var anim = this.animation(), index = this.frameIndex(), ix4 = index * 4, set = this.animations()[anim], offsets = this.frameOffsets(), width = set[ix4 + 2], height = set[ix4 + 3];
	        context.beginPath();
	        if (offsets) {
	            var offset = offsets[anim];
	            var ix2 = index * 2;
	            context.rect(offset[ix2 + 0], offset[ix2 + 1], width, height);
	        }
	        else {
	            context.rect(0, 0, width, height);
	        }
	        context.closePath();
	        context.fillShape(this);
	    }
	    _useBufferCanvas() {
	        return super._useBufferCanvas(true);
	    }
	    _setInterval() {
	        var that = this;
	        this.interval = setInterval(function () {
	            that._updateIndex();
	        }, 1000 / this.frameRate());
	    }
	    start() {
	        if (this.isRunning()) {
	            return;
	        }
	        var layer = this.getLayer();
	        this.anim.setLayers(layer);
	        this._setInterval();
	        this.anim.start();
	    }
	    stop() {
	        this.anim.stop();
	        clearInterval(this.interval);
	    }
	    isRunning() {
	        return this.anim.isRunning();
	    }
	    _updateIndex() {
	        var index = this.frameIndex(), animation = this.animation(), animations = this.animations(), anim = animations[animation], len = anim.length / 4;
	        if (index < len - 1) {
	            this.frameIndex(index + 1);
	        }
	        else {
	            this.frameIndex(0);
	        }
	    }
	};
	Sprite.Sprite = Sprite$1;
	Sprite$1.prototype.className = 'Sprite';
	(0, Global_1._registerNode)(Sprite$1);
	Factory_1.Factory.addGetterSetter(Sprite$1, 'animation');
	Factory_1.Factory.addGetterSetter(Sprite$1, 'animations');
	Factory_1.Factory.addGetterSetter(Sprite$1, 'frameOffsets');
	Factory_1.Factory.addGetterSetter(Sprite$1, 'image');
	Factory_1.Factory.addGetterSetter(Sprite$1, 'frameIndex', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Sprite$1, 'frameRate', 17, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.backCompat(Sprite$1, {
	    index: 'frameIndex',
	    getIndex: 'getFrameIndex',
	    setIndex: 'setFrameIndex',
	});
	return Sprite;
}

var Star = {};

var hasRequiredStar;

function requireStar () {
	if (hasRequiredStar) return Star;
	hasRequiredStar = 1;
	Object.defineProperty(Star, "__esModule", { value: true });
	Star.Star = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Validators_1 = requireValidators();
	const Global_1 = requireGlobal();
	let Star$1 = class Star extends Shape_1.Shape {
	    _sceneFunc(context) {
	        var innerRadius = this.innerRadius(), outerRadius = this.outerRadius(), numPoints = this.numPoints();
	        context.beginPath();
	        context.moveTo(0, 0 - outerRadius);
	        for (var n = 1; n < numPoints * 2; n++) {
	            var radius = n % 2 === 0 ? outerRadius : innerRadius;
	            var x = radius * Math.sin((n * Math.PI) / numPoints);
	            var y = -1 * radius * Math.cos((n * Math.PI) / numPoints);
	            context.lineTo(x, y);
	        }
	        context.closePath();
	        context.fillStrokeShape(this);
	    }
	    getWidth() {
	        return this.outerRadius() * 2;
	    }
	    getHeight() {
	        return this.outerRadius() * 2;
	    }
	    setWidth(width) {
	        this.outerRadius(width / 2);
	    }
	    setHeight(height) {
	        this.outerRadius(height / 2);
	    }
	};
	Star.Star = Star$1;
	Star$1.prototype.className = 'Star';
	Star$1.prototype._centroid = true;
	Star$1.prototype._attrsAffectingSize = ['innerRadius', 'outerRadius'];
	(0, Global_1._registerNode)(Star$1);
	Factory_1.Factory.addGetterSetter(Star$1, 'numPoints', 5, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Star$1, 'innerRadius', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Star$1, 'outerRadius', 0, (0, Validators_1.getNumberValidator)());
	return Star;
}

var Text$4 = {};

var hasRequiredText;

function requireText () {
	if (hasRequiredText) return Text$4;
	hasRequiredText = 1;
	Object.defineProperty(Text$4, "__esModule", { value: true });
	Text$4.Text = Text$4.stringToArray = void 0;
	const Util_1 = requireUtil();
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Validators_1 = requireValidators();
	const Global_1 = requireGlobal();
	function stringToArray(string) {
	    return Array.from(string);
	}
	Text$4.stringToArray = stringToArray;
	var AUTO = 'auto', CENTER = 'center', INHERIT = 'inherit', JUSTIFY = 'justify', CHANGE_KONVA = 'Change.konva', CONTEXT_2D = '2d', DASH = '-', LEFT = 'left', TEXT = 'text', TEXT_UPPER = 'Text', TOP = 'top', BOTTOM = 'bottom', MIDDLE = 'middle', NORMAL = 'normal', PX_SPACE = 'px ', SPACE = ' ', RIGHT = 'right', RTL = 'rtl', WORD = 'word', CHAR = 'char', NONE = 'none', ELLIPSIS = '…', ATTR_CHANGE_LIST = [
	    'direction',
	    'fontFamily',
	    'fontSize',
	    'fontStyle',
	    'fontVariant',
	    'padding',
	    'align',
	    'verticalAlign',
	    'lineHeight',
	    'text',
	    'width',
	    'height',
	    'wrap',
	    'ellipsis',
	    'letterSpacing',
	], attrChangeListLen = ATTR_CHANGE_LIST.length;
	function normalizeFontFamily(fontFamily) {
	    return fontFamily
	        .split(',')
	        .map((family) => {
	        family = family.trim();
	        const hasSpace = family.indexOf(' ') >= 0;
	        const hasQuotes = family.indexOf('"') >= 0 || family.indexOf("'") >= 0;
	        if (hasSpace && !hasQuotes) {
	            family = `"${family}"`;
	        }
	        return family;
	    })
	        .join(', ');
	}
	var dummyContext;
	function getDummyContext() {
	    if (dummyContext) {
	        return dummyContext;
	    }
	    dummyContext = Util_1.Util.createCanvasElement().getContext(CONTEXT_2D);
	    return dummyContext;
	}
	function _fillFunc(context) {
	    context.fillText(this._partialText, this._partialTextX, this._partialTextY);
	}
	function _strokeFunc(context) {
	    context.setAttr('miterLimit', 2);
	    context.strokeText(this._partialText, this._partialTextX, this._partialTextY);
	}
	function checkDefaultFill(config) {
	    config = config || {};
	    if (!config.fillLinearGradientColorStops &&
	        !config.fillRadialGradientColorStops &&
	        !config.fillPatternImage) {
	        config.fill = config.fill || 'black';
	    }
	    return config;
	}
	class Text extends Shape_1.Shape {
	    constructor(config) {
	        super(checkDefaultFill(config));
	        this._partialTextX = 0;
	        this._partialTextY = 0;
	        for (var n = 0; n < attrChangeListLen; n++) {
	            this.on(ATTR_CHANGE_LIST[n] + CHANGE_KONVA, this._setTextData);
	        }
	        this._setTextData();
	    }
	    _sceneFunc(context) {
	        var textArr = this.textArr, textArrLen = textArr.length;
	        if (!this.text()) {
	            return;
	        }
	        var padding = this.padding(), fontSize = this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, verticalAlign = this.verticalAlign(), direction = this.direction(), alignY = 0, align = this.align(), totalWidth = this.getWidth(), letterSpacing = this.letterSpacing(), fill = this.fill(), textDecoration = this.textDecoration(), shouldUnderline = textDecoration.indexOf('underline') !== -1, shouldLineThrough = textDecoration.indexOf('line-through') !== -1, n;
	        direction = direction === INHERIT ? context.direction : direction;
	        var translateY = 0;
	        var translateY = lineHeightPx / 2;
	        var lineTranslateX = 0;
	        var lineTranslateY = 0;
	        if (direction === RTL) {
	            context.setAttr('direction', direction);
	        }
	        context.setAttr('font', this._getContextFont());
	        context.setAttr('textBaseline', MIDDLE);
	        context.setAttr('textAlign', LEFT);
	        if (verticalAlign === MIDDLE) {
	            alignY = (this.getHeight() - textArrLen * lineHeightPx - padding * 2) / 2;
	        }
	        else if (verticalAlign === BOTTOM) {
	            alignY = this.getHeight() - textArrLen * lineHeightPx - padding * 2;
	        }
	        context.translate(padding, alignY + padding);
	        for (n = 0; n < textArrLen; n++) {
	            var lineTranslateX = 0;
	            var lineTranslateY = 0;
	            var obj = textArr[n], text = obj.text, width = obj.width, lastLine = obj.lastInParagraph, spacesNumber, oneWord, lineWidth;
	            context.save();
	            if (align === RIGHT) {
	                lineTranslateX += totalWidth - width - padding * 2;
	            }
	            else if (align === CENTER) {
	                lineTranslateX += (totalWidth - width - padding * 2) / 2;
	            }
	            if (shouldUnderline) {
	                context.save();
	                context.beginPath();
	                context.moveTo(lineTranslateX, translateY + lineTranslateY + Math.round(fontSize / 2));
	                spacesNumber = text.split(' ').length - 1;
	                oneWord = spacesNumber === 0;
	                lineWidth =
	                    align === JUSTIFY && !lastLine ? totalWidth - padding * 2 : width;
	                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY + Math.round(fontSize / 2));
	                context.lineWidth = fontSize / 15;
	                const gradient = this._getLinearGradient();
	                context.strokeStyle = gradient || fill;
	                context.stroke();
	                context.restore();
	            }
	            if (shouldLineThrough) {
	                context.save();
	                context.beginPath();
	                context.moveTo(lineTranslateX, translateY + lineTranslateY);
	                spacesNumber = text.split(' ').length - 1;
	                oneWord = spacesNumber === 0;
	                lineWidth =
	                    align === JUSTIFY && lastLine && !oneWord
	                        ? totalWidth - padding * 2
	                        : width;
	                context.lineTo(lineTranslateX + Math.round(lineWidth), translateY + lineTranslateY);
	                context.lineWidth = fontSize / 15;
	                const gradient = this._getLinearGradient();
	                context.strokeStyle = gradient || fill;
	                context.stroke();
	                context.restore();
	            }
	            if (direction !== RTL && (letterSpacing !== 0 || align === JUSTIFY)) {
	                spacesNumber = text.split(' ').length - 1;
	                var array = stringToArray(text);
	                for (var li = 0; li < array.length; li++) {
	                    var letter = array[li];
	                    if (letter === ' ' && !lastLine && align === JUSTIFY) {
	                        lineTranslateX += (totalWidth - padding * 2 - width) / spacesNumber;
	                    }
	                    this._partialTextX = lineTranslateX;
	                    this._partialTextY = translateY + lineTranslateY;
	                    this._partialText = letter;
	                    context.fillStrokeShape(this);
	                    lineTranslateX += this.measureSize(letter).width + letterSpacing;
	                }
	            }
	            else {
	                if (letterSpacing !== 0) {
	                    context.setAttr('letterSpacing', `${letterSpacing}px`);
	                }
	                this._partialTextX = lineTranslateX;
	                this._partialTextY = translateY + lineTranslateY;
	                this._partialText = text;
	                context.fillStrokeShape(this);
	            }
	            context.restore();
	            if (textArrLen > 1) {
	                translateY += lineHeightPx;
	            }
	        }
	    }
	    _hitFunc(context) {
	        var width = this.getWidth(), height = this.getHeight();
	        context.beginPath();
	        context.rect(0, 0, width, height);
	        context.closePath();
	        context.fillStrokeShape(this);
	    }
	    setText(text) {
	        var str = Util_1.Util._isString(text)
	            ? text
	            : text === null || text === undefined
	                ? ''
	                : text + '';
	        this._setAttr(TEXT, str);
	        return this;
	    }
	    getWidth() {
	        var isAuto = this.attrs.width === AUTO || this.attrs.width === undefined;
	        return isAuto ? this.getTextWidth() + this.padding() * 2 : this.attrs.width;
	    }
	    getHeight() {
	        var isAuto = this.attrs.height === AUTO || this.attrs.height === undefined;
	        return isAuto
	            ? this.fontSize() * this.textArr.length * this.lineHeight() +
	                this.padding() * 2
	            : this.attrs.height;
	    }
	    getTextWidth() {
	        return this.textWidth;
	    }
	    getTextHeight() {
	        Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');
	        return this.textHeight;
	    }
	    measureSize(text) {
	        var _context = getDummyContext(), fontSize = this.fontSize(), metrics;
	        _context.save();
	        _context.font = this._getContextFont();
	        metrics = _context.measureText(text);
	        _context.restore();
	        return {
	            width: metrics.width,
	            height: fontSize,
	        };
	    }
	    _getContextFont() {
	        return (this.fontStyle() +
	            SPACE +
	            this.fontVariant() +
	            SPACE +
	            (this.fontSize() + PX_SPACE) +
	            normalizeFontFamily(this.fontFamily()));
	    }
	    _addTextLine(line) {
	        const align = this.align();
	        if (align === JUSTIFY) {
	            line = line.trim();
	        }
	        var width = this._getTextWidth(line);
	        return this.textArr.push({
	            text: line,
	            width: width,
	            lastInParagraph: false,
	        });
	    }
	    _getTextWidth(text) {
	        var letterSpacing = this.letterSpacing();
	        var length = text.length;
	        return (getDummyContext().measureText(text).width +
	            (length ? letterSpacing * (length - 1) : 0));
	    }
	    _setTextData() {
	        var lines = this.text().split('\n'), fontSize = +this.fontSize(), textWidth = 0, lineHeightPx = this.lineHeight() * fontSize, width = this.attrs.width, height = this.attrs.height, fixedWidth = width !== AUTO && width !== undefined, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxWidth = width - padding * 2, maxHeightPx = height - padding * 2, currentHeightPx = 0, wrap = this.wrap(), shouldWrap = wrap !== NONE, wrapAtWord = wrap !== CHAR && shouldWrap, shouldAddEllipsis = this.ellipsis();
	        this.textArr = [];
	        getDummyContext().font = this._getContextFont();
	        var additionalWidth = shouldAddEllipsis ? this._getTextWidth(ELLIPSIS) : 0;
	        for (var i = 0, max = lines.length; i < max; ++i) {
	            var line = lines[i];
	            var lineWidth = this._getTextWidth(line);
	            if (fixedWidth && lineWidth > maxWidth) {
	                while (line.length > 0) {
	                    var low = 0, high = line.length, match = '', matchWidth = 0;
	                    while (low < high) {
	                        var mid = (low + high) >>> 1, substr = line.slice(0, mid + 1), substrWidth = this._getTextWidth(substr) + additionalWidth;
	                        if (substrWidth <= maxWidth) {
	                            low = mid + 1;
	                            match = substr;
	                            matchWidth = substrWidth;
	                        }
	                        else {
	                            high = mid;
	                        }
	                    }
	                    if (match) {
	                        if (wrapAtWord) {
	                            var wrapIndex;
	                            var nextChar = line[match.length];
	                            var nextIsSpaceOrDash = nextChar === SPACE || nextChar === DASH;
	                            if (nextIsSpaceOrDash && matchWidth <= maxWidth) {
	                                wrapIndex = match.length;
	                            }
	                            else {
	                                wrapIndex =
	                                    Math.max(match.lastIndexOf(SPACE), match.lastIndexOf(DASH)) +
	                                        1;
	                            }
	                            if (wrapIndex > 0) {
	                                low = wrapIndex;
	                                match = match.slice(0, low);
	                                matchWidth = this._getTextWidth(match);
	                            }
	                        }
	                        match = match.trimRight();
	                        this._addTextLine(match);
	                        textWidth = Math.max(textWidth, matchWidth);
	                        currentHeightPx += lineHeightPx;
	                        var shouldHandleEllipsis = this._shouldHandleEllipsis(currentHeightPx);
	                        if (shouldHandleEllipsis) {
	                            this._tryToAddEllipsisToLastLine();
	                            break;
	                        }
	                        line = line.slice(low);
	                        line = line.trimLeft();
	                        if (line.length > 0) {
	                            lineWidth = this._getTextWidth(line);
	                            if (lineWidth <= maxWidth) {
	                                this._addTextLine(line);
	                                currentHeightPx += lineHeightPx;
	                                textWidth = Math.max(textWidth, lineWidth);
	                                break;
	                            }
	                        }
	                    }
	                    else {
	                        break;
	                    }
	                }
	            }
	            else {
	                this._addTextLine(line);
	                currentHeightPx += lineHeightPx;
	                textWidth = Math.max(textWidth, lineWidth);
	                if (this._shouldHandleEllipsis(currentHeightPx) && i < max - 1) {
	                    this._tryToAddEllipsisToLastLine();
	                }
	            }
	            if (this.textArr[this.textArr.length - 1]) {
	                this.textArr[this.textArr.length - 1].lastInParagraph = true;
	            }
	            if (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx) {
	                break;
	            }
	        }
	        this.textHeight = fontSize;
	        this.textWidth = textWidth;
	    }
	    _shouldHandleEllipsis(currentHeightPx) {
	        var fontSize = +this.fontSize(), lineHeightPx = this.lineHeight() * fontSize, height = this.attrs.height, fixedHeight = height !== AUTO && height !== undefined, padding = this.padding(), maxHeightPx = height - padding * 2, wrap = this.wrap(), shouldWrap = wrap !== NONE;
	        return (!shouldWrap ||
	            (fixedHeight && currentHeightPx + lineHeightPx > maxHeightPx));
	    }
	    _tryToAddEllipsisToLastLine() {
	        var width = this.attrs.width, fixedWidth = width !== AUTO && width !== undefined, padding = this.padding(), maxWidth = width - padding * 2, shouldAddEllipsis = this.ellipsis();
	        var lastLine = this.textArr[this.textArr.length - 1];
	        if (!lastLine || !shouldAddEllipsis) {
	            return;
	        }
	        if (fixedWidth) {
	            var haveSpace = this._getTextWidth(lastLine.text + ELLIPSIS) < maxWidth;
	            if (!haveSpace) {
	                lastLine.text = lastLine.text.slice(0, lastLine.text.length - 3);
	            }
	        }
	        this.textArr.splice(this.textArr.length - 1, 1);
	        this._addTextLine(lastLine.text + ELLIPSIS);
	    }
	    getStrokeScaleEnabled() {
	        return true;
	    }
	    _useBufferCanvas() {
	        const hasLine = this.textDecoration().indexOf('underline') !== -1 ||
	            this.textDecoration().indexOf('line-through') !== -1;
	        const hasShadow = this.hasShadow();
	        if (hasLine && hasShadow) {
	            return true;
	        }
	        return super._useBufferCanvas();
	    }
	}
	Text$4.Text = Text;
	Text.prototype._fillFunc = _fillFunc;
	Text.prototype._strokeFunc = _strokeFunc;
	Text.prototype.className = TEXT_UPPER;
	Text.prototype._attrsAffectingSize = [
	    'text',
	    'fontSize',
	    'padding',
	    'wrap',
	    'lineHeight',
	    'letterSpacing',
	];
	(0, Global_1._registerNode)(Text);
	Factory_1.Factory.overWriteSetter(Text, 'width', (0, Validators_1.getNumberOrAutoValidator)());
	Factory_1.Factory.overWriteSetter(Text, 'height', (0, Validators_1.getNumberOrAutoValidator)());
	Factory_1.Factory.addGetterSetter(Text, 'direction', INHERIT);
	Factory_1.Factory.addGetterSetter(Text, 'fontFamily', 'Arial');
	Factory_1.Factory.addGetterSetter(Text, 'fontSize', 12, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Text, 'fontStyle', NORMAL);
	Factory_1.Factory.addGetterSetter(Text, 'fontVariant', NORMAL);
	Factory_1.Factory.addGetterSetter(Text, 'padding', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Text, 'align', LEFT);
	Factory_1.Factory.addGetterSetter(Text, 'verticalAlign', TOP);
	Factory_1.Factory.addGetterSetter(Text, 'lineHeight', 1, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Text, 'wrap', WORD);
	Factory_1.Factory.addGetterSetter(Text, 'ellipsis', false, (0, Validators_1.getBooleanValidator)());
	Factory_1.Factory.addGetterSetter(Text, 'letterSpacing', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Text, 'text', '', (0, Validators_1.getStringValidator)());
	Factory_1.Factory.addGetterSetter(Text, 'textDecoration', '');
	return Text$4;
}

var TextPath = {};

var hasRequiredTextPath;

function requireTextPath () {
	if (hasRequiredTextPath) return TextPath;
	hasRequiredTextPath = 1;
	Object.defineProperty(TextPath, "__esModule", { value: true });
	TextPath.TextPath = void 0;
	const Util_1 = requireUtil();
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Path_1 = requirePath();
	const Text_1 = requireText();
	const Validators_1 = requireValidators();
	const Global_1 = requireGlobal();
	var EMPTY_STRING = '', NORMAL = 'normal';
	function _fillFunc(context) {
	    context.fillText(this.partialText, 0, 0);
	}
	function _strokeFunc(context) {
	    context.strokeText(this.partialText, 0, 0);
	}
	let TextPath$1 = class TextPath extends Shape_1.Shape {
	    constructor(config) {
	        super(config);
	        this.dummyCanvas = Util_1.Util.createCanvasElement();
	        this.dataArray = [];
	        this._readDataAttribute();
	        this.on('dataChange.konva', function () {
	            this._readDataAttribute();
	            this._setTextData();
	        });
	        this.on('textChange.konva alignChange.konva letterSpacingChange.konva kerningFuncChange.konva fontSizeChange.konva fontFamilyChange.konva', this._setTextData);
	        this._setTextData();
	    }
	    _getTextPathLength() {
	        return Path_1.Path.getPathLength(this.dataArray);
	    }
	    _getPointAtLength(length) {
	        if (!this.attrs.data) {
	            return null;
	        }
	        const totalLength = this.pathLength;
	        if (length - 1 > totalLength) {
	            return null;
	        }
	        return Path_1.Path.getPointAtLengthOfDataArray(length, this.dataArray);
	    }
	    _readDataAttribute() {
	        this.dataArray = Path_1.Path.parsePathData(this.attrs.data);
	        this.pathLength = this._getTextPathLength();
	    }
	    _sceneFunc(context) {
	        context.setAttr('font', this._getContextFont());
	        context.setAttr('textBaseline', this.textBaseline());
	        context.setAttr('textAlign', 'left');
	        context.save();
	        var textDecoration = this.textDecoration();
	        var fill = this.fill();
	        var fontSize = this.fontSize();
	        var glyphInfo = this.glyphInfo;
	        if (textDecoration === 'underline') {
	            context.beginPath();
	        }
	        for (var i = 0; i < glyphInfo.length; i++) {
	            context.save();
	            var p0 = glyphInfo[i].p0;
	            context.translate(p0.x, p0.y);
	            context.rotate(glyphInfo[i].rotation);
	            this.partialText = glyphInfo[i].text;
	            context.fillStrokeShape(this);
	            if (textDecoration === 'underline') {
	                if (i === 0) {
	                    context.moveTo(0, fontSize / 2 + 1);
	                }
	                context.lineTo(fontSize, fontSize / 2 + 1);
	            }
	            context.restore();
	        }
	        if (textDecoration === 'underline') {
	            context.strokeStyle = fill;
	            context.lineWidth = fontSize / 20;
	            context.stroke();
	        }
	        context.restore();
	    }
	    _hitFunc(context) {
	        context.beginPath();
	        var glyphInfo = this.glyphInfo;
	        if (glyphInfo.length >= 1) {
	            var p0 = glyphInfo[0].p0;
	            context.moveTo(p0.x, p0.y);
	        }
	        for (var i = 0; i < glyphInfo.length; i++) {
	            var p1 = glyphInfo[i].p1;
	            context.lineTo(p1.x, p1.y);
	        }
	        context.setAttr('lineWidth', this.fontSize());
	        context.setAttr('strokeStyle', this.colorKey);
	        context.stroke();
	    }
	    getTextWidth() {
	        return this.textWidth;
	    }
	    getTextHeight() {
	        Util_1.Util.warn('text.getTextHeight() method is deprecated. Use text.height() - for full height and text.fontSize() - for one line height.');
	        return this.textHeight;
	    }
	    setText(text) {
	        return Text_1.Text.prototype.setText.call(this, text);
	    }
	    _getContextFont() {
	        return Text_1.Text.prototype._getContextFont.call(this);
	    }
	    _getTextSize(text) {
	        var dummyCanvas = this.dummyCanvas;
	        var _context = dummyCanvas.getContext('2d');
	        _context.save();
	        _context.font = this._getContextFont();
	        var metrics = _context.measureText(text);
	        _context.restore();
	        return {
	            width: metrics.width,
	            height: parseInt(`${this.fontSize()}`, 10),
	        };
	    }
	    _setTextData() {
	        const { width, height } = this._getTextSize(this.attrs.text);
	        this.textWidth = width;
	        this.textHeight = height;
	        this.glyphInfo = [];
	        if (!this.attrs.data) {
	            return null;
	        }
	        const letterSpacing = this.letterSpacing();
	        const align = this.align();
	        const kerningFunc = this.kerningFunc();
	        const textWidth = Math.max(this.textWidth + ((this.attrs.text || '').length - 1) * letterSpacing, 0);
	        let offset = 0;
	        if (align === 'center') {
	            offset = Math.max(0, this.pathLength / 2 - textWidth / 2);
	        }
	        if (align === 'right') {
	            offset = Math.max(0, this.pathLength - textWidth);
	        }
	        const charArr = (0, Text_1.stringToArray)(this.text());
	        let offsetToGlyph = offset;
	        for (var i = 0; i < charArr.length; i++) {
	            const charStartPoint = this._getPointAtLength(offsetToGlyph);
	            if (!charStartPoint)
	                return;
	            let glyphWidth = this._getTextSize(charArr[i]).width + letterSpacing;
	            if (charArr[i] === ' ' && align === 'justify') {
	                const numberOfSpaces = this.text().split(' ').length - 1;
	                glyphWidth += (this.pathLength - textWidth) / numberOfSpaces;
	            }
	            const charEndPoint = this._getPointAtLength(offsetToGlyph + glyphWidth);
	            if (!charEndPoint)
	                return;
	            const width = Path_1.Path.getLineLength(charStartPoint.x, charStartPoint.y, charEndPoint.x, charEndPoint.y);
	            let kern = 0;
	            if (kerningFunc) {
	                try {
	                    kern = kerningFunc(charArr[i - 1], charArr[i]) * this.fontSize();
	                }
	                catch (e) {
	                    kern = 0;
	                }
	            }
	            charStartPoint.x += kern;
	            charEndPoint.x += kern;
	            this.textWidth += kern;
	            const midpoint = Path_1.Path.getPointOnLine(kern + width / 2.0, charStartPoint.x, charStartPoint.y, charEndPoint.x, charEndPoint.y);
	            const rotation = Math.atan2(charEndPoint.y - charStartPoint.y, charEndPoint.x - charStartPoint.x);
	            this.glyphInfo.push({
	                transposeX: midpoint.x,
	                transposeY: midpoint.y,
	                text: charArr[i],
	                rotation: rotation,
	                p0: charStartPoint,
	                p1: charEndPoint,
	            });
	            offsetToGlyph += glyphWidth;
	        }
	    }
	    getSelfRect() {
	        if (!this.glyphInfo.length) {
	            return {
	                x: 0,
	                y: 0,
	                width: 0,
	                height: 0,
	            };
	        }
	        var points = [];
	        this.glyphInfo.forEach(function (info) {
	            points.push(info.p0.x);
	            points.push(info.p0.y);
	            points.push(info.p1.x);
	            points.push(info.p1.y);
	        });
	        var minX = points[0] || 0;
	        var maxX = points[0] || 0;
	        var minY = points[1] || 0;
	        var maxY = points[1] || 0;
	        var x, y;
	        for (var i = 0; i < points.length / 2; i++) {
	            x = points[i * 2];
	            y = points[i * 2 + 1];
	            minX = Math.min(minX, x);
	            maxX = Math.max(maxX, x);
	            minY = Math.min(minY, y);
	            maxY = Math.max(maxY, y);
	        }
	        var fontSize = this.fontSize();
	        return {
	            x: minX - fontSize / 2,
	            y: minY - fontSize / 2,
	            width: maxX - minX + fontSize,
	            height: maxY - minY + fontSize,
	        };
	    }
	    destroy() {
	        Util_1.Util.releaseCanvas(this.dummyCanvas);
	        return super.destroy();
	    }
	};
	TextPath.TextPath = TextPath$1;
	TextPath$1.prototype._fillFunc = _fillFunc;
	TextPath$1.prototype._strokeFunc = _strokeFunc;
	TextPath$1.prototype._fillFuncHit = _fillFunc;
	TextPath$1.prototype._strokeFuncHit = _strokeFunc;
	TextPath$1.prototype.className = 'TextPath';
	TextPath$1.prototype._attrsAffectingSize = ['text', 'fontSize', 'data'];
	(0, Global_1._registerNode)(TextPath$1);
	Factory_1.Factory.addGetterSetter(TextPath$1, 'data');
	Factory_1.Factory.addGetterSetter(TextPath$1, 'fontFamily', 'Arial');
	Factory_1.Factory.addGetterSetter(TextPath$1, 'fontSize', 12, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(TextPath$1, 'fontStyle', NORMAL);
	Factory_1.Factory.addGetterSetter(TextPath$1, 'align', 'left');
	Factory_1.Factory.addGetterSetter(TextPath$1, 'letterSpacing', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(TextPath$1, 'textBaseline', 'middle');
	Factory_1.Factory.addGetterSetter(TextPath$1, 'fontVariant', NORMAL);
	Factory_1.Factory.addGetterSetter(TextPath$1, 'text', EMPTY_STRING);
	Factory_1.Factory.addGetterSetter(TextPath$1, 'textDecoration', null);
	Factory_1.Factory.addGetterSetter(TextPath$1, 'kerningFunc', null);
	return TextPath;
}

var Transformer$1 = {};

var hasRequiredTransformer;

function requireTransformer () {
	if (hasRequiredTransformer) return Transformer$1;
	hasRequiredTransformer = 1;
	Object.defineProperty(Transformer$1, "__esModule", { value: true });
	Transformer$1.Transformer = void 0;
	const Util_1 = requireUtil();
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Shape_1 = requireShape();
	const Rect_1 = requireRect();
	const Group_1 = requireGroup();
	const Global_1 = requireGlobal();
	const Validators_1 = requireValidators();
	const Global_2 = requireGlobal();
	var EVENTS_NAME = 'tr-konva';
	var ATTR_CHANGE_LIST = [
	    'resizeEnabledChange',
	    'rotateAnchorOffsetChange',
	    'rotateEnabledChange',
	    'enabledAnchorsChange',
	    'anchorSizeChange',
	    'borderEnabledChange',
	    'borderStrokeChange',
	    'borderStrokeWidthChange',
	    'borderDashChange',
	    'anchorStrokeChange',
	    'anchorStrokeWidthChange',
	    'anchorFillChange',
	    'anchorCornerRadiusChange',
	    'ignoreStrokeChange',
	    'anchorStyleFuncChange',
	]
	    .map((e) => e + `.${EVENTS_NAME}`)
	    .join(' ');
	var NODES_RECT = 'nodesRect';
	var TRANSFORM_CHANGE_STR = [
	    'widthChange',
	    'heightChange',
	    'scaleXChange',
	    'scaleYChange',
	    'skewXChange',
	    'skewYChange',
	    'rotationChange',
	    'offsetXChange',
	    'offsetYChange',
	    'transformsEnabledChange',
	    'strokeWidthChange',
	];
	var ANGLES = {
	    'top-left': -45,
	    'top-center': 0,
	    'top-right': 45,
	    'middle-right': -90,
	    'middle-left': 90,
	    'bottom-left': -135,
	    'bottom-center': 180,
	    'bottom-right': 135,
	};
	const TOUCH_DEVICE = 'ontouchstart' in Global_1.Konva._global;
	function getCursor(anchorName, rad, rotateCursor) {
	    if (anchorName === 'rotater') {
	        return rotateCursor;
	    }
	    rad += Util_1.Util.degToRad(ANGLES[anchorName] || 0);
	    var angle = ((Util_1.Util.radToDeg(rad) % 360) + 360) % 360;
	    if (Util_1.Util._inRange(angle, 315 + 22.5, 360) || Util_1.Util._inRange(angle, 0, 22.5)) {
	        return 'ns-resize';
	    }
	    else if (Util_1.Util._inRange(angle, 45 - 22.5, 45 + 22.5)) {
	        return 'nesw-resize';
	    }
	    else if (Util_1.Util._inRange(angle, 90 - 22.5, 90 + 22.5)) {
	        return 'ew-resize';
	    }
	    else if (Util_1.Util._inRange(angle, 135 - 22.5, 135 + 22.5)) {
	        return 'nwse-resize';
	    }
	    else if (Util_1.Util._inRange(angle, 180 - 22.5, 180 + 22.5)) {
	        return 'ns-resize';
	    }
	    else if (Util_1.Util._inRange(angle, 225 - 22.5, 225 + 22.5)) {
	        return 'nesw-resize';
	    }
	    else if (Util_1.Util._inRange(angle, 270 - 22.5, 270 + 22.5)) {
	        return 'ew-resize';
	    }
	    else if (Util_1.Util._inRange(angle, 315 - 22.5, 315 + 22.5)) {
	        return 'nwse-resize';
	    }
	    else {
	        Util_1.Util.error('Transformer has unknown angle for cursor detection: ' + angle);
	        return 'pointer';
	    }
	}
	var ANCHORS_NAMES = [
	    'top-left',
	    'top-center',
	    'top-right',
	    'middle-right',
	    'middle-left',
	    'bottom-left',
	    'bottom-center',
	    'bottom-right',
	];
	var MAX_SAFE_INTEGER = 100000000;
	function getCenter(shape) {
	    return {
	        x: shape.x +
	            (shape.width / 2) * Math.cos(shape.rotation) +
	            (shape.height / 2) * Math.sin(-shape.rotation),
	        y: shape.y +
	            (shape.height / 2) * Math.cos(shape.rotation) +
	            (shape.width / 2) * Math.sin(shape.rotation),
	    };
	}
	function rotateAroundPoint(shape, angleRad, point) {
	    const x = point.x +
	        (shape.x - point.x) * Math.cos(angleRad) -
	        (shape.y - point.y) * Math.sin(angleRad);
	    const y = point.y +
	        (shape.x - point.x) * Math.sin(angleRad) +
	        (shape.y - point.y) * Math.cos(angleRad);
	    return {
	        ...shape,
	        rotation: shape.rotation + angleRad,
	        x,
	        y,
	    };
	}
	function rotateAroundCenter(shape, deltaRad) {
	    const center = getCenter(shape);
	    return rotateAroundPoint(shape, deltaRad, center);
	}
	function getSnap(snaps, newRotationRad, tol) {
	    let snapped = newRotationRad;
	    for (let i = 0; i < snaps.length; i++) {
	        const angle = Global_1.Konva.getAngle(snaps[i]);
	        const absDiff = Math.abs(angle - newRotationRad) % (Math.PI * 2);
	        const dif = Math.min(absDiff, Math.PI * 2 - absDiff);
	        if (dif < tol) {
	            snapped = angle;
	        }
	    }
	    return snapped;
	}
	let activeTransformersCount = 0;
	class Transformer extends Group_1.Group {
	    constructor(config) {
	        super(config);
	        this._movingAnchorName = null;
	        this._transforming = false;
	        this._createElements();
	        this._handleMouseMove = this._handleMouseMove.bind(this);
	        this._handleMouseUp = this._handleMouseUp.bind(this);
	        this.update = this.update.bind(this);
	        this.on(ATTR_CHANGE_LIST, this.update);
	        if (this.getNode()) {
	            this.update();
	        }
	    }
	    attachTo(node) {
	        this.setNode(node);
	        return this;
	    }
	    setNode(node) {
	        Util_1.Util.warn('tr.setNode(shape), tr.node(shape) and tr.attachTo(shape) methods are deprecated. Please use tr.nodes(nodesArray) instead.');
	        return this.setNodes([node]);
	    }
	    getNode() {
	        return this._nodes && this._nodes[0];
	    }
	    _getEventNamespace() {
	        return EVENTS_NAME + this._id;
	    }
	    setNodes(nodes = []) {
	        if (this._nodes && this._nodes.length) {
	            this.detach();
	        }
	        const filteredNodes = nodes.filter((node) => {
	            if (node.isAncestorOf(this)) {
	                Util_1.Util.error('Konva.Transformer cannot be an a child of the node you are trying to attach');
	                return false;
	            }
	            return true;
	        });
	        this._nodes = nodes = filteredNodes;
	        if (nodes.length === 1 && this.useSingleNodeRotation()) {
	            this.rotation(nodes[0].getAbsoluteRotation());
	        }
	        else {
	            this.rotation(0);
	        }
	        this._nodes.forEach((node) => {
	            const onChange = () => {
	                if (this.nodes().length === 1 && this.useSingleNodeRotation()) {
	                    this.rotation(this.nodes()[0].getAbsoluteRotation());
	                }
	                this._resetTransformCache();
	                if (!this._transforming && !this.isDragging()) {
	                    this.update();
	                }
	            };
	            const additionalEvents = node._attrsAffectingSize
	                .map((prop) => prop + 'Change.' + this._getEventNamespace())
	                .join(' ');
	            node.on(additionalEvents, onChange);
	            node.on(TRANSFORM_CHANGE_STR.map((e) => e + `.${this._getEventNamespace()}`).join(' '), onChange);
	            node.on(`absoluteTransformChange.${this._getEventNamespace()}`, onChange);
	            this._proxyDrag(node);
	        });
	        this._resetTransformCache();
	        var elementsCreated = !!this.findOne('.top-left');
	        if (elementsCreated) {
	            this.update();
	        }
	        return this;
	    }
	    _proxyDrag(node) {
	        let lastPos;
	        node.on(`dragstart.${this._getEventNamespace()}`, (e) => {
	            lastPos = node.getAbsolutePosition();
	            if (!this.isDragging() && node !== this.findOne('.back')) {
	                this.startDrag(e, false);
	            }
	        });
	        node.on(`dragmove.${this._getEventNamespace()}`, (e) => {
	            if (!lastPos) {
	                return;
	            }
	            const abs = node.getAbsolutePosition();
	            const dx = abs.x - lastPos.x;
	            const dy = abs.y - lastPos.y;
	            this.nodes().forEach((otherNode) => {
	                if (otherNode === node) {
	                    return;
	                }
	                if (otherNode.isDragging()) {
	                    return;
	                }
	                const otherAbs = otherNode.getAbsolutePosition();
	                otherNode.setAbsolutePosition({
	                    x: otherAbs.x + dx,
	                    y: otherAbs.y + dy,
	                });
	                otherNode.startDrag(e);
	            });
	            lastPos = null;
	        });
	    }
	    getNodes() {
	        return this._nodes || [];
	    }
	    getActiveAnchor() {
	        return this._movingAnchorName;
	    }
	    detach() {
	        if (this._nodes) {
	            this._nodes.forEach((node) => {
	                node.off('.' + this._getEventNamespace());
	            });
	        }
	        this._nodes = [];
	        this._resetTransformCache();
	    }
	    _resetTransformCache() {
	        this._clearCache(NODES_RECT);
	        this._clearCache('transform');
	        this._clearSelfAndDescendantCache('absoluteTransform');
	    }
	    _getNodeRect() {
	        return this._getCache(NODES_RECT, this.__getNodeRect);
	    }
	    __getNodeShape(node, rot = this.rotation(), relative) {
	        var rect = node.getClientRect({
	            skipTransform: true,
	            skipShadow: true,
	            skipStroke: this.ignoreStroke(),
	        });
	        var absScale = node.getAbsoluteScale(relative);
	        var absPos = node.getAbsolutePosition(relative);
	        var dx = rect.x * absScale.x - node.offsetX() * absScale.x;
	        var dy = rect.y * absScale.y - node.offsetY() * absScale.y;
	        const rotation = (Global_1.Konva.getAngle(node.getAbsoluteRotation()) + Math.PI * 2) %
	            (Math.PI * 2);
	        const box = {
	            x: absPos.x + dx * Math.cos(rotation) + dy * Math.sin(-rotation),
	            y: absPos.y + dy * Math.cos(rotation) + dx * Math.sin(rotation),
	            width: rect.width * absScale.x,
	            height: rect.height * absScale.y,
	            rotation: rotation,
	        };
	        return rotateAroundPoint(box, -Global_1.Konva.getAngle(rot), {
	            x: 0,
	            y: 0,
	        });
	    }
	    __getNodeRect() {
	        var node = this.getNode();
	        if (!node) {
	            return {
	                x: -MAX_SAFE_INTEGER,
	                y: -MAX_SAFE_INTEGER,
	                width: 0,
	                height: 0,
	                rotation: 0,
	            };
	        }
	        const totalPoints = [];
	        this.nodes().map((node) => {
	            const box = node.getClientRect({
	                skipTransform: true,
	                skipShadow: true,
	                skipStroke: this.ignoreStroke(),
	            });
	            var points = [
	                { x: box.x, y: box.y },
	                { x: box.x + box.width, y: box.y },
	                { x: box.x + box.width, y: box.y + box.height },
	                { x: box.x, y: box.y + box.height },
	            ];
	            var trans = node.getAbsoluteTransform();
	            points.forEach(function (point) {
	                var transformed = trans.point(point);
	                totalPoints.push(transformed);
	            });
	        });
	        const tr = new Util_1.Transform();
	        tr.rotate(-Global_1.Konva.getAngle(this.rotation()));
	        var minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity;
	        totalPoints.forEach(function (point) {
	            var transformed = tr.point(point);
	            if (minX === undefined) {
	                minX = maxX = transformed.x;
	                minY = maxY = transformed.y;
	            }
	            minX = Math.min(minX, transformed.x);
	            minY = Math.min(minY, transformed.y);
	            maxX = Math.max(maxX, transformed.x);
	            maxY = Math.max(maxY, transformed.y);
	        });
	        tr.invert();
	        const p = tr.point({ x: minX, y: minY });
	        return {
	            x: p.x,
	            y: p.y,
	            width: maxX - minX,
	            height: maxY - minY,
	            rotation: Global_1.Konva.getAngle(this.rotation()),
	        };
	    }
	    getX() {
	        return this._getNodeRect().x;
	    }
	    getY() {
	        return this._getNodeRect().y;
	    }
	    getWidth() {
	        return this._getNodeRect().width;
	    }
	    getHeight() {
	        return this._getNodeRect().height;
	    }
	    _createElements() {
	        this._createBack();
	        ANCHORS_NAMES.forEach((name) => {
	            this._createAnchor(name);
	        });
	        this._createAnchor('rotater');
	    }
	    _createAnchor(name) {
	        var anchor = new Rect_1.Rect({
	            stroke: 'rgb(0, 161, 255)',
	            fill: 'white',
	            strokeWidth: 1,
	            name: name + ' _anchor',
	            dragDistance: 0,
	            draggable: true,
	            hitStrokeWidth: TOUCH_DEVICE ? 10 : 'auto',
	        });
	        var self = this;
	        anchor.on('mousedown touchstart', function (e) {
	            self._handleMouseDown(e);
	        });
	        anchor.on('dragstart', (e) => {
	            anchor.stopDrag();
	            e.cancelBubble = true;
	        });
	        anchor.on('dragend', (e) => {
	            e.cancelBubble = true;
	        });
	        anchor.on('mouseenter', () => {
	            var rad = Global_1.Konva.getAngle(this.rotation());
	            var rotateCursor = this.rotateAnchorCursor();
	            var cursor = getCursor(name, rad, rotateCursor);
	            anchor.getStage().content &&
	                (anchor.getStage().content.style.cursor = cursor);
	            this._cursorChange = true;
	        });
	        anchor.on('mouseout', () => {
	            anchor.getStage().content &&
	                (anchor.getStage().content.style.cursor = '');
	            this._cursorChange = false;
	        });
	        this.add(anchor);
	    }
	    _createBack() {
	        var back = new Shape_1.Shape({
	            name: 'back',
	            width: 0,
	            height: 0,
	            draggable: true,
	            sceneFunc(ctx, shape) {
	                var tr = shape.getParent();
	                var padding = tr.padding();
	                ctx.beginPath();
	                ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);
	                ctx.moveTo(shape.width() / 2, -padding);
	                if (tr.rotateEnabled() && tr.rotateLineVisible()) {
	                    ctx.lineTo(shape.width() / 2, -tr.rotateAnchorOffset() * Util_1.Util._sign(shape.height()) - padding);
	                }
	                ctx.fillStrokeShape(shape);
	            },
	            hitFunc: (ctx, shape) => {
	                if (!this.shouldOverdrawWholeArea()) {
	                    return;
	                }
	                var padding = this.padding();
	                ctx.beginPath();
	                ctx.rect(-padding, -padding, shape.width() + padding * 2, shape.height() + padding * 2);
	                ctx.fillStrokeShape(shape);
	            },
	        });
	        this.add(back);
	        this._proxyDrag(back);
	        back.on('dragstart', (e) => {
	            e.cancelBubble = true;
	        });
	        back.on('dragmove', (e) => {
	            e.cancelBubble = true;
	        });
	        back.on('dragend', (e) => {
	            e.cancelBubble = true;
	        });
	        this.on('dragmove', (e) => {
	            this.update();
	        });
	    }
	    _handleMouseDown(e) {
	        this._movingAnchorName = e.target.name().split(' ')[0];
	        var attrs = this._getNodeRect();
	        var width = attrs.width;
	        var height = attrs.height;
	        var hypotenuse = Math.sqrt(Math.pow(width, 2) + Math.pow(height, 2));
	        this.sin = Math.abs(height / hypotenuse);
	        this.cos = Math.abs(width / hypotenuse);
	        if (typeof window !== 'undefined') {
	            window.addEventListener('mousemove', this._handleMouseMove);
	            window.addEventListener('touchmove', this._handleMouseMove);
	            window.addEventListener('mouseup', this._handleMouseUp, true);
	            window.addEventListener('touchend', this._handleMouseUp, true);
	        }
	        this._transforming = true;
	        var ap = e.target.getAbsolutePosition();
	        var pos = e.target.getStage().getPointerPosition();
	        this._anchorDragOffset = {
	            x: pos.x - ap.x,
	            y: pos.y - ap.y,
	        };
	        activeTransformersCount++;
	        this._fire('transformstart', { evt: e.evt, target: this.getNode() });
	        this._nodes.forEach((target) => {
	            target._fire('transformstart', { evt: e.evt, target });
	        });
	    }
	    _handleMouseMove(e) {
	        var x, y, newHypotenuse;
	        var anchorNode = this.findOne('.' + this._movingAnchorName);
	        var stage = anchorNode.getStage();
	        stage.setPointersPositions(e);
	        const pp = stage.getPointerPosition();
	        let newNodePos = {
	            x: pp.x - this._anchorDragOffset.x,
	            y: pp.y - this._anchorDragOffset.y,
	        };
	        const oldAbs = anchorNode.getAbsolutePosition();
	        if (this.anchorDragBoundFunc()) {
	            newNodePos = this.anchorDragBoundFunc()(oldAbs, newNodePos, e);
	        }
	        anchorNode.setAbsolutePosition(newNodePos);
	        const newAbs = anchorNode.getAbsolutePosition();
	        if (oldAbs.x === newAbs.x && oldAbs.y === newAbs.y) {
	            return;
	        }
	        if (this._movingAnchorName === 'rotater') {
	            var attrs = this._getNodeRect();
	            x = anchorNode.x() - attrs.width / 2;
	            y = -anchorNode.y() + attrs.height / 2;
	            let delta = Math.atan2(-y, x) + Math.PI / 2;
	            if (attrs.height < 0) {
	                delta -= Math.PI;
	            }
	            var oldRotation = Global_1.Konva.getAngle(this.rotation());
	            const newRotation = oldRotation + delta;
	            const tol = Global_1.Konva.getAngle(this.rotationSnapTolerance());
	            const snappedRot = getSnap(this.rotationSnaps(), newRotation, tol);
	            const diff = snappedRot - attrs.rotation;
	            const shape = rotateAroundCenter(attrs, diff);
	            this._fitNodesInto(shape, e);
	            return;
	        }
	        var shiftBehavior = this.shiftBehavior();
	        var keepProportion;
	        if (shiftBehavior === 'inverted') {
	            keepProportion = this.keepRatio() && !e.shiftKey;
	        }
	        else if (shiftBehavior === 'none') {
	            keepProportion = this.keepRatio();
	        }
	        else {
	            keepProportion = this.keepRatio() || e.shiftKey;
	        }
	        var centeredScaling = this.centeredScaling() || e.altKey;
	        if (this._movingAnchorName === 'top-left') {
	            if (keepProportion) {
	                var comparePoint = centeredScaling
	                    ? {
	                        x: this.width() / 2,
	                        y: this.height() / 2,
	                    }
	                    : {
	                        x: this.findOne('.bottom-right').x(),
	                        y: this.findOne('.bottom-right').y(),
	                    };
	                newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) +
	                    Math.pow(comparePoint.y - anchorNode.y(), 2));
	                var reverseX = this.findOne('.top-left').x() > comparePoint.x ? -1 : 1;
	                var reverseY = this.findOne('.top-left').y() > comparePoint.y ? -1 : 1;
	                x = newHypotenuse * this.cos * reverseX;
	                y = newHypotenuse * this.sin * reverseY;
	                this.findOne('.top-left').x(comparePoint.x - x);
	                this.findOne('.top-left').y(comparePoint.y - y);
	            }
	        }
	        else if (this._movingAnchorName === 'top-center') {
	            this.findOne('.top-left').y(anchorNode.y());
	        }
	        else if (this._movingAnchorName === 'top-right') {
	            if (keepProportion) {
	                var comparePoint = centeredScaling
	                    ? {
	                        x: this.width() / 2,
	                        y: this.height() / 2,
	                    }
	                    : {
	                        x: this.findOne('.bottom-left').x(),
	                        y: this.findOne('.bottom-left').y(),
	                    };
	                newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) +
	                    Math.pow(comparePoint.y - anchorNode.y(), 2));
	                var reverseX = this.findOne('.top-right').x() < comparePoint.x ? -1 : 1;
	                var reverseY = this.findOne('.top-right').y() > comparePoint.y ? -1 : 1;
	                x = newHypotenuse * this.cos * reverseX;
	                y = newHypotenuse * this.sin * reverseY;
	                this.findOne('.top-right').x(comparePoint.x + x);
	                this.findOne('.top-right').y(comparePoint.y - y);
	            }
	            var pos = anchorNode.position();
	            this.findOne('.top-left').y(pos.y);
	            this.findOne('.bottom-right').x(pos.x);
	        }
	        else if (this._movingAnchorName === 'middle-left') {
	            this.findOne('.top-left').x(anchorNode.x());
	        }
	        else if (this._movingAnchorName === 'middle-right') {
	            this.findOne('.bottom-right').x(anchorNode.x());
	        }
	        else if (this._movingAnchorName === 'bottom-left') {
	            if (keepProportion) {
	                var comparePoint = centeredScaling
	                    ? {
	                        x: this.width() / 2,
	                        y: this.height() / 2,
	                    }
	                    : {
	                        x: this.findOne('.top-right').x(),
	                        y: this.findOne('.top-right').y(),
	                    };
	                newHypotenuse = Math.sqrt(Math.pow(comparePoint.x - anchorNode.x(), 2) +
	                    Math.pow(anchorNode.y() - comparePoint.y, 2));
	                var reverseX = comparePoint.x < anchorNode.x() ? -1 : 1;
	                var reverseY = anchorNode.y() < comparePoint.y ? -1 : 1;
	                x = newHypotenuse * this.cos * reverseX;
	                y = newHypotenuse * this.sin * reverseY;
	                anchorNode.x(comparePoint.x - x);
	                anchorNode.y(comparePoint.y + y);
	            }
	            pos = anchorNode.position();
	            this.findOne('.top-left').x(pos.x);
	            this.findOne('.bottom-right').y(pos.y);
	        }
	        else if (this._movingAnchorName === 'bottom-center') {
	            this.findOne('.bottom-right').y(anchorNode.y());
	        }
	        else if (this._movingAnchorName === 'bottom-right') {
	            if (keepProportion) {
	                var comparePoint = centeredScaling
	                    ? {
	                        x: this.width() / 2,
	                        y: this.height() / 2,
	                    }
	                    : {
	                        x: this.findOne('.top-left').x(),
	                        y: this.findOne('.top-left').y(),
	                    };
	                newHypotenuse = Math.sqrt(Math.pow(anchorNode.x() - comparePoint.x, 2) +
	                    Math.pow(anchorNode.y() - comparePoint.y, 2));
	                var reverseX = this.findOne('.bottom-right').x() < comparePoint.x ? -1 : 1;
	                var reverseY = this.findOne('.bottom-right').y() < comparePoint.y ? -1 : 1;
	                x = newHypotenuse * this.cos * reverseX;
	                y = newHypotenuse * this.sin * reverseY;
	                this.findOne('.bottom-right').x(comparePoint.x + x);
	                this.findOne('.bottom-right').y(comparePoint.y + y);
	            }
	        }
	        else {
	            console.error(new Error('Wrong position argument of selection resizer: ' +
	                this._movingAnchorName));
	        }
	        var centeredScaling = this.centeredScaling() || e.altKey;
	        if (centeredScaling) {
	            var topLeft = this.findOne('.top-left');
	            var bottomRight = this.findOne('.bottom-right');
	            var topOffsetX = topLeft.x();
	            var topOffsetY = topLeft.y();
	            var bottomOffsetX = this.getWidth() - bottomRight.x();
	            var bottomOffsetY = this.getHeight() - bottomRight.y();
	            bottomRight.move({
	                x: -topOffsetX,
	                y: -topOffsetY,
	            });
	            topLeft.move({
	                x: bottomOffsetX,
	                y: bottomOffsetY,
	            });
	        }
	        var absPos = this.findOne('.top-left').getAbsolutePosition();
	        x = absPos.x;
	        y = absPos.y;
	        var width = this.findOne('.bottom-right').x() - this.findOne('.top-left').x();
	        var height = this.findOne('.bottom-right').y() - this.findOne('.top-left').y();
	        this._fitNodesInto({
	            x: x,
	            y: y,
	            width: width,
	            height: height,
	            rotation: Global_1.Konva.getAngle(this.rotation()),
	        }, e);
	    }
	    _handleMouseUp(e) {
	        this._removeEvents(e);
	    }
	    getAbsoluteTransform() {
	        return this.getTransform();
	    }
	    _removeEvents(e) {
	        var _a;
	        if (this._transforming) {
	            this._transforming = false;
	            if (typeof window !== 'undefined') {
	                window.removeEventListener('mousemove', this._handleMouseMove);
	                window.removeEventListener('touchmove', this._handleMouseMove);
	                window.removeEventListener('mouseup', this._handleMouseUp, true);
	                window.removeEventListener('touchend', this._handleMouseUp, true);
	            }
	            var node = this.getNode();
	            activeTransformersCount--;
	            this._fire('transformend', { evt: e, target: node });
	            (_a = this.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();
	            if (node) {
	                this._nodes.forEach((target) => {
	                    var _a;
	                    target._fire('transformend', { evt: e, target });
	                    (_a = target.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();
	                });
	            }
	            this._movingAnchorName = null;
	        }
	    }
	    _fitNodesInto(newAttrs, evt) {
	        var oldAttrs = this._getNodeRect();
	        const minSize = 1;
	        if (Util_1.Util._inRange(newAttrs.width, -this.padding() * 2 - minSize, minSize)) {
	            this.update();
	            return;
	        }
	        if (Util_1.Util._inRange(newAttrs.height, -this.padding() * 2 - minSize, minSize)) {
	            this.update();
	            return;
	        }
	        var t = new Util_1.Transform();
	        t.rotate(Global_1.Konva.getAngle(this.rotation()));
	        if (this._movingAnchorName &&
	            newAttrs.width < 0 &&
	            this._movingAnchorName.indexOf('left') >= 0) {
	            const offset = t.point({
	                x: -this.padding() * 2,
	                y: 0,
	            });
	            newAttrs.x += offset.x;
	            newAttrs.y += offset.y;
	            newAttrs.width += this.padding() * 2;
	            this._movingAnchorName = this._movingAnchorName.replace('left', 'right');
	            this._anchorDragOffset.x -= offset.x;
	            this._anchorDragOffset.y -= offset.y;
	        }
	        else if (this._movingAnchorName &&
	            newAttrs.width < 0 &&
	            this._movingAnchorName.indexOf('right') >= 0) {
	            const offset = t.point({
	                x: this.padding() * 2,
	                y: 0,
	            });
	            this._movingAnchorName = this._movingAnchorName.replace('right', 'left');
	            this._anchorDragOffset.x -= offset.x;
	            this._anchorDragOffset.y -= offset.y;
	            newAttrs.width += this.padding() * 2;
	        }
	        if (this._movingAnchorName &&
	            newAttrs.height < 0 &&
	            this._movingAnchorName.indexOf('top') >= 0) {
	            const offset = t.point({
	                x: 0,
	                y: -this.padding() * 2,
	            });
	            newAttrs.x += offset.x;
	            newAttrs.y += offset.y;
	            this._movingAnchorName = this._movingAnchorName.replace('top', 'bottom');
	            this._anchorDragOffset.x -= offset.x;
	            this._anchorDragOffset.y -= offset.y;
	            newAttrs.height += this.padding() * 2;
	        }
	        else if (this._movingAnchorName &&
	            newAttrs.height < 0 &&
	            this._movingAnchorName.indexOf('bottom') >= 0) {
	            const offset = t.point({
	                x: 0,
	                y: this.padding() * 2,
	            });
	            this._movingAnchorName = this._movingAnchorName.replace('bottom', 'top');
	            this._anchorDragOffset.x -= offset.x;
	            this._anchorDragOffset.y -= offset.y;
	            newAttrs.height += this.padding() * 2;
	        }
	        if (this.boundBoxFunc()) {
	            const bounded = this.boundBoxFunc()(oldAttrs, newAttrs);
	            if (bounded) {
	                newAttrs = bounded;
	            }
	            else {
	                Util_1.Util.warn('boundBoxFunc returned falsy. You should return new bound rect from it!');
	            }
	        }
	        const baseSize = 10000000;
	        const oldTr = new Util_1.Transform();
	        oldTr.translate(oldAttrs.x, oldAttrs.y);
	        oldTr.rotate(oldAttrs.rotation);
	        oldTr.scale(oldAttrs.width / baseSize, oldAttrs.height / baseSize);
	        const newTr = new Util_1.Transform();
	        const newScaleX = newAttrs.width / baseSize;
	        const newScaleY = newAttrs.height / baseSize;
	        if (this.flipEnabled() === false) {
	            newTr.translate(newAttrs.x, newAttrs.y);
	            newTr.rotate(newAttrs.rotation);
	            newTr.translate(newAttrs.width < 0 ? newAttrs.width : 0, newAttrs.height < 0 ? newAttrs.height : 0);
	            newTr.scale(Math.abs(newScaleX), Math.abs(newScaleY));
	        }
	        else {
	            newTr.translate(newAttrs.x, newAttrs.y);
	            newTr.rotate(newAttrs.rotation);
	            newTr.scale(newScaleX, newScaleY);
	        }
	        const delta = newTr.multiply(oldTr.invert());
	        this._nodes.forEach((node) => {
	            var _a;
	            const parentTransform = node.getParent().getAbsoluteTransform();
	            const localTransform = node.getTransform().copy();
	            localTransform.translate(node.offsetX(), node.offsetY());
	            const newLocalTransform = new Util_1.Transform();
	            newLocalTransform
	                .multiply(parentTransform.copy().invert())
	                .multiply(delta)
	                .multiply(parentTransform)
	                .multiply(localTransform);
	            const attrs = newLocalTransform.decompose();
	            node.setAttrs(attrs);
	            (_a = node.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();
	        });
	        this.rotation(Util_1.Util._getRotation(newAttrs.rotation));
	        this._nodes.forEach((node) => {
	            this._fire('transform', { evt: evt, target: node });
	            node._fire('transform', { evt: evt, target: node });
	        });
	        this._resetTransformCache();
	        this.update();
	        this.getLayer().batchDraw();
	    }
	    forceUpdate() {
	        this._resetTransformCache();
	        this.update();
	    }
	    _batchChangeChild(selector, attrs) {
	        const anchor = this.findOne(selector);
	        anchor.setAttrs(attrs);
	    }
	    update() {
	        var _a;
	        var attrs = this._getNodeRect();
	        this.rotation(Util_1.Util._getRotation(attrs.rotation));
	        var width = attrs.width;
	        var height = attrs.height;
	        var enabledAnchors = this.enabledAnchors();
	        var resizeEnabled = this.resizeEnabled();
	        var padding = this.padding();
	        var anchorSize = this.anchorSize();
	        const anchors = this.find('._anchor');
	        anchors.forEach((node) => {
	            node.setAttrs({
	                width: anchorSize,
	                height: anchorSize,
	                offsetX: anchorSize / 2,
	                offsetY: anchorSize / 2,
	                stroke: this.anchorStroke(),
	                strokeWidth: this.anchorStrokeWidth(),
	                fill: this.anchorFill(),
	                cornerRadius: this.anchorCornerRadius(),
	            });
	        });
	        this._batchChangeChild('.top-left', {
	            x: 0,
	            y: 0,
	            offsetX: anchorSize / 2 + padding,
	            offsetY: anchorSize / 2 + padding,
	            visible: resizeEnabled && enabledAnchors.indexOf('top-left') >= 0,
	        });
	        this._batchChangeChild('.top-center', {
	            x: width / 2,
	            y: 0,
	            offsetY: anchorSize / 2 + padding,
	            visible: resizeEnabled && enabledAnchors.indexOf('top-center') >= 0,
	        });
	        this._batchChangeChild('.top-right', {
	            x: width,
	            y: 0,
	            offsetX: anchorSize / 2 - padding,
	            offsetY: anchorSize / 2 + padding,
	            visible: resizeEnabled && enabledAnchors.indexOf('top-right') >= 0,
	        });
	        this._batchChangeChild('.middle-left', {
	            x: 0,
	            y: height / 2,
	            offsetX: anchorSize / 2 + padding,
	            visible: resizeEnabled && enabledAnchors.indexOf('middle-left') >= 0,
	        });
	        this._batchChangeChild('.middle-right', {
	            x: width,
	            y: height / 2,
	            offsetX: anchorSize / 2 - padding,
	            visible: resizeEnabled && enabledAnchors.indexOf('middle-right') >= 0,
	        });
	        this._batchChangeChild('.bottom-left', {
	            x: 0,
	            y: height,
	            offsetX: anchorSize / 2 + padding,
	            offsetY: anchorSize / 2 - padding,
	            visible: resizeEnabled && enabledAnchors.indexOf('bottom-left') >= 0,
	        });
	        this._batchChangeChild('.bottom-center', {
	            x: width / 2,
	            y: height,
	            offsetY: anchorSize / 2 - padding,
	            visible: resizeEnabled && enabledAnchors.indexOf('bottom-center') >= 0,
	        });
	        this._batchChangeChild('.bottom-right', {
	            x: width,
	            y: height,
	            offsetX: anchorSize / 2 - padding,
	            offsetY: anchorSize / 2 - padding,
	            visible: resizeEnabled && enabledAnchors.indexOf('bottom-right') >= 0,
	        });
	        this._batchChangeChild('.rotater', {
	            x: width / 2,
	            y: -this.rotateAnchorOffset() * Util_1.Util._sign(height) - padding,
	            visible: this.rotateEnabled(),
	        });
	        this._batchChangeChild('.back', {
	            width: width,
	            height: height,
	            visible: this.borderEnabled(),
	            stroke: this.borderStroke(),
	            strokeWidth: this.borderStrokeWidth(),
	            dash: this.borderDash(),
	            x: 0,
	            y: 0,
	        });
	        const styleFunc = this.anchorStyleFunc();
	        if (styleFunc) {
	            anchors.forEach((node) => {
	                styleFunc(node);
	            });
	        }
	        (_a = this.getLayer()) === null || _a === void 0 ? void 0 : _a.batchDraw();
	    }
	    isTransforming() {
	        return this._transforming;
	    }
	    stopTransform() {
	        if (this._transforming) {
	            this._removeEvents();
	            var anchorNode = this.findOne('.' + this._movingAnchorName);
	            if (anchorNode) {
	                anchorNode.stopDrag();
	            }
	        }
	    }
	    destroy() {
	        if (this.getStage() && this._cursorChange) {
	            this.getStage().content && (this.getStage().content.style.cursor = '');
	        }
	        Group_1.Group.prototype.destroy.call(this);
	        this.detach();
	        this._removeEvents();
	        return this;
	    }
	    toObject() {
	        return Node_1.Node.prototype.toObject.call(this);
	    }
	    clone(obj) {
	        var node = Node_1.Node.prototype.clone.call(this, obj);
	        return node;
	    }
	    getClientRect() {
	        if (this.nodes().length > 0) {
	            return super.getClientRect();
	        }
	        else {
	            return { x: 0, y: 0, width: 0, height: 0 };
	        }
	    }
	}
	Transformer$1.Transformer = Transformer;
	Transformer.isTransforming = () => {
	    return activeTransformersCount > 0;
	};
	function validateAnchors(val) {
	    if (!(val instanceof Array)) {
	        Util_1.Util.warn('enabledAnchors value should be an array');
	    }
	    if (val instanceof Array) {
	        val.forEach(function (name) {
	            if (ANCHORS_NAMES.indexOf(name) === -1) {
	                Util_1.Util.warn('Unknown anchor name: ' +
	                    name +
	                    '. Available names are: ' +
	                    ANCHORS_NAMES.join(', '));
	            }
	        });
	    }
	    return val || [];
	}
	Transformer.prototype.className = 'Transformer';
	(0, Global_2._registerNode)(Transformer);
	Factory_1.Factory.addGetterSetter(Transformer, 'enabledAnchors', ANCHORS_NAMES, validateAnchors);
	Factory_1.Factory.addGetterSetter(Transformer, 'flipEnabled', true, (0, Validators_1.getBooleanValidator)());
	Factory_1.Factory.addGetterSetter(Transformer, 'resizeEnabled', true);
	Factory_1.Factory.addGetterSetter(Transformer, 'anchorSize', 10, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Transformer, 'rotateEnabled', true);
	Factory_1.Factory.addGetterSetter(Transformer, 'rotateLineVisible', true);
	Factory_1.Factory.addGetterSetter(Transformer, 'rotationSnaps', []);
	Factory_1.Factory.addGetterSetter(Transformer, 'rotateAnchorOffset', 50, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Transformer, 'rotateAnchorCursor', 'crosshair');
	Factory_1.Factory.addGetterSetter(Transformer, 'rotationSnapTolerance', 5, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Transformer, 'borderEnabled', true);
	Factory_1.Factory.addGetterSetter(Transformer, 'anchorStroke', 'rgb(0, 161, 255)');
	Factory_1.Factory.addGetterSetter(Transformer, 'anchorStrokeWidth', 1, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Transformer, 'anchorFill', 'white');
	Factory_1.Factory.addGetterSetter(Transformer, 'anchorCornerRadius', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Transformer, 'borderStroke', 'rgb(0, 161, 255)');
	Factory_1.Factory.addGetterSetter(Transformer, 'borderStrokeWidth', 1, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Transformer, 'borderDash');
	Factory_1.Factory.addGetterSetter(Transformer, 'keepRatio', true);
	Factory_1.Factory.addGetterSetter(Transformer, 'shiftBehavior', 'default');
	Factory_1.Factory.addGetterSetter(Transformer, 'centeredScaling', false);
	Factory_1.Factory.addGetterSetter(Transformer, 'ignoreStroke', false);
	Factory_1.Factory.addGetterSetter(Transformer, 'padding', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Transformer, 'node');
	Factory_1.Factory.addGetterSetter(Transformer, 'nodes');
	Factory_1.Factory.addGetterSetter(Transformer, 'boundBoxFunc');
	Factory_1.Factory.addGetterSetter(Transformer, 'anchorDragBoundFunc');
	Factory_1.Factory.addGetterSetter(Transformer, 'anchorStyleFunc');
	Factory_1.Factory.addGetterSetter(Transformer, 'shouldOverdrawWholeArea', false);
	Factory_1.Factory.addGetterSetter(Transformer, 'useSingleNodeRotation', true);
	Factory_1.Factory.backCompat(Transformer, {
	    lineEnabled: 'borderEnabled',
	    rotateHandlerOffset: 'rotateAnchorOffset',
	    enabledHandlers: 'enabledAnchors',
	});
	return Transformer$1;
}

var Wedge = {};

var hasRequiredWedge;

function requireWedge () {
	if (hasRequiredWedge) return Wedge;
	hasRequiredWedge = 1;
	Object.defineProperty(Wedge, "__esModule", { value: true });
	Wedge.Wedge = void 0;
	const Factory_1 = requireFactory();
	const Shape_1 = requireShape();
	const Global_1 = requireGlobal();
	const Validators_1 = requireValidators();
	const Global_2 = requireGlobal();
	let Wedge$1 = class Wedge extends Shape_1.Shape {
	    _sceneFunc(context) {
	        context.beginPath();
	        context.arc(0, 0, this.radius(), 0, Global_1.Konva.getAngle(this.angle()), this.clockwise());
	        context.lineTo(0, 0);
	        context.closePath();
	        context.fillStrokeShape(this);
	    }
	    getWidth() {
	        return this.radius() * 2;
	    }
	    getHeight() {
	        return this.radius() * 2;
	    }
	    setWidth(width) {
	        this.radius(width / 2);
	    }
	    setHeight(height) {
	        this.radius(height / 2);
	    }
	};
	Wedge.Wedge = Wedge$1;
	Wedge$1.prototype.className = 'Wedge';
	Wedge$1.prototype._centroid = true;
	Wedge$1.prototype._attrsAffectingSize = ['radius'];
	(0, Global_2._registerNode)(Wedge$1);
	Factory_1.Factory.addGetterSetter(Wedge$1, 'radius', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Wedge$1, 'angle', 0, (0, Validators_1.getNumberValidator)());
	Factory_1.Factory.addGetterSetter(Wedge$1, 'clockwise', false);
	Factory_1.Factory.backCompat(Wedge$1, {
	    angleDeg: 'angle',
	    getAngleDeg: 'getAngle',
	    setAngleDeg: 'setAngle',
	});
	return Wedge;
}

var Blur$2 = {};

var hasRequiredBlur;

function requireBlur () {
	if (hasRequiredBlur) return Blur$2;
	hasRequiredBlur = 1;
	Object.defineProperty(Blur$2, "__esModule", { value: true });
	Blur$2.Blur = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	function BlurStack() {
	    this.r = 0;
	    this.g = 0;
	    this.b = 0;
	    this.a = 0;
	    this.next = null;
	}
	var mul_table = [
	    512, 512, 456, 512, 328, 456, 335, 512, 405, 328, 271, 456, 388, 335, 292,
	    512, 454, 405, 364, 328, 298, 271, 496, 456, 420, 388, 360, 335, 312, 292,
	    273, 512, 482, 454, 428, 405, 383, 364, 345, 328, 312, 298, 284, 271, 259,
	    496, 475, 456, 437, 420, 404, 388, 374, 360, 347, 335, 323, 312, 302, 292,
	    282, 273, 265, 512, 497, 482, 468, 454, 441, 428, 417, 405, 394, 383, 373,
	    364, 354, 345, 337, 328, 320, 312, 305, 298, 291, 284, 278, 271, 265, 259,
	    507, 496, 485, 475, 465, 456, 446, 437, 428, 420, 412, 404, 396, 388, 381,
	    374, 367, 360, 354, 347, 341, 335, 329, 323, 318, 312, 307, 302, 297, 292,
	    287, 282, 278, 273, 269, 265, 261, 512, 505, 497, 489, 482, 475, 468, 461,
	    454, 447, 441, 435, 428, 422, 417, 411, 405, 399, 394, 389, 383, 378, 373,
	    368, 364, 359, 354, 350, 345, 341, 337, 332, 328, 324, 320, 316, 312, 309,
	    305, 301, 298, 294, 291, 287, 284, 281, 278, 274, 271, 268, 265, 262, 259,
	    257, 507, 501, 496, 491, 485, 480, 475, 470, 465, 460, 456, 451, 446, 442,
	    437, 433, 428, 424, 420, 416, 412, 408, 404, 400, 396, 392, 388, 385, 381,
	    377, 374, 370, 367, 363, 360, 357, 354, 350, 347, 344, 341, 338, 335, 332,
	    329, 326, 323, 320, 318, 315, 312, 310, 307, 304, 302, 299, 297, 294, 292,
	    289, 287, 285, 282, 280, 278, 275, 273, 271, 269, 267, 265, 263, 261, 259,
	];
	var shg_table = [
	    9, 11, 12, 13, 13, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17,
	    17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19,
	    19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
	    20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21,
	    21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22,
	    22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22,
	    22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23,
	    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	    23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23,
	    23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	    24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24,
	    24, 24, 24, 24, 24, 24, 24,
	];
	function filterGaussBlurRGBA(imageData, radius) {
	    var pixels = imageData.data, width = imageData.width, height = imageData.height;
	    var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum, a_sum, r_out_sum, g_out_sum, b_out_sum, a_out_sum, r_in_sum, g_in_sum, b_in_sum, a_in_sum, pr, pg, pb, pa, rbs;
	    var div = radius + radius + 1, widthMinus1 = width - 1, heightMinus1 = height - 1, radiusPlus1 = radius + 1, sumFactor = (radiusPlus1 * (radiusPlus1 + 1)) / 2, stackStart = new BlurStack(), stackEnd = null, stack = stackStart, stackIn = null, stackOut = null, mul_sum = mul_table[radius], shg_sum = shg_table[radius];
	    for (i = 1; i < div; i++) {
	        stack = stack.next = new BlurStack();
	        if (i === radiusPlus1) {
	            stackEnd = stack;
	        }
	    }
	    stack.next = stackStart;
	    yw = yi = 0;
	    for (y = 0; y < height; y++) {
	        r_in_sum =
	            g_in_sum =
	                b_in_sum =
	                    a_in_sum =
	                        r_sum =
	                            g_sum =
	                                b_sum =
	                                    a_sum =
	                                        0;
	        r_out_sum = radiusPlus1 * (pr = pixels[yi]);
	        g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);
	        b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);
	        a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);
	        r_sum += sumFactor * pr;
	        g_sum += sumFactor * pg;
	        b_sum += sumFactor * pb;
	        a_sum += sumFactor * pa;
	        stack = stackStart;
	        for (i = 0; i < radiusPlus1; i++) {
	            stack.r = pr;
	            stack.g = pg;
	            stack.b = pb;
	            stack.a = pa;
	            stack = stack.next;
	        }
	        for (i = 1; i < radiusPlus1; i++) {
	            p = yi + ((widthMinus1 < i ? widthMinus1 : i) << 2);
	            r_sum += (stack.r = pr = pixels[p]) * (rbs = radiusPlus1 - i);
	            g_sum += (stack.g = pg = pixels[p + 1]) * rbs;
	            b_sum += (stack.b = pb = pixels[p + 2]) * rbs;
	            a_sum += (stack.a = pa = pixels[p + 3]) * rbs;
	            r_in_sum += pr;
	            g_in_sum += pg;
	            b_in_sum += pb;
	            a_in_sum += pa;
	            stack = stack.next;
	        }
	        stackIn = stackStart;
	        stackOut = stackEnd;
	        for (x = 0; x < width; x++) {
	            pixels[yi + 3] = pa = (a_sum * mul_sum) >> shg_sum;
	            if (pa !== 0) {
	                pa = 255 / pa;
	                pixels[yi] = ((r_sum * mul_sum) >> shg_sum) * pa;
	                pixels[yi + 1] = ((g_sum * mul_sum) >> shg_sum) * pa;
	                pixels[yi + 2] = ((b_sum * mul_sum) >> shg_sum) * pa;
	            }
	            else {
	                pixels[yi] = pixels[yi + 1] = pixels[yi + 2] = 0;
	            }
	            r_sum -= r_out_sum;
	            g_sum -= g_out_sum;
	            b_sum -= b_out_sum;
	            a_sum -= a_out_sum;
	            r_out_sum -= stackIn.r;
	            g_out_sum -= stackIn.g;
	            b_out_sum -= stackIn.b;
	            a_out_sum -= stackIn.a;
	            p = (yw + ((p = x + radius + 1) < widthMinus1 ? p : widthMinus1)) << 2;
	            r_in_sum += stackIn.r = pixels[p];
	            g_in_sum += stackIn.g = pixels[p + 1];
	            b_in_sum += stackIn.b = pixels[p + 2];
	            a_in_sum += stackIn.a = pixels[p + 3];
	            r_sum += r_in_sum;
	            g_sum += g_in_sum;
	            b_sum += b_in_sum;
	            a_sum += a_in_sum;
	            stackIn = stackIn.next;
	            r_out_sum += pr = stackOut.r;
	            g_out_sum += pg = stackOut.g;
	            b_out_sum += pb = stackOut.b;
	            a_out_sum += pa = stackOut.a;
	            r_in_sum -= pr;
	            g_in_sum -= pg;
	            b_in_sum -= pb;
	            a_in_sum -= pa;
	            stackOut = stackOut.next;
	            yi += 4;
	        }
	        yw += width;
	    }
	    for (x = 0; x < width; x++) {
	        g_in_sum =
	            b_in_sum =
	                a_in_sum =
	                    r_in_sum =
	                        g_sum =
	                            b_sum =
	                                a_sum =
	                                    r_sum =
	                                        0;
	        yi = x << 2;
	        r_out_sum = radiusPlus1 * (pr = pixels[yi]);
	        g_out_sum = radiusPlus1 * (pg = pixels[yi + 1]);
	        b_out_sum = radiusPlus1 * (pb = pixels[yi + 2]);
	        a_out_sum = radiusPlus1 * (pa = pixels[yi + 3]);
	        r_sum += sumFactor * pr;
	        g_sum += sumFactor * pg;
	        b_sum += sumFactor * pb;
	        a_sum += sumFactor * pa;
	        stack = stackStart;
	        for (i = 0; i < radiusPlus1; i++) {
	            stack.r = pr;
	            stack.g = pg;
	            stack.b = pb;
	            stack.a = pa;
	            stack = stack.next;
	        }
	        yp = width;
	        for (i = 1; i <= radius; i++) {
	            yi = (yp + x) << 2;
	            r_sum += (stack.r = pr = pixels[yi]) * (rbs = radiusPlus1 - i);
	            g_sum += (stack.g = pg = pixels[yi + 1]) * rbs;
	            b_sum += (stack.b = pb = pixels[yi + 2]) * rbs;
	            a_sum += (stack.a = pa = pixels[yi + 3]) * rbs;
	            r_in_sum += pr;
	            g_in_sum += pg;
	            b_in_sum += pb;
	            a_in_sum += pa;
	            stack = stack.next;
	            if (i < heightMinus1) {
	                yp += width;
	            }
	        }
	        yi = x;
	        stackIn = stackStart;
	        stackOut = stackEnd;
	        for (y = 0; y < height; y++) {
	            p = yi << 2;
	            pixels[p + 3] = pa = (a_sum * mul_sum) >> shg_sum;
	            if (pa > 0) {
	                pa = 255 / pa;
	                pixels[p] = ((r_sum * mul_sum) >> shg_sum) * pa;
	                pixels[p + 1] = ((g_sum * mul_sum) >> shg_sum) * pa;
	                pixels[p + 2] = ((b_sum * mul_sum) >> shg_sum) * pa;
	            }
	            else {
	                pixels[p] = pixels[p + 1] = pixels[p + 2] = 0;
	            }
	            r_sum -= r_out_sum;
	            g_sum -= g_out_sum;
	            b_sum -= b_out_sum;
	            a_sum -= a_out_sum;
	            r_out_sum -= stackIn.r;
	            g_out_sum -= stackIn.g;
	            b_out_sum -= stackIn.b;
	            a_out_sum -= stackIn.a;
	            p =
	                (x +
	                    ((p = y + radiusPlus1) < heightMinus1 ? p : heightMinus1) * width) <<
	                    2;
	            r_sum += r_in_sum += stackIn.r = pixels[p];
	            g_sum += g_in_sum += stackIn.g = pixels[p + 1];
	            b_sum += b_in_sum += stackIn.b = pixels[p + 2];
	            a_sum += a_in_sum += stackIn.a = pixels[p + 3];
	            stackIn = stackIn.next;
	            r_out_sum += pr = stackOut.r;
	            g_out_sum += pg = stackOut.g;
	            b_out_sum += pb = stackOut.b;
	            a_out_sum += pa = stackOut.a;
	            r_in_sum -= pr;
	            g_in_sum -= pg;
	            b_in_sum -= pb;
	            a_in_sum -= pa;
	            stackOut = stackOut.next;
	            yi += width;
	        }
	    }
	}
	const Blur = function Blur(imageData) {
	    var radius = Math.round(this.blurRadius());
	    if (radius > 0) {
	        filterGaussBlurRGBA(imageData, radius);
	    }
	};
	Blur$2.Blur = Blur;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'blurRadius', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	return Blur$2;
}

var Brighten = {};

var hasRequiredBrighten;

function requireBrighten () {
	if (hasRequiredBrighten) return Brighten;
	hasRequiredBrighten = 1;
	Object.defineProperty(Brighten, "__esModule", { value: true });
	Brighten.Brighten = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	const Brighten$1 = function (imageData) {
	    var brightness = this.brightness() * 255, data = imageData.data, len = data.length, i;
	    for (i = 0; i < len; i += 4) {
	        data[i] += brightness;
	        data[i + 1] += brightness;
	        data[i + 2] += brightness;
	    }
	};
	Brighten.Brighten = Brighten$1;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'brightness', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	return Brighten;
}

var Contrast$2 = {};

var hasRequiredContrast;

function requireContrast () {
	if (hasRequiredContrast) return Contrast$2;
	hasRequiredContrast = 1;
	Object.defineProperty(Contrast$2, "__esModule", { value: true });
	Contrast$2.Contrast = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	const Contrast = function (imageData) {
	    var adjust = Math.pow((this.contrast() + 100) / 100, 2);
	    var data = imageData.data, nPixels = data.length, red = 150, green = 150, blue = 150, i;
	    for (i = 0; i < nPixels; i += 4) {
	        red = data[i];
	        green = data[i + 1];
	        blue = data[i + 2];
	        red /= 255;
	        red -= 0.5;
	        red *= adjust;
	        red += 0.5;
	        red *= 255;
	        green /= 255;
	        green -= 0.5;
	        green *= adjust;
	        green += 0.5;
	        green *= 255;
	        blue /= 255;
	        blue -= 0.5;
	        blue *= adjust;
	        blue += 0.5;
	        blue *= 255;
	        red = red < 0 ? 0 : red > 255 ? 255 : red;
	        green = green < 0 ? 0 : green > 255 ? 255 : green;
	        blue = blue < 0 ? 0 : blue > 255 ? 255 : blue;
	        data[i] = red;
	        data[i + 1] = green;
	        data[i + 2] = blue;
	    }
	};
	Contrast$2.Contrast = Contrast;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'contrast', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	return Contrast$2;
}

var Emboss = {};

var hasRequiredEmboss;

function requireEmboss () {
	if (hasRequiredEmboss) return Emboss;
	hasRequiredEmboss = 1;
	Object.defineProperty(Emboss, "__esModule", { value: true });
	Emboss.Emboss = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Util_1 = requireUtil();
	const Validators_1 = requireValidators();
	const Emboss$1 = function (imageData) {
	    var strength = this.embossStrength() * 10, greyLevel = this.embossWhiteLevel() * 255, direction = this.embossDirection(), blend = this.embossBlend(), dirY = 0, dirX = 0, data = imageData.data, w = imageData.width, h = imageData.height, w4 = w * 4, y = h;
	    switch (direction) {
	        case 'top-left':
	            dirY = -1;
	            dirX = -1;
	            break;
	        case 'top':
	            dirY = -1;
	            dirX = 0;
	            break;
	        case 'top-right':
	            dirY = -1;
	            dirX = 1;
	            break;
	        case 'right':
	            dirY = 0;
	            dirX = 1;
	            break;
	        case 'bottom-right':
	            dirY = 1;
	            dirX = 1;
	            break;
	        case 'bottom':
	            dirY = 1;
	            dirX = 0;
	            break;
	        case 'bottom-left':
	            dirY = 1;
	            dirX = -1;
	            break;
	        case 'left':
	            dirY = 0;
	            dirX = -1;
	            break;
	        default:
	            Util_1.Util.error('Unknown emboss direction: ' + direction);
	    }
	    do {
	        var offsetY = (y - 1) * w4;
	        var otherY = dirY;
	        if (y + otherY < 1) {
	            otherY = 0;
	        }
	        if (y + otherY > h) {
	            otherY = 0;
	        }
	        var offsetYOther = (y - 1 + otherY) * w * 4;
	        var x = w;
	        do {
	            var offset = offsetY + (x - 1) * 4;
	            var otherX = dirX;
	            if (x + otherX < 1) {
	                otherX = 0;
	            }
	            if (x + otherX > w) {
	                otherX = 0;
	            }
	            var offsetOther = offsetYOther + (x - 1 + otherX) * 4;
	            var dR = data[offset] - data[offsetOther];
	            var dG = data[offset + 1] - data[offsetOther + 1];
	            var dB = data[offset + 2] - data[offsetOther + 2];
	            var dif = dR;
	            var absDif = dif > 0 ? dif : -dif;
	            var absG = dG > 0 ? dG : -dG;
	            var absB = dB > 0 ? dB : -dB;
	            if (absG > absDif) {
	                dif = dG;
	            }
	            if (absB > absDif) {
	                dif = dB;
	            }
	            dif *= strength;
	            if (blend) {
	                var r = data[offset] + dif;
	                var g = data[offset + 1] + dif;
	                var b = data[offset + 2] + dif;
	                data[offset] = r > 255 ? 255 : r < 0 ? 0 : r;
	                data[offset + 1] = g > 255 ? 255 : g < 0 ? 0 : g;
	                data[offset + 2] = b > 255 ? 255 : b < 0 ? 0 : b;
	            }
	            else {
	                var grey = greyLevel - dif;
	                if (grey < 0) {
	                    grey = 0;
	                }
	                else if (grey > 255) {
	                    grey = 255;
	                }
	                data[offset] = data[offset + 1] = data[offset + 2] = grey;
	            }
	        } while (--x);
	    } while (--y);
	};
	Emboss.Emboss = Emboss$1;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'embossStrength', 0.5, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'embossWhiteLevel', 0.5, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'embossDirection', 'top-left', null, Factory_1.Factory.afterSetFilter);
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'embossBlend', false, null, Factory_1.Factory.afterSetFilter);
	return Emboss;
}

var Enhance = {};

var hasRequiredEnhance;

function requireEnhance () {
	if (hasRequiredEnhance) return Enhance;
	hasRequiredEnhance = 1;
	Object.defineProperty(Enhance, "__esModule", { value: true });
	Enhance.Enhance = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	function remap(fromValue, fromMin, fromMax, toMin, toMax) {
	    var fromRange = fromMax - fromMin, toRange = toMax - toMin, toValue;
	    if (fromRange === 0) {
	        return toMin + toRange / 2;
	    }
	    if (toRange === 0) {
	        return toMin;
	    }
	    toValue = (fromValue - fromMin) / fromRange;
	    toValue = toRange * toValue + toMin;
	    return toValue;
	}
	const Enhance$1 = function (imageData) {
	    var data = imageData.data, nSubPixels = data.length, rMin = data[0], rMax = rMin, r, gMin = data[1], gMax = gMin, g, bMin = data[2], bMax = bMin, b, i;
	    var enhanceAmount = this.enhance();
	    if (enhanceAmount === 0) {
	        return;
	    }
	    for (i = 0; i < nSubPixels; i += 4) {
	        r = data[i + 0];
	        if (r < rMin) {
	            rMin = r;
	        }
	        else if (r > rMax) {
	            rMax = r;
	        }
	        g = data[i + 1];
	        if (g < gMin) {
	            gMin = g;
	        }
	        else if (g > gMax) {
	            gMax = g;
	        }
	        b = data[i + 2];
	        if (b < bMin) {
	            bMin = b;
	        }
	        else if (b > bMax) {
	            bMax = b;
	        }
	    }
	    if (rMax === rMin) {
	        rMax = 255;
	        rMin = 0;
	    }
	    if (gMax === gMin) {
	        gMax = 255;
	        gMin = 0;
	    }
	    if (bMax === bMin) {
	        bMax = 255;
	        bMin = 0;
	    }
	    var rMid, rGoalMax, rGoalMin, gMid, gGoalMax, gGoalMin, bMid, bGoalMax, bGoalMin;
	    if (enhanceAmount > 0) {
	        rGoalMax = rMax + enhanceAmount * (255 - rMax);
	        rGoalMin = rMin - enhanceAmount * (rMin - 0);
	        gGoalMax = gMax + enhanceAmount * (255 - gMax);
	        gGoalMin = gMin - enhanceAmount * (gMin - 0);
	        bGoalMax = bMax + enhanceAmount * (255 - bMax);
	        bGoalMin = bMin - enhanceAmount * (bMin - 0);
	    }
	    else {
	        rMid = (rMax + rMin) * 0.5;
	        rGoalMax = rMax + enhanceAmount * (rMax - rMid);
	        rGoalMin = rMin + enhanceAmount * (rMin - rMid);
	        gMid = (gMax + gMin) * 0.5;
	        gGoalMax = gMax + enhanceAmount * (gMax - gMid);
	        gGoalMin = gMin + enhanceAmount * (gMin - gMid);
	        bMid = (bMax + bMin) * 0.5;
	        bGoalMax = bMax + enhanceAmount * (bMax - bMid);
	        bGoalMin = bMin + enhanceAmount * (bMin - bMid);
	    }
	    for (i = 0; i < nSubPixels; i += 4) {
	        data[i + 0] = remap(data[i + 0], rMin, rMax, rGoalMin, rGoalMax);
	        data[i + 1] = remap(data[i + 1], gMin, gMax, gGoalMin, gGoalMax);
	        data[i + 2] = remap(data[i + 2], bMin, bMax, bGoalMin, bGoalMax);
	    }
	};
	Enhance.Enhance = Enhance$1;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'enhance', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	return Enhance;
}

var Grayscale = {};

var hasRequiredGrayscale;

function requireGrayscale () {
	if (hasRequiredGrayscale) return Grayscale;
	hasRequiredGrayscale = 1;
	Object.defineProperty(Grayscale, "__esModule", { value: true });
	Grayscale.Grayscale = void 0;
	const Grayscale$1 = function (imageData) {
	    var data = imageData.data, len = data.length, i, brightness;
	    for (i = 0; i < len; i += 4) {
	        brightness = 0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2];
	        data[i] = brightness;
	        data[i + 1] = brightness;
	        data[i + 2] = brightness;
	    }
	};
	Grayscale.Grayscale = Grayscale$1;
	return Grayscale;
}

var HSL = {};

var hasRequiredHSL;

function requireHSL () {
	if (hasRequiredHSL) return HSL;
	hasRequiredHSL = 1;
	Object.defineProperty(HSL, "__esModule", { value: true });
	HSL.HSL = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'hue', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'saturation', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'luminance', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	const HSL$1 = function (imageData) {
	    var data = imageData.data, nPixels = data.length, v = 1, s = Math.pow(2, this.saturation()), h = Math.abs(this.hue() + 360) % 360, l = this.luminance() * 127, i;
	    var vsu = v * s * Math.cos((h * Math.PI) / 180), vsw = v * s * Math.sin((h * Math.PI) / 180);
	    var rr = 0.299 * v + 0.701 * vsu + 0.167 * vsw, rg = 0.587 * v - 0.587 * vsu + 0.33 * vsw, rb = 0.114 * v - 0.114 * vsu - 0.497 * vsw;
	    var gr = 0.299 * v - 0.299 * vsu - 0.328 * vsw, gg = 0.587 * v + 0.413 * vsu + 0.035 * vsw, gb = 0.114 * v - 0.114 * vsu + 0.293 * vsw;
	    var br = 0.299 * v - 0.3 * vsu + 1.25 * vsw, bg = 0.587 * v - 0.586 * vsu - 1.05 * vsw, bb = 0.114 * v + 0.886 * vsu - 0.2 * vsw;
	    var r, g, b, a;
	    for (i = 0; i < nPixels; i += 4) {
	        r = data[i + 0];
	        g = data[i + 1];
	        b = data[i + 2];
	        a = data[i + 3];
	        data[i + 0] = rr * r + rg * g + rb * b + l;
	        data[i + 1] = gr * r + gg * g + gb * b + l;
	        data[i + 2] = br * r + bg * g + bb * b + l;
	        data[i + 3] = a;
	    }
	};
	HSL.HSL = HSL$1;
	return HSL;
}

var HSV$1 = {};

var hasRequiredHSV;

function requireHSV () {
	if (hasRequiredHSV) return HSV$1;
	hasRequiredHSV = 1;
	Object.defineProperty(HSV$1, "__esModule", { value: true });
	HSV$1.HSV = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	const HSV = function (imageData) {
	    var data = imageData.data, nPixels = data.length, v = Math.pow(2, this.value()), s = Math.pow(2, this.saturation()), h = Math.abs(this.hue() + 360) % 360, i;
	    var vsu = v * s * Math.cos((h * Math.PI) / 180), vsw = v * s * Math.sin((h * Math.PI) / 180);
	    var rr = 0.299 * v + 0.701 * vsu + 0.167 * vsw, rg = 0.587 * v - 0.587 * vsu + 0.33 * vsw, rb = 0.114 * v - 0.114 * vsu - 0.497 * vsw;
	    var gr = 0.299 * v - 0.299 * vsu - 0.328 * vsw, gg = 0.587 * v + 0.413 * vsu + 0.035 * vsw, gb = 0.114 * v - 0.114 * vsu + 0.293 * vsw;
	    var br = 0.299 * v - 0.3 * vsu + 1.25 * vsw, bg = 0.587 * v - 0.586 * vsu - 1.05 * vsw, bb = 0.114 * v + 0.886 * vsu - 0.2 * vsw;
	    var r, g, b, a;
	    for (i = 0; i < nPixels; i += 4) {
	        r = data[i + 0];
	        g = data[i + 1];
	        b = data[i + 2];
	        a = data[i + 3];
	        data[i + 0] = rr * r + rg * g + rb * b;
	        data[i + 1] = gr * r + gg * g + gb * b;
	        data[i + 2] = br * r + bg * g + bb * b;
	        data[i + 3] = a;
	    }
	};
	HSV$1.HSV = HSV;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'hue', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'saturation', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'value', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	return HSV$1;
}

var Invert = {};

var hasRequiredInvert;

function requireInvert () {
	if (hasRequiredInvert) return Invert;
	hasRequiredInvert = 1;
	Object.defineProperty(Invert, "__esModule", { value: true });
	Invert.Invert = void 0;
	const Invert$1 = function (imageData) {
	    var data = imageData.data, len = data.length, i;
	    for (i = 0; i < len; i += 4) {
	        data[i] = 255 - data[i];
	        data[i + 1] = 255 - data[i + 1];
	        data[i + 2] = 255 - data[i + 2];
	    }
	};
	Invert.Invert = Invert$1;
	return Invert;
}

var Kaleidoscope = {};

var hasRequiredKaleidoscope;

function requireKaleidoscope () {
	if (hasRequiredKaleidoscope) return Kaleidoscope;
	hasRequiredKaleidoscope = 1;
	Object.defineProperty(Kaleidoscope, "__esModule", { value: true });
	Kaleidoscope.Kaleidoscope = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Util_1 = requireUtil();
	const Validators_1 = requireValidators();
	var ToPolar = function (src, dst, opt) {
	    var srcPixels = src.data, dstPixels = dst.data, xSize = src.width, ySize = src.height, xMid = opt.polarCenterX || xSize / 2, yMid = opt.polarCenterY || ySize / 2, i, x, y, r = 0, g = 0, b = 0, a = 0;
	    var rad, rMax = Math.sqrt(xMid * xMid + yMid * yMid);
	    x = xSize - xMid;
	    y = ySize - yMid;
	    rad = Math.sqrt(x * x + y * y);
	    rMax = rad > rMax ? rad : rMax;
	    var rSize = ySize, tSize = xSize, radius, theta;
	    var conversion = ((360 / tSize) * Math.PI) / 180, sin, cos;
	    for (theta = 0; theta < tSize; theta += 1) {
	        sin = Math.sin(theta * conversion);
	        cos = Math.cos(theta * conversion);
	        for (radius = 0; radius < rSize; radius += 1) {
	            x = Math.floor(xMid + ((rMax * radius) / rSize) * cos);
	            y = Math.floor(yMid + ((rMax * radius) / rSize) * sin);
	            i = (y * xSize + x) * 4;
	            r = srcPixels[i + 0];
	            g = srcPixels[i + 1];
	            b = srcPixels[i + 2];
	            a = srcPixels[i + 3];
	            i = (theta + radius * xSize) * 4;
	            dstPixels[i + 0] = r;
	            dstPixels[i + 1] = g;
	            dstPixels[i + 2] = b;
	            dstPixels[i + 3] = a;
	        }
	    }
	};
	var FromPolar = function (src, dst, opt) {
	    var srcPixels = src.data, dstPixels = dst.data, xSize = src.width, ySize = src.height, xMid = opt.polarCenterX || xSize / 2, yMid = opt.polarCenterY || ySize / 2, i, x, y, dx, dy, r = 0, g = 0, b = 0, a = 0;
	    var rad, rMax = Math.sqrt(xMid * xMid + yMid * yMid);
	    x = xSize - xMid;
	    y = ySize - yMid;
	    rad = Math.sqrt(x * x + y * y);
	    rMax = rad > rMax ? rad : rMax;
	    var rSize = ySize, tSize = xSize, radius, theta, phaseShift = opt.polarRotation || 0;
	    var x1, y1;
	    for (x = 0; x < xSize; x += 1) {
	        for (y = 0; y < ySize; y += 1) {
	            dx = x - xMid;
	            dy = y - yMid;
	            radius = (Math.sqrt(dx * dx + dy * dy) * rSize) / rMax;
	            theta = ((Math.atan2(dy, dx) * 180) / Math.PI + 360 + phaseShift) % 360;
	            theta = (theta * tSize) / 360;
	            x1 = Math.floor(theta);
	            y1 = Math.floor(radius);
	            i = (y1 * xSize + x1) * 4;
	            r = srcPixels[i + 0];
	            g = srcPixels[i + 1];
	            b = srcPixels[i + 2];
	            a = srcPixels[i + 3];
	            i = (y * xSize + x) * 4;
	            dstPixels[i + 0] = r;
	            dstPixels[i + 1] = g;
	            dstPixels[i + 2] = b;
	            dstPixels[i + 3] = a;
	        }
	    }
	};
	const Kaleidoscope$1 = function (imageData) {
	    var xSize = imageData.width, ySize = imageData.height;
	    var x, y, xoff, i, r, g, b, a, srcPos, dstPos;
	    var power = Math.round(this.kaleidoscopePower());
	    var angle = Math.round(this.kaleidoscopeAngle());
	    var offset = Math.floor((xSize * (angle % 360)) / 360);
	    if (power < 1) {
	        return;
	    }
	    var tempCanvas = Util_1.Util.createCanvasElement();
	    tempCanvas.width = xSize;
	    tempCanvas.height = ySize;
	    var scratchData = tempCanvas
	        .getContext('2d')
	        .getImageData(0, 0, xSize, ySize);
	    Util_1.Util.releaseCanvas(tempCanvas);
	    ToPolar(imageData, scratchData, {
	        polarCenterX: xSize / 2,
	        polarCenterY: ySize / 2,
	    });
	    var minSectionSize = xSize / Math.pow(2, power);
	    while (minSectionSize <= 8) {
	        minSectionSize = minSectionSize * 2;
	        power -= 1;
	    }
	    minSectionSize = Math.ceil(minSectionSize);
	    var sectionSize = minSectionSize;
	    var xStart = 0, xEnd = sectionSize, xDelta = 1;
	    if (offset + minSectionSize > xSize) {
	        xStart = sectionSize;
	        xEnd = 0;
	        xDelta = -1;
	    }
	    for (y = 0; y < ySize; y += 1) {
	        for (x = xStart; x !== xEnd; x += xDelta) {
	            xoff = Math.round(x + offset) % xSize;
	            srcPos = (xSize * y + xoff) * 4;
	            r = scratchData.data[srcPos + 0];
	            g = scratchData.data[srcPos + 1];
	            b = scratchData.data[srcPos + 2];
	            a = scratchData.data[srcPos + 3];
	            dstPos = (xSize * y + x) * 4;
	            scratchData.data[dstPos + 0] = r;
	            scratchData.data[dstPos + 1] = g;
	            scratchData.data[dstPos + 2] = b;
	            scratchData.data[dstPos + 3] = a;
	        }
	    }
	    for (y = 0; y < ySize; y += 1) {
	        sectionSize = Math.floor(minSectionSize);
	        for (i = 0; i < power; i += 1) {
	            for (x = 0; x < sectionSize + 1; x += 1) {
	                srcPos = (xSize * y + x) * 4;
	                r = scratchData.data[srcPos + 0];
	                g = scratchData.data[srcPos + 1];
	                b = scratchData.data[srcPos + 2];
	                a = scratchData.data[srcPos + 3];
	                dstPos = (xSize * y + sectionSize * 2 - x - 1) * 4;
	                scratchData.data[dstPos + 0] = r;
	                scratchData.data[dstPos + 1] = g;
	                scratchData.data[dstPos + 2] = b;
	                scratchData.data[dstPos + 3] = a;
	            }
	            sectionSize *= 2;
	        }
	    }
	    FromPolar(scratchData, imageData, { polarRotation: 0 });
	};
	Kaleidoscope.Kaleidoscope = Kaleidoscope$1;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'kaleidoscopePower', 2, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'kaleidoscopeAngle', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	return Kaleidoscope;
}

var Mask = {};

var hasRequiredMask;

function requireMask () {
	if (hasRequiredMask) return Mask;
	hasRequiredMask = 1;
	Object.defineProperty(Mask, "__esModule", { value: true });
	Mask.Mask = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	function pixelAt(idata, x, y) {
	    var idx = (y * idata.width + x) * 4;
	    var d = [];
	    d.push(idata.data[idx++], idata.data[idx++], idata.data[idx++], idata.data[idx++]);
	    return d;
	}
	function rgbDistance(p1, p2) {
	    return Math.sqrt(Math.pow(p1[0] - p2[0], 2) +
	        Math.pow(p1[1] - p2[1], 2) +
	        Math.pow(p1[2] - p2[2], 2));
	}
	function rgbMean(pTab) {
	    var m = [0, 0, 0];
	    for (var i = 0; i < pTab.length; i++) {
	        m[0] += pTab[i][0];
	        m[1] += pTab[i][1];
	        m[2] += pTab[i][2];
	    }
	    m[0] /= pTab.length;
	    m[1] /= pTab.length;
	    m[2] /= pTab.length;
	    return m;
	}
	function backgroundMask(idata, threshold) {
	    var rgbv_no = pixelAt(idata, 0, 0);
	    var rgbv_ne = pixelAt(idata, idata.width - 1, 0);
	    var rgbv_so = pixelAt(idata, 0, idata.height - 1);
	    var rgbv_se = pixelAt(idata, idata.width - 1, idata.height - 1);
	    var thres = threshold || 10;
	    if (rgbDistance(rgbv_no, rgbv_ne) < thres &&
	        rgbDistance(rgbv_ne, rgbv_se) < thres &&
	        rgbDistance(rgbv_se, rgbv_so) < thres &&
	        rgbDistance(rgbv_so, rgbv_no) < thres) {
	        var mean = rgbMean([rgbv_ne, rgbv_no, rgbv_se, rgbv_so]);
	        var mask = [];
	        for (var i = 0; i < idata.width * idata.height; i++) {
	            var d = rgbDistance(mean, [
	                idata.data[i * 4],
	                idata.data[i * 4 + 1],
	                idata.data[i * 4 + 2],
	            ]);
	            mask[i] = d < thres ? 0 : 255;
	        }
	        return mask;
	    }
	}
	function applyMask(idata, mask) {
	    for (var i = 0; i < idata.width * idata.height; i++) {
	        idata.data[4 * i + 3] = mask[i];
	    }
	}
	function erodeMask(mask, sw, sh) {
	    var weights = [1, 1, 1, 1, 0, 1, 1, 1, 1];
	    var side = Math.round(Math.sqrt(weights.length));
	    var halfSide = Math.floor(side / 2);
	    var maskResult = [];
	    for (var y = 0; y < sh; y++) {
	        for (var x = 0; x < sw; x++) {
	            var so = y * sw + x;
	            var a = 0;
	            for (var cy = 0; cy < side; cy++) {
	                for (var cx = 0; cx < side; cx++) {
	                    var scy = y + cy - halfSide;
	                    var scx = x + cx - halfSide;
	                    if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {
	                        var srcOff = scy * sw + scx;
	                        var wt = weights[cy * side + cx];
	                        a += mask[srcOff] * wt;
	                    }
	                }
	            }
	            maskResult[so] = a === 255 * 8 ? 255 : 0;
	        }
	    }
	    return maskResult;
	}
	function dilateMask(mask, sw, sh) {
	    var weights = [1, 1, 1, 1, 1, 1, 1, 1, 1];
	    var side = Math.round(Math.sqrt(weights.length));
	    var halfSide = Math.floor(side / 2);
	    var maskResult = [];
	    for (var y = 0; y < sh; y++) {
	        for (var x = 0; x < sw; x++) {
	            var so = y * sw + x;
	            var a = 0;
	            for (var cy = 0; cy < side; cy++) {
	                for (var cx = 0; cx < side; cx++) {
	                    var scy = y + cy - halfSide;
	                    var scx = x + cx - halfSide;
	                    if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {
	                        var srcOff = scy * sw + scx;
	                        var wt = weights[cy * side + cx];
	                        a += mask[srcOff] * wt;
	                    }
	                }
	            }
	            maskResult[so] = a >= 255 * 4 ? 255 : 0;
	        }
	    }
	    return maskResult;
	}
	function smoothEdgeMask(mask, sw, sh) {
	    var weights = [1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9, 1 / 9];
	    var side = Math.round(Math.sqrt(weights.length));
	    var halfSide = Math.floor(side / 2);
	    var maskResult = [];
	    for (var y = 0; y < sh; y++) {
	        for (var x = 0; x < sw; x++) {
	            var so = y * sw + x;
	            var a = 0;
	            for (var cy = 0; cy < side; cy++) {
	                for (var cx = 0; cx < side; cx++) {
	                    var scy = y + cy - halfSide;
	                    var scx = x + cx - halfSide;
	                    if (scy >= 0 && scy < sh && scx >= 0 && scx < sw) {
	                        var srcOff = scy * sw + scx;
	                        var wt = weights[cy * side + cx];
	                        a += mask[srcOff] * wt;
	                    }
	                }
	            }
	            maskResult[so] = a;
	        }
	    }
	    return maskResult;
	}
	const Mask$1 = function (imageData) {
	    var threshold = this.threshold(), mask = backgroundMask(imageData, threshold);
	    if (mask) {
	        mask = erodeMask(mask, imageData.width, imageData.height);
	        mask = dilateMask(mask, imageData.width, imageData.height);
	        mask = smoothEdgeMask(mask, imageData.width, imageData.height);
	        applyMask(imageData, mask);
	    }
	    return imageData;
	};
	Mask.Mask = Mask$1;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'threshold', 0, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	return Mask;
}

var Noise = {};

var hasRequiredNoise;

function requireNoise () {
	if (hasRequiredNoise) return Noise;
	hasRequiredNoise = 1;
	Object.defineProperty(Noise, "__esModule", { value: true });
	Noise.Noise = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	const Noise$1 = function (imageData) {
	    var amount = this.noise() * 255, data = imageData.data, nPixels = data.length, half = amount / 2, i;
	    for (i = 0; i < nPixels; i += 4) {
	        data[i + 0] += half - 2 * half * Math.random();
	        data[i + 1] += half - 2 * half * Math.random();
	        data[i + 2] += half - 2 * half * Math.random();
	    }
	};
	Noise.Noise = Noise$1;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'noise', 0.2, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	return Noise;
}

var Pixelate = {};

var hasRequiredPixelate;

function requirePixelate () {
	if (hasRequiredPixelate) return Pixelate;
	hasRequiredPixelate = 1;
	Object.defineProperty(Pixelate, "__esModule", { value: true });
	Pixelate.Pixelate = void 0;
	const Factory_1 = requireFactory();
	const Util_1 = requireUtil();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	const Pixelate$1 = function (imageData) {
	    var pixelSize = Math.ceil(this.pixelSize()), width = imageData.width, height = imageData.height, x, y, i, red, green, blue, alpha, nBinsX = Math.ceil(width / pixelSize), nBinsY = Math.ceil(height / pixelSize), xBinStart, xBinEnd, yBinStart, yBinEnd, xBin, yBin, pixelsInBin, data = imageData.data;
	    if (pixelSize <= 0) {
	        Util_1.Util.error('pixelSize value can not be <= 0');
	        return;
	    }
	    for (xBin = 0; xBin < nBinsX; xBin += 1) {
	        for (yBin = 0; yBin < nBinsY; yBin += 1) {
	            red = 0;
	            green = 0;
	            blue = 0;
	            alpha = 0;
	            xBinStart = xBin * pixelSize;
	            xBinEnd = xBinStart + pixelSize;
	            yBinStart = yBin * pixelSize;
	            yBinEnd = yBinStart + pixelSize;
	            pixelsInBin = 0;
	            for (x = xBinStart; x < xBinEnd; x += 1) {
	                if (x >= width) {
	                    continue;
	                }
	                for (y = yBinStart; y < yBinEnd; y += 1) {
	                    if (y >= height) {
	                        continue;
	                    }
	                    i = (width * y + x) * 4;
	                    red += data[i + 0];
	                    green += data[i + 1];
	                    blue += data[i + 2];
	                    alpha += data[i + 3];
	                    pixelsInBin += 1;
	                }
	            }
	            red = red / pixelsInBin;
	            green = green / pixelsInBin;
	            blue = blue / pixelsInBin;
	            alpha = alpha / pixelsInBin;
	            for (x = xBinStart; x < xBinEnd; x += 1) {
	                if (x >= width) {
	                    continue;
	                }
	                for (y = yBinStart; y < yBinEnd; y += 1) {
	                    if (y >= height) {
	                        continue;
	                    }
	                    i = (width * y + x) * 4;
	                    data[i + 0] = red;
	                    data[i + 1] = green;
	                    data[i + 2] = blue;
	                    data[i + 3] = alpha;
	                }
	            }
	        }
	    }
	};
	Pixelate.Pixelate = Pixelate$1;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'pixelSize', 8, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	return Pixelate;
}

var Posterize = {};

var hasRequiredPosterize;

function requirePosterize () {
	if (hasRequiredPosterize) return Posterize;
	hasRequiredPosterize = 1;
	Object.defineProperty(Posterize, "__esModule", { value: true });
	Posterize.Posterize = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	const Posterize$1 = function (imageData) {
	    var levels = Math.round(this.levels() * 254) + 1, data = imageData.data, len = data.length, scale = 255 / levels, i;
	    for (i = 0; i < len; i += 1) {
	        data[i] = Math.floor(data[i] / scale) * scale;
	    }
	};
	Posterize.Posterize = Posterize$1;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'levels', 0.5, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	return Posterize;
}

var RGB = {};

var hasRequiredRGB;

function requireRGB () {
	if (hasRequiredRGB) return RGB;
	hasRequiredRGB = 1;
	Object.defineProperty(RGB, "__esModule", { value: true });
	RGB.RGB = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	const RGB$1 = function (imageData) {
	    var data = imageData.data, nPixels = data.length, red = this.red(), green = this.green(), blue = this.blue(), i, brightness;
	    for (i = 0; i < nPixels; i += 4) {
	        brightness =
	            (0.34 * data[i] + 0.5 * data[i + 1] + 0.16 * data[i + 2]) / 255;
	        data[i] = brightness * red;
	        data[i + 1] = brightness * green;
	        data[i + 2] = brightness * blue;
	        data[i + 3] = data[i + 3];
	    }
	};
	RGB.RGB = RGB$1;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'red', 0, function (val) {
	    this._filterUpToDate = false;
	    if (val > 255) {
	        return 255;
	    }
	    else if (val < 0) {
	        return 0;
	    }
	    else {
	        return Math.round(val);
	    }
	});
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'green', 0, function (val) {
	    this._filterUpToDate = false;
	    if (val > 255) {
	        return 255;
	    }
	    else if (val < 0) {
	        return 0;
	    }
	    else {
	        return Math.round(val);
	    }
	});
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'blue', 0, Validators_1.RGBComponent, Factory_1.Factory.afterSetFilter);
	return RGB;
}

var RGBA = {};

var hasRequiredRGBA;

function requireRGBA () {
	if (hasRequiredRGBA) return RGBA;
	hasRequiredRGBA = 1;
	Object.defineProperty(RGBA, "__esModule", { value: true });
	RGBA.RGBA = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	const RGBA$1 = function (imageData) {
	    var data = imageData.data, nPixels = data.length, red = this.red(), green = this.green(), blue = this.blue(), alpha = this.alpha(), i, ia;
	    for (i = 0; i < nPixels; i += 4) {
	        ia = 1 - alpha;
	        data[i] = red * alpha + data[i] * ia;
	        data[i + 1] = green * alpha + data[i + 1] * ia;
	        data[i + 2] = blue * alpha + data[i + 2] * ia;
	    }
	};
	RGBA.RGBA = RGBA$1;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'red', 0, function (val) {
	    this._filterUpToDate = false;
	    if (val > 255) {
	        return 255;
	    }
	    else if (val < 0) {
	        return 0;
	    }
	    else {
	        return Math.round(val);
	    }
	});
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'green', 0, function (val) {
	    this._filterUpToDate = false;
	    if (val > 255) {
	        return 255;
	    }
	    else if (val < 0) {
	        return 0;
	    }
	    else {
	        return Math.round(val);
	    }
	});
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'blue', 0, Validators_1.RGBComponent, Factory_1.Factory.afterSetFilter);
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'alpha', 1, function (val) {
	    this._filterUpToDate = false;
	    if (val > 1) {
	        return 1;
	    }
	    else if (val < 0) {
	        return 0;
	    }
	    else {
	        return val;
	    }
	});
	return RGBA;
}

var Sepia = {};

var hasRequiredSepia;

function requireSepia () {
	if (hasRequiredSepia) return Sepia;
	hasRequiredSepia = 1;
	Object.defineProperty(Sepia, "__esModule", { value: true });
	Sepia.Sepia = void 0;
	const Sepia$1 = function (imageData) {
	    var data = imageData.data, nPixels = data.length, i, r, g, b;
	    for (i = 0; i < nPixels; i += 4) {
	        r = data[i + 0];
	        g = data[i + 1];
	        b = data[i + 2];
	        data[i + 0] = Math.min(255, r * 0.393 + g * 0.769 + b * 0.189);
	        data[i + 1] = Math.min(255, r * 0.349 + g * 0.686 + b * 0.168);
	        data[i + 2] = Math.min(255, r * 0.272 + g * 0.534 + b * 0.131);
	    }
	};
	Sepia.Sepia = Sepia$1;
	return Sepia;
}

var Solarize = {};

var hasRequiredSolarize;

function requireSolarize () {
	if (hasRequiredSolarize) return Solarize;
	hasRequiredSolarize = 1;
	Object.defineProperty(Solarize, "__esModule", { value: true });
	Solarize.Solarize = void 0;
	const Solarize$1 = function (imageData) {
	    var data = imageData.data, w = imageData.width, h = imageData.height, w4 = w * 4, y = h;
	    do {
	        var offsetY = (y - 1) * w4;
	        var x = w;
	        do {
	            var offset = offsetY + (x - 1) * 4;
	            var r = data[offset];
	            var g = data[offset + 1];
	            var b = data[offset + 2];
	            if (r > 127) {
	                r = 255 - r;
	            }
	            if (g > 127) {
	                g = 255 - g;
	            }
	            if (b > 127) {
	                b = 255 - b;
	            }
	            data[offset] = r;
	            data[offset + 1] = g;
	            data[offset + 2] = b;
	        } while (--x);
	    } while (--y);
	};
	Solarize.Solarize = Solarize$1;
	return Solarize;
}

var Threshold = {};

var hasRequiredThreshold;

function requireThreshold () {
	if (hasRequiredThreshold) return Threshold;
	hasRequiredThreshold = 1;
	Object.defineProperty(Threshold, "__esModule", { value: true });
	Threshold.Threshold = void 0;
	const Factory_1 = requireFactory();
	const Node_1 = requireNode();
	const Validators_1 = requireValidators();
	const Threshold$1 = function (imageData) {
	    var level = this.threshold() * 255, data = imageData.data, len = data.length, i;
	    for (i = 0; i < len; i += 1) {
	        data[i] = data[i] < level ? 0 : 255;
	    }
	};
	Threshold.Threshold = Threshold$1;
	Factory_1.Factory.addGetterSetter(Node_1.Node, 'threshold', 0.5, (0, Validators_1.getNumberValidator)(), Factory_1.Factory.afterSetFilter);
	return Threshold;
}

var hasRequired_FullInternals;

function require_FullInternals () {
	if (hasRequired_FullInternals) return _FullInternals;
	hasRequired_FullInternals = 1;
	Object.defineProperty(_FullInternals, "__esModule", { value: true });
	_FullInternals.Konva = void 0;
	const _CoreInternals_1 = require_CoreInternals();
	const Arc_1 = requireArc();
	const Arrow_1 = requireArrow();
	const Circle_1 = requireCircle();
	const Ellipse_1 = requireEllipse();
	const Image_1 = requireImage();
	const Label_1 = requireLabel();
	const Line_1 = requireLine();
	const Path_1 = requirePath();
	const Rect_1 = requireRect();
	const RegularPolygon_1 = requireRegularPolygon();
	const Ring_1 = requireRing();
	const Sprite_1 = requireSprite();
	const Star_1 = requireStar();
	const Text_1 = requireText();
	const TextPath_1 = requireTextPath();
	const Transformer_1 = requireTransformer();
	const Wedge_1 = requireWedge();
	const Blur_1 = requireBlur();
	const Brighten_1 = requireBrighten();
	const Contrast_1 = requireContrast();
	const Emboss_1 = requireEmboss();
	const Enhance_1 = requireEnhance();
	const Grayscale_1 = requireGrayscale();
	const HSL_1 = requireHSL();
	const HSV_1 = requireHSV();
	const Invert_1 = requireInvert();
	const Kaleidoscope_1 = requireKaleidoscope();
	const Mask_1 = requireMask();
	const Noise_1 = requireNoise();
	const Pixelate_1 = requirePixelate();
	const Posterize_1 = requirePosterize();
	const RGB_1 = requireRGB();
	const RGBA_1 = requireRGBA();
	const Sepia_1 = requireSepia();
	const Solarize_1 = requireSolarize();
	const Threshold_1 = requireThreshold();
	_FullInternals.Konva = _CoreInternals_1.Konva.Util._assign(_CoreInternals_1.Konva, {
	    Arc: Arc_1.Arc,
	    Arrow: Arrow_1.Arrow,
	    Circle: Circle_1.Circle,
	    Ellipse: Ellipse_1.Ellipse,
	    Image: Image_1.Image,
	    Label: Label_1.Label,
	    Tag: Label_1.Tag,
	    Line: Line_1.Line,
	    Path: Path_1.Path,
	    Rect: Rect_1.Rect,
	    RegularPolygon: RegularPolygon_1.RegularPolygon,
	    Ring: Ring_1.Ring,
	    Sprite: Sprite_1.Sprite,
	    Star: Star_1.Star,
	    Text: Text_1.Text,
	    TextPath: TextPath_1.TextPath,
	    Transformer: Transformer_1.Transformer,
	    Wedge: Wedge_1.Wedge,
	    Filters: {
	        Blur: Blur_1.Blur,
	        Brighten: Brighten_1.Brighten,
	        Contrast: Contrast_1.Contrast,
	        Emboss: Emboss_1.Emboss,
	        Enhance: Enhance_1.Enhance,
	        Grayscale: Grayscale_1.Grayscale,
	        HSL: HSL_1.HSL,
	        HSV: HSV_1.HSV,
	        Invert: Invert_1.Invert,
	        Kaleidoscope: Kaleidoscope_1.Kaleidoscope,
	        Mask: Mask_1.Mask,
	        Noise: Noise_1.Noise,
	        Pixelate: Pixelate_1.Pixelate,
	        Posterize: Posterize_1.Posterize,
	        RGB: RGB_1.RGB,
	        RGBA: RGBA_1.RGBA,
	        Sepia: Sepia_1.Sepia,
	        Solarize: Solarize_1.Solarize,
	        Threshold: Threshold_1.Threshold,
	    },
	});
	return _FullInternals;
}

var indexNode = indexNode$1.exports;

var hasRequiredIndexNode;

function requireIndexNode () {
	if (hasRequiredIndexNode) return indexNode$1.exports;
	hasRequiredIndexNode = 1;
	Object.defineProperty(indexNode, "__esModule", { value: true });
	const _FullInternals_1 = require_FullInternals();
	const Canvas = require$$1;
	const canvas = Canvas['default'] || Canvas;
	commonjsGlobal.DOMMatrix = canvas.DOMMatrix;
	const isNode = typeof commonjsGlobal.document === 'undefined';
	if (isNode) {
	    _FullInternals_1.Konva.Util['createCanvasElement'] = () => {
	        const node = canvas.createCanvas(300, 300);
	        if (!node['style']) {
	            node['style'] = {};
	        }
	        return node;
	    };
	    _FullInternals_1.Konva.Util.createImageElement = () => {
	        const node = new canvas.Image();
	        return node;
	    };
	}
	indexNode$1.exports = _FullInternals_1.Konva;
	return indexNode$1.exports;
}

var indexNodeExports = requireIndexNode();
var Konva$2 = /*@__PURE__*/getDefaultExportFromCjs(indexNodeExports);

var Core = {exports: {}};

var hasRequiredCore;

function requireCore () {
	if (hasRequiredCore) return Core.exports;
	hasRequiredCore = 1;
	(function (module, exports) {
		Object.defineProperty(exports, "__esModule", { value: true });
		exports.Konva = void 0;
		var _CoreInternals_1 = require_CoreInternals();
		Object.defineProperty(exports, "Konva", { enumerable: true, get: function () { return _CoreInternals_1.Konva; } });
		const _CoreInternals_2 = require_CoreInternals();
		module.exports = _CoreInternals_2.Konva; 
	} (Core, Core.exports));
	return Core.exports;
}

var CoreExports = requireCore();
var Konva$1 = /*@__PURE__*/getDefaultExportFromCjs(CoreExports);

var reactReconciler = {exports: {}};

var scheduler = {exports: {}};

var scheduler_production_min = {};

/**
 * @license React
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredScheduler_production_min;

function requireScheduler_production_min () {
	if (hasRequiredScheduler_production_min) return scheduler_production_min;
	hasRequiredScheduler_production_min = 1;
	(function (exports) {
function f(a,b){var c=a.length;a.push(b);a:for(;0<c;){var d=c-1>>>1,e=a[d];if(0<g(e,b))a[d]=b,a[c]=e,c=d;else break a}}function h(a){return 0===a.length?null:a[0]}function k(a){if(0===a.length)return null;var b=a[0],c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length,w=e>>>1;d<w;){var m=2*(d+1)-1,C=a[m],n=m+1,x=a[n];if(0>g(C,c))n<e&&0>g(x,C)?(a[d]=x,a[n]=c,d=n):(a[d]=C,a[m]=c,d=m);else if(n<e&&0>g(x,c))a[d]=x,a[n]=c,d=n;else break a}}return b}
		function g(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}if("object"===typeof performance&&"function"===typeof performance.now){var l=performance;exports.unstable_now=function(){return l.now()};}else {var p=Date,q=p.now();exports.unstable_now=function(){return p.now()-q};}var r=[],t=[],u=1,v=null,y=3,z=!1,A=!1,B=!1,D="function"===typeof setTimeout?setTimeout:null,E="function"===typeof clearTimeout?clearTimeout:null,F="undefined"!==typeof setImmediate?setImmediate:null;
		"undefined"!==typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);function G(a){for(var b=h(t);null!==b;){if(null===b.callback)k(t);else if(b.startTime<=a)k(t),b.sortIndex=b.expirationTime,f(r,b);else break;b=h(t);}}function H(a){B=!1;G(a);if(!A)if(null!==h(r))A=!0,I(J);else {var b=h(t);null!==b&&K(H,b.startTime-a);}}
		function J(a,b){A=!1;B&&(B=!1,E(L),L=-1);z=!0;var c=y;try{G(b);for(v=h(r);null!==v&&(!(v.expirationTime>b)||a&&!M());){var d=v.callback;if("function"===typeof d){v.callback=null;y=v.priorityLevel;var e=d(v.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?v.callback=e:v===h(r)&&k(r);G(b);}else k(r);v=h(r);}if(null!==v)var w=!0;else {var m=h(t);null!==m&&K(H,m.startTime-b);w=!1;}return w}finally{v=null,y=c,z=!1;}}var N=!1,O=null,L=-1,P=5,Q=-1;
		function M(){return exports.unstable_now()-Q<P?!1:!0}function R(){if(null!==O){var a=exports.unstable_now();Q=a;var b=!0;try{b=O(!0,a);}finally{b?S():(N=!1,O=null);}}else N=!1;}var S;if("function"===typeof F)S=function(){F(R);};else if("undefined"!==typeof MessageChannel){var T=new MessageChannel,U=T.port2;T.port1.onmessage=R;S=function(){U.postMessage(null);};}else S=function(){D(R,0);};function I(a){O=a;N||(N=!0,S());}function K(a,b){L=D(function(){a(exports.unstable_now());},b);}
		exports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null;};exports.unstable_continueExecution=function(){A||z||(A=!0,I(J));};
		exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):P=0<a?Math.floor(1E3/a):5;};exports.unstable_getCurrentPriorityLevel=function(){return y};exports.unstable_getFirstCallbackNode=function(){return h(r)};exports.unstable_next=function(a){switch(y){case 1:case 2:case 3:var b=3;break;default:b=y;}var c=y;y=b;try{return a()}finally{y=c;}};exports.unstable_pauseExecution=function(){};
		exports.unstable_requestPaint=function(){};exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3;}var c=y;y=a;try{return b()}finally{y=c;}};
		exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();"object"===typeof c&&null!==c?(c=c.delay,c="number"===typeof c&&0<c?d+c:d):c=d;switch(a){case 1:var e=-1;break;case 2:e=250;break;case 5:e=1073741823;break;case 4:e=1E4;break;default:e=5E3;}e=c+e;a={id:u++,callback:b,priorityLevel:a,startTime:c,expirationTime:e,sortIndex:-1};c>d?(a.sortIndex=c,f(t,a),null===h(r)&&a===h(t)&&(B?(E(L),L=-1):B=!0,K(H,c-d))):(a.sortIndex=e,f(r,a),A||z||(A=!0,I(J)));return a};
		exports.unstable_shouldYield=M;exports.unstable_wrapCallback=function(a){var b=y;return function(){var c=y;y=b;try{return a.apply(this,arguments)}finally{y=c;}}}; 
	} (scheduler_production_min));
	return scheduler_production_min;
}

var scheduler_development = {};

/**
 * @license React
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredScheduler_development;

function requireScheduler_development () {
	if (hasRequiredScheduler_development) return scheduler_development;
	hasRequiredScheduler_development = 1;
	(function (exports) {

		if (process.env.NODE_ENV !== "production") {
		  (function() {

		/* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		if (
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart ===
		    'function'
		) {
		  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
		}
		          var enableSchedulerDebugging = false;
		var enableProfiling = false;
		var frameYieldMs = 5;

		function push(heap, node) {
		  var index = heap.length;
		  heap.push(node);
		  siftUp(heap, node, index);
		}
		function peek(heap) {
		  return heap.length === 0 ? null : heap[0];
		}
		function pop(heap) {
		  if (heap.length === 0) {
		    return null;
		  }

		  var first = heap[0];
		  var last = heap.pop();

		  if (last !== first) {
		    heap[0] = last;
		    siftDown(heap, last, 0);
		  }

		  return first;
		}

		function siftUp(heap, node, i) {
		  var index = i;

		  while (index > 0) {
		    var parentIndex = index - 1 >>> 1;
		    var parent = heap[parentIndex];

		    if (compare(parent, node) > 0) {
		      // The parent is larger. Swap positions.
		      heap[parentIndex] = node;
		      heap[index] = parent;
		      index = parentIndex;
		    } else {
		      // The parent is smaller. Exit.
		      return;
		    }
		  }
		}

		function siftDown(heap, node, i) {
		  var index = i;
		  var length = heap.length;
		  var halfLength = length >>> 1;

		  while (index < halfLength) {
		    var leftIndex = (index + 1) * 2 - 1;
		    var left = heap[leftIndex];
		    var rightIndex = leftIndex + 1;
		    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

		    if (compare(left, node) < 0) {
		      if (rightIndex < length && compare(right, left) < 0) {
		        heap[index] = right;
		        heap[rightIndex] = node;
		        index = rightIndex;
		      } else {
		        heap[index] = left;
		        heap[leftIndex] = node;
		        index = leftIndex;
		      }
		    } else if (rightIndex < length && compare(right, node) < 0) {
		      heap[index] = right;
		      heap[rightIndex] = node;
		      index = rightIndex;
		    } else {
		      // Neither child is smaller. Exit.
		      return;
		    }
		  }
		}

		function compare(a, b) {
		  // Compare sort index first, then task id.
		  var diff = a.sortIndex - b.sortIndex;
		  return diff !== 0 ? diff : a.id - b.id;
		}

		// TODO: Use symbols?
		var ImmediatePriority = 1;
		var UserBlockingPriority = 2;
		var NormalPriority = 3;
		var LowPriority = 4;
		var IdlePriority = 5;

		function markTaskErrored(task, ms) {
		}

		/* eslint-disable no-var */

		var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

		if (hasPerformanceNow) {
		  var localPerformance = performance;

		  exports.unstable_now = function () {
		    return localPerformance.now();
		  };
		} else {
		  var localDate = Date;
		  var initialTime = localDate.now();

		  exports.unstable_now = function () {
		    return localDate.now() - initialTime;
		  };
		} // Max 31 bit integer. The max integer size in V8 for 32-bit systems.
		// Math.pow(2, 30) - 1
		// 0b111111111111111111111111111111


		var maxSigned31BitInt = 1073741823; // Times out immediately

		var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

		var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
		var NORMAL_PRIORITY_TIMEOUT = 5000;
		var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

		var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap

		var taskQueue = [];
		var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

		var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
		var currentTask = null;
		var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.

		var isPerformingWork = false;
		var isHostCallbackScheduled = false;
		var isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.

		var localSetTimeout = typeof setTimeout === 'function' ? setTimeout : null;
		var localClearTimeout = typeof clearTimeout === 'function' ? clearTimeout : null;
		var localSetImmediate = typeof setImmediate !== 'undefined' ? setImmediate : null; // IE and Node.js + jsdom

		typeof navigator !== 'undefined' && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;

		function advanceTimers(currentTime) {
		  // Check for tasks that are no longer delayed and add them to the queue.
		  var timer = peek(timerQueue);

		  while (timer !== null) {
		    if (timer.callback === null) {
		      // Timer was cancelled.
		      pop(timerQueue);
		    } else if (timer.startTime <= currentTime) {
		      // Timer fired. Transfer to the task queue.
		      pop(timerQueue);
		      timer.sortIndex = timer.expirationTime;
		      push(taskQueue, timer);
		    } else {
		      // Remaining timers are pending.
		      return;
		    }

		    timer = peek(timerQueue);
		  }
		}

		function handleTimeout(currentTime) {
		  isHostTimeoutScheduled = false;
		  advanceTimers(currentTime);

		  if (!isHostCallbackScheduled) {
		    if (peek(taskQueue) !== null) {
		      isHostCallbackScheduled = true;
		      requestHostCallback(flushWork);
		    } else {
		      var firstTimer = peek(timerQueue);

		      if (firstTimer !== null) {
		        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
		      }
		    }
		  }
		}

		function flushWork(hasTimeRemaining, initialTime) {


		  isHostCallbackScheduled = false;

		  if (isHostTimeoutScheduled) {
		    // We scheduled a timeout but it's no longer needed. Cancel it.
		    isHostTimeoutScheduled = false;
		    cancelHostTimeout();
		  }

		  isPerformingWork = true;
		  var previousPriorityLevel = currentPriorityLevel;

		  try {
		    var currentTime; if (enableProfiling) ; else {
		      // No catch in prod code path.
		      return workLoop(hasTimeRemaining, initialTime);
		    }
		  } finally {
		    currentTask = null;
		    currentPriorityLevel = previousPriorityLevel;
		    isPerformingWork = false;
		  }
		}

		function workLoop(hasTimeRemaining, initialTime) {
		  var currentTime = initialTime;
		  advanceTimers(currentTime);
		  currentTask = peek(taskQueue);

		  while (currentTask !== null && !(enableSchedulerDebugging )) {
		    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
		      // This currentTask hasn't expired, and we've reached the deadline.
		      break;
		    }

		    var callback = currentTask.callback;

		    if (typeof callback === 'function') {
		      currentTask.callback = null;
		      currentPriorityLevel = currentTask.priorityLevel;
		      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;

		      var continuationCallback = callback(didUserCallbackTimeout);
		      currentTime = exports.unstable_now();

		      if (typeof continuationCallback === 'function') {
		        currentTask.callback = continuationCallback;
		      } else {

		        if (currentTask === peek(taskQueue)) {
		          pop(taskQueue);
		        }
		      }

		      advanceTimers(currentTime);
		    } else {
		      pop(taskQueue);
		    }

		    currentTask = peek(taskQueue);
		  } // Return whether there's additional work


		  if (currentTask !== null) {
		    return true;
		  } else {
		    var firstTimer = peek(timerQueue);

		    if (firstTimer !== null) {
		      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
		    }

		    return false;
		  }
		}

		function unstable_runWithPriority(priorityLevel, eventHandler) {
		  switch (priorityLevel) {
		    case ImmediatePriority:
		    case UserBlockingPriority:
		    case NormalPriority:
		    case LowPriority:
		    case IdlePriority:
		      break;

		    default:
		      priorityLevel = NormalPriority;
		  }

		  var previousPriorityLevel = currentPriorityLevel;
		  currentPriorityLevel = priorityLevel;

		  try {
		    return eventHandler();
		  } finally {
		    currentPriorityLevel = previousPriorityLevel;
		  }
		}

		function unstable_next(eventHandler) {
		  var priorityLevel;

		  switch (currentPriorityLevel) {
		    case ImmediatePriority:
		    case UserBlockingPriority:
		    case NormalPriority:
		      // Shift down to normal priority
		      priorityLevel = NormalPriority;
		      break;

		    default:
		      // Anything lower than normal priority should remain at the current level.
		      priorityLevel = currentPriorityLevel;
		      break;
		  }

		  var previousPriorityLevel = currentPriorityLevel;
		  currentPriorityLevel = priorityLevel;

		  try {
		    return eventHandler();
		  } finally {
		    currentPriorityLevel = previousPriorityLevel;
		  }
		}

		function unstable_wrapCallback(callback) {
		  var parentPriorityLevel = currentPriorityLevel;
		  return function () {
		    // This is a fork of runWithPriority, inlined for performance.
		    var previousPriorityLevel = currentPriorityLevel;
		    currentPriorityLevel = parentPriorityLevel;

		    try {
		      return callback.apply(this, arguments);
		    } finally {
		      currentPriorityLevel = previousPriorityLevel;
		    }
		  };
		}

		function unstable_scheduleCallback(priorityLevel, callback, options) {
		  var currentTime = exports.unstable_now();
		  var startTime;

		  if (typeof options === 'object' && options !== null) {
		    var delay = options.delay;

		    if (typeof delay === 'number' && delay > 0) {
		      startTime = currentTime + delay;
		    } else {
		      startTime = currentTime;
		    }
		  } else {
		    startTime = currentTime;
		  }

		  var timeout;

		  switch (priorityLevel) {
		    case ImmediatePriority:
		      timeout = IMMEDIATE_PRIORITY_TIMEOUT;
		      break;

		    case UserBlockingPriority:
		      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
		      break;

		    case IdlePriority:
		      timeout = IDLE_PRIORITY_TIMEOUT;
		      break;

		    case LowPriority:
		      timeout = LOW_PRIORITY_TIMEOUT;
		      break;

		    case NormalPriority:
		    default:
		      timeout = NORMAL_PRIORITY_TIMEOUT;
		      break;
		  }

		  var expirationTime = startTime + timeout;
		  var newTask = {
		    id: taskIdCounter++,
		    callback: callback,
		    priorityLevel: priorityLevel,
		    startTime: startTime,
		    expirationTime: expirationTime,
		    sortIndex: -1
		  };

		  if (startTime > currentTime) {
		    // This is a delayed task.
		    newTask.sortIndex = startTime;
		    push(timerQueue, newTask);

		    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
		      // All tasks are delayed, and this is the task with the earliest delay.
		      if (isHostTimeoutScheduled) {
		        // Cancel an existing timeout.
		        cancelHostTimeout();
		      } else {
		        isHostTimeoutScheduled = true;
		      } // Schedule a timeout.


		      requestHostTimeout(handleTimeout, startTime - currentTime);
		    }
		  } else {
		    newTask.sortIndex = expirationTime;
		    push(taskQueue, newTask);
		    // wait until the next time we yield.


		    if (!isHostCallbackScheduled && !isPerformingWork) {
		      isHostCallbackScheduled = true;
		      requestHostCallback(flushWork);
		    }
		  }

		  return newTask;
		}

		function unstable_pauseExecution() {
		}

		function unstable_continueExecution() {

		  if (!isHostCallbackScheduled && !isPerformingWork) {
		    isHostCallbackScheduled = true;
		    requestHostCallback(flushWork);
		  }
		}

		function unstable_getFirstCallbackNode() {
		  return peek(taskQueue);
		}

		function unstable_cancelCallback(task) {
		  // remove from the queue because you can't remove arbitrary nodes from an
		  // array based heap, only the first one.)


		  task.callback = null;
		}

		function unstable_getCurrentPriorityLevel() {
		  return currentPriorityLevel;
		}

		var isMessageLoopRunning = false;
		var scheduledHostCallback = null;
		var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
		// thread, like user events. By default, it yields multiple times per frame.
		// It does not attempt to align with frame boundaries, since most tasks don't
		// need to be frame aligned; for those that do, use requestAnimationFrame.

		var frameInterval = frameYieldMs;
		var startTime = -1;

		function shouldYieldToHost() {
		  var timeElapsed = exports.unstable_now() - startTime;

		  if (timeElapsed < frameInterval) {
		    // The main thread has only been blocked for a really short amount of time;
		    // smaller than a single frame. Don't yield yet.
		    return false;
		  } // The main thread has been blocked for a non-negligible amount of time. We


		  return true;
		}

		function requestPaint() {

		}

		function forceFrameRate(fps) {
		  if (fps < 0 || fps > 125) {
		    // Using console['error'] to evade Babel and ESLint
		    console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
		    return;
		  }

		  if (fps > 0) {
		    frameInterval = Math.floor(1000 / fps);
		  } else {
		    // reset the framerate
		    frameInterval = frameYieldMs;
		  }
		}

		var performWorkUntilDeadline = function () {
		  if (scheduledHostCallback !== null) {
		    var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread
		    // has been blocked.

		    startTime = currentTime;
		    var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the
		    // error can be observed.
		    //
		    // Intentionally not using a try-catch, since that makes some debugging
		    // techniques harder. Instead, if `scheduledHostCallback` errors, then
		    // `hasMoreWork` will remain true, and we'll continue the work loop.

		    var hasMoreWork = true;

		    try {
		      hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
		    } finally {
		      if (hasMoreWork) {
		        // If there's more work, schedule the next message event at the end
		        // of the preceding one.
		        schedulePerformWorkUntilDeadline();
		      } else {
		        isMessageLoopRunning = false;
		        scheduledHostCallback = null;
		      }
		    }
		  } else {
		    isMessageLoopRunning = false;
		  } // Yielding to the browser will give it a chance to paint, so we can
		};

		var schedulePerformWorkUntilDeadline;

		if (typeof localSetImmediate === 'function') {
		  // Node.js and old IE.
		  // There's a few reasons for why we prefer setImmediate.
		  //
		  // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.
		  // (Even though this is a DOM fork of the Scheduler, you could get here
		  // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)
		  // https://github.com/facebook/react/issues/20756
		  //
		  // But also, it runs earlier which is the semantic we want.
		  // If other browsers ever implement it, it's better to use it.
		  // Although both of these would be inferior to native scheduling.
		  schedulePerformWorkUntilDeadline = function () {
		    localSetImmediate(performWorkUntilDeadline);
		  };
		} else if (typeof MessageChannel !== 'undefined') {
		  // DOM and Worker environments.
		  // We prefer MessageChannel because of the 4ms setTimeout clamping.
		  var channel = new MessageChannel();
		  var port = channel.port2;
		  channel.port1.onmessage = performWorkUntilDeadline;

		  schedulePerformWorkUntilDeadline = function () {
		    port.postMessage(null);
		  };
		} else {
		  // We should only fallback here in non-browser environments.
		  schedulePerformWorkUntilDeadline = function () {
		    localSetTimeout(performWorkUntilDeadline, 0);
		  };
		}

		function requestHostCallback(callback) {
		  scheduledHostCallback = callback;

		  if (!isMessageLoopRunning) {
		    isMessageLoopRunning = true;
		    schedulePerformWorkUntilDeadline();
		  }
		}

		function requestHostTimeout(callback, ms) {
		  taskTimeoutID = localSetTimeout(function () {
		    callback(exports.unstable_now());
		  }, ms);
		}

		function cancelHostTimeout() {
		  localClearTimeout(taskTimeoutID);
		  taskTimeoutID = -1;
		}

		var unstable_requestPaint = requestPaint;
		var unstable_Profiling =  null;

		exports.unstable_IdlePriority = IdlePriority;
		exports.unstable_ImmediatePriority = ImmediatePriority;
		exports.unstable_LowPriority = LowPriority;
		exports.unstable_NormalPriority = NormalPriority;
		exports.unstable_Profiling = unstable_Profiling;
		exports.unstable_UserBlockingPriority = UserBlockingPriority;
		exports.unstable_cancelCallback = unstable_cancelCallback;
		exports.unstable_continueExecution = unstable_continueExecution;
		exports.unstable_forceFrameRate = forceFrameRate;
		exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
		exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
		exports.unstable_next = unstable_next;
		exports.unstable_pauseExecution = unstable_pauseExecution;
		exports.unstable_requestPaint = unstable_requestPaint;
		exports.unstable_runWithPriority = unstable_runWithPriority;
		exports.unstable_scheduleCallback = unstable_scheduleCallback;
		exports.unstable_shouldYield = shouldYieldToHost;
		exports.unstable_wrapCallback = unstable_wrapCallback;
		          /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
		if (
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined' &&
		  typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop ===
		    'function'
		) {
		  __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
		}
		        
		  })();
		} 
	} (scheduler_development));
	return scheduler_development;
}

var hasRequiredScheduler;

function requireScheduler () {
	if (hasRequiredScheduler) return scheduler.exports;
	hasRequiredScheduler = 1;

	if (process.env.NODE_ENV === 'production') {
	  scheduler.exports = requireScheduler_production_min();
	} else {
	  scheduler.exports = requireScheduler_development();
	}
	return scheduler.exports;
}

/**
 * @license React
 * react-reconciler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var reactReconciler_production_min;
var hasRequiredReactReconciler_production_min;

function requireReactReconciler_production_min () {
	if (hasRequiredReactReconciler_production_min) return reactReconciler_production_min;
	hasRequiredReactReconciler_production_min = 1;
	reactReconciler_production_min = function $$$reconciler($$$hostConfig) {
	    var exports = {};
var aa=React,ba=requireScheduler(),ca=Object.assign;function n(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return "Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}
	var da=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,ea=Symbol.for("react.element"),fa=Symbol.for("react.portal"),ha=Symbol.for("react.fragment"),ia=Symbol.for("react.strict_mode"),ja=Symbol.for("react.profiler"),ka=Symbol.for("react.provider"),la=Symbol.for("react.context"),ma=Symbol.for("react.forward_ref"),na=Symbol.for("react.suspense"),oa=Symbol.for("react.suspense_list"),pa=Symbol.for("react.memo"),qa=Symbol.for("react.lazy");	var ra=Symbol.for("react.offscreen");var sa=Symbol.iterator;function ta(a){if(null===a||"object"!==typeof a)return null;a=sa&&a[sa]||a["@@iterator"];return "function"===typeof a?a:null}
	function ua(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ha:return "Fragment";case fa:return "Portal";case ja:return "Profiler";case ia:return "StrictMode";case na:return "Suspense";case oa:return "SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case la:return (a.displayName||"Context")+".Consumer";case ka:return (a._context.displayName||"Context")+".Provider";case ma:var b=a.render;a=a.displayName;a||(a=b.displayName||
	b.name||"",a=""!==a?"ForwardRef("+a+")":"ForwardRef");return a;case pa:return b=a.displayName||null,null!==b?b:ua(a.type)||"Memo";case qa:b=a._payload;a=a._init;try{return ua(a(b))}catch(c){}}return null}
	function va(a){var b=a.type;switch(a.tag){case 24:return "Cache";case 9:return (b.displayName||"Context")+".Consumer";case 10:return (b._context.displayName||"Context")+".Provider";case 18:return "DehydratedFragment";case 11:return a=b.render,a=a.displayName||a.name||"",b.displayName||(""!==a?"ForwardRef("+a+")":"ForwardRef");case 7:return "Fragment";case 5:return b;case 4:return "Portal";case 3:return "Root";case 6:return "Text";case 16:return ua(b);case 8:return b===ia?"StrictMode":"Mode";case 22:return "Offscreen";
	case 12:return "Profiler";case 21:return "Scope";case 13:return "Suspense";case 19:return "SuspenseList";case 25:return "TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"===typeof b)return b.displayName||b.name||null;if("string"===typeof b)return b}return null}function wa(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else {a=b;do b=a,0!==(b.flags&4098)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function xa(a){if(wa(a)!==a)throw Error(n(188));}
	function za(a){var b=a.alternate;if(!b){b=wa(a);if(null===b)throw Error(n(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return xa(e),a;if(f===d)return xa(e),b;f=f.sibling;}throw Error(n(188));}if(c.return!==d.return)c=e,d=f;else {for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling;}if(!g){for(h=f.child;h;){if(h===
	c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling;}if(!g)throw Error(n(189));}}if(c.alternate!==d)throw Error(n(190));}if(3!==c.tag)throw Error(n(188));return c.stateNode.current===c?a:b}function Aa(a){a=za(a);return null!==a?Ba(a):null}function Ba(a){if(5===a.tag||6===a.tag)return a;for(a=a.child;null!==a;){var b=Ba(a);if(null!==b)return b;a=a.sibling;}return null}
	function Ca(a){if(5===a.tag||6===a.tag)return a;for(a=a.child;null!==a;){if(4!==a.tag){var b=Ca(a);if(null!==b)return b}a=a.sibling;}return null}
	var Da=Array.isArray,Ea=$$$hostConfig.getPublicInstance,Fa=$$$hostConfig.getRootHostContext,Ga=$$$hostConfig.getChildHostContext,Ha=$$$hostConfig.prepareForCommit,Ia=$$$hostConfig.resetAfterCommit,Ja=$$$hostConfig.createInstance,Ka=$$$hostConfig.appendInitialChild,La=$$$hostConfig.finalizeInitialChildren,Ma=$$$hostConfig.prepareUpdate,Na=$$$hostConfig.shouldSetTextContent,Oa=$$$hostConfig.createTextInstance,Pa=$$$hostConfig.scheduleTimeout,Qa=$$$hostConfig.cancelTimeout,Ra=$$$hostConfig.noTimeout,
	Sa=$$$hostConfig.isPrimaryRenderer,Ta=$$$hostConfig.supportsMutation,Ua=$$$hostConfig.supportsPersistence,Va=$$$hostConfig.supportsHydration,Wa=$$$hostConfig.getInstanceFromNode,Xa=$$$hostConfig.preparePortalMount,Ya=$$$hostConfig.getCurrentEventPriority,Za=$$$hostConfig.detachDeletedInstance,$a=$$$hostConfig.supportsMicrotasks,ab=$$$hostConfig.scheduleMicrotask,bb=$$$hostConfig.supportsTestSelectors,cb=$$$hostConfig.findFiberRoot,db=$$$hostConfig.getBoundingRect,eb=$$$hostConfig.getTextContent,fb=
	$$$hostConfig.isHiddenSubtree,gb=$$$hostConfig.matchAccessibilityRole,hb=$$$hostConfig.setFocusIfFocusable,ib=$$$hostConfig.setupIntersectionObserver,jb=$$$hostConfig.appendChild,kb=$$$hostConfig.appendChildToContainer,lb=$$$hostConfig.commitTextUpdate,mb=$$$hostConfig.commitMount,nb=$$$hostConfig.commitUpdate,ob=$$$hostConfig.insertBefore,pb=$$$hostConfig.insertInContainerBefore,qb=$$$hostConfig.removeChild,rb=$$$hostConfig.removeChildFromContainer,sb=$$$hostConfig.resetTextContent,tb=$$$hostConfig.hideInstance,
	ub=$$$hostConfig.hideTextInstance,vb=$$$hostConfig.unhideInstance,wb=$$$hostConfig.unhideTextInstance,xb=$$$hostConfig.clearContainer,yb=$$$hostConfig.cloneInstance,zb=$$$hostConfig.createContainerChildSet,Ab=$$$hostConfig.appendChildToContainerChildSet,Bb=$$$hostConfig.finalizeContainerChildren,Cb=$$$hostConfig.replaceContainerChildren,Eb=$$$hostConfig.cloneHiddenInstance,Fb=$$$hostConfig.cloneHiddenTextInstance,Gb=$$$hostConfig.canHydrateInstance,Hb=$$$hostConfig.canHydrateTextInstance,Ib=$$$hostConfig.canHydrateSuspenseInstance,
	Jb=$$$hostConfig.isSuspenseInstancePending,Kb=$$$hostConfig.isSuspenseInstanceFallback,Lb=$$$hostConfig.getSuspenseInstanceFallbackErrorDetails,Mb=$$$hostConfig.registerSuspenseInstanceRetry,Nb=$$$hostConfig.getNextHydratableSibling,Ob=$$$hostConfig.getFirstHydratableChild,Pb=$$$hostConfig.getFirstHydratableChildWithinContainer,Qb=$$$hostConfig.getFirstHydratableChildWithinSuspenseInstance,Rb=$$$hostConfig.hydrateInstance,Sb=$$$hostConfig.hydrateTextInstance,Tb=$$$hostConfig.hydrateSuspenseInstance,
	Ub=$$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance,Vb=$$$hostConfig.commitHydratedContainer,Wb=$$$hostConfig.commitHydratedSuspenseInstance,Xb=$$$hostConfig.clearSuspenseBoundary,Yb=$$$hostConfig.clearSuspenseBoundaryFromContainer,Zb=$$$hostConfig.shouldDeleteUnhydratedTailInstances,$b=$$$hostConfig.didNotMatchHydratedContainerTextInstance,ac=$$$hostConfig.didNotMatchHydratedTextInstance,bc;
	function cc(a){if(void 0===bc)try{throw Error();}catch(c){var b=c.stack.trim().match(/\n( *(at )?)/);bc=b&&b[1]||"";}return "\n"+bc+a}var dc=!1;
	function ec(a,b){if(!a||dc)return "";dc=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(b)if(b=function(){throw Error();},Object.defineProperty(b.prototype,"props",{set:function(){throw Error();}}),"object"===typeof Reflect&&Reflect.construct){try{Reflect.construct(b,[]);}catch(l){var d=l;}Reflect.construct(a,[],b);}else {try{b.call();}catch(l){d=l;}a.call(b.prototype);}else {try{throw Error();}catch(l){d=l;}a();}}catch(l){if(l&&d&&"string"===typeof l.stack){for(var e=l.stack.split("\n"),
	f=d.stack.split("\n"),g=e.length-1,h=f.length-1;1<=g&&0<=h&&e[g]!==f[h];)h--;for(;1<=g&&0<=h;g--,h--)if(e[g]!==f[h]){if(1!==g||1!==h){do if(g--,h--,0>h||e[g]!==f[h]){var k="\n"+e[g].replace(" at new "," at ");a.displayName&&k.includes("<anonymous>")&&(k=k.replace("<anonymous>",a.displayName));return k}while(1<=g&&0<=h)}break}}}finally{dc=!1,Error.prepareStackTrace=c;}return (a=a?a.displayName||a.name:"")?cc(a):""}var fc=Object.prototype.hasOwnProperty,gc=[],hc=-1;function ic(a){return {current:a}}
	function q(a){0>hc||(a.current=gc[hc],gc[hc]=null,hc--);}function v(a,b){hc++;gc[hc]=a.current;a.current=b;}var jc={},x=ic(jc),z=ic(!1),kc=jc;function mc(a,b){var c=a.type.contextTypes;if(!c)return jc;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}
	function A(a){a=a.childContextTypes;return null!==a&&void 0!==a}function nc(){q(z);q(x);}function oc(a,b,c){if(x.current!==jc)throw Error(n(168));v(x,b);v(z,c);}function pc(a,b,c){var d=a.stateNode;b=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in b))throw Error(n(108,va(a)||"Unknown",e));return ca({},c,d)}
	function qc(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||jc;kc=x.current;v(x,a);v(z,z.current);return !0}function rc(a,b,c){var d=a.stateNode;if(!d)throw Error(n(169));c?(a=pc(a,b,kc),d.__reactInternalMemoizedMergedChildContext=a,q(z),q(x),v(x,a)):q(z);v(z,c);}var tc=Math.clz32?Math.clz32:sc,uc=Math.log,vc=Math.LN2;function sc(a){a>>>=0;return 0===a?32:31-(uc(a)/vc|0)|0}var wc=64,xc=4194304;
	function yc(a){switch(a&-a){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return a&4194240;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return a&130023424;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;
	default:return a}}function zc(a,b){var c=a.pendingLanes;if(0===c)return 0;var d=0,e=a.suspendedLanes,f=a.pingedLanes,g=c&268435455;if(0!==g){var h=g&~e;0!==h?d=yc(h):(f&=g,0!==f&&(d=yc(f)));}else g=c&~e,0!==g?d=yc(g):0!==f&&(d=yc(f));if(0===d)return 0;if(0!==b&&b!==d&&0===(b&e)&&(e=d&-d,f=b&-b,e>=f||16===e&&0!==(f&4194240)))return b;0!==(d&4)&&(d|=c&16);b=a.entangledLanes;if(0!==b)for(a=a.entanglements,b&=d;0<b;)c=31-tc(b),e=1<<c,d|=a[c],b&=~e;return d}
	function Ac(a,b){switch(a){case 1:case 2:case 4:return b+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return b+5E3;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return -1;case 134217728:case 268435456:case 536870912:case 1073741824:return -1;default:return -1}}
	function Bc(a,b){for(var c=a.suspendedLanes,d=a.pingedLanes,e=a.expirationTimes,f=a.pendingLanes;0<f;){var g=31-tc(f),h=1<<g,k=e[g];if(-1===k){if(0===(h&c)||0!==(h&d))e[g]=Ac(h,b);}else k<=b&&(a.expiredLanes|=h);f&=~h;}}function Cc(a){a=a.pendingLanes&-1073741825;return 0!==a?a:a&1073741824?1073741824:0}function Dc(){var a=wc;wc<<=1;0===(wc&4194240)&&(wc=64);return a}function Ec(a){for(var b=[],c=0;31>c;c++)b.push(a);return b}
	function Fc(a,b,c){a.pendingLanes|=b;536870912!==b&&(a.suspendedLanes=0,a.pingedLanes=0);a=a.eventTimes;b=31-tc(b);a[b]=c;}function Gc(a,b){var c=a.pendingLanes&~b;a.pendingLanes=b;a.suspendedLanes=0;a.pingedLanes=0;a.expiredLanes&=b;a.mutableReadLanes&=b;a.entangledLanes&=b;b=a.entanglements;var d=a.eventTimes;for(a=a.expirationTimes;0<c;){var e=31-tc(c),f=1<<e;b[e]=0;d[e]=-1;a[e]=-1;c&=~f;}}
	function Hc(a,b){var c=a.entangledLanes|=b;for(a=a.entanglements;c;){var d=31-tc(c),e=1<<d;e&b|a[d]&b&&(a[d]|=b);c&=~e;}}var C=0;function Ic(a){a&=-a;return 1<a?4<a?0!==(a&268435455)?16:536870912:4:1}var Jc=ba.unstable_scheduleCallback,Kc=ba.unstable_cancelCallback,Lc=ba.unstable_shouldYield,Mc=ba.unstable_requestPaint,D=ba.unstable_now,Nc=ba.unstable_ImmediatePriority,Oc=ba.unstable_UserBlockingPriority,Pc=ba.unstable_NormalPriority,Qc=ba.unstable_IdlePriority,Rc=null,Sc=null;
	function Tc(a){if(Sc&&"function"===typeof Sc.onCommitFiberRoot)try{Sc.onCommitFiberRoot(Rc,a,void 0,128===(a.current.flags&128));}catch(b){}}function Uc(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var Vc="function"===typeof Object.is?Object.is:Uc,Wc=null,Xc=!1,Yc=!1;function Zc(a){null===Wc?Wc=[a]:Wc.push(a);}function $c(a){Xc=!0;Zc(a);}
	function ad(){if(!Yc&&null!==Wc){Yc=!0;var a=0,b=C;try{var c=Wc;for(C=1;a<c.length;a++){var d=c[a];do d=d(!0);while(null!==d)}Wc=null;Xc=!1;}catch(e){throw null!==Wc&&(Wc=Wc.slice(a+1)),Jc(Nc,ad),e;}finally{C=b,Yc=!1;}}return null}var bd=[],cd=0,dd=null,ed=0,fd=[],gd=0,hd=null,id=1,jd="";function kd(a,b){bd[cd++]=ed;bd[cd++]=dd;dd=a;ed=b;}
	function ld(a,b,c){fd[gd++]=id;fd[gd++]=jd;fd[gd++]=hd;hd=a;var d=id;a=jd;var e=32-tc(d)-1;d&=~(1<<e);c+=1;var f=32-tc(b)+e;if(30<f){var g=e-e%5;f=(d&(1<<g)-1).toString(32);d>>=g;e-=g;id=1<<32-tc(b)+e|c<<e|d;jd=f+a;}else id=1<<f|c<<e|d,jd=a;}function md(a){null!==a.return&&(kd(a,1),ld(a,1,0));}function nd(a){for(;a===dd;)dd=bd[--cd],bd[cd]=null,ed=bd[--cd],bd[cd]=null;for(;a===hd;)hd=fd[--gd],fd[gd]=null,jd=fd[--gd],fd[gd]=null,id=fd[--gd],fd[gd]=null;}var od=null,pd=null,F=!1,qd=!1,rd=null;
	function sd(a,b){var c=td(5,null,null,0);c.elementType="DELETED";c.stateNode=b;c.return=a;b=a.deletions;null===b?(a.deletions=[c],a.flags|=16):b.push(c);}
	function ud(a,b){switch(a.tag){case 5:return b=Gb(b,a.type,a.pendingProps),null!==b?(a.stateNode=b,od=a,pd=Ob(b),!0):!1;case 6:return b=Hb(b,a.pendingProps),null!==b?(a.stateNode=b,od=a,pd=null,!0):!1;case 13:b=Ib(b);if(null!==b){var c=null!==hd?{id:id,overflow:jd}:null;a.memoizedState={dehydrated:b,treeContext:c,retryLane:1073741824};c=td(18,null,null,0);c.stateNode=b;c.return=a;a.child=c;od=a;pd=null;return !0}return !1;default:return !1}}function vd(a){return 0!==(a.mode&1)&&0===(a.flags&128)}
	function wd(a){if(F){var b=pd;if(b){var c=b;if(!ud(a,b)){if(vd(a))throw Error(n(418));b=Nb(c);var d=od;b&&ud(a,b)?sd(d,c):(a.flags=a.flags&-4097|2,F=!1,od=a);}}else {if(vd(a))throw Error(n(418));a.flags=a.flags&-4097|2;F=!1;od=a;}}}function xd(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;od=a;}
	function yd(a){if(!Va||a!==od)return !1;if(!F)return xd(a),F=!0,!1;if(3!==a.tag&&(5!==a.tag||Zb(a.type)&&!Na(a.type,a.memoizedProps))){var b=pd;if(b){if(vd(a))throw zd(),Error(n(418));for(;b;)sd(a,b),b=Nb(b);}}xd(a);if(13===a.tag){if(!Va)throw Error(n(316));a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(n(317));pd=Ub(a);}else pd=od?Nb(a.stateNode):null;return !0}function zd(){for(var a=pd;a;)a=Nb(a);}function Ad(){Va&&(pd=od=null,qd=F=!1);}function Bd(a){null===rd?rd=[a]:rd.push(a);}
	var Cd=da.ReactCurrentBatchConfig;function Dd(a,b){if(Vc(a,b))return !0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return !1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return !1;for(d=0;d<c.length;d++){var e=c[d];if(!fc.call(b,e)||!Vc(a[e],b[e]))return !1}return !0}
	function Ed(a){switch(a.tag){case 5:return cc(a.type);case 16:return cc("Lazy");case 13:return cc("Suspense");case 19:return cc("SuspenseList");case 0:case 2:case 15:return a=ec(a.type,!1),a;case 11:return a=ec(a.type.render,!1),a;case 1:return a=ec(a.type,!0),a;default:return ""}}
	function Fd(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(n(309));var d=c.stateNode;}if(!d)throw Error(n(147,a));var e=d,f=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===f)return b.ref;b=function(a){var b=e.refs;null===a?delete b[f]:b[f]=a;};b._stringRef=f;return b}if("string"!==typeof a)throw Error(n(284));if(!c._owner)throw Error(n(290,a));}return a}
	function Gd(a,b){a=Object.prototype.toString.call(b);throw Error(n(31,"[object Object]"===a?"object with keys {"+Object.keys(b).join(", ")+"}":a));}function Hd(a){var b=a._init;return b(a._payload)}
	function Id(a){function b(b,c){if(a){var d=b.deletions;null===d?(b.deletions=[c],b.flags|=16):d.push(c);}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Jd(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return b.flags|=1048576,c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.flags|=2,c):d;b.flags|=2;return c}function g(b){a&&
	null===b.alternate&&(b.flags|=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Kd(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){var f=c.type;if(f===ha)return m(a,b,c.props.children,d,c.key);if(null!==b&&(b.elementType===f||"object"===typeof f&&null!==f&&f.$$typeof===qa&&Hd(f)===b.type))return d=e(b,c.props),d.ref=Fd(a,b,c),d.return=a,d;d=Ld(c.type,c.key,c.props,null,a.mode,d);d.ref=Fd(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||
	b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==c.implementation)return b=Md(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Nd(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function r(a,b,c){if("string"===typeof b&&""!==b||"number"===typeof b)return b=Kd(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case ea:return c=Ld(b.type,b.key,b.props,null,a.mode,c),
	c.ref=Fd(a,null,b),c.return=a,c;case fa:return b=Md(b,a.mode,c),b.return=a,b;case qa:var d=b._init;return r(a,d(b._payload),c)}if(Da(b)||ta(b))return b=Nd(b,a.mode,c,null),b.return=a,b;Gd(a,b);}return null}function p(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c&&""!==c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case ea:return c.key===e?k(a,b,c,d):null;case fa:return c.key===e?l(a,b,c,d):null;case qa:return e=c._init,p(a,
	b,e(c._payload),d)}if(Da(c)||ta(c))return null!==e?null:m(a,b,c,d,null);Gd(a,c);}return null}function B(a,b,c,d,e){if("string"===typeof d&&""!==d||"number"===typeof d)return a=a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case ea:return a=a.get(null===d.key?c:d.key)||null,k(b,a,d,e);case fa:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e);case qa:var f=d._init;return B(a,b,c,f(d._payload),e)}if(Da(d)||ta(d))return a=a.get(c)||null,m(b,a,d,e,null);Gd(b,d);}return null}
	function w(e,g,h,k){for(var l=null,m=null,u=g,t=g=0,E=null;null!==u&&t<h.length;t++){u.index>t?(E=u,u=null):E=u.sibling;var y=p(e,u,h[t],k);if(null===y){null===u&&(u=E);break}a&&u&&null===y.alternate&&b(e,u);g=f(y,g,t);null===m?l=y:m.sibling=y;m=y;u=E;}if(t===h.length)return c(e,u),F&&kd(e,t),l;if(null===u){for(;t<h.length;t++)u=r(e,h[t],k),null!==u&&(g=f(u,g,t),null===m?l=u:m.sibling=u,m=u);F&&kd(e,t);return l}for(u=d(e,u);t<h.length;t++)E=B(u,e,t,h[t],k),null!==E&&(a&&null!==E.alternate&&u.delete(null===
	E.key?t:E.key),g=f(E,g,t),null===m?l=E:m.sibling=E,m=E);a&&u.forEach(function(a){return b(e,a)});F&&kd(e,t);return l}function Y(e,g,h,k){var l=ta(h);if("function"!==typeof l)throw Error(n(150));h=l.call(h);if(null==h)throw Error(n(151));for(var u=l=null,m=g,t=g=0,E=null,y=h.next();null!==m&&!y.done;t++,y=h.next()){m.index>t?(E=m,m=null):E=m.sibling;var w=p(e,m,y.value,k);if(null===w){null===m&&(m=E);break}a&&m&&null===w.alternate&&b(e,m);g=f(w,g,t);null===u?l=w:u.sibling=w;u=w;m=E;}if(y.done)return c(e,
	m),F&&kd(e,t),l;if(null===m){for(;!y.done;t++,y=h.next())y=r(e,y.value,k),null!==y&&(g=f(y,g,t),null===u?l=y:u.sibling=y,u=y);F&&kd(e,t);return l}for(m=d(e,m);!y.done;t++,y=h.next())y=B(m,e,t,y.value,k),null!==y&&(a&&null!==y.alternate&&m.delete(null===y.key?t:y.key),g=f(y,g,t),null===u?l=y:u.sibling=y,u=y);a&&m.forEach(function(a){return b(e,a)});F&&kd(e,t);return l}function ya(a,d,f,h){"object"===typeof f&&null!==f&&f.type===ha&&null===f.key&&(f=f.props.children);if("object"===typeof f&&null!==
	f){switch(f.$$typeof){case ea:a:{for(var k=f.key,l=d;null!==l;){if(l.key===k){k=f.type;if(k===ha){if(7===l.tag){c(a,l.sibling);d=e(l,f.props.children);d.return=a;a=d;break a}}else if(l.elementType===k||"object"===typeof k&&null!==k&&k.$$typeof===qa&&Hd(k)===l.type){c(a,l.sibling);d=e(l,f.props);d.ref=Fd(a,l,f);d.return=a;a=d;break a}c(a,l);break}else b(a,l);l=l.sibling;}f.type===ha?(d=Nd(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Ld(f.type,f.key,f.props,null,a.mode,h),h.ref=Fd(a,d,f),h.return=
	a,a=h);}return g(a);case fa:a:{for(l=f.key;null!==d;){if(d.key===l)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else {c(a,d);break}else b(a,d);d=d.sibling;}d=Md(f,a.mode,h);d.return=a;a=d;}return g(a);case qa:return l=f._init,ya(a,d,l(f._payload),h)}if(Da(f))return w(a,d,f,h);if(ta(f))return Y(a,d,f,h);Gd(a,f);}return "string"===typeof f&&""!==f||"number"===typeof f?(f=""+f,null!==d&&
	6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=Kd(f,a.mode,h),d.return=a,a=d),g(a)):c(a,d)}return ya}var Od=Id(!0),Pd=Id(!1),Qd=ic(null),Rd=null,Sd=null,Td=null;function Ud(){Td=Sd=Rd=null;}function Vd(a,b,c){Sa?(v(Qd,b._currentValue),b._currentValue=c):(v(Qd,b._currentValue2),b._currentValue2=c);}function Wd(a){var b=Qd.current;q(Qd);Sa?a._currentValue=b:a._currentValue2=b;}
	function Xd(a,b,c){for(;null!==a;){var d=a.alternate;(a.childLanes&b)!==b?(a.childLanes|=b,null!==d&&(d.childLanes|=b)):null!==d&&(d.childLanes&b)!==b&&(d.childLanes|=b);if(a===c)break;a=a.return;}}function Yd(a,b){Rd=a;Td=Sd=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(0!==(a.lanes&b)&&(G=!0),a.firstContext=null);}
	function Zd(a){var b=Sa?a._currentValue:a._currentValue2;if(Td!==a)if(a={context:a,memoizedValue:b,next:null},null===Sd){if(null===Rd)throw Error(n(308));Sd=a;Rd.dependencies={lanes:0,firstContext:a};}else Sd=Sd.next=a;return b}var $d=null;function ae(a){null===$d?$d=[a]:$d.push(a);}function be(a,b,c,d){var e=b.interleaved;null===e?(c.next=c,ae(b)):(c.next=e.next,e.next=c);b.interleaved=c;return ce(a,d)}
	function ce(a,b){a.lanes|=b;var c=a.alternate;null!==c&&(c.lanes|=b);c=a;for(a=a.return;null!==a;)a.childLanes|=b,c=a.alternate,null!==c&&(c.childLanes|=b),c=a,a=a.return;return 3===c.tag?c.stateNode:null}var de=!1;function ee(a){a.updateQueue={baseState:a.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null};}
	function fe(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,firstBaseUpdate:a.firstBaseUpdate,lastBaseUpdate:a.lastBaseUpdate,shared:a.shared,effects:a.effects});}function ge(a,b){return {eventTime:a,lane:b,tag:0,payload:null,callback:null,next:null}}
	function he(a,b,c){var d=a.updateQueue;if(null===d)return null;d=d.shared;if(0!==(H&2)){var e=d.pending;null===e?b.next=b:(b.next=e.next,e.next=b);d.pending=b;return ce(a,c)}e=d.interleaved;null===e?(b.next=b,ae(d)):(b.next=e.next,e.next=b);d.interleaved=b;return ce(a,c)}function ie(a,b,c){b=b.updateQueue;if(null!==b&&(b=b.shared,0!==(c&4194240))){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Hc(a,c);}}
	function je(a,b){var c=a.updateQueue,d=a.alternate;if(null!==d&&(d=d.updateQueue,c===d)){var e=null,f=null;c=c.firstBaseUpdate;if(null!==c){do{var g={eventTime:c.eventTime,lane:c.lane,tag:c.tag,payload:c.payload,callback:c.callback,next:null};null===f?e=f=g:f=f.next=g;c=c.next;}while(null!==c);null===f?e=f=b:f=f.next=b;}else e=f=b;c={baseState:d.baseState,firstBaseUpdate:e,lastBaseUpdate:f,shared:d.shared,effects:d.effects};a.updateQueue=c;return}a=c.lastBaseUpdate;null===a?c.firstBaseUpdate=b:a.next=
	b;c.lastBaseUpdate=b;}
	function ke(a,b,c,d){var e=a.updateQueue;de=!1;var f=e.firstBaseUpdate,g=e.lastBaseUpdate,h=e.shared.pending;if(null!==h){e.shared.pending=null;var k=h,l=k.next;k.next=null;null===g?f=l:g.next=l;g=k;var m=a.alternate;null!==m&&(m=m.updateQueue,h=m.lastBaseUpdate,h!==g&&(null===h?m.firstBaseUpdate=l:h.next=l,m.lastBaseUpdate=k));}if(null!==f){var r=e.baseState;g=0;m=l=k=null;h=f;do{var p=h.lane,B=h.eventTime;if((d&p)===p){null!==m&&(m=m.next={eventTime:B,lane:0,tag:h.tag,payload:h.payload,callback:h.callback,
	next:null});a:{var w=a,Y=h;p=b;B=c;switch(Y.tag){case 1:w=Y.payload;if("function"===typeof w){r=w.call(B,r,p);break a}r=w;break a;case 3:w.flags=w.flags&-65537|128;case 0:w=Y.payload;p="function"===typeof w?w.call(B,r,p):w;if(null===p||void 0===p)break a;r=ca({},r,p);break a;case 2:de=!0;}}null!==h.callback&&0!==h.lane&&(a.flags|=64,p=e.effects,null===p?e.effects=[h]:p.push(h));}else B={eventTime:B,lane:p,tag:h.tag,payload:h.payload,callback:h.callback,next:null},null===m?(l=m=B,k=r):m=m.next=B,g|=
	p;h=h.next;if(null===h)if(h=e.shared.pending,null===h)break;else p=h,h=p.next,p.next=null,e.lastBaseUpdate=p,e.shared.pending=null;}while(1);null===m&&(k=r);e.baseState=k;e.firstBaseUpdate=l;e.lastBaseUpdate=m;b=e.shared.interleaved;if(null!==b){e=b;do g|=e.lane,e=e.next;while(e!==b)}else null===f&&(e.shared.lanes=0);le|=g;a.lanes=g;a.memoizedState=r;}}
	function me(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=c;if("function"!==typeof e)throw Error(n(191,e));e.call(d);}}}var ne={},oe=ic(ne),pe=ic(ne),qe=ic(ne);function re(a){if(a===ne)throw Error(n(174));return a}function se(a,b){v(qe,b);v(pe,a);v(oe,ne);a=Fa(b);q(oe);v(oe,a);}function te(){q(oe);q(pe);q(qe);}function ue(a){var b=re(qe.current),c=re(oe.current);b=Ga(c,a.type,b);c!==b&&(v(pe,a),v(oe,b));}
	function ve(a){pe.current===a&&(q(oe),q(pe));}var I=ic(0);function we(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||Jb(c)||Kb(c)))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.flags&128))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return;}b.sibling.return=b.return;b=b.sibling;}return null}var xe=[];
	function ye(){for(var a=0;a<xe.length;a++){var b=xe[a];Sa?b._workInProgressVersionPrimary=null:b._workInProgressVersionSecondary=null;}xe.length=0;}var ze=da.ReactCurrentDispatcher,Ae=da.ReactCurrentBatchConfig,Be=0,J=null,K=null,L=null,Ce=!1,De=!1,Ee=0,Fe=0;function M(){throw Error(n(321));}function Ge(a,b){if(null===b)return !1;for(var c=0;c<b.length&&c<a.length;c++)if(!Vc(a[c],b[c]))return !1;return !0}
	function He(a,b,c,d,e,f){Be=f;J=b;b.memoizedState=null;b.updateQueue=null;b.lanes=0;ze.current=null===a||null===a.memoizedState?Ie:Je;a=c(d,e);if(De){f=0;do{De=!1;Ee=0;if(25<=f)throw Error(n(301));f+=1;L=K=null;b.updateQueue=null;ze.current=Ke;a=c(d,e);}while(De)}ze.current=Le;b=null!==K&&null!==K.next;Be=0;L=K=J=null;Ce=!1;if(b)throw Error(n(300));return a}function Me(){var a=0!==Ee;Ee=0;return a}
	function Ne(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===L?J.memoizedState=L=a:L=L.next=a;return L}function Oe(){if(null===K){var a=J.alternate;a=null!==a?a.memoizedState:null;}else a=K.next;var b=null===L?J.memoizedState:L.next;if(null!==b)L=b,K=a;else {if(null===a)throw Error(n(310));K=a;a={memoizedState:K.memoizedState,baseState:K.baseState,baseQueue:K.baseQueue,queue:K.queue,next:null};null===L?J.memoizedState=L=a:L=L.next=a;}return L}
	function Pe(a,b){return "function"===typeof b?b(a):b}
	function Qe(a){var b=Oe(),c=b.queue;if(null===c)throw Error(n(311));c.lastRenderedReducer=a;var d=K,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g;}d.baseQueue=e=f;c.pending=null;}if(null!==e){f=e.next;d=d.baseState;var h=g=null,k=null,l=f;do{var m=l.lane;if((Be&m)===m)null!==k&&(k=k.next={lane:0,action:l.action,hasEagerState:l.hasEagerState,eagerState:l.eagerState,next:null}),d=l.hasEagerState?l.eagerState:a(d,l.action);else {var r={lane:m,action:l.action,hasEagerState:l.hasEagerState,
	eagerState:l.eagerState,next:null};null===k?(h=k=r,g=d):k=k.next=r;J.lanes|=m;le|=m;}l=l.next;}while(null!==l&&l!==f);null===k?g=d:k.next=h;Vc(d,b.memoizedState)||(G=!0);b.memoizedState=d;b.baseState=g;b.baseQueue=k;c.lastRenderedState=d;}a=c.interleaved;if(null!==a){e=a;do f=e.lane,J.lanes|=f,le|=f,e=e.next;while(e!==a)}else null===e&&(c.lanes=0);return [b.memoizedState,c.dispatch]}
	function Re(a){var b=Oe(),c=b.queue;if(null===c)throw Error(n(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);Vc(f,b.memoizedState)||(G=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f;}return [f,d]}function Se(){}
	function Te(a,b){var c=J,d=Oe(),e=b(),f=!Vc(d.memoizedState,e);f&&(d.memoizedState=e,G=!0);d=d.queue;Ue(Ve.bind(null,c,d,a),[a]);if(d.getSnapshot!==b||f||null!==L&&L.memoizedState.tag&1){c.flags|=2048;We(9,Xe.bind(null,c,d,e,b),void 0,null);if(null===N)throw Error(n(349));0!==(Be&30)||Ye(c,b,e);}return e}function Ye(a,b,c){a.flags|=16384;a={getSnapshot:b,value:c};b=J.updateQueue;null===b?(b={lastEffect:null,stores:null},J.updateQueue=b,b.stores=[a]):(c=b.stores,null===c?b.stores=[a]:c.push(a));}
	function Xe(a,b,c,d){b.value=c;b.getSnapshot=d;Ze(b)&&$e(a);}function Ve(a,b,c){return c(function(){Ze(b)&&$e(a);})}function Ze(a){var b=a.getSnapshot;a=a.value;try{var c=b();return !Vc(a,c)}catch(d){return !0}}function $e(a){var b=ce(a,1);null!==b&&af(b,a,1,-1);}
	function bf(a){var b=Ne();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Pe,lastRenderedState:a};b.queue=a;a=a.dispatch=cf.bind(null,J,a);return [b.memoizedState,a]}
	function We(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=J.updateQueue;null===b?(b={lastEffect:null,stores:null},J.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}function df(){return Oe().memoizedState}function ef(a,b,c,d){var e=Ne();J.flags|=a;e.memoizedState=We(1|b,c,void 0,void 0===d?null:d);}
	function ff(a,b,c,d){var e=Oe();d=void 0===d?null:d;var f=void 0;if(null!==K){var g=K.memoizedState;f=g.destroy;if(null!==d&&Ge(d,g.deps)){e.memoizedState=We(b,c,f,d);return}}J.flags|=a;e.memoizedState=We(1|b,c,f,d);}function gf(a,b){return ef(8390656,8,a,b)}function Ue(a,b){return ff(2048,8,a,b)}function hf(a,b){return ff(4,2,a,b)}function jf(a,b){return ff(4,4,a,b)}
	function kf(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null);};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null;}}function lf(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ff(4,4,kf.bind(null,b,a),c)}function mf(){}function nf(a,b){var c=Oe();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Ge(b,d[1]))return d[0];c.memoizedState=[a,b];return a}
	function of(a,b){var c=Oe();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&Ge(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function pf(a,b,c){if(0===(Be&21))return a.baseState&&(a.baseState=!1,G=!0),a.memoizedState=c;Vc(c,b)||(c=Dc(),J.lanes|=c,le|=c,a.baseState=!0);return b}function qf(a,b){var c=C;C=0!==c&&4>c?c:4;a(!0);var d=Ae.transition;Ae.transition={};try{a(!1),b();}finally{C=c,Ae.transition=d;}}function rf(){return Oe().memoizedState}
	function sf(a,b,c){var d=tf(a);c={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(uf(a))vf(b,c);else if(c=be(a,b,c,d),null!==c){var e=O();af(c,a,d,e);wf(c,b,d);}}
	function cf(a,b,c){var d=tf(a),e={lane:d,action:c,hasEagerState:!1,eagerState:null,next:null};if(uf(a))vf(b,e);else {var f=a.alternate;if(0===a.lanes&&(null===f||0===f.lanes)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.hasEagerState=!0;e.eagerState=h;if(Vc(h,g)){var k=b.interleaved;null===k?(e.next=e,ae(b)):(e.next=k.next,k.next=e);b.interleaved=e;return}}catch(l){}finally{}c=be(a,b,e,d);null!==c&&(e=O(),af(c,a,d,e),wf(c,b,d));}}
	function uf(a){var b=a.alternate;return a===J||null!==b&&b===J}function vf(a,b){De=Ce=!0;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b;}function wf(a,b,c){if(0!==(c&4194240)){var d=b.lanes;d&=a.pendingLanes;c|=d;b.lanes=c;Hc(a,c);}}
	var Le={readContext:Zd,useCallback:M,useContext:M,useEffect:M,useImperativeHandle:M,useInsertionEffect:M,useLayoutEffect:M,useMemo:M,useReducer:M,useRef:M,useState:M,useDebugValue:M,useDeferredValue:M,useTransition:M,useMutableSource:M,useSyncExternalStore:M,useId:M,unstable_isNewReconciler:!1},Ie={readContext:Zd,useCallback:function(a,b){Ne().memoizedState=[a,void 0===b?null:b];return a},useContext:Zd,useEffect:gf,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return ef(4194308,
	4,kf.bind(null,b,a),c)},useLayoutEffect:function(a,b){return ef(4194308,4,a,b)},useInsertionEffect:function(a,b){return ef(4,2,a,b)},useMemo:function(a,b){var c=Ne();b=void 0===b?null:b;a=a();c.memoizedState=[a,b];return a},useReducer:function(a,b,c){var d=Ne();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};d.queue=a;a=a.dispatch=sf.bind(null,J,a);return [d.memoizedState,a]},useRef:function(a){var b=
	Ne();a={current:a};return b.memoizedState=a},useState:bf,useDebugValue:mf,useDeferredValue:function(a){return Ne().memoizedState=a},useTransition:function(){var a=bf(!1),b=a[0];a=qf.bind(null,a[1]);Ne().memoizedState=a;return [b,a]},useMutableSource:function(){},useSyncExternalStore:function(a,b,c){var d=J,e=Ne();if(F){if(void 0===c)throw Error(n(407));c=c();}else {c=b();if(null===N)throw Error(n(349));0!==(Be&30)||Ye(d,b,c);}e.memoizedState=c;var f={value:c,getSnapshot:b};e.queue=f;gf(Ve.bind(null,d,
	f,a),[a]);d.flags|=2048;We(9,Xe.bind(null,d,f,c,b),void 0,null);return c},useId:function(){var a=Ne(),b=N.identifierPrefix;if(F){var c=jd;var d=id;c=(d&~(1<<32-tc(d)-1)).toString(32)+c;b=":"+b+"R"+c;c=Ee++;0<c&&(b+="H"+c.toString(32));b+=":";}else c=Fe++,b=":"+b+"r"+c.toString(32)+":";return a.memoizedState=b},unstable_isNewReconciler:!1},Je={readContext:Zd,useCallback:nf,useContext:Zd,useEffect:Ue,useImperativeHandle:lf,useInsertionEffect:hf,useLayoutEffect:jf,useMemo:of,useReducer:Qe,useRef:df,useState:function(){return Qe(Pe)},
	useDebugValue:mf,useDeferredValue:function(a){var b=Oe();return pf(b,K.memoizedState,a)},useTransition:function(){var a=Qe(Pe)[0],b=Oe().memoizedState;return [a,b]},useMutableSource:Se,useSyncExternalStore:Te,useId:rf,unstable_isNewReconciler:!1},Ke={readContext:Zd,useCallback:nf,useContext:Zd,useEffect:Ue,useImperativeHandle:lf,useInsertionEffect:hf,useLayoutEffect:jf,useMemo:of,useReducer:Re,useRef:df,useState:function(){return Re(Pe)},useDebugValue:mf,useDeferredValue:function(a){var b=Oe();return null===
	K?b.memoizedState=a:pf(b,K.memoizedState,a)},useTransition:function(){var a=Re(Pe)[0],b=Oe().memoizedState;return [a,b]},useMutableSource:Se,useSyncExternalStore:Te,useId:rf,unstable_isNewReconciler:!1};function xf(a,b){if(a&&a.defaultProps){b=ca({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c]);return b}return b}function yf(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:ca({},b,c);a.memoizedState=c;0===a.lanes&&(a.updateQueue.baseState=c);}
	var zf={isMounted:function(a){return (a=a._reactInternals)?wa(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternals;var d=O(),e=tf(a),f=ge(d,e);f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=he(a,f,e);null!==b&&(af(b,a,e,d),ie(b,a,e));},enqueueReplaceState:function(a,b,c){a=a._reactInternals;var d=O(),e=tf(a),f=ge(d,e);f.tag=1;f.payload=b;void 0!==c&&null!==c&&(f.callback=c);b=he(a,f,e);null!==b&&(af(b,a,e,d),ie(b,a,e));},enqueueForceUpdate:function(a,b){a=a._reactInternals;var c=O(),d=
	tf(a),e=ge(c,d);e.tag=2;void 0!==b&&null!==b&&(e.callback=b);b=he(a,e,d);null!==b&&(af(b,a,d,c),ie(b,a,d));}};function Af(a,b,c,d,e,f,g){a=a.stateNode;return "function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!Dd(c,d)||!Dd(e,f):!0}
	function Bf(a,b,c){var d=!1,e=jc;var f=b.contextType;"object"===typeof f&&null!==f?f=Zd(f):(e=A(b)?kc:x.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?mc(a,e):jc);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=zf;a.stateNode=b;b._reactInternals=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
	function Cf(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&zf.enqueueReplaceState(b,b.state,null);}
	function Df(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs={};ee(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=Zd(f):(f=A(b)?kc:x.current,e.context=mc(a,f));e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(yf(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||(b=e.state,
	"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&zf.enqueueReplaceState(e,e.state,null),ke(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.flags|=4194308);}function Ef(a,b){try{var c="",d=b;do c+=Ed(d),d=d.return;while(d);var e=c;}catch(f){e="\nError generating stack: "+f.message+"\n"+f.stack;}return {value:a,source:b,stack:e,digest:null}}
	function Ff(a,b,c){return {value:a,source:null,stack:null!=c?c:null,digest:null!=b?b:null}}function Gf(a,b){try{console.error(b.value);}catch(c){setTimeout(function(){throw c;});}}var Hf="function"===typeof WeakMap?WeakMap:Map;function If(a,b,c){c=ge(-1,c);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Jf||(Jf=!0,Kf=d);Gf(a,b);};return c}
	function Lf(a,b,c){c=ge(-1,c);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){return d(e)};c.callback=function(){Gf(a,b);};}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){Gf(a,b);"function"!==typeof d&&(null===Mf?Mf=new Set([this]):Mf.add(this));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""});});return c}
	function Nf(a,b,c){var d=a.pingCache;if(null===d){d=a.pingCache=new Hf;var e=new Set;d.set(b,e);}else e=d.get(b),void 0===e&&(e=new Set,d.set(b,e));e.has(c)||(e.add(c),a=Of.bind(null,a,b,c),b.then(a,a));}function Pf(a){do{var b;if(b=13===a.tag)b=a.memoizedState,b=null!==b?null!==b.dehydrated?!0:!1:!0;if(b)return a;a=a.return;}while(null!==a);return null}
	function Qf(a,b,c,d,e){if(0===(a.mode&1))return a===b?a.flags|=65536:(a.flags|=128,c.flags|=131072,c.flags&=-52805,1===c.tag&&(null===c.alternate?c.tag=17:(b=ge(-1,1),b.tag=2,he(c,b,1))),c.lanes|=1),a;a.flags|=65536;a.lanes=e;return a}var Rf=da.ReactCurrentOwner,G=!1;function P(a,b,c,d){b.child=null===a?Pd(b,null,c,d):Od(b,a.child,c,d);}
	function Sf(a,b,c,d,e){c=c.render;var f=b.ref;Yd(b,e);d=He(a,b,c,d,f,e);c=Me();if(null!==a&&!G)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,Tf(a,b,e);F&&c&&md(b);b.flags|=1;P(a,b,d,e);return b.child}
	function Uf(a,b,c,d,e){if(null===a){var f=c.type;if("function"===typeof f&&!Vf(f)&&void 0===f.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=f,Wf(a,b,f,d,e);a=Ld(c.type,null,d,b,b.mode,e);a.ref=b.ref;a.return=b;return b.child=a}f=a.child;if(0===(a.lanes&e)){var g=f.memoizedProps;c=c.compare;c=null!==c?c:Dd;if(c(g,d)&&a.ref===b.ref)return Tf(a,b,e)}b.flags|=1;a=Jd(f,d);a.ref=b.ref;a.return=b;return b.child=a}
	function Wf(a,b,c,d,e){if(null!==a){var f=a.memoizedProps;if(Dd(f,d)&&a.ref===b.ref)if(G=!1,b.pendingProps=d=f,0!==(a.lanes&e))0!==(a.flags&131072)&&(G=!0);else return b.lanes=a.lanes,Tf(a,b,e)}return Xf(a,b,c,d,e)}
	function Yf(a,b,c){var d=b.pendingProps,e=d.children,f=null!==a?a.memoizedState:null;if("hidden"===d.mode)if(0===(b.mode&1))b.memoizedState={baseLanes:0,cachePool:null,transitions:null},v(Zf,$f),$f|=c;else {if(0===(c&1073741824))return a=null!==f?f.baseLanes|c:c,b.lanes=b.childLanes=1073741824,b.memoizedState={baseLanes:a,cachePool:null,transitions:null},b.updateQueue=null,v(Zf,$f),$f|=a,null;b.memoizedState={baseLanes:0,cachePool:null,transitions:null};d=null!==f?f.baseLanes:c;v(Zf,$f);$f|=d;}else null!==
	f?(d=f.baseLanes|c,b.memoizedState=null):d=c,v(Zf,$f),$f|=d;P(a,b,e,c);return b.child}function ag(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.flags|=512,b.flags|=2097152;}function Xf(a,b,c,d,e){var f=A(c)?kc:x.current;f=mc(b,f);Yd(b,e);c=He(a,b,c,d,f,e);d=Me();if(null!==a&&!G)return b.updateQueue=a.updateQueue,b.flags&=-2053,a.lanes&=~e,Tf(a,b,e);F&&d&&md(b);b.flags|=1;P(a,b,c,e);return b.child}
	function bg(a,b,c,d,e){if(A(c)){var f=!0;qc(b);}else f=!1;Yd(b,e);if(null===b.stateNode)cg(a,b),Bf(b,c,d),Df(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=Zd(l):(l=A(c)?kc:x.current,l=mc(b,l));var m=c.getDerivedStateFromProps,r="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;r||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==
	d||k!==l)&&Cf(b,g,d,l);de=!1;var p=b.memoizedState;g.state=p;ke(b,d,g,e);k=b.memoizedState;h!==d||p!==k||z.current||de?("function"===typeof m&&(yf(b,c,m,d),k=b.memoizedState),(h=de||Af(b,c,h,d,p,k,l))?(r||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===typeof g.componentDidMount&&(b.flags|=4194308)):
	("function"===typeof g.componentDidMount&&(b.flags|=4194308),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.flags|=4194308),d=!1);}else {g=b.stateNode;fe(a,b);h=b.memoizedProps;l=b.type===b.elementType?h:xf(b.type,h);g.props=l;r=b.pendingProps;p=g.context;k=c.contextType;"object"===typeof k&&null!==k?k=Zd(k):(k=A(c)?kc:x.current,k=mc(b,k));var B=c.getDerivedStateFromProps;(m="function"===typeof B||"function"===typeof g.getSnapshotBeforeUpdate)||
	"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==r||p!==k)&&Cf(b,g,d,k);de=!1;p=b.memoizedState;g.state=p;ke(b,d,g,e);var w=b.memoizedState;h!==r||p!==w||z.current||de?("function"===typeof B&&(yf(b,c,B,d),w=b.memoizedState),(l=de||Af(b,c,l,d,p,w,k)||!1)?(m||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,w,k),"function"===typeof g.UNSAFE_componentWillUpdate&&
	g.UNSAFE_componentWillUpdate(d,w,k)),"function"===typeof g.componentDidUpdate&&(b.flags|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.flags|=1024)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=1024),b.memoizedProps=d,b.memoizedState=w),g.props=d,g.state=w,g.context=k,d=l):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&p===
	a.memoizedState||(b.flags|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&p===a.memoizedState||(b.flags|=1024),d=!1);}return dg(a,b,c,d,f,e)}
	function dg(a,b,c,d,e,f){ag(a,b);var g=0!==(b.flags&128);if(!d&&!g)return e&&rc(b,c,!1),Tf(a,b,f);d=b.stateNode;Rf.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.flags|=1;null!==a&&g?(b.child=Od(b,a.child,null,f),b.child=Od(b,null,h,f)):P(a,b,h,f);b.memoizedState=d.state;e&&rc(b,c,!0);return b.child}function eg(a){var b=a.stateNode;b.pendingContext?oc(a,b.pendingContext,b.pendingContext!==b.context):b.context&&oc(a,b.context,!1);se(a,b.containerInfo);}
	function fg(a,b,c,d,e){Ad();Bd(e);b.flags|=256;P(a,b,c,d);return b.child}var gg={dehydrated:null,treeContext:null,retryLane:0};function hg(a){return {baseLanes:a,cachePool:null,transitions:null}}
	function ig(a,b,c){var d=b.pendingProps,e=I.current,f=!1,g=0!==(b.flags&128),h;(h=g)||(h=null!==a&&null===a.memoizedState?!1:0!==(e&2));if(h)f=!0,b.flags&=-129;else if(null===a||null!==a.memoizedState)e|=1;v(I,e&1);if(null===a){wd(b);a=b.memoizedState;if(null!==a&&(a=a.dehydrated,null!==a))return 0===(b.mode&1)?b.lanes=1:Kb(a)?b.lanes=8:b.lanes=1073741824,null;g=d.children;a=d.fallback;return f?(d=b.mode,f=b.child,g={mode:"hidden",children:g},0===(d&1)&&null!==f?(f.childLanes=0,f.pendingProps=g):
	f=jg(g,d,0,null),a=Nd(a,d,c,null),f.return=b,a.return=b,f.sibling=a,b.child=f,b.child.memoizedState=hg(c),b.memoizedState=gg,a):kg(b,g)}e=a.memoizedState;if(null!==e&&(h=e.dehydrated,null!==h))return lg(a,b,g,d,h,e,c);if(f){f=d.fallback;g=b.mode;e=a.child;h=e.sibling;var k={mode:"hidden",children:d.children};0===(g&1)&&b.child!==e?(d=b.child,d.childLanes=0,d.pendingProps=k,b.deletions=null):(d=Jd(e,k),d.subtreeFlags=e.subtreeFlags&14680064);null!==h?f=Jd(h,f):(f=Nd(f,g,c,null),f.flags|=2);f.return=
	b;d.return=b;d.sibling=f;b.child=d;d=f;f=b.child;g=a.child.memoizedState;g=null===g?hg(c):{baseLanes:g.baseLanes|c,cachePool:null,transitions:g.transitions};f.memoizedState=g;f.childLanes=a.childLanes&~c;b.memoizedState=gg;return d}f=a.child;a=f.sibling;d=Jd(f,{mode:"visible",children:d.children});0===(b.mode&1)&&(d.lanes=c);d.return=b;d.sibling=null;null!==a&&(c=b.deletions,null===c?(b.deletions=[a],b.flags|=16):c.push(a));b.child=d;b.memoizedState=null;return d}
	function kg(a,b){b=jg({mode:"visible",children:b},a.mode,0,null);b.return=a;return a.child=b}function mg(a,b,c,d){null!==d&&Bd(d);Od(b,a.child,null,c);a=kg(b,b.pendingProps.children);a.flags|=2;b.memoizedState=null;return a}
	function lg(a,b,c,d,e,f,g){if(c){if(b.flags&256)return b.flags&=-257,d=Ff(Error(n(422))),mg(a,b,g,d);if(null!==b.memoizedState)return b.child=a.child,b.flags|=128,null;f=d.fallback;e=b.mode;d=jg({mode:"visible",children:d.children},e,0,null);f=Nd(f,e,g,null);f.flags|=2;d.return=b;f.return=b;d.sibling=f;b.child=d;0!==(b.mode&1)&&Od(b,a.child,null,g);b.child.memoizedState=hg(g);b.memoizedState=gg;return f}if(0===(b.mode&1))return mg(a,b,g,null);if(Kb(e))return d=Lb(e).digest,f=Error(n(419)),d=Ff(f,
	d,void 0),mg(a,b,g,d);c=0!==(g&a.childLanes);if(G||c){d=N;if(null!==d){switch(g&-g){case 4:e=2;break;case 16:e=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:e=32;break;case 536870912:e=268435456;break;default:e=0;}e=0!==(e&(d.suspendedLanes|g))?0:e;0!==e&&e!==f.retryLane&&(f.retryLane=e,ce(a,e),af(d,a,
	e,-1));}ng();d=Ff(Error(n(421)));return mg(a,b,g,d)}if(Jb(e))return b.flags|=128,b.child=a.child,b=og.bind(null,a),Mb(e,b),null;a=f.treeContext;Va&&(pd=Qb(e),od=b,F=!0,rd=null,qd=!1,null!==a&&(fd[gd++]=id,fd[gd++]=jd,fd[gd++]=hd,id=a.id,jd=a.overflow,hd=b));b=kg(b,d.children);b.flags|=4096;return b}function pg(a,b,c){a.lanes|=b;var d=a.alternate;null!==d&&(d.lanes|=b);Xd(a.return,b,c);}
	function qg(a,b,c,d,e){var f=a.memoizedState;null===f?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailMode:e}:(f.isBackwards=b,f.rendering=null,f.renderingStartTime=0,f.last=d,f.tail=c,f.tailMode=e);}
	function rg(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;P(a,b,d.children,c);d=I.current;if(0!==(d&2))d=d&1|2,b.flags|=128;else {if(null!==a&&0!==(a.flags&128))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&pg(a,c,b);else if(19===a.tag)pg(a,c,b);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return;}a.sibling.return=a.return;a=a.sibling;}d&=1;}v(I,d);if(0===(b.mode&1))b.memoizedState=
	null;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===we(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);qg(b,!1,e,c,f);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===we(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a;}qg(b,!0,c,null,f);break;case "together":qg(b,!1,null,null,void 0);break;default:b.memoizedState=null;}return b.child}
	function cg(a,b){0===(b.mode&1)&&null!==a&&(a.alternate=null,b.alternate=null,b.flags|=2);}function Tf(a,b,c){null!==a&&(b.dependencies=a.dependencies);le|=b.lanes;if(0===(c&b.childLanes))return null;if(null!==a&&b.child!==a.child)throw Error(n(153));if(null!==b.child){a=b.child;c=Jd(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Jd(a,a.pendingProps),c.return=b;c.sibling=null;}return b.child}
	function sg(a,b,c){switch(b.tag){case 3:eg(b);Ad();break;case 5:ue(b);break;case 1:A(b.type)&&qc(b);break;case 4:se(b,b.stateNode.containerInfo);break;case 10:Vd(b,b.type._context,b.memoizedProps.value);break;case 13:var d=b.memoizedState;if(null!==d){if(null!==d.dehydrated)return v(I,I.current&1),b.flags|=128,null;if(0!==(c&b.child.childLanes))return ig(a,b,c);v(I,I.current&1);a=Tf(a,b,c);return null!==a?a.sibling:null}v(I,I.current&1);break;case 19:d=0!==(c&b.childLanes);if(0!==(a.flags&128)){if(d)return rg(a,
	b,c);b.flags|=128;}var e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null,e.lastEffect=null);v(I,I.current);if(d)break;else return null;case 22:case 23:return b.lanes=0,Yf(a,b,c)}return Tf(a,b,c)}function tg(a){a.flags|=4;}function ug(a,b){if(null!==a&&a.child===b.child)return !0;if(0!==(b.flags&16))return !1;for(a=b.child;null!==a;){if(0!==(a.flags&12854)||0!==(a.subtreeFlags&12854))return !1;a=a.sibling;}return !0}var vg,wg,xg,yg;
	if(Ta)vg=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)Ka(a,c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return;}c.sibling.return=c.return;c=c.sibling;}},wg=function(){},xg=function(a,b,c,d,e){a=a.memoizedProps;if(a!==d){var f=b.stateNode,g=re(oe.current);c=Ma(f,c,a,d,e,g);(b.updateQueue=c)&&tg(b);}},yg=function(a,b,c,d){c!==d&&tg(b);};else if(Ua){vg=function(a,
	b,c,d){for(var e=b.child;null!==e;){if(5===e.tag){var f=e.stateNode;c&&d&&(f=Eb(f,e.type,e.memoizedProps,e));Ka(a,f);}else if(6===e.tag)f=e.stateNode,c&&d&&(f=Fb(f,e.memoizedProps,e)),Ka(a,f);else if(4!==e.tag)if(22===e.tag&&null!==e.memoizedState)f=e.child,null!==f&&(f.return=e),vg(a,e,!0,!0);else if(null!==e.child){e.child.return=e;e=e.child;continue}if(e===b)break;for(;null===e.sibling;){if(null===e.return||e.return===b)return;e=e.return;}e.sibling.return=e.return;e=e.sibling;}};var zg=function(a,
	b,c,d){for(var e=b.child;null!==e;){if(5===e.tag){var f=e.stateNode;c&&d&&(f=Eb(f,e.type,e.memoizedProps,e));Ab(a,f);}else if(6===e.tag)f=e.stateNode,c&&d&&(f=Fb(f,e.memoizedProps,e)),Ab(a,f);else if(4!==e.tag)if(22===e.tag&&null!==e.memoizedState)f=e.child,null!==f&&(f.return=e),zg(a,e,!0,!0);else if(null!==e.child){e.child.return=e;e=e.child;continue}if(e===b)break;for(;null===e.sibling;){if(null===e.return||e.return===b)return;e=e.return;}e.sibling.return=e.return;e=e.sibling;}};wg=function(a,b){var c=
	b.stateNode;if(!ug(a,b)){a=c.containerInfo;var d=zb(a);zg(d,b,!1,!1);c.pendingChildren=d;tg(b);Bb(a,d);}};xg=function(a,b,c,d,e){var f=a.stateNode,g=a.memoizedProps;if((a=ug(a,b))&&g===d)b.stateNode=f;else {var h=b.stateNode,k=re(oe.current),l=null;g!==d&&(l=Ma(h,c,g,d,e,k));a&&null===l?b.stateNode=f:(f=yb(f,l,c,g,d,b,a,h),La(f,c,d,e,k)&&tg(b),b.stateNode=f,a?tg(b):vg(f,b,!1,!1));}};yg=function(a,b,c,d){c!==d?(a=re(qe.current),c=re(oe.current),b.stateNode=Oa(d,a,c,b),tg(b)):b.stateNode=a.stateNode;};}else wg=
	function(){},xg=function(){},yg=function(){};function Ag(a,b){if(!F)switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null;}}
	function Q(a){var b=null!==a.alternate&&a.alternate.child===a.child,c=0,d=0;if(b)for(var e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags&14680064,d|=e.flags&14680064,e.return=a,e=e.sibling;else for(e=a.child;null!==e;)c|=e.lanes|e.childLanes,d|=e.subtreeFlags,d|=e.flags,e.return=a,e=e.sibling;a.subtreeFlags|=d;a.childLanes=c;return b}
	function Bg(a,b,c){var d=b.pendingProps;nd(b);switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Q(b),null;case 1:return A(b.type)&&nc(),Q(b),null;case 3:c=b.stateNode;te();q(z);q(x);ye();c.pendingContext&&(c.context=c.pendingContext,c.pendingContext=null);if(null===a||null===a.child)yd(b)?tg(b):null===a||a.memoizedState.isDehydrated&&0===(b.flags&256)||(b.flags|=1024,null!==rd&&(Cg(rd),rd=null));wg(a,b);Q(b);return null;case 5:ve(b);c=re(qe.current);var e=
	b.type;if(null!==a&&null!=b.stateNode)xg(a,b,e,d,c),a.ref!==b.ref&&(b.flags|=512,b.flags|=2097152);else {if(!d){if(null===b.stateNode)throw Error(n(166));Q(b);return null}a=re(oe.current);if(yd(b)){if(!Va)throw Error(n(175));a=Rb(b.stateNode,b.type,b.memoizedProps,c,a,b,!qd);b.updateQueue=a;null!==a&&tg(b);}else {var f=Ja(e,d,c,a,b);vg(f,b,!1,!1);b.stateNode=f;La(f,e,d,c,a)&&tg(b);}null!==b.ref&&(b.flags|=512,b.flags|=2097152);}Q(b);return null;case 6:if(a&&null!=b.stateNode)yg(a,b,a.memoizedProps,d);
	else {if("string"!==typeof d&&null===b.stateNode)throw Error(n(166));a=re(qe.current);c=re(oe.current);if(yd(b)){if(!Va)throw Error(n(176));a=b.stateNode;c=b.memoizedProps;if(d=Sb(a,c,b,!qd))if(e=od,null!==e)switch(e.tag){case 3:$b(e.stateNode.containerInfo,a,c,0!==(e.mode&1));break;case 5:ac(e.type,e.memoizedProps,e.stateNode,a,c,0!==(e.mode&1));}d&&tg(b);}else b.stateNode=Oa(d,a,c,b);}Q(b);return null;case 13:q(I);d=b.memoizedState;if(null===a||null!==a.memoizedState&&null!==a.memoizedState.dehydrated){if(F&&
	null!==pd&&0!==(b.mode&1)&&0===(b.flags&128))zd(),Ad(),b.flags|=98560,e=!1;else if(e=yd(b),null!==d&&null!==d.dehydrated){if(null===a){if(!e)throw Error(n(318));if(!Va)throw Error(n(344));e=b.memoizedState;e=null!==e?e.dehydrated:null;if(!e)throw Error(n(317));Tb(e,b);}else Ad(),0===(b.flags&128)&&(b.memoizedState=null),b.flags|=4;Q(b);e=!1;}else null!==rd&&(Cg(rd),rd=null),e=!0;if(!e)return b.flags&65536?b:null}if(0!==(b.flags&128))return b.lanes=c,b;c=null!==d;c!==(null!==a&&null!==a.memoizedState)&&
	c&&(b.child.flags|=8192,0!==(b.mode&1)&&(null===a||0!==(I.current&1)?0===R&&(R=3):ng()));null!==b.updateQueue&&(b.flags|=4);Q(b);return null;case 4:return te(),wg(a,b),null===a&&Xa(b.stateNode.containerInfo),Q(b),null;case 10:return Wd(b.type._context),Q(b),null;case 17:return A(b.type)&&nc(),Q(b),null;case 19:q(I);e=b.memoizedState;if(null===e)return Q(b),null;d=0!==(b.flags&128);f=e.rendering;if(null===f)if(d)Ag(e,!1);else {if(0!==R||null!==a&&0!==(a.flags&128))for(a=b.child;null!==a;){f=we(a);if(null!==
	f){b.flags|=128;Ag(e,!1);a=f.updateQueue;null!==a&&(b.updateQueue=a,b.flags|=4);b.subtreeFlags=0;a=c;for(c=b.child;null!==c;)d=c,e=a,d.flags&=14680066,f=d.alternate,null===f?(d.childLanes=0,d.lanes=e,d.child=null,d.subtreeFlags=0,d.memoizedProps=null,d.memoizedState=null,d.updateQueue=null,d.dependencies=null,d.stateNode=null):(d.childLanes=f.childLanes,d.lanes=f.lanes,d.child=f.child,d.subtreeFlags=0,d.deletions=null,d.memoizedProps=f.memoizedProps,d.memoizedState=f.memoizedState,d.updateQueue=f.updateQueue,
	d.type=f.type,e=f.dependencies,d.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),c=c.sibling;v(I,I.current&1|2);return b.child}a=a.sibling;}null!==e.tail&&D()>Dg&&(b.flags|=128,d=!0,Ag(e,!1),b.lanes=4194304);}else {if(!d)if(a=we(f),null!==a){if(b.flags|=128,d=!0,a=a.updateQueue,null!==a&&(b.updateQueue=a,b.flags|=4),Ag(e,!0),null===e.tail&&"hidden"===e.tailMode&&!f.alternate&&!F)return Q(b),null}else 2*D()-e.renderingStartTime>Dg&&1073741824!==c&&(b.flags|=128,d=!0,Ag(e,!1),b.lanes=
	4194304);e.isBackwards?(f.sibling=b.child,b.child=f):(a=e.last,null!==a?a.sibling=f:b.child=f,e.last=f);}if(null!==e.tail)return b=e.tail,e.rendering=b,e.tail=b.sibling,e.renderingStartTime=D(),b.sibling=null,a=I.current,v(I,d?a&1|2:a&1),b;Q(b);return null;case 22:case 23:return Eg(),c=null!==b.memoizedState,null!==a&&null!==a.memoizedState!==c&&(b.flags|=8192),c&&0!==(b.mode&1)?0!==($f&1073741824)&&(Q(b),Ta&&b.subtreeFlags&6&&(b.flags|=8192)):Q(b),null;case 24:return null;case 25:return null}throw Error(n(156,
	b.tag));}
	function Fg(a,b){nd(b);switch(b.tag){case 1:return A(b.type)&&nc(),a=b.flags,a&65536?(b.flags=a&-65537|128,b):null;case 3:return te(),q(z),q(x),ye(),a=b.flags,0!==(a&65536)&&0===(a&128)?(b.flags=a&-65537|128,b):null;case 5:return ve(b),null;case 13:q(I);a=b.memoizedState;if(null!==a&&null!==a.dehydrated){if(null===b.alternate)throw Error(n(340));Ad();}a=b.flags;return a&65536?(b.flags=a&-65537|128,b):null;case 19:return q(I),null;case 4:return te(),null;case 10:return Wd(b.type._context),null;case 22:case 23:return Eg(),
	null;case 24:return null;default:return null}}var Gg=!1,S=!1,Hg="function"===typeof WeakSet?WeakSet:Set,T=null;function Ig(a,b){var c=a.ref;if(null!==c)if("function"===typeof c)try{c(null);}catch(d){U(a,b,d);}else c.current=null;}function Jg(a,b,c){try{c();}catch(d){U(a,b,d);}}var Kg=!1;
	function Lg(a,b){Ha(a.containerInfo);for(T=b;null!==T;)if(a=T,b=a.child,0!==(a.subtreeFlags&1028)&&null!==b)b.return=a,T=b;else for(;null!==T;){a=T;try{var c=a.alternate;if(0!==(a.flags&1024))switch(a.tag){case 0:case 11:case 15:break;case 1:if(null!==c){var d=c.memoizedProps,e=c.memoizedState,f=a.stateNode,g=f.getSnapshotBeforeUpdate(a.elementType===a.type?d:xf(a.type,d),e);f.__reactInternalSnapshotBeforeUpdate=g;}break;case 3:Ta&&xb(a.stateNode.containerInfo);break;case 5:case 6:case 4:case 17:break;
	default:throw Error(n(163));}}catch(h){U(a,a.return,h);}b=a.sibling;if(null!==b){b.return=a.return;T=b;break}T=a.return;}c=Kg;Kg=!1;return c}function Mg(a,b,c){var d=b.updateQueue;d=null!==d?d.lastEffect:null;if(null!==d){var e=d=d.next;do{if((e.tag&a)===a){var f=e.destroy;e.destroy=void 0;void 0!==f&&Jg(b,c,f);}e=e.next;}while(e!==d)}}function Ng(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d();}c=c.next;}while(c!==b)}}
	function Og(a){var b=a.ref;if(null!==b){var c=a.stateNode;switch(a.tag){case 5:a=Ea(c);break;default:a=c;}"function"===typeof b?b(a):b.current=a;}}function Pg(a){var b=a.alternate;null!==b&&(a.alternate=null,Pg(b));a.child=null;a.deletions=null;a.sibling=null;5===a.tag&&(b=a.stateNode,null!==b&&Za(b));a.stateNode=null;a.return=null;a.dependencies=null;a.memoizedProps=null;a.memoizedState=null;a.pendingProps=null;a.stateNode=null;a.updateQueue=null;}
	function Qg(a){return 5===a.tag||3===a.tag||4===a.tag}function Rg(a){a:for(;;){for(;null===a.sibling;){if(null===a.return||Qg(a.return))return null;a=a.return;}a.sibling.return=a.return;for(a=a.sibling;5!==a.tag&&6!==a.tag&&18!==a.tag;){if(a.flags&2)continue a;if(null===a.child||4===a.tag)continue a;else a.child.return=a,a=a.child;}if(!(a.flags&2))return a.stateNode}}
	function Sg(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?pb(c,a,b):kb(c,a);else if(4!==d&&(a=a.child,null!==a))for(Sg(a,b,c),a=a.sibling;null!==a;)Sg(a,b,c),a=a.sibling;}function Tg(a,b,c){var d=a.tag;if(5===d||6===d)a=a.stateNode,b?ob(c,a,b):jb(c,a);else if(4!==d&&(a=a.child,null!==a))for(Tg(a,b,c),a=a.sibling;null!==a;)Tg(a,b,c),a=a.sibling;}var V=null,Ug=!1;function Vg(a,b,c){for(c=c.child;null!==c;)Wg(a,b,c),c=c.sibling;}
	function Wg(a,b,c){if(Sc&&"function"===typeof Sc.onCommitFiberUnmount)try{Sc.onCommitFiberUnmount(Rc,c);}catch(h){}switch(c.tag){case 5:S||Ig(c,b);case 6:if(Ta){var d=V,e=Ug;V=null;Vg(a,b,c);V=d;Ug=e;null!==V&&(Ug?rb(V,c.stateNode):qb(V,c.stateNode));}else Vg(a,b,c);break;case 18:Ta&&null!==V&&(Ug?Yb(V,c.stateNode):Xb(V,c.stateNode));break;case 4:Ta?(d=V,e=Ug,V=c.stateNode.containerInfo,Ug=!0,Vg(a,b,c),V=d,Ug=e):(Ua&&(d=c.stateNode.containerInfo,e=zb(d),Cb(d,e)),Vg(a,b,c));break;case 0:case 11:case 14:case 15:if(!S&&
	(d=c.updateQueue,null!==d&&(d=d.lastEffect,null!==d))){e=d=d.next;do{var f=e,g=f.destroy;f=f.tag;void 0!==g&&(0!==(f&2)?Jg(c,b,g):0!==(f&4)&&Jg(c,b,g));e=e.next;}while(e!==d)}Vg(a,b,c);break;case 1:if(!S&&(Ig(c,b),d=c.stateNode,"function"===typeof d.componentWillUnmount))try{d.props=c.memoizedProps,d.state=c.memoizedState,d.componentWillUnmount();}catch(h){U(c,b,h);}Vg(a,b,c);break;case 21:Vg(a,b,c);break;case 22:c.mode&1?(S=(d=S)||null!==c.memoizedState,Vg(a,b,c),S=d):Vg(a,b,c);break;default:Vg(a,b,
	c);}}function Xg(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Hg);b.forEach(function(b){var d=Yg.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d));});}}
	function Zg(a,b){var c=b.deletions;if(null!==c)for(var d=0;d<c.length;d++){var e=c[d];try{var f=a,g=b;if(Ta){var h=g;a:for(;null!==h;){switch(h.tag){case 5:V=h.stateNode;Ug=!1;break a;case 3:V=h.stateNode.containerInfo;Ug=!0;break a;case 4:V=h.stateNode.containerInfo;Ug=!0;break a}h=h.return;}if(null===V)throw Error(n(160));Wg(f,g,e);V=null;Ug=!1;}else Wg(f,g,e);var k=e.alternate;null!==k&&(k.return=null);e.return=null;}catch(l){U(e,b,l);}}if(b.subtreeFlags&12854)for(b=b.child;null!==b;)$g(b,a),b=b.sibling;}
	function $g(a,b){var c=a.alternate,d=a.flags;switch(a.tag){case 0:case 11:case 14:case 15:Zg(b,a);ah(a);if(d&4){try{Mg(3,a,a.return),Ng(3,a);}catch(p){U(a,a.return,p);}try{Mg(5,a,a.return);}catch(p){U(a,a.return,p);}}break;case 1:Zg(b,a);ah(a);d&512&&null!==c&&Ig(c,c.return);break;case 5:Zg(b,a);ah(a);d&512&&null!==c&&Ig(c,c.return);if(Ta){if(a.flags&32){var e=a.stateNode;try{sb(e);}catch(p){U(a,a.return,p);}}if(d&4&&(e=a.stateNode,null!=e)){var f=a.memoizedProps;c=null!==c?c.memoizedProps:f;d=a.type;b=
	a.updateQueue;a.updateQueue=null;if(null!==b)try{nb(e,b,d,c,f,a);}catch(p){U(a,a.return,p);}}}break;case 6:Zg(b,a);ah(a);if(d&4&&Ta){if(null===a.stateNode)throw Error(n(162));e=a.stateNode;f=a.memoizedProps;c=null!==c?c.memoizedProps:f;try{lb(e,c,f);}catch(p){U(a,a.return,p);}}break;case 3:Zg(b,a);ah(a);if(d&4){if(Ta&&Va&&null!==c&&c.memoizedState.isDehydrated)try{Vb(b.containerInfo);}catch(p){U(a,a.return,p);}if(Ua){e=b.containerInfo;f=b.pendingChildren;try{Cb(e,f);}catch(p){U(a,a.return,p);}}}break;case 4:Zg(b,
	a);ah(a);if(d&4&&Ua){f=a.stateNode;e=f.containerInfo;f=f.pendingChildren;try{Cb(e,f);}catch(p){U(a,a.return,p);}}break;case 13:Zg(b,a);ah(a);e=a.child;e.flags&8192&&(f=null!==e.memoizedState,e.stateNode.isHidden=f,!f||null!==e.alternate&&null!==e.alternate.memoizedState||(bh=D()));d&4&&Xg(a);break;case 22:var g=null!==c&&null!==c.memoizedState;a.mode&1?(S=(c=S)||g,Zg(b,a),S=c):Zg(b,a);ah(a);if(d&8192){c=null!==a.memoizedState;if((a.stateNode.isHidden=c)&&!g&&0!==(a.mode&1))for(T=a,d=a.child;null!==
	d;){for(b=T=d;null!==T;){g=T;var h=g.child;switch(g.tag){case 0:case 11:case 14:case 15:Mg(4,g,g.return);break;case 1:Ig(g,g.return);var k=g.stateNode;if("function"===typeof k.componentWillUnmount){var l=g,m=g.return;try{var r=l;k.props=r.memoizedProps;k.state=r.memoizedState;k.componentWillUnmount();}catch(p){U(l,m,p);}}break;case 5:Ig(g,g.return);break;case 22:if(null!==g.memoizedState){ch(b);continue}}null!==h?(h.return=g,T=h):ch(b);}d=d.sibling;}if(Ta)a:if(d=null,Ta)for(b=a;;){if(5===b.tag){if(null===
	d){d=b;try{e=b.stateNode,c?tb(e):vb(b.stateNode,b.memoizedProps);}catch(p){U(a,a.return,p);}}}else if(6===b.tag){if(null===d)try{f=b.stateNode,c?ub(f):wb(f,b.memoizedProps);}catch(p){U(a,a.return,p);}}else if((22!==b.tag&&23!==b.tag||null===b.memoizedState||b===a)&&null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break a;for(;null===b.sibling;){if(null===b.return||b.return===a)break a;d===b&&(d=null);b=b.return;}d===b&&(d=null);b.sibling.return=b.return;b=b.sibling;}}break;case 19:Zg(b,a);ah(a);
	d&4&&Xg(a);break;case 21:break;default:Zg(b,a),ah(a);}}function ah(a){var b=a.flags;if(b&2){try{if(Ta){b:{for(var c=a.return;null!==c;){if(Qg(c)){var d=c;break b}c=c.return;}throw Error(n(160));}switch(d.tag){case 5:var e=d.stateNode;d.flags&32&&(sb(e),d.flags&=-33);var f=Rg(a);Tg(a,f,e);break;case 3:case 4:var g=d.stateNode.containerInfo,h=Rg(a);Sg(a,h,g);break;default:throw Error(n(161));}}}catch(k){U(a,a.return,k);}a.flags&=-3;}b&4096&&(a.flags&=-4097);}function dh(a,b,c){T=a;eh(a);}
	function eh(a,b,c){for(var d=0!==(a.mode&1);null!==T;){var e=T,f=e.child;if(22===e.tag&&d){var g=null!==e.memoizedState||Gg;if(!g){var h=e.alternate,k=null!==h&&null!==h.memoizedState||S;h=Gg;var l=S;Gg=g;if((S=k)&&!l)for(T=e;null!==T;)g=T,k=g.child,22===g.tag&&null!==g.memoizedState?fh(e):null!==k?(k.return=g,T=k):fh(e);for(;null!==f;)T=f,eh(f),f=f.sibling;T=e;Gg=h;S=l;}gh(a);}else 0!==(e.subtreeFlags&8772)&&null!==f?(f.return=e,T=f):gh(a);}}
	function gh(a){for(;null!==T;){var b=T;if(0!==(b.flags&8772)){var c=b.alternate;try{if(0!==(b.flags&8772))switch(b.tag){case 0:case 11:case 15:S||Ng(5,b);break;case 1:var d=b.stateNode;if(b.flags&4&&!S)if(null===c)d.componentDidMount();else {var e=b.elementType===b.type?c.memoizedProps:xf(b.type,c.memoizedProps);d.componentDidUpdate(e,c.memoizedState,d.__reactInternalSnapshotBeforeUpdate);}var f=b.updateQueue;null!==f&&me(b,f,d);break;case 3:var g=b.updateQueue;if(null!==g){c=null;if(null!==b.child)switch(b.child.tag){case 5:c=
	Ea(b.child.stateNode);break;case 1:c=b.child.stateNode;}me(b,g,c);}break;case 5:var h=b.stateNode;null===c&&b.flags&4&&mb(h,b.type,b.memoizedProps,b);break;case 6:break;case 4:break;case 12:break;case 13:if(Va&&null===b.memoizedState){var k=b.alternate;if(null!==k){var l=k.memoizedState;if(null!==l){var m=l.dehydrated;null!==m&&Wb(m);}}}break;case 19:case 17:case 21:case 22:case 23:case 25:break;default:throw Error(n(163));}S||b.flags&512&&Og(b);}catch(r){U(b,b.return,r);}}if(b===a){T=null;break}c=b.sibling;
	if(null!==c){c.return=b.return;T=c;break}T=b.return;}}function ch(a){for(;null!==T;){var b=T;if(b===a){T=null;break}var c=b.sibling;if(null!==c){c.return=b.return;T=c;break}T=b.return;}}
	function fh(a){for(;null!==T;){var b=T;try{switch(b.tag){case 0:case 11:case 15:var c=b.return;try{Ng(4,b);}catch(k){U(b,c,k);}break;case 1:var d=b.stateNode;if("function"===typeof d.componentDidMount){var e=b.return;try{d.componentDidMount();}catch(k){U(b,e,k);}}var f=b.return;try{Og(b);}catch(k){U(b,f,k);}break;case 5:var g=b.return;try{Og(b);}catch(k){U(b,g,k);}}}catch(k){U(b,b.return,k);}if(b===a){T=null;break}var h=b.sibling;if(null!==h){h.return=b.return;T=h;break}T=b.return;}}
	var hh=0,ih=1,jh=2,kh=3,lh=4;if("function"===typeof Symbol&&Symbol.for){var mh=Symbol.for;hh=mh("selector.component");ih=mh("selector.has_pseudo_class");jh=mh("selector.role");kh=mh("selector.test_id");lh=mh("selector.text");}function nh(a){var b=Wa(a);if(null!=b){if("string"!==typeof b.memoizedProps["data-testname"])throw Error(n(364));return b}a=cb(a);if(null===a)throw Error(n(362));return a.stateNode.current}
	function oh(a,b){switch(b.$$typeof){case hh:if(a.type===b.value)return !0;break;case ih:a:{b=b.value;a=[a,0];for(var c=0;c<a.length;){var d=a[c++],e=a[c++],f=b[e];if(5!==d.tag||!fb(d)){for(;null!=f&&oh(d,f);)e++,f=b[e];if(e===b.length){b=!0;break a}else for(d=d.child;null!==d;)a.push(d,e),d=d.sibling;}}b=!1;}return b;case jh:if(5===a.tag&&gb(a.stateNode,b.value))return !0;break;case lh:if(5===a.tag||6===a.tag)if(a=eb(a),null!==a&&0<=a.indexOf(b.value))return !0;break;case kh:if(5===a.tag&&(a=a.memoizedProps["data-testname"],
	"string"===typeof a&&a.toLowerCase()===b.value.toLowerCase()))return !0;break;default:throw Error(n(365));}return !1}function ph(a){switch(a.$$typeof){case hh:return "<"+(ua(a.value)||"Unknown")+">";case ih:return ":has("+(ph(a)||"")+")";case jh:return '[role="'+a.value+'"]';case lh:return '"'+a.value+'"';case kh:return '[data-testname="'+a.value+'"]';default:throw Error(n(365));}}
	function qh(a,b){var c=[];a=[a,0];for(var d=0;d<a.length;){var e=a[d++],f=a[d++],g=b[f];if(5!==e.tag||!fb(e)){for(;null!=g&&oh(e,g);)f++,g=b[f];if(f===b.length)c.push(e);else for(e=e.child;null!==e;)a.push(e,f),e=e.sibling;}}return c}function rh(a,b){if(!bb)throw Error(n(363));a=nh(a);a=qh(a,b);b=[];a=Array.from(a);for(var c=0;c<a.length;){var d=a[c++];if(5===d.tag)fb(d)||b.push(d.stateNode);else for(d=d.child;null!==d;)a.push(d),d=d.sibling;}return b}
	var sh=Math.ceil,th=da.ReactCurrentDispatcher,uh=da.ReactCurrentOwner,W=da.ReactCurrentBatchConfig,H=0,N=null,X=null,Z=0,$f=0,Zf=ic(0),R=0,vh=null,le=0,wh=0,xh=0,yh=null,zh=null,bh=0,Dg=Infinity,Ah=null;function Bh(){Dg=D()+500;}var Jf=!1,Kf=null,Mf=null,Ch=!1,Dh=null,Eh=0,Fh=0,Gh=null,Hh=-1,Ih=0;function O(){return 0!==(H&6)?D():-1!==Hh?Hh:Hh=D()}function tf(a){if(0===(a.mode&1))return 1;if(0!==(H&2)&&0!==Z)return Z&-Z;if(null!==Cd.transition)return 0===Ih&&(Ih=Dc()),Ih;a=C;return 0!==a?a:Ya()}
	function af(a,b,c,d){if(50<Fh)throw Fh=0,Gh=null,Error(n(185));Fc(a,c,d);if(0===(H&2)||a!==N)a===N&&(0===(H&2)&&(wh|=c),4===R&&Jh(a,Z)),Kh(a,d),1===c&&0===H&&0===(b.mode&1)&&(Bh(),Xc&&ad());}
	function Kh(a,b){var c=a.callbackNode;Bc(a,b);var d=zc(a,a===N?Z:0);if(0===d)null!==c&&Kc(c),a.callbackNode=null,a.callbackPriority=0;else if(b=d&-d,a.callbackPriority!==b){null!=c&&Kc(c);if(1===b)0===a.tag?$c(Lh.bind(null,a)):Zc(Lh.bind(null,a)),$a?ab(function(){0===(H&6)&&ad();}):Jc(Nc,ad),c=null;else {switch(Ic(d)){case 1:c=Nc;break;case 4:c=Oc;break;case 16:c=Pc;break;case 536870912:c=Qc;break;default:c=Pc;}c=Mh(c,Nh.bind(null,a));}a.callbackPriority=b;a.callbackNode=c;}}
	function Nh(a,b){Hh=-1;Ih=0;if(0!==(H&6))throw Error(n(327));var c=a.callbackNode;if(Oh()&&a.callbackNode!==c)return null;var d=zc(a,a===N?Z:0);if(0===d)return null;if(0!==(d&30)||0!==(d&a.expiredLanes)||b)b=Ph(a,d);else {b=d;var e=H;H|=2;var f=Qh();if(N!==a||Z!==b)Ah=null,Bh(),Rh(a,b);do try{Sh();break}catch(h){Th(a,h);}while(1);Ud();th.current=f;H=e;null!==X?b=0:(N=null,Z=0,b=R);}if(0!==b){2===b&&(e=Cc(a),0!==e&&(d=e,b=Uh(a,e)));if(1===b)throw c=vh,Rh(a,0),Jh(a,d),Kh(a,D()),c;if(6===b)Jh(a,d);else {e=
	a.current.alternate;if(0===(d&30)&&!Vh(e)&&(b=Ph(a,d),2===b&&(f=Cc(a),0!==f&&(d=f,b=Uh(a,f))),1===b))throw c=vh,Rh(a,0),Jh(a,d),Kh(a,D()),c;a.finishedWork=e;a.finishedLanes=d;switch(b){case 0:case 1:throw Error(n(345));case 2:Wh(a,zh,Ah);break;case 3:Jh(a,d);if((d&130023424)===d&&(b=bh+500-D(),10<b)){if(0!==zc(a,0))break;e=a.suspendedLanes;if((e&d)!==d){O();a.pingedLanes|=a.suspendedLanes&e;break}a.timeoutHandle=Pa(Wh.bind(null,a,zh,Ah),b);break}Wh(a,zh,Ah);break;case 4:Jh(a,d);if((d&4194240)===d)break;
	b=a.eventTimes;for(e=-1;0<d;){var g=31-tc(d);f=1<<g;g=b[g];g>e&&(e=g);d&=~f;}d=e;d=D()-d;d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*sh(d/1960))-d;if(10<d){a.timeoutHandle=Pa(Wh.bind(null,a,zh,Ah),d);break}Wh(a,zh,Ah);break;case 5:Wh(a,zh,Ah);break;default:throw Error(n(329));}}}Kh(a,D());return a.callbackNode===c?Nh.bind(null,a):null}
	function Uh(a,b){var c=yh;a.current.memoizedState.isDehydrated&&(Rh(a,b).flags|=256);a=Ph(a,b);2!==a&&(b=zh,zh=c,null!==b&&Cg(b));return a}function Cg(a){null===zh?zh=a:zh.push.apply(zh,a);}
	function Vh(a){for(var b=a;;){if(b.flags&16384){var c=b.updateQueue;if(null!==c&&(c=c.stores,null!==c))for(var d=0;d<c.length;d++){var e=c[d],f=e.getSnapshot;e=e.value;try{if(!Vc(f(),e))return !1}catch(g){return !1}}}c=b.child;if(b.subtreeFlags&16384&&null!==c)c.return=b,b=c;else {if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return !0;b=b.return;}b.sibling.return=b.return;b=b.sibling;}}return !0}
	function Jh(a,b){b&=~xh;b&=~wh;a.suspendedLanes|=b;a.pingedLanes&=~b;for(a=a.expirationTimes;0<b;){var c=31-tc(b),d=1<<c;a[c]=-1;b&=~d;}}function Lh(a){if(0!==(H&6))throw Error(n(327));Oh();var b=zc(a,0);if(0===(b&1))return Kh(a,D()),null;var c=Ph(a,b);if(0!==a.tag&&2===c){var d=Cc(a);0!==d&&(b=d,c=Uh(a,d));}if(1===c)throw c=vh,Rh(a,0),Jh(a,b),Kh(a,D()),c;if(6===c)throw Error(n(345));a.finishedWork=a.current.alternate;a.finishedLanes=b;Wh(a,zh,Ah);Kh(a,D());return null}
	function Xh(a){null!==Dh&&0===Dh.tag&&0===(H&6)&&Oh();var b=H;H|=1;var c=W.transition,d=C;try{if(W.transition=null,C=1,a)return a()}finally{C=d,W.transition=c,H=b,0===(H&6)&&ad();}}function Eg(){$f=Zf.current;q(Zf);}
	function Rh(a,b){a.finishedWork=null;a.finishedLanes=0;var c=a.timeoutHandle;c!==Ra&&(a.timeoutHandle=Ra,Qa(c));if(null!==X)for(c=X.return;null!==c;){var d=c;nd(d);switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&nc();break;case 3:te();q(z);q(x);ye();break;case 5:ve(d);break;case 4:te();break;case 13:q(I);break;case 19:q(I);break;case 10:Wd(d.type._context);break;case 22:case 23:Eg();}c=c.return;}N=a;X=a=Jd(a.current,null);Z=$f=b;R=0;vh=null;xh=wh=le=0;zh=yh=null;if(null!==$d){for(b=
	0;b<$d.length;b++)if(c=$d[b],d=c.interleaved,null!==d){c.interleaved=null;var e=d.next,f=c.pending;if(null!==f){var g=f.next;f.next=e;d.next=g;}c.pending=d;}$d=null;}return a}
	function Th(a,b){do{var c=X;try{Ud();ze.current=Le;if(Ce){for(var d=J.memoizedState;null!==d;){var e=d.queue;null!==e&&(e.pending=null);d=d.next;}Ce=!1;}Be=0;L=K=J=null;De=!1;Ee=0;uh.current=null;if(null===c||null===c.return){R=1;vh=b;X=null;break}a:{var f=a,g=c.return,h=c,k=b;b=Z;h.flags|=32768;if(null!==k&&"object"===typeof k&&"function"===typeof k.then){var l=k,m=h,r=m.tag;if(0===(m.mode&1)&&(0===r||11===r||15===r)){var p=m.alternate;p?(m.updateQueue=p.updateQueue,m.memoizedState=p.memoizedState,
	m.lanes=p.lanes):(m.updateQueue=null,m.memoizedState=null);}var B=Pf(g);if(null!==B){B.flags&=-257;Qf(B,g,h,f,b);B.mode&1&&Nf(f,l,b);b=B;k=l;var w=b.updateQueue;if(null===w){var Y=new Set;Y.add(k);b.updateQueue=Y;}else w.add(k);break a}else {if(0===(b&1)){Nf(f,l,b);ng();break a}k=Error(n(426));}}else if(F&&h.mode&1){var ya=Pf(g);if(null!==ya){0===(ya.flags&65536)&&(ya.flags|=256);Qf(ya,g,h,f,b);Bd(Ef(k,h));break a}}f=k=Ef(k,h);4!==R&&(R=2);null===yh?yh=[f]:yh.push(f);f=g;do{switch(f.tag){case 3:f.flags|=
	65536;b&=-b;f.lanes|=b;var E=If(f,k,b);je(f,E);break a;case 1:h=k;var u=f.type,t=f.stateNode;if(0===(f.flags&128)&&("function"===typeof u.getDerivedStateFromError||null!==t&&"function"===typeof t.componentDidCatch&&(null===Mf||!Mf.has(t)))){f.flags|=65536;b&=-b;f.lanes|=b;var Db=Lf(f,h,b);je(f,Db);break a}}f=f.return;}while(null!==f)}Yh(c);}catch(lc){b=lc;X===c&&null!==c&&(X=c=c.return);continue}break}while(1)}function Qh(){var a=th.current;th.current=Le;return null===a?Le:a}
	function ng(){if(0===R||3===R||2===R)R=4;null===N||0===(le&268435455)&&0===(wh&268435455)||Jh(N,Z);}function Ph(a,b){var c=H;H|=2;var d=Qh();if(N!==a||Z!==b)Ah=null,Rh(a,b);do try{Zh();break}catch(e){Th(a,e);}while(1);Ud();H=c;th.current=d;if(null!==X)throw Error(n(261));N=null;Z=0;return R}function Zh(){for(;null!==X;)$h(X);}function Sh(){for(;null!==X&&!Lc();)$h(X);}function $h(a){var b=ai(a.alternate,a,$f);a.memoizedProps=a.pendingProps;null===b?Yh(a):X=b;uh.current=null;}
	function Yh(a){var b=a;do{var c=b.alternate;a=b.return;if(0===(b.flags&32768)){if(c=Bg(c,b,$f),null!==c){X=c;return}}else {c=Fg(c,b);if(null!==c){c.flags&=32767;X=c;return}if(null!==a)a.flags|=32768,a.subtreeFlags=0,a.deletions=null;else {R=6;X=null;return}}b=b.sibling;if(null!==b){X=b;return}X=b=a;}while(null!==b);0===R&&(R=5);}function Wh(a,b,c){var d=C,e=W.transition;try{W.transition=null,C=1,bi(a,b,c,d);}finally{W.transition=e,C=d;}return null}
	function bi(a,b,c,d){do Oh();while(null!==Dh);if(0!==(H&6))throw Error(n(327));c=a.finishedWork;var e=a.finishedLanes;if(null===c)return null;a.finishedWork=null;a.finishedLanes=0;if(c===a.current)throw Error(n(177));a.callbackNode=null;a.callbackPriority=0;var f=c.lanes|c.childLanes;Gc(a,f);a===N&&(X=N=null,Z=0);0===(c.subtreeFlags&2064)&&0===(c.flags&2064)||Ch||(Ch=!0,Mh(Pc,function(){Oh();return null}));f=0!==(c.flags&15990);if(0!==(c.subtreeFlags&15990)||f){f=W.transition;W.transition=null;var g=
	C;C=1;var h=H;H|=4;uh.current=null;Lg(a,c);$g(c,a);Ia(a.containerInfo);a.current=c;dh(c);Mc();H=h;C=g;W.transition=f;}else a.current=c;Ch&&(Ch=!1,Dh=a,Eh=e);f=a.pendingLanes;0===f&&(Mf=null);Tc(c.stateNode);Kh(a,D());if(null!==b)for(d=a.onRecoverableError,c=0;c<b.length;c++)e=b[c],d(e.value,{componentStack:e.stack,digest:e.digest});if(Jf)throw Jf=!1,a=Kf,Kf=null,a;0!==(Eh&1)&&0!==a.tag&&Oh();f=a.pendingLanes;0!==(f&1)?a===Gh?Fh++:(Fh=0,Gh=a):Fh=0;ad();return null}
	function Oh(){if(null!==Dh){var a=Ic(Eh),b=W.transition,c=C;try{W.transition=null;C=16>a?16:a;if(null===Dh)var d=!1;else {a=Dh;Dh=null;Eh=0;if(0!==(H&6))throw Error(n(331));var e=H;H|=4;for(T=a.current;null!==T;){var f=T,g=f.child;if(0!==(T.flags&16)){var h=f.deletions;if(null!==h){for(var k=0;k<h.length;k++){var l=h[k];for(T=l;null!==T;){var m=T;switch(m.tag){case 0:case 11:case 15:Mg(8,m,f);}var r=m.child;if(null!==r)r.return=m,T=r;else for(;null!==T;){m=T;var p=m.sibling,B=m.return;Pg(m);if(m===
	l){T=null;break}if(null!==p){p.return=B;T=p;break}T=B;}}}var w=f.alternate;if(null!==w){var Y=w.child;if(null!==Y){w.child=null;do{var ya=Y.sibling;Y.sibling=null;Y=ya;}while(null!==Y)}}T=f;}}if(0!==(f.subtreeFlags&2064)&&null!==g)g.return=f,T=g;else b:for(;null!==T;){f=T;if(0!==(f.flags&2048))switch(f.tag){case 0:case 11:case 15:Mg(9,f,f.return);}var E=f.sibling;if(null!==E){E.return=f.return;T=E;break b}T=f.return;}}var u=a.current;for(T=u;null!==T;){g=T;var t=g.child;if(0!==(g.subtreeFlags&2064)&&null!==
	t)t.return=g,T=t;else b:for(g=u;null!==T;){h=T;if(0!==(h.flags&2048))try{switch(h.tag){case 0:case 11:case 15:Ng(9,h);}}catch(lc){U(h,h.return,lc);}if(h===g){T=null;break b}var Db=h.sibling;if(null!==Db){Db.return=h.return;T=Db;break b}T=h.return;}}H=e;ad();if(Sc&&"function"===typeof Sc.onPostCommitFiberRoot)try{Sc.onPostCommitFiberRoot(Rc,a);}catch(lc){}d=!0;}return d}finally{C=c,W.transition=b;}}return !1}function ci(a,b,c){b=Ef(c,b);b=If(a,b,1);a=he(a,b,1);b=O();null!==a&&(Fc(a,1,b),Kh(a,b));}
	function U(a,b,c){if(3===a.tag)ci(a,a,c);else for(;null!==b;){if(3===b.tag){ci(b,a,c);break}else if(1===b.tag){var d=b.stateNode;if("function"===typeof b.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===Mf||!Mf.has(d))){a=Ef(c,a);a=Lf(b,a,1);b=he(b,a,1);a=O();null!==b&&(Fc(b,1,a),Kh(b,a));break}}b=b.return;}}
	function Of(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);b=O();a.pingedLanes|=a.suspendedLanes&c;N===a&&(Z&c)===c&&(4===R||3===R&&(Z&130023424)===Z&&500>D()-bh?Rh(a,0):xh|=c);Kh(a,b);}function di(a,b){0===b&&(0===(a.mode&1)?b=1:(b=xc,xc<<=1,0===(xc&130023424)&&(xc=4194304)));var c=O();a=ce(a,b);null!==a&&(Fc(a,b,c),Kh(a,c));}function og(a){var b=a.memoizedState,c=0;null!==b&&(c=b.retryLane);di(a,c);}
	function Yg(a,b){var c=0;switch(a.tag){case 13:var d=a.stateNode;var e=a.memoizedState;null!==e&&(c=e.retryLane);break;case 19:d=a.stateNode;break;default:throw Error(n(314));}null!==d&&d.delete(b);di(a,c);}var ai;
	ai=function(a,b,c){if(null!==a)if(a.memoizedProps!==b.pendingProps||z.current)G=!0;else {if(0===(a.lanes&c)&&0===(b.flags&128))return G=!1,sg(a,b,c);G=0!==(a.flags&131072)?!0:!1;}else G=!1,F&&0!==(b.flags&1048576)&&ld(b,ed,b.index);b.lanes=0;switch(b.tag){case 2:var d=b.type;cg(a,b);a=b.pendingProps;var e=mc(b,x.current);Yd(b,c);e=He(null,b,d,a,e,c);var f=Me();b.flags|=1;"object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof?(b.tag=1,b.memoizedState=null,b.updateQueue=null,
	A(d)?(f=!0,qc(b)):f=!1,b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null,ee(b),e.updater=zf,b.stateNode=e,e._reactInternals=b,Df(b,d,a,c),b=dg(null,b,d,!0,f,c)):(b.tag=0,F&&f&&md(b),P(null,b,e,c),b=b.child);return b;case 16:d=b.elementType;a:{cg(a,b);a=b.pendingProps;e=d._init;d=e(d._payload);b.type=d;e=b.tag=ei(d);a=xf(d,a);switch(e){case 0:b=Xf(null,b,d,a,c);break a;case 1:b=bg(null,b,d,a,c);break a;case 11:b=Sf(null,b,d,a,c);break a;case 14:b=Uf(null,b,d,xf(d.type,a),c);break a}throw Error(n(306,
	d,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:xf(d,e),Xf(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:xf(d,e),bg(a,b,d,e,c);case 3:a:{eg(b);if(null===a)throw Error(n(387));d=b.pendingProps;f=b.memoizedState;e=f.element;fe(a,b);ke(b,d,null,c);var g=b.memoizedState;d=g.element;if(Va&&f.isDehydrated)if(f={element:d,isDehydrated:!1,cache:g.cache,pendingSuspenseBoundaries:g.pendingSuspenseBoundaries,transitions:g.transitions},b.updateQueue.baseState=
	f,b.memoizedState=f,b.flags&256){e=Ef(Error(n(423)),b);b=fg(a,b,d,c,e);break a}else if(d!==e){e=Ef(Error(n(424)),b);b=fg(a,b,d,c,e);break a}else for(Va&&(pd=Pb(b.stateNode.containerInfo),od=b,F=!0,rd=null,qd=!1),c=Pd(b,null,d,c),b.child=c;c;)c.flags=c.flags&-3|4096,c=c.sibling;else {Ad();if(d===e){b=Tf(a,b,c);break a}P(a,b,d,c);}b=b.child;}return b;case 5:return ue(b),null===a&&wd(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:null,g=e.children,Na(d,e)?g=null:null!==f&&Na(d,f)&&(b.flags|=32),
	ag(a,b),P(a,b,g,c),b.child;case 6:return null===a&&wd(b),null;case 13:return ig(a,b,c);case 4:return se(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Od(b,null,d,c):P(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:xf(d,e),Sf(a,b,d,e,c);case 7:return P(a,b,b.pendingProps,c),b.child;case 8:return P(a,b,b.pendingProps.children,c),b.child;case 12:return P(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;f=b.memoizedProps;
	g=e.value;Vd(b,d,g);if(null!==f)if(Vc(f.value,g)){if(f.children===e.children&&!z.current){b=Tf(a,b,c);break a}}else for(f=b.child,null!==f&&(f.return=b);null!==f;){var h=f.dependencies;if(null!==h){g=f.child;for(var k=h.firstContext;null!==k;){if(k.context===d){if(1===f.tag){k=ge(-1,c&-c);k.tag=2;var l=f.updateQueue;if(null!==l){l=l.shared;var m=l.pending;null===m?k.next=k:(k.next=m.next,m.next=k);l.pending=k;}}f.lanes|=c;k=f.alternate;null!==k&&(k.lanes|=c);Xd(f.return,c,b);h.lanes|=c;break}k=k.next;}}else if(10===
	f.tag)g=f.type===b.type?null:f.child;else if(18===f.tag){g=f.return;if(null===g)throw Error(n(341));g.lanes|=c;h=g.alternate;null!==h&&(h.lanes|=c);Xd(g,c,b);g=f.sibling;}else g=f.child;if(null!==g)g.return=f;else for(g=f;null!==g;){if(g===b){g=null;break}f=g.sibling;if(null!==f){f.return=g.return;g=f;break}g=g.return;}f=g;}P(a,b,e.children,c);b=b.child;}return b;case 9:return e=b.type,d=b.pendingProps.children,Yd(b,c),e=Zd(e),d=d(e),b.flags|=1,P(a,b,d,c),b.child;case 14:return d=b.type,e=xf(d,b.pendingProps),
	e=xf(d.type,e),Uf(a,b,d,e,c);case 15:return Wf(a,b,b.type,b.pendingProps,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:xf(d,e),cg(a,b),b.tag=1,A(d)?(a=!0,qc(b)):a=!1,Yd(b,c),Bf(b,d,e),Df(b,d,e,c),dg(null,b,d,!0,a,c);case 19:return rg(a,b,c);case 22:return Yf(a,b,c)}throw Error(n(156,b.tag));};function Mh(a,b){return Jc(a,b)}
	function fi(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.subtreeFlags=this.flags=0;this.deletions=null;this.childLanes=this.lanes=0;this.alternate=null;}function td(a,b,c,d){return new fi(a,b,c,d)}function Vf(a){a=a.prototype;return !(!a||!a.isReactComponent)}
	function ei(a){if("function"===typeof a)return Vf(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===ma)return 11;if(a===pa)return 14}return 2}
	function Jd(a,b){var c=a.alternate;null===c?(c=td(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.type=a.type,c.flags=0,c.subtreeFlags=0,c.deletions=null);c.flags=a.flags&14680064;c.childLanes=a.childLanes;c.lanes=a.lanes;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{lanes:b.lanes,firstContext:b.firstContext};
	c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}
	function Ld(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)Vf(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ha:return Nd(c.children,e,f,b);case ia:g=8;e|=8;break;case ja:return a=td(12,c,b,e|2),a.elementType=ja,a.lanes=f,a;case na:return a=td(13,c,b,e),a.elementType=na,a.lanes=f,a;case oa:return a=td(19,c,b,e),a.elementType=oa,a.lanes=f,a;case ra:return jg(c,e,f,b);default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case ka:g=10;break a;case la:g=9;break a;case ma:g=11;
	break a;case pa:g=14;break a;case qa:g=16;d=null;break a}throw Error(n(130,null==a?a:typeof a,""));}b=td(g,c,b,e);b.elementType=a;b.type=d;b.lanes=f;return b}function Nd(a,b,c,d){a=td(7,a,d,b);a.lanes=c;return a}function jg(a,b,c,d){a=td(22,a,d,b);a.elementType=ra;a.lanes=c;a.stateNode={isHidden:!1};return a}function Kd(a,b,c){a=td(6,a,null,b);a.lanes=c;return a}
	function Md(a,b,c){b=td(4,null!==a.children?a.children:[],a.key,b);b.lanes=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
	function gi(a,b,c,d,e){this.tag=b;this.containerInfo=a;this.finishedWork=this.pingCache=this.current=this.pendingChildren=null;this.timeoutHandle=Ra;this.callbackNode=this.pendingContext=this.context=null;this.callbackPriority=0;this.eventTimes=Ec(0);this.expirationTimes=Ec(-1);this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0;this.entanglements=Ec(0);this.identifierPrefix=d;this.onRecoverableError=e;Va&&(this.mutableSourceEagerHydrationData=
	null);}function hi(a,b,c,d,e,f,g,h,k){a=new gi(a,b,c,h,k);1===b?(b=1,!0===f&&(b|=8)):b=0;f=td(3,null,null,b);a.current=f;f.stateNode=a;f.memoizedState={element:d,isDehydrated:c,cache:null,transitions:null,pendingSuspenseBoundaries:null};ee(f);return a}
	function ii(a){if(!a)return jc;a=a._reactInternals;a:{if(wa(a)!==a||1!==a.tag)throw Error(n(170));var b=a;do{switch(b.tag){case 3:b=b.stateNode.context;break a;case 1:if(A(b.type)){b=b.stateNode.__reactInternalMemoizedMergedChildContext;break a}}b=b.return;}while(null!==b);throw Error(n(171));}if(1===a.tag){var c=a.type;if(A(c))return pc(a,c,b)}return b}
	function ji(a){var b=a._reactInternals;if(void 0===b){if("function"===typeof a.render)throw Error(n(188));a=Object.keys(a).join(",");throw Error(n(268,a));}a=Aa(b);return null===a?null:a.stateNode}function ki(a,b){a=a.memoizedState;if(null!==a&&null!==a.dehydrated){var c=a.retryLane;a.retryLane=0!==c&&c<b?c:b;}}function li(a,b){ki(a,b);(a=a.alternate)&&ki(a,b);}function mi(a){a=Aa(a);return null===a?null:a.stateNode}function ni(){return null}
	exports.attemptContinuousHydration=function(a){if(13===a.tag){var b=ce(a,134217728);if(null!==b){var c=O();af(b,a,134217728,c);}li(a,134217728);}};exports.attemptDiscreteHydration=function(a){if(13===a.tag){var b=ce(a,1);if(null!==b){var c=O();af(b,a,1,c);}li(a,1);}};exports.attemptHydrationAtCurrentPriority=function(a){if(13===a.tag){var b=tf(a),c=ce(a,b);if(null!==c){var d=O();af(c,a,b,d);}li(a,b);}};
	exports.attemptSynchronousHydration=function(a){switch(a.tag){case 3:var b=a.stateNode;if(b.current.memoizedState.isDehydrated){var c=yc(b.pendingLanes);0!==c&&(Hc(b,c|1),Kh(b,D()),0===(H&6)&&(Bh(),ad()));}break;case 13:Xh(function(){var b=ce(a,1);if(null!==b){var c=O();af(b,a,1,c);}}),li(a,1);}};exports.batchedUpdates=function(a,b){var c=H;H|=1;try{return a(b)}finally{H=c,0===H&&(Bh(),Xc&&ad());}};exports.createComponentSelector=function(a){return {$$typeof:hh,value:a}};
	exports.createContainer=function(a,b,c,d,e,f,g){return hi(a,b,!1,null,c,d,e,f,g)};exports.createHasPseudoClassSelector=function(a){return {$$typeof:ih,value:a}};exports.createHydrationContainer=function(a,b,c,d,e,f,g,h,k){a=hi(c,d,!0,a,e,f,g,h,k);a.context=ii(null);c=a.current;d=O();e=tf(c);f=ge(d,e);f.callback=void 0!==b&&null!==b?b:null;he(c,f,e);a.current.lanes=e;Fc(a,e,d);Kh(a,d);return a};
	exports.createPortal=function(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return {$$typeof:fa,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}};exports.createRoleSelector=function(a){return {$$typeof:jh,value:a}};exports.createTestNameSelector=function(a){return {$$typeof:kh,value:a}};exports.createTextSelector=function(a){return {$$typeof:lh,value:a}};
	exports.deferredUpdates=function(a){var b=C,c=W.transition;try{return W.transition=null,C=16,a()}finally{C=b,W.transition=c;}};exports.discreteUpdates=function(a,b,c,d,e){var f=C,g=W.transition;try{return W.transition=null,C=1,a(b,c,d,e)}finally{C=f,W.transition=g,0===H&&Bh();}};exports.findAllNodes=rh;
	exports.findBoundingRects=function(a,b){if(!bb)throw Error(n(363));b=rh(a,b);a=[];for(var c=0;c<b.length;c++)a.push(db(b[c]));for(b=a.length-1;0<b;b--){c=a[b];for(var d=c.x,e=d+c.width,f=c.y,g=f+c.height,h=b-1;0<=h;h--)if(b!==h){var k=a[h],l=k.x,m=l+k.width,r=k.y,p=r+k.height;if(d>=l&&f>=r&&e<=m&&g<=p){a.splice(b,1);break}else if(!(d!==l||c.width!==k.width||p<f||r>g)){r>f&&(k.height+=r-f,k.y=f);p<g&&(k.height=g-r);a.splice(b,1);break}else if(!(f!==r||c.height!==k.height||m<d||l>e)){l>d&&(k.width+=
	l-d,k.x=d);m<e&&(k.width=e-l);a.splice(b,1);break}}}return a};exports.findHostInstance=ji;exports.findHostInstanceWithNoPortals=function(a){a=za(a);a=null!==a?Ca(a):null;return null===a?null:a.stateNode};exports.findHostInstanceWithWarning=function(a){return ji(a)};exports.flushControlled=function(a){var b=H;H|=1;var c=W.transition,d=C;try{W.transition=null,C=1,a();}finally{C=d,W.transition=c,H=b,0===H&&(Bh(),ad());}};exports.flushPassiveEffects=Oh;exports.flushSync=Xh;
	exports.focusWithin=function(a,b){if(!bb)throw Error(n(363));a=nh(a);b=qh(a,b);b=Array.from(b);for(a=0;a<b.length;){var c=b[a++];if(!fb(c)){if(5===c.tag&&hb(c.stateNode))return !0;for(c=c.child;null!==c;)b.push(c),c=c.sibling;}}return !1};exports.getCurrentUpdatePriority=function(){return C};
	exports.getFindAllNodesFailureDescription=function(a,b){if(!bb)throw Error(n(363));var c=0,d=[];a=[nh(a),0];for(var e=0;e<a.length;){var f=a[e++],g=a[e++],h=b[g];if(5!==f.tag||!fb(f))if(oh(f,h)&&(d.push(ph(h)),g++,g>c&&(c=g)),g<b.length)for(f=f.child;null!==f;)a.push(f,g),f=f.sibling;}if(c<b.length){for(a=[];c<b.length;c++)a.push(ph(b[c]));return "findAllNodes was able to match part of the selector:\n  "+(d.join(" > ")+"\n\nNo matching component was found for:\n  ")+a.join(" > ")}return null};
	exports.getPublicRootInstance=function(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return Ea(a.child.stateNode);default:return a.child.stateNode}};
	exports.injectIntoDevTools=function(a){a={bundleType:a.bundleType,version:a.version,rendererPackageName:a.rendererPackageName,rendererConfig:a.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:da.ReactCurrentDispatcher,findHostInstanceByFiber:mi,findFiberByHostInstance:a.findFiberByHostInstance||
	ni,findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1"};if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)a=!1;else {var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)a=!0;else {try{Rc=b.inject(a),Sc=b;}catch(c){}a=b.checkDCE?!0:!1;}}return a};exports.isAlreadyRendering=function(){return !1};
	exports.observeVisibleRects=function(a,b,c,d){if(!bb)throw Error(n(363));a=rh(a,b);var e=ib(a,c,d).disconnect;return {disconnect:function(){e();}}};exports.registerMutableSourceForHydration=function(a,b){var c=b._getVersion;c=c(b._source);null==a.mutableSourceEagerHydrationData?a.mutableSourceEagerHydrationData=[b,c]:a.mutableSourceEagerHydrationData.push(b,c);};exports.runWithPriority=function(a,b){var c=C;try{return C=a,b()}finally{C=c;}};exports.shouldError=function(){return null};
	exports.shouldSuspend=function(){return !1};exports.updateContainer=function(a,b,c,d){var e=b.current,f=O(),g=tf(e);c=ii(c);null===b.context?b.context=c:b.pendingContext=c;b=ge(f,g);b.payload={element:a};d=void 0===d?null:d;null!==d&&(b.callback=d);a=he(e,b,g);null!==a&&(af(a,e,g,f),ie(a,e,g));return g};

	    return exports;
	};
	return reactReconciler_production_min;
}

var reactReconciler_development = {exports: {}};

/**
 * @license React
 * react-reconciler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactReconciler_development;

function requireReactReconciler_development () {
	if (hasRequiredReactReconciler_development) return reactReconciler_development.exports;
	hasRequiredReactReconciler_development = 1;

	if (process.env.NODE_ENV !== "production") {
	  reactReconciler_development.exports = function $$$reconciler($$$hostConfig) {
	    var exports = {};

	var React$1 = React;
	var Scheduler = requireScheduler();

	var ReactSharedInternals = React$1.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

	var suppressWarning = false;
	function setSuppressWarning(newSuppressWarning) {
	  {
	    suppressWarning = newSuppressWarning;
	  }
	} // In DEV, calls to console.warn and console.error get replaced
	// by calls to these methods by a Babel plugin.
	//
	// In PROD (or in packages without access to React internals),
	// they are left as they are instead.

	function warn(format) {
	  {
	    if (!suppressWarning) {
	      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	        args[_key - 1] = arguments[_key];
	      }

	      printWarning('warn', format, args);
	    }
	  }
	}
	function error(format) {
	  {
	    if (!suppressWarning) {
	      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
	        args[_key2 - 1] = arguments[_key2];
	      }

	      printWarning('error', format, args);
	    }
	  }
	}

	function printWarning(level, format, args) {
	  // When changing this logic, you might want to also
	  // update consoleWithStackDev.www.js as well.
	  {
	    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
	    var stack = ReactDebugCurrentFrame.getStackAddendum();

	    if (stack !== '') {
	      format += '%s';
	      args = args.concat([stack]);
	    } // eslint-disable-next-line react-internal/safe-string-coercion


	    var argsWithFormat = args.map(function (item) {
	      return String(item);
	    }); // Careful: RN currently depends on this prefix

	    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
	    // breaks IE9: https://github.com/facebook/react/issues/13610
	    // eslint-disable-next-line react-internal/no-production-logging

	    Function.prototype.apply.call(console[level], console, argsWithFormat);
	  }
	}

	var assign = Object.assign;

	/**
	 * `ReactInstanceMap` maintains a mapping from a public facing stateful
	 * instance (key) and the internal representation (value). This allows public
	 * methods to accept the user facing instance as an argument and map them back
	 * to internal methods.
	 *
	 * Note that this module is currently shared and assumed to be stateless.
	 * If this becomes an actual Map, that will break.
	 */
	function get(key) {
	  return key._reactInternals;
	}
	function set(key, value) {
	  key._reactInternals = value;
	}

	// -----------------------------------------------------------------------------
	// the react-reconciler package.

	var enableNewReconciler = false; // Support legacy Primer support on internal FB www

	var enableLazyContextPropagation = false; // FB-only usage. The new API has different semantics.

	var enableLegacyHidden = false; // Enables unstable_avoidThisFallback feature in Fiber

	var enableSuspenseAvoidThisFallback = false; // Enables unstable_avoidThisFallback feature in Fizz
	var warnAboutStringRefs = true; // -----------------------------------------------------------------------------
	// Debugging and DevTools
	// -----------------------------------------------------------------------------
	// Adds user timing marks for e.g. state updates, suspense, and work loop stuff,
	// for an experimental timeline tool.

	var enableSchedulingProfiler = true; // Helps identify side effects in render-phase lifecycle hooks and setState

	var enableProfilerTimer = true; // Record durations for commit and passive effects phases.

	var enableProfilerCommitHooks = true; // Phase param passed to onRender callback differentiates between an "update" and a "cascading-update".

	var FunctionComponent = 0;
	var ClassComponent = 1;
	var IndeterminateComponent = 2; // Before we know whether it is function or class

	var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

	var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

	var HostComponent = 5;
	var HostText = 6;
	var Fragment = 7;
	var Mode = 8;
	var ContextConsumer = 9;
	var ContextProvider = 10;
	var ForwardRef = 11;
	var Profiler = 12;
	var SuspenseComponent = 13;
	var MemoComponent = 14;
	var SimpleMemoComponent = 15;
	var LazyComponent = 16;
	var IncompleteClassComponent = 17;
	var DehydratedFragment = 18;
	var SuspenseListComponent = 19;
	var ScopeComponent = 21;
	var OffscreenComponent = 22;
	var LegacyHiddenComponent = 23;
	var CacheComponent = 24;
	var TracingMarkerComponent = 25;

	// ATTENTION
	// When adding new symbols to this file,
	// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
	// The Symbol used to tag the ReactElement-like types.
	var REACT_ELEMENT_TYPE = Symbol.for('react.element');
	var REACT_PORTAL_TYPE = Symbol.for('react.portal');
	var REACT_FRAGMENT_TYPE = Symbol.for('react.fragment');
	var REACT_STRICT_MODE_TYPE = Symbol.for('react.strict_mode');
	var REACT_PROFILER_TYPE = Symbol.for('react.profiler');
	var REACT_PROVIDER_TYPE = Symbol.for('react.provider');
	var REACT_CONTEXT_TYPE = Symbol.for('react.context');
	var REACT_FORWARD_REF_TYPE = Symbol.for('react.forward_ref');
	var REACT_SUSPENSE_TYPE = Symbol.for('react.suspense');
	var REACT_SUSPENSE_LIST_TYPE = Symbol.for('react.suspense_list');
	var REACT_MEMO_TYPE = Symbol.for('react.memo');
	var REACT_LAZY_TYPE = Symbol.for('react.lazy');
	var REACT_SCOPE_TYPE = Symbol.for('react.scope');
	var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for('react.debug_trace_mode');
	var REACT_OFFSCREEN_TYPE = Symbol.for('react.offscreen');
	var REACT_LEGACY_HIDDEN_TYPE = Symbol.for('react.legacy_hidden');
	var REACT_CACHE_TYPE = Symbol.for('react.cache');
	var REACT_TRACING_MARKER_TYPE = Symbol.for('react.tracing_marker');
	var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
	var FAUX_ITERATOR_SYMBOL = '@@iterator';
	function getIteratorFn(maybeIterable) {
	  if (maybeIterable === null || typeof maybeIterable !== 'object') {
	    return null;
	  }

	  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

	  if (typeof maybeIterator === 'function') {
	    return maybeIterator;
	  }

	  return null;
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var displayName = outerType.displayName;

	  if (displayName) {
	    return displayName;
	  }

	  var functionName = innerType.displayName || innerType.name || '';
	  return functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName;
	} // Keep in sync with react-reconciler/getComponentNameFromFiber


	function getContextName(type) {
	  return type.displayName || 'Context';
	} // Note that the reconciler package should generally prefer to use getComponentNameFromFiber() instead.


	function getComponentNameFromType(type) {
	  if (type == null) {
	    // Host root, text node or just invalid type.
	    return null;
	  }

	  {
	    if (typeof type.tag === 'number') {
	      error('Received an unexpected object in getComponentNameFromType(). ' + 'This is likely a bug in React. Please file an issue.');
	    }
	  }

	  if (typeof type === 'function') {
	    return type.displayName || type.name || null;
	  }

	  if (typeof type === 'string') {
	    return type;
	  }

	  switch (type) {
	    case REACT_FRAGMENT_TYPE:
	      return 'Fragment';

	    case REACT_PORTAL_TYPE:
	      return 'Portal';

	    case REACT_PROFILER_TYPE:
	      return 'Profiler';

	    case REACT_STRICT_MODE_TYPE:
	      return 'StrictMode';

	    case REACT_SUSPENSE_TYPE:
	      return 'Suspense';

	    case REACT_SUSPENSE_LIST_TYPE:
	      return 'SuspenseList';

	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_CONTEXT_TYPE:
	        var context = type;
	        return getContextName(context) + '.Consumer';

	      case REACT_PROVIDER_TYPE:
	        var provider = type;
	        return getContextName(provider._context) + '.Provider';

	      case REACT_FORWARD_REF_TYPE:
	        return getWrappedName(type, type.render, 'ForwardRef');

	      case REACT_MEMO_TYPE:
	        var outerName = type.displayName || null;

	        if (outerName !== null) {
	          return outerName;
	        }

	        return getComponentNameFromType(type.type) || 'Memo';

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            return getComponentNameFromType(init(payload));
	          } catch (x) {
	            return null;
	          }
	        }

	      // eslint-disable-next-line no-fallthrough
	    }
	  }

	  return null;
	}

	function getWrappedName$1(outerType, innerType, wrapperName) {
	  var functionName = innerType.displayName || innerType.name || '';
	  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
	} // Keep in sync with shared/getComponentNameFromType


	function getContextName$1(type) {
	  return type.displayName || 'Context';
	}

	function getComponentNameFromFiber(fiber) {
	  var tag = fiber.tag,
	      type = fiber.type;

	  switch (tag) {
	    case CacheComponent:
	      return 'Cache';

	    case ContextConsumer:
	      var context = type;
	      return getContextName$1(context) + '.Consumer';

	    case ContextProvider:
	      var provider = type;
	      return getContextName$1(provider._context) + '.Provider';

	    case DehydratedFragment:
	      return 'DehydratedFragment';

	    case ForwardRef:
	      return getWrappedName$1(type, type.render, 'ForwardRef');

	    case Fragment:
	      return 'Fragment';

	    case HostComponent:
	      // Host component type is the display name (e.g. "div", "View")
	      return type;

	    case HostPortal:
	      return 'Portal';

	    case HostRoot:
	      return 'Root';

	    case HostText:
	      return 'Text';

	    case LazyComponent:
	      // Name comes from the type in this case; we don't have a tag.
	      return getComponentNameFromType(type);

	    case Mode:
	      if (type === REACT_STRICT_MODE_TYPE) {
	        // Don't be less specific than shared/getComponentNameFromType
	        return 'StrictMode';
	      }

	      return 'Mode';

	    case OffscreenComponent:
	      return 'Offscreen';

	    case Profiler:
	      return 'Profiler';

	    case ScopeComponent:
	      return 'Scope';

	    case SuspenseComponent:
	      return 'Suspense';

	    case SuspenseListComponent:
	      return 'SuspenseList';

	    case TracingMarkerComponent:
	      return 'TracingMarker';
	    // The display name for this tags come from the user-provided type:

	    case ClassComponent:
	    case FunctionComponent:
	    case IncompleteClassComponent:
	    case IndeterminateComponent:
	    case MemoComponent:
	    case SimpleMemoComponent:
	      if (typeof type === 'function') {
	        return type.displayName || type.name || null;
	      }

	      if (typeof type === 'string') {
	        return type;
	      }

	      break;

	  }

	  return null;
	}

	// Don't change these two values. They're used by React Dev Tools.
	var NoFlags =
	/*                      */
	0;
	var PerformedWork =
	/*                */
	1; // You can change the rest (and add more).

	var Placement =
	/*                    */
	2;
	var Update =
	/*                       */
	4;
	var ChildDeletion =
	/*                */
	16;
	var ContentReset =
	/*                 */
	32;
	var Callback =
	/*                     */
	64;
	var DidCapture =
	/*                   */
	128;
	var ForceClientRender =
	/*            */
	256;
	var Ref =
	/*                          */
	512;
	var Snapshot =
	/*                     */
	1024;
	var Passive =
	/*                      */
	2048;
	var Hydrating =
	/*                    */
	4096;
	var Visibility =
	/*                   */
	8192;
	var StoreConsistency =
	/*             */
	16384;
	var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency; // Union of all commit flags (flags with the lifetime of a particular commit)

	var HostEffectMask =
	/*               */
	32767; // These are not really side effects, but we still reuse this field.

	var Incomplete =
	/*                   */
	32768;
	var ShouldCapture =
	/*                */
	65536;
	var ForceUpdateForLegacySuspense =
	/* */
	131072;
	var Forked =
	/*                       */
	1048576; // Static tags describe aspects of a fiber that are not specific to a render,
	// e.g. a fiber uses a passive effect (even if there are no updates on this particular render).
	// This enables us to defer more work in the unmount case,
	// since we can defer traversing the tree during layout to look for Passive effects,
	// and instead rely on the static flag as a signal that there may be cleanup work.

	var RefStatic =
	/*                    */
	2097152;
	var LayoutStatic =
	/*                 */
	4194304;
	var PassiveStatic =
	/*                */
	8388608; // These flags allow us to traverse to fibers that have effects on mount
	// without traversing the entire tree after every commit for
	// double invoking

	var MountLayoutDev =
	/*               */
	16777216;
	var MountPassiveDev =
	/*              */
	33554432; // Groups of flags that are used in the commit phase to skip over trees that
	// don't contain effects, by checking subtreeFlags.

	var BeforeMutationMask = // TODO: Remove Update flag from before mutation phase by re-landing Visibility
	// flag logic (see #20043)
	Update | Snapshot | ( 0);
	var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
	var LayoutMask = Update | Callback | Ref | Visibility; // TODO: Split into PassiveMountMask and PassiveUnmountMask

	var PassiveMask = Passive | ChildDeletion; // Union of tags that don't get reset on clones.
	// This allows certain concepts to persist without recalculating them,
	// e.g. whether a subtree contains passive effects or portals.

	var StaticMask = LayoutStatic | PassiveStatic | RefStatic;

	var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
	function getNearestMountedFiber(fiber) {
	  var node = fiber;
	  var nearestMounted = fiber;

	  if (!fiber.alternate) {
	    // If there is no alternate, this might be a new tree that isn't inserted
	    // yet. If it is, then it will have a pending insertion effect on it.
	    var nextNode = node;

	    do {
	      node = nextNode;

	      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
	        // This is an insertion or in-progress hydration. The nearest possible
	        // mounted fiber is the parent but we need to continue to figure out
	        // if that one is still mounted.
	        nearestMounted = node.return;
	      }

	      nextNode = node.return;
	    } while (nextNode);
	  } else {
	    while (node.return) {
	      node = node.return;
	    }
	  }

	  if (node.tag === HostRoot) {
	    // TODO: Check if this was a nested HostRoot when used with
	    // renderContainerIntoSubtree.
	    return nearestMounted;
	  } // If we didn't hit the root, that means that we're in an disconnected tree
	  // that has been unmounted.


	  return null;
	}
	function isFiberMounted(fiber) {
	  return getNearestMountedFiber(fiber) === fiber;
	}
	function isMounted(component) {
	  {
	    var owner = ReactCurrentOwner.current;

	    if (owner !== null && owner.tag === ClassComponent) {
	      var ownerFiber = owner;
	      var instance = ownerFiber.stateNode;

	      if (!instance._warnedAboutRefsInRender) {
	        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentNameFromFiber(ownerFiber) || 'A component');
	      }

	      instance._warnedAboutRefsInRender = true;
	    }
	  }

	  var fiber = get(component);

	  if (!fiber) {
	    return false;
	  }

	  return getNearestMountedFiber(fiber) === fiber;
	}

	function assertIsMounted(fiber) {
	  if (getNearestMountedFiber(fiber) !== fiber) {
	    throw new Error('Unable to find node on an unmounted component.');
	  }
	}

	function findCurrentFiberUsingSlowPath(fiber) {
	  var alternate = fiber.alternate;

	  if (!alternate) {
	    // If there is no alternate, then we only need to check if it is mounted.
	    var nearestMounted = getNearestMountedFiber(fiber);

	    if (nearestMounted === null) {
	      throw new Error('Unable to find node on an unmounted component.');
	    }

	    if (nearestMounted !== fiber) {
	      return null;
	    }

	    return fiber;
	  } // If we have two possible branches, we'll walk backwards up to the root
	  // to see what path the root points to. On the way we may hit one of the
	  // special cases and we'll deal with them.


	  var a = fiber;
	  var b = alternate;

	  while (true) {
	    var parentA = a.return;

	    if (parentA === null) {
	      // We're at the root.
	      break;
	    }

	    var parentB = parentA.alternate;

	    if (parentB === null) {
	      // There is no alternate. This is an unusual case. Currently, it only
	      // happens when a Suspense component is hidden. An extra fragment fiber
	      // is inserted in between the Suspense fiber and its children. Skip
	      // over this extra fragment fiber and proceed to the next parent.
	      var nextParent = parentA.return;

	      if (nextParent !== null) {
	        a = b = nextParent;
	        continue;
	      } // If there's no parent, we're at the root.


	      break;
	    } // If both copies of the parent fiber point to the same child, we can
	    // assume that the child is current. This happens when we bailout on low
	    // priority: the bailed out fiber's child reuses the current child.


	    if (parentA.child === parentB.child) {
	      var child = parentA.child;

	      while (child) {
	        if (child === a) {
	          // We've determined that A is the current branch.
	          assertIsMounted(parentA);
	          return fiber;
	        }

	        if (child === b) {
	          // We've determined that B is the current branch.
	          assertIsMounted(parentA);
	          return alternate;
	        }

	        child = child.sibling;
	      } // We should never have an alternate for any mounting node. So the only
	      // way this could possibly happen is if this was unmounted, if at all.


	      throw new Error('Unable to find node on an unmounted component.');
	    }

	    if (a.return !== b.return) {
	      // The return pointer of A and the return pointer of B point to different
	      // fibers. We assume that return pointers never criss-cross, so A must
	      // belong to the child set of A.return, and B must belong to the child
	      // set of B.return.
	      a = parentA;
	      b = parentB;
	    } else {
	      // The return pointers point to the same fiber. We'll have to use the
	      // default, slow path: scan the child sets of each parent alternate to see
	      // which child belongs to which set.
	      //
	      // Search parent A's child set
	      var didFindChild = false;
	      var _child = parentA.child;

	      while (_child) {
	        if (_child === a) {
	          didFindChild = true;
	          a = parentA;
	          b = parentB;
	          break;
	        }

	        if (_child === b) {
	          didFindChild = true;
	          b = parentA;
	          a = parentB;
	          break;
	        }

	        _child = _child.sibling;
	      }

	      if (!didFindChild) {
	        // Search parent B's child set
	        _child = parentB.child;

	        while (_child) {
	          if (_child === a) {
	            didFindChild = true;
	            a = parentB;
	            b = parentA;
	            break;
	          }

	          if (_child === b) {
	            didFindChild = true;
	            b = parentB;
	            a = parentA;
	            break;
	          }

	          _child = _child.sibling;
	        }

	        if (!didFindChild) {
	          throw new Error('Child was not found in either parent set. This indicates a bug ' + 'in React related to the return pointer. Please file an issue.');
	        }
	      }
	    }

	    if (a.alternate !== b) {
	      throw new Error("Return fibers should always be each others' alternates. " + 'This error is likely caused by a bug in React. Please file an issue.');
	    }
	  } // If the root is not a host container, we're in a disconnected tree. I.e.
	  // unmounted.


	  if (a.tag !== HostRoot) {
	    throw new Error('Unable to find node on an unmounted component.');
	  }

	  if (a.stateNode.current === a) {
	    // We've determined that A is the current branch.
	    return fiber;
	  } // Otherwise B has to be current branch.


	  return alternate;
	}
	function findCurrentHostFiber(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);
	  return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
	}

	function findCurrentHostFiberImpl(node) {
	  // Next we'll drill down this component to find the first HostComponent/Text.
	  if (node.tag === HostComponent || node.tag === HostText) {
	    return node;
	  }

	  var child = node.child;

	  while (child !== null) {
	    var match = findCurrentHostFiberImpl(child);

	    if (match !== null) {
	      return match;
	    }

	    child = child.sibling;
	  }

	  return null;
	}

	function findCurrentHostFiberWithNoPortals(parent) {
	  var currentParent = findCurrentFiberUsingSlowPath(parent);
	  return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
	}

	function findCurrentHostFiberWithNoPortalsImpl(node) {
	  // Next we'll drill down this component to find the first HostComponent/Text.
	  if (node.tag === HostComponent || node.tag === HostText) {
	    return node;
	  }

	  var child = node.child;

	  while (child !== null) {
	    if (child.tag !== HostPortal) {
	      var match = findCurrentHostFiberWithNoPortalsImpl(child);

	      if (match !== null) {
	        return match;
	      }
	    }

	    child = child.sibling;
	  }

	  return null;
	}

	var isArrayImpl = Array.isArray; // eslint-disable-next-line no-redeclare

	function isArray(a) {
	  return isArrayImpl(a);
	}

	// This is a host config that's used for the `react-reconciler` package on npm.
	// It is only used by third-party renderers.
	//
	// Its API lets you pass the host config as an argument.
	// However, inside the `react-reconciler` we treat host config as a module.
	// This file is a shim between two worlds.
	//
	// It works because the `react-reconciler` bundle is wrapped in something like:
	//
	// module.exports = function ($$$config) {
	//   /* reconciler code */
	// }
	//
	// So `$$$config` looks like a global variable, but it's
	// really an argument to a top-level wrapping function.
	// eslint-disable-line no-undef
	// eslint-disable-line no-undef
	// eslint-disable-line no-undef
	// eslint-disable-line no-undef
	// eslint-disable-line no-undef
	// eslint-disable-line no-undef
	// eslint-disable-line no-undef
	// eslint-disable-line no-undef
	// eslint-disable-line no-undef
	// eslint-disable-line no-undef
	// eslint-disable-line no-undef
	// eslint-disable-line no-undef
	// eslint-disable-line no-undef
	// eslint-disable-line no-undef
	var getPublicInstance = $$$hostConfig.getPublicInstance;
	var getRootHostContext = $$$hostConfig.getRootHostContext;
	var getChildHostContext = $$$hostConfig.getChildHostContext;
	var prepareForCommit = $$$hostConfig.prepareForCommit;
	var resetAfterCommit = $$$hostConfig.resetAfterCommit;
	var createInstance = $$$hostConfig.createInstance;
	var appendInitialChild = $$$hostConfig.appendInitialChild;
	var finalizeInitialChildren = $$$hostConfig.finalizeInitialChildren;
	var prepareUpdate = $$$hostConfig.prepareUpdate;
	var shouldSetTextContent = $$$hostConfig.shouldSetTextContent;
	var createTextInstance = $$$hostConfig.createTextInstance;
	var scheduleTimeout = $$$hostConfig.scheduleTimeout;
	var cancelTimeout = $$$hostConfig.cancelTimeout;
	var noTimeout = $$$hostConfig.noTimeout;
	var isPrimaryRenderer = $$$hostConfig.isPrimaryRenderer;
	var warnsIfNotActing = $$$hostConfig.warnsIfNotActing;
	var supportsMutation = $$$hostConfig.supportsMutation;
	var supportsPersistence = $$$hostConfig.supportsPersistence;
	var supportsHydration = $$$hostConfig.supportsHydration;
	var getInstanceFromNode = $$$hostConfig.getInstanceFromNode;
	$$$hostConfig.beforeActiveInstanceBlur;
	$$$hostConfig.afterActiveInstanceBlur;
	var preparePortalMount = $$$hostConfig.preparePortalMount;
	$$$hostConfig.prepareScopeUpdate;
	$$$hostConfig.getInstanceFromScope;
	var getCurrentEventPriority = $$$hostConfig.getCurrentEventPriority;
	var detachDeletedInstance = $$$hostConfig.detachDeletedInstance; // -------------------
	//      Microtasks
	//     (optional)
	// -------------------

	var supportsMicrotasks = $$$hostConfig.supportsMicrotasks;
	var scheduleMicrotask = $$$hostConfig.scheduleMicrotask; // -------------------
	//      Test selectors
	//     (optional)
	// -------------------

	var supportsTestSelectors = $$$hostConfig.supportsTestSelectors;
	var findFiberRoot = $$$hostConfig.findFiberRoot;
	var getBoundingRect = $$$hostConfig.getBoundingRect;
	var getTextContent = $$$hostConfig.getTextContent;
	var isHiddenSubtree = $$$hostConfig.isHiddenSubtree;
	var matchAccessibilityRole = $$$hostConfig.matchAccessibilityRole;
	var setFocusIfFocusable = $$$hostConfig.setFocusIfFocusable;
	var setupIntersectionObserver = $$$hostConfig.setupIntersectionObserver; // -------------------
	//      Mutation
	//     (optional)
	// -------------------

	var appendChild = $$$hostConfig.appendChild;
	var appendChildToContainer = $$$hostConfig.appendChildToContainer;
	var commitTextUpdate = $$$hostConfig.commitTextUpdate;
	var commitMount = $$$hostConfig.commitMount;
	var commitUpdate = $$$hostConfig.commitUpdate;
	var insertBefore = $$$hostConfig.insertBefore;
	var insertInContainerBefore = $$$hostConfig.insertInContainerBefore;
	var removeChild = $$$hostConfig.removeChild;
	var removeChildFromContainer = $$$hostConfig.removeChildFromContainer;
	var resetTextContent = $$$hostConfig.resetTextContent;
	var hideInstance = $$$hostConfig.hideInstance;
	var hideTextInstance = $$$hostConfig.hideTextInstance;
	var unhideInstance = $$$hostConfig.unhideInstance;
	var unhideTextInstance = $$$hostConfig.unhideTextInstance;
	var clearContainer = $$$hostConfig.clearContainer; // -------------------
	//     Persistence
	//     (optional)
	// -------------------

	var cloneInstance = $$$hostConfig.cloneInstance;
	var createContainerChildSet = $$$hostConfig.createContainerChildSet;
	var appendChildToContainerChildSet = $$$hostConfig.appendChildToContainerChildSet;
	var finalizeContainerChildren = $$$hostConfig.finalizeContainerChildren;
	var replaceContainerChildren = $$$hostConfig.replaceContainerChildren;
	var cloneHiddenInstance = $$$hostConfig.cloneHiddenInstance;
	var cloneHiddenTextInstance = $$$hostConfig.cloneHiddenTextInstance; // -------------------
	//     Hydration
	//     (optional)
	// -------------------

	var canHydrateInstance = $$$hostConfig.canHydrateInstance;
	var canHydrateTextInstance = $$$hostConfig.canHydrateTextInstance;
	var canHydrateSuspenseInstance = $$$hostConfig.canHydrateSuspenseInstance;
	var isSuspenseInstancePending = $$$hostConfig.isSuspenseInstancePending;
	var isSuspenseInstanceFallback = $$$hostConfig.isSuspenseInstanceFallback;
	var getSuspenseInstanceFallbackErrorDetails = $$$hostConfig.getSuspenseInstanceFallbackErrorDetails;
	var registerSuspenseInstanceRetry = $$$hostConfig.registerSuspenseInstanceRetry;
	var getNextHydratableSibling = $$$hostConfig.getNextHydratableSibling;
	var getFirstHydratableChild = $$$hostConfig.getFirstHydratableChild;
	var getFirstHydratableChildWithinContainer = $$$hostConfig.getFirstHydratableChildWithinContainer;
	var getFirstHydratableChildWithinSuspenseInstance = $$$hostConfig.getFirstHydratableChildWithinSuspenseInstance;
	var hydrateInstance = $$$hostConfig.hydrateInstance;
	var hydrateTextInstance = $$$hostConfig.hydrateTextInstance;
	var hydrateSuspenseInstance = $$$hostConfig.hydrateSuspenseInstance;
	var getNextHydratableInstanceAfterSuspenseInstance = $$$hostConfig.getNextHydratableInstanceAfterSuspenseInstance;
	var commitHydratedContainer = $$$hostConfig.commitHydratedContainer;
	var commitHydratedSuspenseInstance = $$$hostConfig.commitHydratedSuspenseInstance;
	var clearSuspenseBoundary = $$$hostConfig.clearSuspenseBoundary;
	var clearSuspenseBoundaryFromContainer = $$$hostConfig.clearSuspenseBoundaryFromContainer;
	var shouldDeleteUnhydratedTailInstances = $$$hostConfig.shouldDeleteUnhydratedTailInstances;
	var didNotMatchHydratedContainerTextInstance = $$$hostConfig.didNotMatchHydratedContainerTextInstance;
	var didNotMatchHydratedTextInstance = $$$hostConfig.didNotMatchHydratedTextInstance;
	var didNotHydrateInstanceWithinContainer = $$$hostConfig.didNotHydrateInstanceWithinContainer;
	var didNotHydrateInstanceWithinSuspenseInstance = $$$hostConfig.didNotHydrateInstanceWithinSuspenseInstance;
	var didNotHydrateInstance = $$$hostConfig.didNotHydrateInstance;
	var didNotFindHydratableInstanceWithinContainer = $$$hostConfig.didNotFindHydratableInstanceWithinContainer;
	var didNotFindHydratableTextInstanceWithinContainer = $$$hostConfig.didNotFindHydratableTextInstanceWithinContainer;
	var didNotFindHydratableSuspenseInstanceWithinContainer = $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinContainer;
	var didNotFindHydratableInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableInstanceWithinSuspenseInstance;
	var didNotFindHydratableTextInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableTextInstanceWithinSuspenseInstance;
	var didNotFindHydratableSuspenseInstanceWithinSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstanceWithinSuspenseInstance;
	var didNotFindHydratableInstance = $$$hostConfig.didNotFindHydratableInstance;
	var didNotFindHydratableTextInstance = $$$hostConfig.didNotFindHydratableTextInstance;
	var didNotFindHydratableSuspenseInstance = $$$hostConfig.didNotFindHydratableSuspenseInstance;
	var errorHydratingContainer = $$$hostConfig.errorHydratingContainer;

	// Helpers to patch console.logs to avoid logging during side-effect free
	// replaying on render function. This currently only patches the object
	// lazily which won't cover if the log function was extracted eagerly.
	// We could also eagerly patch the method.
	var disabledDepth = 0;
	var prevLog;
	var prevInfo;
	var prevWarn;
	var prevError;
	var prevGroup;
	var prevGroupCollapsed;
	var prevGroupEnd;

	function disabledLog() {}

	disabledLog.__reactDisabledLog = true;
	function disableLogs() {
	  {
	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      prevLog = console.log;
	      prevInfo = console.info;
	      prevWarn = console.warn;
	      prevError = console.error;
	      prevGroup = console.group;
	      prevGroupCollapsed = console.groupCollapsed;
	      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

	      var props = {
	        configurable: true,
	        enumerable: true,
	        value: disabledLog,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        info: props,
	        log: props,
	        warn: props,
	        error: props,
	        group: props,
	        groupCollapsed: props,
	        groupEnd: props
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    disabledDepth++;
	  }
	}
	function reenableLogs() {
	  {
	    disabledDepth--;

	    if (disabledDepth === 0) {
	      /* eslint-disable react-internal/no-production-logging */
	      var props = {
	        configurable: true,
	        enumerable: true,
	        writable: true
	      }; // $FlowFixMe Flow thinks console is immutable.

	      Object.defineProperties(console, {
	        log: assign({}, props, {
	          value: prevLog
	        }),
	        info: assign({}, props, {
	          value: prevInfo
	        }),
	        warn: assign({}, props, {
	          value: prevWarn
	        }),
	        error: assign({}, props, {
	          value: prevError
	        }),
	        group: assign({}, props, {
	          value: prevGroup
	        }),
	        groupCollapsed: assign({}, props, {
	          value: prevGroupCollapsed
	        }),
	        groupEnd: assign({}, props, {
	          value: prevGroupEnd
	        })
	      });
	      /* eslint-enable react-internal/no-production-logging */
	    }

	    if (disabledDepth < 0) {
	      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
	    }
	  }
	}

	var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
	var prefix;
	function describeBuiltInComponentFrame(name, source, ownerFn) {
	  {
	    if (prefix === undefined) {
	      // Extract the VM specific prefix used by each line.
	      try {
	        throw Error();
	      } catch (x) {
	        var match = x.stack.trim().match(/\n( *(at )?)/);
	        prefix = match && match[1] || '';
	      }
	    } // We use the prefix to ensure our stacks line up with native stack frames.


	    return '\n' + prefix + name;
	  }
	}
	var reentry = false;
	var componentFrameCache;

	{
	  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
	  componentFrameCache = new PossiblyWeakMap();
	}

	function describeNativeComponentFrame(fn, construct) {
	  // If something asked for a stack inside a fake render, it should get ignored.
	  if ( !fn || reentry) {
	    return '';
	  }

	  {
	    var frame = componentFrameCache.get(fn);

	    if (frame !== undefined) {
	      return frame;
	    }
	  }

	  var control;
	  reentry = true;
	  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

	  Error.prepareStackTrace = undefined;
	  var previousDispatcher;

	  {
	    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
	    // for warnings.

	    ReactCurrentDispatcher.current = null;
	    disableLogs();
	  }

	  try {
	    // This should throw.
	    if (construct) {
	      // Something should be setting the props in the constructor.
	      var Fake = function () {
	        throw Error();
	      }; // $FlowFixMe


	      Object.defineProperty(Fake.prototype, 'props', {
	        set: function () {
	          // We use a throwing setter instead of frozen or non-writable props
	          // because that won't throw in a non-strict mode function.
	          throw Error();
	        }
	      });

	      if (typeof Reflect === 'object' && Reflect.construct) {
	        // We construct a different control for this case to include any extra
	        // frames added by the construct call.
	        try {
	          Reflect.construct(Fake, []);
	        } catch (x) {
	          control = x;
	        }

	        Reflect.construct(fn, [], Fake);
	      } else {
	        try {
	          Fake.call();
	        } catch (x) {
	          control = x;
	        }

	        fn.call(Fake.prototype);
	      }
	    } else {
	      try {
	        throw Error();
	      } catch (x) {
	        control = x;
	      }

	      fn();
	    }
	  } catch (sample) {
	    // This is inlined manually because closure doesn't do it for us.
	    if (sample && control && typeof sample.stack === 'string') {
	      // This extracts the first frame from the sample that isn't also in the control.
	      // Skipping one frame that we assume is the frame that calls the two.
	      var sampleLines = sample.stack.split('\n');
	      var controlLines = control.stack.split('\n');
	      var s = sampleLines.length - 1;
	      var c = controlLines.length - 1;

	      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
	        // We expect at least one stack frame to be shared.
	        // Typically this will be the root most one. However, stack frames may be
	        // cut off due to maximum stack limits. In this case, one maybe cut off
	        // earlier than the other. We assume that the sample is longer or the same
	        // and there for cut off earlier. So we should find the root most frame in
	        // the sample somewhere in the control.
	        c--;
	      }

	      for (; s >= 1 && c >= 0; s--, c--) {
	        // Next we find the first one that isn't the same which should be the
	        // frame that called our sample function and the control.
	        if (sampleLines[s] !== controlLines[c]) {
	          // In V8, the first line is describing the message but other VMs don't.
	          // If we're about to return the first line, and the control is also on the same
	          // line, that's a pretty good indicator that our sample threw at same line as
	          // the control. I.e. before we entered the sample frame. So we ignore this result.
	          // This can happen if you passed a class to function component, or non-function.
	          if (s !== 1 || c !== 1) {
	            do {
	              s--;
	              c--; // We may still have similar intermediate frames from the construct call.
	              // The next one that isn't the same should be our match though.

	              if (c < 0 || sampleLines[s] !== controlLines[c]) {
	                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
	                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at '); // If our component frame is labeled "<anonymous>"
	                // but we have a user-provided "displayName"
	                // splice it in to make the stack more readable.


	                if (fn.displayName && _frame.includes('<anonymous>')) {
	                  _frame = _frame.replace('<anonymous>', fn.displayName);
	                }

	                {
	                  if (typeof fn === 'function') {
	                    componentFrameCache.set(fn, _frame);
	                  }
	                } // Return the line we found.


	                return _frame;
	              }
	            } while (s >= 1 && c >= 0);
	          }

	          break;
	        }
	      }
	    }
	  } finally {
	    reentry = false;

	    {
	      ReactCurrentDispatcher.current = previousDispatcher;
	      reenableLogs();
	    }

	    Error.prepareStackTrace = previousPrepareStackTrace;
	  } // Fallback to just using the name if we couldn't make it throw.


	  var name = fn ? fn.displayName || fn.name : '';
	  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

	  {
	    if (typeof fn === 'function') {
	      componentFrameCache.set(fn, syntheticFrame);
	    }
	  }

	  return syntheticFrame;
	}

	function describeClassComponentFrame(ctor, source, ownerFn) {
	  {
	    return describeNativeComponentFrame(ctor, true);
	  }
	}
	function describeFunctionComponentFrame(fn, source, ownerFn) {
	  {
	    return describeNativeComponentFrame(fn, false);
	  }
	}

	function shouldConstruct(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

	  if (type == null) {
	    return '';
	  }

	  if (typeof type === 'function') {
	    {
	      return describeNativeComponentFrame(type, shouldConstruct(type));
	    }
	  }

	  if (typeof type === 'string') {
	    return describeBuiltInComponentFrame(type);
	  }

	  switch (type) {
	    case REACT_SUSPENSE_TYPE:
	      return describeBuiltInComponentFrame('Suspense');

	    case REACT_SUSPENSE_LIST_TYPE:
	      return describeBuiltInComponentFrame('SuspenseList');
	  }

	  if (typeof type === 'object') {
	    switch (type.$$typeof) {
	      case REACT_FORWARD_REF_TYPE:
	        return describeFunctionComponentFrame(type.render);

	      case REACT_MEMO_TYPE:
	        // Memo may contain any component type so we recursively resolve it.
	        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

	      case REACT_LAZY_TYPE:
	        {
	          var lazyComponent = type;
	          var payload = lazyComponent._payload;
	          var init = lazyComponent._init;

	          try {
	            // Lazy may contain any component type so we recursively resolve it.
	            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
	          } catch (x) {}
	        }
	    }
	  }

	  return '';
	}

	var hasOwnProperty = Object.prototype.hasOwnProperty;

	var loggedTypeFailures = {};
	var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;

	function setCurrentlyValidatingElement(element) {
	  {
	    if (element) {
	      var owner = element._owner;
	      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
	      ReactDebugCurrentFrame.setExtraStackFrame(stack);
	    } else {
	      ReactDebugCurrentFrame.setExtraStackFrame(null);
	    }
	  }
	}

	function checkPropTypes(typeSpecs, values, location, componentName, element) {
	  {
	    // $FlowFixMe This is okay but Flow doesn't know it.
	    var has = Function.call.bind(hasOwnProperty);

	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.

	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            // eslint-disable-next-line react-internal/prod-error-codes
	            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
	            err.name = 'Invariant Violation';
	            throw err;
	          }

	          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
	        } catch (ex) {
	          error$1 = ex;
	        }

	        if (error$1 && !(error$1 instanceof Error)) {
	          setCurrentlyValidatingElement(element);

	          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

	          setCurrentlyValidatingElement(null);
	        }

	        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error$1.message] = true;
	          setCurrentlyValidatingElement(element);

	          error('Failed %s type: %s', location, error$1.message);

	          setCurrentlyValidatingElement(null);
	        }
	      }
	    }
	  }
	}

	var valueStack = [];
	var fiberStack;

	{
	  fiberStack = [];
	}

	var index = -1;

	function createCursor(defaultValue) {
	  return {
	    current: defaultValue
	  };
	}

	function pop(cursor, fiber) {
	  if (index < 0) {
	    {
	      error('Unexpected pop.');
	    }

	    return;
	  }

	  {
	    if (fiber !== fiberStack[index]) {
	      error('Unexpected Fiber popped.');
	    }
	  }

	  cursor.current = valueStack[index];
	  valueStack[index] = null;

	  {
	    fiberStack[index] = null;
	  }

	  index--;
	}

	function push(cursor, value, fiber) {
	  index++;
	  valueStack[index] = cursor.current;

	  {
	    fiberStack[index] = fiber;
	  }

	  cursor.current = value;
	}

	var warnedAboutMissingGetChildContext;

	{
	  warnedAboutMissingGetChildContext = {};
	}

	var emptyContextObject = {};

	{
	  Object.freeze(emptyContextObject);
	} // A cursor to the current merged context object on the stack.


	var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

	var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
	// We use this to get access to the parent context after we have already
	// pushed the next context provider, and now need to merge their contexts.

	var previousContext = emptyContextObject;

	function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
	  {
	    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
	      // If the fiber is a context provider itself, when we read its context
	      // we may have already pushed its own child context on the stack. A context
	      // provider should not "see" its own child context. Therefore we read the
	      // previous (parent) context instead for a context provider.
	      return previousContext;
	    }

	    return contextStackCursor.current;
	  }
	}

	function cacheContext(workInProgress, unmaskedContext, maskedContext) {
	  {
	    var instance = workInProgress.stateNode;
	    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
	    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
	  }
	}

	function getMaskedContext(workInProgress, unmaskedContext) {
	  {
	    var type = workInProgress.type;
	    var contextTypes = type.contextTypes;

	    if (!contextTypes) {
	      return emptyContextObject;
	    } // Avoid recreating masked context unless unmasked context has changed.
	    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
	    // This may trigger infinite loops if componentWillReceiveProps calls setState.


	    var instance = workInProgress.stateNode;

	    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
	      return instance.__reactInternalMemoizedMaskedChildContext;
	    }

	    var context = {};

	    for (var key in contextTypes) {
	      context[key] = unmaskedContext[key];
	    }

	    {
	      var name = getComponentNameFromFiber(workInProgress) || 'Unknown';
	      checkPropTypes(contextTypes, context, 'context', name);
	    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
	    // Context is created before the class component is instantiated so check for instance.


	    if (instance) {
	      cacheContext(workInProgress, unmaskedContext, context);
	    }

	    return context;
	  }
	}

	function hasContextChanged() {
	  {
	    return didPerformWorkStackCursor.current;
	  }
	}

	function isContextProvider(type) {
	  {
	    var childContextTypes = type.childContextTypes;
	    return childContextTypes !== null && childContextTypes !== undefined;
	  }
	}

	function popContext(fiber) {
	  {
	    pop(didPerformWorkStackCursor, fiber);
	    pop(contextStackCursor, fiber);
	  }
	}

	function popTopLevelContextObject(fiber) {
	  {
	    pop(didPerformWorkStackCursor, fiber);
	    pop(contextStackCursor, fiber);
	  }
	}

	function pushTopLevelContextObject(fiber, context, didChange) {
	  {
	    if (contextStackCursor.current !== emptyContextObject) {
	      throw new Error('Unexpected context found on stack. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	    }

	    push(contextStackCursor, context, fiber);
	    push(didPerformWorkStackCursor, didChange, fiber);
	  }
	}

	function processChildContext(fiber, type, parentContext) {
	  {
	    var instance = fiber.stateNode;
	    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
	    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

	    if (typeof instance.getChildContext !== 'function') {
	      {
	        var componentName = getComponentNameFromFiber(fiber) || 'Unknown';

	        if (!warnedAboutMissingGetChildContext[componentName]) {
	          warnedAboutMissingGetChildContext[componentName] = true;

	          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
	        }
	      }

	      return parentContext;
	    }

	    var childContext = instance.getChildContext();

	    for (var contextKey in childContext) {
	      if (!(contextKey in childContextTypes)) {
	        throw new Error((getComponentNameFromFiber(fiber) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes.");
	      }
	    }

	    {
	      var name = getComponentNameFromFiber(fiber) || 'Unknown';
	      checkPropTypes(childContextTypes, childContext, 'child context', name);
	    }

	    return assign({}, parentContext, childContext);
	  }
	}

	function pushContextProvider(workInProgress) {
	  {
	    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
	    // If the instance does not exist yet, we will push null at first,
	    // and replace it on the stack later when invalidating the context.

	    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
	    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

	    previousContext = contextStackCursor.current;
	    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
	    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
	    return true;
	  }
	}

	function invalidateContextProvider(workInProgress, type, didChange) {
	  {
	    var instance = workInProgress.stateNode;

	    if (!instance) {
	      throw new Error('Expected to have an instance by this point. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	    }

	    if (didChange) {
	      // Merge parent and own context.
	      // Skip this if we're not updating due to sCU.
	      // This avoids unnecessarily recomputing memoized values.
	      var mergedContext = processChildContext(workInProgress, type, previousContext);
	      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
	      // It is important to unwind the context in the reverse order.

	      pop(didPerformWorkStackCursor, workInProgress);
	      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

	      push(contextStackCursor, mergedContext, workInProgress);
	      push(didPerformWorkStackCursor, didChange, workInProgress);
	    } else {
	      pop(didPerformWorkStackCursor, workInProgress);
	      push(didPerformWorkStackCursor, didChange, workInProgress);
	    }
	  }
	}

	function findCurrentUnmaskedContext(fiber) {
	  {
	    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
	    // makes sense elsewhere
	    if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
	      throw new Error('Expected subtree parent to be a mounted class component. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	    }

	    var node = fiber;

	    do {
	      switch (node.tag) {
	        case HostRoot:
	          return node.stateNode.context;

	        case ClassComponent:
	          {
	            var Component = node.type;

	            if (isContextProvider(Component)) {
	              return node.stateNode.__reactInternalMemoizedMergedChildContext;
	            }

	            break;
	          }
	      }

	      node = node.return;
	    } while (node !== null);

	    throw new Error('Found unexpected detached subtree parent. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	  }
	}

	var LegacyRoot = 0;
	var ConcurrentRoot = 1;

	var NoMode =
	/*                         */
	0; // TODO: Remove ConcurrentMode by reading from the root tag instead

	var ConcurrentMode =
	/*                 */
	1;
	var ProfileMode =
	/*                    */
	2;
	var StrictLegacyMode =
	/*               */
	8;
	var StrictEffectsMode =
	/*              */
	16;

	// TODO: This is pretty well supported by browsers. Maybe we can drop it.
	var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros.
	// Based on:
	// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

	var log = Math.log;
	var LN2 = Math.LN2;

	function clz32Fallback(x) {
	  var asUint = x >>> 0;

	  if (asUint === 0) {
	    return 32;
	  }

	  return 31 - (log(asUint) / LN2 | 0) | 0;
	}

	// If those values are changed that package should be rebuilt and redeployed.

	var TotalLanes = 31;
	var NoLanes =
	/*                        */
	0;
	var NoLane =
	/*                          */
	0;
	var SyncLane =
	/*                        */
	1;
	var InputContinuousHydrationLane =
	/*    */
	2;
	var InputContinuousLane =
	/*             */
	4;
	var DefaultHydrationLane =
	/*            */
	8;
	var DefaultLane =
	/*                     */
	16;
	var TransitionHydrationLane =
	/*                */
	32;
	var TransitionLanes =
	/*                       */
	4194240;
	var TransitionLane1 =
	/*                        */
	64;
	var TransitionLane2 =
	/*                        */
	128;
	var TransitionLane3 =
	/*                        */
	256;
	var TransitionLane4 =
	/*                        */
	512;
	var TransitionLane5 =
	/*                        */
	1024;
	var TransitionLane6 =
	/*                        */
	2048;
	var TransitionLane7 =
	/*                        */
	4096;
	var TransitionLane8 =
	/*                        */
	8192;
	var TransitionLane9 =
	/*                        */
	16384;
	var TransitionLane10 =
	/*                       */
	32768;
	var TransitionLane11 =
	/*                       */
	65536;
	var TransitionLane12 =
	/*                       */
	131072;
	var TransitionLane13 =
	/*                       */
	262144;
	var TransitionLane14 =
	/*                       */
	524288;
	var TransitionLane15 =
	/*                       */
	1048576;
	var TransitionLane16 =
	/*                       */
	2097152;
	var RetryLanes =
	/*                            */
	130023424;
	var RetryLane1 =
	/*                             */
	4194304;
	var RetryLane2 =
	/*                             */
	8388608;
	var RetryLane3 =
	/*                             */
	16777216;
	var RetryLane4 =
	/*                             */
	33554432;
	var RetryLane5 =
	/*                             */
	67108864;
	var SomeRetryLane = RetryLane1;
	var SelectiveHydrationLane =
	/*          */
	134217728;
	var NonIdleLanes =
	/*                          */
	268435455;
	var IdleHydrationLane =
	/*               */
	268435456;
	var IdleLane =
	/*                        */
	536870912;
	var OffscreenLane =
	/*                   */
	1073741824; // This function is used for the experimental timeline (react-devtools-timeline)
	// It should be kept in sync with the Lanes values above.

	function getLabelForLane(lane) {
	  {
	    if (lane & SyncLane) {
	      return 'Sync';
	    }

	    if (lane & InputContinuousHydrationLane) {
	      return 'InputContinuousHydration';
	    }

	    if (lane & InputContinuousLane) {
	      return 'InputContinuous';
	    }

	    if (lane & DefaultHydrationLane) {
	      return 'DefaultHydration';
	    }

	    if (lane & DefaultLane) {
	      return 'Default';
	    }

	    if (lane & TransitionHydrationLane) {
	      return 'TransitionHydration';
	    }

	    if (lane & TransitionLanes) {
	      return 'Transition';
	    }

	    if (lane & RetryLanes) {
	      return 'Retry';
	    }

	    if (lane & SelectiveHydrationLane) {
	      return 'SelectiveHydration';
	    }

	    if (lane & IdleHydrationLane) {
	      return 'IdleHydration';
	    }

	    if (lane & IdleLane) {
	      return 'Idle';
	    }

	    if (lane & OffscreenLane) {
	      return 'Offscreen';
	    }
	  }
	}
	var NoTimestamp = -1;
	var nextTransitionLane = TransitionLane1;
	var nextRetryLane = RetryLane1;

	function getHighestPriorityLanes(lanes) {
	  switch (getHighestPriorityLane(lanes)) {
	    case SyncLane:
	      return SyncLane;

	    case InputContinuousHydrationLane:
	      return InputContinuousHydrationLane;

	    case InputContinuousLane:
	      return InputContinuousLane;

	    case DefaultHydrationLane:
	      return DefaultHydrationLane;

	    case DefaultLane:
	      return DefaultLane;

	    case TransitionHydrationLane:
	      return TransitionHydrationLane;

	    case TransitionLane1:
	    case TransitionLane2:
	    case TransitionLane3:
	    case TransitionLane4:
	    case TransitionLane5:
	    case TransitionLane6:
	    case TransitionLane7:
	    case TransitionLane8:
	    case TransitionLane9:
	    case TransitionLane10:
	    case TransitionLane11:
	    case TransitionLane12:
	    case TransitionLane13:
	    case TransitionLane14:
	    case TransitionLane15:
	    case TransitionLane16:
	      return lanes & TransitionLanes;

	    case RetryLane1:
	    case RetryLane2:
	    case RetryLane3:
	    case RetryLane4:
	    case RetryLane5:
	      return lanes & RetryLanes;

	    case SelectiveHydrationLane:
	      return SelectiveHydrationLane;

	    case IdleHydrationLane:
	      return IdleHydrationLane;

	    case IdleLane:
	      return IdleLane;

	    case OffscreenLane:
	      return OffscreenLane;

	    default:
	      {
	        error('Should have found matching lanes. This is a bug in React.');
	      } // This shouldn't be reachable, but as a fallback, return the entire bitmask.


	      return lanes;
	  }
	}

	function getNextLanes(root, wipLanes) {
	  // Early bailout if there's no pending work left.
	  var pendingLanes = root.pendingLanes;

	  if (pendingLanes === NoLanes) {
	    return NoLanes;
	  }

	  var nextLanes = NoLanes;
	  var suspendedLanes = root.suspendedLanes;
	  var pingedLanes = root.pingedLanes; // Do not work on any idle work until all the non-idle work has finished,
	  // even if the work is suspended.

	  var nonIdlePendingLanes = pendingLanes & NonIdleLanes;

	  if (nonIdlePendingLanes !== NoLanes) {
	    var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;

	    if (nonIdleUnblockedLanes !== NoLanes) {
	      nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
	    } else {
	      var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;

	      if (nonIdlePingedLanes !== NoLanes) {
	        nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
	      }
	    }
	  } else {
	    // The only remaining work is Idle.
	    var unblockedLanes = pendingLanes & ~suspendedLanes;

	    if (unblockedLanes !== NoLanes) {
	      nextLanes = getHighestPriorityLanes(unblockedLanes);
	    } else {
	      if (pingedLanes !== NoLanes) {
	        nextLanes = getHighestPriorityLanes(pingedLanes);
	      }
	    }
	  }

	  if (nextLanes === NoLanes) {
	    // This should only be reachable if we're suspended
	    // TODO: Consider warning in this path if a fallback timer is not scheduled.
	    return NoLanes;
	  } // If we're already in the middle of a render, switching lanes will interrupt
	  // it and we'll lose our progress. We should only do this if the new lanes are
	  // higher priority.


	  if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
	  // bother waiting until the root is complete.
	  (wipLanes & suspendedLanes) === NoLanes) {
	    var nextLane = getHighestPriorityLane(nextLanes);
	    var wipLane = getHighestPriorityLane(wipLanes);

	    if ( // Tests whether the next lane is equal or lower priority than the wip
	    // one. This works because the bits decrease in priority as you go left.
	    nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
	    // only difference between default updates and transition updates is that
	    // default updates do not support refresh transitions.
	    nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes) {
	      // Keep working on the existing in-progress tree. Do not interrupt.
	      return wipLanes;
	    }
	  }

	  if ((nextLanes & InputContinuousLane) !== NoLanes) {
	    // When updates are sync by default, we entangle continuous priority updates
	    // and default updates, so they render in the same batch. The only reason
	    // they use separate lanes is because continuous updates should interrupt
	    // transitions, but default updates should not.
	    nextLanes |= pendingLanes & DefaultLane;
	  } // Check for entangled lanes and add them to the batch.
	  //
	  // A lane is said to be entangled with another when it's not allowed to render
	  // in a batch that does not also include the other lane. Typically we do this
	  // when multiple updates have the same source, and we only want to respond to
	  // the most recent event from that source.
	  //
	  // Note that we apply entanglements *after* checking for partial work above.
	  // This means that if a lane is entangled during an interleaved event while
	  // it's already rendering, we won't interrupt it. This is intentional, since
	  // entanglement is usually "best effort": we'll try our best to render the
	  // lanes in the same batch, but it's not worth throwing out partially
	  // completed work in order to do it.
	  // TODO: Reconsider this. The counter-argument is that the partial work
	  // represents an intermediate state, which we don't want to show to the user.
	  // And by spending extra time finishing it, we're increasing the amount of
	  // time it takes to show the final state, which is what they are actually
	  // waiting for.
	  //
	  // For those exceptions where entanglement is semantically important, like
	  // useMutableSource, we should ensure that there is no partial work at the
	  // time we apply the entanglement.


	  var entangledLanes = root.entangledLanes;

	  if (entangledLanes !== NoLanes) {
	    var entanglements = root.entanglements;
	    var lanes = nextLanes & entangledLanes;

	    while (lanes > 0) {
	      var index = pickArbitraryLaneIndex(lanes);
	      var lane = 1 << index;
	      nextLanes |= entanglements[index];
	      lanes &= ~lane;
	    }
	  }

	  return nextLanes;
	}
	function getMostRecentEventTime(root, lanes) {
	  var eventTimes = root.eventTimes;
	  var mostRecentEventTime = NoTimestamp;

	  while (lanes > 0) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;
	    var eventTime = eventTimes[index];

	    if (eventTime > mostRecentEventTime) {
	      mostRecentEventTime = eventTime;
	    }

	    lanes &= ~lane;
	  }

	  return mostRecentEventTime;
	}

	function computeExpirationTime(lane, currentTime) {
	  switch (lane) {
	    case SyncLane:
	    case InputContinuousHydrationLane:
	    case InputContinuousLane:
	      // User interactions should expire slightly more quickly.
	      //
	      // NOTE: This is set to the corresponding constant as in Scheduler.js.
	      // When we made it larger, a product metric in www regressed, suggesting
	      // there's a user interaction that's being starved by a series of
	      // synchronous updates. If that theory is correct, the proper solution is
	      // to fix the starvation. However, this scenario supports the idea that
	      // expiration times are an important safeguard when starvation
	      // does happen.
	      return currentTime + 250;

	    case DefaultHydrationLane:
	    case DefaultLane:
	    case TransitionHydrationLane:
	    case TransitionLane1:
	    case TransitionLane2:
	    case TransitionLane3:
	    case TransitionLane4:
	    case TransitionLane5:
	    case TransitionLane6:
	    case TransitionLane7:
	    case TransitionLane8:
	    case TransitionLane9:
	    case TransitionLane10:
	    case TransitionLane11:
	    case TransitionLane12:
	    case TransitionLane13:
	    case TransitionLane14:
	    case TransitionLane15:
	    case TransitionLane16:
	      return currentTime + 5000;

	    case RetryLane1:
	    case RetryLane2:
	    case RetryLane3:
	    case RetryLane4:
	    case RetryLane5:
	      // TODO: Retries should be allowed to expire if they are CPU bound for
	      // too long, but when I made this change it caused a spike in browser
	      // crashes. There must be some other underlying bug; not super urgent but
	      // ideally should figure out why and fix it. Unfortunately we don't have
	      // a repro for the crashes, only detected via production metrics.
	      return NoTimestamp;

	    case SelectiveHydrationLane:
	    case IdleHydrationLane:
	    case IdleLane:
	    case OffscreenLane:
	      // Anything idle priority or lower should never expire.
	      return NoTimestamp;

	    default:
	      {
	        error('Should have found matching lanes. This is a bug in React.');
	      }

	      return NoTimestamp;
	  }
	}

	function markStarvedLanesAsExpired(root, currentTime) {
	  // TODO: This gets called every time we yield. We can optimize by storing
	  // the earliest expiration time on the root. Then use that to quickly bail out
	  // of this function.
	  var pendingLanes = root.pendingLanes;
	  var suspendedLanes = root.suspendedLanes;
	  var pingedLanes = root.pingedLanes;
	  var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
	  // expiration time. If so, we'll assume the update is being starved and mark
	  // it as expired to force it to finish.

	  var lanes = pendingLanes;

	  while (lanes > 0) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;
	    var expirationTime = expirationTimes[index];

	    if (expirationTime === NoTimestamp) {
	      // Found a pending lane with no expiration time. If it's not suspended, or
	      // if it's pinged, assume it's CPU-bound. Compute a new expiration time
	      // using the current time.
	      if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
	        // Assumes timestamps are monotonically increasing.
	        expirationTimes[index] = computeExpirationTime(lane, currentTime);
	      }
	    } else if (expirationTime <= currentTime) {
	      // This lane expired
	      root.expiredLanes |= lane;
	    }

	    lanes &= ~lane;
	  }
	} // This returns the highest priority pending lanes regardless of whether they
	// are suspended.

	function getHighestPriorityPendingLanes(root) {
	  return getHighestPriorityLanes(root.pendingLanes);
	}
	function getLanesToRetrySynchronouslyOnError(root) {
	  var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;

	  if (everythingButOffscreen !== NoLanes) {
	    return everythingButOffscreen;
	  }

	  if (everythingButOffscreen & OffscreenLane) {
	    return OffscreenLane;
	  }

	  return NoLanes;
	}
	function includesSyncLane(lanes) {
	  return (lanes & SyncLane) !== NoLanes;
	}
	function includesNonIdleWork(lanes) {
	  return (lanes & NonIdleLanes) !== NoLanes;
	}
	function includesOnlyRetries(lanes) {
	  return (lanes & RetryLanes) === lanes;
	}
	function includesOnlyNonUrgentLanes(lanes) {
	  var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
	  return (lanes & UrgentLanes) === NoLanes;
	}
	function includesOnlyTransitions(lanes) {
	  return (lanes & TransitionLanes) === lanes;
	}
	function includesBlockingLane(root, lanes) {

	  var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
	  return (lanes & SyncDefaultLanes) !== NoLanes;
	}
	function includesExpiredLane(root, lanes) {
	  // This is a separate check from includesBlockingLane because a lane can
	  // expire after a render has already started.
	  return (lanes & root.expiredLanes) !== NoLanes;
	}
	function isTransitionLane(lane) {
	  return (lane & TransitionLanes) !== NoLanes;
	}
	function claimNextTransitionLane() {
	  // Cycle through the lanes, assigning each new transition to the next lane.
	  // In most cases, this means every transition gets its own lane, until we
	  // run out of lanes and cycle back to the beginning.
	  var lane = nextTransitionLane;
	  nextTransitionLane <<= 1;

	  if ((nextTransitionLane & TransitionLanes) === NoLanes) {
	    nextTransitionLane = TransitionLane1;
	  }

	  return lane;
	}
	function claimNextRetryLane() {
	  var lane = nextRetryLane;
	  nextRetryLane <<= 1;

	  if ((nextRetryLane & RetryLanes) === NoLanes) {
	    nextRetryLane = RetryLane1;
	  }

	  return lane;
	}
	function getHighestPriorityLane(lanes) {
	  return lanes & -lanes;
	}
	function pickArbitraryLane(lanes) {
	  // This wrapper function gets inlined. Only exists so to communicate that it
	  // doesn't matter which bit is selected; you can pick any bit without
	  // affecting the algorithms where its used. Here I'm using
	  // getHighestPriorityLane because it requires the fewest operations.
	  return getHighestPriorityLane(lanes);
	}

	function pickArbitraryLaneIndex(lanes) {
	  return 31 - clz32(lanes);
	}

	function laneToIndex(lane) {
	  return pickArbitraryLaneIndex(lane);
	}

	function includesSomeLane(a, b) {
	  return (a & b) !== NoLanes;
	}
	function isSubsetOfLanes(set, subset) {
	  return (set & subset) === subset;
	}
	function mergeLanes(a, b) {
	  return a | b;
	}
	function removeLanes(set, subset) {
	  return set & ~subset;
	}
	function intersectLanes(a, b) {
	  return a & b;
	} // Seems redundant, but it changes the type from a single lane (used for
	// updates) to a group of lanes (used for flushing work).

	function laneToLanes(lane) {
	  return lane;
	}
	function higherPriorityLane(a, b) {
	  // This works because the bit ranges decrease in priority as you go left.
	  return a !== NoLane && a < b ? a : b;
	}
	function createLaneMap(initial) {
	  // Intentionally pushing one by one.
	  // https://v8.dev/blog/elements-kinds#avoid-creating-holes
	  var laneMap = [];

	  for (var i = 0; i < TotalLanes; i++) {
	    laneMap.push(initial);
	  }

	  return laneMap;
	}
	function markRootUpdated(root, updateLane, eventTime) {
	  root.pendingLanes |= updateLane; // If there are any suspended transitions, it's possible this new update
	  // could unblock them. Clear the suspended lanes so that we can try rendering
	  // them again.
	  //
	  // TODO: We really only need to unsuspend only lanes that are in the
	  // `subtreeLanes` of the updated fiber, or the update lanes of the return
	  // path. This would exclude suspended updates in an unrelated sibling tree,
	  // since there's no way for this update to unblock it.
	  //
	  // We don't do this if the incoming update is idle, because we never process
	  // idle updates until after all the regular updates have finished; there's no
	  // way it could unblock a transition.

	  if (updateLane !== IdleLane) {
	    root.suspendedLanes = NoLanes;
	    root.pingedLanes = NoLanes;
	  }

	  var eventTimes = root.eventTimes;
	  var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
	  // recent event, and we assume time is monotonically increasing.

	  eventTimes[index] = eventTime;
	}
	function markRootSuspended(root, suspendedLanes) {
	  root.suspendedLanes |= suspendedLanes;
	  root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.

	  var expirationTimes = root.expirationTimes;
	  var lanes = suspendedLanes;

	  while (lanes > 0) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;
	    expirationTimes[index] = NoTimestamp;
	    lanes &= ~lane;
	  }
	}
	function markRootPinged(root, pingedLanes, eventTime) {
	  root.pingedLanes |= root.suspendedLanes & pingedLanes;
	}
	function markRootFinished(root, remainingLanes) {
	  var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
	  root.pendingLanes = remainingLanes; // Let's try everything again

	  root.suspendedLanes = NoLanes;
	  root.pingedLanes = NoLanes;
	  root.expiredLanes &= remainingLanes;
	  root.mutableReadLanes &= remainingLanes;
	  root.entangledLanes &= remainingLanes;
	  var entanglements = root.entanglements;
	  var eventTimes = root.eventTimes;
	  var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work

	  var lanes = noLongerPendingLanes;

	  while (lanes > 0) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;
	    entanglements[index] = NoLanes;
	    eventTimes[index] = NoTimestamp;
	    expirationTimes[index] = NoTimestamp;
	    lanes &= ~lane;
	  }
	}
	function markRootEntangled(root, entangledLanes) {
	  // In addition to entangling each of the given lanes with each other, we also
	  // have to consider _transitive_ entanglements. For each lane that is already
	  // entangled with *any* of the given lanes, that lane is now transitively
	  // entangled with *all* the given lanes.
	  //
	  // Translated: If C is entangled with A, then entangling A with B also
	  // entangles C with B.
	  //
	  // If this is hard to grasp, it might help to intentionally break this
	  // function and look at the tests that fail in ReactTransition-test.js. Try
	  // commenting out one of the conditions below.
	  var rootEntangledLanes = root.entangledLanes |= entangledLanes;
	  var entanglements = root.entanglements;
	  var lanes = rootEntangledLanes;

	  while (lanes) {
	    var index = pickArbitraryLaneIndex(lanes);
	    var lane = 1 << index;

	    if ( // Is this one of the newly entangled lanes?
	    lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
	    entanglements[index] & entangledLanes) {
	      entanglements[index] |= entangledLanes;
	    }

	    lanes &= ~lane;
	  }
	}
	function getBumpedLaneForHydration(root, renderLanes) {
	  var renderLane = getHighestPriorityLane(renderLanes);
	  var lane;

	  switch (renderLane) {
	    case InputContinuousLane:
	      lane = InputContinuousHydrationLane;
	      break;

	    case DefaultLane:
	      lane = DefaultHydrationLane;
	      break;

	    case TransitionLane1:
	    case TransitionLane2:
	    case TransitionLane3:
	    case TransitionLane4:
	    case TransitionLane5:
	    case TransitionLane6:
	    case TransitionLane7:
	    case TransitionLane8:
	    case TransitionLane9:
	    case TransitionLane10:
	    case TransitionLane11:
	    case TransitionLane12:
	    case TransitionLane13:
	    case TransitionLane14:
	    case TransitionLane15:
	    case TransitionLane16:
	    case RetryLane1:
	    case RetryLane2:
	    case RetryLane3:
	    case RetryLane4:
	    case RetryLane5:
	      lane = TransitionHydrationLane;
	      break;

	    case IdleLane:
	      lane = IdleHydrationLane;
	      break;

	    default:
	      // Everything else is already either a hydration lane, or shouldn't
	      // be retried at a hydration lane.
	      lane = NoLane;
	      break;
	  } // Check if the lane we chose is suspended. If so, that indicates that we
	  // already attempted and failed to hydrate at that level. Also check if we're
	  // already rendering that lane, which is rare but could happen.


	  if ((lane & (root.suspendedLanes | renderLanes)) !== NoLane) {
	    // Give up trying to hydrate and fall back to client render.
	    return NoLane;
	  }

	  return lane;
	}
	function addFiberToLanesMap(root, fiber, lanes) {

	  if (!isDevToolsPresent) {
	    return;
	  }

	  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;

	  while (lanes > 0) {
	    var index = laneToIndex(lanes);
	    var lane = 1 << index;
	    var updaters = pendingUpdatersLaneMap[index];
	    updaters.add(fiber);
	    lanes &= ~lane;
	  }
	}
	function movePendingFibersToMemoized(root, lanes) {

	  if (!isDevToolsPresent) {
	    return;
	  }

	  var pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
	  var memoizedUpdaters = root.memoizedUpdaters;

	  while (lanes > 0) {
	    var index = laneToIndex(lanes);
	    var lane = 1 << index;
	    var updaters = pendingUpdatersLaneMap[index];

	    if (updaters.size > 0) {
	      updaters.forEach(function (fiber) {
	        var alternate = fiber.alternate;

	        if (alternate === null || !memoizedUpdaters.has(alternate)) {
	          memoizedUpdaters.add(fiber);
	        }
	      });
	      updaters.clear();
	    }

	    lanes &= ~lane;
	  }
	}
	function getTransitionsForLanes(root, lanes) {
	  {
	    return null;
	  }
	}

	var DiscreteEventPriority = SyncLane;
	var ContinuousEventPriority = InputContinuousLane;
	var DefaultEventPriority = DefaultLane;
	var IdleEventPriority = IdleLane;
	var currentUpdatePriority = NoLane;
	function getCurrentUpdatePriority() {
	  return currentUpdatePriority;
	}
	function setCurrentUpdatePriority(newPriority) {
	  currentUpdatePriority = newPriority;
	}
	function runWithPriority(priority, fn) {
	  var previousPriority = currentUpdatePriority;

	  try {
	    currentUpdatePriority = priority;
	    return fn();
	  } finally {
	    currentUpdatePriority = previousPriority;
	  }
	}
	function higherEventPriority(a, b) {
	  return a !== 0 && a < b ? a : b;
	}
	function lowerEventPriority(a, b) {
	  return a === 0 || a > b ? a : b;
	}
	function isHigherEventPriority(a, b) {
	  return a !== 0 && a < b;
	}
	function lanesToEventPriority(lanes) {
	  var lane = getHighestPriorityLane(lanes);

	  if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
	    return DiscreteEventPriority;
	  }

	  if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
	    return ContinuousEventPriority;
	  }

	  if (includesNonIdleWork(lane)) {
	    return DefaultEventPriority;
	  }

	  return IdleEventPriority;
	}

	// This module only exists as an ESM wrapper around the external CommonJS
	var scheduleCallback = Scheduler.unstable_scheduleCallback;
	var cancelCallback = Scheduler.unstable_cancelCallback;
	var shouldYield = Scheduler.unstable_shouldYield;
	var requestPaint = Scheduler.unstable_requestPaint;
	var now = Scheduler.unstable_now;
	var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
	var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
	var NormalPriority = Scheduler.unstable_NormalPriority;
	var IdlePriority = Scheduler.unstable_IdlePriority;
	// this doesn't actually exist on the scheduler, but it *does*
	// on scheduler/unstable_mock, which we'll need for internal testing
	var unstable_yieldValue = Scheduler.unstable_yieldValue;
	var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;

	var rendererID = null;
	var injectedHook = null;
	var injectedProfilingHooks = null;
	var hasLoggedError = false;
	var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
	function injectInternals(internals) {
	  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
	    // No DevTools
	    return false;
	  }

	  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

	  if (hook.isDisabled) {
	    // This isn't a real property on the hook, but it can be set to opt out
	    // of DevTools integration and associated warnings and logs.
	    // https://github.com/facebook/react/issues/3877
	    return true;
	  }

	  if (!hook.supportsFiber) {
	    {
	      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');
	    } // DevTools exists, even though it doesn't support Fiber.


	    return true;
	  }

	  try {
	    if (enableSchedulingProfiler) {
	      // Conditionally inject these hooks only if Timeline profiler is supported by this build.
	      // This gives DevTools a way to feature detect that isn't tied to version number
	      // (since profiling and timeline are controlled by different feature flags).
	      internals = assign({}, internals, {
	        getLaneLabelMap: getLaneLabelMap,
	        injectProfilingHooks: injectProfilingHooks
	      });
	    }

	    rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

	    injectedHook = hook;
	  } catch (err) {
	    // Catch all errors because it is unsafe to throw during initialization.
	    {
	      error('React instrumentation encountered an error: %s.', err);
	    }
	  }

	  if (hook.checkDCE) {
	    // This is the real DevTools.
	    return true;
	  } else {
	    // This is likely a hook installed by Fast Refresh runtime.
	    return false;
	  }
	}
	function onScheduleRoot(root, children) {
	  {
	    if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {
	      try {
	        injectedHook.onScheduleFiberRoot(rendererID, root, children);
	      } catch (err) {
	        if ( !hasLoggedError) {
	          hasLoggedError = true;

	          error('React instrumentation encountered an error: %s', err);
	        }
	      }
	    }
	  }
	}
	function onCommitRoot(root, eventPriority) {
	  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {
	    try {
	      var didError = (root.current.flags & DidCapture) === DidCapture;

	      if (enableProfilerTimer) {
	        var schedulerPriority;

	        switch (eventPriority) {
	          case DiscreteEventPriority:
	            schedulerPriority = ImmediatePriority;
	            break;

	          case ContinuousEventPriority:
	            schedulerPriority = UserBlockingPriority;
	            break;

	          case DefaultEventPriority:
	            schedulerPriority = NormalPriority;
	            break;

	          case IdleEventPriority:
	            schedulerPriority = IdlePriority;
	            break;

	          default:
	            schedulerPriority = NormalPriority;
	            break;
	        }

	        injectedHook.onCommitFiberRoot(rendererID, root, schedulerPriority, didError);
	      }
	    } catch (err) {
	      {
	        if (!hasLoggedError) {
	          hasLoggedError = true;

	          error('React instrumentation encountered an error: %s', err);
	        }
	      }
	    }
	  }
	}
	function onPostCommitRoot(root) {
	  if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === 'function') {
	    try {
	      injectedHook.onPostCommitFiberRoot(rendererID, root);
	    } catch (err) {
	      {
	        if (!hasLoggedError) {
	          hasLoggedError = true;

	          error('React instrumentation encountered an error: %s', err);
	        }
	      }
	    }
	  }
	}
	function onCommitUnmount(fiber) {
	  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {
	    try {
	      injectedHook.onCommitFiberUnmount(rendererID, fiber);
	    } catch (err) {
	      {
	        if (!hasLoggedError) {
	          hasLoggedError = true;

	          error('React instrumentation encountered an error: %s', err);
	        }
	      }
	    }
	  }
	}
	function setIsStrictModeForDevtools(newIsStrictMode) {
	  {
	    if (typeof unstable_yieldValue === 'function') {
	      // We're in a test because Scheduler.unstable_yieldValue only exists
	      // in SchedulerMock. To reduce the noise in strict mode tests,
	      // suppress warnings and disable scheduler yielding during the double render
	      unstable_setDisableYieldValue(newIsStrictMode);
	      setSuppressWarning(newIsStrictMode);
	    }

	    if (injectedHook && typeof injectedHook.setStrictMode === 'function') {
	      try {
	        injectedHook.setStrictMode(rendererID, newIsStrictMode);
	      } catch (err) {
	        {
	          if (!hasLoggedError) {
	            hasLoggedError = true;

	            error('React instrumentation encountered an error: %s', err);
	          }
	        }
	      }
	    }
	  }
	} // Profiler API hooks

	function injectProfilingHooks(profilingHooks) {
	  injectedProfilingHooks = profilingHooks;
	}

	function getLaneLabelMap() {
	  {
	    var map = new Map();
	    var lane = 1;

	    for (var index = 0; index < TotalLanes; index++) {
	      var label = getLabelForLane(lane);
	      map.set(lane, label);
	      lane *= 2;
	    }

	    return map;
	  }
	}

	function markCommitStarted(lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === 'function') {
	      injectedProfilingHooks.markCommitStarted(lanes);
	    }
	  }
	}
	function markCommitStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === 'function') {
	      injectedProfilingHooks.markCommitStopped();
	    }
	  }
	}
	function markComponentRenderStarted(fiber) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === 'function') {
	      injectedProfilingHooks.markComponentRenderStarted(fiber);
	    }
	  }
	}
	function markComponentRenderStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === 'function') {
	      injectedProfilingHooks.markComponentRenderStopped();
	    }
	  }
	}
	function markComponentPassiveEffectMountStarted(fiber) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === 'function') {
	      injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
	    }
	  }
	}
	function markComponentPassiveEffectMountStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === 'function') {
	      injectedProfilingHooks.markComponentPassiveEffectMountStopped();
	    }
	  }
	}
	function markComponentPassiveEffectUnmountStarted(fiber) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === 'function') {
	      injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
	    }
	  }
	}
	function markComponentPassiveEffectUnmountStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === 'function') {
	      injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
	    }
	  }
	}
	function markComponentLayoutEffectMountStarted(fiber) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === 'function') {
	      injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
	    }
	  }
	}
	function markComponentLayoutEffectMountStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === 'function') {
	      injectedProfilingHooks.markComponentLayoutEffectMountStopped();
	    }
	  }
	}
	function markComponentLayoutEffectUnmountStarted(fiber) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === 'function') {
	      injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
	    }
	  }
	}
	function markComponentLayoutEffectUnmountStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === 'function') {
	      injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
	    }
	  }
	}
	function markComponentErrored(fiber, thrownValue, lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === 'function') {
	      injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
	    }
	  }
	}
	function markComponentSuspended(fiber, wakeable, lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === 'function') {
	      injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
	    }
	  }
	}
	function markLayoutEffectsStarted(lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === 'function') {
	      injectedProfilingHooks.markLayoutEffectsStarted(lanes);
	    }
	  }
	}
	function markLayoutEffectsStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === 'function') {
	      injectedProfilingHooks.markLayoutEffectsStopped();
	    }
	  }
	}
	function markPassiveEffectsStarted(lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === 'function') {
	      injectedProfilingHooks.markPassiveEffectsStarted(lanes);
	    }
	  }
	}
	function markPassiveEffectsStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === 'function') {
	      injectedProfilingHooks.markPassiveEffectsStopped();
	    }
	  }
	}
	function markRenderStarted(lanes) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === 'function') {
	      injectedProfilingHooks.markRenderStarted(lanes);
	    }
	  }
	}
	function markRenderYielded() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === 'function') {
	      injectedProfilingHooks.markRenderYielded();
	    }
	  }
	}
	function markRenderStopped() {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === 'function') {
	      injectedProfilingHooks.markRenderStopped();
	    }
	  }
	}
	function markRenderScheduled(lane) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === 'function') {
	      injectedProfilingHooks.markRenderScheduled(lane);
	    }
	  }
	}
	function markForceUpdateScheduled(fiber, lane) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === 'function') {
	      injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
	    }
	  }
	}
	function markStateUpdateScheduled(fiber, lane) {
	  {
	    if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === 'function') {
	      injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
	    }
	  }
	}

	/**
	 * inlined Object.is polyfill to avoid requiring consumers ship their own
	 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	 */
	function is(x, y) {
	  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
	  ;
	}

	var objectIs = typeof Object.is === 'function' ? Object.is : is;

	var syncQueue = null;
	var includesLegacySyncCallbacks = false;
	var isFlushingSyncQueue = false;
	function scheduleSyncCallback(callback) {
	  // Push this callback into an internal queue. We'll flush these either in
	  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
	  if (syncQueue === null) {
	    syncQueue = [callback];
	  } else {
	    // Push onto existing queue. Don't need to schedule a callback because
	    // we already scheduled one when we created the queue.
	    syncQueue.push(callback);
	  }
	}
	function scheduleLegacySyncCallback(callback) {
	  includesLegacySyncCallbacks = true;
	  scheduleSyncCallback(callback);
	}
	function flushSyncCallbacksOnlyInLegacyMode() {
	  // Only flushes the queue if there's a legacy sync callback scheduled.
	  // TODO: There's only a single type of callback: performSyncOnWorkOnRoot. So
	  // it might make more sense for the queue to be a list of roots instead of a
	  // list of generic callbacks. Then we can have two: one for legacy roots, one
	  // for concurrent roots. And this method would only flush the legacy ones.
	  if (includesLegacySyncCallbacks) {
	    flushSyncCallbacks();
	  }
	}
	function flushSyncCallbacks() {
	  if (!isFlushingSyncQueue && syncQueue !== null) {
	    // Prevent re-entrance.
	    isFlushingSyncQueue = true;
	    var i = 0;
	    var previousUpdatePriority = getCurrentUpdatePriority();

	    try {
	      var isSync = true;
	      var queue = syncQueue; // TODO: Is this necessary anymore? The only user code that runs in this
	      // queue is in the render or commit phases.

	      setCurrentUpdatePriority(DiscreteEventPriority);

	      for (; i < queue.length; i++) {
	        var callback = queue[i];

	        do {
	          callback = callback(isSync);
	        } while (callback !== null);
	      }

	      syncQueue = null;
	      includesLegacySyncCallbacks = false;
	    } catch (error) {
	      // If something throws, leave the remaining callbacks on the queue.
	      if (syncQueue !== null) {
	        syncQueue = syncQueue.slice(i + 1);
	      } // Resume flushing in the next tick


	      scheduleCallback(ImmediatePriority, flushSyncCallbacks);
	      throw error;
	    } finally {
	      setCurrentUpdatePriority(previousUpdatePriority);
	      isFlushingSyncQueue = false;
	    }
	  }

	  return null;
	}

	// This is imported by the event replaying implementation in React DOM. It's
	// in a separate file to break a circular dependency between the renderer and
	// the reconciler.
	function isRootDehydrated(root) {
	  var currentState = root.current.memoizedState;
	  return currentState.isDehydrated;
	}

	// TODO: Use the unified fiber stack module instead of this local one?
	// Intentionally not using it yet to derisk the initial implementation, because
	// the way we push/pop these values is a bit unusual. If there's a mistake, I'd
	// rather the ids be wrong than crash the whole reconciler.
	var forkStack = [];
	var forkStackIndex = 0;
	var treeForkProvider = null;
	var treeForkCount = 0;
	var idStack = [];
	var idStackIndex = 0;
	var treeContextProvider = null;
	var treeContextId = 1;
	var treeContextOverflow = '';
	function isForkedChild(workInProgress) {
	  warnIfNotHydrating();
	  return (workInProgress.flags & Forked) !== NoFlags;
	}
	function getForksAtLevel(workInProgress) {
	  warnIfNotHydrating();
	  return treeForkCount;
	}
	function getTreeId() {
	  var overflow = treeContextOverflow;
	  var idWithLeadingBit = treeContextId;
	  var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
	  return id.toString(32) + overflow;
	}
	function pushTreeFork(workInProgress, totalChildren) {
	  // This is called right after we reconcile an array (or iterator) of child
	  // fibers, because that's the only place where we know how many children in
	  // the whole set without doing extra work later, or storing addtional
	  // information on the fiber.
	  //
	  // That's why this function is separate from pushTreeId — it's called during
	  // the render phase of the fork parent, not the child, which is where we push
	  // the other context values.
	  //
	  // In the Fizz implementation this is much simpler because the child is
	  // rendered in the same callstack as the parent.
	  //
	  // It might be better to just add a `forks` field to the Fiber type. It would
	  // make this module simpler.
	  warnIfNotHydrating();
	  forkStack[forkStackIndex++] = treeForkCount;
	  forkStack[forkStackIndex++] = treeForkProvider;
	  treeForkProvider = workInProgress;
	  treeForkCount = totalChildren;
	}
	function pushTreeId(workInProgress, totalChildren, index) {
	  warnIfNotHydrating();
	  idStack[idStackIndex++] = treeContextId;
	  idStack[idStackIndex++] = treeContextOverflow;
	  idStack[idStackIndex++] = treeContextProvider;
	  treeContextProvider = workInProgress;
	  var baseIdWithLeadingBit = treeContextId;
	  var baseOverflow = treeContextOverflow; // The leftmost 1 marks the end of the sequence, non-inclusive. It's not part
	  // of the id; we use it to account for leading 0s.

	  var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
	  var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
	  var slot = index + 1;
	  var length = getBitLength(totalChildren) + baseLength; // 30 is the max length we can store without overflowing, taking into
	  // consideration the leading 1 we use to mark the end of the sequence.

	  if (length > 30) {
	    // We overflowed the bitwise-safe range. Fall back to slower algorithm.
	    // This branch assumes the length of the base id is greater than 5; it won't
	    // work for smaller ids, because you need 5 bits per character.
	    //
	    // We encode the id in multiple steps: first the base id, then the
	    // remaining digits.
	    //
	    // Each 5 bit sequence corresponds to a single base 32 character. So for
	    // example, if the current id is 23 bits long, we can convert 20 of those
	    // bits into a string of 4 characters, with 3 bits left over.
	    //
	    // First calculate how many bits in the base id represent a complete
	    // sequence of characters.
	    var numberOfOverflowBits = baseLength - baseLength % 5; // Then create a bitmask that selects only those bits.

	    var newOverflowBits = (1 << numberOfOverflowBits) - 1; // Select the bits, and convert them to a base 32 string.

	    var newOverflow = (baseId & newOverflowBits).toString(32); // Now we can remove those bits from the base id.

	    var restOfBaseId = baseId >> numberOfOverflowBits;
	    var restOfBaseLength = baseLength - numberOfOverflowBits; // Finally, encode the rest of the bits using the normal algorithm. Because
	    // we made more room, this time it won't overflow.

	    var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
	    var restOfNewBits = slot << restOfBaseLength;
	    var id = restOfNewBits | restOfBaseId;
	    var overflow = newOverflow + baseOverflow;
	    treeContextId = 1 << restOfLength | id;
	    treeContextOverflow = overflow;
	  } else {
	    // Normal path
	    var newBits = slot << baseLength;

	    var _id = newBits | baseId;

	    var _overflow = baseOverflow;
	    treeContextId = 1 << length | _id;
	    treeContextOverflow = _overflow;
	  }
	}
	function pushMaterializedTreeId(workInProgress) {
	  warnIfNotHydrating(); // This component materialized an id. This will affect any ids that appear
	  // in its children.

	  var returnFiber = workInProgress.return;

	  if (returnFiber !== null) {
	    var numberOfForks = 1;
	    var slotIndex = 0;
	    pushTreeFork(workInProgress, numberOfForks);
	    pushTreeId(workInProgress, numberOfForks, slotIndex);
	  }
	}

	function getBitLength(number) {
	  return 32 - clz32(number);
	}

	function getLeadingBit(id) {
	  return 1 << getBitLength(id) - 1;
	}

	function popTreeContext(workInProgress) {
	  // Restore the previous values.
	  // This is a bit more complicated than other context-like modules in Fiber
	  // because the same Fiber may appear on the stack multiple times and for
	  // different reasons. We have to keep popping until the work-in-progress is
	  // no longer at the top of the stack.
	  while (workInProgress === treeForkProvider) {
	    treeForkProvider = forkStack[--forkStackIndex];
	    forkStack[forkStackIndex] = null;
	    treeForkCount = forkStack[--forkStackIndex];
	    forkStack[forkStackIndex] = null;
	  }

	  while (workInProgress === treeContextProvider) {
	    treeContextProvider = idStack[--idStackIndex];
	    idStack[idStackIndex] = null;
	    treeContextOverflow = idStack[--idStackIndex];
	    idStack[idStackIndex] = null;
	    treeContextId = idStack[--idStackIndex];
	    idStack[idStackIndex] = null;
	  }
	}
	function getSuspendedTreeContext() {
	  warnIfNotHydrating();

	  if (treeContextProvider !== null) {
	    return {
	      id: treeContextId,
	      overflow: treeContextOverflow
	    };
	  } else {
	    return null;
	  }
	}
	function restoreSuspendedTreeContext(workInProgress, suspendedContext) {
	  warnIfNotHydrating();
	  idStack[idStackIndex++] = treeContextId;
	  idStack[idStackIndex++] = treeContextOverflow;
	  idStack[idStackIndex++] = treeContextProvider;
	  treeContextId = suspendedContext.id;
	  treeContextOverflow = suspendedContext.overflow;
	  treeContextProvider = workInProgress;
	}

	function warnIfNotHydrating() {
	  {
	    if (!getIsHydrating()) {
	      error('Expected to be hydrating. This is a bug in React. Please file ' + 'an issue.');
	    }
	  }
	}

	// This may have been an insertion or a hydration.

	var hydrationParentFiber = null;
	var nextHydratableInstance = null;
	var isHydrating = false; // This flag allows for warning supression when we expect there to be mismatches
	// due to earlier mismatches or a suspended fiber.

	var didSuspendOrErrorDEV = false; // Hydration errors that were thrown inside this boundary

	var hydrationErrors = null;

	function warnIfHydrating() {
	  {
	    if (isHydrating) {
	      error('We should not be hydrating here. This is a bug in React. Please file a bug.');
	    }
	  }
	}

	function markDidThrowWhileHydratingDEV() {
	  {
	    didSuspendOrErrorDEV = true;
	  }
	}
	function didSuspendOrErrorWhileHydratingDEV() {
	  {
	    return didSuspendOrErrorDEV;
	  }
	}

	function enterHydrationState(fiber) {
	  if (!supportsHydration) {
	    return false;
	  }

	  var parentInstance = fiber.stateNode.containerInfo;
	  nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
	  hydrationParentFiber = fiber;
	  isHydrating = true;
	  hydrationErrors = null;
	  didSuspendOrErrorDEV = false;
	  return true;
	}

	function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
	  if (!supportsHydration) {
	    return false;
	  }

	  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
	  hydrationParentFiber = fiber;
	  isHydrating = true;
	  hydrationErrors = null;
	  didSuspendOrErrorDEV = false;

	  if (treeContext !== null) {
	    restoreSuspendedTreeContext(fiber, treeContext);
	  }

	  return true;
	}

	function warnUnhydratedInstance(returnFiber, instance) {
	  {
	    switch (returnFiber.tag) {
	      case HostRoot:
	        {
	          didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
	          break;
	        }

	      case HostComponent:
	        {
	          var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
	          didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance, // TODO: Delete this argument when we remove the legacy root API.
	          isConcurrentMode);
	          break;
	        }

	      case SuspenseComponent:
	        {
	          var suspenseState = returnFiber.memoizedState;
	          if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
	          break;
	        }
	    }
	  }
	}

	function deleteHydratableInstance(returnFiber, instance) {
	  warnUnhydratedInstance(returnFiber, instance);
	  var childToDelete = createFiberFromHostInstanceForDeletion();
	  childToDelete.stateNode = instance;
	  childToDelete.return = returnFiber;
	  var deletions = returnFiber.deletions;

	  if (deletions === null) {
	    returnFiber.deletions = [childToDelete];
	    returnFiber.flags |= ChildDeletion;
	  } else {
	    deletions.push(childToDelete);
	  }
	}

	function warnNonhydratedInstance(returnFiber, fiber) {
	  {
	    if (didSuspendOrErrorDEV) {
	      // Inside a boundary that already suspended. We're currently rendering the
	      // siblings of a suspended node. The mismatch may be due to the missing
	      // data, so it's probably a false positive.
	      return;
	    }

	    switch (returnFiber.tag) {
	      case HostRoot:
	        {
	          var parentContainer = returnFiber.stateNode.containerInfo;

	          switch (fiber.tag) {
	            case HostComponent:
	              var type = fiber.type;
	              var props = fiber.pendingProps;
	              didNotFindHydratableInstanceWithinContainer(parentContainer, type, props);
	              break;

	            case HostText:
	              var text = fiber.pendingProps;
	              didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
	              break;

	            case SuspenseComponent:
	              didNotFindHydratableSuspenseInstanceWithinContainer(parentContainer);
	              break;
	          }

	          break;
	        }

	      case HostComponent:
	        {
	          var parentType = returnFiber.type;
	          var parentProps = returnFiber.memoizedProps;
	          var parentInstance = returnFiber.stateNode;

	          switch (fiber.tag) {
	            case HostComponent:
	              {
	                var _type = fiber.type;
	                var _props = fiber.pendingProps;
	                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
	                didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type, _props, // TODO: Delete this argument when we remove the legacy root API.
	                isConcurrentMode);
	                break;
	              }

	            case HostText:
	              {
	                var _text = fiber.pendingProps;

	                var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;

	                didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text, // TODO: Delete this argument when we remove the legacy root API.
	                _isConcurrentMode);
	                break;
	              }

	            case SuspenseComponent:
	              {
	                didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance);
	                break;
	              }
	          }

	          break;
	        }

	      case SuspenseComponent:
	        {
	          var suspenseState = returnFiber.memoizedState;
	          var _parentInstance = suspenseState.dehydrated;
	          if (_parentInstance !== null) switch (fiber.tag) {
	            case HostComponent:
	              var _type2 = fiber.type;
	              var _props2 = fiber.pendingProps;
	              didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2, _props2);
	              break;

	            case HostText:
	              var _text2 = fiber.pendingProps;
	              didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
	              break;

	            case SuspenseComponent:
	              didNotFindHydratableSuspenseInstanceWithinSuspenseInstance(_parentInstance);
	              break;
	          }
	          break;
	        }

	      default:
	        return;
	    }
	  }
	}

	function insertNonHydratedInstance(returnFiber, fiber) {
	  fiber.flags = fiber.flags & ~Hydrating | Placement;
	  warnNonhydratedInstance(returnFiber, fiber);
	}

	function tryHydrate(fiber, nextInstance) {
	  switch (fiber.tag) {
	    case HostComponent:
	      {
	        var type = fiber.type;
	        var props = fiber.pendingProps;
	        var instance = canHydrateInstance(nextInstance, type, props);

	        if (instance !== null) {
	          fiber.stateNode = instance;
	          hydrationParentFiber = fiber;
	          nextHydratableInstance = getFirstHydratableChild(instance);
	          return true;
	        }

	        return false;
	      }

	    case HostText:
	      {
	        var text = fiber.pendingProps;
	        var textInstance = canHydrateTextInstance(nextInstance, text);

	        if (textInstance !== null) {
	          fiber.stateNode = textInstance;
	          hydrationParentFiber = fiber; // Text Instances don't have children so there's nothing to hydrate.

	          nextHydratableInstance = null;
	          return true;
	        }

	        return false;
	      }

	    case SuspenseComponent:
	      {
	        var suspenseInstance = canHydrateSuspenseInstance(nextInstance);

	        if (suspenseInstance !== null) {
	          var suspenseState = {
	            dehydrated: suspenseInstance,
	            treeContext: getSuspendedTreeContext(),
	            retryLane: OffscreenLane
	          };
	          fiber.memoizedState = suspenseState; // Store the dehydrated fragment as a child fiber.
	          // This simplifies the code for getHostSibling and deleting nodes,
	          // since it doesn't have to consider all Suspense boundaries and
	          // check if they're dehydrated ones or not.

	          var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
	          dehydratedFragment.return = fiber;
	          fiber.child = dehydratedFragment;
	          hydrationParentFiber = fiber; // While a Suspense Instance does have children, we won't step into
	          // it during the first pass. Instead, we'll reenter it later.

	          nextHydratableInstance = null;
	          return true;
	        }

	        return false;
	      }

	    default:
	      return false;
	  }
	}

	function shouldClientRenderOnMismatch(fiber) {
	  return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
	}

	function throwOnHydrationMismatch(fiber) {
	  throw new Error('Hydration failed because the initial UI does not match what was ' + 'rendered on the server.');
	}

	function tryToClaimNextHydratableInstance(fiber) {
	  if (!isHydrating) {
	    return;
	  }

	  var nextInstance = nextHydratableInstance;

	  if (!nextInstance) {
	    if (shouldClientRenderOnMismatch(fiber)) {
	      warnNonhydratedInstance(hydrationParentFiber, fiber);
	      throwOnHydrationMismatch();
	    } // Nothing to hydrate. Make it an insertion.


	    insertNonHydratedInstance(hydrationParentFiber, fiber);
	    isHydrating = false;
	    hydrationParentFiber = fiber;
	    return;
	  }

	  var firstAttemptedInstance = nextInstance;

	  if (!tryHydrate(fiber, nextInstance)) {
	    if (shouldClientRenderOnMismatch(fiber)) {
	      warnNonhydratedInstance(hydrationParentFiber, fiber);
	      throwOnHydrationMismatch();
	    } // If we can't hydrate this instance let's try the next one.
	    // We use this as a heuristic. It's based on intuition and not data so it
	    // might be flawed or unnecessary.


	    nextInstance = getNextHydratableSibling(firstAttemptedInstance);
	    var prevHydrationParentFiber = hydrationParentFiber;

	    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
	      // Nothing to hydrate. Make it an insertion.
	      insertNonHydratedInstance(hydrationParentFiber, fiber);
	      isHydrating = false;
	      hydrationParentFiber = fiber;
	      return;
	    } // We matched the next one, we'll now assume that the first one was
	    // superfluous and we'll delete it. Since we can't eagerly delete it
	    // we'll have to schedule a deletion. To do that, this node needs a dummy
	    // fiber associated with it.


	    deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
	  }
	}

	function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
	  if (!supportsHydration) {
	    throw new Error('Expected prepareToHydrateHostInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	  }

	  var instance = fiber.stateNode;
	  var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
	  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev); // TODO: Type this specific to this type of component.

	  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
	  // is a new ref we mark this as an update.

	  if (updatePayload !== null) {
	    return true;
	  }

	  return false;
	}

	function prepareToHydrateHostTextInstance(fiber) {
	  if (!supportsHydration) {
	    throw new Error('Expected prepareToHydrateHostTextInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	  }

	  var textInstance = fiber.stateNode;
	  var textContent = fiber.memoizedProps;
	  var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
	  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber, shouldWarnIfMismatchDev);

	  if (shouldUpdate) {
	    // We assume that prepareToHydrateHostTextInstance is called in a context where the
	    // hydration parent is the parent host component of this host text.
	    var returnFiber = hydrationParentFiber;

	    if (returnFiber !== null) {
	      switch (returnFiber.tag) {
	        case HostRoot:
	          {
	            var parentContainer = returnFiber.stateNode.containerInfo;
	            var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
	            didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.
	            isConcurrentMode);
	            break;
	          }

	        case HostComponent:
	          {
	            var parentType = returnFiber.type;
	            var parentProps = returnFiber.memoizedProps;
	            var parentInstance = returnFiber.stateNode;

	            var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;

	            didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent, // TODO: Delete this argument when we remove the legacy root API.
	            _isConcurrentMode2);
	            break;
	          }
	      }
	    }
	  }

	  return shouldUpdate;
	}

	function prepareToHydrateHostSuspenseInstance(fiber) {
	  if (!supportsHydration) {
	    throw new Error('Expected prepareToHydrateHostSuspenseInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	  }

	  var suspenseState = fiber.memoizedState;
	  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

	  if (!suspenseInstance) {
	    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	  }

	  hydrateSuspenseInstance(suspenseInstance, fiber);
	}

	function skipPastDehydratedSuspenseInstance(fiber) {
	  if (!supportsHydration) {
	    throw new Error('Expected skipPastDehydratedSuspenseInstance() to never be called. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	  }

	  var suspenseState = fiber.memoizedState;
	  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

	  if (!suspenseInstance) {
	    throw new Error('Expected to have a hydrated suspense instance. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	  }

	  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
	}

	function popToNextHostParent(fiber) {
	  var parent = fiber.return;

	  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
	    parent = parent.return;
	  }

	  hydrationParentFiber = parent;
	}

	function popHydrationState(fiber) {
	  if (!supportsHydration) {
	    return false;
	  }

	  if (fiber !== hydrationParentFiber) {
	    // We're deeper than the current hydration context, inside an inserted
	    // tree.
	    return false;
	  }

	  if (!isHydrating) {
	    // If we're not currently hydrating but we're in a hydration context, then
	    // we were an insertion and now need to pop up reenter hydration of our
	    // siblings.
	    popToNextHostParent(fiber);
	    isHydrating = true;
	    return false;
	  } // If we have any remaining hydratable nodes, we need to delete them now.
	  // We only do this deeper than head and body since they tend to have random
	  // other nodes in them. We also ignore components with pure text content in
	  // side of them. We also don't delete anything inside the root container.


	  if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
	    var nextInstance = nextHydratableInstance;

	    if (nextInstance) {
	      if (shouldClientRenderOnMismatch(fiber)) {
	        warnIfUnhydratedTailNodes(fiber);
	        throwOnHydrationMismatch();
	      } else {
	        while (nextInstance) {
	          deleteHydratableInstance(fiber, nextInstance);
	          nextInstance = getNextHydratableSibling(nextInstance);
	        }
	      }
	    }
	  }

	  popToNextHostParent(fiber);

	  if (fiber.tag === SuspenseComponent) {
	    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
	  } else {
	    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
	  }

	  return true;
	}

	function hasUnhydratedTailNodes() {
	  return isHydrating && nextHydratableInstance !== null;
	}

	function warnIfUnhydratedTailNodes(fiber) {
	  var nextInstance = nextHydratableInstance;

	  while (nextInstance) {
	    warnUnhydratedInstance(fiber, nextInstance);
	    nextInstance = getNextHydratableSibling(nextInstance);
	  }
	}

	function resetHydrationState() {
	  if (!supportsHydration) {
	    return;
	  }

	  hydrationParentFiber = null;
	  nextHydratableInstance = null;
	  isHydrating = false;
	  didSuspendOrErrorDEV = false;
	}

	function upgradeHydrationErrorsToRecoverable() {
	  if (hydrationErrors !== null) {
	    // Successfully completed a forced client render. The errors that occurred
	    // during the hydration attempt are now recovered. We will log them in
	    // commit phase, once the entire tree has finished.
	    queueRecoverableErrors(hydrationErrors);
	    hydrationErrors = null;
	  }
	}

	function getIsHydrating() {
	  return isHydrating;
	}

	function queueHydrationError(error) {
	  if (hydrationErrors === null) {
	    hydrationErrors = [error];
	  } else {
	    hydrationErrors.push(error);
	  }
	}

	var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
	var NoTransition = null;
	function requestCurrentTransition() {
	  return ReactCurrentBatchConfig.transition;
	}

	/**
	 * Performs equality by iterating through keys on an object and returning false
	 * when any key has values which are not strictly equal between the arguments.
	 * Returns true when the values of all keys are strictly equal.
	 */

	function shallowEqual(objA, objB) {
	  if (objectIs(objA, objB)) {
	    return true;
	  }

	  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);

	  if (keysA.length !== keysB.length) {
	    return false;
	  } // Test for A's keys different from B.


	  for (var i = 0; i < keysA.length; i++) {
	    var currentKey = keysA[i];

	    if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
	      return false;
	    }
	  }

	  return true;
	}

	function describeFiber(fiber) {
	  fiber._debugOwner ? fiber._debugOwner.type : null ;
	  fiber._debugSource ;

	  switch (fiber.tag) {
	    case HostComponent:
	      return describeBuiltInComponentFrame(fiber.type);

	    case LazyComponent:
	      return describeBuiltInComponentFrame('Lazy');

	    case SuspenseComponent:
	      return describeBuiltInComponentFrame('Suspense');

	    case SuspenseListComponent:
	      return describeBuiltInComponentFrame('SuspenseList');

	    case FunctionComponent:
	    case IndeterminateComponent:
	    case SimpleMemoComponent:
	      return describeFunctionComponentFrame(fiber.type);

	    case ForwardRef:
	      return describeFunctionComponentFrame(fiber.type.render);

	    case ClassComponent:
	      return describeClassComponentFrame(fiber.type);

	    default:
	      return '';
	  }
	}

	function getStackByFiberInDevAndProd(workInProgress) {
	  try {
	    var info = '';
	    var node = workInProgress;

	    do {
	      info += describeFiber(node);
	      node = node.return;
	    } while (node);

	    return info;
	  } catch (x) {
	    return '\nError generating stack: ' + x.message + '\n' + x.stack;
	  }
	}

	var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
	var current = null;
	var isRendering = false;
	function getCurrentFiberOwnerNameInDevOrNull() {
	  {
	    if (current === null) {
	      return null;
	    }

	    var owner = current._debugOwner;

	    if (owner !== null && typeof owner !== 'undefined') {
	      return getComponentNameFromFiber(owner);
	    }
	  }

	  return null;
	}

	function getCurrentFiberStackInDev() {
	  {
	    if (current === null) {
	      return '';
	    } // Safe because if current fiber exists, we are reconciling,
	    // and it is guaranteed to be the work-in-progress version.


	    return getStackByFiberInDevAndProd(current);
	  }
	}

	function resetCurrentFiber() {
	  {
	    ReactDebugCurrentFrame$1.getCurrentStack = null;
	    current = null;
	    isRendering = false;
	  }
	}
	function setCurrentFiber(fiber) {
	  {
	    ReactDebugCurrentFrame$1.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
	    current = fiber;
	    isRendering = false;
	  }
	}
	function getCurrentFiber() {
	  {
	    return current;
	  }
	}
	function setIsRendering(rendering) {
	  {
	    isRendering = rendering;
	  }
	}

	var ReactStrictModeWarnings = {
	  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
	  flushPendingUnsafeLifecycleWarnings: function () {},
	  recordLegacyContextWarning: function (fiber, instance) {},
	  flushLegacyContextWarning: function () {},
	  discardPendingWarnings: function () {}
	};

	{
	  var findStrictRoot = function (fiber) {
	    var maybeStrictRoot = null;
	    var node = fiber;

	    while (node !== null) {
	      if (node.mode & StrictLegacyMode) {
	        maybeStrictRoot = node;
	      }

	      node = node.return;
	    }

	    return maybeStrictRoot;
	  };

	  var setToSortedString = function (set) {
	    var array = [];
	    set.forEach(function (value) {
	      array.push(value);
	    });
	    return array.sort().join(', ');
	  };

	  var pendingComponentWillMountWarnings = [];
	  var pendingUNSAFE_ComponentWillMountWarnings = [];
	  var pendingComponentWillReceivePropsWarnings = [];
	  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	  var pendingComponentWillUpdateWarnings = [];
	  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

	  var didWarnAboutUnsafeLifecycles = new Set();

	  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
	    // Dedupe strategy: Warn once per component.
	    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
	      return;
	    }

	    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
	    instance.componentWillMount.__suppressDeprecationWarning !== true) {
	      pendingComponentWillMountWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === 'function') {
	      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
	    }

	    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	      pendingComponentWillReceivePropsWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
	    }

	    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	      pendingComponentWillUpdateWarnings.push(fiber);
	    }

	    if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
	      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
	    // We do an initial pass to gather component names
	    var componentWillMountUniqueNames = new Set();

	    if (pendingComponentWillMountWarnings.length > 0) {
	      pendingComponentWillMountWarnings.forEach(function (fiber) {
	        componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillMountWarnings = [];
	    }

	    var UNSAFE_componentWillMountUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillMountWarnings = [];
	    }

	    var componentWillReceivePropsUniqueNames = new Set();

	    if (pendingComponentWillReceivePropsWarnings.length > 0) {
	      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
	        componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillReceivePropsWarnings = [];
	    }

	    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	    }

	    var componentWillUpdateUniqueNames = new Set();

	    if (pendingComponentWillUpdateWarnings.length > 0) {
	      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
	        componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingComponentWillUpdateWarnings = [];
	    }

	    var UNSAFE_componentWillUpdateUniqueNames = new Set();

	    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
	      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
	        UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutUnsafeLifecycles.add(fiber.type);
	      });
	      pendingUNSAFE_ComponentWillUpdateWarnings = [];
	    } // Finally, we flush all the warnings
	    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


	    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
	      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

	      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
	    }

	    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
	      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

	      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
	    }

	    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
	      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

	      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
	    }

	    if (componentWillMountUniqueNames.size > 0) {
	      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

	      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
	    }

	    if (componentWillReceivePropsUniqueNames.size > 0) {
	      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

	      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
	    }

	    if (componentWillUpdateUniqueNames.size > 0) {
	      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

	      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
	    }
	  };

	  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

	  var didWarnAboutLegacyContext = new Set();

	  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
	    var strictRoot = findStrictRoot(fiber);

	    if (strictRoot === null) {
	      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

	      return;
	    } // Dedup strategy: Warn once per component.


	    if (didWarnAboutLegacyContext.has(fiber.type)) {
	      return;
	    }

	    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

	    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
	      if (warningsForRoot === undefined) {
	        warningsForRoot = [];
	        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
	      }

	      warningsForRoot.push(fiber);
	    }
	  };

	  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
	    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
	      if (fiberArray.length === 0) {
	        return;
	      }

	      var firstFiber = fiberArray[0];
	      var uniqueNames = new Set();
	      fiberArray.forEach(function (fiber) {
	        uniqueNames.add(getComponentNameFromFiber(fiber) || 'Component');
	        didWarnAboutLegacyContext.add(fiber.type);
	      });
	      var sortedNames = setToSortedString(uniqueNames);

	      try {
	        setCurrentFiber(firstFiber);

	        error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);
	      } finally {
	        resetCurrentFiber();
	      }
	    });
	  };

	  ReactStrictModeWarnings.discardPendingWarnings = function () {
	    pendingComponentWillMountWarnings = [];
	    pendingUNSAFE_ComponentWillMountWarnings = [];
	    pendingComponentWillReceivePropsWarnings = [];
	    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
	    pendingComponentWillUpdateWarnings = [];
	    pendingUNSAFE_ComponentWillUpdateWarnings = [];
	    pendingLegacyContextWarning = new Map();
	  };
	}

	/*
	 * The `'' + value` pattern (used in in perf-sensitive code) throws for Symbol
	 * and Temporal.* types. See https://github.com/facebook/react/pull/22064.
	 *
	 * The functions in this module will throw an easier-to-understand,
	 * easier-to-debug exception with a clear errors message message explaining the
	 * problem. (Instead of a confusing exception thrown inside the implementation
	 * of the `value` object).
	 */
	// $FlowFixMe only called in DEV, so void return is not possible.
	function typeName(value) {
	  {
	    // toStringTag is needed for namespaced types like Temporal.Instant
	    var hasToStringTag = typeof Symbol === 'function' && Symbol.toStringTag;
	    var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || 'Object';
	    return type;
	  }
	} // $FlowFixMe only called in DEV, so void return is not possible.


	function willCoercionThrow(value) {
	  {
	    try {
	      testStringCoercion(value);
	      return false;
	    } catch (e) {
	      return true;
	    }
	  }
	}

	function testStringCoercion(value) {
	  // If you ended up here by following an exception call stack, here's what's
	  // happened: you supplied an object or symbol value to React (as a prop, key,
	  // DOM attribute, CSS property, string ref, etc.) and when React tried to
	  // coerce it to a string using `'' + value`, an exception was thrown.
	  //
	  // The most common types that will cause this exception are `Symbol` instances
	  // and Temporal objects like `Temporal.Instant`. But any object that has a
	  // `valueOf` or `[Symbol.toPrimitive]` method that throws will also cause this
	  // exception. (Library authors do this to prevent users from using built-in
	  // numeric operators like `+` or comparison operators like `>=` because custom
	  // methods are needed to perform accurate arithmetic or comparison.)
	  //
	  // To fix the problem, coerce this object or symbol value to a string before
	  // passing it to React. The most reliable way is usually `String(value)`.
	  //
	  // To find which value is throwing, check the browser or debugger console.
	  // Before this exception was thrown, there should be `console.error` output
	  // that shows the type (Symbol, Temporal.PlainDate, etc.) that caused the
	  // problem and how that type was used: key, atrribute, input value prop, etc.
	  // In most cases, this console output also shows the component and its
	  // ancestor components where the exception happened.
	  //
	  // eslint-disable-next-line react-internal/safe-string-coercion
	  return '' + value;
	}
	function checkKeyStringCoercion(value) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided key is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}
	function checkPropStringCoercion(value, propName) {
	  {
	    if (willCoercionThrow(value)) {
	      error('The provided `%s` prop is an unsupported type %s.' + ' This value must be coerced to a string before before using it here.', propName, typeName(value));

	      return testStringCoercion(value); // throw (to help callers find troubleshooting comments)
	    }
	  }
	}

	var didWarnAboutMaps;
	var didWarnAboutGenerators;
	var didWarnAboutStringRefs;
	var ownerHasKeyUseWarning;
	var ownerHasFunctionTypeWarning;

	var warnForMissingKey = function (child, returnFiber) {};

	{
	  didWarnAboutMaps = false;
	  didWarnAboutGenerators = false;
	  didWarnAboutStringRefs = {};
	  /**
	   * Warn if there's no key explicitly set on dynamic arrays of children or
	   * object keys are not valid. This allows us to keep track of children between
	   * updates.
	   */

	  ownerHasKeyUseWarning = {};
	  ownerHasFunctionTypeWarning = {};

	  warnForMissingKey = function (child, returnFiber) {
	    if (child === null || typeof child !== 'object') {
	      return;
	    }

	    if (!child._store || child._store.validated || child.key != null) {
	      return;
	    }

	    if (typeof child._store !== 'object') {
	      throw new Error('React Component in warnForMissingKey should have a _store. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	    }

	    child._store.validated = true;
	    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

	    if (ownerHasKeyUseWarning[componentName]) {
	      return;
	    }

	    ownerHasKeyUseWarning[componentName] = true;

	    error('Each child in a list should have a unique ' + '"key" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');
	  };
	}

	function isReactClass(type) {
	  return type.prototype && type.prototype.isReactComponent;
	}

	function coerceRef(returnFiber, current, element) {
	  var mixedRef = element.ref;

	  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
	    {
	      // TODO: Clean this up once we turn on the string ref warning for
	      // everyone, because the strict mode case will no longer be relevant
	      if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
	      // because these cannot be automatically converted to an arrow function
	      // using a codemod. Therefore, we don't have to warn about string refs again.
	      !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
	      !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
	      !(typeof element.type === 'function' && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
	      element._owner) {
	        var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

	        if (!didWarnAboutStringRefs[componentName]) {
	          {
	            error('Component "%s" contains the string ref "%s". Support for string refs ' + 'will be removed in a future major release. We recommend using ' + 'useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
	          }

	          didWarnAboutStringRefs[componentName] = true;
	        }
	      }
	    }

	    if (element._owner) {
	      var owner = element._owner;
	      var inst;

	      if (owner) {
	        var ownerFiber = owner;

	        if (ownerFiber.tag !== ClassComponent) {
	          throw new Error('Function components cannot have string refs. ' + 'We recommend using useRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref');
	        }

	        inst = ownerFiber.stateNode;
	      }

	      if (!inst) {
	        throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a " + 'bug in React. Please file an issue.');
	      } // Assigning this to a const so Flow knows it won't change in the closure


	      var resolvedInst = inst;

	      {
	        checkPropStringCoercion(mixedRef, 'ref');
	      }

	      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

	      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
	        return current.ref;
	      }

	      var ref = function (value) {
	        var refs = resolvedInst.refs;

	        if (value === null) {
	          delete refs[stringRef];
	        } else {
	          refs[stringRef] = value;
	        }
	      };

	      ref._stringRef = stringRef;
	      return ref;
	    } else {
	      if (typeof mixedRef !== 'string') {
	        throw new Error('Expected ref to be a function, a string, an object returned by React.createRef(), or null.');
	      }

	      if (!element._owner) {
	        throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of" + ' the following reasons:\n' + '1. You may be adding a ref to a function component\n' + "2. You may be adding a ref to a component that was not created inside a component's render method\n" + '3. You have multiple copies of React loaded\n' + 'See https://reactjs.org/link/refs-must-have-owner for more information.');
	      }
	    }
	  }

	  return mixedRef;
	}

	function throwOnInvalidObjectType(returnFiber, newChild) {
	  var childString = Object.prototype.toString.call(newChild);
	  throw new Error("Objects are not valid as a React child (found: " + (childString === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : childString) + "). " + 'If you meant to render a collection of children, use an array ' + 'instead.');
	}

	function warnOnFunctionType(returnFiber) {
	  {
	    var componentName = getComponentNameFromFiber(returnFiber) || 'Component';

	    if (ownerHasFunctionTypeWarning[componentName]) {
	      return;
	    }

	    ownerHasFunctionTypeWarning[componentName] = true;

	    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
	  }
	}

	function resolveLazy(lazyType) {
	  var payload = lazyType._payload;
	  var init = lazyType._init;
	  return init(payload);
	} // This wrapper function exists because I expect to clone the code in each path
	// to be able to optimize each path individually by branching early. This needs
	// a compiler or we can do it manually. Helpers that don't need this branching
	// live outside of this function.


	function ChildReconciler(shouldTrackSideEffects) {
	  function deleteChild(returnFiber, childToDelete) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return;
	    }

	    var deletions = returnFiber.deletions;

	    if (deletions === null) {
	      returnFiber.deletions = [childToDelete];
	      returnFiber.flags |= ChildDeletion;
	    } else {
	      deletions.push(childToDelete);
	    }
	  }

	  function deleteRemainingChildren(returnFiber, currentFirstChild) {
	    if (!shouldTrackSideEffects) {
	      // Noop.
	      return null;
	    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
	    // assuming that after the first child we've already added everything.


	    var childToDelete = currentFirstChild;

	    while (childToDelete !== null) {
	      deleteChild(returnFiber, childToDelete);
	      childToDelete = childToDelete.sibling;
	    }

	    return null;
	  }

	  function mapRemainingChildren(returnFiber, currentFirstChild) {
	    // Add the remaining children to a temporary map so that we can find them by
	    // keys quickly. Implicit (null) keys get added to this set with their index
	    // instead.
	    var existingChildren = new Map();
	    var existingChild = currentFirstChild;

	    while (existingChild !== null) {
	      if (existingChild.key !== null) {
	        existingChildren.set(existingChild.key, existingChild);
	      } else {
	        existingChildren.set(existingChild.index, existingChild);
	      }

	      existingChild = existingChild.sibling;
	    }

	    return existingChildren;
	  }

	  function useFiber(fiber, pendingProps) {
	    // We currently set sibling to null and index to 0 here because it is easy
	    // to forget to do before returning it. E.g. for the single child case.
	    var clone = createWorkInProgress(fiber, pendingProps);
	    clone.index = 0;
	    clone.sibling = null;
	    return clone;
	  }

	  function placeChild(newFiber, lastPlacedIndex, newIndex) {
	    newFiber.index = newIndex;

	    if (!shouldTrackSideEffects) {
	      // During hydration, the useId algorithm needs to know which fibers are
	      // part of a list of children (arrays, iterators).
	      newFiber.flags |= Forked;
	      return lastPlacedIndex;
	    }

	    var current = newFiber.alternate;

	    if (current !== null) {
	      var oldIndex = current.index;

	      if (oldIndex < lastPlacedIndex) {
	        // This is a move.
	        newFiber.flags |= Placement;
	        return lastPlacedIndex;
	      } else {
	        // This item can stay in place.
	        return oldIndex;
	      }
	    } else {
	      // This is an insertion.
	      newFiber.flags |= Placement;
	      return lastPlacedIndex;
	    }
	  }

	  function placeSingleChild(newFiber) {
	    // This is simpler for the single child case. We only need to do a
	    // placement for inserting new children.
	    if (shouldTrackSideEffects && newFiber.alternate === null) {
	      newFiber.flags |= Placement;
	    }

	    return newFiber;
	  }

	  function updateTextNode(returnFiber, current, textContent, lanes) {
	    if (current === null || current.tag !== HostText) {
	      // Insert
	      var created = createFiberFromText(textContent, returnFiber.mode, lanes);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, textContent);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateElement(returnFiber, current, element, lanes) {
	    var elementType = element.type;

	    if (elementType === REACT_FRAGMENT_TYPE) {
	      return updateFragment(returnFiber, current, element.props.children, lanes, element.key);
	    }

	    if (current !== null) {
	      if (current.elementType === elementType || ( // Keep this check inline so it only runs on the false path:
	       isCompatibleFamilyForHotReloading(current, element) ) || // Lazy types should reconcile their resolved type.
	      // We need to do this after the Hot Reloading check above,
	      // because hot reloading has different semantics than prod because
	      // it doesn't resuspend. So we can't let the call below suspend.
	      typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current.type) {
	        // Move based on index
	        var existing = useFiber(current, element.props);
	        existing.ref = coerceRef(returnFiber, current, element);
	        existing.return = returnFiber;

	        {
	          existing._debugSource = element._source;
	          existing._debugOwner = element._owner;
	        }

	        return existing;
	      }
	    } // Insert


	    var created = createFiberFromElement(element, returnFiber.mode, lanes);
	    created.ref = coerceRef(returnFiber, current, element);
	    created.return = returnFiber;
	    return created;
	  }

	  function updatePortal(returnFiber, current, portal, lanes) {
	    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
	      // Insert
	      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, portal.children || []);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function updateFragment(returnFiber, current, fragment, lanes, key) {
	    if (current === null || current.tag !== Fragment) {
	      // Insert
	      var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      // Update
	      var existing = useFiber(current, fragment);
	      existing.return = returnFiber;
	      return existing;
	    }
	  }

	  function createChild(returnFiber, newChild, lanes) {
	    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
	      created.return = returnFiber;
	      return created;
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);

	            _created.ref = coerceRef(returnFiber, null, newChild);
	            _created.return = returnFiber;
	            return _created;
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);

	            _created2.return = returnFiber;
	            return _created2;
	          }

	        case REACT_LAZY_TYPE:
	          {
	            var payload = newChild._payload;
	            var init = newChild._init;
	            return createChild(returnFiber, init(payload), lanes);
	          }
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);

	        _created3.return = returnFiber;
	        return _created3;
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType(returnFiber);
	      }
	    }

	    return null;
	  }

	  function updateSlot(returnFiber, oldFiber, newChild, lanes) {
	    // Update the fiber if the keys match, otherwise return null.
	    var key = oldFiber !== null ? oldFiber.key : null;

	    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
	      // Text nodes don't have keys. If the previous node is implicitly keyed
	      // we can continue to replace it without aborting even if it is not a text
	      // node.
	      if (key !== null) {
	        return null;
	      }

	      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            if (newChild.key === key) {
	              return updateElement(returnFiber, oldFiber, newChild, lanes);
	            } else {
	              return null;
	            }
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            if (newChild.key === key) {
	              return updatePortal(returnFiber, oldFiber, newChild, lanes);
	            } else {
	              return null;
	            }
	          }

	        case REACT_LAZY_TYPE:
	          {
	            var payload = newChild._payload;
	            var init = newChild._init;
	            return updateSlot(returnFiber, oldFiber, init(payload), lanes);
	          }
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        if (key !== null) {
	          return null;
	        }

	        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType(returnFiber);
	      }
	    }

	    return null;
	  }

	  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
	    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
	      // Text nodes don't have keys, so we neither have to check the old nor
	      // new node for the key. If both are text nodes, they match.
	      var matchedFiber = existingChildren.get(newIdx) || null;
	      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
	    }

	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          {
	            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

	            return updateElement(returnFiber, _matchedFiber, newChild, lanes);
	          }

	        case REACT_PORTAL_TYPE:
	          {
	            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

	            return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
	          }

	        case REACT_LAZY_TYPE:
	          var payload = newChild._payload;
	          var init = newChild._init;
	          return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
	      }

	      if (isArray(newChild) || getIteratorFn(newChild)) {
	        var _matchedFiber3 = existingChildren.get(newIdx) || null;

	        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType(returnFiber);
	      }
	    }

	    return null;
	  }
	  /**
	   * Warns if there is a duplicate or missing key
	   */


	  function warnOnInvalidKey(child, knownKeys, returnFiber) {
	    {
	      if (typeof child !== 'object' || child === null) {
	        return knownKeys;
	      }

	      switch (child.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	        case REACT_PORTAL_TYPE:
	          warnForMissingKey(child, returnFiber);
	          var key = child.key;

	          if (typeof key !== 'string') {
	            break;
	          }

	          if (knownKeys === null) {
	            knownKeys = new Set();
	            knownKeys.add(key);
	            break;
	          }

	          if (!knownKeys.has(key)) {
	            knownKeys.add(key);
	            break;
	          }

	          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);

	          break;

	        case REACT_LAZY_TYPE:
	          var payload = child._payload;
	          var init = child._init;
	          warnOnInvalidKey(init(payload), knownKeys, returnFiber);
	          break;
	      }
	    }

	    return knownKeys;
	  }

	  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
	    // This algorithm can't optimize by searching from both ends since we
	    // don't have backpointers on fibers. I'm trying to see how far we can get
	    // with that model. If it ends up not being worth the tradeoffs, we can
	    // add it later.
	    // Even with a two ended optimization, we'd want to optimize for the case
	    // where there are few changes and brute force the comparison instead of
	    // going for the Map. It'd like to explore hitting that path first in
	    // forward-only mode and only go for the Map once we notice that we need
	    // lots of look ahead. This doesn't handle reversal as well as two ended
	    // search but that's unusual. Besides, for the two ended optimization to
	    // work on Iterables, we'd need to copy the whole set.
	    // In this first iteration, we'll just live with hitting the bad case
	    // (adding everything to a Map) in for every insert/move.
	    // If you change this code, also update reconcileChildrenIterator() which
	    // uses the same algorithm.
	    {
	      // First, validate keys.
	      var knownKeys = null;

	      for (var i = 0; i < newChildren.length; i++) {
	        var child = newChildren[i];
	        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
	      }
	    }

	    var resultingFirstChild = null;
	    var previousNewFiber = null;
	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;

	    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }

	      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);

	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (oldFiber === null) {
	          oldFiber = nextOldFiber;
	        }

	        break;
	      }

	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }

	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }

	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (newIdx === newChildren.length) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);

	      if (getIsHydrating()) {
	        var numberOfForks = newIdx;
	        pushTreeFork(returnFiber, numberOfForks);
	      }

	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; newIdx < newChildren.length; newIdx++) {
	        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);

	        if (_newFiber === null) {
	          continue;
	        }

	        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber;
	        } else {
	          previousNewFiber.sibling = _newFiber;
	        }

	        previousNewFiber = _newFiber;
	      }

	      if (getIsHydrating()) {
	        var _numberOfForks = newIdx;
	        pushTreeFork(returnFiber, _numberOfForks);
	      }

	      return resultingFirstChild;
	    } // Add all children to a key map for quick lookups.


	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

	    for (; newIdx < newChildren.length; newIdx++) {
	      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);

	      if (_newFiber2 !== null) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber2.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
	          }
	        }

	        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber2;
	        } else {
	          previousNewFiber.sibling = _newFiber2;
	        }

	        previousNewFiber = _newFiber2;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    if (getIsHydrating()) {
	      var _numberOfForks2 = newIdx;
	      pushTreeFork(returnFiber, _numberOfForks2);
	    }

	    return resultingFirstChild;
	  }

	  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
	    // This is the same implementation as reconcileChildrenArray(),
	    // but using the iterator instead.
	    var iteratorFn = getIteratorFn(newChildrenIterable);

	    if (typeof iteratorFn !== 'function') {
	      throw new Error('An object is not an iterable. This error is likely caused by a bug in ' + 'React. Please file an issue.');
	    }

	    {
	      // We don't support rendering Generators because it's a mutation.
	      // See https://github.com/facebook/react/issues/12995
	      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
	      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
	        if (!didWarnAboutGenerators) {
	          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
	        }

	        didWarnAboutGenerators = true;
	      } // Warn about using Maps as children


	      if (newChildrenIterable.entries === iteratorFn) {
	        if (!didWarnAboutMaps) {
	          error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
	        }

	        didWarnAboutMaps = true;
	      } // First, validate keys.
	      // We'll get a different iterator later for the main pass.


	      var _newChildren = iteratorFn.call(newChildrenIterable);

	      if (_newChildren) {
	        var knownKeys = null;

	        var _step = _newChildren.next();

	        for (; !_step.done; _step = _newChildren.next()) {
	          var child = _step.value;
	          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
	        }
	      }
	    }

	    var newChildren = iteratorFn.call(newChildrenIterable);

	    if (newChildren == null) {
	      throw new Error('An iterable object provided no iterator.');
	    }

	    var resultingFirstChild = null;
	    var previousNewFiber = null;
	    var oldFiber = currentFirstChild;
	    var lastPlacedIndex = 0;
	    var newIdx = 0;
	    var nextOldFiber = null;
	    var step = newChildren.next();

	    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
	      if (oldFiber.index > newIdx) {
	        nextOldFiber = oldFiber;
	        oldFiber = null;
	      } else {
	        nextOldFiber = oldFiber.sibling;
	      }

	      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);

	      if (newFiber === null) {
	        // TODO: This breaks on empty slots like null children. That's
	        // unfortunate because it triggers the slow path all the time. We need
	        // a better way to communicate whether this was a miss or null,
	        // boolean, undefined, etc.
	        if (oldFiber === null) {
	          oldFiber = nextOldFiber;
	        }

	        break;
	      }

	      if (shouldTrackSideEffects) {
	        if (oldFiber && newFiber.alternate === null) {
	          // We matched the slot, but we didn't reuse the existing fiber, so we
	          // need to delete the existing child.
	          deleteChild(returnFiber, oldFiber);
	        }
	      }

	      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

	      if (previousNewFiber === null) {
	        // TODO: Move out of the loop. This only happens for the first run.
	        resultingFirstChild = newFiber;
	      } else {
	        // TODO: Defer siblings if we're not at the right index for this slot.
	        // I.e. if we had null values before, then we want to defer this
	        // for each null value. However, we also don't want to call updateSlot
	        // with the previous one.
	        previousNewFiber.sibling = newFiber;
	      }

	      previousNewFiber = newFiber;
	      oldFiber = nextOldFiber;
	    }

	    if (step.done) {
	      // We've reached the end of the new children. We can delete the rest.
	      deleteRemainingChildren(returnFiber, oldFiber);

	      if (getIsHydrating()) {
	        var numberOfForks = newIdx;
	        pushTreeFork(returnFiber, numberOfForks);
	      }

	      return resultingFirstChild;
	    }

	    if (oldFiber === null) {
	      // If we don't have any more existing children we can choose a fast path
	      // since the rest will all be insertions.
	      for (; !step.done; newIdx++, step = newChildren.next()) {
	        var _newFiber3 = createChild(returnFiber, step.value, lanes);

	        if (_newFiber3 === null) {
	          continue;
	        }

	        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          // TODO: Move out of the loop. This only happens for the first run.
	          resultingFirstChild = _newFiber3;
	        } else {
	          previousNewFiber.sibling = _newFiber3;
	        }

	        previousNewFiber = _newFiber3;
	      }

	      if (getIsHydrating()) {
	        var _numberOfForks3 = newIdx;
	        pushTreeFork(returnFiber, _numberOfForks3);
	      }

	      return resultingFirstChild;
	    } // Add all children to a key map for quick lookups.


	    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

	    for (; !step.done; newIdx++, step = newChildren.next()) {
	      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);

	      if (_newFiber4 !== null) {
	        if (shouldTrackSideEffects) {
	          if (_newFiber4.alternate !== null) {
	            // The new fiber is a work in progress, but if there exists a
	            // current, that means that we reused the fiber. We need to delete
	            // it from the child list so that we don't add it to the deletion
	            // list.
	            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
	          }
	        }

	        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

	        if (previousNewFiber === null) {
	          resultingFirstChild = _newFiber4;
	        } else {
	          previousNewFiber.sibling = _newFiber4;
	        }

	        previousNewFiber = _newFiber4;
	      }
	    }

	    if (shouldTrackSideEffects) {
	      // Any existing children that weren't consumed above were deleted. We need
	      // to add them to the deletion list.
	      existingChildren.forEach(function (child) {
	        return deleteChild(returnFiber, child);
	      });
	    }

	    if (getIsHydrating()) {
	      var _numberOfForks4 = newIdx;
	      pushTreeFork(returnFiber, _numberOfForks4);
	    }

	    return resultingFirstChild;
	  }

	  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
	    // There's no need to check for keys on text nodes since we don't have a
	    // way to define them.
	    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
	      // We already have an existing node so let's just update it and delete
	      // the rest.
	      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
	      var existing = useFiber(currentFirstChild, textContent);
	      existing.return = returnFiber;
	      return existing;
	    } // The existing first child is not a text node so we need to create one
	    // and delete the existing ones.


	    deleteRemainingChildren(returnFiber, currentFirstChild);
	    var created = createFiberFromText(textContent, returnFiber.mode, lanes);
	    created.return = returnFiber;
	    return created;
	  }

	  function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
	    var key = element.key;
	    var child = currentFirstChild;

	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        var elementType = element.type;

	        if (elementType === REACT_FRAGMENT_TYPE) {
	          if (child.tag === Fragment) {
	            deleteRemainingChildren(returnFiber, child.sibling);
	            var existing = useFiber(child, element.props.children);
	            existing.return = returnFiber;

	            {
	              existing._debugSource = element._source;
	              existing._debugOwner = element._owner;
	            }

	            return existing;
	          }
	        } else {
	          if (child.elementType === elementType || ( // Keep this check inline so it only runs on the false path:
	           isCompatibleFamilyForHotReloading(child, element) ) || // Lazy types should reconcile their resolved type.
	          // We need to do this after the Hot Reloading check above,
	          // because hot reloading has different semantics than prod because
	          // it doesn't resuspend. So we can't let the call below suspend.
	          typeof elementType === 'object' && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
	            deleteRemainingChildren(returnFiber, child.sibling);

	            var _existing = useFiber(child, element.props);

	            _existing.ref = coerceRef(returnFiber, child, element);
	            _existing.return = returnFiber;

	            {
	              _existing._debugSource = element._source;
	              _existing._debugOwner = element._owner;
	            }

	            return _existing;
	          }
	        } // Didn't match.


	        deleteRemainingChildren(returnFiber, child);
	        break;
	      } else {
	        deleteChild(returnFiber, child);
	      }

	      child = child.sibling;
	    }

	    if (element.type === REACT_FRAGMENT_TYPE) {
	      var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
	      created.return = returnFiber;
	      return created;
	    } else {
	      var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);

	      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
	      _created4.return = returnFiber;
	      return _created4;
	    }
	  }

	  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
	    var key = portal.key;
	    var child = currentFirstChild;

	    while (child !== null) {
	      // TODO: If key === null and child.key === null, then this only applies to
	      // the first item in the list.
	      if (child.key === key) {
	        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
	          deleteRemainingChildren(returnFiber, child.sibling);
	          var existing = useFiber(child, portal.children || []);
	          existing.return = returnFiber;
	          return existing;
	        } else {
	          deleteRemainingChildren(returnFiber, child);
	          break;
	        }
	      } else {
	        deleteChild(returnFiber, child);
	      }

	      child = child.sibling;
	    }

	    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
	    created.return = returnFiber;
	    return created;
	  } // This API will tag the children with the side-effect of the reconciliation
	  // itself. They will be added to the side-effect list as we pass through the
	  // children and the parent.


	  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
	    // This function is not recursive.
	    // If the top level item is an array, we treat it as a set of children,
	    // not as a fragment. Nested arrays on the other hand will be treated as
	    // fragment nodes. Recursion happens at the normal flow.
	    // Handle top level unkeyed fragments as if they were arrays.
	    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
	    // We treat the ambiguous cases above the same.
	    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

	    if (isUnkeyedTopLevelFragment) {
	      newChild = newChild.props.children;
	    } // Handle object types


	    if (typeof newChild === 'object' && newChild !== null) {
	      switch (newChild.$$typeof) {
	        case REACT_ELEMENT_TYPE:
	          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));

	        case REACT_PORTAL_TYPE:
	          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));

	        case REACT_LAZY_TYPE:
	          var payload = newChild._payload;
	          var init = newChild._init; // TODO: This function is supposed to be non-recursive.

	          return reconcileChildFibers(returnFiber, currentFirstChild, init(payload), lanes);
	      }

	      if (isArray(newChild)) {
	        return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
	      }

	      if (getIteratorFn(newChild)) {
	        return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
	      }

	      throwOnInvalidObjectType(returnFiber, newChild);
	    }

	    if (typeof newChild === 'string' && newChild !== '' || typeof newChild === 'number') {
	      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
	    }

	    {
	      if (typeof newChild === 'function') {
	        warnOnFunctionType(returnFiber);
	      }
	    } // Remaining cases are all treated as empty.


	    return deleteRemainingChildren(returnFiber, currentFirstChild);
	  }

	  return reconcileChildFibers;
	}

	var reconcileChildFibers = ChildReconciler(true);
	var mountChildFibers = ChildReconciler(false);
	function cloneChildFibers(current, workInProgress) {
	  if (current !== null && workInProgress.child !== current.child) {
	    throw new Error('Resuming work not yet implemented.');
	  }

	  if (workInProgress.child === null) {
	    return;
	  }

	  var currentChild = workInProgress.child;
	  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
	  workInProgress.child = newChild;
	  newChild.return = workInProgress;

	  while (currentChild.sibling !== null) {
	    currentChild = currentChild.sibling;
	    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
	    newChild.return = workInProgress;
	  }

	  newChild.sibling = null;
	} // Reset a workInProgress child set to prepare it for a second pass.

	function resetChildFibers(workInProgress, lanes) {
	  var child = workInProgress.child;

	  while (child !== null) {
	    resetWorkInProgress(child, lanes);
	    child = child.sibling;
	  }
	}

	var valueCursor = createCursor(null);
	var rendererSigil;

	{
	  // Use this to detect multiple renderers using the same context
	  rendererSigil = {};
	}

	var currentlyRenderingFiber = null;
	var lastContextDependency = null;
	var lastFullyObservedContext = null;
	var isDisallowedContextReadInDEV = false;
	function resetContextDependencies() {
	  // This is called right before React yields execution, to ensure `readContext`
	  // cannot be called outside the render phase.
	  currentlyRenderingFiber = null;
	  lastContextDependency = null;
	  lastFullyObservedContext = null;

	  {
	    isDisallowedContextReadInDEV = false;
	  }
	}
	function enterDisallowedContextReadInDEV() {
	  {
	    isDisallowedContextReadInDEV = true;
	  }
	}
	function exitDisallowedContextReadInDEV() {
	  {
	    isDisallowedContextReadInDEV = false;
	  }
	}
	function pushProvider(providerFiber, context, nextValue) {
	  if (isPrimaryRenderer) {
	    push(valueCursor, context._currentValue, providerFiber);
	    context._currentValue = nextValue;

	    {
	      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
	        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
	      }

	      context._currentRenderer = rendererSigil;
	    }
	  } else {
	    push(valueCursor, context._currentValue2, providerFiber);
	    context._currentValue2 = nextValue;

	    {
	      if (context._currentRenderer2 !== undefined && context._currentRenderer2 !== null && context._currentRenderer2 !== rendererSigil) {
	        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
	      }

	      context._currentRenderer2 = rendererSigil;
	    }
	  }
	}
	function popProvider(context, providerFiber) {
	  var currentValue = valueCursor.current;
	  pop(valueCursor, providerFiber);

	  if (isPrimaryRenderer) {
	    {
	      context._currentValue = currentValue;
	    }
	  } else {
	    {
	      context._currentValue2 = currentValue;
	    }
	  }
	}
	function scheduleContextWorkOnParentPath(parent, renderLanes, propagationRoot) {
	  // Update the child lanes of all the ancestors, including the alternates.
	  var node = parent;

	  while (node !== null) {
	    var alternate = node.alternate;

	    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
	      node.childLanes = mergeLanes(node.childLanes, renderLanes);

	      if (alternate !== null) {
	        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
	      }
	    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
	      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
	    }

	    if (node === propagationRoot) {
	      break;
	    }

	    node = node.return;
	  }

	  {
	    if (node !== propagationRoot) {
	      error('Expected to find the propagation root when scheduling context work. ' + 'This error is likely caused by a bug in React. Please file an issue.');
	    }
	  }
	}
	function propagateContextChange(workInProgress, context, renderLanes) {
	  {
	    propagateContextChange_eager(workInProgress, context, renderLanes);
	  }
	}

	function propagateContextChange_eager(workInProgress, context, renderLanes) {

	  var fiber = workInProgress.child;

	  if (fiber !== null) {
	    // Set the return pointer of the child to the work-in-progress fiber.
	    fiber.return = workInProgress;
	  }

	  while (fiber !== null) {
	    var nextFiber = void 0; // Visit this fiber.

	    var list = fiber.dependencies;

	    if (list !== null) {
	      nextFiber = fiber.child;
	      var dependency = list.firstContext;

	      while (dependency !== null) {
	        // Check if the context matches.
	        if (dependency.context === context) {
	          // Match! Schedule an update on this fiber.
	          if (fiber.tag === ClassComponent) {
	            // Schedule a force update on the work-in-progress.
	            var lane = pickArbitraryLane(renderLanes);
	            var update = createUpdate(NoTimestamp, lane);
	            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
	            // update to the current fiber, too, which means it will persist even if
	            // this render is thrown away. Since it's a race condition, not sure it's
	            // worth fixing.
	            // Inlined `enqueueUpdate` to remove interleaved update check

	            var updateQueue = fiber.updateQueue;

	            if (updateQueue === null) ; else {
	              var sharedQueue = updateQueue.shared;
	              var pending = sharedQueue.pending;

	              if (pending === null) {
	                // This is the first update. Create a circular list.
	                update.next = update;
	              } else {
	                update.next = pending.next;
	                pending.next = update;
	              }

	              sharedQueue.pending = update;
	            }
	          }

	          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
	          var alternate = fiber.alternate;

	          if (alternate !== null) {
	            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
	          }

	          scheduleContextWorkOnParentPath(fiber.return, renderLanes, workInProgress); // Mark the updated lanes on the list, too.

	          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
	          // dependency list.

	          break;
	        }

	        dependency = dependency.next;
	      }
	    } else if (fiber.tag === ContextProvider) {
	      // Don't scan deeper if this is a matching provider
	      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
	    } else if (fiber.tag === DehydratedFragment) {
	      // If a dehydrated suspense boundary is in this subtree, we don't know
	      // if it will have any context consumers in it. The best we can do is
	      // mark it as having updates.
	      var parentSuspense = fiber.return;

	      if (parentSuspense === null) {
	        throw new Error('We just came from a parent so we must have had a parent. This is a bug in React.');
	      }

	      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);
	      var _alternate = parentSuspense.alternate;

	      if (_alternate !== null) {
	        _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes);
	      } // This is intentionally passing this fiber as the parent
	      // because we want to schedule this fiber as having work
	      // on its children. We'll use the childLanes on
	      // this fiber to indicate that a context has changed.


	      scheduleContextWorkOnParentPath(parentSuspense, renderLanes, workInProgress);
	      nextFiber = fiber.sibling;
	    } else {
	      // Traverse down.
	      nextFiber = fiber.child;
	    }

	    if (nextFiber !== null) {
	      // Set the return pointer of the child to the work-in-progress fiber.
	      nextFiber.return = fiber;
	    } else {
	      // No child. Traverse to next sibling.
	      nextFiber = fiber;

	      while (nextFiber !== null) {
	        if (nextFiber === workInProgress) {
	          // We're back to the root of this subtree. Exit.
	          nextFiber = null;
	          break;
	        }

	        var sibling = nextFiber.sibling;

	        if (sibling !== null) {
	          // Set the return pointer of the sibling to the work-in-progress fiber.
	          sibling.return = nextFiber.return;
	          nextFiber = sibling;
	          break;
	        } // No more siblings. Traverse up.


	        nextFiber = nextFiber.return;
	      }
	    }

	    fiber = nextFiber;
	  }
	}
	function prepareToReadContext(workInProgress, renderLanes) {
	  currentlyRenderingFiber = workInProgress;
	  lastContextDependency = null;
	  lastFullyObservedContext = null;
	  var dependencies = workInProgress.dependencies;

	  if (dependencies !== null) {
	    {
	      var firstContext = dependencies.firstContext;

	      if (firstContext !== null) {
	        if (includesSomeLane(dependencies.lanes, renderLanes)) {
	          // Context list has a pending update. Mark that this fiber performed work.
	          markWorkInProgressReceivedUpdate();
	        } // Reset the work-in-progress list


	        dependencies.firstContext = null;
	      }
	    }
	  }
	}
	function readContext(context) {
	  {
	    // This warning would fire if you read context inside a Hook like useMemo.
	    // Unlike the class check below, it's not enforced in production for perf.
	    if (isDisallowedContextReadInDEV) {
	      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
	    }
	  }

	  var value = isPrimaryRenderer ? context._currentValue : context._currentValue2;

	  if (lastFullyObservedContext === context) ; else {
	    var contextItem = {
	      context: context,
	      memoizedValue: value,
	      next: null
	    };

	    if (lastContextDependency === null) {
	      if (currentlyRenderingFiber === null) {
	        throw new Error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
	      } // This is the first dependency for this component. Create a new list.


	      lastContextDependency = contextItem;
	      currentlyRenderingFiber.dependencies = {
	        lanes: NoLanes,
	        firstContext: contextItem
	      };
	    } else {
	      // Append a new context item.
	      lastContextDependency = lastContextDependency.next = contextItem;
	    }
	  }

	  return value;
	}

	// render. When this render exits, either because it finishes or because it is
	// interrupted, the interleaved updates will be transferred onto the main part
	// of the queue.

	var concurrentQueues = null;
	function pushConcurrentUpdateQueue(queue) {
	  if (concurrentQueues === null) {
	    concurrentQueues = [queue];
	  } else {
	    concurrentQueues.push(queue);
	  }
	}
	function finishQueueingConcurrentUpdates() {
	  // Transfer the interleaved updates onto the main queue. Each queue has a
	  // `pending` field and an `interleaved` field. When they are not null, they
	  // point to the last node in a circular linked list. We need to append the
	  // interleaved list to the end of the pending list by joining them into a
	  // single, circular list.
	  if (concurrentQueues !== null) {
	    for (var i = 0; i < concurrentQueues.length; i++) {
	      var queue = concurrentQueues[i];
	      var lastInterleavedUpdate = queue.interleaved;

	      if (lastInterleavedUpdate !== null) {
	        queue.interleaved = null;
	        var firstInterleavedUpdate = lastInterleavedUpdate.next;
	        var lastPendingUpdate = queue.pending;

	        if (lastPendingUpdate !== null) {
	          var firstPendingUpdate = lastPendingUpdate.next;
	          lastPendingUpdate.next = firstInterleavedUpdate;
	          lastInterleavedUpdate.next = firstPendingUpdate;
	        }

	        queue.pending = lastInterleavedUpdate;
	      }
	    }

	    concurrentQueues = null;
	  }
	}
	function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
	  var interleaved = queue.interleaved;

	  if (interleaved === null) {
	    // This is the first update. Create a circular list.
	    update.next = update; // At the end of the current render, this queue's interleaved updates will
	    // be transferred to the pending queue.

	    pushConcurrentUpdateQueue(queue);
	  } else {
	    update.next = interleaved.next;
	    interleaved.next = update;
	  }

	  queue.interleaved = update;
	  return markUpdateLaneFromFiberToRoot(fiber, lane);
	}
	function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
	  var interleaved = queue.interleaved;

	  if (interleaved === null) {
	    // This is the first update. Create a circular list.
	    update.next = update; // At the end of the current render, this queue's interleaved updates will
	    // be transferred to the pending queue.

	    pushConcurrentUpdateQueue(queue);
	  } else {
	    update.next = interleaved.next;
	    interleaved.next = update;
	  }

	  queue.interleaved = update;
	}
	function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
	  var interleaved = queue.interleaved;

	  if (interleaved === null) {
	    // This is the first update. Create a circular list.
	    update.next = update; // At the end of the current render, this queue's interleaved updates will
	    // be transferred to the pending queue.

	    pushConcurrentUpdateQueue(queue);
	  } else {
	    update.next = interleaved.next;
	    interleaved.next = update;
	  }

	  queue.interleaved = update;
	  return markUpdateLaneFromFiberToRoot(fiber, lane);
	}
	function enqueueConcurrentRenderForLane(fiber, lane) {
	  return markUpdateLaneFromFiberToRoot(fiber, lane);
	} // Calling this function outside this module should only be done for backwards
	// compatibility and should always be accompanied by a warning.

	var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;

	function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
	  // Update the source fiber's lanes
	  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
	  var alternate = sourceFiber.alternate;

	  if (alternate !== null) {
	    alternate.lanes = mergeLanes(alternate.lanes, lane);
	  }

	  {
	    if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
	      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
	    }
	  } // Walk the parent path to the root and update the child lanes.


	  var node = sourceFiber;
	  var parent = sourceFiber.return;

	  while (parent !== null) {
	    parent.childLanes = mergeLanes(parent.childLanes, lane);
	    alternate = parent.alternate;

	    if (alternate !== null) {
	      alternate.childLanes = mergeLanes(alternate.childLanes, lane);
	    } else {
	      {
	        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
	          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
	        }
	      }
	    }

	    node = parent;
	    parent = parent.return;
	  }

	  if (node.tag === HostRoot) {
	    var root = node.stateNode;
	    return root;
	  } else {
	    return null;
	  }
	}

	var UpdateState = 0;
	var ReplaceState = 1;
	var ForceUpdate = 2;
	var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
	// It should only be read right after calling `processUpdateQueue`, via
	// `checkHasForceUpdateAfterProcessing`.

	var hasForceUpdate = false;
	var didWarnUpdateInsideUpdate;
	var currentlyProcessingQueue;

	{
	  didWarnUpdateInsideUpdate = false;
	  currentlyProcessingQueue = null;
	}

	function initializeUpdateQueue(fiber) {
	  var queue = {
	    baseState: fiber.memoizedState,
	    firstBaseUpdate: null,
	    lastBaseUpdate: null,
	    shared: {
	      pending: null,
	      interleaved: null,
	      lanes: NoLanes
	    },
	    effects: null
	  };
	  fiber.updateQueue = queue;
	}
	function cloneUpdateQueue(current, workInProgress) {
	  // Clone the update queue from current. Unless it's already a clone.
	  var queue = workInProgress.updateQueue;
	  var currentQueue = current.updateQueue;

	  if (queue === currentQueue) {
	    var clone = {
	      baseState: currentQueue.baseState,
	      firstBaseUpdate: currentQueue.firstBaseUpdate,
	      lastBaseUpdate: currentQueue.lastBaseUpdate,
	      shared: currentQueue.shared,
	      effects: currentQueue.effects
	    };
	    workInProgress.updateQueue = clone;
	  }
	}
	function createUpdate(eventTime, lane) {
	  var update = {
	    eventTime: eventTime,
	    lane: lane,
	    tag: UpdateState,
	    payload: null,
	    callback: null,
	    next: null
	  };
	  return update;
	}
	function enqueueUpdate(fiber, update, lane) {
	  var updateQueue = fiber.updateQueue;

	  if (updateQueue === null) {
	    // Only occurs if the fiber has been unmounted.
	    return null;
	  }

	  var sharedQueue = updateQueue.shared;

	  {
	    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
	      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

	      didWarnUpdateInsideUpdate = true;
	    }
	  }

	  if (isUnsafeClassRenderPhaseUpdate()) {
	    // This is an unsafe render phase update. Add directly to the update
	    // queue so we can process it immediately during the current render.
	    var pending = sharedQueue.pending;

	    if (pending === null) {
	      // This is the first update. Create a circular list.
	      update.next = update;
	    } else {
	      update.next = pending.next;
	      pending.next = update;
	    }

	    sharedQueue.pending = update; // Update the childLanes even though we're most likely already rendering
	    // this fiber. This is for backwards compatibility in the case where you
	    // update a different component during render phase than the one that is
	    // currently renderings (a pattern that is accompanied by a warning).

	    return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
	  } else {
	    return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
	  }
	}
	function entangleTransitions(root, fiber, lane) {
	  var updateQueue = fiber.updateQueue;

	  if (updateQueue === null) {
	    // Only occurs if the fiber has been unmounted.
	    return;
	  }

	  var sharedQueue = updateQueue.shared;

	  if (isTransitionLane(lane)) {
	    var queueLanes = sharedQueue.lanes; // If any entangled lanes are no longer pending on the root, then they must
	    // have finished. We can remove them from the shared queue, which represents
	    // a superset of the actually pending lanes. In some cases we may entangle
	    // more than we need to, but that's OK. In fact it's worse if we *don't*
	    // entangle when we should.

	    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.

	    var newQueueLanes = mergeLanes(queueLanes, lane);
	    sharedQueue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
	    // the lane finished since the last time we entangled it. So we need to
	    // entangle it again, just to be sure.

	    markRootEntangled(root, newQueueLanes);
	  }
	}
	function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
	  // Captured updates are updates that are thrown by a child during the render
	  // phase. They should be discarded if the render is aborted. Therefore,
	  // we should only put them on the work-in-progress queue, not the current one.
	  var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.

	  var current = workInProgress.alternate;

	  if (current !== null) {
	    var currentQueue = current.updateQueue;

	    if (queue === currentQueue) {
	      // The work-in-progress queue is the same as current. This happens when
	      // we bail out on a parent fiber that then captures an error thrown by
	      // a child. Since we want to append the update only to the work-in
	      // -progress queue, we need to clone the updates. We usually clone during
	      // processUpdateQueue, but that didn't happen in this case because we
	      // skipped over the parent when we bailed out.
	      var newFirst = null;
	      var newLast = null;
	      var firstBaseUpdate = queue.firstBaseUpdate;

	      if (firstBaseUpdate !== null) {
	        // Loop through the updates and clone them.
	        var update = firstBaseUpdate;

	        do {
	          var clone = {
	            eventTime: update.eventTime,
	            lane: update.lane,
	            tag: update.tag,
	            payload: update.payload,
	            callback: update.callback,
	            next: null
	          };

	          if (newLast === null) {
	            newFirst = newLast = clone;
	          } else {
	            newLast.next = clone;
	            newLast = clone;
	          }

	          update = update.next;
	        } while (update !== null); // Append the captured update the end of the cloned list.


	        if (newLast === null) {
	          newFirst = newLast = capturedUpdate;
	        } else {
	          newLast.next = capturedUpdate;
	          newLast = capturedUpdate;
	        }
	      } else {
	        // There are no base updates.
	        newFirst = newLast = capturedUpdate;
	      }

	      queue = {
	        baseState: currentQueue.baseState,
	        firstBaseUpdate: newFirst,
	        lastBaseUpdate: newLast,
	        shared: currentQueue.shared,
	        effects: currentQueue.effects
	      };
	      workInProgress.updateQueue = queue;
	      return;
	    }
	  } // Append the update to the end of the list.


	  var lastBaseUpdate = queue.lastBaseUpdate;

	  if (lastBaseUpdate === null) {
	    queue.firstBaseUpdate = capturedUpdate;
	  } else {
	    lastBaseUpdate.next = capturedUpdate;
	  }

	  queue.lastBaseUpdate = capturedUpdate;
	}

	function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
	  switch (update.tag) {
	    case ReplaceState:
	      {
	        var payload = update.payload;

	        if (typeof payload === 'function') {
	          // Updater function
	          {
	            enterDisallowedContextReadInDEV();
	          }

	          var nextState = payload.call(instance, prevState, nextProps);

	          {
	            if ( workInProgress.mode & StrictLegacyMode) {
	              setIsStrictModeForDevtools(true);

	              try {
	                payload.call(instance, prevState, nextProps);
	              } finally {
	                setIsStrictModeForDevtools(false);
	              }
	            }

	            exitDisallowedContextReadInDEV();
	          }

	          return nextState;
	        } // State object


	        return payload;
	      }

	    case CaptureUpdate:
	      {
	        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
	      }
	    // Intentional fallthrough

	    case UpdateState:
	      {
	        var _payload = update.payload;
	        var partialState;

	        if (typeof _payload === 'function') {
	          // Updater function
	          {
	            enterDisallowedContextReadInDEV();
	          }

	          partialState = _payload.call(instance, prevState, nextProps);

	          {
	            if ( workInProgress.mode & StrictLegacyMode) {
	              setIsStrictModeForDevtools(true);

	              try {
	                _payload.call(instance, prevState, nextProps);
	              } finally {
	                setIsStrictModeForDevtools(false);
	              }
	            }

	            exitDisallowedContextReadInDEV();
	          }
	        } else {
	          // Partial state object
	          partialState = _payload;
	        }

	        if (partialState === null || partialState === undefined) {
	          // Null and undefined are treated as no-ops.
	          return prevState;
	        } // Merge the partial state and the previous state.


	        return assign({}, prevState, partialState);
	      }

	    case ForceUpdate:
	      {
	        hasForceUpdate = true;
	        return prevState;
	      }
	  }

	  return prevState;
	}

	function processUpdateQueue(workInProgress, props, instance, renderLanes) {
	  // This is always non-null on a ClassComponent or HostRoot
	  var queue = workInProgress.updateQueue;
	  hasForceUpdate = false;

	  {
	    currentlyProcessingQueue = queue.shared;
	  }

	  var firstBaseUpdate = queue.firstBaseUpdate;
	  var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.

	  var pendingQueue = queue.shared.pending;

	  if (pendingQueue !== null) {
	    queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
	    // and last so that it's non-circular.

	    var lastPendingUpdate = pendingQueue;
	    var firstPendingUpdate = lastPendingUpdate.next;
	    lastPendingUpdate.next = null; // Append pending updates to base queue

	    if (lastBaseUpdate === null) {
	      firstBaseUpdate = firstPendingUpdate;
	    } else {
	      lastBaseUpdate.next = firstPendingUpdate;
	    }

	    lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
	    // we need to transfer the updates to that queue, too. Because the base
	    // queue is a singly-linked list with no cycles, we can append to both
	    // lists and take advantage of structural sharing.
	    // TODO: Pass `current` as argument

	    var current = workInProgress.alternate;

	    if (current !== null) {
	      // This is always non-null on a ClassComponent or HostRoot
	      var currentQueue = current.updateQueue;
	      var currentLastBaseUpdate = currentQueue.lastBaseUpdate;

	      if (currentLastBaseUpdate !== lastBaseUpdate) {
	        if (currentLastBaseUpdate === null) {
	          currentQueue.firstBaseUpdate = firstPendingUpdate;
	        } else {
	          currentLastBaseUpdate.next = firstPendingUpdate;
	        }

	        currentQueue.lastBaseUpdate = lastPendingUpdate;
	      }
	    }
	  } // These values may change as we process the queue.


	  if (firstBaseUpdate !== null) {
	    // Iterate through the list of updates to compute the result.
	    var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
	    // from the original lanes.

	    var newLanes = NoLanes;
	    var newBaseState = null;
	    var newFirstBaseUpdate = null;
	    var newLastBaseUpdate = null;
	    var update = firstBaseUpdate;

	    do {
	      var updateLane = update.lane;
	      var updateEventTime = update.eventTime;

	      if (!isSubsetOfLanes(renderLanes, updateLane)) {
	        // Priority is insufficient. Skip this update. If this is the first
	        // skipped update, the previous update/state is the new base
	        // update/state.
	        var clone = {
	          eventTime: updateEventTime,
	          lane: updateLane,
	          tag: update.tag,
	          payload: update.payload,
	          callback: update.callback,
	          next: null
	        };

	        if (newLastBaseUpdate === null) {
	          newFirstBaseUpdate = newLastBaseUpdate = clone;
	          newBaseState = newState;
	        } else {
	          newLastBaseUpdate = newLastBaseUpdate.next = clone;
	        } // Update the remaining priority in the queue.


	        newLanes = mergeLanes(newLanes, updateLane);
	      } else {
	        // This update does have sufficient priority.
	        if (newLastBaseUpdate !== null) {
	          var _clone = {
	            eventTime: updateEventTime,
	            // This update is going to be committed so we never want uncommit
	            // it. Using NoLane works because 0 is a subset of all bitmasks, so
	            // this will never be skipped by the check above.
	            lane: NoLane,
	            tag: update.tag,
	            payload: update.payload,
	            callback: update.callback,
	            next: null
	          };
	          newLastBaseUpdate = newLastBaseUpdate.next = _clone;
	        } // Process this update.


	        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
	        var callback = update.callback;

	        if (callback !== null && // If the update was already committed, we should not queue its
	        // callback again.
	        update.lane !== NoLane) {
	          workInProgress.flags |= Callback;
	          var effects = queue.effects;

	          if (effects === null) {
	            queue.effects = [update];
	          } else {
	            effects.push(update);
	          }
	        }
	      }

	      update = update.next;

	      if (update === null) {
	        pendingQueue = queue.shared.pending;

	        if (pendingQueue === null) {
	          break;
	        } else {
	          // An update was scheduled from inside a reducer. Add the new
	          // pending updates to the end of the list and keep processing.
	          var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
	          // unravel them when transferring them to the base queue.

	          var _firstPendingUpdate = _lastPendingUpdate.next;
	          _lastPendingUpdate.next = null;
	          update = _firstPendingUpdate;
	          queue.lastBaseUpdate = _lastPendingUpdate;
	          queue.shared.pending = null;
	        }
	      }
	    } while (true);

	    if (newLastBaseUpdate === null) {
	      newBaseState = newState;
	    }

	    queue.baseState = newBaseState;
	    queue.firstBaseUpdate = newFirstBaseUpdate;
	    queue.lastBaseUpdate = newLastBaseUpdate; // Interleaved updates are stored on a separate queue. We aren't going to
	    // process them during this render, but we do need to track which lanes
	    // are remaining.

	    var lastInterleaved = queue.shared.interleaved;

	    if (lastInterleaved !== null) {
	      var interleaved = lastInterleaved;

	      do {
	        newLanes = mergeLanes(newLanes, interleaved.lane);
	        interleaved = interleaved.next;
	      } while (interleaved !== lastInterleaved);
	    } else if (firstBaseUpdate === null) {
	      // `queue.lanes` is used for entangling transitions. We can set it back to
	      // zero once the queue is empty.
	      queue.shared.lanes = NoLanes;
	    } // Set the remaining expiration time to be whatever is remaining in the queue.
	    // This should be fine because the only two other things that contribute to
	    // expiration time are props and context. We're already in the middle of the
	    // begin phase by the time we start processing the queue, so we've already
	    // dealt with the props. Context in components that specify
	    // shouldComponentUpdate is tricky; but we'll have to account for
	    // that regardless.


	    markSkippedUpdateLanes(newLanes);
	    workInProgress.lanes = newLanes;
	    workInProgress.memoizedState = newState;
	  }

	  {
	    currentlyProcessingQueue = null;
	  }
	}

	function callCallback(callback, context) {
	  if (typeof callback !== 'function') {
	    throw new Error('Invalid argument passed as callback. Expected a function. Instead ' + ("received: " + callback));
	  }

	  callback.call(context);
	}

	function resetHasForceUpdateBeforeProcessing() {
	  hasForceUpdate = false;
	}
	function checkHasForceUpdateAfterProcessing() {
	  return hasForceUpdate;
	}
	function commitUpdateQueue(finishedWork, finishedQueue, instance) {
	  // Commit the effects
	  var effects = finishedQueue.effects;
	  finishedQueue.effects = null;

	  if (effects !== null) {
	    for (var i = 0; i < effects.length; i++) {
	      var effect = effects[i];
	      var callback = effect.callback;

	      if (callback !== null) {
	        effect.callback = null;
	        callCallback(callback, instance);
	      }
	    }
	  }
	}

	var NO_CONTEXT = {};
	var contextStackCursor$1 = createCursor(NO_CONTEXT);
	var contextFiberStackCursor = createCursor(NO_CONTEXT);
	var rootInstanceStackCursor = createCursor(NO_CONTEXT);

	function requiredContext(c) {
	  if (c === NO_CONTEXT) {
	    throw new Error('Expected host context to exist. This error is likely caused by a bug ' + 'in React. Please file an issue.');
	  }

	  return c;
	}

	function getRootHostContainer() {
	  var rootInstance = requiredContext(rootInstanceStackCursor.current);
	  return rootInstance;
	}

	function pushHostContainer(fiber, nextRootInstance) {
	  // Push current root instance onto the stack;
	  // This allows us to reset root when portals are popped.
	  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.

	  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
	  // However, we can't just call getRootHostContext() and push it because
	  // we'd have a different number of entries on the stack depending on
	  // whether getRootHostContext() throws somewhere in renderer code or not.
	  // So we push an empty value first. This lets us safely unwind on errors.

	  push(contextStackCursor$1, NO_CONTEXT, fiber);
	  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

	  pop(contextStackCursor$1, fiber);
	  push(contextStackCursor$1, nextRootContext, fiber);
	}

	function popHostContainer(fiber) {
	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	  pop(rootInstanceStackCursor, fiber);
	}

	function getHostContext() {
	  var context = requiredContext(contextStackCursor$1.current);
	  return context;
	}

	function pushHostContext(fiber) {
	  var rootInstance = requiredContext(rootInstanceStackCursor.current);
	  var context = requiredContext(contextStackCursor$1.current);
	  var nextContext = getChildHostContext(context, fiber.type, rootInstance); // Don't push this Fiber's context unless it's unique.

	  if (context === nextContext) {
	    return;
	  } // Track the context and the Fiber that provided it.
	  // This enables us to pop only Fibers that provide unique contexts.


	  push(contextFiberStackCursor, fiber, fiber);
	  push(contextStackCursor$1, nextContext, fiber);
	}

	function popHostContext(fiber) {
	  // Do not pop unless this Fiber provided the current context.
	  // pushHostContext() only pushes Fibers that provide unique contexts.
	  if (contextFiberStackCursor.current !== fiber) {
	    return;
	  }

	  pop(contextStackCursor$1, fiber);
	  pop(contextFiberStackCursor, fiber);
	}

	var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
	// inherited deeply down the subtree. The upper bits only affect
	// this immediate suspense boundary and gets reset each new
	// boundary or suspense list.

	var SubtreeSuspenseContextMask = 1; // Subtree Flags:
	// InvisibleParentSuspenseContext indicates that one of our parent Suspense
	// boundaries is not currently showing visible main content.
	// Either because it is already showing a fallback or is not mounted at all.
	// We can use this to determine if it is desirable to trigger a fallback at
	// the parent. If not, then we might need to trigger undesirable boundaries
	// and/or suspend the commit to avoid hiding the parent content.

	var InvisibleParentSuspenseContext = 1; // Shallow Flags:
	// ForceSuspenseFallback can be used by SuspenseList to force newly added
	// items into their fallback state during one of the render passes.

	var ForceSuspenseFallback = 2;
	var suspenseStackCursor = createCursor(DefaultSuspenseContext);
	function hasSuspenseContext(parentContext, flag) {
	  return (parentContext & flag) !== 0;
	}
	function setDefaultShallowSuspenseContext(parentContext) {
	  return parentContext & SubtreeSuspenseContextMask;
	}
	function setShallowSuspenseContext(parentContext, shallowContext) {
	  return parentContext & SubtreeSuspenseContextMask | shallowContext;
	}
	function addSubtreeSuspenseContext(parentContext, subtreeContext) {
	  return parentContext | subtreeContext;
	}
	function pushSuspenseContext(fiber, newContext) {
	  push(suspenseStackCursor, newContext, fiber);
	}
	function popSuspenseContext(fiber) {
	  pop(suspenseStackCursor, fiber);
	}

	function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
	  // If it was the primary children that just suspended, capture and render the
	  // fallback. Otherwise, don't capture and bubble to the next boundary.
	  var nextState = workInProgress.memoizedState;

	  if (nextState !== null) {
	    if (nextState.dehydrated !== null) {
	      // A dehydrated boundary always captures.
	      return true;
	    }

	    return false;
	  }

	  workInProgress.memoizedProps; // Regular boundaries always capture.

	  {
	    return true;
	  } // If it's a boundary we should avoid, then we prefer to bubble up to the
	}
	function findFirstSuspended(row) {
	  var node = row;

	  while (node !== null) {
	    if (node.tag === SuspenseComponent) {
	      var state = node.memoizedState;

	      if (state !== null) {
	        var dehydrated = state.dehydrated;

	        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
	          return node;
	        }
	      }
	    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
	    // keep track of whether it suspended or not.
	    node.memoizedProps.revealOrder !== undefined) {
	      var didSuspend = (node.flags & DidCapture) !== NoFlags;

	      if (didSuspend) {
	        return node;
	      }
	    } else if (node.child !== null) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === row) {
	      return null;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === row) {
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }

	  return null;
	}

	var NoFlags$1 =
	/*   */
	0; // Represents whether effect should fire.

	var HasEffect =
	/* */
	1; // Represents the phase in which the effect (not the clean-up) fires.

	var Insertion =
	/*  */
	2;
	var Layout =
	/*    */
	4;
	var Passive$1 =
	/*   */
	8;

	// and should be reset before starting a new render.
	// This tracks which mutable sources need to be reset after a render.

	var workInProgressSources = [];
	function resetWorkInProgressVersions() {
	  for (var i = 0; i < workInProgressSources.length; i++) {
	    var mutableSource = workInProgressSources[i];

	    if (isPrimaryRenderer) {
	      mutableSource._workInProgressVersionPrimary = null;
	    } else {
	      mutableSource._workInProgressVersionSecondary = null;
	    }
	  }

	  workInProgressSources.length = 0;
	}
	// This ensures that the version used for server rendering matches the one
	// that is eventually read during hydration.
	// If they don't match there's a potential tear and a full deopt render is required.

	function registerMutableSourceForHydration(root, mutableSource) {
	  var getVersion = mutableSource._getVersion;
	  var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
	  // Retaining it forever may interfere with GC.

	  if (root.mutableSourceEagerHydrationData == null) {
	    root.mutableSourceEagerHydrationData = [mutableSource, version];
	  } else {
	    root.mutableSourceEagerHydrationData.push(mutableSource, version);
	  }
	}

	var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
	    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
	var didWarnAboutMismatchedHooksForComponent;
	var didWarnUncachedGetSnapshot;

	{
	  didWarnAboutMismatchedHooksForComponent = new Set();
	}

	// These are set right before calling the component.
	var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
	// the work-in-progress hook.

	var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
	// current hook list is the list that belongs to the current fiber. The
	// work-in-progress hook list is a new list that will be added to the
	// work-in-progress fiber.

	var currentHook = null;
	var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
	// does not get reset if we do another render pass; only when we're completely
	// finished evaluating this component. This is an optimization so we know
	// whether we need to clear render phase updates after a throw.

	var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
	// gets reset after each attempt.
	// TODO: Maybe there's some way to consolidate this with
	// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.

	var didScheduleRenderPhaseUpdateDuringThisPass = false; // Counts the number of useId hooks in this component.

	var localIdCounter = 0; // Used for ids that are generated completely client-side (i.e. not during
	// hydration). This counter is global, so client ids are not stable across
	// render attempts.

	var globalClientIdCounter = 0;
	var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

	var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
	// The list stores the order of hooks used during the initial render (mount).
	// Subsequent renders (updates) reference this list.

	var hookTypesDev = null;
	var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
	// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
	// When true, such Hooks will always be "remounted". Only used during hot reload.

	var ignorePreviousDependencies = false;

	function mountHookTypesDev() {
	  {
	    var hookName = currentHookNameInDev;

	    if (hookTypesDev === null) {
	      hookTypesDev = [hookName];
	    } else {
	      hookTypesDev.push(hookName);
	    }
	  }
	}

	function updateHookTypesDev() {
	  {
	    var hookName = currentHookNameInDev;

	    if (hookTypesDev !== null) {
	      hookTypesUpdateIndexDev++;

	      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
	        warnOnHookMismatchInDev(hookName);
	      }
	    }
	  }
	}

	function checkDepsAreArrayDev(deps) {
	  {
	    if (deps !== undefined && deps !== null && !isArray(deps)) {
	      // Verify deps, but only on mount to avoid extra checks.
	      // It's unlikely their type would change as usually you define them inline.
	      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
	    }
	  }
	}

	function warnOnHookMismatchInDev(currentHookName) {
	  {
	    var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);

	    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
	      didWarnAboutMismatchedHooksForComponent.add(componentName);

	      if (hookTypesDev !== null) {
	        var table = '';
	        var secondColumnStart = 30;

	        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
	          var oldHookName = hookTypesDev[i];
	          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
	          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
	          // lol @ IE not supporting String#repeat

	          while (row.length < secondColumnStart) {
	            row += ' ';
	          }

	          row += newHookName + '\n';
	          table += row;
	        }

	        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
	      }
	    }
	  }
	}

	function throwInvalidHookError() {
	  throw new Error('Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' + ' one of the following reasons:\n' + '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' + '2. You might be breaking the Rules of Hooks\n' + '3. You might have more than one copy of React in the same app\n' + 'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.');
	}

	function areHookInputsEqual(nextDeps, prevDeps) {
	  {
	    if (ignorePreviousDependencies) {
	      // Only true when this component is being hot reloaded.
	      return false;
	    }
	  }

	  if (prevDeps === null) {
	    {
	      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
	    }

	    return false;
	  }

	  {
	    // Don't bother comparing lengths in prod because these arrays should be
	    // passed inline.
	    if (nextDeps.length !== prevDeps.length) {
	      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
	    }
	  }

	  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
	    if (objectIs(nextDeps[i], prevDeps[i])) {
	      continue;
	    }

	    return false;
	  }

	  return true;
	}

	function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
	  renderLanes = nextRenderLanes;
	  currentlyRenderingFiber$1 = workInProgress;

	  {
	    hookTypesDev = current !== null ? current._debugHookTypes : null;
	    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

	    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
	  }

	  workInProgress.memoizedState = null;
	  workInProgress.updateQueue = null;
	  workInProgress.lanes = NoLanes; // The following should have already been reset
	  // currentHook = null;
	  // workInProgressHook = null;
	  // didScheduleRenderPhaseUpdate = false;
	  // localIdCounter = 0;
	  // TODO Warn if no hooks are used at all during mount, then some are used during update.
	  // Currently we will identify the update render as a mount because memoizedState === null.
	  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
	  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
	  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
	  // so memoizedState would be null during updates and mounts.

	  {
	    if (current !== null && current.memoizedState !== null) {
	      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
	    } else if (hookTypesDev !== null) {
	      // This dispatcher handles an edge case where a component is updating,
	      // but no stateful hooks have been used.
	      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
	      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
	      // This dispatcher does that.
	      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
	    } else {
	      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
	    }
	  }

	  var children = Component(props, secondArg); // Check if there was a render phase update

	  if (didScheduleRenderPhaseUpdateDuringThisPass) {
	    // Keep rendering in a loop for as long as render phase updates continue to
	    // be scheduled. Use a counter to prevent infinite loops.
	    var numberOfReRenders = 0;

	    do {
	      didScheduleRenderPhaseUpdateDuringThisPass = false;
	      localIdCounter = 0;

	      if (numberOfReRenders >= RE_RENDER_LIMIT) {
	        throw new Error('Too many re-renders. React limits the number of renders to prevent ' + 'an infinite loop.');
	      }

	      numberOfReRenders += 1;

	      {
	        // Even when hot reloading, allow dependencies to stabilize
	        // after first render to prevent infinite render phase updates.
	        ignorePreviousDependencies = false;
	      } // Start over from the beginning of the list


	      currentHook = null;
	      workInProgressHook = null;
	      workInProgress.updateQueue = null;

	      {
	        // Also validate hook order for cascading updates.
	        hookTypesUpdateIndexDev = -1;
	      }

	      ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;
	      children = Component(props, secondArg);
	    } while (didScheduleRenderPhaseUpdateDuringThisPass);
	  } // We can assume the previous dispatcher is always this one, since we set it
	  // at the beginning of the render phase and there's no re-entrance.


	  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

	  {
	    workInProgress._debugHookTypes = hookTypesDev;
	  } // This check uses currentHook so that it works the same in DEV and prod bundles.
	  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


	  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
	  renderLanes = NoLanes;
	  currentlyRenderingFiber$1 = null;
	  currentHook = null;
	  workInProgressHook = null;

	  {
	    currentHookNameInDev = null;
	    hookTypesDev = null;
	    hookTypesUpdateIndexDev = -1; // Confirm that a static flag was not added or removed since the last
	    // render. If this fires, it suggests that we incorrectly reset the static
	    // flags in some other part of the codebase. This has happened before, for
	    // example, in the SuspenseList implementation.

	    if (current !== null && (current.flags & StaticMask) !== (workInProgress.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
	    // and creates false positives. To make this work in legacy mode, we'd
	    // need to mark fibers that commit in an incomplete state, somehow. For
	    // now I'll disable the warning that most of the bugs that would trigger
	    // it are either exclusive to concurrent mode or exist in both.
	    (current.mode & ConcurrentMode) !== NoMode) {
	      error('Internal React error: Expected static flag was missing. Please ' + 'notify the React team.');
	    }
	  }

	  didScheduleRenderPhaseUpdate = false; // This is reset by checkDidRenderIdHook
	  // localIdCounter = 0;

	  if (didRenderTooFewHooks) {
	    throw new Error('Rendered fewer hooks than expected. This may be caused by an accidental ' + 'early return statement.');
	  }

	  return children;
	}
	function checkDidRenderIdHook() {
	  // This should be called immediately after every renderWithHooks call.
	  // Conceptually, it's part of the return value of renderWithHooks; it's only a
	  // separate function to avoid using an array tuple.
	  var didRenderIdHook = localIdCounter !== 0;
	  localIdCounter = 0;
	  return didRenderIdHook;
	}
	function bailoutHooks(current, workInProgress, lanes) {
	  workInProgress.updateQueue = current.updateQueue; // TODO: Don't need to reset the flags here, because they're reset in the
	  // complete phase (bubbleProperties).

	  if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
	    workInProgress.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
	  } else {
	    workInProgress.flags &= ~(Passive | Update);
	  }

	  current.lanes = removeLanes(current.lanes, lanes);
	}
	function resetHooksAfterThrow() {
	  // We can assume the previous dispatcher is always this one, since we set it
	  // at the beginning of the render phase and there's no re-entrance.
	  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

	  if (didScheduleRenderPhaseUpdate) {
	    // There were render phase updates. These are only valid for this render
	    // phase, which we are now aborting. Remove the updates from the queues so
	    // they do not persist to the next render. Do not remove updates from hooks
	    // that weren't processed.
	    //
	    // Only reset the updates from the queue if it has a clone. If it does
	    // not have a clone, that means it wasn't processed, and the updates were
	    // scheduled before we entered the render phase.
	    var hook = currentlyRenderingFiber$1.memoizedState;

	    while (hook !== null) {
	      var queue = hook.queue;

	      if (queue !== null) {
	        queue.pending = null;
	      }

	      hook = hook.next;
	    }

	    didScheduleRenderPhaseUpdate = false;
	  }

	  renderLanes = NoLanes;
	  currentlyRenderingFiber$1 = null;
	  currentHook = null;
	  workInProgressHook = null;

	  {
	    hookTypesDev = null;
	    hookTypesUpdateIndexDev = -1;
	    currentHookNameInDev = null;
	    isUpdatingOpaqueValueInRenderPhase = false;
	  }

	  didScheduleRenderPhaseUpdateDuringThisPass = false;
	  localIdCounter = 0;
	}

	function mountWorkInProgressHook() {
	  var hook = {
	    memoizedState: null,
	    baseState: null,
	    baseQueue: null,
	    queue: null,
	    next: null
	  };

	  if (workInProgressHook === null) {
	    // This is the first hook in the list
	    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
	  } else {
	    // Append to the end of the list
	    workInProgressHook = workInProgressHook.next = hook;
	  }

	  return workInProgressHook;
	}

	function updateWorkInProgressHook() {
	  // This function is used both for updates and for re-renders triggered by a
	  // render phase update. It assumes there is either a current hook we can
	  // clone, or a work-in-progress hook from a previous render pass that we can
	  // use as a base. When we reach the end of the base list, we must switch to
	  // the dispatcher used for mounts.
	  var nextCurrentHook;

	  if (currentHook === null) {
	    var current = currentlyRenderingFiber$1.alternate;

	    if (current !== null) {
	      nextCurrentHook = current.memoizedState;
	    } else {
	      nextCurrentHook = null;
	    }
	  } else {
	    nextCurrentHook = currentHook.next;
	  }

	  var nextWorkInProgressHook;

	  if (workInProgressHook === null) {
	    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
	  } else {
	    nextWorkInProgressHook = workInProgressHook.next;
	  }

	  if (nextWorkInProgressHook !== null) {
	    // There's already a work-in-progress. Reuse it.
	    workInProgressHook = nextWorkInProgressHook;
	    nextWorkInProgressHook = workInProgressHook.next;
	    currentHook = nextCurrentHook;
	  } else {
	    // Clone from the current hook.
	    if (nextCurrentHook === null) {
	      throw new Error('Rendered more hooks than during the previous render.');
	    }

	    currentHook = nextCurrentHook;
	    var newHook = {
	      memoizedState: currentHook.memoizedState,
	      baseState: currentHook.baseState,
	      baseQueue: currentHook.baseQueue,
	      queue: currentHook.queue,
	      next: null
	    };

	    if (workInProgressHook === null) {
	      // This is the first hook in the list.
	      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
	    } else {
	      // Append to the end of the list.
	      workInProgressHook = workInProgressHook.next = newHook;
	    }
	  }

	  return workInProgressHook;
	}

	function createFunctionComponentUpdateQueue() {
	  return {
	    lastEffect: null,
	    stores: null
	  };
	}

	function basicStateReducer(state, action) {
	  // $FlowFixMe: Flow doesn't like mixed types
	  return typeof action === 'function' ? action(state) : action;
	}

	function mountReducer(reducer, initialArg, init) {
	  var hook = mountWorkInProgressHook();
	  var initialState;

	  if (init !== undefined) {
	    initialState = init(initialArg);
	  } else {
	    initialState = initialArg;
	  }

	  hook.memoizedState = hook.baseState = initialState;
	  var queue = {
	    pending: null,
	    interleaved: null,
	    lanes: NoLanes,
	    dispatch: null,
	    lastRenderedReducer: reducer,
	    lastRenderedState: initialState
	  };
	  hook.queue = queue;
	  var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
	  return [hook.memoizedState, dispatch];
	}

	function updateReducer(reducer, initialArg, init) {
	  var hook = updateWorkInProgressHook();
	  var queue = hook.queue;

	  if (queue === null) {
	    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
	  }

	  queue.lastRenderedReducer = reducer;
	  var current = currentHook; // The last rebase update that is NOT part of the base state.

	  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

	  var pendingQueue = queue.pending;

	  if (pendingQueue !== null) {
	    // We have new updates that haven't been processed yet.
	    // We'll add them to the base queue.
	    if (baseQueue !== null) {
	      // Merge the pending queue and the base queue.
	      var baseFirst = baseQueue.next;
	      var pendingFirst = pendingQueue.next;
	      baseQueue.next = pendingFirst;
	      pendingQueue.next = baseFirst;
	    }

	    {
	      if (current.baseQueue !== baseQueue) {
	        // Internal invariant that should never happen, but feasibly could in
	        // the future if we implement resuming, or some form of that.
	        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');
	      }
	    }

	    current.baseQueue = baseQueue = pendingQueue;
	    queue.pending = null;
	  }

	  if (baseQueue !== null) {
	    // We have a queue to process.
	    var first = baseQueue.next;
	    var newState = current.baseState;
	    var newBaseState = null;
	    var newBaseQueueFirst = null;
	    var newBaseQueueLast = null;
	    var update = first;

	    do {
	      var updateLane = update.lane;

	      if (!isSubsetOfLanes(renderLanes, updateLane)) {
	        // Priority is insufficient. Skip this update. If this is the first
	        // skipped update, the previous update/state is the new base
	        // update/state.
	        var clone = {
	          lane: updateLane,
	          action: update.action,
	          hasEagerState: update.hasEagerState,
	          eagerState: update.eagerState,
	          next: null
	        };

	        if (newBaseQueueLast === null) {
	          newBaseQueueFirst = newBaseQueueLast = clone;
	          newBaseState = newState;
	        } else {
	          newBaseQueueLast = newBaseQueueLast.next = clone;
	        } // Update the remaining priority in the queue.
	        // TODO: Don't need to accumulate this. Instead, we can remove
	        // renderLanes from the original lanes.


	        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
	        markSkippedUpdateLanes(updateLane);
	      } else {
	        // This update does have sufficient priority.
	        if (newBaseQueueLast !== null) {
	          var _clone = {
	            // This update is going to be committed so we never want uncommit
	            // it. Using NoLane works because 0 is a subset of all bitmasks, so
	            // this will never be skipped by the check above.
	            lane: NoLane,
	            action: update.action,
	            hasEagerState: update.hasEagerState,
	            eagerState: update.eagerState,
	            next: null
	          };
	          newBaseQueueLast = newBaseQueueLast.next = _clone;
	        } // Process this update.


	        if (update.hasEagerState) {
	          // If this update is a state update (not a reducer) and was processed eagerly,
	          // we can use the eagerly computed state
	          newState = update.eagerState;
	        } else {
	          var action = update.action;
	          newState = reducer(newState, action);
	        }
	      }

	      update = update.next;
	    } while (update !== null && update !== first);

	    if (newBaseQueueLast === null) {
	      newBaseState = newState;
	    } else {
	      newBaseQueueLast.next = newBaseQueueFirst;
	    } // Mark that the fiber performed work, but only if the new state is
	    // different from the current state.


	    if (!objectIs(newState, hook.memoizedState)) {
	      markWorkInProgressReceivedUpdate();
	    }

	    hook.memoizedState = newState;
	    hook.baseState = newBaseState;
	    hook.baseQueue = newBaseQueueLast;
	    queue.lastRenderedState = newState;
	  } // Interleaved updates are stored on a separate queue. We aren't going to
	  // process them during this render, but we do need to track which lanes
	  // are remaining.


	  var lastInterleaved = queue.interleaved;

	  if (lastInterleaved !== null) {
	    var interleaved = lastInterleaved;

	    do {
	      var interleavedLane = interleaved.lane;
	      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
	      markSkippedUpdateLanes(interleavedLane);
	      interleaved = interleaved.next;
	    } while (interleaved !== lastInterleaved);
	  } else if (baseQueue === null) {
	    // `queue.lanes` is used for entangling transitions. We can set it back to
	    // zero once the queue is empty.
	    queue.lanes = NoLanes;
	  }

	  var dispatch = queue.dispatch;
	  return [hook.memoizedState, dispatch];
	}

	function rerenderReducer(reducer, initialArg, init) {
	  var hook = updateWorkInProgressHook();
	  var queue = hook.queue;

	  if (queue === null) {
	    throw new Error('Should have a queue. This is likely a bug in React. Please file an issue.');
	  }

	  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
	  // work-in-progress hook.

	  var dispatch = queue.dispatch;
	  var lastRenderPhaseUpdate = queue.pending;
	  var newState = hook.memoizedState;

	  if (lastRenderPhaseUpdate !== null) {
	    // The queue doesn't persist past this render pass.
	    queue.pending = null;
	    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
	    var update = firstRenderPhaseUpdate;

	    do {
	      // Process this render phase update. We don't have to check the
	      // priority because it will always be the same as the current
	      // render's.
	      var action = update.action;
	      newState = reducer(newState, action);
	      update = update.next;
	    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
	    // different from the current state.


	    if (!objectIs(newState, hook.memoizedState)) {
	      markWorkInProgressReceivedUpdate();
	    }

	    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
	    // the base state unless the queue is empty.
	    // TODO: Not sure if this is the desired semantics, but it's what we
	    // do for gDSFP. I can't remember why.

	    if (hook.baseQueue === null) {
	      hook.baseState = newState;
	    }

	    queue.lastRenderedState = newState;
	  }

	  return [newState, dispatch];
	}

	function mountMutableSource(source, getSnapshot, subscribe) {
	  {
	    return undefined;
	  }
	}

	function updateMutableSource(source, getSnapshot, subscribe) {
	  {
	    return undefined;
	  }
	}

	function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
	  var fiber = currentlyRenderingFiber$1;
	  var hook = mountWorkInProgressHook();
	  var nextSnapshot;
	  var isHydrating = getIsHydrating();

	  if (isHydrating) {
	    if (getServerSnapshot === undefined) {
	      throw new Error('Missing getServerSnapshot, which is required for ' + 'server-rendered content. Will revert to client rendering.');
	    }

	    nextSnapshot = getServerSnapshot();

	    {
	      if (!didWarnUncachedGetSnapshot) {
	        if (nextSnapshot !== getServerSnapshot()) {
	          error('The result of getServerSnapshot should be cached to avoid an infinite loop');

	          didWarnUncachedGetSnapshot = true;
	        }
	      }
	    }
	  } else {
	    nextSnapshot = getSnapshot();

	    {
	      if (!didWarnUncachedGetSnapshot) {
	        var cachedSnapshot = getSnapshot();

	        if (!objectIs(nextSnapshot, cachedSnapshot)) {
	          error('The result of getSnapshot should be cached to avoid an infinite loop');

	          didWarnUncachedGetSnapshot = true;
	        }
	      }
	    } // Unless we're rendering a blocking lane, schedule a consistency check.
	    // Right before committing, we will walk the tree and check if any of the
	    // stores were mutated.
	    //
	    // We won't do this if we're hydrating server-rendered content, because if
	    // the content is stale, it's already visible anyway. Instead we'll patch
	    // it up in a passive effect.


	    var root = getWorkInProgressRoot();

	    if (root === null) {
	      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
	    }

	    if (!includesBlockingLane(root, renderLanes)) {
	      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
	    }
	  } // Read the current snapshot from the store on every render. This breaks the
	  // normal rules of React, and only works because store updates are
	  // always synchronous.


	  hook.memoizedState = nextSnapshot;
	  var inst = {
	    value: nextSnapshot,
	    getSnapshot: getSnapshot
	  };
	  hook.queue = inst; // Schedule an effect to subscribe to the store.

	  mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Schedule an effect to update the mutable instance fields. We will update
	  // this whenever subscribe, getSnapshot, or value changes. Because there's no
	  // clean-up function, and we track the deps correctly, we can call pushEffect
	  // directly, without storing any additional state. For the same reason, we
	  // don't need to set a static flag, either.
	  // TODO: We can move this to the passive phase once we add a pre-commit
	  // consistency check. See the next comment.

	  fiber.flags |= Passive;
	  pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null);
	  return nextSnapshot;
	}

	function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
	  var fiber = currentlyRenderingFiber$1;
	  var hook = updateWorkInProgressHook(); // Read the current snapshot from the store on every render. This breaks the
	  // normal rules of React, and only works because store updates are
	  // always synchronous.

	  var nextSnapshot = getSnapshot();

	  {
	    if (!didWarnUncachedGetSnapshot) {
	      var cachedSnapshot = getSnapshot();

	      if (!objectIs(nextSnapshot, cachedSnapshot)) {
	        error('The result of getSnapshot should be cached to avoid an infinite loop');

	        didWarnUncachedGetSnapshot = true;
	      }
	    }
	  }

	  var prevSnapshot = hook.memoizedState;
	  var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);

	  if (snapshotChanged) {
	    hook.memoizedState = nextSnapshot;
	    markWorkInProgressReceivedUpdate();
	  }

	  var inst = hook.queue;
	  updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]); // Whenever getSnapshot or subscribe changes, we need to check in the
	  // commit phase if there was an interleaved mutation. In concurrent mode
	  // this can happen all the time, but even in synchronous mode, an earlier
	  // effect may have mutated the store.

	  if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
	  // checking whether we scheduled a subscription effect above.
	  workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
	    fiber.flags |= Passive;
	    pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), undefined, null); // Unless we're rendering a blocking lane, schedule a consistency check.
	    // Right before committing, we will walk the tree and check if any of the
	    // stores were mutated.

	    var root = getWorkInProgressRoot();

	    if (root === null) {
	      throw new Error('Expected a work-in-progress root. This is a bug in React. Please file an issue.');
	    }

	    if (!includesBlockingLane(root, renderLanes)) {
	      pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
	    }
	  }

	  return nextSnapshot;
	}

	function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
	  fiber.flags |= StoreConsistency;
	  var check = {
	    getSnapshot: getSnapshot,
	    value: renderedSnapshot
	  };
	  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

	  if (componentUpdateQueue === null) {
	    componentUpdateQueue = createFunctionComponentUpdateQueue();
	    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
	    componentUpdateQueue.stores = [check];
	  } else {
	    var stores = componentUpdateQueue.stores;

	    if (stores === null) {
	      componentUpdateQueue.stores = [check];
	    } else {
	      stores.push(check);
	    }
	  }
	}

	function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
	  // These are updated in the passive phase
	  inst.value = nextSnapshot;
	  inst.getSnapshot = getSnapshot; // Something may have been mutated in between render and commit. This could
	  // have been in an event that fired before the passive effects, or it could
	  // have been in a layout effect. In that case, we would have used the old
	  // snapsho and getSnapshot values to bail out. We need to check one more time.

	  if (checkIfSnapshotChanged(inst)) {
	    // Force a re-render.
	    forceStoreRerender(fiber);
	  }
	}

	function subscribeToStore(fiber, inst, subscribe) {
	  var handleStoreChange = function () {
	    // The store changed. Check if the snapshot changed since the last time we
	    // read from the store.
	    if (checkIfSnapshotChanged(inst)) {
	      // Force a re-render.
	      forceStoreRerender(fiber);
	    }
	  }; // Subscribe to the store and return a clean-up function.


	  return subscribe(handleStoreChange);
	}

	function checkIfSnapshotChanged(inst) {
	  var latestGetSnapshot = inst.getSnapshot;
	  var prevValue = inst.value;

	  try {
	    var nextValue = latestGetSnapshot();
	    return !objectIs(prevValue, nextValue);
	  } catch (error) {
	    return true;
	  }
	}

	function forceStoreRerender(fiber) {
	  var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	  if (root !== null) {
	    scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	  }
	}

	function mountState(initialState) {
	  var hook = mountWorkInProgressHook();

	  if (typeof initialState === 'function') {
	    // $FlowFixMe: Flow doesn't like mixed types
	    initialState = initialState();
	  }

	  hook.memoizedState = hook.baseState = initialState;
	  var queue = {
	    pending: null,
	    interleaved: null,
	    lanes: NoLanes,
	    dispatch: null,
	    lastRenderedReducer: basicStateReducer,
	    lastRenderedState: initialState
	  };
	  hook.queue = queue;
	  var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
	  return [hook.memoizedState, dispatch];
	}

	function updateState(initialState) {
	  return updateReducer(basicStateReducer);
	}

	function rerenderState(initialState) {
	  return rerenderReducer(basicStateReducer);
	}

	function pushEffect(tag, create, destroy, deps) {
	  var effect = {
	    tag: tag,
	    create: create,
	    destroy: destroy,
	    deps: deps,
	    // Circular
	    next: null
	  };
	  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

	  if (componentUpdateQueue === null) {
	    componentUpdateQueue = createFunctionComponentUpdateQueue();
	    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
	    componentUpdateQueue.lastEffect = effect.next = effect;
	  } else {
	    var lastEffect = componentUpdateQueue.lastEffect;

	    if (lastEffect === null) {
	      componentUpdateQueue.lastEffect = effect.next = effect;
	    } else {
	      var firstEffect = lastEffect.next;
	      lastEffect.next = effect;
	      effect.next = firstEffect;
	      componentUpdateQueue.lastEffect = effect;
	    }
	  }

	  return effect;
	}

	function mountRef(initialValue) {
	  var hook = mountWorkInProgressHook();

	  {
	    var _ref2 = {
	      current: initialValue
	    };
	    hook.memoizedState = _ref2;
	    return _ref2;
	  }
	}

	function updateRef(initialValue) {
	  var hook = updateWorkInProgressHook();
	  return hook.memoizedState;
	}

	function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  currentlyRenderingFiber$1.flags |= fiberFlags;
	  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
	}

	function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var destroy = undefined;

	  if (currentHook !== null) {
	    var prevEffect = currentHook.memoizedState;
	    destroy = prevEffect.destroy;

	    if (nextDeps !== null) {
	      var prevDeps = prevEffect.deps;

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
	        return;
	      }
	    }
	  }

	  currentlyRenderingFiber$1.flags |= fiberFlags;
	  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
	}

	function mountEffect(create, deps) {
	  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
	    return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
	  } else {
	    return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
	  }
	}

	function updateEffect(create, deps) {
	  return updateEffectImpl(Passive, Passive$1, create, deps);
	}

	function mountInsertionEffect(create, deps) {
	  return mountEffectImpl(Update, Insertion, create, deps);
	}

	function updateInsertionEffect(create, deps) {
	  return updateEffectImpl(Update, Insertion, create, deps);
	}

	function mountLayoutEffect(create, deps) {
	  var fiberFlags = Update;

	  {
	    fiberFlags |= LayoutStatic;
	  }

	  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
	    fiberFlags |= MountLayoutDev;
	  }

	  return mountEffectImpl(fiberFlags, Layout, create, deps);
	}

	function updateLayoutEffect(create, deps) {
	  return updateEffectImpl(Update, Layout, create, deps);
	}

	function imperativeHandleEffect(create, ref) {
	  if (typeof ref === 'function') {
	    var refCallback = ref;

	    var _inst = create();

	    refCallback(_inst);
	    return function () {
	      refCallback(null);
	    };
	  } else if (ref !== null && ref !== undefined) {
	    var refObject = ref;

	    {
	      if (!refObject.hasOwnProperty('current')) {
	        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
	      }
	    }

	    var _inst2 = create();

	    refObject.current = _inst2;
	    return function () {
	      refObject.current = null;
	    };
	  }
	}

	function mountImperativeHandle(ref, create, deps) {
	  {
	    if (typeof create !== 'function') {
	      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
	    }
	  } // TODO: If deps are provided, should we skip comparing the ref itself?


	  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
	  var fiberFlags = Update;

	  {
	    fiberFlags |= LayoutStatic;
	  }

	  if ( (currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
	    fiberFlags |= MountLayoutDev;
	  }

	  return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
	}

	function updateImperativeHandle(ref, create, deps) {
	  {
	    if (typeof create !== 'function') {
	      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
	    }
	  } // TODO: If deps are provided, should we skip comparing the ref itself?


	  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
	  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
	}

	function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
	  // The react-debug-hooks package injects its own implementation
	  // so that e.g. DevTools can display custom hook values.
	}

	var updateDebugValue = mountDebugValue;

	function mountCallback(callback, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  hook.memoizedState = [callback, nextDeps];
	  return callback;
	}

	function updateCallback(callback, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var prevState = hook.memoizedState;

	  if (prevState !== null) {
	    if (nextDeps !== null) {
	      var prevDeps = prevState[1];

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        return prevState[0];
	      }
	    }
	  }

	  hook.memoizedState = [callback, nextDeps];
	  return callback;
	}

	function mountMemo(nextCreate, deps) {
	  var hook = mountWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var nextValue = nextCreate();
	  hook.memoizedState = [nextValue, nextDeps];
	  return nextValue;
	}

	function updateMemo(nextCreate, deps) {
	  var hook = updateWorkInProgressHook();
	  var nextDeps = deps === undefined ? null : deps;
	  var prevState = hook.memoizedState;

	  if (prevState !== null) {
	    // Assume these are defined. If they're not, areHookInputsEqual will warn.
	    if (nextDeps !== null) {
	      var prevDeps = prevState[1];

	      if (areHookInputsEqual(nextDeps, prevDeps)) {
	        return prevState[0];
	      }
	    }
	  }

	  var nextValue = nextCreate();
	  hook.memoizedState = [nextValue, nextDeps];
	  return nextValue;
	}

	function mountDeferredValue(value) {
	  var hook = mountWorkInProgressHook();
	  hook.memoizedState = value;
	  return value;
	}

	function updateDeferredValue(value) {
	  var hook = updateWorkInProgressHook();
	  var resolvedCurrentHook = currentHook;
	  var prevValue = resolvedCurrentHook.memoizedState;
	  return updateDeferredValueImpl(hook, prevValue, value);
	}

	function rerenderDeferredValue(value) {
	  var hook = updateWorkInProgressHook();

	  if (currentHook === null) {
	    // This is a rerender during a mount.
	    hook.memoizedState = value;
	    return value;
	  } else {
	    // This is a rerender during an update.
	    var prevValue = currentHook.memoizedState;
	    return updateDeferredValueImpl(hook, prevValue, value);
	  }
	}

	function updateDeferredValueImpl(hook, prevValue, value) {
	  var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);

	  if (shouldDeferValue) {
	    // This is an urgent update. If the value has changed, keep using the
	    // previous value and spawn a deferred render to update it later.
	    if (!objectIs(value, prevValue)) {
	      // Schedule a deferred render
	      var deferredLane = claimNextTransitionLane();
	      currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
	      markSkippedUpdateLanes(deferredLane); // Set this to true to indicate that the rendered value is inconsistent
	      // from the latest value. The name "baseState" doesn't really match how we
	      // use it because we're reusing a state hook field instead of creating a
	      // new one.

	      hook.baseState = true;
	    } // Reuse the previous value


	    return prevValue;
	  } else {
	    // This is not an urgent update, so we can use the latest value regardless
	    // of what it is. No need to defer it.
	    // However, if we're currently inside a spawned render, then we need to mark
	    // this as an update to prevent the fiber from bailing out.
	    //
	    // `baseState` is true when the current value is different from the rendered
	    // value. The name doesn't really match how we use it because we're reusing
	    // a state hook field instead of creating a new one.
	    if (hook.baseState) {
	      // Flip this back to false.
	      hook.baseState = false;
	      markWorkInProgressReceivedUpdate();
	    }

	    hook.memoizedState = value;
	    return value;
	  }
	}

	function startTransition(setPending, callback, options) {
	  var previousPriority = getCurrentUpdatePriority();
	  setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
	  setPending(true);
	  var prevTransition = ReactCurrentBatchConfig$1.transition;
	  ReactCurrentBatchConfig$1.transition = {};
	  var currentTransition = ReactCurrentBatchConfig$1.transition;

	  {
	    ReactCurrentBatchConfig$1.transition._updatedFibers = new Set();
	  }

	  try {
	    setPending(false);
	    callback();
	  } finally {
	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig$1.transition = prevTransition;

	    {
	      if (prevTransition === null && currentTransition._updatedFibers) {
	        var updatedFibersCount = currentTransition._updatedFibers.size;

	        if (updatedFibersCount > 10) {
	          warn('Detected a large number of updates inside startTransition. ' + 'If this is due to a subscription please re-write it to use React provided hooks. ' + 'Otherwise concurrent mode guarantees are off the table.');
	        }

	        currentTransition._updatedFibers.clear();
	      }
	    }
	  }
	}

	function mountTransition() {
	  var _mountState = mountState(false),
	      isPending = _mountState[0],
	      setPending = _mountState[1]; // The `start` method never changes.


	  var start = startTransition.bind(null, setPending);
	  var hook = mountWorkInProgressHook();
	  hook.memoizedState = start;
	  return [isPending, start];
	}

	function updateTransition() {
	  var _updateState = updateState(),
	      isPending = _updateState[0];

	  var hook = updateWorkInProgressHook();
	  var start = hook.memoizedState;
	  return [isPending, start];
	}

	function rerenderTransition() {
	  var _rerenderState = rerenderState(),
	      isPending = _rerenderState[0];

	  var hook = updateWorkInProgressHook();
	  var start = hook.memoizedState;
	  return [isPending, start];
	}

	var isUpdatingOpaqueValueInRenderPhase = false;
	function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
	  {
	    return isUpdatingOpaqueValueInRenderPhase;
	  }
	}

	function mountId() {
	  var hook = mountWorkInProgressHook();
	  var root = getWorkInProgressRoot(); // TODO: In Fizz, id generation is specific to each server config. Maybe we
	  // should do this in Fiber, too? Deferring this decision for now because
	  // there's no other place to store the prefix except for an internal field on
	  // the public createRoot object, which the fiber tree does not currently have
	  // a reference to.

	  var identifierPrefix = root.identifierPrefix;
	  var id;

	  if (getIsHydrating()) {
	    var treeId = getTreeId(); // Use a captial R prefix for server-generated ids.

	    id = ':' + identifierPrefix + 'R' + treeId; // Unless this is the first id at this level, append a number at the end
	    // that represents the position of this useId hook among all the useId
	    // hooks for this fiber.

	    var localId = localIdCounter++;

	    if (localId > 0) {
	      id += 'H' + localId.toString(32);
	    }

	    id += ':';
	  } else {
	    // Use a lowercase r prefix for client-generated ids.
	    var globalClientId = globalClientIdCounter++;
	    id = ':' + identifierPrefix + 'r' + globalClientId.toString(32) + ':';
	  }

	  hook.memoizedState = id;
	  return id;
	}

	function updateId() {
	  var hook = updateWorkInProgressHook();
	  var id = hook.memoizedState;
	  return id;
	}

	function dispatchReducerAction(fiber, queue, action) {
	  {
	    if (typeof arguments[3] === 'function') {
	      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
	    }
	  }

	  var lane = requestUpdateLane(fiber);
	  var update = {
	    lane: lane,
	    action: action,
	    hasEagerState: false,
	    eagerState: null,
	    next: null
	  };

	  if (isRenderPhaseUpdate(fiber)) {
	    enqueueRenderPhaseUpdate(queue, update);
	  } else {
	    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);

	    if (root !== null) {
	      var eventTime = requestEventTime();
	      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	      entangleTransitionUpdate(root, queue, lane);
	    }
	  }

	  markUpdateInDevTools(fiber, lane);
	}

	function dispatchSetState(fiber, queue, action) {
	  {
	    if (typeof arguments[3] === 'function') {
	      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
	    }
	  }

	  var lane = requestUpdateLane(fiber);
	  var update = {
	    lane: lane,
	    action: action,
	    hasEagerState: false,
	    eagerState: null,
	    next: null
	  };

	  if (isRenderPhaseUpdate(fiber)) {
	    enqueueRenderPhaseUpdate(queue, update);
	  } else {
	    var alternate = fiber.alternate;

	    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
	      // The queue is currently empty, which means we can eagerly compute the
	      // next state before entering the render phase. If the new state is the
	      // same as the current state, we may be able to bail out entirely.
	      var lastRenderedReducer = queue.lastRenderedReducer;

	      if (lastRenderedReducer !== null) {
	        var prevDispatcher;

	        {
	          prevDispatcher = ReactCurrentDispatcher$1.current;
	          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
	        }

	        try {
	          var currentState = queue.lastRenderedState;
	          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
	          // it, on the update object. If the reducer hasn't changed by the
	          // time we enter the render phase, then the eager state can be used
	          // without calling the reducer again.

	          update.hasEagerState = true;
	          update.eagerState = eagerState;

	          if (objectIs(eagerState, currentState)) {
	            // Fast path. We can bail out without scheduling React to re-render.
	            // It's still possible that we'll need to rebase this update later,
	            // if the component re-renders for a different reason and by that
	            // time the reducer has changed.
	            // TODO: Do we still need to entangle transitions in this case?
	            enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
	            return;
	          }
	        } catch (error) {// Suppress the error. It will throw again in the render phase.
	        } finally {
	          {
	            ReactCurrentDispatcher$1.current = prevDispatcher;
	          }
	        }
	      }
	    }

	    var root = enqueueConcurrentHookUpdate(fiber, queue, update, lane);

	    if (root !== null) {
	      var eventTime = requestEventTime();
	      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	      entangleTransitionUpdate(root, queue, lane);
	    }
	  }

	  markUpdateInDevTools(fiber, lane);
	}

	function isRenderPhaseUpdate(fiber) {
	  var alternate = fiber.alternate;
	  return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
	}

	function enqueueRenderPhaseUpdate(queue, update) {
	  // This is a render phase update. Stash it in a lazily-created map of
	  // queue -> linked list of updates. After this render pass, we'll restart
	  // and apply the stashed updates on top of the work-in-progress hook.
	  didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
	  var pending = queue.pending;

	  if (pending === null) {
	    // This is the first update. Create a circular list.
	    update.next = update;
	  } else {
	    update.next = pending.next;
	    pending.next = update;
	  }

	  queue.pending = update;
	} // TODO: Move to ReactFiberConcurrentUpdates?


	function entangleTransitionUpdate(root, queue, lane) {
	  if (isTransitionLane(lane)) {
	    var queueLanes = queue.lanes; // If any entangled lanes are no longer pending on the root, then they
	    // must have finished. We can remove them from the shared queue, which
	    // represents a superset of the actually pending lanes. In some cases we
	    // may entangle more than we need to, but that's OK. In fact it's worse if
	    // we *don't* entangle when we should.

	    queueLanes = intersectLanes(queueLanes, root.pendingLanes); // Entangle the new transition lane with the other transition lanes.

	    var newQueueLanes = mergeLanes(queueLanes, lane);
	    queue.lanes = newQueueLanes; // Even if queue.lanes already include lane, we don't know for certain if
	    // the lane finished since the last time we entangled it. So we need to
	    // entangle it again, just to be sure.

	    markRootEntangled(root, newQueueLanes);
	  }
	}

	function markUpdateInDevTools(fiber, lane, action) {

	  {
	    markStateUpdateScheduled(fiber, lane);
	  }
	}

	var ContextOnlyDispatcher = {
	  readContext: readContext,
	  useCallback: throwInvalidHookError,
	  useContext: throwInvalidHookError,
	  useEffect: throwInvalidHookError,
	  useImperativeHandle: throwInvalidHookError,
	  useInsertionEffect: throwInvalidHookError,
	  useLayoutEffect: throwInvalidHookError,
	  useMemo: throwInvalidHookError,
	  useReducer: throwInvalidHookError,
	  useRef: throwInvalidHookError,
	  useState: throwInvalidHookError,
	  useDebugValue: throwInvalidHookError,
	  useDeferredValue: throwInvalidHookError,
	  useTransition: throwInvalidHookError,
	  useMutableSource: throwInvalidHookError,
	  useSyncExternalStore: throwInvalidHookError,
	  useId: throwInvalidHookError,
	  unstable_isNewReconciler: enableNewReconciler
	};

	var HooksDispatcherOnMountInDEV = null;
	var HooksDispatcherOnMountWithHookTypesInDEV = null;
	var HooksDispatcherOnUpdateInDEV = null;
	var HooksDispatcherOnRerenderInDEV = null;
	var InvalidNestedHooksDispatcherOnMountInDEV = null;
	var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
	var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

	{
	  var warnInvalidContextAccess = function () {
	    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
	  };

	  var warnInvalidHookAccess = function () {
	    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');
	  };

	  HooksDispatcherOnMountInDEV = {
	    readContext: function (context) {
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      mountHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      mountHookTypesDev();
	      checkDepsAreArrayDev(deps);
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      mountHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      mountHookTypesDev();
	      return mountDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      mountHookTypesDev();
	      return mountDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      mountHookTypesDev();
	      return mountTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      mountHookTypesDev();
	      return mountMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      mountHookTypesDev();
	      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      mountHookTypesDev();
	      return mountId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  HooksDispatcherOnMountWithHookTypesInDEV = {
	    readContext: function (context) {
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      updateHookTypesDev();
	      return mountInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return mountDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return mountDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return mountTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      updateHookTypesDev();
	      return mountMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      updateHookTypesDev();
	      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      updateHookTypesDev();
	      return mountId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  HooksDispatcherOnUpdateInDEV = {
	    readContext: function (context) {
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      updateHookTypesDev();
	      return updateInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return updateDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return updateTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      updateHookTypesDev();
	      return updateMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      updateHookTypesDev();
	      return updateSyncExternalStore(subscribe, getSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      updateHookTypesDev();
	      return updateId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  HooksDispatcherOnRerenderInDEV = {
	    readContext: function (context) {
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      updateHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      updateHookTypesDev();
	      return updateInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return rerenderReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

	      try {
	        return rerenderState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      updateHookTypesDev();
	      return rerenderDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      updateHookTypesDev();
	      return rerenderTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      updateHookTypesDev();
	      return updateMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      updateHookTypesDev();
	      return updateSyncExternalStore(subscribe, getSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      updateHookTypesDev();
	      return updateId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  InvalidNestedHooksDispatcherOnMountInDEV = {
	    readContext: function (context) {
	      warnInvalidContextAccess();
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountRef(initialValue);
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

	      try {
	        return mountState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      warnInvalidHookAccess();
	      mountHookTypesDev();
	      return mountId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  InvalidNestedHooksDispatcherOnUpdateInDEV = {
	    readContext: function (context) {
	      warnInvalidContextAccess();
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateSyncExternalStore(subscribe, getSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };

	  InvalidNestedHooksDispatcherOnRerenderInDEV = {
	    readContext: function (context) {
	      warnInvalidContextAccess();
	      return readContext(context);
	    },
	    useCallback: function (callback, deps) {
	      currentHookNameInDev = 'useCallback';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateCallback(callback, deps);
	    },
	    useContext: function (context) {
	      currentHookNameInDev = 'useContext';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return readContext(context);
	    },
	    useEffect: function (create, deps) {
	      currentHookNameInDev = 'useEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateEffect(create, deps);
	    },
	    useImperativeHandle: function (ref, create, deps) {
	      currentHookNameInDev = 'useImperativeHandle';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateImperativeHandle(ref, create, deps);
	    },
	    useInsertionEffect: function (create, deps) {
	      currentHookNameInDev = 'useInsertionEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateInsertionEffect(create, deps);
	    },
	    useLayoutEffect: function (create, deps) {
	      currentHookNameInDev = 'useLayoutEffect';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateLayoutEffect(create, deps);
	    },
	    useMemo: function (create, deps) {
	      currentHookNameInDev = 'useMemo';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return updateMemo(create, deps);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useReducer: function (reducer, initialArg, init) {
	      currentHookNameInDev = 'useReducer';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return rerenderReducer(reducer, initialArg, init);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useRef: function (initialValue) {
	      currentHookNameInDev = 'useRef';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateRef();
	    },
	    useState: function (initialState) {
	      currentHookNameInDev = 'useState';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      var prevDispatcher = ReactCurrentDispatcher$1.current;
	      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

	      try {
	        return rerenderState(initialState);
	      } finally {
	        ReactCurrentDispatcher$1.current = prevDispatcher;
	      }
	    },
	    useDebugValue: function (value, formatterFn) {
	      currentHookNameInDev = 'useDebugValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateDebugValue();
	    },
	    useDeferredValue: function (value) {
	      currentHookNameInDev = 'useDeferredValue';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return rerenderDeferredValue(value);
	    },
	    useTransition: function () {
	      currentHookNameInDev = 'useTransition';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return rerenderTransition();
	    },
	    useMutableSource: function (source, getSnapshot, subscribe) {
	      currentHookNameInDev = 'useMutableSource';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateMutableSource();
	    },
	    useSyncExternalStore: function (subscribe, getSnapshot, getServerSnapshot) {
	      currentHookNameInDev = 'useSyncExternalStore';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateSyncExternalStore(subscribe, getSnapshot);
	    },
	    useId: function () {
	      currentHookNameInDev = 'useId';
	      warnInvalidHookAccess();
	      updateHookTypesDev();
	      return updateId();
	    },
	    unstable_isNewReconciler: enableNewReconciler
	  };
	}

	var now$1 = Scheduler.unstable_now;
	var commitTime = 0;
	var layoutEffectStartTime = -1;
	var profilerStartTime = -1;
	var passiveEffectStartTime = -1;
	/**
	 * Tracks whether the current update was a nested/cascading update (scheduled from a layout effect).
	 *
	 * The overall sequence is:
	 *   1. render
	 *   2. commit (and call `onRender`, `onCommit`)
	 *   3. check for nested updates
	 *   4. flush passive effects (and call `onPostCommit`)
	 *
	 * Nested updates are identified in step 3 above,
	 * but step 4 still applies to the work that was just committed.
	 * We use two flags to track nested updates then:
	 * one tracks whether the upcoming update is a nested update,
	 * and the other tracks whether the current update was a nested update.
	 * The first value gets synced to the second at the start of the render phase.
	 */

	var currentUpdateIsNested = false;
	var nestedUpdateScheduled = false;

	function isCurrentUpdateNested() {
	  return currentUpdateIsNested;
	}

	function markNestedUpdateScheduled() {
	  {
	    nestedUpdateScheduled = true;
	  }
	}

	function resetNestedUpdateFlag() {
	  {
	    currentUpdateIsNested = false;
	    nestedUpdateScheduled = false;
	  }
	}

	function syncNestedUpdateFlag() {
	  {
	    currentUpdateIsNested = nestedUpdateScheduled;
	    nestedUpdateScheduled = false;
	  }
	}

	function getCommitTime() {
	  return commitTime;
	}

	function recordCommitTime() {

	  commitTime = now$1();
	}

	function startProfilerTimer(fiber) {

	  profilerStartTime = now$1();

	  if (fiber.actualStartTime < 0) {
	    fiber.actualStartTime = now$1();
	  }
	}

	function stopProfilerTimerIfRunning(fiber) {

	  profilerStartTime = -1;
	}

	function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

	  if (profilerStartTime >= 0) {
	    var elapsedTime = now$1() - profilerStartTime;
	    fiber.actualDuration += elapsedTime;

	    if (overrideBaseTime) {
	      fiber.selfBaseDuration = elapsedTime;
	    }

	    profilerStartTime = -1;
	  }
	}

	function recordLayoutEffectDuration(fiber) {

	  if (layoutEffectStartTime >= 0) {
	    var elapsedTime = now$1() - layoutEffectStartTime;
	    layoutEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
	    // Or the root (for the DevTools Profiler to read)

	    var parentFiber = fiber.return;

	    while (parentFiber !== null) {
	      switch (parentFiber.tag) {
	        case HostRoot:
	          var root = parentFiber.stateNode;
	          root.effectDuration += elapsedTime;
	          return;

	        case Profiler:
	          var parentStateNode = parentFiber.stateNode;
	          parentStateNode.effectDuration += elapsedTime;
	          return;
	      }

	      parentFiber = parentFiber.return;
	    }
	  }
	}

	function recordPassiveEffectDuration(fiber) {

	  if (passiveEffectStartTime >= 0) {
	    var elapsedTime = now$1() - passiveEffectStartTime;
	    passiveEffectStartTime = -1; // Store duration on the next nearest Profiler ancestor
	    // Or the root (for the DevTools Profiler to read)

	    var parentFiber = fiber.return;

	    while (parentFiber !== null) {
	      switch (parentFiber.tag) {
	        case HostRoot:
	          var root = parentFiber.stateNode;

	          if (root !== null) {
	            root.passiveEffectDuration += elapsedTime;
	          }

	          return;

	        case Profiler:
	          var parentStateNode = parentFiber.stateNode;

	          if (parentStateNode !== null) {
	            // Detached fibers have their state node cleared out.
	            // In this case, the return pointer is also cleared out,
	            // so we won't be able to report the time spent in this Profiler's subtree.
	            parentStateNode.passiveEffectDuration += elapsedTime;
	          }

	          return;
	      }

	      parentFiber = parentFiber.return;
	    }
	  }
	}

	function startLayoutEffectTimer() {

	  layoutEffectStartTime = now$1();
	}

	function startPassiveEffectTimer() {

	  passiveEffectStartTime = now$1();
	}

	function transferActualDuration(fiber) {
	  // Transfer time spent rendering these children so we don't lose it
	  // after we rerender. This is used as a helper in special cases
	  // where we should count the work of multiple passes.
	  var child = fiber.child;

	  while (child) {
	    fiber.actualDuration += child.actualDuration;
	    child = child.sibling;
	  }
	}

	function resolveDefaultProps(Component, baseProps) {
	  if (Component && Component.defaultProps) {
	    // Resolve default props. Taken from ReactElement
	    var props = assign({}, baseProps);
	    var defaultProps = Component.defaultProps;

	    for (var propName in defaultProps) {
	      if (props[propName] === undefined) {
	        props[propName] = defaultProps[propName];
	      }
	    }

	    return props;
	  }

	  return baseProps;
	}

	var fakeInternalInstance = {};
	var didWarnAboutStateAssignmentForComponent;
	var didWarnAboutUninitializedState;
	var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
	var didWarnAboutLegacyLifecyclesAndDerivedState;
	var didWarnAboutUndefinedDerivedState;
	var warnOnUndefinedDerivedState;
	var warnOnInvalidCallback;
	var didWarnAboutDirectlyAssigningPropsToState;
	var didWarnAboutContextTypeAndContextTypes;
	var didWarnAboutInvalidateContextType;
	var didWarnAboutLegacyContext$1;

	{
	  didWarnAboutStateAssignmentForComponent = new Set();
	  didWarnAboutUninitializedState = new Set();
	  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
	  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
	  didWarnAboutDirectlyAssigningPropsToState = new Set();
	  didWarnAboutUndefinedDerivedState = new Set();
	  didWarnAboutContextTypeAndContextTypes = new Set();
	  didWarnAboutInvalidateContextType = new Set();
	  didWarnAboutLegacyContext$1 = new Set();
	  var didWarnOnInvalidCallback = new Set();

	  warnOnInvalidCallback = function (callback, callerName) {
	    if (callback === null || typeof callback === 'function') {
	      return;
	    }

	    var key = callerName + '_' + callback;

	    if (!didWarnOnInvalidCallback.has(key)) {
	      didWarnOnInvalidCallback.add(key);

	      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
	    }
	  };

	  warnOnUndefinedDerivedState = function (type, partialState) {
	    if (partialState === undefined) {
	      var componentName = getComponentNameFromType(type) || 'Component';

	      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
	        didWarnAboutUndefinedDerivedState.add(componentName);

	        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
	      }
	    }
	  }; // This is so gross but it's at least non-critical and can be removed if
	  // it causes problems. This is meant to give a nicer error message for
	  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
	  // ...)) which otherwise throws a "_processChildContext is not a function"
	  // exception.


	  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
	    enumerable: false,
	    value: function () {
	      throw new Error('_processChildContext is not available in React 16+. This likely ' + 'means you have multiple copies of React and are attempting to nest ' + 'a React 15 tree inside a React 16 tree using ' + "unstable_renderSubtreeIntoContainer, which isn't supported. Try " + 'to make sure you have only one copy of React (and ideally, switch ' + 'to ReactDOM.createPortal).');
	    }
	  });
	  Object.freeze(fakeInternalInstance);
	}

	function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
	  var prevState = workInProgress.memoizedState;
	  var partialState = getDerivedStateFromProps(nextProps, prevState);

	  {
	    if ( workInProgress.mode & StrictLegacyMode) {
	      setIsStrictModeForDevtools(true);

	      try {
	        // Invoke the function an extra time to help detect side-effects.
	        partialState = getDerivedStateFromProps(nextProps, prevState);
	      } finally {
	        setIsStrictModeForDevtools(false);
	      }
	    }

	    warnOnUndefinedDerivedState(ctor, partialState);
	  } // Merge the partial state and the previous state.


	  var memoizedState = partialState === null || partialState === undefined ? prevState : assign({}, prevState, partialState);
	  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
	  // base state.

	  if (workInProgress.lanes === NoLanes) {
	    // Queue is always non-null for classes
	    var updateQueue = workInProgress.updateQueue;
	    updateQueue.baseState = memoizedState;
	  }
	}

	var classComponentUpdater = {
	  isMounted: isMounted,
	  enqueueSetState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var eventTime = requestEventTime();
	    var lane = requestUpdateLane(fiber);
	    var update = createUpdate(eventTime, lane);
	    update.payload = payload;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'setState');
	      }

	      update.callback = callback;
	    }

	    var root = enqueueUpdate(fiber, update, lane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	      entangleTransitions(root, fiber, lane);
	    }

	    {
	      markStateUpdateScheduled(fiber, lane);
	    }
	  },
	  enqueueReplaceState: function (inst, payload, callback) {
	    var fiber = get(inst);
	    var eventTime = requestEventTime();
	    var lane = requestUpdateLane(fiber);
	    var update = createUpdate(eventTime, lane);
	    update.tag = ReplaceState;
	    update.payload = payload;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'replaceState');
	      }

	      update.callback = callback;
	    }

	    var root = enqueueUpdate(fiber, update, lane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	      entangleTransitions(root, fiber, lane);
	    }

	    {
	      markStateUpdateScheduled(fiber, lane);
	    }
	  },
	  enqueueForceUpdate: function (inst, callback) {
	    var fiber = get(inst);
	    var eventTime = requestEventTime();
	    var lane = requestUpdateLane(fiber);
	    var update = createUpdate(eventTime, lane);
	    update.tag = ForceUpdate;

	    if (callback !== undefined && callback !== null) {
	      {
	        warnOnInvalidCallback(callback, 'forceUpdate');
	      }

	      update.callback = callback;
	    }

	    var root = enqueueUpdate(fiber, update, lane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	      entangleTransitions(root, fiber, lane);
	    }

	    {
	      markForceUpdateScheduled(fiber, lane);
	    }
	  }
	};

	function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
	  var instance = workInProgress.stateNode;

	  if (typeof instance.shouldComponentUpdate === 'function') {
	    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);

	    {
	      if ( workInProgress.mode & StrictLegacyMode) {
	        setIsStrictModeForDevtools(true);

	        try {
	          // Invoke the function an extra time to help detect side-effects.
	          shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
	        } finally {
	          setIsStrictModeForDevtools(false);
	        }
	      }

	      if (shouldUpdate === undefined) {
	        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentNameFromType(ctor) || 'Component');
	      }
	    }

	    return shouldUpdate;
	  }

	  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
	    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
	  }

	  return true;
	}

	function checkClassInstance(workInProgress, ctor, newProps) {
	  var instance = workInProgress.stateNode;

	  {
	    var name = getComponentNameFromType(ctor) || 'Component';
	    var renderPresent = instance.render;

	    if (!renderPresent) {
	      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
	        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
	      } else {
	        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
	      }
	    }

	    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
	      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
	    }

	    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
	      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
	    }

	    if (instance.propTypes) {
	      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
	    }

	    if (instance.contextType) {
	      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
	    }

	    {
	      if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
	      // this one.
	      (workInProgress.mode & StrictLegacyMode) === NoMode) {
	        didWarnAboutLegacyContext$1.add(ctor);

	        error('%s uses the legacy childContextTypes API which is no longer ' + 'supported and will be removed in the next major release. Use ' + 'React.createContext() instead\n\n.' + 'Learn more about this warning here: https://reactjs.org/link/legacy-context', name);
	      }

	      if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
	      // this one.
	      (workInProgress.mode & StrictLegacyMode) === NoMode) {
	        didWarnAboutLegacyContext$1.add(ctor);

	        error('%s uses the legacy contextTypes API which is no longer supported ' + 'and will be removed in the next major release. Use ' + 'React.createContext() with static contextType instead.\n\n' + 'Learn more about this warning here: https://reactjs.org/link/legacy-context', name);
	      }

	      if (instance.contextTypes) {
	        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
	      }

	      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
	        didWarnAboutContextTypeAndContextTypes.add(ctor);

	        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
	      }
	    }

	    if (typeof instance.componentShouldUpdate === 'function') {
	      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
	    }

	    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
	      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentNameFromType(ctor) || 'A pure component');
	    }

	    if (typeof instance.componentDidUnmount === 'function') {
	      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
	    }

	    if (typeof instance.componentDidReceiveProps === 'function') {
	      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
	    }

	    if (typeof instance.componentWillRecieveProps === 'function') {
	      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
	    }

	    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
	      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
	    }

	    var hasMutatedProps = instance.props !== newProps;

	    if (instance.props !== undefined && hasMutatedProps) {
	      error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
	    }

	    if (instance.defaultProps) {
	      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
	      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

	      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentNameFromType(ctor));
	    }

	    if (typeof instance.getDerivedStateFromProps === 'function') {
	      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
	    }

	    if (typeof instance.getDerivedStateFromError === 'function') {
	      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
	    }

	    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
	      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
	    }

	    var _state = instance.state;

	    if (_state && (typeof _state !== 'object' || isArray(_state))) {
	      error('%s.state: must be set to an object or null', name);
	    }

	    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
	      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
	    }
	  }
	}

	function adoptClassInstance(workInProgress, instance) {
	  instance.updater = classComponentUpdater;
	  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

	  set(instance, workInProgress);

	  {
	    instance._reactInternalInstance = fakeInternalInstance;
	  }
	}

	function constructClassInstance(workInProgress, ctor, props) {
	  var isLegacyContextConsumer = false;
	  var unmaskedContext = emptyContextObject;
	  var context = emptyContextObject;
	  var contextType = ctor.contextType;

	  {
	    if ('contextType' in ctor) {
	      var isValid = // Allow null for conditional declaration
	      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

	      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
	        didWarnAboutInvalidateContextType.add(ctor);
	        var addendum = '';

	        if (contextType === undefined) {
	          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
	        } else if (typeof contextType !== 'object') {
	          addendum = ' However, it is set to a ' + typeof contextType + '.';
	        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
	          addendum = ' Did you accidentally pass the Context.Provider instead?';
	        } else if (contextType._context !== undefined) {
	          // <Context.Consumer>
	          addendum = ' Did you accidentally pass the Context.Consumer instead?';
	        } else {
	          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
	        }

	        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentNameFromType(ctor) || 'Component', addendum);
	      }
	    }
	  }

	  if (typeof contextType === 'object' && contextType !== null) {
	    context = readContext(contextType);
	  } else {
	    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    var contextTypes = ctor.contextTypes;
	    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
	    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
	  }

	  var instance = new ctor(props, context); // Instantiate twice to help detect side-effects.

	  {
	    if ( workInProgress.mode & StrictLegacyMode) {
	      setIsStrictModeForDevtools(true);

	      try {
	        instance = new ctor(props, context); // eslint-disable-line no-new
	      } finally {
	        setIsStrictModeForDevtools(false);
	      }
	    }
	  }

	  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
	  adoptClassInstance(workInProgress, instance);

	  {
	    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
	      var componentName = getComponentNameFromType(ctor) || 'Component';

	      if (!didWarnAboutUninitializedState.has(componentName)) {
	        didWarnAboutUninitializedState.add(componentName);

	        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
	      }
	    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
	    // Warn about these lifecycles if they are present.
	    // Don't warn about react-lifecycles-compat polyfilled methods though.


	    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
	      var foundWillMountName = null;
	      var foundWillReceivePropsName = null;
	      var foundWillUpdateName = null;

	      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
	        foundWillMountName = 'componentWillMount';
	      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        foundWillMountName = 'UNSAFE_componentWillMount';
	      }

	      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
	        foundWillReceivePropsName = 'componentWillReceiveProps';
	      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
	      }

	      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
	        foundWillUpdateName = 'componentWillUpdate';
	      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
	      }

	      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
	        var _componentName = getComponentNameFromType(ctor) || 'Component';

	        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

	        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
	          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

	          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
	        }
	      }
	    }
	  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
	  // ReactFiberContext usually updates this cache but can't for newly-created instances.


	  if (isLegacyContextConsumer) {
	    cacheContext(workInProgress, unmaskedContext, context);
	  }

	  return instance;
	}

	function callComponentWillMount(workInProgress, instance) {
	  var oldState = instance.state;

	  if (typeof instance.componentWillMount === 'function') {
	    instance.componentWillMount();
	  }

	  if (typeof instance.UNSAFE_componentWillMount === 'function') {
	    instance.UNSAFE_componentWillMount();
	  }

	  if (oldState !== instance.state) {
	    {
	      error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentNameFromFiber(workInProgress) || 'Component');
	    }

	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	}

	function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
	  var oldState = instance.state;

	  if (typeof instance.componentWillReceiveProps === 'function') {
	    instance.componentWillReceiveProps(newProps, nextContext);
	  }

	  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
	    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
	  }

	  if (instance.state !== oldState) {
	    {
	      var componentName = getComponentNameFromFiber(workInProgress) || 'Component';

	      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
	        didWarnAboutStateAssignmentForComponent.add(componentName);

	        error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
	      }
	    }

	    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
	  }
	} // Invokes the mount life-cycles on a previously never rendered instance.


	function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
	  {
	    checkClassInstance(workInProgress, ctor, newProps);
	  }

	  var instance = workInProgress.stateNode;
	  instance.props = newProps;
	  instance.state = workInProgress.memoizedState;
	  instance.refs = {};
	  initializeUpdateQueue(workInProgress);
	  var contextType = ctor.contextType;

	  if (typeof contextType === 'object' && contextType !== null) {
	    instance.context = readContext(contextType);
	  } else {
	    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    instance.context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  {
	    if (instance.state === newProps) {
	      var componentName = getComponentNameFromType(ctor) || 'Component';

	      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
	        didWarnAboutDirectlyAssigningPropsToState.add(componentName);

	        error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
	      }
	    }

	    if (workInProgress.mode & StrictLegacyMode) {
	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
	    }

	    {
	      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
	    }
	  }

	  instance.state = workInProgress.memoizedState;
	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    instance.state = workInProgress.memoizedState;
	  } // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.


	  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
	    // process them now.

	    processUpdateQueue(workInProgress, newProps, instance, renderLanes);
	    instance.state = workInProgress.memoizedState;
	  }

	  if (typeof instance.componentDidMount === 'function') {
	    var fiberFlags = Update;

	    {
	      fiberFlags |= LayoutStatic;
	    }

	    if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
	      fiberFlags |= MountLayoutDev;
	    }

	    workInProgress.flags |= fiberFlags;
	  }
	}

	function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
	  var instance = workInProgress.stateNode;
	  var oldProps = workInProgress.memoizedProps;
	  instance.props = oldProps;
	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = emptyContextObject;

	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext(contextType);
	  } else {
	    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.
	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.

	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (oldProps !== newProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();
	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
	  newState = workInProgress.memoizedState;

	  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      var fiberFlags = Update;

	      {
	        fiberFlags |= LayoutStatic;
	      }

	      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
	        fiberFlags |= MountLayoutDev;
	      }

	      workInProgress.flags |= fiberFlags;
	    }

	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
	      if (typeof instance.componentWillMount === 'function') {
	        instance.componentWillMount();
	      }

	      if (typeof instance.UNSAFE_componentWillMount === 'function') {
	        instance.UNSAFE_componentWillMount();
	      }
	    }

	    if (typeof instance.componentDidMount === 'function') {
	      var _fiberFlags = Update;

	      {
	        _fiberFlags |= LayoutStatic;
	      }

	      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
	        _fiberFlags |= MountLayoutDev;
	      }

	      workInProgress.flags |= _fiberFlags;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidMount === 'function') {
	      var _fiberFlags2 = Update;

	      {
	        _fiberFlags2 |= LayoutStatic;
	      }

	      if ( (workInProgress.mode & StrictEffectsMode) !== NoMode) {
	        _fiberFlags2 |= MountLayoutDev;
	      }

	      workInProgress.flags |= _fiberFlags2;
	    } // If shouldComponentUpdate returned false, we should still update the
	    // memoized state to indicate that this work can be reused.


	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  } // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.


	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;
	  return shouldUpdate;
	} // Invokes the update life-cycles and returns false if it shouldn't rerender.


	function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
	  var instance = workInProgress.stateNode;
	  cloneUpdateQueue(current, workInProgress);
	  var unresolvedOldProps = workInProgress.memoizedProps;
	  var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
	  instance.props = oldProps;
	  var unresolvedNewProps = workInProgress.pendingProps;
	  var oldContext = instance.context;
	  var contextType = ctor.contextType;
	  var nextContext = emptyContextObject;

	  if (typeof contextType === 'object' && contextType !== null) {
	    nextContext = readContext(contextType);
	  } else {
	    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
	    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
	  }

	  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
	  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
	  // ever the previously attempted to render - not the "current". However,
	  // during componentDidUpdate we pass the "current" props.
	  // In order to support react-lifecycles-compat polyfilled components,
	  // Unsafe lifecycles should not be invoked for components using the new APIs.

	  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
	    if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
	      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
	    }
	  }

	  resetHasForceUpdateBeforeProcessing();
	  var oldState = workInProgress.memoizedState;
	  var newState = instance.state = oldState;
	  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
	  newState = workInProgress.memoizedState;

	  if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !(enableLazyContextPropagation   )) {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.flags |= Update;
	      }
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.flags |= Snapshot;
	      }
	    }

	    return false;
	  }

	  if (typeof getDerivedStateFromProps === 'function') {
	    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
	    newState = workInProgress.memoizedState;
	  }

	  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
	  // both before and after `shouldComponentUpdate` has been called. Not ideal,
	  // but I'm loath to refactor this function. This only happens for memoized
	  // components so it's not that common.
	  enableLazyContextPropagation   ;

	  if (shouldUpdate) {
	    // In order to support react-lifecycles-compat polyfilled components,
	    // Unsafe lifecycles should not be invoked for components using the new APIs.
	    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
	      if (typeof instance.componentWillUpdate === 'function') {
	        instance.componentWillUpdate(newProps, newState, nextContext);
	      }

	      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
	        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
	      }
	    }

	    if (typeof instance.componentDidUpdate === 'function') {
	      workInProgress.flags |= Update;
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      workInProgress.flags |= Snapshot;
	    }
	  } else {
	    // If an update was already in progress, we should schedule an Update
	    // effect even though we're bailing out, so that cWU/cDU are called.
	    if (typeof instance.componentDidUpdate === 'function') {
	      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.flags |= Update;
	      }
	    }

	    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
	      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
	        workInProgress.flags |= Snapshot;
	      }
	    } // If shouldComponentUpdate returned false, we should still update the
	    // memoized props/state to indicate that this work can be reused.


	    workInProgress.memoizedProps = newProps;
	    workInProgress.memoizedState = newState;
	  } // Update the existing instance's state, props, and context pointers even
	  // if shouldComponentUpdate returns false.


	  instance.props = newProps;
	  instance.state = newState;
	  instance.context = nextContext;
	  return shouldUpdate;
	}

	function createCapturedValueAtFiber(value, source) {
	  // If the value is an error, call this function immediately after it is thrown
	  // so the stack is accurate.
	  return {
	    value: value,
	    source: source,
	    stack: getStackByFiberInDevAndProd(source),
	    digest: null
	  };
	}
	function createCapturedValue(value, digest, stack) {
	  return {
	    value: value,
	    source: null,
	    stack: stack != null ? stack : null,
	    digest: digest != null ? digest : null
	  };
	}

	// This module is forked in different environments.
	// By default, return `true` to log errors to the console.
	// Forks can return `false` if this isn't desirable.
	function showErrorDialog(boundary, errorInfo) {
	  return true;
	}

	function logCapturedError(boundary, errorInfo) {
	  try {
	    var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
	    // This enables renderers like ReactNative to better manage redbox behavior.

	    if (logError === false) {
	      return;
	    }

	    var error = errorInfo.value;

	    if (true) {
	      var source = errorInfo.source;
	      var stack = errorInfo.stack;
	      var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
	      // `preventDefault()` in window `error` handler.
	      // We record this information as an expando on the error.

	      if (error != null && error._suppressLogging) {
	        if (boundary.tag === ClassComponent) {
	          // The error is recoverable and was silenced.
	          // Ignore it and don't print the stack addendum.
	          // This is handy for testing error boundaries without noise.
	          return;
	        } // The error is fatal. Since the silencing might have
	        // been accidental, we'll surface it anyway.
	        // However, the browser would have silenced the original error
	        // so we'll print it first, and then print the stack addendum.


	        console['error'](error); // Don't transform to our wrapper
	        // For a more detailed description of this block, see:
	        // https://github.com/facebook/react/pull/13384
	      }

	      var componentName = source ? getComponentNameFromFiber(source) : null;
	      var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
	      var errorBoundaryMessage;

	      if (boundary.tag === HostRoot) {
	        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';
	      } else {
	        var errorBoundaryName = getComponentNameFromFiber(boundary) || 'Anonymous';
	        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
	      }

	      var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
	      // We don't include the original error message and JS stack because the browser
	      // has already printed it. Even if the application swallows the error, it is still
	      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

	      console['error'](combinedMessage); // Don't transform to our wrapper
	    }
	  } catch (e) {
	    // This method must not throw, or React internal state will get messed up.
	    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
	    // we want to report this error outside of the normal stack as a last resort.
	    // https://github.com/facebook/react/issues/13188
	    setTimeout(function () {
	      throw e;
	    });
	  }
	}

	var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

	function createRootErrorUpdate(fiber, errorInfo, lane) {
	  var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.

	  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
	  // being called "element".

	  update.payload = {
	    element: null
	  };
	  var error = errorInfo.value;

	  update.callback = function () {
	    onUncaughtError(error);
	    logCapturedError(fiber, errorInfo);
	  };

	  return update;
	}

	function createClassErrorUpdate(fiber, errorInfo, lane) {
	  var update = createUpdate(NoTimestamp, lane);
	  update.tag = CaptureUpdate;
	  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

	  if (typeof getDerivedStateFromError === 'function') {
	    var error$1 = errorInfo.value;

	    update.payload = function () {
	      return getDerivedStateFromError(error$1);
	    };

	    update.callback = function () {
	      {
	        markFailedErrorBoundaryForHotReloading(fiber);
	      }

	      logCapturedError(fiber, errorInfo);
	    };
	  }

	  var inst = fiber.stateNode;

	  if (inst !== null && typeof inst.componentDidCatch === 'function') {
	    update.callback = function callback() {
	      {
	        markFailedErrorBoundaryForHotReloading(fiber);
	      }

	      logCapturedError(fiber, errorInfo);

	      if (typeof getDerivedStateFromError !== 'function') {
	        // To preserve the preexisting retry behavior of error boundaries,
	        // we keep track of which ones already failed during this batch.
	        // This gets reset before we yield back to the browser.
	        // TODO: Warn in strict mode if getDerivedStateFromError is
	        // not defined.
	        markLegacyErrorBoundaryAsFailed(this);
	      }

	      var error$1 = errorInfo.value;
	      var stack = errorInfo.stack;
	      this.componentDidCatch(error$1, {
	        componentStack: stack !== null ? stack : ''
	      });

	      {
	        if (typeof getDerivedStateFromError !== 'function') {
	          // If componentDidCatch is the only error boundary method defined,
	          // then it needs to call setState to recover from errors.
	          // If no state update is scheduled then the boundary will swallow the error.
	          if (!includesSomeLane(fiber.lanes, SyncLane)) {
	            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentNameFromFiber(fiber) || 'Unknown');
	          }
	        }
	      }
	    };
	  }

	  return update;
	}

	function attachPingListener(root, wakeable, lanes) {
	  // Attach a ping listener
	  //
	  // The data might resolve before we have a chance to commit the fallback. Or,
	  // in the case of a refresh, we'll never commit a fallback. So we need to
	  // attach a listener now. When it resolves ("pings"), we can decide whether to
	  // try rendering the tree again.
	  //
	  // Only attach a listener if one does not already exist for the lanes
	  // we're currently rendering (which acts like a "thread ID" here).
	  //
	  // We only need to do this in concurrent mode. Legacy Suspense always
	  // commits fallbacks synchronously, so there are no pings.
	  var pingCache = root.pingCache;
	  var threadIDs;

	  if (pingCache === null) {
	    pingCache = root.pingCache = new PossiblyWeakMap$1();
	    threadIDs = new Set();
	    pingCache.set(wakeable, threadIDs);
	  } else {
	    threadIDs = pingCache.get(wakeable);

	    if (threadIDs === undefined) {
	      threadIDs = new Set();
	      pingCache.set(wakeable, threadIDs);
	    }
	  }

	  if (!threadIDs.has(lanes)) {
	    // Memoize using the thread ID to prevent redundant listeners.
	    threadIDs.add(lanes);
	    var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);

	    {
	      if (isDevToolsPresent) {
	        // If we have pending work still, restore the original updaters
	        restorePendingUpdaters(root, lanes);
	      }
	    }

	    wakeable.then(ping, ping);
	  }
	}

	function attachRetryListener(suspenseBoundary, root, wakeable, lanes) {
	  // Retry listener
	  //
	  // If the fallback does commit, we need to attach a different type of
	  // listener. This one schedules an update on the Suspense boundary to turn
	  // the fallback state off.
	  //
	  // Stash the wakeable on the boundary fiber so we can access it in the
	  // commit phase.
	  //
	  // When the wakeable resolves, we'll attempt to render the boundary
	  // again ("retry").
	  var wakeables = suspenseBoundary.updateQueue;

	  if (wakeables === null) {
	    var updateQueue = new Set();
	    updateQueue.add(wakeable);
	    suspenseBoundary.updateQueue = updateQueue;
	  } else {
	    wakeables.add(wakeable);
	  }
	}

	function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
	  // A legacy mode Suspense quirk, only relevant to hook components.


	  var tag = sourceFiber.tag;

	  if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
	    var currentSource = sourceFiber.alternate;

	    if (currentSource) {
	      sourceFiber.updateQueue = currentSource.updateQueue;
	      sourceFiber.memoizedState = currentSource.memoizedState;
	      sourceFiber.lanes = currentSource.lanes;
	    } else {
	      sourceFiber.updateQueue = null;
	      sourceFiber.memoizedState = null;
	    }
	  }
	}

	function getNearestSuspenseBoundaryToCapture(returnFiber) {
	  var node = returnFiber;

	  do {
	    if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
	      return node;
	    } // This boundary already captured during this render. Continue to the next
	    // boundary.


	    node = node.return;
	  } while (node !== null);

	  return null;
	}

	function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes) {
	  // This marks a Suspense boundary so that when we're unwinding the stack,
	  // it captures the suspended "exception" and does a second (fallback) pass.
	  if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
	    // Legacy Mode Suspense
	    //
	    // If the boundary is in legacy mode, we should *not*
	    // suspend the commit. Pretend as if the suspended component rendered
	    // null and keep rendering. When the Suspense boundary completes,
	    // we'll do a second pass to render the fallback.
	    if (suspenseBoundary === returnFiber) {
	      // Special case where we suspended while reconciling the children of
	      // a Suspense boundary's inner Offscreen wrapper fiber. This happens
	      // when a React.lazy component is a direct child of a
	      // Suspense boundary.
	      //
	      // Suspense boundaries are implemented as multiple fibers, but they
	      // are a single conceptual unit. The legacy mode behavior where we
	      // pretend the suspended fiber committed as `null` won't work,
	      // because in this case the "suspended" fiber is the inner
	      // Offscreen wrapper.
	      //
	      // Because the contents of the boundary haven't started rendering
	      // yet (i.e. nothing in the tree has partially rendered) we can
	      // switch to the regular, concurrent mode behavior: mark the
	      // boundary with ShouldCapture and enter the unwind phase.
	      suspenseBoundary.flags |= ShouldCapture;
	    } else {
	      suspenseBoundary.flags |= DidCapture;
	      sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
	      // But we shouldn't call any lifecycle methods or callbacks. Remove
	      // all lifecycle effect tags.

	      sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);

	      if (sourceFiber.tag === ClassComponent) {
	        var currentSourceFiber = sourceFiber.alternate;

	        if (currentSourceFiber === null) {
	          // This is a new mount. Change the tag so it's not mistaken for a
	          // completed class component. For example, we should not call
	          // componentWillUnmount if it is deleted.
	          sourceFiber.tag = IncompleteClassComponent;
	        } else {
	          // When we try rendering again, we should not reuse the current fiber,
	          // since it's known to be in an inconsistent state. Use a force update to
	          // prevent a bail out.
	          var update = createUpdate(NoTimestamp, SyncLane);
	          update.tag = ForceUpdate;
	          enqueueUpdate(sourceFiber, update, SyncLane);
	        }
	      } // The source fiber did not complete. Mark it with Sync priority to
	      // indicate that it still has pending work.


	      sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
	    }

	    return suspenseBoundary;
	  } // Confirmed that the boundary is in a concurrent mode tree. Continue
	  // with the normal suspend path.
	  //
	  // After this we'll use a set of heuristics to determine whether this
	  // render pass will run to completion or restart or "suspend" the commit.
	  // The actual logic for this is spread out in different places.
	  //
	  // This first principle is that if we're going to suspend when we complete
	  // a root, then we should also restart if we get an update or ping that
	  // might unsuspend it, and vice versa. The only reason to suspend is
	  // because you think you might want to restart before committing. However,
	  // it doesn't make sense to restart only while in the period we're suspended.
	  //
	  // Restarting too aggressively is also not good because it starves out any
	  // intermediate loading state. So we use heuristics to determine when.
	  // Suspense Heuristics
	  //
	  // If nothing threw a Promise or all the same fallbacks are already showing,
	  // then don't suspend/restart.
	  //
	  // If this is an initial render of a new tree of Suspense boundaries and
	  // those trigger a fallback, then don't suspend/restart. We want to ensure
	  // that we can show the initial loading state as quickly as possible.
	  //
	  // If we hit a "Delayed" case, such as when we'd switch from content back into
	  // a fallback, then we should always suspend/restart. Transitions apply
	  // to this case. If none is defined, JND is used instead.
	  //
	  // If we're already showing a fallback and it gets "retried", allowing us to show
	  // another level, but there's still an inner boundary that would show a fallback,
	  // then we suspend/restart for 500ms since the last time we showed a fallback
	  // anywhere in the tree. This effectively throttles progressive loading into a
	  // consistent train of commits. This also gives us an opportunity to restart to
	  // get to the completed state slightly earlier.
	  //
	  // If there's ambiguity due to batching it's resolved in preference of:
	  // 1) "delayed", 2) "initial render", 3) "retry".
	  //
	  // We want to ensure that a "busy" state doesn't get force committed. We want to
	  // ensure that new initial loading states can commit as soon as possible.


	  suspenseBoundary.flags |= ShouldCapture; // TODO: I think we can remove this, since we now use `DidCapture` in
	  // the begin phase to prevent an early bailout.

	  suspenseBoundary.lanes = rootRenderLanes;
	  return suspenseBoundary;
	}

	function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
	  // The source fiber did not complete.
	  sourceFiber.flags |= Incomplete;

	  {
	    if (isDevToolsPresent) {
	      // If we have pending work still, restore the original updaters
	      restorePendingUpdaters(root, rootRenderLanes);
	    }
	  }

	  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
	    // This is a wakeable. The component suspended.
	    var wakeable = value;
	    resetSuspendedComponent(sourceFiber);

	    {
	      if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
	        markDidThrowWhileHydratingDEV();
	      }
	    }


	    var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);

	    if (suspenseBoundary !== null) {
	      suspenseBoundary.flags &= ~ForceClientRender;
	      markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // We only attach ping listeners in concurrent mode. Legacy Suspense always
	      // commits fallbacks synchronously, so there are no pings.

	      if (suspenseBoundary.mode & ConcurrentMode) {
	        attachPingListener(root, wakeable, rootRenderLanes);
	      }

	      attachRetryListener(suspenseBoundary, root, wakeable);
	      return;
	    } else {
	      // No boundary was found. Unless this is a sync update, this is OK.
	      // We can suspend and wait for more data to arrive.
	      if (!includesSyncLane(rootRenderLanes)) {
	        // This is not a sync update. Suspend. Since we're not activating a
	        // Suspense boundary, this will unwind all the way to the root without
	        // performing a second pass to render a fallback. (This is arguably how
	        // refresh transitions should work, too, since we're not going to commit
	        // the fallbacks anyway.)
	        //
	        // This case also applies to initial hydration.
	        attachPingListener(root, wakeable, rootRenderLanes);
	        renderDidSuspendDelayIfPossible();
	        return;
	      } // This is a sync/discrete update. We treat this case like an error
	      // because discrete renders are expected to produce a complete tree
	      // synchronously to maintain consistency with external state.


	      var uncaughtSuspenseError = new Error('A component suspended while responding to synchronous input. This ' + 'will cause the UI to be replaced with a loading indicator. To ' + 'fix, updates that suspend should be wrapped ' + 'with startTransition.'); // If we're outside a transition, fall through to the regular error path.
	      // The error will be caught by the nearest suspense boundary.

	      value = uncaughtSuspenseError;
	    }
	  } else {
	    // This is a regular error, not a Suspense wakeable.
	    if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
	      markDidThrowWhileHydratingDEV();

	      var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber); // If the error was thrown during hydration, we may be able to recover by
	      // discarding the dehydrated content and switching to a client render.
	      // Instead of surfacing the error, find the nearest Suspense boundary
	      // and render it again without hydration.


	      if (_suspenseBoundary !== null) {
	        if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
	          // Set a flag to indicate that we should try rendering the normal
	          // children again, not the fallback.
	          _suspenseBoundary.flags |= ForceClientRender;
	        }

	        markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root, rootRenderLanes); // Even though the user may not be affected by this error, we should
	        // still log it so it can be fixed.

	        queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
	        return;
	      }
	    }
	  }

	  value = createCapturedValueAtFiber(value, sourceFiber);
	  renderDidError(value); // We didn't find a boundary that could handle this type of exception. Start
	  // over and traverse parent path again, this time treating the exception
	  // as an error.

	  var workInProgress = returnFiber;

	  do {
	    switch (workInProgress.tag) {
	      case HostRoot:
	        {
	          var _errorInfo = value;
	          workInProgress.flags |= ShouldCapture;
	          var lane = pickArbitraryLane(rootRenderLanes);
	          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);
	          var update = createRootErrorUpdate(workInProgress, _errorInfo, lane);
	          enqueueCapturedUpdate(workInProgress, update);
	          return;
	        }

	      case ClassComponent:
	        // Capture and retry
	        var errorInfo = value;
	        var ctor = workInProgress.type;
	        var instance = workInProgress.stateNode;

	        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
	          workInProgress.flags |= ShouldCapture;

	          var _lane = pickArbitraryLane(rootRenderLanes);

	          workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state

	          var _update = createClassErrorUpdate(workInProgress, errorInfo, _lane);

	          enqueueCapturedUpdate(workInProgress, _update);
	          return;
	        }

	        break;
	    }

	    workInProgress = workInProgress.return;
	  } while (workInProgress !== null);
	}

	function getSuspendedCache() {
	  {
	    return null;
	  } // This function is called when a Suspense boundary suspends. It returns the
	}

	var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
	var didReceiveUpdate = false;
	var didWarnAboutBadClass;
	var didWarnAboutModulePatternComponent;
	var didWarnAboutContextTypeOnFunctionComponent;
	var didWarnAboutGetDerivedStateOnFunctionComponent;
	var didWarnAboutFunctionRefs;
	var didWarnAboutReassigningProps;
	var didWarnAboutRevealOrder;
	var didWarnAboutTailOptions;
	var didWarnAboutDefaultPropsOnFunctionComponent;

	{
	  didWarnAboutBadClass = {};
	  didWarnAboutModulePatternComponent = {};
	  didWarnAboutContextTypeOnFunctionComponent = {};
	  didWarnAboutGetDerivedStateOnFunctionComponent = {};
	  didWarnAboutFunctionRefs = {};
	  didWarnAboutReassigningProps = false;
	  didWarnAboutRevealOrder = {};
	  didWarnAboutTailOptions = {};
	  didWarnAboutDefaultPropsOnFunctionComponent = {};
	}

	function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
	  if (current === null) {
	    // If this is a fresh new component that hasn't been rendered yet, we
	    // won't update its child set by applying minimal side-effects. Instead,
	    // we will add them all to the child before it gets rendered. That means
	    // we can optimize this reconciliation pass by not tracking side-effects.
	    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
	  } else {
	    // If the current child is the same as the work in progress, it means that
	    // we haven't yet started any work on these children. Therefore, we use
	    // the clone algorithm to create a copy of all the current children.
	    // If we had any progressed work already, that is invalid at this point so
	    // let's throw it out.
	    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
	  }
	}

	function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
	  // This function is fork of reconcileChildren. It's used in cases where we
	  // want to reconcile without matching against the existing set. This has the
	  // effect of all current children being unmounted; even if the type and key
	  // are the same, the old child is unmounted and a new child is created.
	  //
	  // To do this, we're going to go through the reconcile algorithm twice. In
	  // the first pass, we schedule a deletion for all the current children by
	  // passing null.
	  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
	  // pass null in place of where we usually pass the current child set. This has
	  // the effect of remounting all children regardless of whether their
	  // identities match.

	  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
	}

	function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
	  // TODO: current can be non-null here even if the component
	  // hasn't yet mounted. This happens after the first render suspends.
	  // We'll need to figure out if this is fine or can cause issues.
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentNameFromType(Component));
	      }
	    }
	  }

	  var render = Component.render;
	  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

	  var nextChildren;
	  var hasId;
	  prepareToReadContext(workInProgress, renderLanes);

	  {
	    markComponentRenderStarted(workInProgress);
	  }

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
	    hasId = checkDidRenderIdHook();

	    if ( workInProgress.mode & StrictLegacyMode) {
	      setIsStrictModeForDevtools(true);

	      try {
	        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
	        hasId = checkDidRenderIdHook();
	      } finally {
	        setIsStrictModeForDevtools(false);
	      }
	    }

	    setIsRendering(false);
	  }

	  {
	    markComponentRenderStopped();
	  }

	  if (current !== null && !didReceiveUpdate) {
	    bailoutHooks(current, workInProgress, renderLanes);
	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	  }

	  if (getIsHydrating() && hasId) {
	    pushMaterializedTreeId(workInProgress);
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
	  if (current === null) {
	    var type = Component.type;

	    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
	    Component.defaultProps === undefined) {
	      var resolvedType = type;

	      {
	        resolvedType = resolveFunctionForHotReloading(type);
	      } // If this is a plain function component without default props,
	      // and with only the default shallow comparison, we upgrade it
	      // to a SimpleMemoComponent to allow fast path updates.


	      workInProgress.tag = SimpleMemoComponent;
	      workInProgress.type = resolvedType;

	      {
	        validateFunctionComponentInDev(workInProgress, type);
	      }

	      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, renderLanes);
	    }

	    {
	      var innerPropTypes = type.propTypes;

	      if (innerPropTypes) {
	        // Inner memo component props aren't currently validated in createElement.
	        // We could move it there, but we'd still need this for lazy code path.
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentNameFromType(type));
	      }

	      if ( Component.defaultProps !== undefined) {
	        var componentName = getComponentNameFromType(type) || 'Unknown';

	        if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
	          error('%s: Support for defaultProps will be removed from memo components ' + 'in a future major release. Use JavaScript default parameters instead.', componentName);

	          didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
	        }
	      }
	    }

	    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
	    child.ref = workInProgress.ref;
	    child.return = workInProgress;
	    workInProgress.child = child;
	    return child;
	  }

	  {
	    var _type = Component.type;
	    var _innerPropTypes = _type.propTypes;

	    if (_innerPropTypes) {
	      // Inner memo component props aren't currently validated in createElement.
	      // We could move it there, but we'd still need this for lazy code path.
	      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
	      'prop', getComponentNameFromType(_type));
	    }
	  }

	  var currentChild = current.child; // This is always exactly one child

	  var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);

	  if (!hasScheduledUpdateOrContext) {
	    // This will be the props with resolved defaultProps,
	    // unlike current.memoizedProps which will be the unresolved ones.
	    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

	    var compare = Component.compare;
	    compare = compare !== null ? compare : shallowEqual;

	    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
	      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	    }
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;
	  var newChild = createWorkInProgress(currentChild, nextProps);
	  newChild.ref = workInProgress.ref;
	  newChild.return = workInProgress;
	  workInProgress.child = newChild;
	  return newChild;
	}

	function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, renderLanes) {
	  // TODO: current can be non-null here even if the component
	  // hasn't yet mounted. This happens when the inner render suspends.
	  // We'll need to figure out if this is fine or can cause issues.
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var outerMemoType = workInProgress.elementType;

	      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
	        // We warn when you define propTypes on lazy()
	        // so let's just skip over it to find memo() outer wrapper.
	        // Inner props for memo are validated later.
	        var lazyComponent = outerMemoType;
	        var payload = lazyComponent._payload;
	        var init = lazyComponent._init;

	        try {
	          outerMemoType = init(payload);
	        } catch (x) {
	          outerMemoType = null;
	        } // Inner propTypes will be validated in the function component path.


	        var outerPropTypes = outerMemoType && outerMemoType.propTypes;

	        if (outerPropTypes) {
	          checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
	          'prop', getComponentNameFromType(outerMemoType));
	        }
	      }
	    }
	  }

	  if (current !== null) {
	    var prevProps = current.memoizedProps;

	    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.
	     workInProgress.type === current.type )) {
	      didReceiveUpdate = false; // The props are shallowly equal. Reuse the previous props object, like we
	      // would during a normal fiber bailout.
	      //
	      // We don't have strong guarantees that the props object is referentially
	      // equal during updates where we can't bail out anyway — like if the props
	      // are shallowly equal, but there's a local state or context update in the
	      // same batch.
	      //
	      // However, as a principle, we should aim to make the behavior consistent
	      // across different ways of memoizing a component. For example, React.memo
	      // has a different internal Fiber layout if you pass a normal function
	      // component (SimpleMemoComponent) versus if you pass a different type
	      // like forwardRef (MemoComponent). But this is an implementation detail.
	      // Wrapping a component in forwardRef (or React.lazy, etc) shouldn't
	      // affect whether the props object is reused during a bailout.

	      workInProgress.pendingProps = nextProps = prevProps;

	      if (!checkScheduledUpdateOrContext(current, renderLanes)) {
	        // The pending lanes were cleared at the beginning of beginWork. We're
	        // about to bail out, but there might be other lanes that weren't
	        // included in the current render. Usually, the priority level of the
	        // remaining updates is accumulated during the evaluation of the
	        // component (i.e. when processing the update queue). But since since
	        // we're bailing out early *without* evaluating the component, we need
	        // to account for it here, too. Reset to the value of the current fiber.
	        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
	        // because a MemoComponent fiber does not have hooks or an update queue;
	        // rather, it wraps around an inner component, which may or may not
	        // contains hooks.
	        // TODO: Move the reset at in beginWork out of the common path so that
	        // this is no longer necessary.
	        workInProgress.lanes = current.lanes;
	        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
	        // This is a special case that only exists for legacy mode.
	        // See https://github.com/facebook/react/pull/19216.
	        didReceiveUpdate = true;
	      }
	    }
	  }

	  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
	}

	function updateOffscreenComponent(current, workInProgress, renderLanes) {
	  var nextProps = workInProgress.pendingProps;
	  var nextChildren = nextProps.children;
	  var prevState = current !== null ? current.memoizedState : null;

	  if (nextProps.mode === 'hidden' || enableLegacyHidden ) {
	    // Rendering a hidden tree.
	    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	      // In legacy sync mode, don't defer the subtree. Render it now.
	      // TODO: Consider how Offscreen should work with transitions in the future
	      var nextState = {
	        baseLanes: NoLanes,
	        cachePool: null,
	        transitions: null
	      };
	      workInProgress.memoizedState = nextState;

	      pushRenderLanes(workInProgress, renderLanes);
	    } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
	      var spawnedCachePool = null; // We're hidden, and we're not rendering at Offscreen. We will bail out
	      // and resume this tree later.

	      var nextBaseLanes;

	      if (prevState !== null) {
	        var prevBaseLanes = prevState.baseLanes;
	        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
	      } else {
	        nextBaseLanes = renderLanes;
	      } // Schedule this fiber to re-render at offscreen priority. Then bailout.


	      workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
	      var _nextState = {
	        baseLanes: nextBaseLanes,
	        cachePool: spawnedCachePool,
	        transitions: null
	      };
	      workInProgress.memoizedState = _nextState;
	      workInProgress.updateQueue = null;
	      // to avoid a push/pop misalignment.


	      pushRenderLanes(workInProgress, nextBaseLanes);

	      return null;
	    } else {
	      // This is the second render. The surrounding visible content has already
	      // committed. Now we resume rendering the hidden tree.
	      // Rendering at offscreen, so we can clear the base lanes.
	      var _nextState2 = {
	        baseLanes: NoLanes,
	        cachePool: null,
	        transitions: null
	      };
	      workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.

	      var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;

	      pushRenderLanes(workInProgress, subtreeRenderLanes);
	    }
	  } else {
	    // Rendering a visible tree.
	    var _subtreeRenderLanes;

	    if (prevState !== null) {
	      // We're going from hidden -> visible.
	      _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes);

	      workInProgress.memoizedState = null;
	    } else {
	      // We weren't previously hidden, and we still aren't, so there's nothing
	      // special to do. Need to push to the stack regardless, though, to avoid
	      // a push/pop misalignment.
	      _subtreeRenderLanes = renderLanes;
	    }

	    pushRenderLanes(workInProgress, _subtreeRenderLanes);
	  }

	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	} // Note: These happen to have identical begin phases, for now. We shouldn't hold

	function updateFragment(current, workInProgress, renderLanes) {
	  var nextChildren = workInProgress.pendingProps;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateMode(current, workInProgress, renderLanes) {
	  var nextChildren = workInProgress.pendingProps.children;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateProfiler(current, workInProgress, renderLanes) {
	  {
	    workInProgress.flags |= Update;

	    {
	      // Reset effect durations for the next eventual effect phase.
	      // These are reset during render to allow the DevTools commit hook a chance to read them,
	      var stateNode = workInProgress.stateNode;
	      stateNode.effectDuration = 0;
	      stateNode.passiveEffectDuration = 0;
	    }
	  }

	  var nextProps = workInProgress.pendingProps;
	  var nextChildren = nextProps.children;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function markRef(current, workInProgress) {
	  var ref = workInProgress.ref;

	  if (current === null && ref !== null || current !== null && current.ref !== ref) {
	    // Schedule a Ref effect
	    workInProgress.flags |= Ref;

	    {
	      workInProgress.flags |= RefStatic;
	    }
	  }
	}

	function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
	  {
	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentNameFromType(Component));
	      }
	    }
	  }

	  var context;

	  {
	    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
	    context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  var nextChildren;
	  var hasId;
	  prepareToReadContext(workInProgress, renderLanes);

	  {
	    markComponentRenderStarted(workInProgress);
	  }

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
	    hasId = checkDidRenderIdHook();

	    if ( workInProgress.mode & StrictLegacyMode) {
	      setIsStrictModeForDevtools(true);

	      try {
	        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
	        hasId = checkDidRenderIdHook();
	      } finally {
	        setIsStrictModeForDevtools(false);
	      }
	    }

	    setIsRendering(false);
	  }

	  {
	    markComponentRenderStopped();
	  }

	  if (current !== null && !didReceiveUpdate) {
	    bailoutHooks(current, workInProgress, renderLanes);
	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	  }

	  if (getIsHydrating() && hasId) {
	    pushMaterializedTreeId(workInProgress);
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
	  {
	    // This is used by DevTools to force a boundary to error.
	    switch (shouldError(workInProgress)) {
	      case false:
	        {
	          var _instance = workInProgress.stateNode;
	          var ctor = workInProgress.type; // TODO This way of resetting the error boundary state is a hack.
	          // Is there a better way to do this?

	          var tempInstance = new ctor(workInProgress.memoizedProps, _instance.context);
	          var state = tempInstance.state;

	          _instance.updater.enqueueSetState(_instance, state, null);

	          break;
	        }

	      case true:
	        {
	          workInProgress.flags |= DidCapture;
	          workInProgress.flags |= ShouldCapture; // eslint-disable-next-line react-internal/prod-error-codes

	          var error$1 = new Error('Simulated error coming from DevTools');
	          var lane = pickArbitraryLane(renderLanes);
	          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane); // Schedule the error boundary to re-render using updated state

	          var update = createClassErrorUpdate(workInProgress, createCapturedValueAtFiber(error$1, workInProgress), lane);
	          enqueueCapturedUpdate(workInProgress, update);
	          break;
	        }
	    }

	    if (workInProgress.type !== workInProgress.elementType) {
	      // Lazy component props can't be validated in createElement
	      // because they're only guaranteed to be resolved here.
	      var innerPropTypes = Component.propTypes;

	      if (innerPropTypes) {
	        checkPropTypes(innerPropTypes, nextProps, // Resolved props
	        'prop', getComponentNameFromType(Component));
	      }
	    }
	  } // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.


	  var hasContext;

	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }

	  prepareToReadContext(workInProgress, renderLanes);
	  var instance = workInProgress.stateNode;
	  var shouldUpdate;

	  if (instance === null) {
	    resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress); // In the initial pass we might need to construct the instance.

	    constructClassInstance(workInProgress, Component, nextProps);
	    mountClassInstance(workInProgress, Component, nextProps, renderLanes);
	    shouldUpdate = true;
	  } else if (current === null) {
	    // In a resume, we'll already have an instance we can reuse.
	    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
	  } else {
	    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
	  }

	  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);

	  {
	    var inst = workInProgress.stateNode;

	    if (shouldUpdate && inst.props !== nextProps) {
	      if (!didWarnAboutReassigningProps) {
	        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentNameFromFiber(workInProgress) || 'a component');
	      }

	      didWarnAboutReassigningProps = true;
	    }
	  }

	  return nextUnitOfWork;
	}

	function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
	  // Refs should update even if shouldComponentUpdate returns false
	  markRef(current, workInProgress);
	  var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;

	  if (!shouldUpdate && !didCaptureError) {
	    // Context providers should defer to sCU for rendering
	    if (hasContext) {
	      invalidateContextProvider(workInProgress, Component, false);
	    }

	    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	  }

	  var instance = workInProgress.stateNode; // Rerender

	  ReactCurrentOwner$1.current = workInProgress;
	  var nextChildren;

	  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
	    // If we captured an error, but getDerivedStateFromError is not defined,
	    // unmount all the children. componentDidCatch will schedule an update to
	    // re-render a fallback. This is temporary until we migrate everyone to
	    // the new API.
	    // TODO: Warn in a future release.
	    nextChildren = null;

	    {
	      stopProfilerTimerIfRunning();
	    }
	  } else {
	    {
	      markComponentRenderStarted(workInProgress);
	    }

	    {
	      setIsRendering(true);
	      nextChildren = instance.render();

	      if ( workInProgress.mode & StrictLegacyMode) {
	        setIsStrictModeForDevtools(true);

	        try {
	          instance.render();
	        } finally {
	          setIsStrictModeForDevtools(false);
	        }
	      }

	      setIsRendering(false);
	    }

	    {
	      markComponentRenderStopped();
	    }
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;

	  if (current !== null && didCaptureError) {
	    // If we're recovering from an error, reconcile without reusing any of
	    // the existing children. Conceptually, the normal children and the children
	    // that are shown on error are two different sets, so we shouldn't reuse
	    // normal children even if their identities match.
	    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
	  } else {
	    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  } // Memoize state using the values we just used to render.
	  // TODO: Restructure so we never read values from the instance.


	  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

	  if (hasContext) {
	    invalidateContextProvider(workInProgress, Component, true);
	  }

	  return workInProgress.child;
	}

	function pushHostRootContext(workInProgress) {
	  var root = workInProgress.stateNode;

	  if (root.pendingContext) {
	    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
	  } else if (root.context) {
	    // Should always be set
	    pushTopLevelContextObject(workInProgress, root.context, false);
	  }

	  pushHostContainer(workInProgress, root.containerInfo);
	}

	function updateHostRoot(current, workInProgress, renderLanes) {
	  pushHostRootContext(workInProgress);

	  if (current === null) {
	    throw new Error('Should have a current fiber. This is a bug in React.');
	  }

	  var nextProps = workInProgress.pendingProps;
	  var prevState = workInProgress.memoizedState;
	  var prevChildren = prevState.element;
	  cloneUpdateQueue(current, workInProgress);
	  processUpdateQueue(workInProgress, nextProps, null, renderLanes);
	  var nextState = workInProgress.memoizedState;
	  workInProgress.stateNode;
	  // being called "element".


	  var nextChildren = nextState.element;

	  if (supportsHydration && prevState.isDehydrated) {
	    // This is a hydration root whose shell has not yet hydrated. We should
	    // attempt to hydrate.
	    // Flip isDehydrated to false to indicate that when this render
	    // finishes, the root will no longer be dehydrated.
	    var overrideState = {
	      element: nextChildren,
	      isDehydrated: false,
	      cache: nextState.cache,
	      pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
	      transitions: nextState.transitions
	    };
	    var updateQueue = workInProgress.updateQueue; // `baseState` can always be the last state because the root doesn't
	    // have reducer functions so it doesn't need rebasing.

	    updateQueue.baseState = overrideState;
	    workInProgress.memoizedState = overrideState;

	    if (workInProgress.flags & ForceClientRender) {
	      // Something errored during a previous attempt to hydrate the shell, so we
	      // forced a client render.
	      var recoverableError = createCapturedValueAtFiber(new Error('There was an error while hydrating. Because the error happened outside ' + 'of a Suspense boundary, the entire root will switch to ' + 'client rendering.'), workInProgress);
	      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError);
	    } else if (nextChildren !== prevChildren) {
	      var _recoverableError = createCapturedValueAtFiber(new Error('This root received an early update, before anything was able ' + 'hydrate. Switched the entire root to client rendering.'), workInProgress);

	      return mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, _recoverableError);
	    } else {
	      // The outermost shell has not hydrated yet. Start hydrating.
	      enterHydrationState(workInProgress);

	      var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
	      workInProgress.child = child;
	      var node = child;

	      while (node) {
	        // Mark each child as hydrating. This is a fast path to know whether this
	        // tree is part of a hydrating tree. This is used to determine if a child
	        // node has fully mounted yet, and for scheduling event replaying.
	        // Conceptually this is similar to Placement in that a new subtree is
	        // inserted into the React tree here. It just happens to not need DOM
	        // mutations because it already exists.
	        node.flags = node.flags & ~Placement | Hydrating;
	        node = node.sibling;
	      }
	    }
	  } else {
	    // Root is not dehydrated. Either this is a client-only root, or it
	    // already hydrated.
	    resetHydrationState();

	    if (nextChildren === prevChildren) {
	      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	    }

	    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  }

	  return workInProgress.child;
	}

	function mountHostRootWithoutHydrating(current, workInProgress, nextChildren, renderLanes, recoverableError) {
	  // Revert to client rendering.
	  resetHydrationState();
	  queueHydrationError(recoverableError);
	  workInProgress.flags |= ForceClientRender;
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateHostComponent(current, workInProgress, renderLanes) {
	  pushHostContext(workInProgress);

	  if (current === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  }

	  var type = workInProgress.type;
	  var nextProps = workInProgress.pendingProps;
	  var prevProps = current !== null ? current.memoizedProps : null;
	  var nextChildren = nextProps.children;
	  var isDirectTextChild = shouldSetTextContent(type, nextProps);

	  if (isDirectTextChild) {
	    // We special case a direct text child of a host node. This is a common
	    // case. We won't handle it as a reified child. We will instead handle
	    // this in the host environment that also has access to this prop. That
	    // avoids allocating another HostText fiber and traversing it.
	    nextChildren = null;
	  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
	    // If we're switching from a direct text child to a normal child, or to
	    // empty, we need to schedule the text content to be reset.
	    workInProgress.flags |= ContentReset;
	  }

	  markRef(current, workInProgress);
	  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  return workInProgress.child;
	}

	function updateHostText(current, workInProgress) {
	  if (current === null) {
	    tryToClaimNextHydratableInstance(workInProgress);
	  } // Nothing to do here. This is terminal. We'll do the completion step
	  // immediately after.


	  return null;
	}

	function mountLazyComponent(_current, workInProgress, elementType, renderLanes) {
	  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
	  var props = workInProgress.pendingProps;
	  var lazyComponent = elementType;
	  var payload = lazyComponent._payload;
	  var init = lazyComponent._init;
	  var Component = init(payload); // Store the unwrapped component in the type.

	  workInProgress.type = Component;
	  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
	  var resolvedProps = resolveDefaultProps(Component, props);
	  var child;

	  switch (resolvedTag) {
	    case FunctionComponent:
	      {
	        {
	          validateFunctionComponentInDev(workInProgress, Component);
	          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
	        }

	        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
	        return child;
	      }

	    case ClassComponent:
	      {
	        {
	          workInProgress.type = Component = resolveClassForHotReloading(Component);
	        }

	        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
	        return child;
	      }

	    case ForwardRef:
	      {
	        {
	          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
	        }

	        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
	        return child;
	      }

	    case MemoComponent:
	      {
	        {
	          if (workInProgress.type !== workInProgress.elementType) {
	            var outerPropTypes = Component.propTypes;

	            if (outerPropTypes) {
	              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
	              'prop', getComponentNameFromType(Component));
	            }
	          }
	        }

	        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
	        renderLanes);
	        return child;
	      }
	  }

	  var hint = '';

	  {
	    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
	      hint = ' Did you wrap a component in React.lazy() more than once?';
	    }
	  } // This message intentionally doesn't mention ForwardRef or MemoComponent
	  // because the fact that it's a separate type of work is an
	  // implementation detail.


	  throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
	}

	function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
	  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress); // Promote the fiber to a class and try rendering again.

	  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
	  // Push context providers early to prevent context stack mismatches.
	  // During mounting we don't know the child context yet as the instance doesn't exist.
	  // We will invalidate the child context in finishClassComponent() right after rendering.

	  var hasContext;

	  if (isContextProvider(Component)) {
	    hasContext = true;
	    pushContextProvider(workInProgress);
	  } else {
	    hasContext = false;
	  }

	  prepareToReadContext(workInProgress, renderLanes);
	  constructClassInstance(workInProgress, Component, nextProps);
	  mountClassInstance(workInProgress, Component, nextProps, renderLanes);
	  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
	}

	function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
	  resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress);
	  var props = workInProgress.pendingProps;
	  var context;

	  {
	    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
	    context = getMaskedContext(workInProgress, unmaskedContext);
	  }

	  prepareToReadContext(workInProgress, renderLanes);
	  var value;
	  var hasId;

	  {
	    markComponentRenderStarted(workInProgress);
	  }

	  {
	    if (Component.prototype && typeof Component.prototype.render === 'function') {
	      var componentName = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutBadClass[componentName]) {
	        error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

	        didWarnAboutBadClass[componentName] = true;
	      }
	    }

	    if (workInProgress.mode & StrictLegacyMode) {
	      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
	    }

	    setIsRendering(true);
	    ReactCurrentOwner$1.current = workInProgress;
	    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
	    hasId = checkDidRenderIdHook();
	    setIsRendering(false);
	  }

	  {
	    markComponentRenderStopped();
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;

	  {
	    // Support for module components is deprecated and is removed behind a flag.
	    // Whether or not it would crash later, we want to show a good message in DEV first.
	    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
	      var _componentName = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutModulePatternComponent[_componentName]) {
	        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

	        didWarnAboutModulePatternComponent[_componentName] = true;
	      }
	    }
	  }

	  if ( // Run these checks in production only if the flag is off.
	  // Eventually we'll delete this branch altogether.
	   typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
	    {
	      var _componentName2 = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutModulePatternComponent[_componentName2]) {
	        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);

	        didWarnAboutModulePatternComponent[_componentName2] = true;
	      }
	    } // Proceed under the assumption that this is a class instance


	    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

	    workInProgress.memoizedState = null;
	    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
	    // During mounting we don't know the child context yet as the instance doesn't exist.
	    // We will invalidate the child context in finishClassComponent() right after rendering.

	    var hasContext = false;

	    if (isContextProvider(Component)) {
	      hasContext = true;
	      pushContextProvider(workInProgress);
	    } else {
	      hasContext = false;
	    }

	    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
	    initializeUpdateQueue(workInProgress);
	    adoptClassInstance(workInProgress, value);
	    mountClassInstance(workInProgress, Component, props, renderLanes);
	    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
	  } else {
	    // Proceed under the assumption that this is a function component
	    workInProgress.tag = FunctionComponent;

	    {

	      if ( workInProgress.mode & StrictLegacyMode) {
	        setIsStrictModeForDevtools(true);

	        try {
	          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
	          hasId = checkDidRenderIdHook();
	        } finally {
	          setIsStrictModeForDevtools(false);
	        }
	      }
	    }

	    if (getIsHydrating() && hasId) {
	      pushMaterializedTreeId(workInProgress);
	    }

	    reconcileChildren(null, workInProgress, value, renderLanes);

	    {
	      validateFunctionComponentInDev(workInProgress, Component);
	    }

	    return workInProgress.child;
	  }
	}

	function validateFunctionComponentInDev(workInProgress, Component) {
	  {
	    if (Component) {
	      if (Component.childContextTypes) {
	        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
	      }
	    }

	    if (workInProgress.ref !== null) {
	      var info = '';
	      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

	      if (ownerName) {
	        info += '\n\nCheck the render method of `' + ownerName + '`.';
	      }

	      var warningKey = ownerName || '';
	      var debugSource = workInProgress._debugSource;

	      if (debugSource) {
	        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
	      }

	      if (!didWarnAboutFunctionRefs[warningKey]) {
	        didWarnAboutFunctionRefs[warningKey] = true;

	        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
	      }
	    }

	    if ( Component.defaultProps !== undefined) {
	      var componentName = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
	        error('%s: Support for defaultProps will be removed from function components ' + 'in a future major release. Use JavaScript default parameters instead.', componentName);

	        didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
	      }
	    }

	    if (typeof Component.getDerivedStateFromProps === 'function') {
	      var _componentName3 = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
	        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);

	        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
	      }
	    }

	    if (typeof Component.contextType === 'object' && Component.contextType !== null) {
	      var _componentName4 = getComponentNameFromType(Component) || 'Unknown';

	      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
	        error('%s: Function components do not support contextType.', _componentName4);

	        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
	      }
	    }
	  }
	}

	var SUSPENDED_MARKER = {
	  dehydrated: null,
	  treeContext: null,
	  retryLane: NoLane
	};

	function mountSuspenseOffscreenState(renderLanes) {
	  return {
	    baseLanes: renderLanes,
	    cachePool: getSuspendedCache(),
	    transitions: null
	  };
	}

	function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
	  var cachePool = null;

	  return {
	    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes),
	    cachePool: cachePool,
	    transitions: prevOffscreenState.transitions
	  };
	} // TODO: Probably should inline this back


	function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
	  // If we're already showing a fallback, there are cases where we need to
	  // remain on that fallback regardless of whether the content has resolved.
	  // For example, SuspenseList coordinates when nested content appears.
	  if (current !== null) {
	    var suspenseState = current.memoizedState;

	    if (suspenseState === null) {
	      // Currently showing content. Don't hide it, even if ForceSuspenseFallback
	      // is true. More precise name might be "ForceRemainSuspenseFallback".
	      // Note: This is a factoring smell. Can't remain on a fallback if there's
	      // no fallback to remain on.
	      return false;
	    }
	  } // Not currently showing content. Consult the Suspense context.


	  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
	}

	function getRemainingWorkInPrimaryTree(current, renderLanes) {
	  // TODO: Should not remove render lanes that were pinged during this render
	  return removeLanes(current.childLanes, renderLanes);
	}

	function updateSuspenseComponent(current, workInProgress, renderLanes) {
	  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

	  {
	    if (shouldSuspend(workInProgress)) {
	      workInProgress.flags |= DidCapture;
	    }
	  }

	  var suspenseContext = suspenseStackCursor.current;
	  var showFallback = false;
	  var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;

	  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
	    // Something in this boundary's subtree already suspended. Switch to
	    // rendering the fallback children.
	    showFallback = true;
	    workInProgress.flags &= ~DidCapture;
	  } else {
	    // Attempting the main content
	    if (current === null || current.memoizedState !== null) {
	      // This is a new mount or this boundary is already showing a fallback state.
	      // Mark this subtree context as having at least one invisible parent that could
	      // handle the fallback state.
	      // Avoided boundaries are not considered since they cannot handle preferred fallback states.
	      {
	        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
	      }
	    }
	  }

	  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	  pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
	  // boundary's children. This involves some custom reconciliation logic. Two
	  // main reasons this is so complicated.
	  //
	  // First, Legacy Mode has different semantics for backwards compatibility. The
	  // primary tree will commit in an inconsistent state, so when we do the
	  // second pass to render the fallback, we do some exceedingly, uh, clever
	  // hacks to make that not totally break. Like transferring effects and
	  // deletions from hidden tree. In Concurrent Mode, it's much simpler,
	  // because we bailout on the primary tree completely and leave it in its old
	  // state, no effects. Same as what we do for Offscreen (except that
	  // Offscreen doesn't have the first render pass).
	  //
	  // Second is hydration. During hydration, the Suspense fiber has a slightly
	  // different layout, where the child points to a dehydrated fragment, which
	  // contains the DOM rendered by the server.
	  //
	  // Third, even if you set all that aside, Suspense is like error boundaries in
	  // that we first we try to render one tree, and if that fails, we render again
	  // and switch to a different tree. Like a try/catch block. So we have to track
	  // which branch we're currently rendering. Ideally we would model this using
	  // a stack.

	  if (current === null) {
	    // Initial mount
	    // Special path for hydration
	    // If we're currently hydrating, try to hydrate this boundary.
	    tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.

	    var suspenseState = workInProgress.memoizedState;

	    if (suspenseState !== null) {
	      var dehydrated = suspenseState.dehydrated;

	      if (dehydrated !== null) {
	        return mountDehydratedSuspenseComponent(workInProgress, dehydrated);
	      }
	    }

	    var nextPrimaryChildren = nextProps.children;
	    var nextFallbackChildren = nextProps.fallback;

	    if (showFallback) {
	      var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
	      var primaryChildFragment = workInProgress.child;
	      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
	      workInProgress.memoizedState = SUSPENDED_MARKER;

	      return fallbackFragment;
	    } else {
	      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren);
	    }
	  } else {
	    // This is an update.
	    // Special path for hydration
	    var prevState = current.memoizedState;

	    if (prevState !== null) {
	      var _dehydrated = prevState.dehydrated;

	      if (_dehydrated !== null) {
	        return updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, _dehydrated, prevState, renderLanes);
	      }
	    }

	    if (showFallback) {
	      var _nextFallbackChildren = nextProps.fallback;
	      var _nextPrimaryChildren = nextProps.children;
	      var fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren, _nextFallbackChildren, renderLanes);
	      var _primaryChildFragment2 = workInProgress.child;
	      var prevOffscreenState = current.child.memoizedState;
	      _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);

	      _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
	      workInProgress.memoizedState = SUSPENDED_MARKER;
	      return fallbackChildFragment;
	    } else {
	      var _nextPrimaryChildren2 = nextProps.children;

	      var _primaryChildFragment3 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren2, renderLanes);

	      workInProgress.memoizedState = null;
	      return _primaryChildFragment3;
	    }
	  }
	}

	function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
	  var mode = workInProgress.mode;
	  var primaryChildProps = {
	    mode: 'visible',
	    children: primaryChildren
	  };
	  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
	  primaryChildFragment.return = workInProgress;
	  workInProgress.child = primaryChildFragment;
	  return primaryChildFragment;
	}

	function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
	  var mode = workInProgress.mode;
	  var progressedPrimaryFragment = workInProgress.child;
	  var primaryChildProps = {
	    mode: 'hidden',
	    children: primaryChildren
	  };
	  var primaryChildFragment;
	  var fallbackChildFragment;

	  if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
	    // In legacy mode, we commit the primary tree as if it successfully
	    // completed, even though it's in an inconsistent state.
	    primaryChildFragment = progressedPrimaryFragment;
	    primaryChildFragment.childLanes = NoLanes;
	    primaryChildFragment.pendingProps = primaryChildProps;

	    if ( workInProgress.mode & ProfileMode) {
	      // Reset the durations from the first pass so they aren't included in the
	      // final amounts. This seems counterintuitive, since we're intentionally
	      // not measuring part of the render phase, but this makes it match what we
	      // do in Concurrent Mode.
	      primaryChildFragment.actualDuration = 0;
	      primaryChildFragment.actualStartTime = -1;
	      primaryChildFragment.selfBaseDuration = 0;
	      primaryChildFragment.treeBaseDuration = 0;
	    }

	    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
	  } else {
	    primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
	    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
	  }

	  primaryChildFragment.return = workInProgress;
	  fallbackChildFragment.return = workInProgress;
	  primaryChildFragment.sibling = fallbackChildFragment;
	  workInProgress.child = primaryChildFragment;
	  return fallbackChildFragment;
	}

	function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes) {
	  // The props argument to `createFiberFromOffscreen` is `any` typed, so we use
	  // this wrapper function to constrain it.
	  return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
	}

	function updateWorkInProgressOffscreenFiber(current, offscreenProps) {
	  // The props argument to `createWorkInProgress` is `any` typed, so we use this
	  // wrapper function to constrain it.
	  return createWorkInProgress(current, offscreenProps);
	}

	function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
	  var currentPrimaryChildFragment = current.child;
	  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
	  var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
	    mode: 'visible',
	    children: primaryChildren
	  });

	  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	    primaryChildFragment.lanes = renderLanes;
	  }

	  primaryChildFragment.return = workInProgress;
	  primaryChildFragment.sibling = null;

	  if (currentFallbackChildFragment !== null) {
	    // Delete the fallback child fragment
	    var deletions = workInProgress.deletions;

	    if (deletions === null) {
	      workInProgress.deletions = [currentFallbackChildFragment];
	      workInProgress.flags |= ChildDeletion;
	    } else {
	      deletions.push(currentFallbackChildFragment);
	    }
	  }

	  workInProgress.child = primaryChildFragment;
	  return primaryChildFragment;
	}

	function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
	  var mode = workInProgress.mode;
	  var currentPrimaryChildFragment = current.child;
	  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
	  var primaryChildProps = {
	    mode: 'hidden',
	    children: primaryChildren
	  };
	  var primaryChildFragment;

	  if ( // In legacy mode, we commit the primary tree as if it successfully
	  // completed, even though it's in an inconsistent state.
	  (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
	  // already cloned. In legacy mode, the only case where this isn't true is
	  // when DevTools forces us to display a fallback; we skip the first render
	  // pass entirely and go straight to rendering the fallback. (In Concurrent
	  // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
	  // only codepath.)
	  workInProgress.child !== currentPrimaryChildFragment) {
	    var progressedPrimaryFragment = workInProgress.child;
	    primaryChildFragment = progressedPrimaryFragment;
	    primaryChildFragment.childLanes = NoLanes;
	    primaryChildFragment.pendingProps = primaryChildProps;

	    if ( workInProgress.mode & ProfileMode) {
	      // Reset the durations from the first pass so they aren't included in the
	      // final amounts. This seems counterintuitive, since we're intentionally
	      // not measuring part of the render phase, but this makes it match what we
	      // do in Concurrent Mode.
	      primaryChildFragment.actualDuration = 0;
	      primaryChildFragment.actualStartTime = -1;
	      primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
	      primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
	    } // The fallback fiber was added as a deletion during the first pass.
	    // However, since we're going to remain on the fallback, we no longer want
	    // to delete it.


	    workInProgress.deletions = null;
	  } else {
	    primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps); // Since we're reusing a current tree, we need to reuse the flags, too.
	    // (We don't do this in legacy mode, because in legacy mode we don't re-use
	    // the current tree; see previous branch.)

	    primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
	  }

	  var fallbackChildFragment;

	  if (currentFallbackChildFragment !== null) {
	    fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
	  } else {
	    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
	    // mounted but this is a new fiber.

	    fallbackChildFragment.flags |= Placement;
	  }

	  fallbackChildFragment.return = workInProgress;
	  primaryChildFragment.return = workInProgress;
	  primaryChildFragment.sibling = fallbackChildFragment;
	  workInProgress.child = primaryChildFragment;
	  return fallbackChildFragment;
	}

	function retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, recoverableError) {
	  // Falling back to client rendering. Because this has performance
	  // implications, it's considered a recoverable error, even though the user
	  // likely won't observe anything wrong with the UI.
	  //
	  // The error is passed in as an argument to enforce that every caller provide
	  // a custom message, or explicitly opt out (currently the only path that opts
	  // out is legacy mode; every concurrent path provides an error).
	  if (recoverableError !== null) {
	    queueHydrationError(recoverableError);
	  } // This will add the old fiber to the deletion list


	  reconcileChildFibers(workInProgress, current.child, null, renderLanes); // We're now not suspended nor dehydrated.

	  var nextProps = workInProgress.pendingProps;
	  var primaryChildren = nextProps.children;
	  var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Needs a placement effect because the parent (the Suspense boundary) already
	  // mounted but this is a new fiber.

	  primaryChildFragment.flags |= Placement;
	  workInProgress.memoizedState = null;
	  return primaryChildFragment;
	}

	function mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
	  var fiberMode = workInProgress.mode;
	  var primaryChildProps = {
	    mode: 'visible',
	    children: primaryChildren
	  };
	  var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
	  var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes, null); // Needs a placement effect because the parent (the Suspense
	  // boundary) already mounted but this is a new fiber.

	  fallbackChildFragment.flags |= Placement;
	  primaryChildFragment.return = workInProgress;
	  fallbackChildFragment.return = workInProgress;
	  primaryChildFragment.sibling = fallbackChildFragment;
	  workInProgress.child = primaryChildFragment;

	  if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
	    // We will have dropped the effect list which contains the
	    // deletion. We need to reconcile to delete the current child.
	    reconcileChildFibers(workInProgress, current.child, null, renderLanes);
	  }

	  return fallbackChildFragment;
	}

	function mountDehydratedSuspenseComponent(workInProgress, suspenseInstance, renderLanes) {
	  // During the first pass, we'll bail out and not drill into the children.
	  // Instead, we'll leave the content in place and try to hydrate it later.
	  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	    {
	      error('Cannot hydrate Suspense in legacy mode. Switch from ' + 'ReactDOM.hydrate(element, container) to ' + 'ReactDOMClient.hydrateRoot(container, <App />)' + '.render(element) or remove the Suspense components from ' + 'the server rendered components.');
	    }

	    workInProgress.lanes = laneToLanes(SyncLane);
	  } else if (isSuspenseInstanceFallback(suspenseInstance)) {
	    // This is a client-only boundary. Since we won't get any content from the server
	    // for this, we need to schedule that at a higher priority based on when it would
	    // have timed out. In theory we could render it in this pass but it would have the
	    // wrong priority associated with it and will prevent hydration of parent path.
	    // Instead, we'll leave work left on it to render it in a separate commit.
	    // TODO This time should be the time at which the server rendered response that is
	    // a parent to this boundary was displayed. However, since we currently don't have
	    // a protocol to transfer that time, we'll just estimate it by using the current
	    // time. This will mean that Suspense timeouts are slightly shifted to later than
	    // they should be.
	    // Schedule a normal pri update to render this content.
	    workInProgress.lanes = laneToLanes(DefaultHydrationLane);
	  } else {
	    // We'll continue hydrating the rest at offscreen priority since we'll already
	    // be showing the right content coming from the server, it is no rush.
	    workInProgress.lanes = laneToLanes(OffscreenLane);
	  }

	  return null;
	}

	function updateDehydratedSuspenseComponent(current, workInProgress, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes) {
	  if (!didSuspend) {
	    // This is the first render pass. Attempt to hydrate.
	    // We should never be hydrating at this point because it is the first pass,
	    // but after we've already committed once.
	    warnIfHydrating();

	    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, // TODO: When we delete legacy mode, we should make this error argument
	      // required — every concurrent mode path that causes hydration to
	      // de-opt to client rendering should have an error message.
	      null);
	    }

	    if (isSuspenseInstanceFallback(suspenseInstance)) {
	      // This boundary is in a permanent fallback state. In this case, we'll never
	      // get an update and we'll never be able to hydrate the final content. Let's just try the
	      // client side render instead.
	      var digest, message, stack;

	      {
	        var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);

	        digest = _getSuspenseInstanceF.digest;
	        message = _getSuspenseInstanceF.message;
	        stack = _getSuspenseInstanceF.stack;
	      }

	      var error;

	      if (message) {
	        // eslint-disable-next-line react-internal/prod-error-codes
	        error = new Error(message);
	      } else {
	        error = new Error('The server could not finish this Suspense boundary, likely ' + 'due to an error during server rendering. Switched to ' + 'client rendering.');
	      }

	      var capturedValue = createCapturedValue(error, digest, stack);
	      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, capturedValue);
	    }
	    // any context has changed, we need to treat is as if the input might have changed.


	    var hasContextChanged = includesSomeLane(renderLanes, current.childLanes);

	    if (didReceiveUpdate || hasContextChanged) {
	      // This boundary has changed since the first render. This means that we are now unable to
	      // hydrate it. We might still be able to hydrate it using a higher priority lane.
	      var root = getWorkInProgressRoot();

	      if (root !== null) {
	        var attemptHydrationAtLane = getBumpedLaneForHydration(root, renderLanes);

	        if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
	          // Intentionally mutating since this render will get interrupted. This
	          // is one of the very rare times where we mutate the current tree
	          // during the render phase.
	          suspenseState.retryLane = attemptHydrationAtLane; // TODO: Ideally this would inherit the event time of the current render

	          var eventTime = NoTimestamp;
	          enqueueConcurrentRenderForLane(current, attemptHydrationAtLane);
	          scheduleUpdateOnFiber(root, current, attemptHydrationAtLane, eventTime);
	        }
	      } // If we have scheduled higher pri work above, this will probably just abort the render
	      // since we now have higher priority work, but in case it doesn't, we need to prepare to
	      // render something, if we time out. Even if that requires us to delete everything and
	      // skip hydration.
	      // Delay having to do this as long as the suspense timeout allows us.


	      renderDidSuspendDelayIfPossible();

	      var _capturedValue = createCapturedValue(new Error('This Suspense boundary received an update before it finished ' + 'hydrating. This caused the boundary to switch to client rendering. ' + 'The usual way to fix this is to wrap the original update ' + 'in startTransition.'));

	      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue);
	    } else if (isSuspenseInstancePending(suspenseInstance)) {
	      // This component is still pending more data from the server, so we can't hydrate its
	      // content. We treat it as if this component suspended itself. It might seem as if
	      // we could just try to render it client-side instead. However, this will perform a
	      // lot of unnecessary work and is unlikely to complete since it often will suspend
	      // on missing data anyway. Additionally, the server might be able to render more
	      // than we can on the client yet. In that case we'd end up with more fallback states
	      // on the client than if we just leave it alone. If the server times out or errors
	      // these should update this boundary to the permanent Fallback state instead.
	      // Mark it as having captured (i.e. suspended).
	      workInProgress.flags |= DidCapture; // Leave the child in place. I.e. the dehydrated fragment.

	      workInProgress.child = current.child; // Register a callback to retry this boundary once the server has sent the result.

	      var retry = retryDehydratedSuspenseBoundary.bind(null, current);
	      registerSuspenseInstanceRetry(suspenseInstance, retry);
	      return null;
	    } else {
	      // This is the first attempt.
	      reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress, suspenseInstance, suspenseState.treeContext);
	      var primaryChildren = nextProps.children;
	      var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress, primaryChildren); // Mark the children as hydrating. This is a fast path to know whether this
	      // tree is part of a hydrating tree. This is used to determine if a child
	      // node has fully mounted yet, and for scheduling event replaying.
	      // Conceptually this is similar to Placement in that a new subtree is
	      // inserted into the React tree here. It just happens to not need DOM
	      // mutations because it already exists.

	      primaryChildFragment.flags |= Hydrating;
	      return primaryChildFragment;
	    }
	  } else {
	    // This is the second render pass. We already attempted to hydrated, but
	    // something either suspended or errored.
	    if (workInProgress.flags & ForceClientRender) {
	      // Something errored during hydration. Try again without hydrating.
	      workInProgress.flags &= ~ForceClientRender;

	      var _capturedValue2 = createCapturedValue(new Error('There was an error while hydrating this Suspense boundary. ' + 'Switched to client rendering.'));

	      return retrySuspenseComponentWithoutHydrating(current, workInProgress, renderLanes, _capturedValue2);
	    } else if (workInProgress.memoizedState !== null) {
	      // Something suspended and we should still be in dehydrated mode.
	      // Leave the existing child in place.
	      workInProgress.child = current.child; // The dehydrated completion pass expects this flag to be there
	      // but the normal suspense pass doesn't.

	      workInProgress.flags |= DidCapture;
	      return null;
	    } else {
	      // Suspended but we should no longer be in dehydrated mode.
	      // Therefore we now have to render the fallback.
	      var nextPrimaryChildren = nextProps.children;
	      var nextFallbackChildren = nextProps.fallback;
	      var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current, workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
	      var _primaryChildFragment4 = workInProgress.child;
	      _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes);
	      workInProgress.memoizedState = SUSPENDED_MARKER;
	      return fallbackChildFragment;
	    }
	  }
	}

	function scheduleSuspenseWorkOnFiber(fiber, renderLanes, propagationRoot) {
	  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
	  var alternate = fiber.alternate;

	  if (alternate !== null) {
	    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
	  }

	  scheduleContextWorkOnParentPath(fiber.return, renderLanes, propagationRoot);
	}

	function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
	  // Mark any Suspense boundaries with fallbacks as having work to do.
	  // If they were previously forced into fallbacks, they may now be able
	  // to unblock.
	  var node = firstChild;

	  while (node !== null) {
	    if (node.tag === SuspenseComponent) {
	      var state = node.memoizedState;

	      if (state !== null) {
	        scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
	      }
	    } else if (node.tag === SuspenseListComponent) {
	      // If the tail is hidden there might not be an Suspense boundaries
	      // to schedule work on. In this case we have to schedule it on the
	      // list itself.
	      // We don't have to traverse to the children of the list since
	      // the list will propagate the change when it rerenders.
	      scheduleSuspenseWorkOnFiber(node, renderLanes, workInProgress);
	    } else if (node.child !== null) {
	      node.child.return = node;
	      node = node.child;
	      continue;
	    }

	    if (node === workInProgress) {
	      return;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === workInProgress) {
	        return;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  }
	}

	function findLastContentRow(firstChild) {
	  // This is going to find the last row among these children that is already
	  // showing content on the screen, as opposed to being in fallback state or
	  // new. If a row has multiple Suspense boundaries, any of them being in the
	  // fallback state, counts as the whole row being in a fallback state.
	  // Note that the "rows" will be workInProgress, but any nested children
	  // will still be current since we haven't rendered them yet. The mounted
	  // order may not be the same as the new order. We use the new order.
	  var row = firstChild;
	  var lastContentRow = null;

	  while (row !== null) {
	    var currentRow = row.alternate; // New rows can't be content rows.

	    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
	      lastContentRow = row;
	    }

	    row = row.sibling;
	  }

	  return lastContentRow;
	}

	function validateRevealOrder(revealOrder) {
	  {
	    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
	      didWarnAboutRevealOrder[revealOrder] = true;

	      if (typeof revealOrder === 'string') {
	        switch (revealOrder.toLowerCase()) {
	          case 'together':
	          case 'forwards':
	          case 'backwards':
	            {
	              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

	              break;
	            }

	          case 'forward':
	          case 'backward':
	            {
	              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

	              break;
	            }

	          default:
	            error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

	            break;
	        }
	      } else {
	        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
	      }
	    }
	  }
	}

	function validateTailOptions(tailMode, revealOrder) {
	  {
	    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
	      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
	        didWarnAboutTailOptions[tailMode] = true;

	        error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
	      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
	        didWarnAboutTailOptions[tailMode] = true;

	        error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
	      }
	    }
	  }
	}

	function validateSuspenseListNestedChild(childSlot, index) {
	  {
	    var isAnArray = isArray(childSlot);
	    var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === 'function';

	    if (isAnArray || isIterable) {
	      var type = isAnArray ? 'array' : 'iterable';

	      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

	      return false;
	    }
	  }

	  return true;
	}

	function validateSuspenseListChildren(children, revealOrder) {
	  {
	    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
	      if (isArray(children)) {
	        for (var i = 0; i < children.length; i++) {
	          if (!validateSuspenseListNestedChild(children[i], i)) {
	            return;
	          }
	        }
	      } else {
	        var iteratorFn = getIteratorFn(children);

	        if (typeof iteratorFn === 'function') {
	          var childrenIterator = iteratorFn.call(children);

	          if (childrenIterator) {
	            var step = childrenIterator.next();
	            var _i = 0;

	            for (; !step.done; step = childrenIterator.next()) {
	              if (!validateSuspenseListNestedChild(step.value, _i)) {
	                return;
	              }

	              _i++;
	            }
	          }
	        } else {
	          error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
	        }
	      }
	    }
	  }
	}

	function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode) {
	  var renderState = workInProgress.memoizedState;

	  if (renderState === null) {
	    workInProgress.memoizedState = {
	      isBackwards: isBackwards,
	      rendering: null,
	      renderingStartTime: 0,
	      last: lastContentRow,
	      tail: tail,
	      tailMode: tailMode
	    };
	  } else {
	    // We can reuse the existing object from previous renders.
	    renderState.isBackwards = isBackwards;
	    renderState.rendering = null;
	    renderState.renderingStartTime = 0;
	    renderState.last = lastContentRow;
	    renderState.tail = tail;
	    renderState.tailMode = tailMode;
	  }
	} // This can end up rendering this component multiple passes.
	// The first pass splits the children fibers into two sets. A head and tail.
	// We first render the head. If anything is in fallback state, we do another
	// pass through beginWork to rerender all children (including the tail) with
	// the force suspend context. If the first render didn't have anything in
	// in fallback state. Then we render each row in the tail one-by-one.
	// That happens in the completeWork phase without going back to beginWork.


	function updateSuspenseListComponent(current, workInProgress, renderLanes) {
	  var nextProps = workInProgress.pendingProps;
	  var revealOrder = nextProps.revealOrder;
	  var tailMode = nextProps.tail;
	  var newChildren = nextProps.children;
	  validateRevealOrder(revealOrder);
	  validateTailOptions(tailMode, revealOrder);
	  validateSuspenseListChildren(newChildren, revealOrder);
	  reconcileChildren(current, workInProgress, newChildren, renderLanes);
	  var suspenseContext = suspenseStackCursor.current;
	  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

	  if (shouldForceFallback) {
	    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
	    workInProgress.flags |= DidCapture;
	  } else {
	    var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;

	    if (didSuspendBefore) {
	      // If we previously forced a fallback, we need to schedule work
	      // on any nested boundaries to let them know to try to render
	      // again. This is the same as context updating.
	      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
	    }

	    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	  }

	  pushSuspenseContext(workInProgress, suspenseContext);

	  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	    // In legacy mode, SuspenseList doesn't work so we just
	    // use make it a noop by treating it as the default revealOrder.
	    workInProgress.memoizedState = null;
	  } else {
	    switch (revealOrder) {
	      case 'forwards':
	        {
	          var lastContentRow = findLastContentRow(workInProgress.child);
	          var tail;

	          if (lastContentRow === null) {
	            // The whole list is part of the tail.
	            // TODO: We could fast path by just rendering the tail now.
	            tail = workInProgress.child;
	            workInProgress.child = null;
	          } else {
	            // Disconnect the tail rows after the content row.
	            // We're going to render them separately later.
	            tail = lastContentRow.sibling;
	            lastContentRow.sibling = null;
	          }

	          initSuspenseListRenderState(workInProgress, false, // isBackwards
	          tail, lastContentRow, tailMode);
	          break;
	        }

	      case 'backwards':
	        {
	          // We're going to find the first row that has existing content.
	          // At the same time we're going to reverse the list of everything
	          // we pass in the meantime. That's going to be our tail in reverse
	          // order.
	          var _tail = null;
	          var row = workInProgress.child;
	          workInProgress.child = null;

	          while (row !== null) {
	            var currentRow = row.alternate; // New rows can't be content rows.

	            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
	              // This is the beginning of the main content.
	              workInProgress.child = row;
	              break;
	            }

	            var nextRow = row.sibling;
	            row.sibling = _tail;
	            _tail = row;
	            row = nextRow;
	          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


	          initSuspenseListRenderState(workInProgress, true, // isBackwards
	          _tail, null, // last
	          tailMode);
	          break;
	        }

	      case 'together':
	        {
	          initSuspenseListRenderState(workInProgress, false, // isBackwards
	          null, // tail
	          null, // last
	          undefined);
	          break;
	        }

	      default:
	        {
	          // The default reveal order is the same as not having
	          // a boundary.
	          workInProgress.memoizedState = null;
	        }
	    }
	  }

	  return workInProgress.child;
	}

	function updatePortalComponent(current, workInProgress, renderLanes) {
	  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	  var nextChildren = workInProgress.pendingProps;

	  if (current === null) {
	    // Portals are special because we don't append the children during mount
	    // but at commit. Therefore we need to track insertions which the normal
	    // flow doesn't do during mount. This doesn't happen at the root because
	    // the root always starts with a "current" with a null child.
	    // TODO: Consider unifying this with how the root works.
	    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
	  } else {
	    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
	  }

	  return workInProgress.child;
	}

	var hasWarnedAboutUsingNoValuePropOnContextProvider = false;

	function updateContextProvider(current, workInProgress, renderLanes) {
	  var providerType = workInProgress.type;
	  var context = providerType._context;
	  var newProps = workInProgress.pendingProps;
	  var oldProps = workInProgress.memoizedProps;
	  var newValue = newProps.value;

	  {
	    if (!('value' in newProps)) {
	      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
	        hasWarnedAboutUsingNoValuePropOnContextProvider = true;

	        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
	      }
	    }

	    var providerPropTypes = workInProgress.type.propTypes;

	    if (providerPropTypes) {
	      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
	    }
	  }

	  pushProvider(workInProgress, context, newValue);

	  {
	    if (oldProps !== null) {
	      var oldValue = oldProps.value;

	      if (objectIs(oldValue, newValue)) {
	        // No change. Bailout early if children are the same.
	        if (oldProps.children === newProps.children && !hasContextChanged()) {
	          return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	        }
	      } else {
	        // The context value changed. Search for matching consumers and schedule
	        // them to update.
	        propagateContextChange(workInProgress, context, renderLanes);
	      }
	    }
	  }

	  var newChildren = newProps.children;
	  reconcileChildren(current, workInProgress, newChildren, renderLanes);
	  return workInProgress.child;
	}

	var hasWarnedAboutUsingContextAsConsumer = false;

	function updateContextConsumer(current, workInProgress, renderLanes) {
	  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
	  // DEV mode, we create a separate object for Context.Consumer that acts
	  // like a proxy to Context. This proxy object adds unnecessary code in PROD
	  // so we use the old behaviour (Context.Consumer references Context) to
	  // reduce size and overhead. The separate object references context via
	  // a property called "_context", which also gives us the ability to check
	  // in DEV mode if this property exists or not and warn if it does not.

	  {
	    if (context._context === undefined) {
	      // This may be because it's a Context (rather than a Consumer).
	      // Or it may be because it's older React where they're the same thing.
	      // We only want to warn if we're sure it's a new React.
	      if (context !== context.Consumer) {
	        if (!hasWarnedAboutUsingContextAsConsumer) {
	          hasWarnedAboutUsingContextAsConsumer = true;

	          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
	        }
	      }
	    } else {
	      context = context._context;
	    }
	  }

	  var newProps = workInProgress.pendingProps;
	  var render = newProps.children;

	  {
	    if (typeof render !== 'function') {
	      error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
	    }
	  }

	  prepareToReadContext(workInProgress, renderLanes);
	  var newValue = readContext(context);

	  {
	    markComponentRenderStarted(workInProgress);
	  }

	  var newChildren;

	  {
	    ReactCurrentOwner$1.current = workInProgress;
	    setIsRendering(true);
	    newChildren = render(newValue);
	    setIsRendering(false);
	  }

	  {
	    markComponentRenderStopped();
	  } // React DevTools reads this flag.


	  workInProgress.flags |= PerformedWork;
	  reconcileChildren(current, workInProgress, newChildren, renderLanes);
	  return workInProgress.child;
	}

	function markWorkInProgressReceivedUpdate() {
	  didReceiveUpdate = true;
	}

	function resetSuspendedCurrentOnMountInLegacyMode(current, workInProgress) {
	  if ((workInProgress.mode & ConcurrentMode) === NoMode) {
	    if (current !== null) {
	      // A lazy component only mounts if it suspended inside a non-
	      // concurrent tree, in an inconsistent state. We want to treat it like
	      // a new mount, even though an empty version of it already committed.
	      // Disconnect the alternate pointers.
	      current.alternate = null;
	      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

	      workInProgress.flags |= Placement;
	    }
	  }
	}

	function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
	  if (current !== null) {
	    // Reuse previous dependencies
	    workInProgress.dependencies = current.dependencies;
	  }

	  {
	    // Don't update "base" render times for bailouts.
	    stopProfilerTimerIfRunning();
	  }

	  markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.

	  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
	    // The children don't have any work either. We can skip them.
	    // TODO: Once we add back resuming, we should check if the children are
	    // a work-in-progress set. If so, we need to transfer their effects.
	    {
	      return null;
	    }
	  } // This fiber doesn't have work, but its subtree does. Clone the child
	  // fibers and continue.


	  cloneChildFibers(current, workInProgress);
	  return workInProgress.child;
	}

	function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
	  {
	    var returnFiber = oldWorkInProgress.return;

	    if (returnFiber === null) {
	      // eslint-disable-next-line react-internal/prod-error-codes
	      throw new Error('Cannot swap the root fiber.');
	    } // Disconnect from the old current.
	    // It will get deleted.


	    current.alternate = null;
	    oldWorkInProgress.alternate = null; // Connect to the new tree.

	    newWorkInProgress.index = oldWorkInProgress.index;
	    newWorkInProgress.sibling = oldWorkInProgress.sibling;
	    newWorkInProgress.return = oldWorkInProgress.return;
	    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

	    if (oldWorkInProgress === returnFiber.child) {
	      returnFiber.child = newWorkInProgress;
	    } else {
	      var prevSibling = returnFiber.child;

	      if (prevSibling === null) {
	        // eslint-disable-next-line react-internal/prod-error-codes
	        throw new Error('Expected parent to have a child.');
	      }

	      while (prevSibling.sibling !== oldWorkInProgress) {
	        prevSibling = prevSibling.sibling;

	        if (prevSibling === null) {
	          // eslint-disable-next-line react-internal/prod-error-codes
	          throw new Error('Expected to find the previous sibling.');
	        }
	      }

	      prevSibling.sibling = newWorkInProgress;
	    } // Delete the old fiber and place the new one.
	    // Since the old fiber is disconnected, we have to schedule it manually.


	    var deletions = returnFiber.deletions;

	    if (deletions === null) {
	      returnFiber.deletions = [current];
	      returnFiber.flags |= ChildDeletion;
	    } else {
	      deletions.push(current);
	    }

	    newWorkInProgress.flags |= Placement; // Restart work from the new fiber.

	    return newWorkInProgress;
	  }
	}

	function checkScheduledUpdateOrContext(current, renderLanes) {
	  // Before performing an early bailout, we must check if there are pending
	  // updates or context.
	  var updateLanes = current.lanes;

	  if (includesSomeLane(updateLanes, renderLanes)) {
	    return true;
	  } // No pending update, but because context is propagated lazily, we need

	  return false;
	}

	function attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes) {
	  // This fiber does not have any pending work. Bailout without entering
	  // the begin phase. There's still some bookkeeping we that needs to be done
	  // in this optimized path, mostly pushing stuff onto the stack.
	  switch (workInProgress.tag) {
	    case HostRoot:
	      pushHostRootContext(workInProgress);
	      workInProgress.stateNode;

	      resetHydrationState();
	      break;

	    case HostComponent:
	      pushHostContext(workInProgress);
	      break;

	    case ClassComponent:
	      {
	        var Component = workInProgress.type;

	        if (isContextProvider(Component)) {
	          pushContextProvider(workInProgress);
	        }

	        break;
	      }

	    case HostPortal:
	      pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
	      break;

	    case ContextProvider:
	      {
	        var newValue = workInProgress.memoizedProps.value;
	        var context = workInProgress.type._context;
	        pushProvider(workInProgress, context, newValue);
	        break;
	      }

	    case Profiler:
	      {
	        // Profiler should only call onRender when one of its descendants actually rendered.
	        var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

	        if (hasChildWork) {
	          workInProgress.flags |= Update;
	        }

	        {
	          // Reset effect durations for the next eventual effect phase.
	          // These are reset during render to allow the DevTools commit hook a chance to read them,
	          var stateNode = workInProgress.stateNode;
	          stateNode.effectDuration = 0;
	          stateNode.passiveEffectDuration = 0;
	        }
	      }

	      break;

	    case SuspenseComponent:
	      {
	        var state = workInProgress.memoizedState;

	        if (state !== null) {
	          if (state.dehydrated !== null) {
	            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // We know that this component will suspend again because if it has
	            // been unsuspended it has committed as a resolved Suspense component.
	            // If it needs to be retried, it should have work scheduled on it.

	            workInProgress.flags |= DidCapture; // We should never render the children of a dehydrated boundary until we
	            // upgrade it. We return null instead of bailoutOnAlreadyFinishedWork.

	            return null;
	          } // If this boundary is currently timed out, we need to decide
	          // whether to retry the primary children, or to skip over it and
	          // go straight to the fallback. Check the priority of the primary
	          // child fragment.


	          var primaryChildFragment = workInProgress.child;
	          var primaryChildLanes = primaryChildFragment.childLanes;

	          if (includesSomeLane(renderLanes, primaryChildLanes)) {
	            // The primary children have pending work. Use the normal path
	            // to attempt to render the primary children again.
	            return updateSuspenseComponent(current, workInProgress, renderLanes);
	          } else {
	            // The primary child fragment does not have pending work marked
	            // on it
	            pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
	            // priority. Bailout.

	            var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);

	            if (child !== null) {
	              // The fallback children have pending work. Skip over the
	              // primary children and work on the fallback.
	              return child.sibling;
	            } else {
	              // Note: We can return `null` here because we already checked
	              // whether there were nested context consumers, via the call to
	              // `bailoutOnAlreadyFinishedWork` above.
	              return null;
	            }
	          }
	        } else {
	          pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
	        }

	        break;
	      }

	    case SuspenseListComponent:
	      {
	        var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;

	        var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

	        if (didSuspendBefore) {
	          if (_hasChildWork) {
	            // If something was in fallback state last time, and we have all the
	            // same children then we're still in progressive loading state.
	            // Something might get unblocked by state updates or retries in the
	            // tree which will affect the tail. So we need to use the normal
	            // path to compute the correct tail.
	            return updateSuspenseListComponent(current, workInProgress, renderLanes);
	          } // If none of the children had any work, that means that none of
	          // them got retried so they'll still be blocked in the same way
	          // as before. We can fast bail out.


	          workInProgress.flags |= DidCapture;
	        } // If nothing suspended before and we're rendering the same children,
	        // then the tail doesn't matter. Anything new that suspends will work
	        // in the "together" mode, so we can continue from the state we had.


	        var renderState = workInProgress.memoizedState;

	        if (renderState !== null) {
	          // Reset to the "together" mode in case we've started a different
	          // update in the past but didn't complete it.
	          renderState.rendering = null;
	          renderState.tail = null;
	          renderState.lastEffect = null;
	        }

	        pushSuspenseContext(workInProgress, suspenseStackCursor.current);

	        if (_hasChildWork) {
	          break;
	        } else {
	          // If none of the children had any work, that means that none of
	          // them got retried so they'll still be blocked in the same way
	          // as before. We can fast bail out.
	          return null;
	        }
	      }

	    case OffscreenComponent:
	    case LegacyHiddenComponent:
	      {
	        // Need to check if the tree still needs to be deferred. This is
	        // almost identical to the logic used in the normal update path,
	        // so we'll just enter that. The only difference is we'll bail out
	        // at the next level instead of this one, because the child props
	        // have not changed. Which is fine.
	        // TODO: Probably should refactor `beginWork` to split the bailout
	        // path from the normal path. I'm tempted to do a labeled break here
	        // but I won't :)
	        workInProgress.lanes = NoLanes;
	        return updateOffscreenComponent(current, workInProgress, renderLanes);
	      }
	  }

	  return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
	}

	function beginWork(current, workInProgress, renderLanes) {
	  {
	    if (workInProgress._debugNeedsRemount && current !== null) {
	      // This will restart the begin phase with a new fiber.
	      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
	    }
	  }

	  if (current !== null) {
	    var oldProps = current.memoizedProps;
	    var newProps = workInProgress.pendingProps;

	    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
	     workInProgress.type !== current.type )) {
	      // If props or context changed, mark the fiber as having performed work.
	      // This may be unset if the props are determined to be equal later (memo).
	      didReceiveUpdate = true;
	    } else {
	      // Neither props nor legacy context changes. Check if there's a pending
	      // update or context change.
	      var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current, renderLanes);

	      if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
	      // may not be work scheduled on `current`, so we check for this flag.
	      (workInProgress.flags & DidCapture) === NoFlags) {
	        // No pending updates or context. Bail out now.
	        didReceiveUpdate = false;
	        return attemptEarlyBailoutIfNoScheduledUpdate(current, workInProgress, renderLanes);
	      }

	      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
	        // This is a special case that only exists for legacy mode.
	        // See https://github.com/facebook/react/pull/19216.
	        didReceiveUpdate = true;
	      } else {
	        // An update was scheduled on this fiber, but there are no new props
	        // nor legacy context. Set this to false. If an update queue or context
	        // consumer produces a changed value, it will set this to true. Otherwise,
	        // the component will assume the children have not changed and bail out.
	        didReceiveUpdate = false;
	      }
	    }
	  } else {
	    didReceiveUpdate = false;

	    if (getIsHydrating() && isForkedChild(workInProgress)) {
	      // Check if this child belongs to a list of muliple children in
	      // its parent.
	      //
	      // In a true multi-threaded implementation, we would render children on
	      // parallel threads. This would represent the beginning of a new render
	      // thread for this subtree.
	      //
	      // We only use this for id generation during hydration, which is why the
	      // logic is located in this special branch.
	      var slotIndex = workInProgress.index;
	      var numberOfForks = getForksAtLevel();
	      pushTreeId(workInProgress, numberOfForks, slotIndex);
	    }
	  } // Before entering the begin phase, clear pending update priority.
	  // TODO: This assumes that we're about to evaluate the component and process
	  // the update queue. However, there's an exception: SimpleMemoComponent
	  // sometimes bails out later in the begin phase. This indicates that we should
	  // move this assignment out of the common path and into each branch.


	  workInProgress.lanes = NoLanes;

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	      {
	        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
	      }

	    case LazyComponent:
	      {
	        var elementType = workInProgress.elementType;
	        return mountLazyComponent(current, workInProgress, elementType, renderLanes);
	      }

	    case FunctionComponent:
	      {
	        var Component = workInProgress.type;
	        var unresolvedProps = workInProgress.pendingProps;
	        var resolvedProps = workInProgress.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
	        return updateFunctionComponent(current, workInProgress, Component, resolvedProps, renderLanes);
	      }

	    case ClassComponent:
	      {
	        var _Component = workInProgress.type;
	        var _unresolvedProps = workInProgress.pendingProps;

	        var _resolvedProps = workInProgress.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);

	        return updateClassComponent(current, workInProgress, _Component, _resolvedProps, renderLanes);
	      }

	    case HostRoot:
	      return updateHostRoot(current, workInProgress, renderLanes);

	    case HostComponent:
	      return updateHostComponent(current, workInProgress, renderLanes);

	    case HostText:
	      return updateHostText(current, workInProgress);

	    case SuspenseComponent:
	      return updateSuspenseComponent(current, workInProgress, renderLanes);

	    case HostPortal:
	      return updatePortalComponent(current, workInProgress, renderLanes);

	    case ForwardRef:
	      {
	        var type = workInProgress.type;
	        var _unresolvedProps2 = workInProgress.pendingProps;

	        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

	        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
	      }

	    case Fragment:
	      return updateFragment(current, workInProgress, renderLanes);

	    case Mode:
	      return updateMode(current, workInProgress, renderLanes);

	    case Profiler:
	      return updateProfiler(current, workInProgress, renderLanes);

	    case ContextProvider:
	      return updateContextProvider(current, workInProgress, renderLanes);

	    case ContextConsumer:
	      return updateContextConsumer(current, workInProgress, renderLanes);

	    case MemoComponent:
	      {
	        var _type2 = workInProgress.type;
	        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

	        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

	        {
	          if (workInProgress.type !== workInProgress.elementType) {
	            var outerPropTypes = _type2.propTypes;

	            if (outerPropTypes) {
	              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
	              'prop', getComponentNameFromType(_type2));
	            }
	          }
	        }

	        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
	        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, renderLanes);
	      }

	    case SimpleMemoComponent:
	      {
	        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, renderLanes);
	      }

	    case IncompleteClassComponent:
	      {
	        var _Component2 = workInProgress.type;
	        var _unresolvedProps4 = workInProgress.pendingProps;

	        var _resolvedProps4 = workInProgress.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);

	        return mountIncompleteClassComponent(current, workInProgress, _Component2, _resolvedProps4, renderLanes);
	      }

	    case SuspenseListComponent:
	      {
	        return updateSuspenseListComponent(current, workInProgress, renderLanes);
	      }

	    case ScopeComponent:
	      {

	        break;
	      }

	    case OffscreenComponent:
	      {
	        return updateOffscreenComponent(current, workInProgress, renderLanes);
	      }
	  }

	  throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
	}

	function markUpdate(workInProgress) {
	  // Tag the fiber with an update effect. This turns a Placement into
	  // a PlacementAndUpdate.
	  workInProgress.flags |= Update;
	}

	function markRef$1(workInProgress) {
	  workInProgress.flags |= Ref;

	  {
	    workInProgress.flags |= RefStatic;
	  }
	}

	function hadNoMutationsEffects(current, completedWork) {
	  var didBailout = current !== null && current.child === completedWork.child;

	  if (didBailout) {
	    return true;
	  }

	  if ((completedWork.flags & ChildDeletion) !== NoFlags) {
	    return false;
	  } // TODO: If we move the `hadNoMutationsEffects` call after `bubbleProperties`
	  // then we only have to check the `completedWork.subtreeFlags`.


	  var child = completedWork.child;

	  while (child !== null) {
	    if ((child.flags & MutationMask) !== NoFlags || (child.subtreeFlags & MutationMask) !== NoFlags) {
	      return false;
	    }

	    child = child.sibling;
	  }

	  return true;
	}

	var appendAllChildren;
	var updateHostContainer;
	var updateHostComponent$1;
	var updateHostText$1;

	if (supportsMutation) {
	  // Mutation mode
	  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
	    // We only have the top Fiber that was created but we need recurse down its
	    // children to find all the terminal nodes.
	    var node = workInProgress.child;

	    while (node !== null) {
	      if (node.tag === HostComponent || node.tag === HostText) {
	        appendInitialChild(parent, node.stateNode);
	      } else if (node.tag === HostPortal) ; else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === workInProgress) {
	        return;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === workInProgress) {
	          return;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  };

	  updateHostContainer = function (current, workInProgress) {// Noop
	  };

	  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
	    // If we have an alternate, that means this is an update and we need to
	    // schedule a side-effect to do the updates.
	    var oldProps = current.memoizedProps;

	    if (oldProps === newProps) {
	      // In mutation mode, this is sufficient for a bailout because
	      // we won't touch this node even if children changed.
	      return;
	    } // If we get updated because one of our children updated, we don't
	    // have newProps so we'll have to reuse them.
	    // TODO: Split the update API as separate for the props vs. children.
	    // Even better would be if children weren't special cased at all tho.


	    var instance = workInProgress.stateNode;
	    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
	    // component is hitting the resume path. Figure out why. Possibly
	    // related to `hidden`.

	    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

	    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
	    // is a new ref we mark this as an update. All the work is done in commitWork.

	    if (updatePayload) {
	      markUpdate(workInProgress);
	    }
	  };

	  updateHostText$1 = function (current, workInProgress, oldText, newText) {
	    // If the text differs, mark it as an update. All the work in done in commitWork.
	    if (oldText !== newText) {
	      markUpdate(workInProgress);
	    }
	  };
	} else if (supportsPersistence) {
	  // Persistent host tree mode
	  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
	    // We only have the top Fiber that was created but we need recurse down its
	    // children to find all the terminal nodes.
	    var node = workInProgress.child;

	    while (node !== null) {
	      // eslint-disable-next-line no-labels
	       if (node.tag === HostComponent) {
	        var instance = node.stateNode;

	        if (needsVisibilityToggle && isHidden) {
	          // This child is inside a timed out tree. Hide it.
	          var props = node.memoizedProps;
	          var type = node.type;
	          instance = cloneHiddenInstance(instance, type, props, node);
	        }

	        appendInitialChild(parent, instance);
	      } else if (node.tag === HostText) {
	        var _instance = node.stateNode;

	        if (needsVisibilityToggle && isHidden) {
	          // This child is inside a timed out tree. Hide it.
	          var text = node.memoizedProps;
	          _instance = cloneHiddenTextInstance(_instance, text, node);
	        }

	        appendInitialChild(parent, _instance);
	      } else if (node.tag === HostPortal) ; else if (node.tag === OffscreenComponent && node.memoizedState !== null) {
	        // The children in this boundary are hidden. Toggle their visibility
	        // before appending.
	        var child = node.child;

	        if (child !== null) {
	          child.return = node;
	        }

	        appendAllChildren(parent, node, true, true);
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      } // $FlowFixMe This is correct but Flow is confused by the labeled break.


	      node = node;

	      if (node === workInProgress) {
	        return;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === workInProgress) {
	          return;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }; // An unfortunate fork of appendAllChildren because we have two different parent types.


	  var appendAllChildrenToContainer = function (containerChildSet, workInProgress, needsVisibilityToggle, isHidden) {
	    // We only have the top Fiber that was created but we need recurse down its
	    // children to find all the terminal nodes.
	    var node = workInProgress.child;

	    while (node !== null) {
	      // eslint-disable-next-line no-labels
	       if (node.tag === HostComponent) {
	        var instance = node.stateNode;

	        if (needsVisibilityToggle && isHidden) {
	          // This child is inside a timed out tree. Hide it.
	          var props = node.memoizedProps;
	          var type = node.type;
	          instance = cloneHiddenInstance(instance, type, props, node);
	        }

	        appendChildToContainerChildSet(containerChildSet, instance);
	      } else if (node.tag === HostText) {
	        var _instance2 = node.stateNode;

	        if (needsVisibilityToggle && isHidden) {
	          // This child is inside a timed out tree. Hide it.
	          var text = node.memoizedProps;
	          _instance2 = cloneHiddenTextInstance(_instance2, text, node);
	        }

	        appendChildToContainerChildSet(containerChildSet, _instance2);
	      } else if (node.tag === HostPortal) ; else if (node.tag === OffscreenComponent && node.memoizedState !== null) {
	        // The children in this boundary are hidden. Toggle their visibility
	        // before appending.
	        var child = node.child;

	        if (child !== null) {
	          child.return = node;
	        }

	        appendAllChildrenToContainer(containerChildSet, node, true, true);
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      } // $FlowFixMe This is correct but Flow is confused by the labeled break.


	      node = node;

	      if (node === workInProgress) {
	        return;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === workInProgress) {
	          return;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  };

	  updateHostContainer = function (current, workInProgress) {
	    var portalOrRoot = workInProgress.stateNode;
	    var childrenUnchanged = hadNoMutationsEffects(current, workInProgress);

	    if (childrenUnchanged) ; else {
	      var container = portalOrRoot.containerInfo;
	      var newChildSet = createContainerChildSet(container); // If children might have changed, we have to add them all to the set.

	      appendAllChildrenToContainer(newChildSet, workInProgress, false, false);
	      portalOrRoot.pendingChildren = newChildSet; // Schedule an update on the container to swap out the container.

	      markUpdate(workInProgress);
	      finalizeContainerChildren(container, newChildSet);
	    }
	  };

	  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
	    var currentInstance = current.stateNode;
	    var oldProps = current.memoizedProps; // If there are no effects associated with this node, then none of our children had any updates.
	    // This guarantees that we can reuse all of them.

	    var childrenUnchanged = hadNoMutationsEffects(current, workInProgress);

	    if (childrenUnchanged && oldProps === newProps) {
	      // No changes, just reuse the existing instance.
	      // Note that this might release a previous clone.
	      workInProgress.stateNode = currentInstance;
	      return;
	    }

	    var recyclableInstance = workInProgress.stateNode;
	    var currentHostContext = getHostContext();
	    var updatePayload = null;

	    if (oldProps !== newProps) {
	      updatePayload = prepareUpdate(recyclableInstance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
	    }

	    if (childrenUnchanged && updatePayload === null) {
	      // No changes, just reuse the existing instance.
	      // Note that this might release a previous clone.
	      workInProgress.stateNode = currentInstance;
	      return;
	    }

	    var newInstance = cloneInstance(currentInstance, updatePayload, type, oldProps, newProps, workInProgress, childrenUnchanged, recyclableInstance);

	    if (finalizeInitialChildren(newInstance, type, newProps, rootContainerInstance, currentHostContext)) {
	      markUpdate(workInProgress);
	    }

	    workInProgress.stateNode = newInstance;

	    if (childrenUnchanged) {
	      // If there are no other effects in this tree, we need to flag this node as having one.
	      // Even though we're not going to use it for anything.
	      // Otherwise parents won't know that there are new children to propagate upwards.
	      markUpdate(workInProgress);
	    } else {
	      // If children might have changed, we have to add them all to the set.
	      appendAllChildren(newInstance, workInProgress, false, false);
	    }
	  };

	  updateHostText$1 = function (current, workInProgress, oldText, newText) {
	    if (oldText !== newText) {
	      // If the text content differs, we'll create a new text instance for it.
	      var rootContainerInstance = getRootHostContainer();
	      var currentHostContext = getHostContext();
	      workInProgress.stateNode = createTextInstance(newText, rootContainerInstance, currentHostContext, workInProgress); // We'll have to mark it as having an effect, even though we won't use the effect for anything.
	      // This lets the parents know that at least one of their children has changed.

	      markUpdate(workInProgress);
	    } else {
	      workInProgress.stateNode = current.stateNode;
	    }
	  };
	} else {
	  // No host operations
	  updateHostContainer = function (current, workInProgress) {// Noop
	  };

	  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {// Noop
	  };

	  updateHostText$1 = function (current, workInProgress, oldText, newText) {// Noop
	  };
	}

	function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
	  if (getIsHydrating()) {
	    // If we're hydrating, we should consume as many items as we can
	    // so we don't leave any behind.
	    return;
	  }

	  switch (renderState.tailMode) {
	    case 'hidden':
	      {
	        // Any insertions at the end of the tail list after this point
	        // should be invisible. If there are already mounted boundaries
	        // anything before them are not considered for collapsing.
	        // Therefore we need to go through the whole tail to find if
	        // there are any.
	        var tailNode = renderState.tail;
	        var lastTailNode = null;

	        while (tailNode !== null) {
	          if (tailNode.alternate !== null) {
	            lastTailNode = tailNode;
	          }

	          tailNode = tailNode.sibling;
	        } // Next we're simply going to delete all insertions after the
	        // last rendered item.


	        if (lastTailNode === null) {
	          // All remaining items in the tail are insertions.
	          renderState.tail = null;
	        } else {
	          // Detach the insertion after the last node that was already
	          // inserted.
	          lastTailNode.sibling = null;
	        }

	        break;
	      }

	    case 'collapsed':
	      {
	        // Any insertions at the end of the tail list after this point
	        // should be invisible. If there are already mounted boundaries
	        // anything before them are not considered for collapsing.
	        // Therefore we need to go through the whole tail to find if
	        // there are any.
	        var _tailNode = renderState.tail;
	        var _lastTailNode = null;

	        while (_tailNode !== null) {
	          if (_tailNode.alternate !== null) {
	            _lastTailNode = _tailNode;
	          }

	          _tailNode = _tailNode.sibling;
	        } // Next we're simply going to delete all insertions after the
	        // last rendered item.


	        if (_lastTailNode === null) {
	          // All remaining items in the tail are insertions.
	          if (!hasRenderedATailFallback && renderState.tail !== null) {
	            // We suspended during the head. We want to show at least one
	            // row at the tail. So we'll keep on and cut off the rest.
	            renderState.tail.sibling = null;
	          } else {
	            renderState.tail = null;
	          }
	        } else {
	          // Detach the insertion after the last node that was already
	          // inserted.
	          _lastTailNode.sibling = null;
	        }

	        break;
	      }
	  }
	}

	function bubbleProperties(completedWork) {
	  var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
	  var newChildLanes = NoLanes;
	  var subtreeFlags = NoFlags;

	  if (!didBailout) {
	    // Bubble up the earliest expiration time.
	    if ( (completedWork.mode & ProfileMode) !== NoMode) {
	      // In profiling mode, resetChildExpirationTime is also used to reset
	      // profiler durations.
	      var actualDuration = completedWork.actualDuration;
	      var treeBaseDuration = completedWork.selfBaseDuration;
	      var child = completedWork.child;

	      while (child !== null) {
	        newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
	        subtreeFlags |= child.subtreeFlags;
	        subtreeFlags |= child.flags; // When a fiber is cloned, its actualDuration is reset to 0. This value will
	        // only be updated if work is done on the fiber (i.e. it doesn't bailout).
	        // When work is done, it should bubble to the parent's actualDuration. If
	        // the fiber has not been cloned though, (meaning no work was done), then
	        // this value will reflect the amount of time spent working on a previous
	        // render. In that case it should not bubble. We determine whether it was
	        // cloned by comparing the child pointer.

	        actualDuration += child.actualDuration;
	        treeBaseDuration += child.treeBaseDuration;
	        child = child.sibling;
	      }

	      completedWork.actualDuration = actualDuration;
	      completedWork.treeBaseDuration = treeBaseDuration;
	    } else {
	      var _child = completedWork.child;

	      while (_child !== null) {
	        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
	        subtreeFlags |= _child.subtreeFlags;
	        subtreeFlags |= _child.flags; // Update the return pointer so the tree is consistent. This is a code
	        // smell because it assumes the commit phase is never concurrent with
	        // the render phase. Will address during refactor to alternate model.

	        _child.return = completedWork;
	        _child = _child.sibling;
	      }
	    }

	    completedWork.subtreeFlags |= subtreeFlags;
	  } else {
	    // Bubble up the earliest expiration time.
	    if ( (completedWork.mode & ProfileMode) !== NoMode) {
	      // In profiling mode, resetChildExpirationTime is also used to reset
	      // profiler durations.
	      var _treeBaseDuration = completedWork.selfBaseDuration;
	      var _child2 = completedWork.child;

	      while (_child2 !== null) {
	        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
	        // so we should bubble those up even during a bailout. All the other
	        // flags have a lifetime only of a single render + commit, so we should
	        // ignore them.

	        subtreeFlags |= _child2.subtreeFlags & StaticMask;
	        subtreeFlags |= _child2.flags & StaticMask;
	        _treeBaseDuration += _child2.treeBaseDuration;
	        _child2 = _child2.sibling;
	      }

	      completedWork.treeBaseDuration = _treeBaseDuration;
	    } else {
	      var _child3 = completedWork.child;

	      while (_child3 !== null) {
	        newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes)); // "Static" flags share the lifetime of the fiber/hook they belong to,
	        // so we should bubble those up even during a bailout. All the other
	        // flags have a lifetime only of a single render + commit, so we should
	        // ignore them.

	        subtreeFlags |= _child3.subtreeFlags & StaticMask;
	        subtreeFlags |= _child3.flags & StaticMask; // Update the return pointer so the tree is consistent. This is a code
	        // smell because it assumes the commit phase is never concurrent with
	        // the render phase. Will address during refactor to alternate model.

	        _child3.return = completedWork;
	        _child3 = _child3.sibling;
	      }
	    }

	    completedWork.subtreeFlags |= subtreeFlags;
	  }

	  completedWork.childLanes = newChildLanes;
	  return didBailout;
	}

	function completeDehydratedSuspenseBoundary(current, workInProgress, nextState) {
	  if (hasUnhydratedTailNodes() && (workInProgress.mode & ConcurrentMode) !== NoMode && (workInProgress.flags & DidCapture) === NoFlags) {
	    warnIfUnhydratedTailNodes(workInProgress);
	    resetHydrationState();
	    workInProgress.flags |= ForceClientRender | Incomplete | ShouldCapture;
	    return false;
	  }

	  var wasHydrated = popHydrationState(workInProgress);

	  if (nextState !== null && nextState.dehydrated !== null) {
	    // We might be inside a hydration state the first time we're picking up this
	    // Suspense boundary, and also after we've reentered it for further hydration.
	    if (current === null) {
	      if (!wasHydrated) {
	        throw new Error('A dehydrated suspense component was completed without a hydrated node. ' + 'This is probably a bug in React.');
	      }

	      prepareToHydrateHostSuspenseInstance(workInProgress);
	      bubbleProperties(workInProgress);

	      {
	        if ((workInProgress.mode & ProfileMode) !== NoMode) {
	          var isTimedOutSuspense = nextState !== null;

	          if (isTimedOutSuspense) {
	            // Don't count time spent in a timed out Suspense subtree as part of the base duration.
	            var primaryChildFragment = workInProgress.child;

	            if (primaryChildFragment !== null) {
	              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
	              workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
	            }
	          }
	        }
	      }

	      return false;
	    } else {
	      // We might have reentered this boundary to hydrate it. If so, we need to reset the hydration
	      // state since we're now exiting out of it. popHydrationState doesn't do that for us.
	      resetHydrationState();

	      if ((workInProgress.flags & DidCapture) === NoFlags) {
	        // This boundary did not suspend so it's now hydrated and unsuspended.
	        workInProgress.memoizedState = null;
	      } // If nothing suspended, we need to schedule an effect to mark this boundary
	      // as having hydrated so events know that they're free to be invoked.
	      // It's also a signal to replay events and the suspense callback.
	      // If something suspended, schedule an effect to attach retry listeners.
	      // So we might as well always mark this.


	      workInProgress.flags |= Update;
	      bubbleProperties(workInProgress);

	      {
	        if ((workInProgress.mode & ProfileMode) !== NoMode) {
	          var _isTimedOutSuspense = nextState !== null;

	          if (_isTimedOutSuspense) {
	            // Don't count time spent in a timed out Suspense subtree as part of the base duration.
	            var _primaryChildFragment = workInProgress.child;

	            if (_primaryChildFragment !== null) {
	              // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
	              workInProgress.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
	            }
	          }
	        }
	      }

	      return false;
	    }
	  } else {
	    // Successfully completed this tree. If this was a forced client render,
	    // there may have been recoverable errors during first hydration
	    // attempt. If so, add them to a queue so we can log them in the
	    // commit phase.
	    upgradeHydrationErrorsToRecoverable(); // Fall through to normal Suspense path

	    return true;
	  }
	}

	function completeWork(current, workInProgress, renderLanes) {
	  var newProps = workInProgress.pendingProps; // Note: This intentionally doesn't check if we're hydrating because comparing
	  // to the current tree provider fiber is just as fast and less error-prone.
	  // Ideally we would have a special version of the work loop only
	  // for hydration.

	  popTreeContext(workInProgress);

	  switch (workInProgress.tag) {
	    case IndeterminateComponent:
	    case LazyComponent:
	    case SimpleMemoComponent:
	    case FunctionComponent:
	    case ForwardRef:
	    case Fragment:
	    case Mode:
	    case Profiler:
	    case ContextConsumer:
	    case MemoComponent:
	      bubbleProperties(workInProgress);
	      return null;

	    case ClassComponent:
	      {
	        var Component = workInProgress.type;

	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }

	        bubbleProperties(workInProgress);
	        return null;
	      }

	    case HostRoot:
	      {
	        var fiberRoot = workInProgress.stateNode;
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        resetWorkInProgressVersions();

	        if (fiberRoot.pendingContext) {
	          fiberRoot.context = fiberRoot.pendingContext;
	          fiberRoot.pendingContext = null;
	        }

	        if (current === null || current.child === null) {
	          // If we hydrated, pop so that we can delete any remaining children
	          // that weren't hydrated.
	          var wasHydrated = popHydrationState(workInProgress);

	          if (wasHydrated) {
	            // If we hydrated, then we'll need to schedule an update for
	            // the commit side-effects on the root.
	            markUpdate(workInProgress);
	          } else {
	            if (current !== null) {
	              var prevState = current.memoizedState;

	              if ( // Check if this is a client root
	              !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
	              (workInProgress.flags & ForceClientRender) !== NoFlags) {
	                // Schedule an effect to clear this container at the start of the
	                // next commit. This handles the case of React rendering into a
	                // container with previous children. It's also safe to do for
	                // updates too, because current.child would only be null if the
	                // previous render was null (so the container would already
	                // be empty).
	                workInProgress.flags |= Snapshot; // If this was a forced client render, there may have been
	                // recoverable errors during first hydration attempt. If so, add
	                // them to a queue so we can log them in the commit phase.

	                upgradeHydrationErrorsToRecoverable();
	              }
	            }
	          }
	        }

	        updateHostContainer(current, workInProgress);
	        bubbleProperties(workInProgress);

	        return null;
	      }

	    case HostComponent:
	      {
	        popHostContext(workInProgress);
	        var rootContainerInstance = getRootHostContainer();
	        var type = workInProgress.type;

	        if (current !== null && workInProgress.stateNode != null) {
	          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

	          if (current.ref !== workInProgress.ref) {
	            markRef$1(workInProgress);
	          }
	        } else {
	          if (!newProps) {
	            if (workInProgress.stateNode === null) {
	              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');
	            } // This can happen when we abort work.


	            bubbleProperties(workInProgress);
	            return null;
	          }

	          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
	          // "stack" as the parent. Then append children as we go in beginWork
	          // or completeWork depending on whether we want to add them top->down or
	          // bottom->up. Top->down is faster in IE11.

	          var _wasHydrated = popHydrationState(workInProgress);

	          if (_wasHydrated) {
	            // TODO: Move this and createInstance step into the beginPhase
	            // to consolidate.
	            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
	              // If changes to the hydrated node need to be applied at the
	              // commit-phase we mark this as such.
	              markUpdate(workInProgress);
	            }
	          } else {
	            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
	            appendAllChildren(instance, workInProgress, false, false);
	            workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
	            // (eg DOM renderer supports auto-focus for certain elements).
	            // Make sure such renderers get scheduled for later work.

	            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance, currentHostContext)) {
	              markUpdate(workInProgress);
	            }
	          }

	          if (workInProgress.ref !== null) {
	            // If there is a ref on a host node we need to schedule a callback
	            markRef$1(workInProgress);
	          }
	        }

	        bubbleProperties(workInProgress);
	        return null;
	      }

	    case HostText:
	      {
	        var newText = newProps;

	        if (current && workInProgress.stateNode != null) {
	          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
	          // to schedule a side-effect to do the updates.

	          updateHostText$1(current, workInProgress, oldText, newText);
	        } else {
	          if (typeof newText !== 'string') {
	            if (workInProgress.stateNode === null) {
	              throw new Error('We must have new props for new mounts. This error is likely ' + 'caused by a bug in React. Please file an issue.');
	            } // This can happen when we abort work.

	          }

	          var _rootContainerInstance = getRootHostContainer();

	          var _currentHostContext = getHostContext();

	          var _wasHydrated2 = popHydrationState(workInProgress);

	          if (_wasHydrated2) {
	            if (prepareToHydrateHostTextInstance(workInProgress)) {
	              markUpdate(workInProgress);
	            }
	          } else {
	            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
	          }
	        }

	        bubbleProperties(workInProgress);
	        return null;
	      }

	    case SuspenseComponent:
	      {
	        popSuspenseContext(workInProgress);
	        var nextState = workInProgress.memoizedState; // Special path for dehydrated boundaries. We may eventually move this
	        // to its own fiber type so that we can add other kinds of hydration
	        // boundaries that aren't associated with a Suspense tree. In anticipation
	        // of such a refactor, all the hydration logic is contained in
	        // this branch.

	        if (current === null || current.memoizedState !== null && current.memoizedState.dehydrated !== null) {
	          var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current, workInProgress, nextState);

	          if (!fallthroughToNormalSuspensePath) {
	            if (workInProgress.flags & ShouldCapture) {
	              // Special case. There were remaining unhydrated nodes. We treat
	              // this as a mismatch. Revert to client rendering.
	              return workInProgress;
	            } else {
	              // Did not finish hydrating, either because this is the initial
	              // render or because something suspended.
	              return null;
	            }
	          } // Continue with the normal Suspense path.

	        }

	        if ((workInProgress.flags & DidCapture) !== NoFlags) {
	          // Something suspended. Re-render with the fallback children.
	          workInProgress.lanes = renderLanes; // Do not reset the effect list.

	          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
	            transferActualDuration(workInProgress);
	          } // Don't bubble properties in this case.


	          return workInProgress;
	        }

	        var nextDidTimeout = nextState !== null;
	        var prevDidTimeout = current !== null && current.memoizedState !== null;
	        // a passive effect, which is when we process the transitions


	        if (nextDidTimeout !== prevDidTimeout) {
	          // an effect to toggle the subtree's visibility. When we switch from
	          // fallback -> primary, the inner Offscreen fiber schedules this effect
	          // as part of its normal complete phase. But when we switch from
	          // primary -> fallback, the inner Offscreen fiber does not have a complete
	          // phase. So we need to schedule its effect here.
	          //
	          // We also use this flag to connect/disconnect the effects, but the same
	          // logic applies: when re-connecting, the Offscreen fiber's complete
	          // phase will handle scheduling the effect. It's only when the fallback
	          // is active that we have to do anything special.


	          if (nextDidTimeout) {
	            var _offscreenFiber2 = workInProgress.child;
	            _offscreenFiber2.flags |= Visibility; // TODO: This will still suspend a synchronous tree if anything
	            // in the concurrent tree already suspended during this render.
	            // This is a known bug.

	            if ((workInProgress.mode & ConcurrentMode) !== NoMode) {
	              // TODO: Move this back to throwException because this is too late
	              // if this is a large tree which is common for initial loads. We
	              // don't know if we should restart a render or not until we get
	              // this marker, and this is too late.
	              // If this render already had a ping or lower pri updates,
	              // and this is the first time we know we're going to suspend we
	              // should be able to immediately restart from within throwException.
	              var hasInvisibleChildContext = current === null && (workInProgress.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);

	              if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
	                // If this was in an invisible tree or a new render, then showing
	                // this boundary is ok.
	                renderDidSuspend();
	              } else {
	                // Otherwise, we're going to have to hide content so we should
	                // suspend for longer if possible.
	                renderDidSuspendDelayIfPossible();
	              }
	            }
	          }
	        }

	        var wakeables = workInProgress.updateQueue;

	        if (wakeables !== null) {
	          // Schedule an effect to attach a retry listener to the promise.
	          // TODO: Move to passive phase
	          workInProgress.flags |= Update;
	        }

	        bubbleProperties(workInProgress);

	        {
	          if ((workInProgress.mode & ProfileMode) !== NoMode) {
	            if (nextDidTimeout) {
	              // Don't count time spent in a timed out Suspense subtree as part of the base duration.
	              var primaryChildFragment = workInProgress.child;

	              if (primaryChildFragment !== null) {
	                // $FlowFixMe Flow doesn't support type casting in combination with the -= operator
	                workInProgress.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
	              }
	            }
	          }
	        }

	        return null;
	      }

	    case HostPortal:
	      popHostContainer(workInProgress);
	      updateHostContainer(current, workInProgress);

	      if (current === null) {
	        preparePortalMount(workInProgress.stateNode.containerInfo);
	      }

	      bubbleProperties(workInProgress);
	      return null;

	    case ContextProvider:
	      // Pop provider fiber
	      var context = workInProgress.type._context;
	      popProvider(context, workInProgress);
	      bubbleProperties(workInProgress);
	      return null;

	    case IncompleteClassComponent:
	      {
	        // Same as class component case. I put it down here so that the tags are
	        // sequential to ensure this switch is compiled to a jump table.
	        var _Component = workInProgress.type;

	        if (isContextProvider(_Component)) {
	          popContext(workInProgress);
	        }

	        bubbleProperties(workInProgress);
	        return null;
	      }

	    case SuspenseListComponent:
	      {
	        popSuspenseContext(workInProgress);
	        var renderState = workInProgress.memoizedState;

	        if (renderState === null) {
	          // We're running in the default, "independent" mode.
	          // We don't do anything in this mode.
	          bubbleProperties(workInProgress);
	          return null;
	        }

	        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
	        var renderedTail = renderState.rendering;

	        if (renderedTail === null) {
	          // We just rendered the head.
	          if (!didSuspendAlready) {
	            // This is the first pass. We need to figure out if anything is still
	            // suspended in the rendered set.
	            // If new content unsuspended, but there's still some content that
	            // didn't. Then we need to do a second pass that forces everything
	            // to keep showing their fallbacks.
	            // We might be suspended if something in this render pass suspended, or
	            // something in the previous committed pass suspended. Otherwise,
	            // there's no chance so we can skip the expensive call to
	            // findFirstSuspended.
	            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);

	            if (!cannotBeSuspended) {
	              var row = workInProgress.child;

	              while (row !== null) {
	                var suspended = findFirstSuspended(row);

	                if (suspended !== null) {
	                  didSuspendAlready = true;
	                  workInProgress.flags |= DidCapture;
	                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
	                  // part of the second pass. In that case nothing will subscribe to
	                  // its thenables. Instead, we'll transfer its thenables to the
	                  // SuspenseList so that it can retry if they resolve.
	                  // There might be multiple of these in the list but since we're
	                  // going to wait for all of them anyway, it doesn't really matter
	                  // which ones gets to ping. In theory we could get clever and keep
	                  // track of how many dependencies remain but it gets tricky because
	                  // in the meantime, we can add/remove/change items and dependencies.
	                  // We might bail out of the loop before finding any but that
	                  // doesn't matter since that means that the other boundaries that
	                  // we did find already has their listeners attached.

	                  var newThenables = suspended.updateQueue;

	                  if (newThenables !== null) {
	                    workInProgress.updateQueue = newThenables;
	                    workInProgress.flags |= Update;
	                  } // Rerender the whole list, but this time, we'll force fallbacks
	                  // to stay in place.
	                  // Reset the effect flags before doing the second pass since that's now invalid.
	                  // Reset the child fibers to their original state.


	                  workInProgress.subtreeFlags = NoFlags;
	                  resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
	                  // rerender the children.

	                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback)); // Don't bubble properties in this case.

	                  return workInProgress.child;
	                }

	                row = row.sibling;
	              }
	            }

	            if (renderState.tail !== null && now() > getRenderTargetTime()) {
	              // We have already passed our CPU deadline but we still have rows
	              // left in the tail. We'll just give up further attempts to render
	              // the main content and only render fallbacks.
	              workInProgress.flags |= DidCapture;
	              didSuspendAlready = true;
	              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
	              // to get it started back up to attempt the next item. While in terms
	              // of priority this work has the same priority as this current render,
	              // it's not part of the same transition once the transition has
	              // committed. If it's sync, we still want to yield so that it can be
	              // painted. Conceptually, this is really the same as pinging.
	              // We can use any RetryLane even if it's the one currently rendering
	              // since we're leaving it behind on this node.

	              workInProgress.lanes = SomeRetryLane;
	            }
	          } else {
	            cutOffTailIfNeeded(renderState, false);
	          } // Next we're going to render the tail.

	        } else {
	          // Append the rendered row to the child list.
	          if (!didSuspendAlready) {
	            var _suspended = findFirstSuspended(renderedTail);

	            if (_suspended !== null) {
	              workInProgress.flags |= DidCapture;
	              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
	              // get lost if this row ends up dropped during a second pass.

	              var _newThenables = _suspended.updateQueue;

	              if (_newThenables !== null) {
	                workInProgress.updateQueue = _newThenables;
	                workInProgress.flags |= Update;
	              }

	              cutOffTailIfNeeded(renderState, true); // This might have been modified.

	              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
	              ) {
	                  // We're done.
	                  bubbleProperties(workInProgress);
	                  return null;
	                }
	            } else if ( // The time it took to render last row is greater than the remaining
	            // time we have to render. So rendering one more row would likely
	            // exceed it.
	            now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
	              // We have now passed our CPU deadline and we'll just give up further
	              // attempts to render the main content and only render fallbacks.
	              // The assumption is that this is usually faster.
	              workInProgress.flags |= DidCapture;
	              didSuspendAlready = true;
	              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
	              // to get it started back up to attempt the next item. While in terms
	              // of priority this work has the same priority as this current render,
	              // it's not part of the same transition once the transition has
	              // committed. If it's sync, we still want to yield so that it can be
	              // painted. Conceptually, this is really the same as pinging.
	              // We can use any RetryLane even if it's the one currently rendering
	              // since we're leaving it behind on this node.

	              workInProgress.lanes = SomeRetryLane;
	            }
	          }

	          if (renderState.isBackwards) {
	            // The effect list of the backwards tail will have been added
	            // to the end. This breaks the guarantee that life-cycles fire in
	            // sibling order but that isn't a strong guarantee promised by React.
	            // Especially since these might also just pop in during future commits.
	            // Append to the beginning of the list.
	            renderedTail.sibling = workInProgress.child;
	            workInProgress.child = renderedTail;
	          } else {
	            var previousSibling = renderState.last;

	            if (previousSibling !== null) {
	              previousSibling.sibling = renderedTail;
	            } else {
	              workInProgress.child = renderedTail;
	            }

	            renderState.last = renderedTail;
	          }
	        }

	        if (renderState.tail !== null) {
	          // We still have tail rows to render.
	          // Pop a row.
	          var next = renderState.tail;
	          renderState.rendering = next;
	          renderState.tail = next.sibling;
	          renderState.renderingStartTime = now();
	          next.sibling = null; // Restore the context.
	          // TODO: We can probably just avoid popping it instead and only
	          // setting it the first time we go from not suspended to suspended.

	          var suspenseContext = suspenseStackCursor.current;

	          if (didSuspendAlready) {
	            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
	          } else {
	            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
	          }

	          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.
	          // Don't bubble properties in this case.

	          return next;
	        }

	        bubbleProperties(workInProgress);
	        return null;
	      }

	    case ScopeComponent:
	      {

	        break;
	      }

	    case OffscreenComponent:
	    case LegacyHiddenComponent:
	      {
	        popRenderLanes(workInProgress);
	        var _nextState = workInProgress.memoizedState;
	        var nextIsHidden = _nextState !== null;

	        if (current !== null) {
	          var _prevState = current.memoizedState;
	          var prevIsHidden = _prevState !== null;

	          if (prevIsHidden !== nextIsHidden && ( // LegacyHidden doesn't do any hiding — it only pre-renders.
	          !enableLegacyHidden )) {
	            workInProgress.flags |= Visibility;
	          }
	        }

	        if (!nextIsHidden || (workInProgress.mode & ConcurrentMode) === NoMode) {
	          bubbleProperties(workInProgress);
	        } else {
	          // Don't bubble properties for hidden children unless we're rendering
	          // at offscreen priority.
	          if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
	            bubbleProperties(workInProgress);

	            if (supportsMutation) {
	              // Check if there was an insertion or update in the hidden subtree.
	              // If so, we need to hide those nodes in the commit phase, so
	              // schedule a visibility effect.
	              if ( workInProgress.subtreeFlags & (Placement | Update)) {
	                workInProgress.flags |= Visibility;
	              }
	            }
	          }
	        }
	        return null;
	      }

	    case CacheComponent:
	      {

	        return null;
	      }

	    case TracingMarkerComponent:
	      {

	        return null;
	      }
	  }

	  throw new Error("Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in " + 'React. Please file an issue.');
	}

	function unwindWork(current, workInProgress, renderLanes) {
	  // Note: This intentionally doesn't check if we're hydrating because comparing
	  // to the current tree provider fiber is just as fast and less error-prone.
	  // Ideally we would have a special version of the work loop only
	  // for hydration.
	  popTreeContext(workInProgress);

	  switch (workInProgress.tag) {
	    case ClassComponent:
	      {
	        var Component = workInProgress.type;

	        if (isContextProvider(Component)) {
	          popContext(workInProgress);
	        }

	        var flags = workInProgress.flags;

	        if (flags & ShouldCapture) {
	          workInProgress.flags = flags & ~ShouldCapture | DidCapture;

	          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
	            transferActualDuration(workInProgress);
	          }

	          return workInProgress;
	        }

	        return null;
	      }

	    case HostRoot:
	      {
	        workInProgress.stateNode;
	        popHostContainer(workInProgress);
	        popTopLevelContextObject(workInProgress);
	        resetWorkInProgressVersions();
	        var _flags = workInProgress.flags;

	        if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
	          // There was an error during render that wasn't captured by a suspense
	          // boundary. Do a second pass on the root to unmount the children.
	          workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
	          return workInProgress;
	        } // We unwound to the root without completing it. Exit.


	        return null;
	      }

	    case HostComponent:
	      {
	        // TODO: popHydrationState
	        popHostContext(workInProgress);
	        return null;
	      }

	    case SuspenseComponent:
	      {
	        popSuspenseContext(workInProgress);
	        var suspenseState = workInProgress.memoizedState;

	        if (suspenseState !== null && suspenseState.dehydrated !== null) {
	          if (workInProgress.alternate === null) {
	            throw new Error('Threw in newly mounted dehydrated component. This is likely a bug in ' + 'React. Please file an issue.');
	          }

	          resetHydrationState();
	        }

	        var _flags2 = workInProgress.flags;

	        if (_flags2 & ShouldCapture) {
	          workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

	          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
	            transferActualDuration(workInProgress);
	          }

	          return workInProgress;
	        }

	        return null;
	      }

	    case SuspenseListComponent:
	      {
	        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
	        // caught by a nested boundary. If not, it should bubble through.

	        return null;
	      }

	    case HostPortal:
	      popHostContainer(workInProgress);
	      return null;

	    case ContextProvider:
	      var context = workInProgress.type._context;
	      popProvider(context, workInProgress);
	      return null;

	    case OffscreenComponent:
	    case LegacyHiddenComponent:
	      popRenderLanes(workInProgress);
	      return null;

	    case CacheComponent:

	      return null;

	    default:
	      return null;
	  }
	}

	function unwindInterruptedWork(current, interruptedWork, renderLanes) {
	  // Note: This intentionally doesn't check if we're hydrating because comparing
	  // to the current tree provider fiber is just as fast and less error-prone.
	  // Ideally we would have a special version of the work loop only
	  // for hydration.
	  popTreeContext(interruptedWork);

	  switch (interruptedWork.tag) {
	    case ClassComponent:
	      {
	        var childContextTypes = interruptedWork.type.childContextTypes;

	        if (childContextTypes !== null && childContextTypes !== undefined) {
	          popContext(interruptedWork);
	        }

	        break;
	      }

	    case HostRoot:
	      {
	        interruptedWork.stateNode;
	        popHostContainer(interruptedWork);
	        popTopLevelContextObject(interruptedWork);
	        resetWorkInProgressVersions();
	        break;
	      }

	    case HostComponent:
	      {
	        popHostContext(interruptedWork);
	        break;
	      }

	    case HostPortal:
	      popHostContainer(interruptedWork);
	      break;

	    case SuspenseComponent:
	      popSuspenseContext(interruptedWork);
	      break;

	    case SuspenseListComponent:
	      popSuspenseContext(interruptedWork);
	      break;

	    case ContextProvider:
	      var context = interruptedWork.type._context;
	      popProvider(context, interruptedWork);
	      break;

	    case OffscreenComponent:
	    case LegacyHiddenComponent:
	      popRenderLanes(interruptedWork);
	      break;
	  }
	}

	function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
	  var funcArgs = Array.prototype.slice.call(arguments, 3);

	  try {
	    func.apply(context, funcArgs);
	  } catch (error) {
	    this.onError(error);
	  }
	}

	var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;

	{
	  // In DEV mode, we swap out invokeGuardedCallback for a special version
	  // that plays more nicely with the browser's DevTools. The idea is to preserve
	  // "Pause on exceptions" behavior. Because React wraps all user-provided
	  // functions in invokeGuardedCallback, and the production version of
	  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
	  // like caught exceptions, and the DevTools won't pause unless the developer
	  // takes the extra step of enabling pause on caught exceptions. This is
	  // unintuitive, though, because even though React has caught the error, from
	  // the developer's perspective, the error is uncaught.
	  //
	  // To preserve the expected "Pause on exceptions" behavior, we don't use a
	  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
	  // DOM node, and call the user-provided callback from inside an event handler
	  // for that fake event. If the callback throws, the error is "captured" using
	  // a global event handler. But because the error happens in a different
	  // event loop context, it does not interrupt the normal program flow.
	  // Effectively, this gives us try-catch behavior without actually using
	  // try-catch. Neat!
	  // Check that the browser supports the APIs we need to implement our special
	  // DEV version of invokeGuardedCallback
	  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
	    var fakeNode = document.createElement('react');

	    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
	      // If document doesn't exist we know for sure we will crash in this method
	      // when we call document.createEvent(). However this can cause confusing
	      // errors: https://github.com/facebook/create-react-app/issues/3482
	      // So we preemptively throw with a better message instead.
	      if (typeof document === 'undefined' || document === null) {
	        throw new Error('The `document` global was defined when React was initialized, but is not ' + 'defined anymore. This can happen in a test environment if a component ' + 'schedules an update from an asynchronous callback, but the test has already ' + 'finished running. To solve this, you can either unmount the component at ' + 'the end of your test (and ensure that any asynchronous operations get ' + 'canceled in `componentWillUnmount`), or you can change the test itself ' + 'to be asynchronous.');
	      }

	      var evt = document.createEvent('Event');
	      var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
	      // set this to true at the beginning, then set it to false right after
	      // calling the function. If the function errors, `didError` will never be
	      // set to false. This strategy works even if the browser is flaky and
	      // fails to call our global error handler, because it doesn't rely on
	      // the error event at all.

	      var didError = true; // Keeps track of the value of window.event so that we can reset it
	      // during the callback to let user code access window.event in the
	      // browsers that support it.

	      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
	      // dispatching: https://github.com/facebook/react/issues/13688

	      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

	      function restoreAfterDispatch() {
	        // We immediately remove the callback from event listeners so that
	        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
	        // nested call would trigger the fake event handlers of any call higher
	        // in the stack.
	        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
	        // window.event assignment in both IE <= 10 as they throw an error
	        // "Member not found" in strict mode, and in Firefox which does not
	        // support window.event.

	        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
	          window.event = windowEvent;
	        }
	      } // Create an event handler for our fake event. We will synchronously
	      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
	      // call the user-provided callback.


	      var funcArgs = Array.prototype.slice.call(arguments, 3);

	      function callCallback() {
	        didCall = true;
	        restoreAfterDispatch();
	        func.apply(context, funcArgs);
	        didError = false;
	      } // Create a global error event handler. We use this to capture the value
	      // that was thrown. It's possible that this error handler will fire more
	      // than once; for example, if non-React code also calls `dispatchEvent`
	      // and a handler for that event throws. We should be resilient to most of
	      // those cases. Even if our error event handler fires more than once, the
	      // last error event is always used. If the callback actually does error,
	      // we know that the last error event is the correct one, because it's not
	      // possible for anything else to have happened in between our callback
	      // erroring and the code that follows the `dispatchEvent` call below. If
	      // the callback doesn't error, but the error event was fired, we know to
	      // ignore it because `didError` will be false, as described above.


	      var error; // Use this to track whether the error event is ever called.

	      var didSetError = false;
	      var isCrossOriginError = false;

	      function handleWindowError(event) {
	        error = event.error;
	        didSetError = true;

	        if (error === null && event.colno === 0 && event.lineno === 0) {
	          isCrossOriginError = true;
	        }

	        if (event.defaultPrevented) {
	          // Some other error handler has prevented default.
	          // Browsers silence the error report if this happens.
	          // We'll remember this to later decide whether to log it or not.
	          if (error != null && typeof error === 'object') {
	            try {
	              error._suppressLogging = true;
	            } catch (inner) {// Ignore.
	            }
	          }
	        }
	      } // Create a fake event type.


	      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

	      window.addEventListener('error', handleWindowError);
	      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
	      // errors, it will trigger our global error handler.

	      evt.initEvent(evtType, false, false);
	      fakeNode.dispatchEvent(evt);

	      if (windowEventDescriptor) {
	        Object.defineProperty(window, 'event', windowEventDescriptor);
	      }

	      if (didCall && didError) {
	        if (!didSetError) {
	          // The callback errored, but the error event never fired.
	          // eslint-disable-next-line react-internal/prod-error-codes
	          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
	        } else if (isCrossOriginError) {
	          // eslint-disable-next-line react-internal/prod-error-codes
	          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');
	        }

	        this.onError(error);
	      } // Remove our event listeners


	      window.removeEventListener('error', handleWindowError);

	      if (!didCall) {
	        // Something went really wrong, and our event was not dispatched.
	        // https://github.com/facebook/react/issues/16734
	        // https://github.com/facebook/react/issues/16585
	        // Fall back to the production implementation.
	        restoreAfterDispatch();
	        return invokeGuardedCallbackProd.apply(this, arguments);
	      }
	    };
	  }
	}

	var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

	var hasError = false;
	var caughtError = null; // Used by event system to capture/rethrow the first error.
	var reporter = {
	  onError: function (error) {
	    hasError = true;
	    caughtError = error;
	  }
	};
	/**
	 * Call a function while guarding against errors that happens within it.
	 * Returns an error if it throws, otherwise null.
	 *
	 * In production, this is implemented using a try-catch. The reason we don't
	 * use a try-catch directly is so that we can swap out a different
	 * implementation in DEV mode.
	 *
	 * @param {String} name of the guard to use for logging or debugging
	 * @param {Function} func The function to invoke
	 * @param {*} context The context to use when calling the function
	 * @param {...*} args Arguments for function
	 */

	function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
	  hasError = false;
	  caughtError = null;
	  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
	}
	function hasCaughtError() {
	  return hasError;
	}
	function clearCaughtError() {
	  if (hasError) {
	    var error = caughtError;
	    hasError = false;
	    caughtError = null;
	    return error;
	  } else {
	    throw new Error('clearCaughtError was called but no error was captured. This error ' + 'is likely caused by a bug in React. Please file an issue.');
	  }
	}

	var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

	{
	  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
	} // Used during the commit phase to track the state of the Offscreen component stack.
	// Allows us to avoid traversing the return path to find the nearest Offscreen ancestor.
	// Only used when enableSuspenseLayoutEffectSemantics is enabled.


	var offscreenSubtreeIsHidden = false;
	var offscreenSubtreeWasHidden = false;
	var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
	var nextEffect = null; // Used for Profiling builds to track updaters.

	var inProgressLanes = null;
	var inProgressRoot = null;
	function reportUncaughtErrorInDEV(error) {
	  // Wrapping each small part of the commit phase into a guarded
	  // callback is a bit too slow (https://github.com/facebook/react/pull/21666).
	  // But we rely on it to surface errors to DEV tools like overlays
	  // (https://github.com/facebook/react/issues/21712).
	  // As a compromise, rethrow only caught errors in a guard.
	  {
	    invokeGuardedCallback(null, function () {
	      throw error;
	    });
	    clearCaughtError();
	  }
	}

	var callComponentWillUnmountWithTimer = function (current, instance) {
	  instance.props = current.memoizedProps;
	  instance.state = current.memoizedState;

	  if ( current.mode & ProfileMode) {
	    try {
	      startLayoutEffectTimer();
	      instance.componentWillUnmount();
	    } finally {
	      recordLayoutEffectDuration(current);
	    }
	  } else {
	    instance.componentWillUnmount();
	  }
	}; // Capture errors so they don't interrupt mounting.


	function safelyCallCommitHookLayoutEffectListMount(current, nearestMountedAncestor) {
	  try {
	    commitHookEffectListMount(Layout, current);
	  } catch (error) {
	    captureCommitPhaseError(current, nearestMountedAncestor, error);
	  }
	} // Capture errors so they don't interrupt unmounting.


	function safelyCallComponentWillUnmount(current, nearestMountedAncestor, instance) {
	  try {
	    callComponentWillUnmountWithTimer(current, instance);
	  } catch (error) {
	    captureCommitPhaseError(current, nearestMountedAncestor, error);
	  }
	} // Capture errors so they don't interrupt mounting.


	function safelyCallComponentDidMount(current, nearestMountedAncestor, instance) {
	  try {
	    instance.componentDidMount();
	  } catch (error) {
	    captureCommitPhaseError(current, nearestMountedAncestor, error);
	  }
	} // Capture errors so they don't interrupt mounting.


	function safelyAttachRef(current, nearestMountedAncestor) {
	  try {
	    commitAttachRef(current);
	  } catch (error) {
	    captureCommitPhaseError(current, nearestMountedAncestor, error);
	  }
	}

	function safelyDetachRef(current, nearestMountedAncestor) {
	  var ref = current.ref;

	  if (ref !== null) {
	    if (typeof ref === 'function') {
	      var retVal;

	      try {
	        if (enableProfilerTimer && enableProfilerCommitHooks && current.mode & ProfileMode) {
	          try {
	            startLayoutEffectTimer();
	            retVal = ref(null);
	          } finally {
	            recordLayoutEffectDuration(current);
	          }
	        } else {
	          retVal = ref(null);
	        }
	      } catch (error) {
	        captureCommitPhaseError(current, nearestMountedAncestor, error);
	      }

	      {
	        if (typeof retVal === 'function') {
	          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(current));
	        }
	      }
	    } else {
	      ref.current = null;
	    }
	  }
	}

	function safelyCallDestroy(current, nearestMountedAncestor, destroy) {
	  try {
	    destroy();
	  } catch (error) {
	    captureCommitPhaseError(current, nearestMountedAncestor, error);
	  }
	}
	var shouldFireAfterActiveInstanceBlur = false;
	function commitBeforeMutationEffects(root, firstChild) {
	  prepareForCommit(root.containerInfo);
	  nextEffect = firstChild;
	  commitBeforeMutationEffects_begin(); // We no longer need to track the active instance fiber

	  var shouldFire = shouldFireAfterActiveInstanceBlur;
	  shouldFireAfterActiveInstanceBlur = false;
	  return shouldFire;
	}

	function commitBeforeMutationEffects_begin() {
	  while (nextEffect !== null) {
	    var fiber = nextEffect; // This phase is only used for beforeActiveInstanceBlur.

	    var child = fiber.child;

	    if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
	      child.return = fiber;
	      nextEffect = child;
	    } else {
	      commitBeforeMutationEffects_complete();
	    }
	  }
	}

	function commitBeforeMutationEffects_complete() {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    setCurrentFiber(fiber);

	    try {
	      commitBeforeMutationEffectsOnFiber(fiber);
	    } catch (error) {
	      captureCommitPhaseError(fiber, fiber.return, error);
	    }

	    resetCurrentFiber();
	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function commitBeforeMutationEffectsOnFiber(finishedWork) {
	  var current = finishedWork.alternate;
	  var flags = finishedWork.flags;

	  if ((flags & Snapshot) !== NoFlags) {
	    setCurrentFiber(finishedWork);

	    switch (finishedWork.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          break;
	        }

	      case ClassComponent:
	        {
	          if (current !== null) {
	            var prevProps = current.memoizedProps;
	            var prevState = current.memoizedState;
	            var instance = finishedWork.stateNode; // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.

	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                if (instance.props !== finishedWork.memoizedProps) {
	                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                }

	                if (instance.state !== finishedWork.memoizedState) {
	                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                }
	              }
	            }

	            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

	            {
	              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

	              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
	                didWarnSet.add(finishedWork.type);

	                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentNameFromFiber(finishedWork));
	              }
	            }

	            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
	          }

	          break;
	        }

	      case HostRoot:
	        {
	          if (supportsMutation) {
	            var root = finishedWork.stateNode;
	            clearContainer(root.containerInfo);
	          }

	          break;
	        }

	      case HostComponent:
	      case HostText:
	      case HostPortal:
	      case IncompleteClassComponent:
	        // Nothing to do for these component types
	        break;

	      default:
	        {
	          throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');
	        }
	    }

	    resetCurrentFiber();
	  }
	}

	function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
	  var updateQueue = finishedWork.updateQueue;
	  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

	  if (lastEffect !== null) {
	    var firstEffect = lastEffect.next;
	    var effect = firstEffect;

	    do {
	      if ((effect.tag & flags) === flags) {
	        // Unmount
	        var destroy = effect.destroy;
	        effect.destroy = undefined;

	        if (destroy !== undefined) {
	          {
	            if ((flags & Passive$1) !== NoFlags$1) {
	              markComponentPassiveEffectUnmountStarted(finishedWork);
	            } else if ((flags & Layout) !== NoFlags$1) {
	              markComponentLayoutEffectUnmountStarted(finishedWork);
	            }
	          }

	          {
	            if ((flags & Insertion) !== NoFlags$1) {
	              setIsRunningInsertionEffect(true);
	            }
	          }

	          safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);

	          {
	            if ((flags & Insertion) !== NoFlags$1) {
	              setIsRunningInsertionEffect(false);
	            }
	          }

	          {
	            if ((flags & Passive$1) !== NoFlags$1) {
	              markComponentPassiveEffectUnmountStopped();
	            } else if ((flags & Layout) !== NoFlags$1) {
	              markComponentLayoutEffectUnmountStopped();
	            }
	          }
	        }
	      }

	      effect = effect.next;
	    } while (effect !== firstEffect);
	  }
	}

	function commitHookEffectListMount(flags, finishedWork) {
	  var updateQueue = finishedWork.updateQueue;
	  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

	  if (lastEffect !== null) {
	    var firstEffect = lastEffect.next;
	    var effect = firstEffect;

	    do {
	      if ((effect.tag & flags) === flags) {
	        {
	          if ((flags & Passive$1) !== NoFlags$1) {
	            markComponentPassiveEffectMountStarted(finishedWork);
	          } else if ((flags & Layout) !== NoFlags$1) {
	            markComponentLayoutEffectMountStarted(finishedWork);
	          }
	        } // Mount


	        var create = effect.create;

	        {
	          if ((flags & Insertion) !== NoFlags$1) {
	            setIsRunningInsertionEffect(true);
	          }
	        }

	        effect.destroy = create();

	        {
	          if ((flags & Insertion) !== NoFlags$1) {
	            setIsRunningInsertionEffect(false);
	          }
	        }

	        {
	          if ((flags & Passive$1) !== NoFlags$1) {
	            markComponentPassiveEffectMountStopped();
	          } else if ((flags & Layout) !== NoFlags$1) {
	            markComponentLayoutEffectMountStopped();
	          }
	        }

	        {
	          var destroy = effect.destroy;

	          if (destroy !== undefined && typeof destroy !== 'function') {
	            var hookName = void 0;

	            if ((effect.tag & Layout) !== NoFlags) {
	              hookName = 'useLayoutEffect';
	            } else if ((effect.tag & Insertion) !== NoFlags) {
	              hookName = 'useInsertionEffect';
	            } else {
	              hookName = 'useEffect';
	            }

	            var addendum = void 0;

	            if (destroy === null) {
	              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
	            } else if (typeof destroy.then === 'function') {
	              addendum = '\n\nIt looks like you wrote ' + hookName + '(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + hookName + '(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
	            } else {
	              addendum = ' You returned: ' + destroy;
	            }

	            error('%s must not return anything besides a function, ' + 'which is used for clean-up.%s', hookName, addendum);
	          }
	        }
	      }

	      effect = effect.next;
	    } while (effect !== firstEffect);
	  }
	}

	function commitPassiveEffectDurations(finishedRoot, finishedWork) {
	  {
	    // Only Profilers with work in their subtree will have an Update effect scheduled.
	    if ((finishedWork.flags & Update) !== NoFlags) {
	      switch (finishedWork.tag) {
	        case Profiler:
	          {
	            var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
	            var _finishedWork$memoize = finishedWork.memoizedProps,
	                id = _finishedWork$memoize.id,
	                onPostCommit = _finishedWork$memoize.onPostCommit; // This value will still reflect the previous commit phase.
	            // It does not get reset until the start of the next commit phase.

	            var commitTime = getCommitTime();
	            var phase = finishedWork.alternate === null ? 'mount' : 'update';

	            {
	              if (isCurrentUpdateNested()) {
	                phase = 'nested-update';
	              }
	            }

	            if (typeof onPostCommit === 'function') {
	              onPostCommit(id, phase, passiveEffectDuration, commitTime);
	            } // Bubble times to the next nearest ancestor Profiler.
	            // After we process that Profiler, we'll bubble further up.


	            var parentFiber = finishedWork.return;

	            outer: while (parentFiber !== null) {
	              switch (parentFiber.tag) {
	                case HostRoot:
	                  var root = parentFiber.stateNode;
	                  root.passiveEffectDuration += passiveEffectDuration;
	                  break outer;

	                case Profiler:
	                  var parentStateNode = parentFiber.stateNode;
	                  parentStateNode.passiveEffectDuration += passiveEffectDuration;
	                  break outer;
	              }

	              parentFiber = parentFiber.return;
	            }

	            break;
	          }
	      }
	    }
	  }
	}

	function commitLayoutEffectOnFiber(finishedRoot, current, finishedWork, committedLanes) {
	  if ((finishedWork.flags & LayoutMask) !== NoFlags) {
	    switch (finishedWork.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          if ( !offscreenSubtreeWasHidden) {
	            // At this point layout effects have already been destroyed (during mutation phase).
	            // This is done to prevent sibling component effects from interfering with each other,
	            // e.g. a destroy function in one component should never override a ref set
	            // by a create function in another component during the same commit.
	            if ( finishedWork.mode & ProfileMode) {
	              try {
	                startLayoutEffectTimer();
	                commitHookEffectListMount(Layout | HasEffect, finishedWork);
	              } finally {
	                recordLayoutEffectDuration(finishedWork);
	              }
	            } else {
	              commitHookEffectListMount(Layout | HasEffect, finishedWork);
	            }
	          }

	          break;
	        }

	      case ClassComponent:
	        {
	          var instance = finishedWork.stateNode;

	          if (finishedWork.flags & Update) {
	            if (!offscreenSubtreeWasHidden) {
	              if (current === null) {
	                // We could update instance props and state here,
	                // but instead we rely on them being set during last render.
	                // TODO: revisit this when we implement resuming.
	                {
	                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                    if (instance.props !== finishedWork.memoizedProps) {
	                      error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                    }

	                    if (instance.state !== finishedWork.memoizedState) {
	                      error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                    }
	                  }
	                }

	                if ( finishedWork.mode & ProfileMode) {
	                  try {
	                    startLayoutEffectTimer();
	                    instance.componentDidMount();
	                  } finally {
	                    recordLayoutEffectDuration(finishedWork);
	                  }
	                } else {
	                  instance.componentDidMount();
	                }
	              } else {
	                var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
	                var prevState = current.memoizedState; // We could update instance props and state here,
	                // but instead we rely on them being set during last render.
	                // TODO: revisit this when we implement resuming.

	                {
	                  if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                    if (instance.props !== finishedWork.memoizedProps) {
	                      error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                    }

	                    if (instance.state !== finishedWork.memoizedState) {
	                      error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                    }
	                  }
	                }

	                if ( finishedWork.mode & ProfileMode) {
	                  try {
	                    startLayoutEffectTimer();
	                    instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
	                  } finally {
	                    recordLayoutEffectDuration(finishedWork);
	                  }
	                } else {
	                  instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
	                }
	              }
	            }
	          } // TODO: I think this is now always non-null by the time it reaches the
	          // commit phase. Consider removing the type check.


	          var updateQueue = finishedWork.updateQueue;

	          if (updateQueue !== null) {
	            {
	              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
	                if (instance.props !== finishedWork.memoizedProps) {
	                  error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                }

	                if (instance.state !== finishedWork.memoizedState) {
	                  error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentNameFromFiber(finishedWork) || 'instance');
	                }
	              }
	            } // We could update instance props and state here,
	            // but instead we rely on them being set during last render.
	            // TODO: revisit this when we implement resuming.


	            commitUpdateQueue(finishedWork, updateQueue, instance);
	          }

	          break;
	        }

	      case HostRoot:
	        {
	          // TODO: I think this is now always non-null by the time it reaches the
	          // commit phase. Consider removing the type check.
	          var _updateQueue = finishedWork.updateQueue;

	          if (_updateQueue !== null) {
	            var _instance = null;

	            if (finishedWork.child !== null) {
	              switch (finishedWork.child.tag) {
	                case HostComponent:
	                  _instance = getPublicInstance(finishedWork.child.stateNode);
	                  break;

	                case ClassComponent:
	                  _instance = finishedWork.child.stateNode;
	                  break;
	              }
	            }

	            commitUpdateQueue(finishedWork, _updateQueue, _instance);
	          }

	          break;
	        }

	      case HostComponent:
	        {
	          var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
	          // (eg DOM renderer may schedule auto-focus for inputs and form controls).
	          // These effects should only be committed when components are first mounted,
	          // aka when there is no current/alternate.

	          if (current === null && finishedWork.flags & Update) {
	            var type = finishedWork.type;
	            var props = finishedWork.memoizedProps;
	            commitMount(_instance2, type, props, finishedWork);
	          }

	          break;
	        }

	      case HostText:
	        {
	          // We have no life-cycles associated with text.
	          break;
	        }

	      case HostPortal:
	        {
	          // We have no life-cycles associated with portals.
	          break;
	        }

	      case Profiler:
	        {
	          {
	            var _finishedWork$memoize2 = finishedWork.memoizedProps,
	                onCommit = _finishedWork$memoize2.onCommit,
	                onRender = _finishedWork$memoize2.onRender;
	            var effectDuration = finishedWork.stateNode.effectDuration;
	            var commitTime = getCommitTime();
	            var phase = current === null ? 'mount' : 'update';

	            {
	              if (isCurrentUpdateNested()) {
	                phase = 'nested-update';
	              }
	            }

	            if (typeof onRender === 'function') {
	              onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime);
	            }

	            {
	              if (typeof onCommit === 'function') {
	                onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime);
	              } // Schedule a passive effect for this Profiler to call onPostCommit hooks.
	              // This effect should be scheduled even if there is no onPostCommit callback for this Profiler,
	              // because the effect is also where times bubble to parent Profilers.


	              enqueuePendingPassiveProfilerEffect(finishedWork); // Propagate layout effect durations to the next nearest Profiler ancestor.
	              // Do not reset these values until the next render so DevTools has a chance to read them first.

	              var parentFiber = finishedWork.return;

	              outer: while (parentFiber !== null) {
	                switch (parentFiber.tag) {
	                  case HostRoot:
	                    var root = parentFiber.stateNode;
	                    root.effectDuration += effectDuration;
	                    break outer;

	                  case Profiler:
	                    var parentStateNode = parentFiber.stateNode;
	                    parentStateNode.effectDuration += effectDuration;
	                    break outer;
	                }

	                parentFiber = parentFiber.return;
	              }
	            }
	          }

	          break;
	        }

	      case SuspenseComponent:
	        {
	          commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
	          break;
	        }

	      case SuspenseListComponent:
	      case IncompleteClassComponent:
	      case ScopeComponent:
	      case OffscreenComponent:
	      case LegacyHiddenComponent:
	      case TracingMarkerComponent:
	        {
	          break;
	        }

	      default:
	        throw new Error('This unit of work tag should not have side-effects. This error is ' + 'likely caused by a bug in React. Please file an issue.');
	    }
	  }

	  if ( !offscreenSubtreeWasHidden) {
	    {
	      if (finishedWork.flags & Ref) {
	        commitAttachRef(finishedWork);
	      }
	    }
	  }
	}

	function reappearLayoutEffectsOnFiber(node) {
	  // Turn on layout effects in a tree that previously disappeared.
	  // TODO (Offscreen) Check: flags & LayoutStatic
	  switch (node.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        if ( node.mode & ProfileMode) {
	          try {
	            startLayoutEffectTimer();
	            safelyCallCommitHookLayoutEffectListMount(node, node.return);
	          } finally {
	            recordLayoutEffectDuration(node);
	          }
	        } else {
	          safelyCallCommitHookLayoutEffectListMount(node, node.return);
	        }

	        break;
	      }

	    case ClassComponent:
	      {
	        var instance = node.stateNode;

	        if (typeof instance.componentDidMount === 'function') {
	          safelyCallComponentDidMount(node, node.return, instance);
	        }

	        safelyAttachRef(node, node.return);
	        break;
	      }

	    case HostComponent:
	      {
	        safelyAttachRef(node, node.return);
	        break;
	      }
	  }
	}

	function hideOrUnhideAllChildren(finishedWork, isHidden) {
	  // Only hide or unhide the top-most host nodes.
	  var hostSubtreeRoot = null;

	  if (supportsMutation) {
	    // We only have the top Fiber that was inserted but we need to recurse down its
	    // children to find all the terminal nodes.
	    var node = finishedWork;

	    while (true) {
	      if (node.tag === HostComponent) {
	        if (hostSubtreeRoot === null) {
	          hostSubtreeRoot = node;

	          try {
	            var instance = node.stateNode;

	            if (isHidden) {
	              hideInstance(instance);
	            } else {
	              unhideInstance(node.stateNode, node.memoizedProps);
	            }
	          } catch (error) {
	            captureCommitPhaseError(finishedWork, finishedWork.return, error);
	          }
	        }
	      } else if (node.tag === HostText) {
	        if (hostSubtreeRoot === null) {
	          try {
	            var _instance3 = node.stateNode;

	            if (isHidden) {
	              hideTextInstance(_instance3);
	            } else {
	              unhideTextInstance(_instance3, node.memoizedProps);
	            }
	          } catch (error) {
	            captureCommitPhaseError(finishedWork, finishedWork.return, error);
	          }
	        }
	      } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === finishedWork) {
	        return;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === finishedWork) {
	          return;
	        }

	        if (hostSubtreeRoot === node) {
	          hostSubtreeRoot = null;
	        }

	        node = node.return;
	      }

	      if (hostSubtreeRoot === node) {
	        hostSubtreeRoot = null;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }
	}

	function commitAttachRef(finishedWork) {
	  var ref = finishedWork.ref;

	  if (ref !== null) {
	    var instance = finishedWork.stateNode;
	    var instanceToUse;

	    switch (finishedWork.tag) {
	      case HostComponent:
	        instanceToUse = getPublicInstance(instance);
	        break;

	      default:
	        instanceToUse = instance;
	    } // Moved outside to ensure DCE works with this flag

	    if (typeof ref === 'function') {
	      var retVal;

	      if ( finishedWork.mode & ProfileMode) {
	        try {
	          startLayoutEffectTimer();
	          retVal = ref(instanceToUse);
	        } finally {
	          recordLayoutEffectDuration(finishedWork);
	        }
	      } else {
	        retVal = ref(instanceToUse);
	      }

	      {
	        if (typeof retVal === 'function') {
	          error('Unexpected return value from a callback ref in %s. ' + 'A callback ref should not return a function.', getComponentNameFromFiber(finishedWork));
	        }
	      }
	    } else {
	      {
	        if (!ref.hasOwnProperty('current')) {
	          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentNameFromFiber(finishedWork));
	        }
	      }

	      ref.current = instanceToUse;
	    }
	  }
	}

	function detachFiberMutation(fiber) {
	  // Cut off the return pointer to disconnect it from the tree.
	  // This enables us to detect and warn against state updates on an unmounted component.
	  // It also prevents events from bubbling from within disconnected components.
	  //
	  // Ideally, we should also clear the child pointer of the parent alternate to let this
	  // get GC:ed but we don't know which for sure which parent is the current
	  // one so we'll settle for GC:ing the subtree of this child.
	  // This child itself will be GC:ed when the parent updates the next time.
	  //
	  // Note that we can't clear child or sibling pointers yet.
	  // They're needed for passive effects and for findDOMNode.
	  // We defer those fields, and all other cleanup, to the passive phase (see detachFiberAfterEffects).
	  //
	  // Don't reset the alternate yet, either. We need that so we can detach the
	  // alternate's fields in the passive phase. Clearing the return pointer is
	  // sufficient for findDOMNode semantics.
	  var alternate = fiber.alternate;

	  if (alternate !== null) {
	    alternate.return = null;
	  }

	  fiber.return = null;
	}

	function detachFiberAfterEffects(fiber) {
	  var alternate = fiber.alternate;

	  if (alternate !== null) {
	    fiber.alternate = null;
	    detachFiberAfterEffects(alternate);
	  } // Note: Defensively using negation instead of < in case
	  // `deletedTreeCleanUpLevel` is undefined.


	  {
	    // Clear cyclical Fiber fields. This level alone is designed to roughly
	    // approximate the planned Fiber refactor. In that world, `setState` will be
	    // bound to a special "instance" object instead of a Fiber. The Instance
	    // object will not have any of these fields. It will only be connected to
	    // the fiber tree via a single link at the root. So if this level alone is
	    // sufficient to fix memory issues, that bodes well for our plans.
	    fiber.child = null;
	    fiber.deletions = null;
	    fiber.sibling = null; // The `stateNode` is cyclical because on host nodes it points to the host
	    // tree, which has its own pointers to children, parents, and siblings.
	    // The other host nodes also point back to fibers, so we should detach that
	    // one, too.

	    if (fiber.tag === HostComponent) {
	      var hostInstance = fiber.stateNode;

	      if (hostInstance !== null) {
	        detachDeletedInstance(hostInstance);
	      }
	    }

	    fiber.stateNode = null; // I'm intentionally not clearing the `return` field in this level. We
	    // already disconnect the `return` pointer at the root of the deleted
	    // subtree (in `detachFiberMutation`). Besides, `return` by itself is not
	    // cyclical — it's only cyclical when combined with `child`, `sibling`, and
	    // `alternate`. But we'll clear it in the next level anyway, just in case.

	    {
	      fiber._debugOwner = null;
	    }

	    {
	      // Theoretically, nothing in here should be necessary, because we already
	      // disconnected the fiber from the tree. So even if something leaks this
	      // particular fiber, it won't leak anything else
	      //
	      // The purpose of this branch is to be super aggressive so we can measure
	      // if there's any difference in memory impact. If there is, that could
	      // indicate a React leak we don't know about.
	      fiber.return = null;
	      fiber.dependencies = null;
	      fiber.memoizedProps = null;
	      fiber.memoizedState = null;
	      fiber.pendingProps = null;
	      fiber.stateNode = null; // TODO: Move to `commitPassiveUnmountInsideDeletedTreeOnFiber` instead.

	      fiber.updateQueue = null;
	    }
	  }
	}

	function emptyPortalContainer(current) {
	  if (!supportsPersistence) {
	    return;
	  }

	  var portal = current.stateNode;
	  var containerInfo = portal.containerInfo;
	  var emptyChildSet = createContainerChildSet(containerInfo);
	  replaceContainerChildren(containerInfo, emptyChildSet);
	}

	function getHostParentFiber(fiber) {
	  var parent = fiber.return;

	  while (parent !== null) {
	    if (isHostParent(parent)) {
	      return parent;
	    }

	    parent = parent.return;
	  }

	  throw new Error('Expected to find a host parent. This error is likely caused by a bug ' + 'in React. Please file an issue.');
	}

	function isHostParent(fiber) {
	  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
	}

	function getHostSibling(fiber) {
	  // We're going to search forward into the tree until we find a sibling host
	  // node. Unfortunately, if multiple insertions are done in a row we have to
	  // search past them. This leads to exponential search for the next sibling.
	  // TODO: Find a more efficient way to do this.
	  var node = fiber;

	  siblings: while (true) {
	    // If we didn't find anything, let's try the next sibling.
	    while (node.sibling === null) {
	      if (node.return === null || isHostParent(node.return)) {
	        // If we pop out of the root or hit the parent the fiber we are the
	        // last sibling.
	        return null;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;

	    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
	      // If it is not host node and, we might have a host node inside it.
	      // Try to search down until we find one.
	      if (node.flags & Placement) {
	        // If we don't have a child, try the siblings instead.
	        continue siblings;
	      } // If we don't have a child, try the siblings instead.
	      // We also skip portals because they are not part of this host tree.


	      if (node.child === null || node.tag === HostPortal) {
	        continue siblings;
	      } else {
	        node.child.return = node;
	        node = node.child;
	      }
	    } // Check if this host node is stable or about to be placed.


	    if (!(node.flags & Placement)) {
	      // Found it!
	      return node.stateNode;
	    }
	  }
	}

	function commitPlacement(finishedWork) {
	  if (!supportsMutation) {
	    return;
	  } // Recursively insert all host nodes into the parent.


	  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

	  switch (parentFiber.tag) {
	    case HostComponent:
	      {
	        var parent = parentFiber.stateNode;

	        if (parentFiber.flags & ContentReset) {
	          // Reset the text content of the parent before doing any insertions
	          resetTextContent(parent); // Clear ContentReset from the effect tag

	          parentFiber.flags &= ~ContentReset;
	        }

	        var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
	        // children to find all the terminal nodes.

	        insertOrAppendPlacementNode(finishedWork, before, parent);
	        break;
	      }

	    case HostRoot:
	    case HostPortal:
	      {
	        var _parent = parentFiber.stateNode.containerInfo;

	        var _before = getHostSibling(finishedWork);

	        insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
	        break;
	      }
	    // eslint-disable-next-line-no-fallthrough

	    default:
	      throw new Error('Invalid host parent fiber. This error is likely caused by a bug ' + 'in React. Please file an issue.');
	  }
	}

	function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
	  var tag = node.tag;
	  var isHost = tag === HostComponent || tag === HostText;

	  if (isHost) {
	    var stateNode = node.stateNode;

	    if (before) {
	      insertInContainerBefore(parent, stateNode, before);
	    } else {
	      appendChildToContainer(parent, stateNode);
	    }
	  } else if (tag === HostPortal) ; else {
	    var child = node.child;

	    if (child !== null) {
	      insertOrAppendPlacementNodeIntoContainer(child, before, parent);
	      var sibling = child.sibling;

	      while (sibling !== null) {
	        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
	        sibling = sibling.sibling;
	      }
	    }
	  }
	}

	function insertOrAppendPlacementNode(node, before, parent) {
	  var tag = node.tag;
	  var isHost = tag === HostComponent || tag === HostText;

	  if (isHost) {
	    var stateNode = node.stateNode;

	    if (before) {
	      insertBefore(parent, stateNode, before);
	    } else {
	      appendChild(parent, stateNode);
	    }
	  } else if (tag === HostPortal) ; else {
	    var child = node.child;

	    if (child !== null) {
	      insertOrAppendPlacementNode(child, before, parent);
	      var sibling = child.sibling;

	      while (sibling !== null) {
	        insertOrAppendPlacementNode(sibling, before, parent);
	        sibling = sibling.sibling;
	      }
	    }
	  }
	} // These are tracked on the stack as we recursively traverse a
	// deleted subtree.
	// TODO: Update these during the whole mutation phase, not just during
	// a deletion.


	var hostParent = null;
	var hostParentIsContainer = false;

	function commitDeletionEffects(root, returnFiber, deletedFiber) {
	  if (supportsMutation) {
	    // We only have the top Fiber that was deleted but we need to recurse down its
	    // children to find all the terminal nodes.
	    // Recursively delete all host nodes from the parent, detach refs, clean
	    // up mounted layout effects, and call componentWillUnmount.
	    // We only need to remove the topmost host child in each branch. But then we
	    // still need to keep traversing to unmount effects, refs, and cWU. TODO: We
	    // could split this into two separate traversals functions, where the second
	    // one doesn't include any removeChild logic. This is maybe the same
	    // function as "disappearLayoutEffects" (or whatever that turns into after
	    // the layout phase is refactored to use recursion).
	    // Before starting, find the nearest host parent on the stack so we know
	    // which instance/container to remove the children from.
	    // TODO: Instead of searching up the fiber return path on every deletion, we
	    // can track the nearest host component on the JS stack as we traverse the
	    // tree during the commit phase. This would make insertions faster, too.
	    var parent = returnFiber;

	    findParent: while (parent !== null) {
	      switch (parent.tag) {
	        case HostComponent:
	          {
	            hostParent = parent.stateNode;
	            hostParentIsContainer = false;
	            break findParent;
	          }

	        case HostRoot:
	          {
	            hostParent = parent.stateNode.containerInfo;
	            hostParentIsContainer = true;
	            break findParent;
	          }

	        case HostPortal:
	          {
	            hostParent = parent.stateNode.containerInfo;
	            hostParentIsContainer = true;
	            break findParent;
	          }
	      }

	      parent = parent.return;
	    }

	    if (hostParent === null) {
	      throw new Error('Expected to find a host parent. This error is likely caused by ' + 'a bug in React. Please file an issue.');
	    }

	    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
	    hostParent = null;
	    hostParentIsContainer = false;
	  } else {
	    // Detach refs and call componentWillUnmount() on the whole subtree.
	    commitDeletionEffectsOnFiber(root, returnFiber, deletedFiber);
	  }

	  detachFiberMutation(deletedFiber);
	}

	function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
	  // TODO: Use a static flag to skip trees that don't have unmount effects
	  var child = parent.child;

	  while (child !== null) {
	    commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
	    child = child.sibling;
	  }
	}

	function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
	  onCommitUnmount(deletedFiber); // The cases in this outer switch modify the stack before they traverse
	  // into their subtree. There are simpler cases in the inner switch
	  // that don't modify the stack.

	  switch (deletedFiber.tag) {
	    case HostComponent:
	      {
	        if (!offscreenSubtreeWasHidden) {
	          safelyDetachRef(deletedFiber, nearestMountedAncestor);
	        } // Intentional fallthrough to next branch

	      }
	    // eslint-disable-next-line-no-fallthrough

	    case HostText:
	      {
	        // We only need to remove the nearest host child. Set the host parent
	        // to `null` on the stack to indicate that nested children don't
	        // need to be removed.
	        if (supportsMutation) {
	          var prevHostParent = hostParent;
	          var prevHostParentIsContainer = hostParentIsContainer;
	          hostParent = null;
	          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	          hostParent = prevHostParent;
	          hostParentIsContainer = prevHostParentIsContainer;

	          if (hostParent !== null) {
	            // Now that all the child effects have unmounted, we can remove the
	            // node from the tree.
	            if (hostParentIsContainer) {
	              removeChildFromContainer(hostParent, deletedFiber.stateNode);
	            } else {
	              removeChild(hostParent, deletedFiber.stateNode);
	            }
	          }
	        } else {
	          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	        }

	        return;
	      }

	    case DehydratedFragment:
	      {
	        // Delete the dehydrated suspense boundary and all of its content.


	        if (supportsMutation) {
	          if (hostParent !== null) {
	            if (hostParentIsContainer) {
	              clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
	            } else {
	              clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
	            }
	          }
	        }

	        return;
	      }

	    case HostPortal:
	      {
	        if (supportsMutation) {
	          // When we go into a portal, it becomes the parent to remove from.
	          var _prevHostParent = hostParent;
	          var _prevHostParentIsContainer = hostParentIsContainer;
	          hostParent = deletedFiber.stateNode.containerInfo;
	          hostParentIsContainer = true;
	          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	          hostParent = _prevHostParent;
	          hostParentIsContainer = _prevHostParentIsContainer;
	        } else {
	          emptyPortalContainer(deletedFiber);
	          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	        }

	        return;
	      }

	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	      {
	        if (!offscreenSubtreeWasHidden) {
	          var updateQueue = deletedFiber.updateQueue;

	          if (updateQueue !== null) {
	            var lastEffect = updateQueue.lastEffect;

	            if (lastEffect !== null) {
	              var firstEffect = lastEffect.next;
	              var effect = firstEffect;

	              do {
	                var _effect = effect,
	                    destroy = _effect.destroy,
	                    tag = _effect.tag;

	                if (destroy !== undefined) {
	                  if ((tag & Insertion) !== NoFlags$1) {
	                    safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
	                  } else if ((tag & Layout) !== NoFlags$1) {
	                    {
	                      markComponentLayoutEffectUnmountStarted(deletedFiber);
	                    }

	                    if ( deletedFiber.mode & ProfileMode) {
	                      startLayoutEffectTimer();
	                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
	                      recordLayoutEffectDuration(deletedFiber);
	                    } else {
	                      safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
	                    }

	                    {
	                      markComponentLayoutEffectUnmountStopped();
	                    }
	                  }
	                }

	                effect = effect.next;
	              } while (effect !== firstEffect);
	            }
	          }
	        }

	        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	        return;
	      }

	    case ClassComponent:
	      {
	        if (!offscreenSubtreeWasHidden) {
	          safelyDetachRef(deletedFiber, nearestMountedAncestor);
	          var instance = deletedFiber.stateNode;

	          if (typeof instance.componentWillUnmount === 'function') {
	            safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
	          }
	        }

	        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	        return;
	      }

	    case ScopeComponent:
	      {

	        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	        return;
	      }

	    case OffscreenComponent:
	      {
	        if ( // TODO: Remove this dead flag
	         deletedFiber.mode & ConcurrentMode) {
	          // If this offscreen component is hidden, we already unmounted it. Before
	          // deleting the children, track that it's already unmounted so that we
	          // don't attempt to unmount the effects again.
	          // TODO: If the tree is hidden, in most cases we should be able to skip
	          // over the nested children entirely. An exception is we haven't yet found
	          // the topmost host node to delete, which we already track on the stack.
	          // But the other case is portals, which need to be detached no matter how
	          // deeply they are nested. We should use a subtree flag to track whether a
	          // subtree includes a nested portal.
	          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
	          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
	          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
	        } else {
	          recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	        }

	        break;
	      }

	    default:
	      {
	        recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
	        return;
	      }
	  }
	}

	function commitSuspenseCallback(finishedWork) {
	  // TODO: Move this to passive phase
	  finishedWork.memoizedState;
	}

	function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
	  if (!supportsHydration) {
	    return;
	  }

	  var newState = finishedWork.memoizedState;

	  if (newState === null) {
	    var current = finishedWork.alternate;

	    if (current !== null) {
	      var prevState = current.memoizedState;

	      if (prevState !== null) {
	        var suspenseInstance = prevState.dehydrated;

	        if (suspenseInstance !== null) {
	          commitHydratedSuspenseInstance(suspenseInstance);
	        }
	      }
	    }
	  }
	}

	function attachSuspenseRetryListeners(finishedWork) {
	  // If this boundary just timed out, then it will have a set of wakeables.
	  // For each wakeable, attach a listener so that when it resolves, React
	  // attempts to re-render the boundary in the primary (pre-timeout) state.
	  var wakeables = finishedWork.updateQueue;

	  if (wakeables !== null) {
	    finishedWork.updateQueue = null;
	    var retryCache = finishedWork.stateNode;

	    if (retryCache === null) {
	      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
	    }

	    wakeables.forEach(function (wakeable) {
	      // Memoize using the boundary fiber to prevent redundant listeners.
	      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);

	      if (!retryCache.has(wakeable)) {
	        retryCache.add(wakeable);

	        {
	          if (isDevToolsPresent) {
	            if (inProgressLanes !== null && inProgressRoot !== null) {
	              // If we have pending work still, associate the original updaters with it.
	              restorePendingUpdaters(inProgressRoot, inProgressLanes);
	            } else {
	              throw Error('Expected finished root and lanes to be set. This is a bug in React.');
	            }
	          }
	        }

	        wakeable.then(retry, retry);
	      }
	    });
	  }
	} // This function detects when a Suspense boundary goes from visible to hidden.
	function commitMutationEffects(root, finishedWork, committedLanes) {
	  inProgressLanes = committedLanes;
	  inProgressRoot = root;
	  setCurrentFiber(finishedWork);
	  commitMutationEffectsOnFiber(finishedWork, root);
	  setCurrentFiber(finishedWork);
	  inProgressLanes = null;
	  inProgressRoot = null;
	}

	function recursivelyTraverseMutationEffects(root, parentFiber, lanes) {
	  // Deletions effects can be scheduled on any fiber type. They need to happen
	  // before the children effects hae fired.
	  var deletions = parentFiber.deletions;

	  if (deletions !== null) {
	    for (var i = 0; i < deletions.length; i++) {
	      var childToDelete = deletions[i];

	      try {
	        commitDeletionEffects(root, parentFiber, childToDelete);
	      } catch (error) {
	        captureCommitPhaseError(childToDelete, parentFiber, error);
	      }
	    }
	  }

	  var prevDebugFiber = getCurrentFiber();

	  if (parentFiber.subtreeFlags & MutationMask) {
	    var child = parentFiber.child;

	    while (child !== null) {
	      setCurrentFiber(child);
	      commitMutationEffectsOnFiber(child, root);
	      child = child.sibling;
	    }
	  }

	  setCurrentFiber(prevDebugFiber);
	}

	function commitMutationEffectsOnFiber(finishedWork, root, lanes) {
	  var current = finishedWork.alternate;
	  var flags = finishedWork.flags; // The effect flag should be checked *after* we refine the type of fiber,
	  // because the fiber tag is more specific. An exception is any flag related
	  // to reconcilation, because those can be set on all fiber types.

	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case MemoComponent:
	    case SimpleMemoComponent:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Update) {
	          try {
	            commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
	            commitHookEffectListMount(Insertion | HasEffect, finishedWork);
	          } catch (error) {
	            captureCommitPhaseError(finishedWork, finishedWork.return, error);
	          } // Layout effects are destroyed during the mutation phase so that all
	          // destroy functions for all fibers are called before any create functions.
	          // This prevents sibling component effects from interfering with each other,
	          // e.g. a destroy function in one component should never override a ref set
	          // by a create function in another component during the same commit.


	          if ( finishedWork.mode & ProfileMode) {
	            try {
	              startLayoutEffectTimer();
	              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }

	            recordLayoutEffectDuration(finishedWork);
	          } else {
	            try {
	              commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }
	        }

	        return;
	      }

	    case ClassComponent:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Ref) {
	          if (current !== null) {
	            safelyDetachRef(current, current.return);
	          }
	        }

	        return;
	      }

	    case HostComponent:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Ref) {
	          if (current !== null) {
	            safelyDetachRef(current, current.return);
	          }
	        }

	        if (supportsMutation) {
	          // TODO: ContentReset gets cleared by the children during the commit
	          // phase. This is a refactor hazard because it means we must read
	          // flags the flags after `commitReconciliationEffects` has already run;
	          // the order matters. We should refactor so that ContentReset does not
	          // rely on mutating the flag during commit. Like by setting a flag
	          // during the render phase instead.
	          if (finishedWork.flags & ContentReset) {
	            var instance = finishedWork.stateNode;

	            try {
	              resetTextContent(instance);
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }

	          if (flags & Update) {
	            var _instance4 = finishedWork.stateNode;

	            if (_instance4 != null) {
	              // Commit the work prepared earlier.
	              var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
	              // as the newProps. The updatePayload will contain the real change in
	              // this case.

	              var oldProps = current !== null ? current.memoizedProps : newProps;
	              var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

	              var updatePayload = finishedWork.updateQueue;
	              finishedWork.updateQueue = null;

	              if (updatePayload !== null) {
	                try {
	                  commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
	                } catch (error) {
	                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
	                }
	              }
	            }
	          }
	        }

	        return;
	      }

	    case HostText:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Update) {
	          if (supportsMutation) {
	            if (finishedWork.stateNode === null) {
	              throw new Error('This should have a text node initialized. This error is likely ' + 'caused by a bug in React. Please file an issue.');
	            }

	            var textInstance = finishedWork.stateNode;
	            var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
	            // as the newProps. The updatePayload will contain the real change in
	            // this case.

	            var oldText = current !== null ? current.memoizedProps : newText;

	            try {
	              commitTextUpdate(textInstance, oldText, newText);
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }
	        }

	        return;
	      }

	    case HostRoot:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Update) {
	          if (supportsMutation && supportsHydration) {
	            if (current !== null) {
	              var prevRootState = current.memoizedState;

	              if (prevRootState.isDehydrated) {
	                try {
	                  commitHydratedContainer(root.containerInfo);
	                } catch (error) {
	                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
	                }
	              }
	            }
	          }

	          if (supportsPersistence) {
	            var containerInfo = root.containerInfo;
	            var pendingChildren = root.pendingChildren;

	            try {
	              replaceContainerChildren(containerInfo, pendingChildren);
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }
	        }

	        return;
	      }

	    case HostPortal:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Update) {
	          if (supportsPersistence) {
	            var portal = finishedWork.stateNode;
	            var _containerInfo = portal.containerInfo;
	            var _pendingChildren = portal.pendingChildren;

	            try {
	              replaceContainerChildren(_containerInfo, _pendingChildren);
	            } catch (error) {
	              captureCommitPhaseError(finishedWork, finishedWork.return, error);
	            }
	          }
	        }

	        return;
	      }

	    case SuspenseComponent:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);
	        var offscreenFiber = finishedWork.child;

	        if (offscreenFiber.flags & Visibility) {
	          var offscreenInstance = offscreenFiber.stateNode;
	          var newState = offscreenFiber.memoizedState;
	          var isHidden = newState !== null; // Track the current state on the Offscreen instance so we can
	          // read it during an event

	          offscreenInstance.isHidden = isHidden;

	          if (isHidden) {
	            var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;

	            if (!wasHidden) {
	              // TODO: Move to passive phase
	              markCommitTimeOfFallback();
	            }
	          }
	        }

	        if (flags & Update) {
	          try {
	            commitSuspenseCallback(finishedWork);
	          } catch (error) {
	            captureCommitPhaseError(finishedWork, finishedWork.return, error);
	          }

	          attachSuspenseRetryListeners(finishedWork);
	        }

	        return;
	      }

	    case OffscreenComponent:
	      {
	        var _wasHidden = current !== null && current.memoizedState !== null;

	        if ( // TODO: Remove this dead flag
	         finishedWork.mode & ConcurrentMode) {
	          // Before committing the children, track on the stack whether this
	          // offscreen subtree was already hidden, so that we don't unmount the
	          // effects again.
	          var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
	          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
	          recursivelyTraverseMutationEffects(root, finishedWork);
	          offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
	        } else {
	          recursivelyTraverseMutationEffects(root, finishedWork);
	        }

	        commitReconciliationEffects(finishedWork);

	        if (flags & Visibility) {
	          var _offscreenInstance = finishedWork.stateNode;
	          var _newState = finishedWork.memoizedState;

	          var _isHidden = _newState !== null;

	          var offscreenBoundary = finishedWork; // Track the current state on the Offscreen instance so we can
	          // read it during an event

	          _offscreenInstance.isHidden = _isHidden;

	          {
	            if (_isHidden) {
	              if (!_wasHidden) {
	                if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
	                  nextEffect = offscreenBoundary;
	                  var offscreenChild = offscreenBoundary.child;

	                  while (offscreenChild !== null) {
	                    nextEffect = offscreenChild;
	                    disappearLayoutEffects_begin(offscreenChild);
	                    offscreenChild = offscreenChild.sibling;
	                  }
	                }
	              }
	            }
	          }

	          if (supportsMutation) {
	            // TODO: This needs to run whenever there's an insertion or update
	            // inside a hidden Offscreen tree.
	            hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
	          }
	        }

	        return;
	      }

	    case SuspenseListComponent:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);

	        if (flags & Update) {
	          attachSuspenseRetryListeners(finishedWork);
	        }

	        return;
	      }

	    case ScopeComponent:
	      {

	        return;
	      }

	    default:
	      {
	        recursivelyTraverseMutationEffects(root, finishedWork);
	        commitReconciliationEffects(finishedWork);
	        return;
	      }
	  }
	}

	function commitReconciliationEffects(finishedWork) {
	  // Placement effects (insertions, reorders) can be scheduled on any fiber
	  // type. They needs to happen after the children effects have fired, but
	  // before the effects on this fiber have fired.
	  var flags = finishedWork.flags;

	  if (flags & Placement) {
	    try {
	      commitPlacement(finishedWork);
	    } catch (error) {
	      captureCommitPhaseError(finishedWork, finishedWork.return, error);
	    } // Clear the "placement" from effect tag so that we know that this is
	    // inserted, before any life-cycles like componentDidMount gets called.
	    // TODO: findDOMNode doesn't rely on this any more but isMounted does
	    // and isMounted is deprecated anyway so we should be able to kill this.


	    finishedWork.flags &= ~Placement;
	  }

	  if (flags & Hydrating) {
	    finishedWork.flags &= ~Hydrating;
	  }
	}

	function commitLayoutEffects(finishedWork, root, committedLanes) {
	  inProgressLanes = committedLanes;
	  inProgressRoot = root;
	  nextEffect = finishedWork;
	  commitLayoutEffects_begin(finishedWork, root, committedLanes);
	  inProgressLanes = null;
	  inProgressRoot = null;
	}

	function commitLayoutEffects_begin(subtreeRoot, root, committedLanes) {
	  // Suspense layout effects semantics don't change for legacy roots.
	  var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;

	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var firstChild = fiber.child;

	    if ( fiber.tag === OffscreenComponent && isModernRoot) {
	      // Keep track of the current Offscreen stack's state.
	      var isHidden = fiber.memoizedState !== null;
	      var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;

	      if (newOffscreenSubtreeIsHidden) {
	        // The Offscreen tree is hidden. Skip over its layout effects.
	        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
	        continue;
	      } else {
	        // TODO (Offscreen) Also check: subtreeFlags & LayoutMask
	        var current = fiber.alternate;
	        var wasHidden = current !== null && current.memoizedState !== null;
	        var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
	        var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
	        var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden; // Traverse the Offscreen subtree with the current Offscreen as the root.

	        offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
	        offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;

	        if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
	          // This is the root of a reappearing boundary. Turn its layout effects
	          // back on.
	          nextEffect = fiber;
	          reappearLayoutEffects_begin(fiber);
	        }

	        var child = firstChild;

	        while (child !== null) {
	          nextEffect = child;
	          commitLayoutEffects_begin(child, // New root; bubble back up to here and stop.
	          root, committedLanes);
	          child = child.sibling;
	        } // Restore Offscreen state and resume in our-progress traversal.


	        nextEffect = fiber;
	        offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
	        offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
	        commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
	        continue;
	      }
	    }

	    if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
	      firstChild.return = fiber;
	      nextEffect = firstChild;
	    } else {
	      commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes);
	    }
	  }
	}

	function commitLayoutMountEffects_complete(subtreeRoot, root, committedLanes) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;

	    if ((fiber.flags & LayoutMask) !== NoFlags) {
	      var current = fiber.alternate;
	      setCurrentFiber(fiber);

	      try {
	        commitLayoutEffectOnFiber(root, current, fiber, committedLanes);
	      } catch (error) {
	        captureCommitPhaseError(fiber, fiber.return, error);
	      }

	      resetCurrentFiber();
	    }

	    if (fiber === subtreeRoot) {
	      nextEffect = null;
	      return;
	    }

	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function disappearLayoutEffects_begin(subtreeRoot) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var firstChild = fiber.child; // TODO (Offscreen) Check: flags & (RefStatic | LayoutStatic)

	    switch (fiber.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case MemoComponent:
	      case SimpleMemoComponent:
	        {
	          if ( fiber.mode & ProfileMode) {
	            try {
	              startLayoutEffectTimer();
	              commitHookEffectListUnmount(Layout, fiber, fiber.return);
	            } finally {
	              recordLayoutEffectDuration(fiber);
	            }
	          } else {
	            commitHookEffectListUnmount(Layout, fiber, fiber.return);
	          }

	          break;
	        }

	      case ClassComponent:
	        {
	          // TODO (Offscreen) Check: flags & RefStatic
	          safelyDetachRef(fiber, fiber.return);
	          var instance = fiber.stateNode;

	          if (typeof instance.componentWillUnmount === 'function') {
	            safelyCallComponentWillUnmount(fiber, fiber.return, instance);
	          }

	          break;
	        }

	      case HostComponent:
	        {
	          safelyDetachRef(fiber, fiber.return);
	          break;
	        }

	      case OffscreenComponent:
	        {
	          // Check if this is a
	          var isHidden = fiber.memoizedState !== null;

	          if (isHidden) {
	            // Nested Offscreen tree is already hidden. Don't disappear
	            // its effects.
	            disappearLayoutEffects_complete(subtreeRoot);
	            continue;
	          }

	          break;
	        }
	    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic


	    if (firstChild !== null) {
	      firstChild.return = fiber;
	      nextEffect = firstChild;
	    } else {
	      disappearLayoutEffects_complete(subtreeRoot);
	    }
	  }
	}

	function disappearLayoutEffects_complete(subtreeRoot) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;

	    if (fiber === subtreeRoot) {
	      nextEffect = null;
	      return;
	    }

	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function reappearLayoutEffects_begin(subtreeRoot) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var firstChild = fiber.child;

	    if (fiber.tag === OffscreenComponent) {
	      var isHidden = fiber.memoizedState !== null;

	      if (isHidden) {
	        // Nested Offscreen tree is still hidden. Don't re-appear its effects.
	        reappearLayoutEffects_complete(subtreeRoot);
	        continue;
	      }
	    } // TODO (Offscreen) Check: subtreeFlags & LayoutStatic


	    if (firstChild !== null) {
	      // This node may have been reused from a previous render, so we can't
	      // assume its return pointer is correct.
	      firstChild.return = fiber;
	      nextEffect = firstChild;
	    } else {
	      reappearLayoutEffects_complete(subtreeRoot);
	    }
	  }
	}

	function reappearLayoutEffects_complete(subtreeRoot) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect; // TODO (Offscreen) Check: flags & LayoutStatic

	    setCurrentFiber(fiber);

	    try {
	      reappearLayoutEffectsOnFiber(fiber);
	    } catch (error) {
	      captureCommitPhaseError(fiber, fiber.return, error);
	    }

	    resetCurrentFiber();

	    if (fiber === subtreeRoot) {
	      nextEffect = null;
	      return;
	    }

	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      // This node may have been reused from a previous render, so we can't
	      // assume its return pointer is correct.
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function commitPassiveMountEffects(root, finishedWork, committedLanes, committedTransitions) {
	  nextEffect = finishedWork;
	  commitPassiveMountEffects_begin(finishedWork, root, committedLanes, committedTransitions);
	}

	function commitPassiveMountEffects_begin(subtreeRoot, root, committedLanes, committedTransitions) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var firstChild = fiber.child;

	    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
	      firstChild.return = fiber;
	      nextEffect = firstChild;
	    } else {
	      commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions);
	    }
	  }
	}

	function commitPassiveMountEffects_complete(subtreeRoot, root, committedLanes, committedTransitions) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;

	    if ((fiber.flags & Passive) !== NoFlags) {
	      setCurrentFiber(fiber);

	      try {
	        commitPassiveMountOnFiber(root, fiber, committedLanes, committedTransitions);
	      } catch (error) {
	        captureCommitPhaseError(fiber, fiber.return, error);
	      }

	      resetCurrentFiber();
	    }

	    if (fiber === subtreeRoot) {
	      nextEffect = null;
	      return;
	    }

	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        if ( finishedWork.mode & ProfileMode) {
	          startPassiveEffectTimer();

	          try {
	            commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
	          } finally {
	            recordPassiveEffectDuration(finishedWork);
	          }
	        } else {
	          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
	        }

	        break;
	      }
	  }
	}

	function commitPassiveUnmountEffects(firstChild) {
	  nextEffect = firstChild;
	  commitPassiveUnmountEffects_begin();
	}

	function commitPassiveUnmountEffects_begin() {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var child = fiber.child;

	    if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
	      var deletions = fiber.deletions;

	      if (deletions !== null) {
	        for (var i = 0; i < deletions.length; i++) {
	          var fiberToDelete = deletions[i];
	          nextEffect = fiberToDelete;
	          commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
	        }

	        {
	          // A fiber was deleted from this parent fiber, but it's still part of
	          // the previous (alternate) parent fiber's list of children. Because
	          // children are a linked list, an earlier sibling that's still alive
	          // will be connected to the deleted fiber via its `alternate`:
	          //
	          //   live fiber
	          //   --alternate--> previous live fiber
	          //   --sibling--> deleted fiber
	          //
	          // We can't disconnect `alternate` on nodes that haven't been deleted
	          // yet, but we can disconnect the `sibling` and `child` pointers.
	          var previousFiber = fiber.alternate;

	          if (previousFiber !== null) {
	            var detachedChild = previousFiber.child;

	            if (detachedChild !== null) {
	              previousFiber.child = null;

	              do {
	                var detachedSibling = detachedChild.sibling;
	                detachedChild.sibling = null;
	                detachedChild = detachedSibling;
	              } while (detachedChild !== null);
	            }
	          }
	        }

	        nextEffect = fiber;
	      }
	    }

	    if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
	      child.return = fiber;
	      nextEffect = child;
	    } else {
	      commitPassiveUnmountEffects_complete();
	    }
	  }
	}

	function commitPassiveUnmountEffects_complete() {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;

	    if ((fiber.flags & Passive) !== NoFlags) {
	      setCurrentFiber(fiber);
	      commitPassiveUnmountOnFiber(fiber);
	      resetCurrentFiber();
	    }

	    var sibling = fiber.sibling;

	    if (sibling !== null) {
	      sibling.return = fiber.return;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = fiber.return;
	  }
	}

	function commitPassiveUnmountOnFiber(finishedWork) {
	  switch (finishedWork.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        if ( finishedWork.mode & ProfileMode) {
	          startPassiveEffectTimer();
	          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
	          recordPassiveEffectDuration(finishedWork);
	        } else {
	          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
	        }

	        break;
	      }
	  }
	}

	function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect; // Deletion effects fire in parent -> child order
	    // TODO: Check if fiber has a PassiveStatic flag

	    setCurrentFiber(fiber);
	    commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
	    resetCurrentFiber();
	    var child = fiber.child; // TODO: Only traverse subtree if it has a PassiveStatic flag. (But, if we
	    // do this, still need to handle `deletedTreeCleanUpLevel` correctly.)

	    if (child !== null) {
	      child.return = fiber;
	      nextEffect = child;
	    } else {
	      commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
	    }
	  }
	}

	function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
	  while (nextEffect !== null) {
	    var fiber = nextEffect;
	    var sibling = fiber.sibling;
	    var returnFiber = fiber.return;

	    {
	      // Recursively traverse the entire deleted tree and clean up fiber fields.
	      // This is more aggressive than ideal, and the long term goal is to only
	      // have to detach the deleted tree at the root.
	      detachFiberAfterEffects(fiber);

	      if (fiber === deletedSubtreeRoot) {
	        nextEffect = null;
	        return;
	      }
	    }

	    if (sibling !== null) {
	      sibling.return = returnFiber;
	      nextEffect = sibling;
	      return;
	    }

	    nextEffect = returnFiber;
	  }
	}

	function commitPassiveUnmountInsideDeletedTreeOnFiber(current, nearestMountedAncestor) {
	  switch (current.tag) {
	    case FunctionComponent:
	    case ForwardRef:
	    case SimpleMemoComponent:
	      {
	        if ( current.mode & ProfileMode) {
	          startPassiveEffectTimer();
	          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
	          recordPassiveEffectDuration(current);
	        } else {
	          commitHookEffectListUnmount(Passive$1, current, nearestMountedAncestor);
	        }

	        break;
	      }
	  }
	} // TODO: Reuse reappearLayoutEffects traversal here?


	function invokeLayoutEffectMountInDEV(fiber) {
	  {
	    // We don't need to re-check StrictEffectsMode here.
	    // This function is only called if that check has already passed.
	    switch (fiber.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          try {
	            commitHookEffectListMount(Layout | HasEffect, fiber);
	          } catch (error) {
	            captureCommitPhaseError(fiber, fiber.return, error);
	          }

	          break;
	        }

	      case ClassComponent:
	        {
	          var instance = fiber.stateNode;

	          try {
	            instance.componentDidMount();
	          } catch (error) {
	            captureCommitPhaseError(fiber, fiber.return, error);
	          }

	          break;
	        }
	    }
	  }
	}

	function invokePassiveEffectMountInDEV(fiber) {
	  {
	    // We don't need to re-check StrictEffectsMode here.
	    // This function is only called if that check has already passed.
	    switch (fiber.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          try {
	            commitHookEffectListMount(Passive$1 | HasEffect, fiber);
	          } catch (error) {
	            captureCommitPhaseError(fiber, fiber.return, error);
	          }

	          break;
	        }
	    }
	  }
	}

	function invokeLayoutEffectUnmountInDEV(fiber) {
	  {
	    // We don't need to re-check StrictEffectsMode here.
	    // This function is only called if that check has already passed.
	    switch (fiber.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          try {
	            commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
	          } catch (error) {
	            captureCommitPhaseError(fiber, fiber.return, error);
	          }

	          break;
	        }

	      case ClassComponent:
	        {
	          var instance = fiber.stateNode;

	          if (typeof instance.componentWillUnmount === 'function') {
	            safelyCallComponentWillUnmount(fiber, fiber.return, instance);
	          }

	          break;
	        }
	    }
	  }
	}

	function invokePassiveEffectUnmountInDEV(fiber) {
	  {
	    // We don't need to re-check StrictEffectsMode here.
	    // This function is only called if that check has already passed.
	    switch (fiber.tag) {
	      case FunctionComponent:
	      case ForwardRef:
	      case SimpleMemoComponent:
	        {
	          try {
	            commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
	          } catch (error) {
	            captureCommitPhaseError(fiber, fiber.return, error);
	          }
	        }
	    }
	  }
	}

	var COMPONENT_TYPE = 0;
	var HAS_PSEUDO_CLASS_TYPE = 1;
	var ROLE_TYPE = 2;
	var TEST_NAME_TYPE = 3;
	var TEXT_TYPE = 4;

	if (typeof Symbol === 'function' && Symbol.for) {
	  var symbolFor = Symbol.for;
	  COMPONENT_TYPE = symbolFor('selector.component');
	  HAS_PSEUDO_CLASS_TYPE = symbolFor('selector.has_pseudo_class');
	  ROLE_TYPE = symbolFor('selector.role');
	  TEST_NAME_TYPE = symbolFor('selector.test_id');
	  TEXT_TYPE = symbolFor('selector.text');
	}

	function createComponentSelector(component) {
	  return {
	    $$typeof: COMPONENT_TYPE,
	    value: component
	  };
	}
	function createHasPseudoClassSelector(selectors) {
	  return {
	    $$typeof: HAS_PSEUDO_CLASS_TYPE,
	    value: selectors
	  };
	}
	function createRoleSelector(role) {
	  return {
	    $$typeof: ROLE_TYPE,
	    value: role
	  };
	}
	function createTextSelector(text) {
	  return {
	    $$typeof: TEXT_TYPE,
	    value: text
	  };
	}
	function createTestNameSelector(id) {
	  return {
	    $$typeof: TEST_NAME_TYPE,
	    value: id
	  };
	}

	function findFiberRootForHostRoot(hostRoot) {
	  var maybeFiber = getInstanceFromNode(hostRoot);

	  if (maybeFiber != null) {
	    if (typeof maybeFiber.memoizedProps['data-testname'] !== 'string') {
	      throw new Error('Invalid host root specified. Should be either a React container or a node with a testname attribute.');
	    }

	    return maybeFiber;
	  } else {
	    var fiberRoot = findFiberRoot(hostRoot);

	    if (fiberRoot === null) {
	      throw new Error('Could not find React container within specified host subtree.');
	    } // The Flow type for FiberRoot is a little funky.
	    // createFiberRoot() cheats this by treating the root as :any and adding stateNode lazily.


	    return fiberRoot.stateNode.current;
	  }
	}

	function matchSelector(fiber, selector) {
	  switch (selector.$$typeof) {
	    case COMPONENT_TYPE:
	      if (fiber.type === selector.value) {
	        return true;
	      }

	      break;

	    case HAS_PSEUDO_CLASS_TYPE:
	      return hasMatchingPaths(fiber, selector.value);

	    case ROLE_TYPE:
	      if (fiber.tag === HostComponent) {
	        var node = fiber.stateNode;

	        if (matchAccessibilityRole(node, selector.value)) {
	          return true;
	        }
	      }

	      break;

	    case TEXT_TYPE:
	      if (fiber.tag === HostComponent || fiber.tag === HostText) {
	        var textContent = getTextContent(fiber);

	        if (textContent !== null && textContent.indexOf(selector.value) >= 0) {
	          return true;
	        }
	      }

	      break;

	    case TEST_NAME_TYPE:
	      if (fiber.tag === HostComponent) {
	        var dataTestID = fiber.memoizedProps['data-testname'];

	        if (typeof dataTestID === 'string' && dataTestID.toLowerCase() === selector.value.toLowerCase()) {
	          return true;
	        }
	      }

	      break;

	    default:
	      throw new Error('Invalid selector type specified.');
	  }

	  return false;
	}

	function selectorToString(selector) {
	  switch (selector.$$typeof) {
	    case COMPONENT_TYPE:
	      var displayName = getComponentNameFromType(selector.value) || 'Unknown';
	      return "<" + displayName + ">";

	    case HAS_PSEUDO_CLASS_TYPE:
	      return ":has(" + (selectorToString(selector) || '') + ")";

	    case ROLE_TYPE:
	      return "[role=\"" + selector.value + "\"]";

	    case TEXT_TYPE:
	      return "\"" + selector.value + "\"";

	    case TEST_NAME_TYPE:
	      return "[data-testname=\"" + selector.value + "\"]";

	    default:
	      throw new Error('Invalid selector type specified.');
	  }
	}

	function findPaths(root, selectors) {
	  var matchingFibers = [];
	  var stack = [root, 0];
	  var index = 0;

	  while (index < stack.length) {
	    var fiber = stack[index++];
	    var selectorIndex = stack[index++];
	    var selector = selectors[selectorIndex];

	    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {
	      continue;
	    } else {
	      while (selector != null && matchSelector(fiber, selector)) {
	        selectorIndex++;
	        selector = selectors[selectorIndex];
	      }
	    }

	    if (selectorIndex === selectors.length) {
	      matchingFibers.push(fiber);
	    } else {
	      var child = fiber.child;

	      while (child !== null) {
	        stack.push(child, selectorIndex);
	        child = child.sibling;
	      }
	    }
	  }

	  return matchingFibers;
	} // Same as findPaths but with eager bailout on first match


	function hasMatchingPaths(root, selectors) {
	  var stack = [root, 0];
	  var index = 0;

	  while (index < stack.length) {
	    var fiber = stack[index++];
	    var selectorIndex = stack[index++];
	    var selector = selectors[selectorIndex];

	    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {
	      continue;
	    } else {
	      while (selector != null && matchSelector(fiber, selector)) {
	        selectorIndex++;
	        selector = selectors[selectorIndex];
	      }
	    }

	    if (selectorIndex === selectors.length) {
	      return true;
	    } else {
	      var child = fiber.child;

	      while (child !== null) {
	        stack.push(child, selectorIndex);
	        child = child.sibling;
	      }
	    }
	  }

	  return false;
	}

	function findAllNodes(hostRoot, selectors) {
	  if (!supportsTestSelectors) {
	    throw new Error('Test selector API is not supported by this renderer.');
	  }

	  var root = findFiberRootForHostRoot(hostRoot);
	  var matchingFibers = findPaths(root, selectors);
	  var instanceRoots = [];
	  var stack = Array.from(matchingFibers);
	  var index = 0;

	  while (index < stack.length) {
	    var node = stack[index++];

	    if (node.tag === HostComponent) {
	      if (isHiddenSubtree(node)) {
	        continue;
	      }

	      instanceRoots.push(node.stateNode);
	    } else {
	      var child = node.child;

	      while (child !== null) {
	        stack.push(child);
	        child = child.sibling;
	      }
	    }
	  }

	  return instanceRoots;
	}
	function getFindAllNodesFailureDescription(hostRoot, selectors) {
	  if (!supportsTestSelectors) {
	    throw new Error('Test selector API is not supported by this renderer.');
	  }

	  var root = findFiberRootForHostRoot(hostRoot);
	  var maxSelectorIndex = 0;
	  var matchedNames = []; // The logic of this loop should be kept in sync with findPaths()

	  var stack = [root, 0];
	  var index = 0;

	  while (index < stack.length) {
	    var fiber = stack[index++];
	    var selectorIndex = stack[index++];
	    var selector = selectors[selectorIndex];

	    if (fiber.tag === HostComponent && isHiddenSubtree(fiber)) {
	      continue;
	    } else if (matchSelector(fiber, selector)) {
	      matchedNames.push(selectorToString(selector));
	      selectorIndex++;

	      if (selectorIndex > maxSelectorIndex) {
	        maxSelectorIndex = selectorIndex;
	      }
	    }

	    if (selectorIndex < selectors.length) {
	      var child = fiber.child;

	      while (child !== null) {
	        stack.push(child, selectorIndex);
	        child = child.sibling;
	      }
	    }
	  }

	  if (maxSelectorIndex < selectors.length) {
	    var unmatchedNames = [];

	    for (var i = maxSelectorIndex; i < selectors.length; i++) {
	      unmatchedNames.push(selectorToString(selectors[i]));
	    }

	    return 'findAllNodes was able to match part of the selector:\n' + ("  " + matchedNames.join(' > ') + "\n\n") + 'No matching component was found for:\n' + ("  " + unmatchedNames.join(' > '));
	  }

	  return null;
	}
	function findBoundingRects(hostRoot, selectors) {
	  if (!supportsTestSelectors) {
	    throw new Error('Test selector API is not supported by this renderer.');
	  }

	  var instanceRoots = findAllNodes(hostRoot, selectors);
	  var boundingRects = [];

	  for (var i = 0; i < instanceRoots.length; i++) {
	    boundingRects.push(getBoundingRect(instanceRoots[i]));
	  }

	  for (var _i = boundingRects.length - 1; _i > 0; _i--) {
	    var targetRect = boundingRects[_i];
	    var targetLeft = targetRect.x;
	    var targetRight = targetLeft + targetRect.width;
	    var targetTop = targetRect.y;
	    var targetBottom = targetTop + targetRect.height;

	    for (var j = _i - 1; j >= 0; j--) {
	      if (_i !== j) {
	        var otherRect = boundingRects[j];
	        var otherLeft = otherRect.x;
	        var otherRight = otherLeft + otherRect.width;
	        var otherTop = otherRect.y;
	        var otherBottom = otherTop + otherRect.height; // Merging all rects to the minimums set would be complicated,
	        // but we can handle the most common cases:
	        // 1. completely overlapping rects
	        // 2. adjacent rects that are the same width or height (e.g. items in a list)
	        //
	        // Even given the above constraints,
	        // we still won't end up with the fewest possible rects without doing multiple passes,
	        // but it's good enough for this purpose.

	        if (targetLeft >= otherLeft && targetTop >= otherTop && targetRight <= otherRight && targetBottom <= otherBottom) {
	          // Complete overlapping rects; remove the inner one.
	          boundingRects.splice(_i, 1);
	          break;
	        } else if (targetLeft === otherLeft && targetRect.width === otherRect.width && !(otherBottom < targetTop) && !(otherTop > targetBottom)) {
	          // Adjacent vertical rects; merge them.
	          if (otherTop > targetTop) {
	            otherRect.height += otherTop - targetTop;
	            otherRect.y = targetTop;
	          }

	          if (otherBottom < targetBottom) {
	            otherRect.height = targetBottom - otherTop;
	          }

	          boundingRects.splice(_i, 1);
	          break;
	        } else if (targetTop === otherTop && targetRect.height === otherRect.height && !(otherRight < targetLeft) && !(otherLeft > targetRight)) {
	          // Adjacent horizontal rects; merge them.
	          if (otherLeft > targetLeft) {
	            otherRect.width += otherLeft - targetLeft;
	            otherRect.x = targetLeft;
	          }

	          if (otherRight < targetRight) {
	            otherRect.width = targetRight - otherLeft;
	          }

	          boundingRects.splice(_i, 1);
	          break;
	        }
	      }
	    }
	  }

	  return boundingRects;
	}
	function focusWithin(hostRoot, selectors) {
	  if (!supportsTestSelectors) {
	    throw new Error('Test selector API is not supported by this renderer.');
	  }

	  var root = findFiberRootForHostRoot(hostRoot);
	  var matchingFibers = findPaths(root, selectors);
	  var stack = Array.from(matchingFibers);
	  var index = 0;

	  while (index < stack.length) {
	    var fiber = stack[index++];

	    if (isHiddenSubtree(fiber)) {
	      continue;
	    }

	    if (fiber.tag === HostComponent) {
	      var node = fiber.stateNode;

	      if (setFocusIfFocusable(node)) {
	        return true;
	      }
	    }

	    var child = fiber.child;

	    while (child !== null) {
	      stack.push(child);
	      child = child.sibling;
	    }
	  }

	  return false;
	}
	var commitHooks = [];
	function onCommitRoot$1() {
	  if (supportsTestSelectors) {
	    commitHooks.forEach(function (commitHook) {
	      return commitHook();
	    });
	  }
	}
	function observeVisibleRects(hostRoot, selectors, callback, options) {
	  if (!supportsTestSelectors) {
	    throw new Error('Test selector API is not supported by this renderer.');
	  }

	  var instanceRoots = findAllNodes(hostRoot, selectors);

	  var _setupIntersectionObs = setupIntersectionObserver(instanceRoots, callback, options),
	      disconnect = _setupIntersectionObs.disconnect,
	      observe = _setupIntersectionObs.observe,
	      unobserve = _setupIntersectionObs.unobserve; // When React mutates the host environment, we may need to change what we're listening to.


	  var commitHook = function () {
	    var nextInstanceRoots = findAllNodes(hostRoot, selectors);
	    instanceRoots.forEach(function (target) {
	      if (nextInstanceRoots.indexOf(target) < 0) {
	        unobserve(target);
	      }
	    });
	    nextInstanceRoots.forEach(function (target) {
	      if (instanceRoots.indexOf(target) < 0) {
	        observe(target);
	      }
	    });
	  };

	  commitHooks.push(commitHook);
	  return {
	    disconnect: function () {
	      // Stop listening for React mutations:
	      var index = commitHooks.indexOf(commitHook);

	      if (index >= 0) {
	        commitHooks.splice(index, 1);
	      } // Disconnect the host observer:


	      disconnect();
	    }
	  };
	}

	var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
	function isLegacyActEnvironment(fiber) {
	  {
	    // Legacy mode. We preserve the behavior of React 17's act. It assumes an
	    // act environment whenever `jest` is defined, but you can still turn off
	    // spurious warnings by setting IS_REACT_ACT_ENVIRONMENT explicitly
	    // to false.
	    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
	    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined; // $FlowExpectedError - Flow doesn't know about jest

	    var jestIsDefined = typeof jest !== 'undefined';
	    return warnsIfNotActing && jestIsDefined && isReactActEnvironmentGlobal !== false;
	  }
	}
	function isConcurrentActEnvironment() {
	  {
	    var isReactActEnvironmentGlobal = // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
	    typeof IS_REACT_ACT_ENVIRONMENT !== 'undefined' ? IS_REACT_ACT_ENVIRONMENT : undefined;

	    if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
	      // TODO: Include link to relevant documentation page.
	      error('The current testing environment is not configured to support ' + 'act(...)');
	    }

	    return isReactActEnvironmentGlobal;
	  }
	}

	var ceil = Math.ceil;
	var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
	    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
	    ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig,
	    ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
	var NoContext =
	/*             */
	0;
	var BatchedContext =
	/*               */
	1;
	var RenderContext =
	/*                */
	2;
	var CommitContext =
	/*                */
	4;
	var RootInProgress = 0;
	var RootFatalErrored = 1;
	var RootErrored = 2;
	var RootSuspended = 3;
	var RootSuspendedWithDelay = 4;
	var RootCompleted = 5;
	var RootDidNotComplete = 6; // Describes where we are in the React execution stack

	var executionContext = NoContext; // The root we're working on

	var workInProgressRoot = null; // The fiber we're working on

	var workInProgress = null; // The lanes we're rendering

	var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
	// This is a superset of the lanes we started working on at the root. The only
	// case where it's different from `workInProgressRootRenderLanes` is when we
	// enter a subtree that is hidden and needs to be unhidden: Suspense and
	// Offscreen component.
	//
	// Most things in the work loop should deal with workInProgressRootRenderLanes.
	// Most things in begin/complete phases should deal with subtreeRenderLanes.

	var subtreeRenderLanes = NoLanes;
	var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.

	var workInProgressRootExitStatus = RootInProgress; // A fatal error, if one is thrown

	var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
	// includes unprocessed updates, not work in bailed out children.

	var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.

	var workInProgressRootInterleavedUpdatedLanes = NoLanes; // Lanes that were updated during the render phase (*not* an interleaved event).

	var workInProgressRootPingedLanes = NoLanes; // Errors that are thrown during the render phase.

	var workInProgressRootConcurrentErrors = null; // These are errors that we recovered from without surfacing them to the UI.
	// We will log them once the tree commits.

	var workInProgressRootRecoverableErrors = null; // The most recent time we committed a fallback. This lets us ensure a train
	// model where we don't commit new loading states in too quick succession.

	var globalMostRecentFallbackTime = 0;
	var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
	// more and prefer CPU suspense heuristics instead.

	var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
	// suspense heuristics and opt out of rendering more content.

	var RENDER_TIMEOUT_MS = 500;
	var workInProgressTransitions = null;

	function resetRenderTimer() {
	  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
	}

	function getRenderTargetTime() {
	  return workInProgressRootRenderTargetTime;
	}
	var hasUncaughtError = false;
	var firstUncaughtError = null;
	var legacyErrorBoundariesThatAlreadyFailed = null; // Only used when enableProfilerNestedUpdateScheduledHook is true;
	var rootDoesHavePassiveEffects = false;
	var rootWithPendingPassiveEffects = null;
	var pendingPassiveEffectsLanes = NoLanes;
	var pendingPassiveProfilerEffects = [];
	var pendingPassiveTransitions = null; // Use these to prevent an infinite loop of nested updates

	var NESTED_UPDATE_LIMIT = 50;
	var nestedUpdateCount = 0;
	var rootWithNestedUpdates = null;
	var isFlushingPassiveEffects = false;
	var didScheduleUpdateDuringPassiveEffects = false;
	var NESTED_PASSIVE_UPDATE_LIMIT = 50;
	var nestedPassiveUpdateCount = 0;
	var rootWithPassiveNestedUpdates = null; // If two updates are scheduled within the same event, we should treat their
	// event times as simultaneous, even if the actual clock time has advanced
	// between the first and second call.

	var currentEventTime = NoTimestamp;
	var currentEventTransitionLane = NoLanes;
	var isRunningInsertionEffect = false;
	function getWorkInProgressRoot() {
	  return workInProgressRoot;
	}
	function requestEventTime() {
	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    // We're inside React, so it's fine to read the actual time.
	    return now();
	  } // We're not inside React, so we may be in the middle of a browser event.


	  if (currentEventTime !== NoTimestamp) {
	    // Use the same start time for all updates until we enter React again.
	    return currentEventTime;
	  } // This is the first update since React yielded. Compute a new start time.


	  currentEventTime = now();
	  return currentEventTime;
	}
	function requestUpdateLane(fiber) {
	  // Special cases
	  var mode = fiber.mode;

	  if ((mode & ConcurrentMode) === NoMode) {
	    return SyncLane;
	  } else if ( (executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
	    // This is a render phase update. These are not officially supported. The
	    // old behavior is to give this the same "thread" (lanes) as
	    // whatever is currently rendering. So if you call `setState` on a component
	    // that happens later in the same render, it will flush. Ideally, we want to
	    // remove the special case and treat them as if they came from an
	    // interleaved event. Regardless, this pattern is not officially supported.
	    // This behavior is only a fallback. The flag only exists until we can roll
	    // out the setState warning, since existing code might accidentally rely on
	    // the current behavior.
	    return pickArbitraryLane(workInProgressRootRenderLanes);
	  }

	  var isTransition = requestCurrentTransition() !== NoTransition;

	  if (isTransition) {
	    if ( ReactCurrentBatchConfig$2.transition !== null) {
	      var transition = ReactCurrentBatchConfig$2.transition;

	      if (!transition._updatedFibers) {
	        transition._updatedFibers = new Set();
	      }

	      transition._updatedFibers.add(fiber);
	    } // The algorithm for assigning an update to a lane should be stable for all
	    // updates at the same priority within the same event. To do this, the
	    // inputs to the algorithm must be the same.
	    //
	    // The trick we use is to cache the first of each of these inputs within an
	    // event. Then reset the cached values once we can be sure the event is
	    // over. Our heuristic for that is whenever we enter a concurrent work loop.


	    if (currentEventTransitionLane === NoLane) {
	      // All transitions within the same event are assigned the same lane.
	      currentEventTransitionLane = claimNextTransitionLane();
	    }

	    return currentEventTransitionLane;
	  } // Updates originating inside certain React methods, like flushSync, have
	  // their priority set by tracking it with a context variable.
	  //
	  // The opaque type returned by the host config is internally a lane, so we can
	  // use that directly.
	  // TODO: Move this type conversion to the event priority module.


	  var updateLane = getCurrentUpdatePriority();

	  if (updateLane !== NoLane) {
	    return updateLane;
	  } // This update originated outside React. Ask the host environment for an
	  // appropriate priority, based on the type of event.
	  //
	  // The opaque type returned by the host config is internally a lane, so we can
	  // use that directly.
	  // TODO: Move this type conversion to the event priority module.


	  var eventLane = getCurrentEventPriority();
	  return eventLane;
	}

	function requestRetryLane(fiber) {
	  // This is a fork of `requestUpdateLane` designed specifically for Suspense
	  // "retries" — a special update that attempts to flip a Suspense boundary
	  // from its placeholder state to its primary/resolved state.
	  // Special cases
	  var mode = fiber.mode;

	  if ((mode & ConcurrentMode) === NoMode) {
	    return SyncLane;
	  }

	  return claimNextRetryLane();
	}

	function scheduleUpdateOnFiber(root, fiber, lane, eventTime) {
	  checkForNestedUpdates();

	  {
	    if (isRunningInsertionEffect) {
	      error('useInsertionEffect must not schedule updates.');
	    }
	  }

	  {
	    if (isFlushingPassiveEffects) {
	      didScheduleUpdateDuringPassiveEffects = true;
	    }
	  } // Mark that the root has a pending update.


	  markRootUpdated(root, lane, eventTime);

	  if ((executionContext & RenderContext) !== NoLanes && root === workInProgressRoot) {
	    // This update was dispatched during the render phase. This is a mistake
	    // if the update originates from user space (with the exception of local
	    // hook updates, which are handled differently and don't reach this
	    // function), but there are some internal React features that use this as
	    // an implementation detail, like selective hydration.
	    warnAboutRenderPhaseUpdatesInDEV(fiber); // Track lanes that were updated during the render phase
	  } else {
	    // This is a normal update, scheduled from outside the render phase. For
	    // example, during an input event.
	    {
	      if (isDevToolsPresent) {
	        addFiberToLanesMap(root, fiber, lane);
	      }
	    }

	    warnIfUpdatesNotWrappedWithActDEV(fiber);

	    if (root === workInProgressRoot) {
	      // Received an update to a tree that's in the middle of rendering. Mark
	      // that there was an interleaved update work on this root. Unless the
	      // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
	      // phase update. In that case, we don't treat render phase updates as if
	      // they were interleaved, for backwards compat reasons.
	      if ( (executionContext & RenderContext) === NoContext) {
	        workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
	      }

	      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
	        // The root already suspended with a delay, which means this render
	        // definitely won't finish. Since we have a new update, let's mark it as
	        // suspended now, right before marking the incoming update. This has the
	        // effect of interrupting the current render and switching to the update.
	        // TODO: Make sure this doesn't override pings that happen while we've
	        // already started rendering.
	        markRootSuspended$1(root, workInProgressRootRenderLanes);
	      }
	    }

	    ensureRootIsScheduled(root, eventTime);

	    if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
	    !( ReactCurrentActQueue$1.isBatchingLegacy)) {
	      // Flush the synchronous work now, unless we're already working or inside
	      // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
	      // scheduleCallbackForFiber to preserve the ability to schedule a callback
	      // without immediately flushing it. We only do this for user-initiated
	      // updates, to preserve historical behavior of legacy mode.
	      resetRenderTimer();
	      flushSyncCallbacksOnlyInLegacyMode();
	    }
	  }
	}
	function scheduleInitialHydrationOnRoot(root, lane, eventTime) {
	  // This is a special fork of scheduleUpdateOnFiber that is only used to
	  // schedule the initial hydration of a root that has just been created. Most
	  // of the stuff in scheduleUpdateOnFiber can be skipped.
	  //
	  // The main reason for this separate path, though, is to distinguish the
	  // initial children from subsequent updates. In fully client-rendered roots
	  // (createRoot instead of hydrateRoot), all top-level renders are modeled as
	  // updates, but hydration roots are special because the initial render must
	  // match what was rendered on the server.
	  var current = root.current;
	  current.lanes = lane;
	  markRootUpdated(root, lane, eventTime);
	  ensureRootIsScheduled(root, eventTime);
	}
	function isUnsafeClassRenderPhaseUpdate(fiber) {
	  // Check if this is a render phase update. Only called by class components,
	  // which special (deprecated) behavior for UNSAFE_componentWillReceive props.
	  return (// TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
	    // decided not to enable it.
	     (executionContext & RenderContext) !== NoContext
	  );
	} // Use this function to schedule a task for a root. There's only one task per
	// root; if a task was already scheduled, we'll check to make sure the priority
	// of the existing task is the same as the priority of the next level that the
	// root has work on. This function is called on every update, and right before
	// exiting a task.

	function ensureRootIsScheduled(root, currentTime) {
	  var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
	  // expired so we know to work on those next.

	  markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.

	  var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

	  if (nextLanes === NoLanes) {
	    // Special case: There's nothing to work on.
	    if (existingCallbackNode !== null) {
	      cancelCallback$1(existingCallbackNode);
	    }

	    root.callbackNode = null;
	    root.callbackPriority = NoLane;
	    return;
	  } // We use the highest priority lane to represent the priority of the callback.


	  var newCallbackPriority = getHighestPriorityLane(nextLanes); // Check if there's an existing task. We may be able to reuse it.

	  var existingCallbackPriority = root.callbackPriority;

	  if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
	  // Scheduler task, rather than an `act` task, cancel it and re-scheduled
	  // on the `act` queue.
	  !( ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
	    {
	      // If we're going to re-use an existing task, it needs to exist.
	      // Assume that discrete update microtasks are non-cancellable and null.
	      // TODO: Temporary until we confirm this warning is not fired.
	      if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
	        error('Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.');
	      }
	    } // The priority hasn't changed. We can reuse the existing task. Exit.


	    return;
	  }

	  if (existingCallbackNode != null) {
	    // Cancel the existing callback. We'll schedule a new one below.
	    cancelCallback$1(existingCallbackNode);
	  } // Schedule a new callback.


	  var newCallbackNode;

	  if (newCallbackPriority === SyncLane) {
	    // Special case: Sync React callbacks are scheduled on a special
	    // internal queue
	    if (root.tag === LegacyRoot) {
	      if ( ReactCurrentActQueue$1.isBatchingLegacy !== null) {
	        ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
	      }

	      scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root));
	    } else {
	      scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
	    }

	    if (supportsMicrotasks) {
	      // Flush the queue in a microtask.
	      if ( ReactCurrentActQueue$1.current !== null) {
	        // Inside `act`, use our internal `act` queue so that these get flushed
	        // at the end of the current scope even when using the sync version
	        // of `act`.
	        ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
	      } else {
	        scheduleMicrotask(function () {
	          // In Safari, appending an iframe forces microtasks to run.
	          // https://github.com/facebook/react/issues/22459
	          // We don't support running callbacks in the middle of render
	          // or commit so we need to check against that.
	          if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
	            // Note that this would still prematurely flush the callbacks
	            // if this happens outside render or commit phase (e.g. in an event).
	            flushSyncCallbacks();
	          }
	        });
	      }
	    } else {
	      // Flush the queue in an Immediate task.
	      scheduleCallback$1(ImmediatePriority, flushSyncCallbacks);
	    }

	    newCallbackNode = null;
	  } else {
	    var schedulerPriorityLevel;

	    switch (lanesToEventPriority(nextLanes)) {
	      case DiscreteEventPriority:
	        schedulerPriorityLevel = ImmediatePriority;
	        break;

	      case ContinuousEventPriority:
	        schedulerPriorityLevel = UserBlockingPriority;
	        break;

	      case DefaultEventPriority:
	        schedulerPriorityLevel = NormalPriority;
	        break;

	      case IdleEventPriority:
	        schedulerPriorityLevel = IdlePriority;
	        break;

	      default:
	        schedulerPriorityLevel = NormalPriority;
	        break;
	    }

	    newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
	  }

	  root.callbackPriority = newCallbackPriority;
	  root.callbackNode = newCallbackNode;
	} // This is the entry point for every concurrent task, i.e. anything that
	// goes through Scheduler.


	function performConcurrentWorkOnRoot(root, didTimeout) {
	  {
	    resetNestedUpdateFlag();
	  } // Since we know we're in a React event, we can clear the current
	  // event time. The next update will compute a new event time.


	  currentEventTime = NoTimestamp;
	  currentEventTransitionLane = NoLanes;

	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    throw new Error('Should not already be working.');
	  } // Flush any pending passive effects before deciding which lanes to work on,
	  // in case they schedule additional work.


	  var originalCallbackNode = root.callbackNode;
	  var didFlushPassiveEffects = flushPassiveEffects();

	  if (didFlushPassiveEffects) {
	    // Something in the passive effect phase may have canceled the current task.
	    // Check if the task node for this root was changed.
	    if (root.callbackNode !== originalCallbackNode) {
	      // The current task was canceled. Exit. We don't need to call
	      // `ensureRootIsScheduled` because the check above implies either that
	      // there's a new task, or that there's no remaining work on this root.
	      return null;
	    }
	  } // Determine the next lanes to work on, using the fields stored
	  // on the root.


	  var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

	  if (lanes === NoLanes) {
	    // Defensive coding. This is never expected to happen.
	    return null;
	  } // We disable time-slicing in some cases: if the work has been CPU-bound
	  // for too long ("expired" work, to prevent starvation), or we're in
	  // sync-updates-by-default mode.
	  // TODO: We only check `didTimeout` defensively, to account for a Scheduler
	  // bug we're still investigating. Once the bug in Scheduler is fixed,
	  // we can remove this, since we track expiration ourselves.


	  var shouldTimeSlice = !includesBlockingLane(root, lanes) && !includesExpiredLane(root, lanes) && ( !didTimeout);
	  var exitStatus = shouldTimeSlice ? renderRootConcurrent(root, lanes) : renderRootSync(root, lanes);

	  if (exitStatus !== RootInProgress) {
	    if (exitStatus === RootErrored) {
	      // If something threw an error, try rendering one more time. We'll
	      // render synchronously to block concurrent data mutations, and we'll
	      // includes all pending updates are included. If it still fails after
	      // the second attempt, we'll give up and commit the resulting tree.
	      var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

	      if (errorRetryLanes !== NoLanes) {
	        lanes = errorRetryLanes;
	        exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
	      }
	    }

	    if (exitStatus === RootFatalErrored) {
	      var fatalError = workInProgressRootFatalError;
	      prepareFreshStack(root, NoLanes);
	      markRootSuspended$1(root, lanes);
	      ensureRootIsScheduled(root, now());
	      throw fatalError;
	    }

	    if (exitStatus === RootDidNotComplete) {
	      // The render unwound without completing the tree. This happens in special
	      // cases where need to exit the current render without producing a
	      // consistent tree or committing.
	      //
	      // This should only happen during a concurrent render, not a discrete or
	      // synchronous update. We should have already checked for this when we
	      // unwound the stack.
	      markRootSuspended$1(root, lanes);
	    } else {
	      // The render completed.
	      // Check if this render may have yielded to a concurrent event, and if so,
	      // confirm that any newly rendered stores are consistent.
	      // TODO: It's possible that even a concurrent render may never have yielded
	      // to the main thread, if it was fast enough, or if it expired. We could
	      // skip the consistency check in that case, too.
	      var renderWasConcurrent = !includesBlockingLane(root, lanes);
	      var finishedWork = root.current.alternate;

	      if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
	        // A store was mutated in an interleaved event. Render again,
	        // synchronously, to block further mutations.
	        exitStatus = renderRootSync(root, lanes); // We need to check again if something threw

	        if (exitStatus === RootErrored) {
	          var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

	          if (_errorRetryLanes !== NoLanes) {
	            lanes = _errorRetryLanes;
	            exitStatus = recoverFromConcurrentError(root, _errorRetryLanes); // We assume the tree is now consistent because we didn't yield to any
	            // concurrent events.
	          }
	        }

	        if (exitStatus === RootFatalErrored) {
	          var _fatalError = workInProgressRootFatalError;
	          prepareFreshStack(root, NoLanes);
	          markRootSuspended$1(root, lanes);
	          ensureRootIsScheduled(root, now());
	          throw _fatalError;
	        }
	      } // We now have a consistent tree. The next step is either to commit it,
	      // or, if something suspended, wait to commit it after a timeout.


	      root.finishedWork = finishedWork;
	      root.finishedLanes = lanes;
	      finishConcurrentRender(root, exitStatus, lanes);
	    }
	  }

	  ensureRootIsScheduled(root, now());

	  if (root.callbackNode === originalCallbackNode) {
	    // The task node scheduled for this root is the same one that's
	    // currently executed. Need to return a continuation.
	    return performConcurrentWorkOnRoot.bind(null, root);
	  }

	  return null;
	}

	function recoverFromConcurrentError(root, errorRetryLanes) {
	  // If an error occurred during hydration, discard server response and fall
	  // back to client side render.
	  // Before rendering again, save the errors from the previous attempt.
	  var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;

	  if (isRootDehydrated(root)) {
	    // The shell failed to hydrate. Set a flag to force a client rendering
	    // during the next attempt. To do this, we call prepareFreshStack now
	    // to create the root work-in-progress fiber. This is a bit weird in terms
	    // of factoring, because it relies on renderRootSync not calling
	    // prepareFreshStack again in the call below, which happens because the
	    // root and lanes haven't changed.
	    //
	    // TODO: I think what we should do is set ForceClientRender inside
	    // throwException, like we do for nested Suspense boundaries. The reason
	    // it's here instead is so we can switch to the synchronous work loop, too.
	    // Something to consider for a future refactor.
	    var rootWorkInProgress = prepareFreshStack(root, errorRetryLanes);
	    rootWorkInProgress.flags |= ForceClientRender;

	    {
	      errorHydratingContainer(root.containerInfo);
	    }
	  }

	  var exitStatus = renderRootSync(root, errorRetryLanes);

	  if (exitStatus !== RootErrored) {
	    // Successfully finished rendering on retry
	    // The errors from the failed first attempt have been recovered. Add
	    // them to the collection of recoverable errors. We'll log them in the
	    // commit phase.
	    var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
	    workInProgressRootRecoverableErrors = errorsFromFirstAttempt; // The errors from the second attempt should be queued after the errors
	    // from the first attempt, to preserve the causal sequence.

	    if (errorsFromSecondAttempt !== null) {
	      queueRecoverableErrors(errorsFromSecondAttempt);
	    }
	  }

	  return exitStatus;
	}

	function queueRecoverableErrors(errors) {
	  if (workInProgressRootRecoverableErrors === null) {
	    workInProgressRootRecoverableErrors = errors;
	  } else {
	    workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
	  }
	}

	function finishConcurrentRender(root, exitStatus, lanes) {
	  switch (exitStatus) {
	    case RootInProgress:
	    case RootFatalErrored:
	      {
	        throw new Error('Root did not complete. This is a bug in React.');
	      }
	    // Flow knows about invariant, so it complains if I add a break
	    // statement, but eslint doesn't know about invariant, so it complains
	    // if I do. eslint-disable-next-line no-fallthrough

	    case RootErrored:
	      {
	        // We should have already attempted to retry this tree. If we reached
	        // this point, it errored again. Commit it.
	        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
	        break;
	      }

	    case RootSuspended:
	      {
	        markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
	        // should immediately commit it or wait a bit.

	        if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
	        !shouldForceFlushFallbacksInDEV()) {
	          // This render only included retries, no updates. Throttle committing
	          // retries so that we don't show too many loading states too quickly.
	          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

	          if (msUntilTimeout > 10) {
	            var nextLanes = getNextLanes(root, NoLanes);

	            if (nextLanes !== NoLanes) {
	              // There's additional work on this root.
	              break;
	            }

	            var suspendedLanes = root.suspendedLanes;

	            if (!isSubsetOfLanes(suspendedLanes, lanes)) {
	              // We should prefer to render the fallback of at the last
	              // suspended level. Ping the last suspended level to try
	              // rendering it again.
	              // FIXME: What if the suspended lanes are Idle? Should not restart.
	              requestEventTime();
	              markRootPinged(root, suspendedLanes);
	              break;
	            } // The render is suspended, it hasn't timed out, and there's no
	            // lower priority work to do. Instead of committing the fallback
	            // immediately, wait for more data to arrive.


	            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
	            break;
	          }
	        } // The work expired. Commit immediately.


	        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
	        break;
	      }

	    case RootSuspendedWithDelay:
	      {
	        markRootSuspended$1(root, lanes);

	        if (includesOnlyTransitions(lanes)) {
	          // This is a transition, so we should exit without committing a
	          // placeholder and without scheduling a timeout. Delay indefinitely
	          // until we receive more data.
	          break;
	        }

	        if (!shouldForceFlushFallbacksInDEV()) {
	          // This is not a transition, but we did trigger an avoided state.
	          // Schedule a placeholder to display after a short delay, using the Just
	          // Noticeable Difference.
	          // TODO: Is the JND optimization worth the added complexity? If this is
	          // the only reason we track the event time, then probably not.
	          // Consider removing.
	          var mostRecentEventTime = getMostRecentEventTime(root, lanes);
	          var eventTimeMs = mostRecentEventTime;
	          var timeElapsedMs = now() - eventTimeMs;

	          var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.


	          if (_msUntilTimeout > 10) {
	            // Instead of committing the fallback immediately, wait for more data
	            // to arrive.
	            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
	            break;
	          }
	        } // Commit the placeholder.


	        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
	        break;
	      }

	    case RootCompleted:
	      {
	        // The work completed. Ready to commit.
	        commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions);
	        break;
	      }

	    default:
	      {
	        throw new Error('Unknown root exit status.');
	      }
	  }
	}

	function isRenderConsistentWithExternalStores(finishedWork) {
	  // Search the rendered tree for external store reads, and check whether the
	  // stores were mutated in a concurrent event. Intentionally using an iterative
	  // loop instead of recursion so we can exit early.
	  var node = finishedWork;

	  while (true) {
	    if (node.flags & StoreConsistency) {
	      var updateQueue = node.updateQueue;

	      if (updateQueue !== null) {
	        var checks = updateQueue.stores;

	        if (checks !== null) {
	          for (var i = 0; i < checks.length; i++) {
	            var check = checks[i];
	            var getSnapshot = check.getSnapshot;
	            var renderedValue = check.value;

	            try {
	              if (!objectIs(getSnapshot(), renderedValue)) {
	                // Found an inconsistent store.
	                return false;
	              }
	            } catch (error) {
	              // If `getSnapshot` throws, return `false`. This will schedule
	              // a re-render, and the error will be rethrown during render.
	              return false;
	            }
	          }
	        }
	      }
	    }

	    var child = node.child;

	    if (node.subtreeFlags & StoreConsistency && child !== null) {
	      child.return = node;
	      node = child;
	      continue;
	    }

	    if (node === finishedWork) {
	      return true;
	    }

	    while (node.sibling === null) {
	      if (node.return === null || node.return === finishedWork) {
	        return true;
	      }

	      node = node.return;
	    }

	    node.sibling.return = node.return;
	    node = node.sibling;
	  } // Flow doesn't know this is unreachable, but eslint does
	  // eslint-disable-next-line no-unreachable


	  return true;
	}

	function markRootSuspended$1(root, suspendedLanes) {
	  // When suspending, we should always exclude lanes that were pinged or (more
	  // rarely, since we try to avoid it) updated during the render phase.
	  // TODO: Lol maybe there's a better way to factor this besides this
	  // obnoxiously named function :)
	  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
	  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
	  markRootSuspended(root, suspendedLanes);
	} // This is the entry point for synchronous tasks that don't go
	// through Scheduler


	function performSyncWorkOnRoot(root) {
	  {
	    syncNestedUpdateFlag();
	  }

	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    throw new Error('Should not already be working.');
	  }

	  flushPassiveEffects();
	  var lanes = getNextLanes(root, NoLanes);

	  if (!includesSomeLane(lanes, SyncLane)) {
	    // There's no remaining sync work left.
	    ensureRootIsScheduled(root, now());
	    return null;
	  }

	  var exitStatus = renderRootSync(root, lanes);

	  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
	    // If something threw an error, try rendering one more time. We'll render
	    // synchronously to block concurrent data mutations, and we'll includes
	    // all pending updates are included. If it still fails after the second
	    // attempt, we'll give up and commit the resulting tree.
	    var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root);

	    if (errorRetryLanes !== NoLanes) {
	      lanes = errorRetryLanes;
	      exitStatus = recoverFromConcurrentError(root, errorRetryLanes);
	    }
	  }

	  if (exitStatus === RootFatalErrored) {
	    var fatalError = workInProgressRootFatalError;
	    prepareFreshStack(root, NoLanes);
	    markRootSuspended$1(root, lanes);
	    ensureRootIsScheduled(root, now());
	    throw fatalError;
	  }

	  if (exitStatus === RootDidNotComplete) {
	    throw new Error('Root did not complete. This is a bug in React.');
	  } // We now have a consistent tree. Because this is a sync render, we
	  // will commit it even if something suspended.


	  var finishedWork = root.current.alternate;
	  root.finishedWork = finishedWork;
	  root.finishedLanes = lanes;
	  commitRoot(root, workInProgressRootRecoverableErrors, workInProgressTransitions); // Before exiting, make sure there's a callback scheduled for the next
	  // pending level.

	  ensureRootIsScheduled(root, now());
	  return null;
	}

	function flushRoot(root, lanes) {
	  if (lanes !== NoLanes) {
	    markRootEntangled(root, mergeLanes(lanes, SyncLane));
	    ensureRootIsScheduled(root, now());

	    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
	      resetRenderTimer();
	      flushSyncCallbacks();
	    }
	  }
	}
	function deferredUpdates(fn) {
	  var previousPriority = getCurrentUpdatePriority();
	  var prevTransition = ReactCurrentBatchConfig$2.transition;

	  try {
	    ReactCurrentBatchConfig$2.transition = null;
	    setCurrentUpdatePriority(DefaultEventPriority);
	    return fn();
	  } finally {
	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig$2.transition = prevTransition;
	  }
	}
	function batchedUpdates(fn, a) {
	  var prevExecutionContext = executionContext;
	  executionContext |= BatchedContext;

	  try {
	    return fn(a);
	  } finally {
	    executionContext = prevExecutionContext; // If there were legacy sync updates, flush them at the end of the outer
	    // most batchedUpdates-like method.

	    if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
	    !( ReactCurrentActQueue$1.isBatchingLegacy)) {
	      resetRenderTimer();
	      flushSyncCallbacksOnlyInLegacyMode();
	    }
	  }
	}
	function discreteUpdates(fn, a, b, c, d) {
	  var previousPriority = getCurrentUpdatePriority();
	  var prevTransition = ReactCurrentBatchConfig$2.transition;

	  try {
	    ReactCurrentBatchConfig$2.transition = null;
	    setCurrentUpdatePriority(DiscreteEventPriority);
	    return fn(a, b, c, d);
	  } finally {
	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig$2.transition = prevTransition;

	    if (executionContext === NoContext) {
	      resetRenderTimer();
	    }
	  }
	} // Overload the definition to the two valid signatures.
	// Warning, this opts-out of checking the function body.

	// eslint-disable-next-line no-redeclare
	function flushSync(fn) {
	  // In legacy mode, we flush pending passive effects at the beginning of the
	  // next event, not at the end of the previous one.
	  if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
	    flushPassiveEffects();
	  }

	  var prevExecutionContext = executionContext;
	  executionContext |= BatchedContext;
	  var prevTransition = ReactCurrentBatchConfig$2.transition;
	  var previousPriority = getCurrentUpdatePriority();

	  try {
	    ReactCurrentBatchConfig$2.transition = null;
	    setCurrentUpdatePriority(DiscreteEventPriority);

	    if (fn) {
	      return fn();
	    } else {
	      return undefined;
	    }
	  } finally {
	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig$2.transition = prevTransition;
	    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
	    // Note that this will happen even if batchedUpdates is higher up
	    // the stack.

	    if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
	      flushSyncCallbacks();
	    }
	  }
	}
	function isAlreadyRendering() {
	  // Used by the renderer to print a warning if certain APIs are called from
	  // the wrong context.
	  return  (executionContext & (RenderContext | CommitContext)) !== NoContext;
	}
	function flushControlled(fn) {
	  var prevExecutionContext = executionContext;
	  executionContext |= BatchedContext;
	  var prevTransition = ReactCurrentBatchConfig$2.transition;
	  var previousPriority = getCurrentUpdatePriority();

	  try {
	    ReactCurrentBatchConfig$2.transition = null;
	    setCurrentUpdatePriority(DiscreteEventPriority);
	    fn();
	  } finally {
	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig$2.transition = prevTransition;
	    executionContext = prevExecutionContext;

	    if (executionContext === NoContext) {
	      // Flush the immediate callbacks that were scheduled during this batch
	      resetRenderTimer();
	      flushSyncCallbacks();
	    }
	  }
	}
	function pushRenderLanes(fiber, lanes) {
	  push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
	  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
	}
	function popRenderLanes(fiber) {
	  subtreeRenderLanes = subtreeRenderLanesCursor.current;
	  pop(subtreeRenderLanesCursor, fiber);
	}

	function prepareFreshStack(root, lanes) {
	  root.finishedWork = null;
	  root.finishedLanes = NoLanes;
	  var timeoutHandle = root.timeoutHandle;

	  if (timeoutHandle !== noTimeout) {
	    // The root previous suspended and scheduled a timeout to commit a fallback
	    // state. Now that we have additional work, cancel the timeout.
	    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

	    cancelTimeout(timeoutHandle);
	  }

	  if (workInProgress !== null) {
	    var interruptedWork = workInProgress.return;

	    while (interruptedWork !== null) {
	      var current = interruptedWork.alternate;
	      unwindInterruptedWork(current, interruptedWork);
	      interruptedWork = interruptedWork.return;
	    }
	  }

	  workInProgressRoot = root;
	  var rootWorkInProgress = createWorkInProgress(root.current, null);
	  workInProgress = rootWorkInProgress;
	  workInProgressRootRenderLanes = subtreeRenderLanes = lanes;
	  workInProgressRootExitStatus = RootInProgress;
	  workInProgressRootFatalError = null;
	  workInProgressRootSkippedLanes = NoLanes;
	  workInProgressRootInterleavedUpdatedLanes = NoLanes;
	  workInProgressRootPingedLanes = NoLanes;
	  workInProgressRootConcurrentErrors = null;
	  workInProgressRootRecoverableErrors = null;
	  finishQueueingConcurrentUpdates();

	  {
	    ReactStrictModeWarnings.discardPendingWarnings();
	  }

	  return rootWorkInProgress;
	}

	function handleError(root, thrownValue) {
	  do {
	    var erroredWork = workInProgress;

	    try {
	      // Reset module-level state that was set during the render phase.
	      resetContextDependencies();
	      resetHooksAfterThrow();
	      resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
	      // separate issue. Write a regression test using string refs.

	      ReactCurrentOwner$2.current = null;

	      if (erroredWork === null || erroredWork.return === null) {
	        // Expected to be working on a non-root fiber. This is a fatal error
	        // because there's no ancestor that can handle it; the root is
	        // supposed to capture all errors that weren't caught by an error
	        // boundary.
	        workInProgressRootExitStatus = RootFatalErrored;
	        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
	        // sibling, or the parent if there are no siblings. But since the root
	        // has no siblings nor a parent, we set it to null. Usually this is
	        // handled by `completeUnitOfWork` or `unwindWork`, but since we're
	        // intentionally not calling those, we need set it here.
	        // TODO: Consider calling `unwindWork` to pop the contexts.

	        workInProgress = null;
	        return;
	      }

	      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
	        // Record the time spent rendering before an error was thrown. This
	        // avoids inaccurate Profiler durations in the case of a
	        // suspended render.
	        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
	      }

	      if (enableSchedulingProfiler) {
	        markComponentRenderStopped();

	        if (thrownValue !== null && typeof thrownValue === 'object' && typeof thrownValue.then === 'function') {
	          var wakeable = thrownValue;
	          markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
	        } else {
	          markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
	        }
	      }

	      throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
	      completeUnitOfWork(erroredWork);
	    } catch (yetAnotherThrownValue) {
	      // Something in the return path also threw.
	      thrownValue = yetAnotherThrownValue;

	      if (workInProgress === erroredWork && erroredWork !== null) {
	        // If this boundary has already errored, then we had trouble processing
	        // the error. Bubble it to the next boundary.
	        erroredWork = erroredWork.return;
	        workInProgress = erroredWork;
	      } else {
	        erroredWork = workInProgress;
	      }

	      continue;
	    } // Return to the normal work loop.


	    return;
	  } while (true);
	}

	function pushDispatcher() {
	  var prevDispatcher = ReactCurrentDispatcher$2.current;
	  ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;

	  if (prevDispatcher === null) {
	    // The React isomorphic package does not include a default dispatcher.
	    // Instead the first renderer will lazily attach one, in order to give
	    // nicer error messages.
	    return ContextOnlyDispatcher;
	  } else {
	    return prevDispatcher;
	  }
	}

	function popDispatcher(prevDispatcher) {
	  ReactCurrentDispatcher$2.current = prevDispatcher;
	}

	function markCommitTimeOfFallback() {
	  globalMostRecentFallbackTime = now();
	}
	function markSkippedUpdateLanes(lane) {
	  workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
	}
	function renderDidSuspend() {
	  if (workInProgressRootExitStatus === RootInProgress) {
	    workInProgressRootExitStatus = RootSuspended;
	  }
	}
	function renderDidSuspendDelayIfPossible() {
	  if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
	    workInProgressRootExitStatus = RootSuspendedWithDelay;
	  } // Check if there are updates that we skipped tree that might have unblocked
	  // this render.


	  if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
	    // Mark the current render as suspended so that we switch to working on
	    // the updates that were skipped. Usually we only suspend at the end of
	    // the render phase.
	    // TODO: We should probably always mark the root as suspended immediately
	    // (inside this function), since by suspending at the end of the render
	    // phase introduces a potential mistake where we suspend lanes that were
	    // pinged or updated while we were rendering.
	    markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
	  }
	}
	function renderDidError(error) {
	  if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
	    workInProgressRootExitStatus = RootErrored;
	  }

	  if (workInProgressRootConcurrentErrors === null) {
	    workInProgressRootConcurrentErrors = [error];
	  } else {
	    workInProgressRootConcurrentErrors.push(error);
	  }
	} // Called during render to determine if anything has suspended.
	// Returns false if we're not sure.

	function renderHasNotSuspendedYet() {
	  // If something errored or completed, we can't really be sure,
	  // so those are false.
	  return workInProgressRootExitStatus === RootInProgress;
	}

	function renderRootSync(root, lanes) {
	  var prevExecutionContext = executionContext;
	  executionContext |= RenderContext;
	  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
	  // and prepare a fresh one. Otherwise we'll continue where we left off.

	  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
	    {
	      if (isDevToolsPresent) {
	        var memoizedUpdaters = root.memoizedUpdaters;

	        if (memoizedUpdaters.size > 0) {
	          restorePendingUpdaters(root, workInProgressRootRenderLanes);
	          memoizedUpdaters.clear();
	        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
	        // If we bailout on this work, we'll move them back (like above).
	        // It's important to move them now in case the work spawns more work at the same priority with different updaters.
	        // That way we can keep the current update and future updates separate.


	        movePendingFibersToMemoized(root, lanes);
	      }
	    }

	    workInProgressTransitions = getTransitionsForLanes();
	    prepareFreshStack(root, lanes);
	  }

	  {
	    markRenderStarted(lanes);
	  }

	  do {
	    try {
	      workLoopSync();
	      break;
	    } catch (thrownValue) {
	      handleError(root, thrownValue);
	    }
	  } while (true);

	  resetContextDependencies();
	  executionContext = prevExecutionContext;
	  popDispatcher(prevDispatcher);

	  if (workInProgress !== null) {
	    // This is a sync render, so we should have finished the whole tree.
	    throw new Error('Cannot commit an incomplete root. This error is likely caused by a ' + 'bug in React. Please file an issue.');
	  }

	  {
	    markRenderStopped();
	  } // Set this to null to indicate there's no in-progress render.


	  workInProgressRoot = null;
	  workInProgressRootRenderLanes = NoLanes;
	  return workInProgressRootExitStatus;
	} // The work loop is an extremely hot path. Tell Closure not to inline it.

	/** @noinline */


	function workLoopSync() {
	  // Already timed out, so perform work without checking if we need to yield.
	  while (workInProgress !== null) {
	    performUnitOfWork(workInProgress);
	  }
	}

	function renderRootConcurrent(root, lanes) {
	  var prevExecutionContext = executionContext;
	  executionContext |= RenderContext;
	  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
	  // and prepare a fresh one. Otherwise we'll continue where we left off.

	  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
	    {
	      if (isDevToolsPresent) {
	        var memoizedUpdaters = root.memoizedUpdaters;

	        if (memoizedUpdaters.size > 0) {
	          restorePendingUpdaters(root, workInProgressRootRenderLanes);
	          memoizedUpdaters.clear();
	        } // At this point, move Fibers that scheduled the upcoming work from the Map to the Set.
	        // If we bailout on this work, we'll move them back (like above).
	        // It's important to move them now in case the work spawns more work at the same priority with different updaters.
	        // That way we can keep the current update and future updates separate.


	        movePendingFibersToMemoized(root, lanes);
	      }
	    }

	    workInProgressTransitions = getTransitionsForLanes();
	    resetRenderTimer();
	    prepareFreshStack(root, lanes);
	  }

	  {
	    markRenderStarted(lanes);
	  }

	  do {
	    try {
	      workLoopConcurrent();
	      break;
	    } catch (thrownValue) {
	      handleError(root, thrownValue);
	    }
	  } while (true);

	  resetContextDependencies();
	  popDispatcher(prevDispatcher);
	  executionContext = prevExecutionContext;


	  if (workInProgress !== null) {
	    // Still work remaining.
	    {
	      markRenderYielded();
	    }

	    return RootInProgress;
	  } else {
	    // Completed the tree.
	    {
	      markRenderStopped();
	    } // Set this to null to indicate there's no in-progress render.


	    workInProgressRoot = null;
	    workInProgressRootRenderLanes = NoLanes; // Return the final exit status.

	    return workInProgressRootExitStatus;
	  }
	}
	/** @noinline */


	function workLoopConcurrent() {
	  // Perform work until Scheduler asks us to yield
	  while (workInProgress !== null && !shouldYield()) {
	    performUnitOfWork(workInProgress);
	  }
	}

	function performUnitOfWork(unitOfWork) {
	  // The current, flushed, state of this fiber is the alternate. Ideally
	  // nothing should rely on this, but relying on it here means that we don't
	  // need an additional field on the work in progress.
	  var current = unitOfWork.alternate;
	  setCurrentFiber(unitOfWork);
	  var next;

	  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
	    startProfilerTimer(unitOfWork);
	    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
	    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
	  } else {
	    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
	  }

	  resetCurrentFiber();
	  unitOfWork.memoizedProps = unitOfWork.pendingProps;

	  if (next === null) {
	    // If this doesn't spawn new work, complete the current work.
	    completeUnitOfWork(unitOfWork);
	  } else {
	    workInProgress = next;
	  }

	  ReactCurrentOwner$2.current = null;
	}

	function completeUnitOfWork(unitOfWork) {
	  // Attempt to complete the current unit of work, then move to the next
	  // sibling. If there are no more siblings, return to the parent fiber.
	  var completedWork = unitOfWork;

	  do {
	    // The current, flushed, state of this fiber is the alternate. Ideally
	    // nothing should rely on this, but relying on it here means that we don't
	    // need an additional field on the work in progress.
	    var current = completedWork.alternate;
	    var returnFiber = completedWork.return; // Check if the work completed or if something threw.

	    if ((completedWork.flags & Incomplete) === NoFlags) {
	      setCurrentFiber(completedWork);
	      var next = void 0;

	      if ( (completedWork.mode & ProfileMode) === NoMode) {
	        next = completeWork(current, completedWork, subtreeRenderLanes);
	      } else {
	        startProfilerTimer(completedWork);
	        next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.

	        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
	      }

	      resetCurrentFiber();

	      if (next !== null) {
	        // Completing this fiber spawned new work. Work on that next.
	        workInProgress = next;
	        return;
	      }
	    } else {
	      // This fiber did not complete because something threw. Pop values off
	      // the stack without entering the complete phase. If this is a boundary,
	      // capture values if possible.
	      var _next = unwindWork(current, completedWork); // Because this fiber did not complete, don't reset its lanes.


	      if (_next !== null) {
	        // If completing this work spawned new work, do that next. We'll come
	        // back here again.
	        // Since we're restarting, remove anything that is not a host effect
	        // from the effect tag.
	        _next.flags &= HostEffectMask;
	        workInProgress = _next;
	        return;
	      }

	      if ( (completedWork.mode & ProfileMode) !== NoMode) {
	        // Record the render duration for the fiber that errored.
	        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.

	        var actualDuration = completedWork.actualDuration;
	        var child = completedWork.child;

	        while (child !== null) {
	          actualDuration += child.actualDuration;
	          child = child.sibling;
	        }

	        completedWork.actualDuration = actualDuration;
	      }

	      if (returnFiber !== null) {
	        // Mark the parent fiber as incomplete and clear its subtree flags.
	        returnFiber.flags |= Incomplete;
	        returnFiber.subtreeFlags = NoFlags;
	        returnFiber.deletions = null;
	      } else {
	        // We've unwound all the way to the root.
	        workInProgressRootExitStatus = RootDidNotComplete;
	        workInProgress = null;
	        return;
	      }
	    }

	    var siblingFiber = completedWork.sibling;

	    if (siblingFiber !== null) {
	      // If there is more work to do in this returnFiber, do that next.
	      workInProgress = siblingFiber;
	      return;
	    } // Otherwise, return to the parent


	    completedWork = returnFiber; // Update the next thing we're working on in case something throws.

	    workInProgress = completedWork;
	  } while (completedWork !== null); // We've reached the root.


	  if (workInProgressRootExitStatus === RootInProgress) {
	    workInProgressRootExitStatus = RootCompleted;
	  }
	}

	function commitRoot(root, recoverableErrors, transitions) {
	  // TODO: This no longer makes any sense. We already wrap the mutation and
	  // layout phases. Should be able to remove.
	  var previousUpdateLanePriority = getCurrentUpdatePriority();
	  var prevTransition = ReactCurrentBatchConfig$2.transition;

	  try {
	    ReactCurrentBatchConfig$2.transition = null;
	    setCurrentUpdatePriority(DiscreteEventPriority);
	    commitRootImpl(root, recoverableErrors, transitions, previousUpdateLanePriority);
	  } finally {
	    ReactCurrentBatchConfig$2.transition = prevTransition;
	    setCurrentUpdatePriority(previousUpdateLanePriority);
	  }

	  return null;
	}

	function commitRootImpl(root, recoverableErrors, transitions, renderPriorityLevel) {
	  do {
	    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
	    // means `flushPassiveEffects` will sometimes result in additional
	    // passive effects. So we need to keep flushing in a loop until there are
	    // no more pending effects.
	    // TODO: Might be better if `flushPassiveEffects` did not automatically
	    // flush synchronous work at the end, to avoid factoring hazards like this.
	    flushPassiveEffects();
	  } while (rootWithPendingPassiveEffects !== null);

	  flushRenderPhaseStrictModeWarningsInDEV();

	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    throw new Error('Should not already be working.');
	  }

	  var finishedWork = root.finishedWork;
	  var lanes = root.finishedLanes;

	  {
	    markCommitStarted(lanes);
	  }

	  if (finishedWork === null) {

	    {
	      markCommitStopped();
	    }

	    return null;
	  } else {
	    {
	      if (lanes === NoLanes) {
	        error('root.finishedLanes should not be empty during a commit. This is a ' + 'bug in React.');
	      }
	    }
	  }

	  root.finishedWork = null;
	  root.finishedLanes = NoLanes;

	  if (finishedWork === root.current) {
	    throw new Error('Cannot commit the same tree as before. This error is likely caused by ' + 'a bug in React. Please file an issue.');
	  } // commitRoot never returns a continuation; it always finishes synchronously.
	  // So we can clear these now to allow a new callback to be scheduled.


	  root.callbackNode = null;
	  root.callbackPriority = NoLane; // Update the first and last pending times on this root. The new first
	  // pending time is whatever is left on the root fiber.

	  var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
	  markRootFinished(root, remainingLanes);

	  if (root === workInProgressRoot) {
	    // We can reset these now that they are finished.
	    workInProgressRoot = null;
	    workInProgress = null;
	    workInProgressRootRenderLanes = NoLanes;
	  } // If there are pending passive effects, schedule a callback to process them.
	  // Do this as early as possible, so it is queued before anything else that
	  // might get scheduled in the commit phase. (See #16714.)
	  // TODO: Delete all other places that schedule the passive effect callback
	  // They're redundant.


	  if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
	    if (!rootDoesHavePassiveEffects) {
	      rootDoesHavePassiveEffects = true;
	      // to store it in pendingPassiveTransitions until they get processed
	      // We need to pass this through as an argument to commitRoot
	      // because workInProgressTransitions might have changed between
	      // the previous render and commit if we throttle the commit
	      // with setTimeout

	      pendingPassiveTransitions = transitions;
	      scheduleCallback$1(NormalPriority, function () {
	        flushPassiveEffects(); // This render triggered passive effects: release the root cache pool
	        // *after* passive effects fire to avoid freeing a cache pool that may
	        // be referenced by a node in the tree (HostRoot, Cache boundary etc)

	        return null;
	      });
	    }
	  } // Check if there are any effects in the whole tree.
	  // TODO: This is left over from the effect list implementation, where we had
	  // to check for the existence of `firstEffect` to satisfy Flow. I think the
	  // only other reason this optimization exists is because it affects profiling.
	  // Reconsider whether this is necessary.


	  var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
	  var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;

	  if (subtreeHasEffects || rootHasEffect) {
	    var prevTransition = ReactCurrentBatchConfig$2.transition;
	    ReactCurrentBatchConfig$2.transition = null;
	    var previousPriority = getCurrentUpdatePriority();
	    setCurrentUpdatePriority(DiscreteEventPriority);
	    var prevExecutionContext = executionContext;
	    executionContext |= CommitContext; // Reset this to null before calling lifecycles

	    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
	    // of the effect list for each phase: all mutation effects come before all
	    // layout effects, and so on.
	    // The first phase a "before mutation" phase. We use this phase to read the
	    // state of the host tree right before we mutate it. This is where
	    // getSnapshotBeforeUpdate is called.

	    commitBeforeMutationEffects(root, finishedWork);

	    {
	      // Mark the current commit time to be shared by all Profilers in this
	      // batch. This enables them to be grouped later.
	      recordCommitTime();
	    }


	    commitMutationEffects(root, finishedWork, lanes);

	    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
	    // the mutation phase, so that the previous tree is still current during
	    // componentWillUnmount, but before the layout phase, so that the finished
	    // work is current during componentDidMount/Update.

	    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read

	    {
	      markLayoutEffectsStarted(lanes);
	    }

	    commitLayoutEffects(finishedWork, root, lanes);

	    {
	      markLayoutEffectsStopped();
	    }
	    // opportunity to paint.


	    requestPaint();
	    executionContext = prevExecutionContext; // Reset the priority to the previous non-sync value.

	    setCurrentUpdatePriority(previousPriority);
	    ReactCurrentBatchConfig$2.transition = prevTransition;
	  } else {
	    // No effects.
	    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
	    // no effects.
	    // TODO: Maybe there's a better way to report this.

	    {
	      recordCommitTime();
	    }
	  }

	  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

	  if (rootDoesHavePassiveEffects) {
	    // This commit has passive effects. Stash a reference to them. But don't
	    // schedule a callback until after flushing layout work.
	    rootDoesHavePassiveEffects = false;
	    rootWithPendingPassiveEffects = root;
	    pendingPassiveEffectsLanes = lanes;
	  } else {

	    {
	      nestedPassiveUpdateCount = 0;
	      rootWithPassiveNestedUpdates = null;
	    }
	  } // Read this again, since an effect might have updated it


	  remainingLanes = root.pendingLanes; // Check if there's remaining work on this root
	  // TODO: This is part of the `componentDidCatch` implementation. Its purpose
	  // is to detect whether something might have called setState inside
	  // `componentDidCatch`. The mechanism is known to be flawed because `setState`
	  // inside `componentDidCatch` is itself flawed — that's why we recommend
	  // `getDerivedStateFromError` instead. However, it could be improved by
	  // checking if remainingLanes includes Sync work, instead of whether there's
	  // any work remaining at all (which would also include stuff like Suspense
	  // retries or transitions). It's been like this for a while, though, so fixing
	  // it probably isn't that urgent.

	  if (remainingLanes === NoLanes) {
	    // If there's no remaining work, we can clear the set of already failed
	    // error boundaries.
	    legacyErrorBoundariesThatAlreadyFailed = null;
	  }

	  {
	    if (!rootDidHavePassiveEffects) {
	      commitDoubleInvokeEffectsInDEV(root.current, false);
	    }
	  }

	  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);

	  {
	    if (isDevToolsPresent) {
	      root.memoizedUpdaters.clear();
	    }
	  }

	  {
	    onCommitRoot$1();
	  } // Always call this before exiting `commitRoot`, to ensure that any
	  // additional work on this root is scheduled.


	  ensureRootIsScheduled(root, now());

	  if (recoverableErrors !== null) {
	    // There were errors during this render, but recovered from them without
	    // needing to surface it to the UI. We log them here.
	    var onRecoverableError = root.onRecoverableError;

	    for (var i = 0; i < recoverableErrors.length; i++) {
	      var recoverableError = recoverableErrors[i];
	      var componentStack = recoverableError.stack;
	      var digest = recoverableError.digest;
	      onRecoverableError(recoverableError.value, {
	        componentStack: componentStack,
	        digest: digest
	      });
	    }
	  }

	  if (hasUncaughtError) {
	    hasUncaughtError = false;
	    var error$1 = firstUncaughtError;
	    firstUncaughtError = null;
	    throw error$1;
	  } // If the passive effects are the result of a discrete render, flush them
	  // synchronously at the end of the current task so that the result is
	  // immediately observable. Otherwise, we assume that they are not
	  // order-dependent and do not need to be observed by external systems, so we
	  // can wait until after paint.
	  // TODO: We can optimize this by not scheduling the callback earlier. Since we
	  // currently schedule the callback in multiple places, will wait until those
	  // are consolidated.


	  if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root.tag !== LegacyRoot) {
	    flushPassiveEffects();
	  } // Read this again, since a passive effect might have updated it


	  remainingLanes = root.pendingLanes;

	  if (includesSomeLane(remainingLanes, SyncLane)) {
	    {
	      markNestedUpdateScheduled();
	    } // Count the number of times the root synchronously re-renders without
	    // finishing. If there are too many, it indicates an infinite update loop.


	    if (root === rootWithNestedUpdates) {
	      nestedUpdateCount++;
	    } else {
	      nestedUpdateCount = 0;
	      rootWithNestedUpdates = root;
	    }
	  } else {
	    nestedUpdateCount = 0;
	  } // If layout work was scheduled, flush it now.


	  flushSyncCallbacks();

	  {
	    markCommitStopped();
	  }

	  return null;
	}

	function flushPassiveEffects() {
	  // Returns whether passive effects were flushed.
	  // TODO: Combine this check with the one in flushPassiveEFfectsImpl. We should
	  // probably just combine the two functions. I believe they were only separate
	  // in the first place because we used to wrap it with
	  // `Scheduler.runWithPriority`, which accepts a function. But now we track the
	  // priority within React itself, so we can mutate the variable directly.
	  if (rootWithPendingPassiveEffects !== null) {
	    var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
	    var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
	    var prevTransition = ReactCurrentBatchConfig$2.transition;
	    var previousPriority = getCurrentUpdatePriority();

	    try {
	      ReactCurrentBatchConfig$2.transition = null;
	      setCurrentUpdatePriority(priority);
	      return flushPassiveEffectsImpl();
	    } finally {
	      setCurrentUpdatePriority(previousPriority);
	      ReactCurrentBatchConfig$2.transition = prevTransition; // Once passive effects have run for the tree - giving components a
	    }
	  }

	  return false;
	}
	function enqueuePendingPassiveProfilerEffect(fiber) {
	  {
	    pendingPassiveProfilerEffects.push(fiber);

	    if (!rootDoesHavePassiveEffects) {
	      rootDoesHavePassiveEffects = true;
	      scheduleCallback$1(NormalPriority, function () {
	        flushPassiveEffects();
	        return null;
	      });
	    }
	  }
	}

	function flushPassiveEffectsImpl() {
	  if (rootWithPendingPassiveEffects === null) {
	    return false;
	  } // Cache and clear the transitions flag


	  var transitions = pendingPassiveTransitions;
	  pendingPassiveTransitions = null;
	  var root = rootWithPendingPassiveEffects;
	  var lanes = pendingPassiveEffectsLanes;
	  rootWithPendingPassiveEffects = null; // TODO: This is sometimes out of sync with rootWithPendingPassiveEffects.
	  // Figure out why and fix it. It's not causing any known issues (probably
	  // because it's only used for profiling), but it's a refactor hazard.

	  pendingPassiveEffectsLanes = NoLanes;

	  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
	    throw new Error('Cannot flush passive effects while already rendering.');
	  }

	  {
	    isFlushingPassiveEffects = true;
	    didScheduleUpdateDuringPassiveEffects = false;
	  }

	  {
	    markPassiveEffectsStarted(lanes);
	  }

	  var prevExecutionContext = executionContext;
	  executionContext |= CommitContext;
	  commitPassiveUnmountEffects(root.current);
	  commitPassiveMountEffects(root, root.current, lanes, transitions); // TODO: Move to commitPassiveMountEffects

	  {
	    var profilerEffects = pendingPassiveProfilerEffects;
	    pendingPassiveProfilerEffects = [];

	    for (var i = 0; i < profilerEffects.length; i++) {
	      var _fiber = profilerEffects[i];
	      commitPassiveEffectDurations(root, _fiber);
	    }
	  }

	  {
	    markPassiveEffectsStopped();
	  }

	  {
	    commitDoubleInvokeEffectsInDEV(root.current, true);
	  }

	  executionContext = prevExecutionContext;
	  flushSyncCallbacks();

	  {
	    // If additional passive effects were scheduled, increment a counter. If this
	    // exceeds the limit, we'll fire a warning.
	    if (didScheduleUpdateDuringPassiveEffects) {
	      if (root === rootWithPassiveNestedUpdates) {
	        nestedPassiveUpdateCount++;
	      } else {
	        nestedPassiveUpdateCount = 0;
	        rootWithPassiveNestedUpdates = root;
	      }
	    } else {
	      nestedPassiveUpdateCount = 0;
	    }

	    isFlushingPassiveEffects = false;
	    didScheduleUpdateDuringPassiveEffects = false;
	  } // TODO: Move to commitPassiveMountEffects


	  onPostCommitRoot(root);

	  {
	    var stateNode = root.current.stateNode;
	    stateNode.effectDuration = 0;
	    stateNode.passiveEffectDuration = 0;
	  }

	  return true;
	}

	function isAlreadyFailedLegacyErrorBoundary(instance) {
	  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
	}
	function markLegacyErrorBoundaryAsFailed(instance) {
	  if (legacyErrorBoundariesThatAlreadyFailed === null) {
	    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
	  } else {
	    legacyErrorBoundariesThatAlreadyFailed.add(instance);
	  }
	}

	function prepareToThrowUncaughtError(error) {
	  if (!hasUncaughtError) {
	    hasUncaughtError = true;
	    firstUncaughtError = error;
	  }
	}

	var onUncaughtError = prepareToThrowUncaughtError;

	function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
	  var errorInfo = createCapturedValueAtFiber(error, sourceFiber);
	  var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
	  var root = enqueueUpdate(rootFiber, update, SyncLane);
	  var eventTime = requestEventTime();

	  if (root !== null) {
	    markRootUpdated(root, SyncLane, eventTime);
	    ensureRootIsScheduled(root, eventTime);
	  }
	}

	function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
	  {
	    reportUncaughtErrorInDEV(error$1);
	    setIsRunningInsertionEffect(false);
	  }

	  if (sourceFiber.tag === HostRoot) {
	    // Error was thrown at the root. There is no parent, so the root
	    // itself should capture it.
	    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
	    return;
	  }

	  var fiber = null;

	  {
	    fiber = nearestMountedAncestor;
	  }

	  while (fiber !== null) {
	    if (fiber.tag === HostRoot) {
	      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
	      return;
	    } else if (fiber.tag === ClassComponent) {
	      var ctor = fiber.type;
	      var instance = fiber.stateNode;

	      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
	        var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
	        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
	        var root = enqueueUpdate(fiber, update, SyncLane);
	        var eventTime = requestEventTime();

	        if (root !== null) {
	          markRootUpdated(root, SyncLane, eventTime);
	          ensureRootIsScheduled(root, eventTime);
	        }

	        return;
	      }
	    }

	    fiber = fiber.return;
	  }

	  {
	    // TODO: Until we re-land skipUnmountedBoundaries (see #20147), this warning
	    // will fire for errors that are thrown by destroy functions inside deleted
	    // trees. What it should instead do is propagate the error to the parent of
	    // the deleted tree. In the meantime, do not add this warning to the
	    // allowlist; this is only for our internal use.
	    error('Internal React error: Attempted to capture a commit phase error ' + 'inside a detached tree. This indicates a bug in React. Likely ' + 'causes include deleting the same fiber more than once, committing an ' + 'already-finished tree, or an inconsistent return pointer.\n\n' + 'Error message:\n\n%s', error$1);
	  }
	}
	function pingSuspendedRoot(root, wakeable, pingedLanes) {
	  var pingCache = root.pingCache;

	  if (pingCache !== null) {
	    // The wakeable resolved, so we no longer need to memoize, because it will
	    // never be thrown again.
	    pingCache.delete(wakeable);
	  }

	  var eventTime = requestEventTime();
	  markRootPinged(root, pingedLanes);
	  warnIfSuspenseResolutionNotWrappedWithActDEV(root);

	  if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
	    // Received a ping at the same priority level at which we're currently
	    // rendering. We might want to restart this render. This should mirror
	    // the logic of whether or not a root suspends once it completes.
	    // TODO: If we're rendering sync either due to Sync, Batched or expired,
	    // we should probably never restart.
	    // If we're suspended with delay, or if it's a retry, we'll always suspend
	    // so we can always restart.
	    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
	      // Restart from the root.
	      prepareFreshStack(root, NoLanes);
	    } else {
	      // Even though we can't restart right now, we might get an
	      // opportunity later. So we mark this render as having a ping.
	      workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
	    }
	  }

	  ensureRootIsScheduled(root, eventTime);
	}

	function retryTimedOutBoundary(boundaryFiber, retryLane) {
	  // The boundary fiber (a Suspense component or SuspenseList component)
	  // previously was rendered in its fallback state. One of the promises that
	  // suspended it has resolved, which means at least part of the tree was
	  // likely unblocked. Try rendering again, at a new lanes.
	  if (retryLane === NoLane) {
	    // TODO: Assign this to `suspenseState.retryLane`? to avoid
	    // unnecessary entanglement?
	    retryLane = requestRetryLane(boundaryFiber);
	  } // TODO: Special case idle priority?


	  var eventTime = requestEventTime();
	  var root = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);

	  if (root !== null) {
	    markRootUpdated(root, retryLane, eventTime);
	    ensureRootIsScheduled(root, eventTime);
	  }
	}

	function retryDehydratedSuspenseBoundary(boundaryFiber) {
	  var suspenseState = boundaryFiber.memoizedState;
	  var retryLane = NoLane;

	  if (suspenseState !== null) {
	    retryLane = suspenseState.retryLane;
	  }

	  retryTimedOutBoundary(boundaryFiber, retryLane);
	}
	function resolveRetryWakeable(boundaryFiber, wakeable) {
	  var retryLane = NoLane; // Default

	  var retryCache;

	  switch (boundaryFiber.tag) {
	    case SuspenseComponent:
	      retryCache = boundaryFiber.stateNode;
	      var suspenseState = boundaryFiber.memoizedState;

	      if (suspenseState !== null) {
	        retryLane = suspenseState.retryLane;
	      }

	      break;

	    case SuspenseListComponent:
	      retryCache = boundaryFiber.stateNode;
	      break;

	    default:
	      throw new Error('Pinged unknown suspense boundary type. ' + 'This is probably a bug in React.');
	  }

	  if (retryCache !== null) {
	    // The wakeable resolved, so we no longer need to memoize, because it will
	    // never be thrown again.
	    retryCache.delete(wakeable);
	  }

	  retryTimedOutBoundary(boundaryFiber, retryLane);
	} // Computes the next Just Noticeable Difference (JND) boundary.
	// The theory is that a person can't tell the difference between small differences in time.
	// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
	// difference in the experience. However, waiting for longer might mean that we can avoid
	// showing an intermediate loading state. The longer we have already waited, the harder it
	// is to tell small differences in time. Therefore, the longer we've already waited,
	// the longer we can wait additionally. At some point we have to give up though.
	// We pick a train model where the next boundary commits at a consistent schedule.
	// These particular numbers are vague estimates. We expect to adjust them based on research.

	function jnd(timeElapsed) {
	  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
	}

	function checkForNestedUpdates() {
	  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
	    nestedUpdateCount = 0;
	    rootWithNestedUpdates = null;
	    throw new Error('Maximum update depth exceeded. This can happen when a component ' + 'repeatedly calls setState inside componentWillUpdate or ' + 'componentDidUpdate. React limits the number of nested updates to ' + 'prevent infinite loops.');
	  }

	  {
	    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
	      nestedPassiveUpdateCount = 0;
	      rootWithPassiveNestedUpdates = null;

	      error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
	    }
	  }
	}

	function flushRenderPhaseStrictModeWarningsInDEV() {
	  {
	    ReactStrictModeWarnings.flushLegacyContextWarning();

	    {
	      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
	    }
	  }
	}

	function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
	  {
	    // TODO (StrictEffects) Should we set a marker on the root if it contains strict effects
	    // so we don't traverse unnecessarily? similar to subtreeFlags but just at the root level.
	    // Maybe not a big deal since this is DEV only behavior.
	    setCurrentFiber(fiber);
	    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);

	    if (hasPassiveEffects) {
	      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
	    }

	    invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);

	    if (hasPassiveEffects) {
	      invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
	    }

	    resetCurrentFiber();
	  }
	}

	function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
	  {
	    // We don't need to re-check StrictEffectsMode here.
	    // This function is only called if that check has already passed.
	    var current = firstChild;
	    var subtreeRoot = null;

	    while (current !== null) {
	      var primarySubtreeFlag = current.subtreeFlags & fiberFlags;

	      if (current !== subtreeRoot && current.child !== null && primarySubtreeFlag !== NoFlags) {
	        current = current.child;
	      } else {
	        if ((current.flags & fiberFlags) !== NoFlags) {
	          invokeEffectFn(current);
	        }

	        if (current.sibling !== null) {
	          current = current.sibling;
	        } else {
	          current = subtreeRoot = current.return;
	        }
	      }
	    }
	  }
	}

	var didWarnStateUpdateForNotYetMountedComponent = null;
	function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
	  {
	    if ((executionContext & RenderContext) !== NoContext) {
	      // We let the other warning about render phase updates deal with this one.
	      return;
	    }

	    if (!(fiber.mode & ConcurrentMode)) {
	      return;
	    }

	    var tag = fiber.tag;

	    if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
	      // Only warn for user-defined components, not internal ones like Suspense.
	      return;
	    } // We show the whole stack but dedupe on the top component's name because
	    // the problematic code almost always lies inside that component.


	    var componentName = getComponentNameFromFiber(fiber) || 'ReactComponent';

	    if (didWarnStateUpdateForNotYetMountedComponent !== null) {
	      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
	        return;
	      }

	      didWarnStateUpdateForNotYetMountedComponent.add(componentName);
	    } else {
	      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
	    }

	    var previousFiber = current;

	    try {
	      setCurrentFiber(fiber);

	      error("Can't perform a React state update on a component that hasn't mounted yet. " + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');
	    } finally {
	      if (previousFiber) {
	        setCurrentFiber(fiber);
	      } else {
	        resetCurrentFiber();
	      }
	    }
	  }
	}
	var beginWork$1;

	{
	  var dummyFiber = null;

	  beginWork$1 = function (current, unitOfWork, lanes) {
	    // If a component throws an error, we replay it again in a synchronously
	    // dispatched event, so that the debugger will treat it as an uncaught
	    // error See ReactErrorUtils for more information.
	    // Before entering the begin phase, copy the work-in-progress onto a dummy
	    // fiber. If beginWork throws, we'll use this to reset the state.
	    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

	    try {
	      return beginWork(current, unitOfWork, lanes);
	    } catch (originalError) {
	      if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
	        // Don't replay promises.
	        // Don't replay errors if we are hydrating and have already suspended or handled an error
	        throw originalError;
	      } // Keep this code in sync with handleError; any changes here must have
	      // corresponding changes there.


	      resetContextDependencies();
	      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
	      // same fiber again.
	      // Unwind the failed stack frame

	      unwindInterruptedWork(current, unitOfWork); // Restore the original properties of the fiber.

	      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

	      if ( unitOfWork.mode & ProfileMode) {
	        // Reset the profiler timer.
	        startProfilerTimer(unitOfWork);
	      } // Run beginWork again.


	      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);

	      if (hasCaughtError()) {
	        var replayError = clearCaughtError();

	        if (typeof replayError === 'object' && replayError !== null && replayError._suppressLogging && typeof originalError === 'object' && originalError !== null && !originalError._suppressLogging) {
	          // If suppressed, let the flag carry over to the original error which is the one we'll rethrow.
	          originalError._suppressLogging = true;
	        }
	      } // We always throw the original error in case the second render pass is not idempotent.
	      // This can happen if a memoized function or CommonJS module doesn't throw after first invocation.


	      throw originalError;
	    }
	  };
	}

	var didWarnAboutUpdateInRender = false;
	var didWarnAboutUpdateInRenderForAnotherComponent;

	{
	  didWarnAboutUpdateInRenderForAnotherComponent = new Set();
	}

	function warnAboutRenderPhaseUpdatesInDEV(fiber) {
	  {
	    if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
	      switch (fiber.tag) {
	        case FunctionComponent:
	        case ForwardRef:
	        case SimpleMemoComponent:
	          {
	            var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

	            var dedupeKey = renderingComponentName;

	            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
	              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
	              var setStateComponentName = getComponentNameFromFiber(fiber) || 'Unknown';

	              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
	            }

	            break;
	          }

	        case ClassComponent:
	          {
	            if (!didWarnAboutUpdateInRender) {
	              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

	              didWarnAboutUpdateInRender = true;
	            }

	            break;
	          }
	      }
	    }
	  }
	}

	function restorePendingUpdaters(root, lanes) {
	  {
	    if (isDevToolsPresent) {
	      var memoizedUpdaters = root.memoizedUpdaters;
	      memoizedUpdaters.forEach(function (schedulingFiber) {
	        addFiberToLanesMap(root, schedulingFiber, lanes);
	      }); // This function intentionally does not clear memoized updaters.
	      // Those may still be relevant to the current commit
	      // and a future one (e.g. Suspense).
	    }
	  }
	}
	var fakeActCallbackNode = {};

	function scheduleCallback$1(priorityLevel, callback) {
	  {
	    // If we're currently inside an `act` scope, bypass Scheduler and push to
	    // the `act` queue instead.
	    var actQueue = ReactCurrentActQueue$1.current;

	    if (actQueue !== null) {
	      actQueue.push(callback);
	      return fakeActCallbackNode;
	    } else {
	      return scheduleCallback(priorityLevel, callback);
	    }
	  }
	}

	function cancelCallback$1(callbackNode) {
	  if ( callbackNode === fakeActCallbackNode) {
	    return;
	  } // In production, always call Scheduler. This function will be stripped out.


	  return cancelCallback(callbackNode);
	}

	function shouldForceFlushFallbacksInDEV() {
	  // Never force flush in production. This function should get stripped out.
	  return  ReactCurrentActQueue$1.current !== null;
	}

	function warnIfUpdatesNotWrappedWithActDEV(fiber) {
	  {
	    if (fiber.mode & ConcurrentMode) {
	      if (!isConcurrentActEnvironment()) {
	        // Not in an act environment. No need to warn.
	        return;
	      }
	    } else {
	      // Legacy mode has additional cases where we suppress a warning.
	      if (!isLegacyActEnvironment()) {
	        // Not in an act environment. No need to warn.
	        return;
	      }

	      if (executionContext !== NoContext) {
	        // Legacy mode doesn't warn if the update is batched, i.e.
	        // batchedUpdates or flushSync.
	        return;
	      }

	      if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
	        // For backwards compatibility with pre-hooks code, legacy mode only
	        // warns for updates that originate from a hook.
	        return;
	      }
	    }

	    if (ReactCurrentActQueue$1.current === null) {
	      var previousFiber = current;

	      try {
	        setCurrentFiber(fiber);

	        error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentNameFromFiber(fiber));
	      } finally {
	        if (previousFiber) {
	          setCurrentFiber(fiber);
	        } else {
	          resetCurrentFiber();
	        }
	      }
	    }
	  }
	}

	function warnIfSuspenseResolutionNotWrappedWithActDEV(root) {
	  {
	    if (root.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
	      error('A suspended resource finished loading inside a test, but the event ' + 'was not wrapped in act(...).\n\n' + 'When testing, code that resolves suspended data should be wrapped ' + 'into act(...):\n\n' + 'act(() => {\n' + '  /* finish loading suspended data */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act');
	    }
	  }
	}

	function setIsRunningInsertionEffect(isRunning) {
	  {
	    isRunningInsertionEffect = isRunning;
	  }
	}

	/* eslint-disable react-internal/prod-error-codes */
	var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

	var failedBoundaries = null;
	var setRefreshHandler = function (handler) {
	  {
	    resolveFamily = handler;
	  }
	};
	function resolveFunctionForHotReloading(type) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return type;
	    }

	    var family = resolveFamily(type);

	    if (family === undefined) {
	      return type;
	    } // Use the latest known implementation.


	    return family.current;
	  }
	}
	function resolveClassForHotReloading(type) {
	  // No implementation differences.
	  return resolveFunctionForHotReloading(type);
	}
	function resolveForwardRefForHotReloading(type) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return type;
	    }

	    var family = resolveFamily(type);

	    if (family === undefined) {
	      // Check if we're dealing with a real forwardRef. Don't want to crash early.
	      if (type !== null && type !== undefined && typeof type.render === 'function') {
	        // ForwardRef is special because its resolved .type is an object,
	        // but it's possible that we only have its inner render function in the map.
	        // If that inner render function is different, we'll build a new forwardRef type.
	        var currentRender = resolveFunctionForHotReloading(type.render);

	        if (type.render !== currentRender) {
	          var syntheticType = {
	            $$typeof: REACT_FORWARD_REF_TYPE,
	            render: currentRender
	          };

	          if (type.displayName !== undefined) {
	            syntheticType.displayName = type.displayName;
	          }

	          return syntheticType;
	        }
	      }

	      return type;
	    } // Use the latest known implementation.


	    return family.current;
	  }
	}
	function isCompatibleFamilyForHotReloading(fiber, element) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return false;
	    }

	    var prevType = fiber.elementType;
	    var nextType = element.type; // If we got here, we know types aren't === equal.

	    var needsCompareFamilies = false;
	    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

	    switch (fiber.tag) {
	      case ClassComponent:
	        {
	          if (typeof nextType === 'function') {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case FunctionComponent:
	        {
	          if (typeof nextType === 'function') {
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            // We don't know the inner type yet.
	            // We're going to assume that the lazy inner type is stable,
	            // and so it is sufficient to avoid reconciling it away.
	            // We're not going to unwrap or actually use the new lazy type.
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case ForwardRef:
	        {
	          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      case MemoComponent:
	      case SimpleMemoComponent:
	        {
	          if ($$typeofNextType === REACT_MEMO_TYPE) {
	            // TODO: if it was but can no longer be simple,
	            // we shouldn't set this.
	            needsCompareFamilies = true;
	          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
	            needsCompareFamilies = true;
	          }

	          break;
	        }

	      default:
	        return false;
	    } // Check if both types have a family and it's the same one.


	    if (needsCompareFamilies) {
	      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
	      // This means both of them need to be registered to preserve state.
	      // If we unwrapped and compared the inner types for wrappers instead,
	      // then we would risk falsely saying two separate memo(Foo)
	      // calls are equivalent because they wrap the same Foo function.
	      var prevFamily = resolveFamily(prevType);

	      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
	        return true;
	      }
	    }

	    return false;
	  }
	}
	function markFailedErrorBoundaryForHotReloading(fiber) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return;
	    }

	    if (typeof WeakSet !== 'function') {
	      return;
	    }

	    if (failedBoundaries === null) {
	      failedBoundaries = new WeakSet();
	    }

	    failedBoundaries.add(fiber);
	  }
	}
	var scheduleRefresh = function (root, update) {
	  {
	    if (resolveFamily === null) {
	      // Hot reloading is disabled.
	      return;
	    }

	    var staleFamilies = update.staleFamilies,
	        updatedFamilies = update.updatedFamilies;
	    flushPassiveEffects();
	    flushSync(function () {
	      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
	    });
	  }
	};
	var scheduleRoot = function (root, element) {
	  {
	    if (root.context !== emptyContextObject) {
	      // Super edge case: root has a legacy _renderSubtree context
	      // but we don't know the parentComponent so we can't pass it.
	      // Just ignore. We'll delete this with _renderSubtree code path later.
	      return;
	    }

	    flushPassiveEffects();
	    flushSync(function () {
	      updateContainer(element, root, null, null);
	    });
	  }
	};

	function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
	  {
	    var alternate = fiber.alternate,
	        child = fiber.child,
	        sibling = fiber.sibling,
	        tag = fiber.tag,
	        type = fiber.type;
	    var candidateType = null;

	    switch (tag) {
	      case FunctionComponent:
	      case SimpleMemoComponent:
	      case ClassComponent:
	        candidateType = type;
	        break;

	      case ForwardRef:
	        candidateType = type.render;
	        break;
	    }

	    if (resolveFamily === null) {
	      throw new Error('Expected resolveFamily to be set during hot reload.');
	    }

	    var needsRender = false;
	    var needsRemount = false;

	    if (candidateType !== null) {
	      var family = resolveFamily(candidateType);

	      if (family !== undefined) {
	        if (staleFamilies.has(family)) {
	          needsRemount = true;
	        } else if (updatedFamilies.has(family)) {
	          if (tag === ClassComponent) {
	            needsRemount = true;
	          } else {
	            needsRender = true;
	          }
	        }
	      }
	    }

	    if (failedBoundaries !== null) {
	      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
	        needsRemount = true;
	      }
	    }

	    if (needsRemount) {
	      fiber._debugNeedsRemount = true;
	    }

	    if (needsRemount || needsRender) {
	      var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	      if (_root !== null) {
	        scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
	      }
	    }

	    if (child !== null && !needsRemount) {
	      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
	    }

	    if (sibling !== null) {
	      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
	    }
	  }
	}

	var findHostInstancesForRefresh = function (root, families) {
	  {
	    var hostInstances = new Set();
	    var types = new Set(families.map(function (family) {
	      return family.current;
	    }));
	    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
	    return hostInstances;
	  }
	};

	function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
	  {
	    var child = fiber.child,
	        sibling = fiber.sibling,
	        tag = fiber.tag,
	        type = fiber.type;
	    var candidateType = null;

	    switch (tag) {
	      case FunctionComponent:
	      case SimpleMemoComponent:
	      case ClassComponent:
	        candidateType = type;
	        break;

	      case ForwardRef:
	        candidateType = type.render;
	        break;
	    }

	    var didMatch = false;

	    if (candidateType !== null) {
	      if (types.has(candidateType)) {
	        didMatch = true;
	      }
	    }

	    if (didMatch) {
	      // We have a match. This only drills down to the closest host components.
	      // There's no need to search deeper because for the purpose of giving
	      // visual feedback, "flashing" outermost parent rectangles is sufficient.
	      findHostInstancesForFiberShallowly(fiber, hostInstances);
	    } else {
	      // If there's no match, maybe there will be one further down in the child tree.
	      if (child !== null) {
	        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
	      }
	    }

	    if (sibling !== null) {
	      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
	    }
	  }
	}

	function findHostInstancesForFiberShallowly(fiber, hostInstances) {
	  {
	    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

	    if (foundHostInstances) {
	      return;
	    } // If we didn't find any host children, fallback to closest host parent.


	    var node = fiber;

	    while (true) {
	      switch (node.tag) {
	        case HostComponent:
	          hostInstances.add(node.stateNode);
	          return;

	        case HostPortal:
	          hostInstances.add(node.stateNode.containerInfo);
	          return;

	        case HostRoot:
	          hostInstances.add(node.stateNode.containerInfo);
	          return;
	      }

	      if (node.return === null) {
	        throw new Error('Expected to reach root first.');
	      }

	      node = node.return;
	    }
	  }
	}

	function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
	  {
	    var node = fiber;
	    var foundHostInstances = false;

	    while (true) {
	      if (node.tag === HostComponent) {
	        // We got a match.
	        foundHostInstances = true;
	        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
	      } else if (node.child !== null) {
	        node.child.return = node;
	        node = node.child;
	        continue;
	      }

	      if (node === fiber) {
	        return foundHostInstances;
	      }

	      while (node.sibling === null) {
	        if (node.return === null || node.return === fiber) {
	          return foundHostInstances;
	        }

	        node = node.return;
	      }

	      node.sibling.return = node.return;
	      node = node.sibling;
	    }
	  }

	  return false;
	}

	var hasBadMapPolyfill;

	{
	  hasBadMapPolyfill = false;

	  try {
	    var nonExtensibleObject = Object.preventExtensions({});
	    /* eslint-disable no-new */

	    new Map([[nonExtensibleObject, null]]);
	    new Set([nonExtensibleObject]);
	    /* eslint-enable no-new */
	  } catch (e) {
	    // TODO: Consider warning about bad polyfills
	    hasBadMapPolyfill = true;
	  }
	}

	function FiberNode(tag, pendingProps, key, mode) {
	  // Instance
	  this.tag = tag;
	  this.key = key;
	  this.elementType = null;
	  this.type = null;
	  this.stateNode = null; // Fiber

	  this.return = null;
	  this.child = null;
	  this.sibling = null;
	  this.index = 0;
	  this.ref = null;
	  this.pendingProps = pendingProps;
	  this.memoizedProps = null;
	  this.updateQueue = null;
	  this.memoizedState = null;
	  this.dependencies = null;
	  this.mode = mode; // Effects

	  this.flags = NoFlags;
	  this.subtreeFlags = NoFlags;
	  this.deletions = null;
	  this.lanes = NoLanes;
	  this.childLanes = NoLanes;
	  this.alternate = null;

	  {
	    // Note: The following is done to avoid a v8 performance cliff.
	    //
	    // Initializing the fields below to smis and later updating them with
	    // double values will cause Fibers to end up having separate shapes.
	    // This behavior/bug has something to do with Object.preventExtension().
	    // Fortunately this only impacts DEV builds.
	    // Unfortunately it makes React unusably slow for some applications.
	    // To work around this, initialize the fields below with doubles.
	    //
	    // Learn more about this here:
	    // https://github.com/facebook/react/issues/14365
	    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
	    this.actualDuration = Number.NaN;
	    this.actualStartTime = Number.NaN;
	    this.selfBaseDuration = Number.NaN;
	    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
	    // This won't trigger the performance cliff mentioned above,
	    // and it simplifies other profiler code (including DevTools).

	    this.actualDuration = 0;
	    this.actualStartTime = -1;
	    this.selfBaseDuration = 0;
	    this.treeBaseDuration = 0;
	  }

	  {
	    // This isn't directly used but is handy for debugging internals:
	    this._debugSource = null;
	    this._debugOwner = null;
	    this._debugNeedsRemount = false;
	    this._debugHookTypes = null;

	    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
	      Object.preventExtensions(this);
	    }
	  }
	} // This is a constructor function, rather than a POJO constructor, still
	// please ensure we do the following:
	// 1) Nobody should add any instance methods on this. Instance methods can be
	//    more difficult to predict when they get optimized and they are almost
	//    never inlined properly in static compilers.
	// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
	//    always know when it is a fiber.
	// 3) We might want to experiment with using numeric keys since they are easier
	//    to optimize in a non-JIT environment.
	// 4) We can easily go from a constructor to a createFiber object literal if that
	//    is faster.
	// 5) It should be easy to port this to a C struct and keep a C implementation
	//    compatible.


	var createFiber = function (tag, pendingProps, key, mode) {
	  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
	  return new FiberNode(tag, pendingProps, key, mode);
	};

	function shouldConstruct$1(Component) {
	  var prototype = Component.prototype;
	  return !!(prototype && prototype.isReactComponent);
	}

	function isSimpleFunctionComponent(type) {
	  return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
	}
	function resolveLazyComponentTag(Component) {
	  if (typeof Component === 'function') {
	    return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
	  } else if (Component !== undefined && Component !== null) {
	    var $$typeof = Component.$$typeof;

	    if ($$typeof === REACT_FORWARD_REF_TYPE) {
	      return ForwardRef;
	    }

	    if ($$typeof === REACT_MEMO_TYPE) {
	      return MemoComponent;
	    }
	  }

	  return IndeterminateComponent;
	} // This is used to create an alternate fiber to do work on.

	function createWorkInProgress(current, pendingProps) {
	  var workInProgress = current.alternate;

	  if (workInProgress === null) {
	    // We use a double buffering pooling technique because we know that we'll
	    // only ever need at most two versions of a tree. We pool the "other" unused
	    // node that we're free to reuse. This is lazily created to avoid allocating
	    // extra objects for things that are never updated. It also allow us to
	    // reclaim the extra memory if needed.
	    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
	    workInProgress.elementType = current.elementType;
	    workInProgress.type = current.type;
	    workInProgress.stateNode = current.stateNode;

	    {
	      // DEV-only fields
	      workInProgress._debugSource = current._debugSource;
	      workInProgress._debugOwner = current._debugOwner;
	      workInProgress._debugHookTypes = current._debugHookTypes;
	    }

	    workInProgress.alternate = current;
	    current.alternate = workInProgress;
	  } else {
	    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.

	    workInProgress.type = current.type; // We already have an alternate.
	    // Reset the effect tag.

	    workInProgress.flags = NoFlags; // The effects are no longer valid.

	    workInProgress.subtreeFlags = NoFlags;
	    workInProgress.deletions = null;

	    {
	      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
	      // This prevents time from endlessly accumulating in new commits.
	      // This has the downside of resetting values for different priority renders,
	      // But works for yielding (the common case) and should support resuming.
	      workInProgress.actualDuration = 0;
	      workInProgress.actualStartTime = -1;
	    }
	  } // Reset all effects except static ones.
	  // Static effects are not specific to a render.


	  workInProgress.flags = current.flags & StaticMask;
	  workInProgress.childLanes = current.childLanes;
	  workInProgress.lanes = current.lanes;
	  workInProgress.child = current.child;
	  workInProgress.memoizedProps = current.memoizedProps;
	  workInProgress.memoizedState = current.memoizedState;
	  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
	  // it cannot be shared with the current fiber.

	  var currentDependencies = current.dependencies;
	  workInProgress.dependencies = currentDependencies === null ? null : {
	    lanes: currentDependencies.lanes,
	    firstContext: currentDependencies.firstContext
	  }; // These will be overridden during the parent's reconciliation

	  workInProgress.sibling = current.sibling;
	  workInProgress.index = current.index;
	  workInProgress.ref = current.ref;

	  {
	    workInProgress.selfBaseDuration = current.selfBaseDuration;
	    workInProgress.treeBaseDuration = current.treeBaseDuration;
	  }

	  {
	    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

	    switch (workInProgress.tag) {
	      case IndeterminateComponent:
	      case FunctionComponent:
	      case SimpleMemoComponent:
	        workInProgress.type = resolveFunctionForHotReloading(current.type);
	        break;

	      case ClassComponent:
	        workInProgress.type = resolveClassForHotReloading(current.type);
	        break;

	      case ForwardRef:
	        workInProgress.type = resolveForwardRefForHotReloading(current.type);
	        break;
	    }
	  }

	  return workInProgress;
	} // Used to reuse a Fiber for a second pass.

	function resetWorkInProgress(workInProgress, renderLanes) {
	  // This resets the Fiber to what createFiber or createWorkInProgress would
	  // have set the values to before during the first pass. Ideally this wouldn't
	  // be necessary but unfortunately many code paths reads from the workInProgress
	  // when they should be reading from current and writing to workInProgress.
	  // We assume pendingProps, index, key, ref, return are still untouched to
	  // avoid doing another reconciliation.
	  // Reset the effect flags but keep any Placement tags, since that's something
	  // that child fiber is setting, not the reconciliation.
	  workInProgress.flags &= StaticMask | Placement; // The effects are no longer valid.

	  var current = workInProgress.alternate;

	  if (current === null) {
	    // Reset to createFiber's initial values.
	    workInProgress.childLanes = NoLanes;
	    workInProgress.lanes = renderLanes;
	    workInProgress.child = null;
	    workInProgress.subtreeFlags = NoFlags;
	    workInProgress.memoizedProps = null;
	    workInProgress.memoizedState = null;
	    workInProgress.updateQueue = null;
	    workInProgress.dependencies = null;
	    workInProgress.stateNode = null;

	    {
	      // Note: We don't reset the actualTime counts. It's useful to accumulate
	      // actual time across multiple render passes.
	      workInProgress.selfBaseDuration = 0;
	      workInProgress.treeBaseDuration = 0;
	    }
	  } else {
	    // Reset to the cloned values that createWorkInProgress would've.
	    workInProgress.childLanes = current.childLanes;
	    workInProgress.lanes = current.lanes;
	    workInProgress.child = current.child;
	    workInProgress.subtreeFlags = NoFlags;
	    workInProgress.deletions = null;
	    workInProgress.memoizedProps = current.memoizedProps;
	    workInProgress.memoizedState = current.memoizedState;
	    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.

	    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
	    // it cannot be shared with the current fiber.

	    var currentDependencies = current.dependencies;
	    workInProgress.dependencies = currentDependencies === null ? null : {
	      lanes: currentDependencies.lanes,
	      firstContext: currentDependencies.firstContext
	    };

	    {
	      // Note: We don't reset the actualTime counts. It's useful to accumulate
	      // actual time across multiple render passes.
	      workInProgress.selfBaseDuration = current.selfBaseDuration;
	      workInProgress.treeBaseDuration = current.treeBaseDuration;
	    }
	  }

	  return workInProgress;
	}
	function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
	  var mode;

	  if (tag === ConcurrentRoot) {
	    mode = ConcurrentMode;

	    if (isStrictMode === true) {
	      mode |= StrictLegacyMode;

	      {
	        mode |= StrictEffectsMode;
	      }
	    }
	  } else {
	    mode = NoMode;
	  }

	  if ( isDevToolsPresent) {
	    // Always collect profile timings when DevTools are present.
	    // This enables DevTools to start capturing timing at any point–
	    // Without some nodes in the tree having empty base times.
	    mode |= ProfileMode;
	  }

	  return createFiber(HostRoot, null, null, mode);
	}
	function createFiberFromTypeAndProps(type, // React$ElementType
	key, pendingProps, owner, mode, lanes) {
	  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

	  var resolvedType = type;

	  if (typeof type === 'function') {
	    if (shouldConstruct$1(type)) {
	      fiberTag = ClassComponent;

	      {
	        resolvedType = resolveClassForHotReloading(resolvedType);
	      }
	    } else {
	      {
	        resolvedType = resolveFunctionForHotReloading(resolvedType);
	      }
	    }
	  } else if (typeof type === 'string') {
	    fiberTag = HostComponent;
	  } else {
	    getTag: switch (type) {
	      case REACT_FRAGMENT_TYPE:
	        return createFiberFromFragment(pendingProps.children, mode, lanes, key);

	      case REACT_STRICT_MODE_TYPE:
	        fiberTag = Mode;
	        mode |= StrictLegacyMode;

	        if ( (mode & ConcurrentMode) !== NoMode) {
	          // Strict effects should never run on legacy roots
	          mode |= StrictEffectsMode;
	        }

	        break;

	      case REACT_PROFILER_TYPE:
	        return createFiberFromProfiler(pendingProps, mode, lanes, key);

	      case REACT_SUSPENSE_TYPE:
	        return createFiberFromSuspense(pendingProps, mode, lanes, key);

	      case REACT_SUSPENSE_LIST_TYPE:
	        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);

	      case REACT_OFFSCREEN_TYPE:
	        return createFiberFromOffscreen(pendingProps, mode, lanes, key);

	      case REACT_LEGACY_HIDDEN_TYPE:

	      // eslint-disable-next-line no-fallthrough

	      case REACT_SCOPE_TYPE:

	      // eslint-disable-next-line no-fallthrough

	      case REACT_CACHE_TYPE:

	      // eslint-disable-next-line no-fallthrough

	      case REACT_TRACING_MARKER_TYPE:

	      // eslint-disable-next-line no-fallthrough

	      case REACT_DEBUG_TRACING_MODE_TYPE:

	      // eslint-disable-next-line no-fallthrough

	      default:
	        {
	          if (typeof type === 'object' && type !== null) {
	            switch (type.$$typeof) {
	              case REACT_PROVIDER_TYPE:
	                fiberTag = ContextProvider;
	                break getTag;

	              case REACT_CONTEXT_TYPE:
	                // This is a consumer
	                fiberTag = ContextConsumer;
	                break getTag;

	              case REACT_FORWARD_REF_TYPE:
	                fiberTag = ForwardRef;

	                {
	                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
	                }

	                break getTag;

	              case REACT_MEMO_TYPE:
	                fiberTag = MemoComponent;
	                break getTag;

	              case REACT_LAZY_TYPE:
	                fiberTag = LazyComponent;
	                resolvedType = null;
	                break getTag;
	            }
	          }

	          var info = '';

	          {
	            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
	              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
	            }

	            var ownerName = owner ? getComponentNameFromFiber(owner) : null;

	            if (ownerName) {
	              info += '\n\nCheck the render method of `' + ownerName + '`.';
	            }
	          }

	          throw new Error('Element type is invalid: expected a string (for built-in ' + 'components) or a class/function (for composite components) ' + ("but got: " + (type == null ? type : typeof type) + "." + info));
	        }
	    }
	  }

	  var fiber = createFiber(fiberTag, pendingProps, key, mode);
	  fiber.elementType = type;
	  fiber.type = resolvedType;
	  fiber.lanes = lanes;

	  {
	    fiber._debugOwner = owner;
	  }

	  return fiber;
	}
	function createFiberFromElement(element, mode, lanes) {
	  var owner = null;

	  {
	    owner = element._owner;
	  }

	  var type = element.type;
	  var key = element.key;
	  var pendingProps = element.props;
	  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);

	  {
	    fiber._debugSource = element._source;
	    fiber._debugOwner = element._owner;
	  }

	  return fiber;
	}
	function createFiberFromFragment(elements, mode, lanes, key) {
	  var fiber = createFiber(Fragment, elements, key, mode);
	  fiber.lanes = lanes;
	  return fiber;
	}

	function createFiberFromProfiler(pendingProps, mode, lanes, key) {
	  {
	    if (typeof pendingProps.id !== 'string') {
	      error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
	    }
	  }

	  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
	  fiber.elementType = REACT_PROFILER_TYPE;
	  fiber.lanes = lanes;

	  {
	    fiber.stateNode = {
	      effectDuration: 0,
	      passiveEffectDuration: 0
	    };
	  }

	  return fiber;
	}

	function createFiberFromSuspense(pendingProps, mode, lanes, key) {
	  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
	  fiber.elementType = REACT_SUSPENSE_TYPE;
	  fiber.lanes = lanes;
	  return fiber;
	}
	function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
	  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
	  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
	  fiber.lanes = lanes;
	  return fiber;
	}
	function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
	  var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
	  fiber.elementType = REACT_OFFSCREEN_TYPE;
	  fiber.lanes = lanes;
	  var primaryChildInstance = {
	    isHidden: false
	  };
	  fiber.stateNode = primaryChildInstance;
	  return fiber;
	}
	function createFiberFromText(content, mode, lanes) {
	  var fiber = createFiber(HostText, content, null, mode);
	  fiber.lanes = lanes;
	  return fiber;
	}
	function createFiberFromHostInstanceForDeletion() {
	  var fiber = createFiber(HostComponent, null, null, NoMode);
	  fiber.elementType = 'DELETED';
	  return fiber;
	}
	function createFiberFromDehydratedFragment(dehydratedNode) {
	  var fiber = createFiber(DehydratedFragment, null, null, NoMode);
	  fiber.stateNode = dehydratedNode;
	  return fiber;
	}
	function createFiberFromPortal(portal, mode, lanes) {
	  var pendingProps = portal.children !== null ? portal.children : [];
	  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
	  fiber.lanes = lanes;
	  fiber.stateNode = {
	    containerInfo: portal.containerInfo,
	    pendingChildren: null,
	    // Used by persistent updates
	    implementation: portal.implementation
	  };
	  return fiber;
	} // Used for stashing WIP properties to replay failed work in DEV.

	function assignFiberPropertiesInDEV(target, source) {
	  if (target === null) {
	    // This Fiber's initial properties will always be overwritten.
	    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
	    target = createFiber(IndeterminateComponent, null, null, NoMode);
	  } // This is intentionally written as a list of all properties.
	  // We tried to use Object.assign() instead but this is called in
	  // the hottest path, and Object.assign() was too slow:
	  // https://github.com/facebook/react/issues/12502
	  // This code is DEV-only so size is not a concern.


	  target.tag = source.tag;
	  target.key = source.key;
	  target.elementType = source.elementType;
	  target.type = source.type;
	  target.stateNode = source.stateNode;
	  target.return = source.return;
	  target.child = source.child;
	  target.sibling = source.sibling;
	  target.index = source.index;
	  target.ref = source.ref;
	  target.pendingProps = source.pendingProps;
	  target.memoizedProps = source.memoizedProps;
	  target.updateQueue = source.updateQueue;
	  target.memoizedState = source.memoizedState;
	  target.dependencies = source.dependencies;
	  target.mode = source.mode;
	  target.flags = source.flags;
	  target.subtreeFlags = source.subtreeFlags;
	  target.deletions = source.deletions;
	  target.lanes = source.lanes;
	  target.childLanes = source.childLanes;
	  target.alternate = source.alternate;

	  {
	    target.actualDuration = source.actualDuration;
	    target.actualStartTime = source.actualStartTime;
	    target.selfBaseDuration = source.selfBaseDuration;
	    target.treeBaseDuration = source.treeBaseDuration;
	  }

	  target._debugSource = source._debugSource;
	  target._debugOwner = source._debugOwner;
	  target._debugNeedsRemount = source._debugNeedsRemount;
	  target._debugHookTypes = source._debugHookTypes;
	  return target;
	}

	function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError) {
	  this.tag = tag;
	  this.containerInfo = containerInfo;
	  this.pendingChildren = null;
	  this.current = null;
	  this.pingCache = null;
	  this.finishedWork = null;
	  this.timeoutHandle = noTimeout;
	  this.context = null;
	  this.pendingContext = null;
	  this.callbackNode = null;
	  this.callbackPriority = NoLane;
	  this.eventTimes = createLaneMap(NoLanes);
	  this.expirationTimes = createLaneMap(NoTimestamp);
	  this.pendingLanes = NoLanes;
	  this.suspendedLanes = NoLanes;
	  this.pingedLanes = NoLanes;
	  this.expiredLanes = NoLanes;
	  this.mutableReadLanes = NoLanes;
	  this.finishedLanes = NoLanes;
	  this.entangledLanes = NoLanes;
	  this.entanglements = createLaneMap(NoLanes);
	  this.identifierPrefix = identifierPrefix;
	  this.onRecoverableError = onRecoverableError;

	  if (supportsHydration) {
	    this.mutableSourceEagerHydrationData = null;
	  }

	  {
	    this.effectDuration = 0;
	    this.passiveEffectDuration = 0;
	  }

	  {
	    this.memoizedUpdaters = new Set();
	    var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];

	    for (var _i = 0; _i < TotalLanes; _i++) {
	      pendingUpdatersLaneMap.push(new Set());
	    }
	  }

	  {
	    switch (tag) {
	      case ConcurrentRoot:
	        this._debugRootType = hydrate ? 'hydrateRoot()' : 'createRoot()';
	        break;

	      case LegacyRoot:
	        this._debugRootType = hydrate ? 'hydrate()' : 'render()';
	        break;
	    }
	  }
	}

	function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, // TODO: We have several of these arguments that are conceptually part of the
	// host config, but because they are passed in at runtime, we have to thread
	// them through the root constructor. Perhaps we should put them all into a
	// single type, like a DynamicHostConfig that is defined by the renderer.
	identifierPrefix, onRecoverableError, transitionCallbacks) {
	  var root = new FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onRecoverableError);
	  // stateNode is any.


	  var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
	  root.current = uninitializedFiber;
	  uninitializedFiber.stateNode = root;

	  {
	    var _initialState = {
	      element: initialChildren,
	      isDehydrated: hydrate,
	      cache: null,
	      // not enabled yet
	      transitions: null,
	      pendingSuspenseBoundaries: null
	    };
	    uninitializedFiber.memoizedState = _initialState;
	  }

	  initializeUpdateQueue(uninitializedFiber);
	  return root;
	}

	var ReactVersion = '18.3.1';

	function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
	implementation) {
	  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

	  {
	    checkKeyStringCoercion(key);
	  }

	  return {
	    // This tag allow us to uniquely identify this as a React Portal
	    $$typeof: REACT_PORTAL_TYPE,
	    key: key == null ? null : '' + key,
	    children: children,
	    containerInfo: containerInfo,
	    implementation: implementation
	  };
	}

	var didWarnAboutNestedUpdates;
	var didWarnAboutFindNodeInStrictMode;

	{
	  didWarnAboutNestedUpdates = false;
	  didWarnAboutFindNodeInStrictMode = {};
	}

	function getContextForSubtree(parentComponent) {
	  if (!parentComponent) {
	    return emptyContextObject;
	  }

	  var fiber = get(parentComponent);
	  var parentContext = findCurrentUnmaskedContext(fiber);

	  if (fiber.tag === ClassComponent) {
	    var Component = fiber.type;

	    if (isContextProvider(Component)) {
	      return processChildContext(fiber, Component, parentContext);
	    }
	  }

	  return parentContext;
	}

	function findHostInstance(component) {
	  var fiber = get(component);

	  if (fiber === undefined) {
	    if (typeof component.render === 'function') {
	      throw new Error('Unable to find node on an unmounted component.');
	    } else {
	      var keys = Object.keys(component).join(',');
	      throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
	    }
	  }

	  var hostFiber = findCurrentHostFiber(fiber);

	  if (hostFiber === null) {
	    return null;
	  }

	  return hostFiber.stateNode;
	}

	function findHostInstanceWithWarning(component, methodName) {
	  {
	    var fiber = get(component);

	    if (fiber === undefined) {
	      if (typeof component.render === 'function') {
	        throw new Error('Unable to find node on an unmounted component.');
	      } else {
	        var keys = Object.keys(component).join(',');
	        throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
	      }
	    }

	    var hostFiber = findCurrentHostFiber(fiber);

	    if (hostFiber === null) {
	      return null;
	    }

	    if (hostFiber.mode & StrictLegacyMode) {
	      var componentName = getComponentNameFromFiber(fiber) || 'Component';

	      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
	        didWarnAboutFindNodeInStrictMode[componentName] = true;
	        var previousFiber = current;

	        try {
	          setCurrentFiber(hostFiber);

	          if (fiber.mode & StrictLegacyMode) {
	            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
	          } else {
	            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
	          }
	        } finally {
	          // Ideally this should reset to previous but this shouldn't be called in
	          // render and there's another warning for that anyway.
	          if (previousFiber) {
	            setCurrentFiber(previousFiber);
	          } else {
	            resetCurrentFiber();
	          }
	        }
	      }
	    }

	    return hostFiber.stateNode;
	  }
	}

	function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
	  var hydrate = false;
	  var initialChildren = null;
	  return createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
	}
	function createHydrationContainer(initialChildren, // TODO: Remove `callback` when we delete legacy mode.
	callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
	  var hydrate = true;
	  var root = createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError); // TODO: Move this to FiberRoot constructor

	  root.context = getContextForSubtree(null); // Schedule the initial render. In a hydration root, this is different from
	  // a regular update because the initial render must match was was rendered
	  // on the server.
	  // NOTE: This update intentionally doesn't have a payload. We're only using
	  // the update to schedule work on the root fiber (and, for legacy roots, to
	  // enqueue the callback if one is provided).

	  var current = root.current;
	  var eventTime = requestEventTime();
	  var lane = requestUpdateLane(current);
	  var update = createUpdate(eventTime, lane);
	  update.callback = callback !== undefined && callback !== null ? callback : null;
	  enqueueUpdate(current, update, lane);
	  scheduleInitialHydrationOnRoot(root, lane, eventTime);
	  return root;
	}
	function updateContainer(element, container, parentComponent, callback) {
	  {
	    onScheduleRoot(container, element);
	  }

	  var current$1 = container.current;
	  var eventTime = requestEventTime();
	  var lane = requestUpdateLane(current$1);

	  {
	    markRenderScheduled(lane);
	  }

	  var context = getContextForSubtree(parentComponent);

	  if (container.context === null) {
	    container.context = context;
	  } else {
	    container.pendingContext = context;
	  }

	  {
	    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
	      didWarnAboutNestedUpdates = true;

	      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentNameFromFiber(current) || 'Unknown');
	    }
	  }

	  var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
	  // being called "element".

	  update.payload = {
	    element: element
	  };
	  callback = callback === undefined ? null : callback;

	  if (callback !== null) {
	    {
	      if (typeof callback !== 'function') {
	        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
	      }
	    }

	    update.callback = callback;
	  }

	  var root = enqueueUpdate(current$1, update, lane);

	  if (root !== null) {
	    scheduleUpdateOnFiber(root, current$1, lane, eventTime);
	    entangleTransitions(root, current$1, lane);
	  }

	  return lane;
	}
	function getPublicRootInstance(container) {
	  var containerFiber = container.current;

	  if (!containerFiber.child) {
	    return null;
	  }

	  switch (containerFiber.child.tag) {
	    case HostComponent:
	      return getPublicInstance(containerFiber.child.stateNode);

	    default:
	      return containerFiber.child.stateNode;
	  }
	}
	function attemptSynchronousHydration(fiber) {
	  switch (fiber.tag) {
	    case HostRoot:
	      {
	        var root = fiber.stateNode;

	        if (isRootDehydrated(root)) {
	          // Flush the first scheduled "update".
	          var lanes = getHighestPriorityPendingLanes(root);
	          flushRoot(root, lanes);
	        }

	        break;
	      }

	    case SuspenseComponent:
	      {
	        flushSync(function () {
	          var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	          if (root !== null) {
	            var eventTime = requestEventTime();
	            scheduleUpdateOnFiber(root, fiber, SyncLane, eventTime);
	          }
	        }); // If we're still blocked after this, we need to increase
	        // the priority of any promises resolving within this
	        // boundary so that they next attempt also has higher pri.

	        var retryLane = SyncLane;
	        markRetryLaneIfNotHydrated(fiber, retryLane);
	        break;
	      }
	  }
	}

	function markRetryLaneImpl(fiber, retryLane) {
	  var suspenseState = fiber.memoizedState;

	  if (suspenseState !== null && suspenseState.dehydrated !== null) {
	    suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
	  }
	} // Increases the priority of thenables when they resolve within this boundary.


	function markRetryLaneIfNotHydrated(fiber, retryLane) {
	  markRetryLaneImpl(fiber, retryLane);
	  var alternate = fiber.alternate;

	  if (alternate) {
	    markRetryLaneImpl(alternate, retryLane);
	  }
	}

	function attemptDiscreteHydration(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority and they should not suspend on I/O,
	    // since you have to wrap anything that might suspend in
	    // Suspense.
	    return;
	  }

	  var lane = SyncLane;
	  var root = enqueueConcurrentRenderForLane(fiber, lane);

	  if (root !== null) {
	    var eventTime = requestEventTime();
	    scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	  }

	  markRetryLaneIfNotHydrated(fiber, lane);
	}
	function attemptContinuousHydration(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority and they should not suspend on I/O,
	    // since you have to wrap anything that might suspend in
	    // Suspense.
	    return;
	  }

	  var lane = SelectiveHydrationLane;
	  var root = enqueueConcurrentRenderForLane(fiber, lane);

	  if (root !== null) {
	    var eventTime = requestEventTime();
	    scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	  }

	  markRetryLaneIfNotHydrated(fiber, lane);
	}
	function attemptHydrationAtCurrentPriority(fiber) {
	  if (fiber.tag !== SuspenseComponent) {
	    // We ignore HostRoots here because we can't increase
	    // their priority other than synchronously flush it.
	    return;
	  }

	  var lane = requestUpdateLane(fiber);
	  var root = enqueueConcurrentRenderForLane(fiber, lane);

	  if (root !== null) {
	    var eventTime = requestEventTime();
	    scheduleUpdateOnFiber(root, fiber, lane, eventTime);
	  }

	  markRetryLaneIfNotHydrated(fiber, lane);
	}
	function findHostInstanceWithNoPortals(fiber) {
	  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

	  if (hostFiber === null) {
	    return null;
	  }

	  return hostFiber.stateNode;
	}

	var shouldErrorImpl = function (fiber) {
	  return null;
	};

	function shouldError(fiber) {
	  return shouldErrorImpl(fiber);
	}

	var shouldSuspendImpl = function (fiber) {
	  return false;
	};

	function shouldSuspend(fiber) {
	  return shouldSuspendImpl(fiber);
	}
	var overrideHookState = null;
	var overrideHookStateDeletePath = null;
	var overrideHookStateRenamePath = null;
	var overrideProps = null;
	var overridePropsDeletePath = null;
	var overridePropsRenamePath = null;
	var scheduleUpdate = null;
	var setErrorHandler = null;
	var setSuspenseHandler = null;

	{
	  var copyWithDeleteImpl = function (obj, path, index) {
	    var key = path[index];
	    var updated = isArray(obj) ? obj.slice() : assign({}, obj);

	    if (index + 1 === path.length) {
	      if (isArray(updated)) {
	        updated.splice(key, 1);
	      } else {
	        delete updated[key];
	      }

	      return updated;
	    } // $FlowFixMe number or string is fine here


	    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
	    return updated;
	  };

	  var copyWithDelete = function (obj, path) {
	    return copyWithDeleteImpl(obj, path, 0);
	  };

	  var copyWithRenameImpl = function (obj, oldPath, newPath, index) {
	    var oldKey = oldPath[index];
	    var updated = isArray(obj) ? obj.slice() : assign({}, obj);

	    if (index + 1 === oldPath.length) {
	      var newKey = newPath[index]; // $FlowFixMe number or string is fine here

	      updated[newKey] = updated[oldKey];

	      if (isArray(updated)) {
	        updated.splice(oldKey, 1);
	      } else {
	        delete updated[oldKey];
	      }
	    } else {
	      // $FlowFixMe number or string is fine here
	      updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here
	      obj[oldKey], oldPath, newPath, index + 1);
	    }

	    return updated;
	  };

	  var copyWithRename = function (obj, oldPath, newPath) {
	    if (oldPath.length !== newPath.length) {
	      warn('copyWithRename() expects paths of the same length');

	      return;
	    } else {
	      for (var i = 0; i < newPath.length - 1; i++) {
	        if (oldPath[i] !== newPath[i]) {
	          warn('copyWithRename() expects paths to be the same except for the deepest key');

	          return;
	        }
	      }
	    }

	    return copyWithRenameImpl(obj, oldPath, newPath, 0);
	  };

	  var copyWithSetImpl = function (obj, path, index, value) {
	    if (index >= path.length) {
	      return value;
	    }

	    var key = path[index];
	    var updated = isArray(obj) ? obj.slice() : assign({}, obj); // $FlowFixMe number or string is fine here

	    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
	    return updated;
	  };

	  var copyWithSet = function (obj, path, value) {
	    return copyWithSetImpl(obj, path, 0, value);
	  };

	  var findHook = function (fiber, id) {
	    // For now, the "id" of stateful hooks is just the stateful hook index.
	    // This may change in the future with e.g. nested hooks.
	    var currentHook = fiber.memoizedState;

	    while (currentHook !== null && id > 0) {
	      currentHook = currentHook.next;
	      id--;
	    }

	    return currentHook;
	  }; // Support DevTools editable values for useState and useReducer.


	  overrideHookState = function (fiber, id, path, value) {
	    var hook = findHook(fiber, id);

	    if (hook !== null) {
	      var newState = copyWithSet(hook.memoizedState, path, value);
	      hook.memoizedState = newState;
	      hook.baseState = newState; // We aren't actually adding an update to the queue,
	      // because there is no update we can add for useReducer hooks that won't trigger an error.
	      // (There's no appropriate action type for DevTools overrides.)
	      // As a result though, React will see the scheduled update as a noop and bailout.
	      // Shallow cloning props works as a workaround for now to bypass the bailout check.

	      fiber.memoizedProps = assign({}, fiber.memoizedProps);
	      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	      if (root !== null) {
	        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	      }
	    }
	  };

	  overrideHookStateDeletePath = function (fiber, id, path) {
	    var hook = findHook(fiber, id);

	    if (hook !== null) {
	      var newState = copyWithDelete(hook.memoizedState, path);
	      hook.memoizedState = newState;
	      hook.baseState = newState; // We aren't actually adding an update to the queue,
	      // because there is no update we can add for useReducer hooks that won't trigger an error.
	      // (There's no appropriate action type for DevTools overrides.)
	      // As a result though, React will see the scheduled update as a noop and bailout.
	      // Shallow cloning props works as a workaround for now to bypass the bailout check.

	      fiber.memoizedProps = assign({}, fiber.memoizedProps);
	      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	      if (root !== null) {
	        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	      }
	    }
	  };

	  overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
	    var hook = findHook(fiber, id);

	    if (hook !== null) {
	      var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
	      hook.memoizedState = newState;
	      hook.baseState = newState; // We aren't actually adding an update to the queue,
	      // because there is no update we can add for useReducer hooks that won't trigger an error.
	      // (There's no appropriate action type for DevTools overrides.)
	      // As a result though, React will see the scheduled update as a noop and bailout.
	      // Shallow cloning props works as a workaround for now to bypass the bailout check.

	      fiber.memoizedProps = assign({}, fiber.memoizedProps);
	      var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	      if (root !== null) {
	        scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	      }
	    }
	  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


	  overrideProps = function (fiber, path, value) {
	    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

	    if (fiber.alternate) {
	      fiber.alternate.pendingProps = fiber.pendingProps;
	    }

	    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	    }
	  };

	  overridePropsDeletePath = function (fiber, path) {
	    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);

	    if (fiber.alternate) {
	      fiber.alternate.pendingProps = fiber.pendingProps;
	    }

	    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	    }
	  };

	  overridePropsRenamePath = function (fiber, oldPath, newPath) {
	    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);

	    if (fiber.alternate) {
	      fiber.alternate.pendingProps = fiber.pendingProps;
	    }

	    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	    }
	  };

	  scheduleUpdate = function (fiber) {
	    var root = enqueueConcurrentRenderForLane(fiber, SyncLane);

	    if (root !== null) {
	      scheduleUpdateOnFiber(root, fiber, SyncLane, NoTimestamp);
	    }
	  };

	  setErrorHandler = function (newShouldErrorImpl) {
	    shouldErrorImpl = newShouldErrorImpl;
	  };

	  setSuspenseHandler = function (newShouldSuspendImpl) {
	    shouldSuspendImpl = newShouldSuspendImpl;
	  };
	}

	function findHostInstanceByFiber(fiber) {
	  var hostFiber = findCurrentHostFiber(fiber);

	  if (hostFiber === null) {
	    return null;
	  }

	  return hostFiber.stateNode;
	}

	function emptyFindFiberByHostInstance(instance) {
	  return null;
	}

	function getCurrentFiberForDevTools() {
	  return current;
	}

	function injectIntoDevTools(devToolsConfig) {
	  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
	  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
	  return injectInternals({
	    bundleType: devToolsConfig.bundleType,
	    version: devToolsConfig.version,
	    rendererPackageName: devToolsConfig.rendererPackageName,
	    rendererConfig: devToolsConfig.rendererConfig,
	    overrideHookState: overrideHookState,
	    overrideHookStateDeletePath: overrideHookStateDeletePath,
	    overrideHookStateRenamePath: overrideHookStateRenamePath,
	    overrideProps: overrideProps,
	    overridePropsDeletePath: overridePropsDeletePath,
	    overridePropsRenamePath: overridePropsRenamePath,
	    setErrorHandler: setErrorHandler,
	    setSuspenseHandler: setSuspenseHandler,
	    scheduleUpdate: scheduleUpdate,
	    currentDispatcherRef: ReactCurrentDispatcher,
	    findHostInstanceByFiber: findHostInstanceByFiber,
	    findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
	    // React Refresh
	    findHostInstancesForRefresh:  findHostInstancesForRefresh ,
	    scheduleRefresh:  scheduleRefresh ,
	    scheduleRoot:  scheduleRoot ,
	    setRefreshHandler:  setRefreshHandler ,
	    // Enables DevTools to append owner stacks to error messages in DEV mode.
	    getCurrentFiber:  getCurrentFiberForDevTools ,
	    // Enables DevTools to detect reconciler version rather than renderer version
	    // which may not match for third party renderers.
	    reconcilerVersion: ReactVersion
	  });
	}

	exports.attemptContinuousHydration = attemptContinuousHydration;
	exports.attemptDiscreteHydration = attemptDiscreteHydration;
	exports.attemptHydrationAtCurrentPriority = attemptHydrationAtCurrentPriority;
	exports.attemptSynchronousHydration = attemptSynchronousHydration;
	exports.batchedUpdates = batchedUpdates;
	exports.createComponentSelector = createComponentSelector;
	exports.createContainer = createContainer;
	exports.createHasPseudoClassSelector = createHasPseudoClassSelector;
	exports.createHydrationContainer = createHydrationContainer;
	exports.createPortal = createPortal;
	exports.createRoleSelector = createRoleSelector;
	exports.createTestNameSelector = createTestNameSelector;
	exports.createTextSelector = createTextSelector;
	exports.deferredUpdates = deferredUpdates;
	exports.discreteUpdates = discreteUpdates;
	exports.findAllNodes = findAllNodes;
	exports.findBoundingRects = findBoundingRects;
	exports.findHostInstance = findHostInstance;
	exports.findHostInstanceWithNoPortals = findHostInstanceWithNoPortals;
	exports.findHostInstanceWithWarning = findHostInstanceWithWarning;
	exports.flushControlled = flushControlled;
	exports.flushPassiveEffects = flushPassiveEffects;
	exports.flushSync = flushSync;
	exports.focusWithin = focusWithin;
	exports.getCurrentUpdatePriority = getCurrentUpdatePriority;
	exports.getFindAllNodesFailureDescription = getFindAllNodesFailureDescription;
	exports.getPublicRootInstance = getPublicRootInstance;
	exports.injectIntoDevTools = injectIntoDevTools;
	exports.isAlreadyRendering = isAlreadyRendering;
	exports.observeVisibleRects = observeVisibleRects;
	exports.registerMutableSourceForHydration = registerMutableSourceForHydration;
	exports.runWithPriority = runWithPriority;
	exports.shouldError = shouldError;
	exports.shouldSuspend = shouldSuspend;
	exports.updateContainer = updateContainer;
	    return exports;
	  };
	}
	return reactReconciler_development.exports;
}

var hasRequiredReactReconciler;

function requireReactReconciler () {
	if (hasRequiredReactReconciler) return reactReconciler.exports;
	hasRequiredReactReconciler = 1;

	if (process.env.NODE_ENV === 'production') {
	  reactReconciler.exports = requireReactReconciler_production_min();
	} else {
	  reactReconciler.exports = requireReactReconciler_development();
	}
	return reactReconciler.exports;
}

var reactReconcilerExports = requireReactReconciler();
var ReactFiberReconciler = /*@__PURE__*/getDefaultExportFromCjs(reactReconcilerExports);

var constants = {exports: {}};

var reactReconcilerConstants_production_min = {};

/**
 * @license React
 * react-reconciler-constants.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactReconcilerConstants_production_min;

function requireReactReconcilerConstants_production_min () {
	if (hasRequiredReactReconcilerConstants_production_min) return reactReconcilerConstants_production_min;
	hasRequiredReactReconcilerConstants_production_min = 1;
reactReconcilerConstants_production_min.ConcurrentRoot=1;reactReconcilerConstants_production_min.ContinuousEventPriority=4;reactReconcilerConstants_production_min.DefaultEventPriority=16;reactReconcilerConstants_production_min.DiscreteEventPriority=1;reactReconcilerConstants_production_min.IdleEventPriority=536870912;reactReconcilerConstants_production_min.LegacyRoot=0;
	return reactReconcilerConstants_production_min;
}

var reactReconcilerConstants_development = {};

/**
 * @license React
 * react-reconciler-constants.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var hasRequiredReactReconcilerConstants_development;

function requireReactReconcilerConstants_development () {
	if (hasRequiredReactReconcilerConstants_development) return reactReconcilerConstants_development;
	hasRequiredReactReconcilerConstants_development = 1;

	if (process.env.NODE_ENV !== "production") {
	  (function() {

	var SyncLane =
	/*                        */
	1;
	var InputContinuousLane =
	/*             */
	4;
	var DefaultLane =
	/*                     */
	16;
	var IdleLane =
	/*                        */
	536870912;

	var DiscreteEventPriority = SyncLane;
	var ContinuousEventPriority = InputContinuousLane;
	var DefaultEventPriority = DefaultLane;
	var IdleEventPriority = IdleLane;

	var LegacyRoot = 0;
	var ConcurrentRoot = 1;

	reactReconcilerConstants_development.ConcurrentRoot = ConcurrentRoot;
	reactReconcilerConstants_development.ContinuousEventPriority = ContinuousEventPriority;
	reactReconcilerConstants_development.DefaultEventPriority = DefaultEventPriority;
	reactReconcilerConstants_development.DiscreteEventPriority = DiscreteEventPriority;
	reactReconcilerConstants_development.IdleEventPriority = IdleEventPriority;
	reactReconcilerConstants_development.LegacyRoot = LegacyRoot;
	  })();
	}
	return reactReconcilerConstants_development;
}

var hasRequiredConstants;

function requireConstants () {
	if (hasRequiredConstants) return constants.exports;
	hasRequiredConstants = 1;

	if (process.env.NODE_ENV === 'production') {
	  constants.exports = requireReactReconcilerConstants_production_min();
	} else {
	  constants.exports = requireReactReconcilerConstants_development();
	}
	return constants.exports;
}

var constantsExports = requireConstants();

var GlobalExports = requireGlobal();

const propsToSkip = {
    children: true,
    ref: true,
    key: true,
    style: true,
    forwardedRef: true,
    unstable_applyCache: true,
    unstable_applyDrawHitFromCache: true,
};
let zIndexWarningShowed = false;
let dragWarningShowed = false;
const EVENTS_NAMESPACE = '.react-konva-event';
let useStrictMode$1 = false;
function toggleStrictMode(value) {
    useStrictMode$1 = value;
}
const DRAGGABLE_WARNING = `ReactKonva: You have a Konva node with draggable = true and position defined but no onDragMove or onDragEnd events are handled.
Position of a node will be changed during drag&drop, so you should update state of the react app as well.
Consider to add onDragMove or onDragEnd events.
For more info see: https://github.com/konvajs/react-konva/issues/256
`;
const Z_INDEX_WARNING = `ReactKonva: You are using "zIndex" attribute for a Konva node.
react-konva may get confused with ordering. Just define correct order of elements in your render function of a component.
For more info see: https://github.com/konvajs/react-konva/issues/194
`;
const EMPTY_PROPS = {};
function applyNodeProps(instance, props, oldProps = EMPTY_PROPS) {
    // don't use zIndex in react-konva
    if (!zIndexWarningShowed && 'zIndex' in props) {
        console.warn(Z_INDEX_WARNING);
        zIndexWarningShowed = true;
    }
    // check correct draggable usage
    if (!dragWarningShowed && props.draggable) {
        var hasPosition = props.x !== undefined || props.y !== undefined;
        var hasEvents = props.onDragEnd || props.onDragMove;
        if (hasPosition && !hasEvents) {
            console.warn(DRAGGABLE_WARNING);
            dragWarningShowed = true;
        }
    }
    // check old props
    // we need to unset properties that are not in new props
    // and remove all events
    for (var key in oldProps) {
        if (propsToSkip[key]) {
            continue;
        }
        var isEvent = key.slice(0, 2) === 'on';
        var propChanged = oldProps[key] !== props[key];
        // if that is a changed event, we need to remove it
        if (isEvent && propChanged) {
            var eventName = key.substr(2).toLowerCase();
            if (eventName.substr(0, 7) === 'content') {
                eventName =
                    'content' +
                        eventName.substr(7, 1).toUpperCase() +
                        eventName.substr(8);
            }
            instance.off(eventName, oldProps[key]);
        }
        var toRemove = !props.hasOwnProperty(key);
        if (toRemove) {
            instance.setAttr(key, undefined);
        }
    }
    var strictUpdate = useStrictMode$1 || props._useStrictMode;
    var updatedProps = {};
    var hasUpdates = false;
    const newEvents = {};
    for (var key in props) {
        if (propsToSkip[key]) {
            continue;
        }
        var isEvent = key.slice(0, 2) === 'on';
        var toAdd = oldProps[key] !== props[key];
        if (isEvent && toAdd) {
            var eventName = key.substr(2).toLowerCase();
            if (eventName.substr(0, 7) === 'content') {
                eventName =
                    'content' +
                        eventName.substr(7, 1).toUpperCase() +
                        eventName.substr(8);
            }
            // check that event is not undefined
            if (props[key]) {
                newEvents[eventName] = props[key];
            }
        }
        if (!isEvent &&
            (props[key] !== oldProps[key] ||
                (strictUpdate && props[key] !== instance.getAttr(key)))) {
            hasUpdates = true;
            updatedProps[key] = props[key];
        }
    }
    if (hasUpdates) {
        instance.setAttrs(updatedProps);
        updatePicture(instance);
    }
    // subscribe to events AFTER we set attrs
    // we need it to fix https://github.com/konvajs/react-konva/issues/471
    // settings attrs may add events. Like "draggable: true" will add "mousedown" listener
    for (var eventName in newEvents) {
        instance.on(eventName + EVENTS_NAMESPACE, newEvents[eventName]);
    }
}
function updatePicture(node) {
    if (!GlobalExports.Konva.autoDrawEnabled) {
        var drawingNode = node.getLayer() || node.getStage();
        drawingNode && drawingNode.batchDraw();
    }
}

var schedulerExports = requireScheduler();

const NO_CONTEXT = {};
const UPDATE_SIGNAL = {};
// for react-spring capability
Konva$1.Node.prototype._applyProps = applyNodeProps;
function appendInitialChild(parentInstance, child) {
    if (typeof child === 'string') {
        // Noop for string children of Text (eg <Text>foo</Text>)
        console.error(`Do not use plain text as child of Konva.Node. You are using text: ${child}`);
        return;
    }
    parentInstance.add(child);
    updatePicture(parentInstance);
}
function createInstance(type, props, internalInstanceHandle) {
    let NodeClass = Konva$1[type];
    if (!NodeClass) {
        console.error(`Konva has no node with the type ${type}. Group will be used instead. If you use minimal version of react-konva, just import required nodes into Konva: "import "konva/lib/shapes/${type}"  If you want to render DOM elements as part of canvas tree take a look into this demo: https://konvajs.github.io/docs/react/DOM_Portal.html`);
        NodeClass = Konva$1.Group;
    }
    // we need to split props into events and non events
    // we we can pass non events into constructor directly
    // that way the performance should be better
    // we we apply change "applyNodeProps"
    // then it will trigger change events on first run
    // but we don't need them!
    const propsWithoutEvents = {};
    const propsWithOnlyEvents = {};
    for (var key in props) {
        var isEvent = key.slice(0, 2) === 'on';
        if (isEvent) {
            propsWithOnlyEvents[key] = props[key];
        }
        else {
            propsWithoutEvents[key] = props[key];
        }
    }
    const instance = new NodeClass(propsWithoutEvents);
    applyNodeProps(instance, propsWithOnlyEvents);
    return instance;
}
function createTextInstance(text, rootContainerInstance, internalInstanceHandle) {
    console.error(`Text components are not supported for now in ReactKonva. Your text is: "${text}"`);
}
function finalizeInitialChildren(domElement, type, props) {
    return false;
}
function getPublicInstance(instance) {
    return instance;
}
function prepareForCommit() {
    return null;
}
function preparePortalMount() {
    return null;
}
function prepareUpdate(domElement, type, oldProps, newProps) {
    return UPDATE_SIGNAL;
}
function resetAfterCommit() {
    // Noop
}
function resetTextContent(domElement) {
    // Noop
}
function shouldDeprioritizeSubtree(type, props) {
    return false;
}
function getRootHostContext() {
    return NO_CONTEXT;
}
function getChildHostContext() {
    return NO_CONTEXT;
}
const scheduleTimeout = setTimeout;
const cancelTimeout = clearTimeout;
const noTimeout = -1;
// export const schedulePassiveEffects = scheduleDeferredCallback;
// export const cancelPassiveEffects = cancelDeferredCallback;
function shouldSetTextContent(type, props) {
    return false;
}
// The Konva renderer is secondary to the React DOM renderer.
const isPrimaryRenderer = false;
const warnsIfNotActing = true;
const supportsMutation = true;
function appendChild(parentInstance, child) {
    if (child.parent === parentInstance) {
        child.moveToTop();
    }
    else {
        parentInstance.add(child);
    }
    updatePicture(parentInstance);
}
function appendChildToContainer(parentInstance, child) {
    if (child.parent === parentInstance) {
        child.moveToTop();
    }
    else {
        parentInstance.add(child);
    }
    updatePicture(parentInstance);
}
function insertBefore(parentInstance, child, beforeChild) {
    // child._remove() will not stop dragging
    // but child.remove() will stop it, but we don't need it
    // removing will reset zIndexes
    child._remove();
    parentInstance.add(child);
    child.setZIndex(beforeChild.getZIndex());
    updatePicture(parentInstance);
}
function insertInContainerBefore(parentInstance, child, beforeChild) {
    insertBefore(parentInstance, child, beforeChild);
}
function removeChild(parentInstance, child) {
    child.destroy();
    child.off(EVENTS_NAMESPACE);
    updatePicture(parentInstance);
}
function removeChildFromContainer(parentInstance, child) {
    child.destroy();
    child.off(EVENTS_NAMESPACE);
    updatePicture(parentInstance);
}
function commitTextUpdate(textInstance, oldText, newText) {
    console.error(`Text components are not yet supported in ReactKonva. You text is: "${newText}"`);
}
function commitMount(instance, type, newProps) {
    // Noop
}
function commitUpdate(instance, updatePayload, type, oldProps, newProps) {
    applyNodeProps(instance, newProps, oldProps);
}
function hideInstance(instance) {
    instance.hide();
    updatePicture(instance);
}
function hideTextInstance(textInstance) {
    // Noop
}
function unhideInstance(instance, props) {
    if (props.visible == null || props.visible) {
        instance.show();
    }
}
function unhideTextInstance(textInstance, text) {
    // Noop
}
function clearContainer(container) {
    // Noop
}
function detachDeletedInstance() { }
const getCurrentEventPriority = () => constantsExports.DefaultEventPriority;

var HostConfig = /*#__PURE__*/Object.freeze({
	__proto__: null,
	appendChild: appendChild,
	appendChildToContainer: appendChildToContainer,
	appendInitialChild: appendInitialChild,
	cancelTimeout: cancelTimeout,
	clearContainer: clearContainer,
	commitMount: commitMount,
	commitTextUpdate: commitTextUpdate,
	commitUpdate: commitUpdate,
	createInstance: createInstance,
	createTextInstance: createTextInstance,
	detachDeletedInstance: detachDeletedInstance,
	finalizeInitialChildren: finalizeInitialChildren,
	getChildHostContext: getChildHostContext,
	getCurrentEventPriority: getCurrentEventPriority,
	getPublicInstance: getPublicInstance,
	getRootHostContext: getRootHostContext,
	hideInstance: hideInstance,
	hideTextInstance: hideTextInstance,
	idlePriority: schedulerExports.unstable_IdlePriority,
	insertBefore: insertBefore,
	insertInContainerBefore: insertInContainerBefore,
	isPrimaryRenderer: isPrimaryRenderer,
	noTimeout: noTimeout,
	now: schedulerExports.unstable_now,
	prepareForCommit: prepareForCommit,
	preparePortalMount: preparePortalMount,
	prepareUpdate: prepareUpdate,
	removeChild: removeChild,
	removeChildFromContainer: removeChildFromContainer,
	resetAfterCommit: resetAfterCommit,
	resetTextContent: resetTextContent,
	run: schedulerExports.unstable_runWithPriority,
	scheduleTimeout: scheduleTimeout,
	shouldDeprioritizeSubtree: shouldDeprioritizeSubtree,
	shouldSetTextContent: shouldSetTextContent,
	supportsMutation: supportsMutation,
	unhideInstance: unhideInstance,
	unhideTextInstance: unhideTextInstance,
	warnsIfNotActing: warnsIfNotActing
});

var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var _a, _b;
typeof window !== "undefined" && (((_a = window.document) == null ? void 0 : _a.createElement) || ((_b = window.navigator) == null ? void 0 : _b.product) === "ReactNative") ? React__namespace.useLayoutEffect : React__namespace.useEffect;
function traverseFiber(fiber, ascending, selector) {
  if (!fiber)
    return;
  if (selector(fiber) === true)
    return fiber;
  let child = ascending ? fiber.return : fiber.child;
  while (child) {
    const match = traverseFiber(child, ascending, selector);
    if (match)
      return match;
    child = ascending ? null : child.sibling;
  }
}
function wrapContext(context) {
  try {
    return Object.defineProperties(context, {
      _currentRenderer: {
        get() {
          return null;
        },
        set() {
        }
      },
      _currentRenderer2: {
        get() {
          return null;
        },
        set() {
        }
      }
    });
  } catch (_) {
    return context;
  }
}
const error = console.error;
console.error = function() {
  const message = [...arguments].join("");
  if ((message == null ? void 0 : message.startsWith("Warning:")) && message.includes("useContext")) {
    console.error = error;
    return;
  }
  return error.apply(this, arguments);
};
const FiberContext = wrapContext(React__namespace.createContext(null));
class FiberProvider extends React__namespace.Component {
  render() {
    return /* @__PURE__ */ React__namespace.createElement(FiberContext.Provider, {
      value: this._reactInternals
    }, this.props.children);
  }
}
function useFiber() {
  const root = React__namespace.useContext(FiberContext);
  if (root === null)
    throw new Error("its-fine: useFiber must be called within a <FiberProvider />!");
  const id = React__namespace.useId();
  const fiber = React__namespace.useMemo(() => {
    for (const maybeFiber of [root, root == null ? void 0 : root.alternate]) {
      if (!maybeFiber)
        continue;
      const fiber2 = traverseFiber(maybeFiber, false, (node) => {
        let state = node.memoizedState;
        while (state) {
          if (state.memoizedState === id)
            return true;
          state = state.next;
        }
      });
      if (fiber2)
        return fiber2;
    }
  }, [root, id]);
  return fiber;
}
function useContextMap() {
  const fiber = useFiber();
  const [contextMap] = React__namespace.useState(() => /* @__PURE__ */ new Map());
  contextMap.clear();
  let node = fiber;
  while (node) {
    if (node.type && typeof node.type === "object") {
      const enableRenderableContext = node.type._context === void 0 && node.type.Provider === node.type;
      const context = enableRenderableContext ? node.type : node.type._context;
      if (context && context !== FiberContext && !contextMap.has(context)) {
        contextMap.set(context, React__namespace.useContext(wrapContext(context)));
      }
    }
    node = node.return;
  }
  return contextMap;
}
function useContextBridge() {
  const contextMap = useContextMap();
  return React__namespace.useMemo(
    () => Array.from(contextMap.keys()).reduce(
      (Prev, context) => (props) => /* @__PURE__ */ React__namespace.createElement(Prev, null, /* @__PURE__ */ React__namespace.createElement(context.Provider, __spreadProps(__spreadValues({}, props), {
        value: contextMap.get(context)
      }))),
      (props) => /* @__PURE__ */ React__namespace.createElement(FiberProvider, __spreadValues({}, props))
    ),
    [contextMap]
  );
}

/**
 * Based on ReactArt.js
 * Copyright (c) 2017-present Lavrenov Anton.
 * All rights reserved.
 *
 * MIT
 */
function usePrevious(value) {
    const ref = React.useRef({});
    React.useLayoutEffect(() => {
        ref.current = value;
    });
    React.useLayoutEffect(() => {
        return () => {
            // when using suspense it is possible that stage is unmounted
            // but React still keep component ref
            // in that case we need to manually flush props
            // we have a special test for that
            ref.current = {};
        };
    }, []);
    return ref.current;
}
const StageWrap = (props) => {
    const container = React.useRef();
    const stage = React.useRef();
    const fiberRef = React.useRef();
    const oldProps = usePrevious(props);
    const Bridge = useContextBridge();
    const _setRef = (stage) => {
        const { forwardedRef } = props;
        if (!forwardedRef) {
            return;
        }
        if (typeof forwardedRef === 'function') {
            forwardedRef(stage);
        }
        else {
            forwardedRef.current = stage;
        }
    };
    React.useLayoutEffect(() => {
        stage.current = new Konva$1.Stage({
            width: props.width,
            height: props.height,
            container: container.current,
        });
        _setRef(stage.current);
        // @ts-ignore
        fiberRef.current = KonvaRenderer.createContainer(stage.current, constantsExports.LegacyRoot, false, null);
        KonvaRenderer.updateContainer(React.createElement(Bridge, {}, props.children), fiberRef.current);
        return () => {
            if (!Konva$1.isBrowser) {
                return;
            }
            _setRef(null);
            KonvaRenderer.updateContainer(null, fiberRef.current, null);
            stage.current.destroy();
        };
    }, []);
    React.useLayoutEffect(() => {
        _setRef(stage.current);
        applyNodeProps(stage.current, props, oldProps);
        KonvaRenderer.updateContainer(React.createElement(Bridge, {}, props.children), fiberRef.current, null);
    });
    return React.createElement('div', {
        ref: container,
        id: props.id,
        accessKey: props.accessKey,
        className: props.className,
        role: props.role,
        style: props.style,
        tabIndex: props.tabIndex,
        title: props.title,
    });
};
const Layer = 'Layer';
const Group = 'Group';
const Rect = 'Rect';
const Ellipse$2 = 'Ellipse';
const Line$2 = 'Line';
const Image$1 = 'Image';
const Text$3 = 'Text';
const RegularPolygon = 'RegularPolygon';
const Arrow$3 = 'Arrow';
const Transformer = 'Transformer';
// @ts-ignore
const KonvaRenderer = ReactFiberReconciler(HostConfig);
KonvaRenderer.injectIntoDevTools({
    // @ts-ignore
    findHostInstanceByFiber: () => null,
    bundleType: process.env.NODE_ENV !== 'production' ? 1 : 0,
    version: React.version,
    rendererPackageName: 'react-konva',
});
const Stage = React.forwardRef((props, ref) => {
    return React.createElement(FiberProvider, {}, React.createElement(StageWrap, { ...props, forwardedRef: ref }));
});
const useStrictMode = toggleStrictMode;

const getDimensionsMinimalRatio = (firstWidth, firstHeight, secondWidth, secondHeight) => {
  const widthScale = firstWidth / secondWidth;
  const heightScale = firstHeight / secondHeight;
  return Math.min(widthScale, heightScale) || 1;
};

const ROOT_CONTAINER_CLASS_NAME = 'FIE_root';
const DESIGN_LAYER_ID = 'FIE_design-layer';
const TRANSFORMERS_LAYER_ID = 'FIE_transformers-layer';
const IMAGE_NODE_ID = 'FIE_original-image';
const NODES_TRANSFORMER_ID = 'FIE_nodes-transformer';
const WATERMARK_ANNOTATION_ID$1 = 'watermark';
const TRANSLATIONS_GRID_UUID = '353297d2-40b4-4684-a875-45a2178a8157';
const DEFAULT_SAVE_QUALITY = 0.92;
const TABS_IDS = {
  FINETUNE: 'Finetune',
  FILTERS: 'Filters',
  ADJUST: 'Adjust',
  WATERMARK: 'Watermark',
  ANNOTATE: 'Annotate',
  RESIZE: 'Resize'
};
const TOOLS_IDS = {
  CROP: 'Crop',
  ROTATE: 'Rotate',
  FLIP_X: 'Flip_X',
  FLIP_Y: 'Flip_Y',
  BRIGHTNESS: 'Brightness',
  CONTRAST: 'Contrast',
  HSV: 'HueSaturationValue',
  WARMTH: 'Warmth',
  BLUR: 'Blur',
  THRESHOLD: 'Threshold',
  POSTERIZE: 'Posterize',
  PIXELATE: 'Pixelate',
  NOISE: 'Noise',
  FILTERS: 'Filters',
  RECT: 'Rect',
  ELLIPSE: 'Ellipse',
  POLYGON: 'Polygon',
  TEXT: 'Text',
  LINE: 'Line',
  IMAGE: 'Image',
  ARROW: 'Arrow',
  WATERMARK: 'Watermark',
  PEN: 'Pen',
  RESIZE: 'Resize'
};
const FLIP_DIRECTIONS = {
  X: 'X',
  Y: 'Y'
};
const DEFAULT_ZOOM_FACTOR = 1;
const SUPPORTED_IMAGE_TYPES = ['png', 'jpeg', 'jpg', 'webp'];
const POSSIBLE_IMAGE_TYPES = [...SUPPORTED_IMAGE_TYPES, 'svg', 'gif', 'avif', 'apng'];
const DEFAULT_IMAGE_TYPE = SUPPORTED_IMAGE_TYPES[0];
const POINTER_ICONS = {
  DEFAULT: 'default',
  DRAW: 'crosshair',
  SELECT: 'pointer',
  MOVE: 'move',
  DRAG: 'GRAB'
};
const ORIGINAL_CROP = 'Crop';
const CUSTOM_CROP = 'custom';
const ELLIPSE_CROP = 'ellipse';
const POSITIONS = {
  TOP_LEFT: 'top-left',
  TOP_CENTER: 'top-center',
  TOP_RIGHT: 'top-right',
  MIDDLE_LEFT: 'middle-left',
  MIDDLE_CENTER: 'middle-center',
  MIDDLE_RIGHT: 'middle-right',
  BOTTOM_LEFT: 'bottom-left',
  BOTTOM_CENTER: 'bottom-center',
  BOTTOM_RIGHT: 'bottom-right'
};
const MIN_CROP = {
  WIDTH: 14,
  HEIGHT: 14
};
const CLOSING_REASONS = {
  AFTER_SAVE: 'after-saving',
  CLOSE_BUTTON: 'close-button-clicked',
  BACK_BUTTON: 'back-button-clicked'
};
const FEEDBACK_STATUSES = {
  WARNING: 'warning',
  ERROR: 'error'
};
const EDITOR_TO_CLOUDIMG_POSITIONS = {
  top: 'north',
  bottom: 'south',
  left: 'west',
  center: 'center',
  right: 'east'
};
const CLOUDIMG_TO_EDITOR_POSITIONS = {
  northwest: 'top-left',
  northcenter: 'top-center',
  northeast: 'top-right',
  centerwest: 'center-left',
  centercenter: 'center-center',
  centereast: 'center-right',
  southwest: 'bottom-left',
  southcenter: 'bottom-center',
  southeast: 'bottom-right'
};

const cropImage = (context, cropBox, noEllipticalCrop = false) => {
  if (cropBox.ratio === ELLIPSE_CROP && !noEllipticalCrop) {
    context.ellipse(cropBox.x + cropBox.width / 2, cropBox.y + cropBox.height / 2, cropBox.width / 2, cropBox.height / 2, 0, 0, 2 * Math.PI);
  } else {
    context.rect(cropBox.x, cropBox.y, cropBox.width, cropBox.height);
  }
};

const ADD_FILTER = 'ADD_FILTER';
const addFilter = (state, payload) => ({
  ...state,
  isDesignState: !payload.dismissHistory,
  // not stored in state, used in reducer to consider in undo/redo stacks
  filter: payload.filter || null
});

const HIDE_LOADER = 'HIDE_LOADER';
const hideLoader = state => ({
  ...state,
  isLoadingGlobally: false
});

/** Internal Dependencies */
var defaultConfig = {
  theme: {
    palette: {
      'bg-primary-active': '#ECF3FF'
    },
    typography: {
      fontFamily: 'Roboto, Arial'
    }
  },
  annotationsCommon: {
    fill: '#000000',
    // or should be no color? === undefined
    stroke: '#000000',
    // or should be no color? === undefined
    strokeWidth: 0,
    shadowOffsetX: 0,
    shadowOffsetY: 0,
    shadowBlur: 0,
    shadowColor: '#000000',
    // or should be no color? === undefined
    shadowOpacity: 1,
    opacity: 1
  },
  [TOOLS_IDS.TEXT]: {
    text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',
    fontFamily: 'Arial',
    fonts: [{
      label: 'Arial',
      value: 'Arial'
    }, 'Tahoma', 'Sans-serif', {
      label: 'Comic Sans',
      value: 'Comic-sans'
    }],
    fontSize: 14,
    letterSpacing: 0,
    lineHeight: 1,
    align: 'left',
    // left, center, right
    fontStyle: 'normal',
    // 'bold', 'italic', 'bold italic'
    onFontChange: undefined
  },
  [TOOLS_IDS.IMAGE]: {
    fill: undefined,
    disableUpload: false,
    gallery: []
  },
  [TOOLS_IDS.RECT]: {
    cornerRadius: 0
  },
  [TOOLS_IDS.ELLIPSE]: {},
  [TOOLS_IDS.POLYGON]: {
    sides: 3
  },
  [TOOLS_IDS.PEN]: {
    strokeWidth: 1,
    tension: 0.5,
    lineCap: 'round',
    selectAnnotationAfterDrawing: true
  },
  [TOOLS_IDS.LINE]: {
    lineCap: 'butt',
    // butt/round/square
    strokeWidth: 1
  },
  [TOOLS_IDS.ARROW]: {
    strokeWidth: 6,
    lineCap: 'butt',
    pointerLength: undefined,
    pointerWidth: undefined
  },
  [TOOLS_IDS.WATERMARK]: {
    gallery: [],
    textScalingRatio: 0.5,
    imageScalingRatio: 0.5,
    hideTextWatermark: false,
    onUploadWatermarkImgClick: undefined
  },
  [TOOLS_IDS.CROP]: {
    minWidth: MIN_CROP.WIDTH,
    minHeight: MIN_CROP.HEIGHT,
    width: null,
    height: null,
    maxWidth: null,
    maxHeight: null,
    ratio: null,
    ratioTitleKey: undefined,
    noPresets: false,
    autoResize: false,
    presetsItems: [],
    presetsFolders: [],
    lockCropAreaAt: null
  },
  [TOOLS_IDS.ROTATE]: {
    angle: 60,
    componentType: 'slider' // slider | buttons
  },
  tabsIds: [],
  defaultTabId: TABS_IDS.ADJUST,
  defaultToolId: TOOLS_IDS.CROP,
  onClose: undefined,
  onSave: undefined,
  onBeforeSave: undefined,
  closeAfterSave: false,
  defaultSavedImageName: undefined,
  defaultSavedImageType: null,
  defaultSavedImageQuality: 0.92,
  forceToPngInEllipticalCrop: false,
  useBackendTranslations: true,
  translations: null,
  language: 'en',
  avoidChangesNotSavedAlertOnLeave: false,
  loadableDesignState: null,
  moreSaveOptions: [],
  savingPixelRatio: 4,
  previewPixelRatio: window ? window.devicePixelRatio || 1 : 1,
  showBackButton: false,
  useCloudimage: false,
  cloudimage: {
    token: '',
    dontPrefixUrl: false,
    domain: 'cloudimg.io',
    version: '',
    loadableQuery: '',
    secureProtocol: true,
    imageSealing: {
      enable: false,
      salt: '',
      charCount: 10,
      includeParams: []
    }
  },
  observePluginContainerSize: false,
  showCanvasOnly: false,
  getCurrentImgDataFnRef: undefined,
  onModify: undefined,
  useZoomPresetsMenu: true,
  disableZooming: false,
  noCrossOrigin: false,
  disableSaveIfNoChanges: false,
  removeSaveButton: false,
  resetOnImageSourceChange: false,
  backgroundColor: undefined,
  backgroundImage: undefined
};

const BaseFilters = {
  apply: (imageData, ...filters) => {
    const pixels = imageData.data; //  [0, 1, 2, 3,...] => [r, g, b, a, ...]
    const len = pixels.length;
    for (let i = 0; i < len; i += 4) {
      for (const filter of filters) {
        [pixels[i], pixels[i + 1], pixels[i + 2]] = filter([pixels[i], pixels[i + 1], pixels[i + 2]]);
      }
    }
  },
  brightness: value => pixelRGB => {
    let currentValue = value;
    currentValue = currentValue > 1 ? 1 : currentValue;
    currentValue = currentValue < -1 ? -1 : currentValue;
    // eslint-disable-next-line no-bitwise
    currentValue = ~~(255 * currentValue);
    return [pixelRGB[0] + currentValue, pixelRGB[1] + currentValue, pixelRGB[2] + currentValue];
  },
  contrast: value => pixelRGB => {
    let currentValue = value;
    currentValue *= 255;
    const factor = 259 * (currentValue + 255) / (255 * (259 - currentValue));
    return [factor * (pixelRGB[0] - 128) + 128, factor * (pixelRGB[1] - 128) + 128, factor * (pixelRGB[2] - 128) + 128];
  },
  saturation: value => pixelRGB => {
    let currentValue = value;
    currentValue = currentValue < -1 ? -1 : currentValue;
    const r = pixelRGB[0];
    const g = pixelRGB[1];
    const b = pixelRGB[2];
    const gray = 0.2989 * r + 0.587 * g + 0.114 * b; // weights from CCIR 601 spec
    return [-gray * currentValue + r * (1 + currentValue), -gray * currentValue + g * (1 + currentValue), -gray * currentValue + b * (1 + currentValue)];
  },
  grayscale: () => pixelRGB => {
    const r = pixelRGB[0];
    const g = pixelRGB[1];
    const b = pixelRGB[2];
    const average = 0.2126 * r + 0.7152 * g + 0.0722 * b;
    return new Array(3).fill(average);
  },
  sepia: value => pixelRGB => {
    const r = pixelRGB[0];
    const g = pixelRGB[1];
    const b = pixelRGB[2];
    return [r * (1 - 0.607 * value) + g * 0.769 * value + b * 0.189 * value, r * 0.349 * value + g * (1 - 0.314 * value) + b * 0.168 * value, r * 0.272 * value + g * 0.534 * value + b * (1 - 0.869 * value)];
  },
  adjustRGB: adjustingRGB => pixelRGB => [pixelRGB[0] * adjustingRGB[0],
  // R
  pixelRGB[1] * adjustingRGB[1],
  // G
  pixelRGB[2] * adjustingRGB[2] // B
  ],
  // RGBV => [R, G, B, Value]
  colorFilter: colorRGBV => pixelRGB => {
    const r = pixelRGB[0];
    const g = pixelRGB[1];
    const b = pixelRGB[2];
    const value = colorRGBV[3];
    return [r - (r - colorRGBV[0]) * value, g - (g - colorRGBV[1]) * value, b - (b - colorRGBV[2]) * value];
  }
};

/**
 * BlackAndWhite Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([BlackAndWhite]);
 */
function BlackAndWhite(imageData) {
  const thresholdValue = 100;
  BaseFilters.apply(imageData, pixels => {
    const isWhite = (pixels[0] + pixels[1] + pixels[2]) / 3 > thresholdValue;
    const val = isWhite ? 255 : 0;
    return [val, val, val];
  });
}
BlackAndWhite.filterName = 'BlackAndWhite'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const BRIGHTNESS_CONST$i = 0.1;
const CONTRAST_CONST$f = 0.1;
const SATURATION_CONST$i = 0.15;

/**
 * Clarendon Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Clarendon]);
 */
function Clarendon(imageData) {
  BaseFilters.apply(imageData, BaseFilters.brightness(BRIGHTNESS_CONST$i), BaseFilters.contrast(CONTRAST_CONST$f), BaseFilters.saturation(SATURATION_CONST$i));
}
Clarendon.filterName = 'Clarendon'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const SEPIA_CONST$5 = 0.04;
const CONTRAST_CONST$e = -0.15;

/**
 * Gingham Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Gingham]);
 */
function Gingham(imageData) {
  BaseFilters.apply(imageData, BaseFilters.sepia(SEPIA_CONST$5), BaseFilters.contrast(CONTRAST_CONST$e));
}
Gingham.filterName = 'Gingham'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const BRIGHTNESS_CONST$h = 0.1;

/**
 * Moon Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Moon]);
 */
function Moon(imageData) {
  BaseFilters.apply(imageData, BaseFilters.grayscale(), BaseFilters.brightness(BRIGHTNESS_CONST$h));
  const pixels = imageData.data; //  [0, 1, 2, 3,...] => [r, g, b, a, ...]
  pixels.length;
}
Moon.filterName = 'Moon'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const BRIGHTNESS_CONST$g = 0.08;
const ADJUST_RGB_CONST$5 = [1, 1.03, 1.05];
const SATURATION_CONST$h = 0.12;

/**
 * Lark Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Lark]);
 */
function Lark(imageData) {
  BaseFilters.apply(imageData, BaseFilters.brightness(BRIGHTNESS_CONST$g), BaseFilters.adjustRGB(ADJUST_RGB_CONST$5), BaseFilters.saturation(SATURATION_CONST$h));
}
Lark.filterName = 'Lark'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const SEPIA_CONST$4 = 0.4;
const BRIGHTNESS_CONST$f = 0.13;
const CONTRAST_CONST$d = -0.05;

/**
 * Reyes Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Reyes]);
 */
function Reyes(imageData) {
  BaseFilters.apply(imageData, BaseFilters.sepia(SEPIA_CONST$4), BaseFilters.brightness(BRIGHTNESS_CONST$f), BaseFilters.contrast(CONTRAST_CONST$d));
}
Reyes.filterName = 'Reyes'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const ADJUST_RGB_CONST$4 = [1.01, 1.04, 1];
const SATURATION_CONST$g = 0.3;

/**
 * Juno Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Juno]);
 */
function Juno(imageData) {
  BaseFilters.apply(imageData, BaseFilters.adjustRGB(ADJUST_RGB_CONST$4), BaseFilters.saturation(SATURATION_CONST$g));
}
Juno.filterName = 'Juno'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const BRIGHTNESS_CONST$e = 0.1;
const SATURATION_CONST$f = -0.5;

/**
 * Slumber Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Slumber]);
 */
function Slumber(imageData) {
  BaseFilters.apply(imageData, BaseFilters.brightness(BRIGHTNESS_CONST$e), BaseFilters.saturation(SATURATION_CONST$f));
}
Slumber.filterName = 'Slumber'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const ADJUST_RGB_CONST$3 = [1.04, 1, 1.02];
const SATURATION_CONST$e = -0.05;

/**
 * Crema Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Crema]);
 */
function Crema(imageData) {
  BaseFilters.apply(imageData, BaseFilters.adjustRGB(ADJUST_RGB_CONST$3), BaseFilters.saturation(SATURATION_CONST$e));
}
Crema.filterName = 'Crema'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const BRIGHTNESS_CONST$d = 0.05;
const SATURATION_CONST$d = -0.03;

/**
 * Ludwig Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Ludwig]);
 */
function Ludwig(imageData) {
  BaseFilters.apply(imageData, BaseFilters.brightness(BRIGHTNESS_CONST$d), BaseFilters.saturation(SATURATION_CONST$d));
}
Ludwig.filterName = 'Ludwig'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$i = [228, 130, 225, 0.13];
const SATURATION_CONST$c = -0.2;

/**
 * Aden Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Aden]);
 */
function Aden(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$i), BaseFilters.saturation(SATURATION_CONST$c));
}
Aden.filterName = 'Aden'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const ADJUST_RGB_CONST$2 = [1.05, 1.1, 1];

/**
 * Perpetua Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Perpetua]);
 */
function Perpetua(imageData) {
  BaseFilters.apply(imageData, BaseFilters.adjustRGB(ADJUST_RGB_CONST$2));
}
Perpetua.filterName = 'Perpetua'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const SATURATION_CONST$b = 0.3;
const BRIGHTNESS_CONST$c = 0.15;

/**
 * Amaro Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Amaro]);
 */
function Amaro(imageData) {
  BaseFilters.apply(imageData, BaseFilters.saturation(SATURATION_CONST$b), BaseFilters.brightness(BRIGHTNESS_CONST$c));
}
Amaro.filterName = 'Amaro'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$h = [230, 115, 108, 0.05];
const SATURATION_CONST$a = 0.15;

/**
 * Mayfair Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Mayfair]);
 */
function Mayfair(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$h), BaseFilters.saturation(SATURATION_CONST$a));
}
Mayfair.filterName = 'Mayfair'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$g = [255, 170, 0, 0.1];
const BRIGHTNESS_CONST$b = 0.09;
const SATURATION_CONST$9 = 0.1;

/**
 * Rise Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Rise]);
 */
function Rise(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$g), BaseFilters.brightness(BRIGHTNESS_CONST$b), BaseFilters.saturation(SATURATION_CONST$9));
}
Rise.filterName = 'Rise'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const ADJUST_RGB_CONST$1 = [1, 1, 1.25];
const CONTRAST_CONST$c = 0.1;
const BRIGHTNESS_CONST$a = 0.15;

/**
 * Hudson Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Hudson]);
 */
function Hudson(imageData) {
  BaseFilters.apply(imageData, BaseFilters.adjustRGB(ADJUST_RGB_CONST$1), BaseFilters.contrast(CONTRAST_CONST$c), BaseFilters.brightness(BRIGHTNESS_CONST$a));
}
Hudson.filterName = 'Hudson'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$f = [255, 225, 80, 0.08];
const SATURATION_CONST$8 = 0.1;
const CONTRAST_CONST$b = 0.05;

/**
 * Valencia Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Valencia]);
 */
function Valencia(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$f), BaseFilters.saturation(SATURATION_CONST$8), BaseFilters.contrast(CONTRAST_CONST$b));
}
Valencia.filterName = 'Valencia'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$e = [255, 255, 0, 0.07];
const SATURATION_CONST$7 = 0.2;
const CONTRAST_CONST$a = 0.15;

/**
 * XPro2 Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([XPro2]);
 */
function XPro2(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$e), BaseFilters.saturation(SATURATION_CONST$7), BaseFilters.contrast(CONTRAST_CONST$a));
}
XPro2.filterName = 'XPro2'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const CONTRAST_CONST$9 = -0.15;
const SATURATION_CONST$6 = 0.1;

/**
 * Sierra Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Sierra]);
 */
function Sierra(imageData) {
  BaseFilters.apply(imageData, BaseFilters.contrast(CONTRAST_CONST$9), BaseFilters.saturation(SATURATION_CONST$6));
}
Sierra.filterName = 'Sierra'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$d = [100, 28, 210, 0.03];
const BRIGHTNESS_CONST$9 = 0.1;

/**
 * Willow Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Willow]);
 */
function Willow(imageData) {
  BaseFilters.apply(imageData, BaseFilters.grayscale(), BaseFilters.colorFilter(COLOR_FILTER_CONST$d), BaseFilters.brightness(BRIGHTNESS_CONST$9));
}
Willow.filterName = 'Willow'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const CONTRAST_CONST$8 = 0.15;
const SATURATION_CONST$5 = 0.2;

/**
 * LoFi Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([LoFi]);
 */
function LoFi(imageData) {
  BaseFilters.apply(imageData, BaseFilters.contrast(CONTRAST_CONST$8), BaseFilters.saturation(SATURATION_CONST$5));
}
LoFi.filterName = 'LoFi'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const CONTRAST_CONST$7 = 0.1;
const SATURATION_CONST$4 = 0.15;

/**
 * Hefe Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Hefe]);
 */
function Hefe(imageData) {
  BaseFilters.apply(imageData, BaseFilters.contrast(CONTRAST_CONST$7), BaseFilters.saturation(SATURATION_CONST$4));
}
Hefe.filterName = 'Hefe'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$c = [220, 115, 188, 0.12];
const CONTRAST_CONST$6 = -0.05;

/**
 * Nashville Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Nashville]);
 */
function Nashville(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$c), BaseFilters.contrast(CONTRAST_CONST$6));
}
Nashville.filterName = 'Nashville'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const BRIGHTNESS_CONST$8 = 0.1;
const SEPIA_CONST$3 = 0.3;

/**
 * Stinson Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Stinson]);
 */
function Stinson(imageData) {
  BaseFilters.apply(imageData, BaseFilters.brightness(BRIGHTNESS_CONST$8), BaseFilters.sepia(SEPIA_CONST$3));
}
Stinson.filterName = 'Stinson'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$b = [255, 225, 0, 0.05];
const BRIGHTNESS_CONST$7 = 0.06;
const CONTRAST_CONST$5 = 0.06;

/**
 * Vesper Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Vesper]);
 */
function Vesper(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$b), BaseFilters.brightness(BRIGHTNESS_CONST$7), BaseFilters.contrast(CONTRAST_CONST$5));
}
Vesper.filterName = 'Vesper'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$a = [255, 165, 40, 0.2];

/**
 * Earlybird Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Earlybird]);
 */
function Earlybird(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$a));
}
Earlybird.filterName = 'Earlybird'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const CONTRAST_CONST$4 = 0.2;
const COLOR_FILTER_CONST$9 = [140, 10, 185, 0.1];

/**
 * Brannan Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Brannan]);
 */
function Brannan(imageData) {
  BaseFilters.apply(imageData, BaseFilters.contrast(CONTRAST_CONST$4), BaseFilters.colorFilter(COLOR_FILTER_CONST$9));
}
Brannan.filterName = 'Brannan'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const BRIGHTNESS_CONST$6 = -0.1;
const SATURATION_CONST$3 = -0.1;

/**
 * Sutro Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Sutro]);
 */
function Sutro(imageData) {
  BaseFilters.apply(imageData, BaseFilters.brightness(BRIGHTNESS_CONST$6), BaseFilters.saturation(SATURATION_CONST$3));
}
Sutro.filterName = 'Sutro'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const SEPIA_CONST$2 = 0.1;
const COLOR_FILTER_CONST$8 = [255, 145, 0, 0.2];

/**
 * Toaster Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Toaster]);
 */
function Toaster(imageData) {
  BaseFilters.apply(imageData, BaseFilters.sepia(SEPIA_CONST$2), BaseFilters.colorFilter(COLOR_FILTER_CONST$8));
}
Toaster.filterName = 'Toaster'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const BRIGHTNESS_CONST$5 = 0.1;
const COLOR_FILTER_CONST$7 = [255, 255, 0, 0.2];

/**
 * Walden Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Walden]);
 */
function Walden(imageData) {
  BaseFilters.apply(imageData, BaseFilters.brightness(BRIGHTNESS_CONST$5), BaseFilters.colorFilter(COLOR_FILTER_CONST$7));
}
Walden.filterName = 'Walden'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$6 = [255, 25, 0, 0.15];
const BRIGHTNESS_CONST$4 = 0.1;

/**
 * NinteenSeventySeven Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([NinteenSeventySeven]);
 */
function NinteenSeventySeven(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$6), BaseFilters.brightness(BRIGHTNESS_CONST$4));
}
NinteenSeventySeven.filterName = 'NinteenSeventySeven'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$5 = [255, 140, 0, 0.1];
const ADJUST_RGB_CONST = [1.15, 1.05, 1];
const SATURATION_CONST$2 = 0.35;

/**
 * Kelvin Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Kelvin]);
 */
function Kelvin(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$5), BaseFilters.adjustRGB(ADJUST_RGB_CONST), BaseFilters.saturation(SATURATION_CONST$2));
}
Kelvin.filterName = 'Kelvin'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$4 = [225, 240, 0, 0.1];
const SATURATION_CONST$1 = 0.25;
const CONTRAST_CONST$3 = 0.05;

/**
 * Maven Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Maven]);
 */
function Maven(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$4), BaseFilters.saturation(SATURATION_CONST$1), BaseFilters.contrast(CONTRAST_CONST$3));
}
Maven.filterName = 'Maven'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const SEPIA_CONST$1 = 0.06;
const BRIGHTNESS_CONST$3 = 0.1;

/**
 * Ginza Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Ginza]);
 */
function Ginza(imageData) {
  BaseFilters.apply(imageData, BaseFilters.sepia(SEPIA_CONST$1), BaseFilters.brightness(BRIGHTNESS_CONST$3));
}
Ginza.filterName = 'Ginza'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const SATURATION_CONST = 0.35;
const BRIGHTNESS_CONST$2 = 0.1;

/**
 * Skyline Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Skyline]);
 */
function Skyline(imageData) {
  BaseFilters.apply(imageData, BaseFilters.saturation(SATURATION_CONST), BaseFilters.brightness(BRIGHTNESS_CONST$2));
}
Skyline.filterName = 'Skyline'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const CONTRAST_CONST$2 = 0.15;
const BRIGHTNESS_CONST$1 = 0.1;

/**
 * Dogpatch Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Dogpatch]);
 */
function Dogpatch(imageData) {
  BaseFilters.apply(imageData, BaseFilters.contrast(CONTRAST_CONST$2), BaseFilters.brightness(BRIGHTNESS_CONST$1));
}
Dogpatch.filterName = 'Dogpatch'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$3 = [25, 240, 252, 0.05];
const SEPIA_CONST = 0.3;

/**
 * Brooklyn Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Brooklyn]);
 */
function Brooklyn(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$3), BaseFilters.sepia(SEPIA_CONST));
}
Brooklyn.filterName = 'Brooklyn'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$2 = [208, 208, 86, 0.2];
const CONTRAST_CONST$1 = 0.15;

/**
 * Helena Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Helena]);
 */
function Helena(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$2), BaseFilters.contrast(CONTRAST_CONST$1));
}
Helena.filterName = 'Helena'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST$1 = [255, 160, 25, 0.1];
const BRIGHTNESS_CONST = 0.1;

/**
 * Ashby Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Ashby]);
 */
function Ashby(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST$1), BaseFilters.brightness(BRIGHTNESS_CONST));
}
Ashby.filterName = 'Ashby'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

const COLOR_FILTER_CONST = [255, 50, 80, 0.12];
const CONTRAST_CONST = 0.05;

/**
 * Charmes Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Charmes]);
 */
function Charmes(imageData) {
  BaseFilters.apply(imageData, BaseFilters.colorFilter(COLOR_FILTER_CONST), BaseFilters.contrast(CONTRAST_CONST));
}
Charmes.filterName = 'Charmes'; // We assign the filter name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

var CustomFilters = /*#__PURE__*/Object.freeze({
	__proto__: null,
	Aden: Aden,
	Amaro: Amaro,
	Ashby: Ashby,
	BlackAndWhite: BlackAndWhite,
	Brannan: Brannan,
	Brooklyn: Brooklyn,
	Charmes: Charmes,
	Clarendon: Clarendon,
	Crema: Crema,
	Dogpatch: Dogpatch,
	Earlybird: Earlybird,
	Gingham: Gingham,
	Ginza: Ginza,
	Hefe: Hefe,
	Helena: Helena,
	Hudson: Hudson,
	Juno: Juno,
	Kelvin: Kelvin,
	Lark: Lark,
	LoFi: LoFi,
	Ludwig: Ludwig,
	Maven: Maven,
	Mayfair: Mayfair,
	Moon: Moon,
	Nashville: Nashville,
	NinteenSeventySeven: NinteenSeventySeven,
	Perpetua: Perpetua,
	Reyes: Reyes,
	Rise: Rise,
	Sierra: Sierra,
	Skyline: Skyline,
	Slumber: Slumber,
	Stinson: Stinson,
	Sutro: Sutro,
	Toaster: Toaster,
	Valencia: Valencia,
	Vesper: Vesper,
	Walden: Walden,
	Willow: Willow,
	XPro2: XPro2
});

/** External Dependencies */
const filterStrToClass = filterString => {
  if (filterString) {
    return CustomFilters[filterString] || Konva$2.Filters[filterString];
  }
  return null;
};

var FactoryExports = requireFactory();

var ValidatorsExports = requireValidators();

/** External Dependencies */

/**
 * Warmth Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([Warmth]);
 * node.warmth(100);
 *  Red (r) > Blue (b) means warmer effect
 * Red (r) < Blue (b) means cooler effect
 */
function Warmth$1(imageData) {
  const warmthValue = this.warmth();
  const pixels = imageData.data; //  [0, 1, 2, 3,...] => [r, g, b, a, ...]
  const len = pixels.length;
  for (let i = 0; i < len; i += 4) {
    // red
    pixels[i] += warmthValue;
    // blue
    pixels[i + 2] -= warmthValue;
  }
}
Warmth$1.finetuneName = 'Warmth'; // We assign the finetune name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

/**
 * adds warmth parameter (0 - 200), 0 means no value... 200 max value.
 */
FactoryExports.Factory.addGetterSetter(Konva$2.Image, 'warmth', 0, ValidatorsExports.getNumberValidator(), FactoryExports.Factory.afterSetFilter);

/** External Dependencies */

/**
 * CustomThreshold Filter.
 * @function
 * @param {Object} imageData
 * @example
 * node.cache();
 * node.filters([CustomThreshold]);
 * node.threshold(100);
 */
function CustomThreshold(imageData) {
  const thresholdValue = this.threshold();
  const isZeroThreshold = thresholdValue === 0;
  const pixels = imageData.data; //  [0, 1, 2, 3,...] => [r, g, b, a, ...]
  const len = pixels.length;
  for (let i = 0; i < len; i += 4) {
    if (!isZeroThreshold) {
      pixels[i] = pixels[i] >= thresholdValue ? 255 : 0;
      pixels[i + 1] = pixels[i + 1] >= thresholdValue ? 255 : 0;
      pixels[i + 2] = pixels[i + 2] >= thresholdValue ? 255 : 0;
    }
  }
}
CustomThreshold.finetuneName = 'CustomThreshold'; // We assign the finetune name here instead of using the fn. name as on prod. code the fn. name is optimized that might cause bug in that case.

/**
 * adds threshold parameter (0 - 255), 0 means no value... 255 max value.
 */
FactoryExports.Factory.addGetterSetter(Konva$2.Image, 'threshold', 0, ValidatorsExports.getNumberValidator, FactoryExports.Factory.afterSetFilter);

var CustomFinetunes = /*#__PURE__*/Object.freeze({
	__proto__: null,
	CustomThreshold: CustomThreshold,
	Warmth: Warmth$1
});

/** External Dependencies */
const finetunesStrsToClasses = finetunesStrings => {
  if (Array.isArray(finetunesStrings) && finetunesStrings.length > 0) {
    return finetunesStrings.map(finetuneClassName => Konva$2.Filters[finetuneClassName] || CustomFinetunes[finetuneClassName]);
  }
  return [];
};

/** Internal Dependencies */
const getInitialAppState = (config = {}) => {
  const loadedConfigPrepared = {
    ...config.loadableDesignState
  };
  if (Array.isArray(loadedConfigPrepared.finetunes)) {
    loadedConfigPrepared.finetunes = finetunesStrsToClasses(loadedConfigPrepared.finetunes);
  }
  if (loadedConfigPrepared.filter) {
    loadedConfigPrepared.filter = filterStrToClass(loadedConfigPrepared.filter);
  }
  const hasLoadableDesignState = Boolean(config.loadableDesignState) || Boolean(config.useCloudimage && config.cloudimage?.loadableQuery);
  return {
    // --- Start of design states ---
    imgSrc: typeof config.source === 'string' ? config.source : config.source?.src || '',
    finetunes: [],
    finetunesProps: {},
    filter: null,
    adjustments: {
      crop: {
        ratio: config[TOOLS_IDS.CROP].ratio,
        ratioTitleKey: config[TOOLS_IDS.CROP].ratioTitleKey ?? config[TOOLS_IDS.CROP].ratio,
        width: null,
        height: null,
        x: 0,
        y: 0
      },
      isFlippedX: false,
      isFlippedY: false,
      rotation: 0
    },
    annotations: {},
    resize: {},
    // --- End of design states ---
    shownImageDimensions: {},
    ...loadedConfigPrepared,
    // if provided it would override the above design states
    pointerCssIcon: POINTER_ICONS.DEFAULT,
    canvasScale: 1,
    zoom: {
      factor: DEFAULT_ZOOM_FACTOR,
      x: null,
      y: null
    },
    isLoadingGlobally: true,
    selectionsIds: [],
    tabId: config.defaultTabId || null,
    toolId: config.defaultToolId || null,
    feedback: {},
    /* For UNDO/REDO/RESET,
     * Current/present state => considered properties related to design of the whole 1st order state.
     * `pastDesignStates` => contains the past states of those design properties (undo).
     * `futureDesignStates` => contains the future states of those design properties (redo).
     * Reset => we reset those 3 states to their initial/empty values.
     */
    pastDesignStates: [],
    futureDesignStates: [],
    isResetted: !hasLoadableDesignState ?? true,
    haveNotSavedChanges: false,
    latestColors: {},
    showTabsMenu: false,
    isSaving: false
  };
};

/** Internal Dependencies */

/**
 * Extracts the needed properties/state that are used in canvas's design from the global state.
 *
 * @param {Object} state The global state.
 * @param {Object} defaultValue Value assigned to any undefined/null property in returned object.
 * @returns {Object} The extracted design state.
 */
const extractCurrentDesignState = (state, useStateAsConfig) => {
  const initialAppState = getInitialAppState(useStateAsConfig ? state : defaultConfig);
  return {
    imgSrc: state.imgSrc || initialAppState.imgSrc,
    finetunes: state.finetunes || initialAppState.finetunes,
    finetunesProps: state.finetunesProps || initialAppState.finetunesProps,
    filter: state.filter || initialAppState.filter,
    adjustments: state.adjustments || initialAppState.adjustments,
    annotations: state.annotations || initialAppState.annotations,
    resize: state.resize || initialAppState.resize
  };
};

/** Internal Dependencies */
const REDO = 'REDO';
const redo = state => {
  if (state.futureDesignStates && state.futureDesignStates.length > 0) {
    const currentDesignState = extractCurrentDesignState(state);
    const [presentDesignState, ...newFutureDesignStates] = state.futureDesignStates;
    const newPastDesignStates = [currentDesignState, ...(state.pastDesignStates || [])];
    return {
      ...state,
      ...presentDesignState,
      selectionsIds: [],
      pastDesignStates: newPastDesignStates,
      futureDesignStates: newFutureDesignStates,
      hasUndo: true,
      hasRedo: newFutureDesignStates.length > 0,
      haveNotSavedChanges: true
    };
  }
  return state;
};

/** Internal Dependencies */
const RESET = 'RESET';
const reset = (state, payload) => {
  const resettedDesignState = extractCurrentDesignState({
    ...payload.config,
    imgSrc: state.imgSrc
  }, true);
  return {
    ...state,
    ...resettedDesignState,
    zoom: {
      factor: DEFAULT_ZOOM_FACTOR,
      x: null,
      y: null
    },
    selectionsIds: [],
    isResetted: true,
    pastDesignStates: [],
    futureDesignStates: [],
    hasUndo: false,
    hasRedo: false,
    haveNotSavedChanges: false
  };
};

const SET_FEEDBACK = 'SET_FEEDBACK';
const setFeedback = (state, payload) => ({
  ...state,
  isLoadingGlobally: false,
  feedback: payload.feedback || {}
});

const SHOW_LOADER = 'SHOW_LOADER';
const showLoader = state => ({
  ...state,
  isLoadingGlobally: true
});

function _extends() {
  return _extends = Object.assign ? Object.assign.bind() : function (n) {
    for (var e = 1; e < arguments.length; e++) {
      var t = arguments[e];
      for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]);
    }
    return n;
  }, _extends.apply(null, arguments);
}

function _objectWithoutPropertiesLoose(r, e) {
  if (null == r) return {};
  var t = {};
  for (var n in r) if ({}.hasOwnProperty.call(r, n)) {
    if (-1 !== e.indexOf(n)) continue;
    t[n] = r[n];
  }
  return t;
}

function _objectWithoutProperties(e, t) {
  if (null == e) return {};
  var o,
    r,
    i = _objectWithoutPropertiesLoose(e, t);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e);
    for (r = 0; r < n.length; r++) o = n[r], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
  }
  return i;
}

/**
 * Wrapper around React's `forwardRef` function, which adds a `displayName` to each component
 * created using it
 */
function intrinsicComponent(render, displayName) {
  var component = /*#__PURE__*/React.forwardRef(render);
  component.displayName = displayName || render.name;
  return component;
}

var _excluded$1Q = ["color", "stroke", "size"];
var Brightness$1 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$stroke = _ref.stroke,
    stroke = _ref$stroke === void 0 ? 'currentColor' : _ref$stroke,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1Q);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M23.54 1.53186C23.54 0.96198 24.002 0.5 24.5719 0.5C25.1417 0.5 25.6037 0.961981 25.6037 1.53186V5.82108C25.6037 6.39096 25.1417 6.85294 24.5719 6.85294C24.002 6.85294 23.54 6.39096 23.54 5.82108V1.53186ZM23.54 43.1985C23.54 42.6287 24.002 42.1667 24.5719 42.1667C25.1417 42.1667 25.6037 42.6287 25.6037 43.1985V47.4877C25.6037 48.0576 25.1417 48.5196 24.5719 48.5196C24.002 48.5196 23.54 48.0576 23.54 47.4877V43.1985ZM47.4876 23.5397C48.0574 23.5397 48.5194 24.0017 48.5194 24.5716C48.5194 25.1415 48.0574 25.6034 47.4876 25.6034H43.1983C42.6285 25.6034 42.1665 25.1415 42.1665 24.5716C42.1665 24.0017 42.6285 23.5397 43.1984 23.5397H47.4876ZM5.8209 23.5397C6.39078 23.5397 6.85276 24.0017 6.85276 24.5716C6.85276 25.1415 6.39078 25.6034 5.82089 25.6034H1.53168C0.961798 25.6034 0.499817 25.1415 0.499817 24.5716C0.499817 24.0017 0.961797 23.5397 1.53168 23.5397H5.8209ZM41.6177 39.8976C42.0207 40.3006 42.0207 40.9539 41.6177 41.3569C41.2147 41.7599 40.5614 41.7599 40.1584 41.3569L37.1255 38.324C36.7225 37.921 36.7225 37.2677 37.1255 36.8647C37.5285 36.4617 38.1818 36.4617 38.5848 36.8647L41.6177 39.8976ZM12.1551 10.4347C12.558 10.8377 12.558 11.491 12.1551 11.894C11.7521 12.297 11.0988 12.297 10.6958 11.894L7.66285 8.86105C7.25989 8.45808 7.25989 7.80474 7.66286 7.40178C8.06582 6.99881 8.71916 6.99881 9.12213 7.40178L12.1551 10.4347ZM9.12179 41.617C8.71882 42.0199 8.06548 42.0199 7.66251 41.617C7.25955 41.214 7.25955 40.5607 7.66251 40.1577L10.6954 37.1248C11.0984 36.7218 11.7518 36.7218 12.1547 37.1248C12.5577 37.5277 12.5577 38.1811 12.1547 38.584L9.12179 41.617ZM38.5862 12.1549C38.1832 12.5579 37.5299 12.5579 37.1269 12.1549C36.724 11.752 36.724 11.0986 37.1269 10.6957L40.1599 7.66274C40.5628 7.25977 41.2162 7.25977 41.6191 7.66274C42.0221 8.06571 42.0221 8.71905 41.6191 9.12201L38.5862 12.1549ZM38.7161 24.5098C38.7161 32.3555 32.3559 38.7157 24.5102 38.7157C16.6645 38.7157 10.3043 32.3555 10.3043 24.5098C10.3043 16.6641 16.6645 10.3039 24.5102 10.3039C32.3559 10.3039 38.7161 16.6641 38.7161 24.5098ZM24.5102 36.652C31.2161 36.652 36.6524 31.2157 36.6524 24.5098C36.6524 17.8039 31.2161 12.3676 24.5102 12.3676C17.8043 12.3676 12.3681 17.8039 12.3681 24.5098C12.3681 31.2157 17.8043 36.652 24.5102 36.652Z",
    fill: color,
    stroke: stroke
  }));
});

const isDefaultZeroValuesOnly = (initialProps, newProps) => initialProps && Object.keys(initialProps || {}).every(key => initialProps[key] === 0) && newProps && Object.keys(newProps || {}).length === 0;

/** External Dependencies */
const AppContext = /*#__PURE__*/React.createContext({});

function useTheme() {
  return styled.useTheme();
}

function _arrayWithHoles(r) {
  if (Array.isArray(r)) return r;
}

function _iterableToArrayLimit(r, l) {
  var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
  if (null != t) {
    var e,
      n,
      i,
      u,
      a = [],
      f = !0,
      o = !1;
    try {
      if (i = (t = t.call(r)).next, 0 === l) {
        if (Object(t) !== t) return;
        f = !1;
      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
    } catch (r) {
      o = !0, n = r;
    } finally {
      try {
        if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
      } finally {
        if (o) throw n;
      }
    }
    return a;
  }
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

function _slicedToArray(r, e) {
  return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest();
}

function useMediaQuery(queryInput) {
  var query = queryInput.replace(/^@media( ?)/m, '');
  var _useState = React.useState(function () {
      return window.matchMedia(query).matches;
    }),
    _useState2 = _slicedToArray(_useState, 2),
    match = _useState2[0],
    setMatch = _useState2[1];
  React.useEffect(function () {
    var active = true;
    var queryList = window.matchMedia(query);
    var updateMatch = function updateMatch() {
      if (active) {
        setMatch(queryList.matches);
      }
    };
    updateMatch();
    queryList.addEventListener('change', updateMatch);
    return function () {
      active = false;
      queryList.removeEventListener('change', updateMatch);
    };
  }, [query, matchMedia]);
  return match;
}

var defaultTranslations = {
  name: 'Name',
  save: 'Save',
  saveAs: 'Save as',
  back: 'Back',
  loading: 'Loading...',
  resetOperations: 'Reset/delete all operations',
  changesLoseWarningHint: 'Pressing “Reset” will discard your changes. Are you sure you want to continue?',
  discardChangesWarningHint: 'Closing the modal will discard your last change.',
  cancel: 'Cancel',
  apply: 'Apply',
  warning: 'Warning',
  confirm: 'Confirm',
  discardChanges: 'Discard changes',
  undoTitle: 'Undo last operation',
  redoTitle: 'Redo last operation',
  showImageTitle: 'Show original image',
  zoomInTitle: 'Zoom in',
  zoomOutTitle: 'Zoom out',
  toggleZoomMenuTitle: 'Toggle zoom menu',
  adjustTab: 'Adjust',
  finetuneTab: 'Finetune',
  filtersTab: 'Filters',
  watermarkTab: 'Watermark',
  annotateTabLabel: 'Annotate',
  resize: 'Resize',
  resizeTab: 'Resize',
  imageName: 'Image name',
  invalidImageError: 'Invalid image provided.',
  uploadImageError: 'Error while uploading the image.',
  areNotImages: 'are not images',
  isNotImage: 'is not image',
  toBeUploaded: 'to be uploaded',
  cropTool: 'Crop',
  original: 'Original',
  custom: 'Custom',
  square: 'Square',
  landscape: 'Landscape',
  portrait: 'Portrait',
  ellipse: 'Ellipse',
  classicTv: 'Classic TV',
  cinemascope: 'Cinemascope',
  arrowTool: 'Arrow',
  blurTool: 'Blur',
  brightnessTool: 'Brightness',
  contrastTool: 'Contrast',
  ellipseTool: 'Ellipse',
  unFlipX: 'Un-Flip X',
  flipX: 'Flip X',
  unFlipY: 'Un-Flip Y',
  flipY: 'Flip Y',
  hsvTool: 'HSV',
  hue: 'Hue',
  brightness: 'Brightness',
  saturation: 'Saturation',
  value: 'Value',
  imageTool: 'Image',
  importing: 'Importing...',
  addImage: '+ Add image',
  uploadImage: 'Upload image',
  fromGallery: 'From gallery',
  lineTool: 'Line',
  penTool: 'Pen',
  polygonTool: 'Polygon',
  sides: 'Sides',
  rectangleTool: 'Rectangle',
  cornerRadius: 'Corner Radius',
  resizeWidthTitle: 'Width in pixels',
  resizeHeightTitle: 'Height in pixels',
  toggleRatioLockTitle: 'Toggle ratio lock',
  resetSize: 'Reset to original image size',
  rotateTool: 'Rotate',
  textTool: 'Text',
  textSpacings: 'Text spacings',
  textAlignment: 'Text alignment',
  fontFamily: 'Font family',
  size: 'Size',
  letterSpacing: 'Letter Spacing',
  lineHeight: 'Line height',
  warmthTool: 'Warmth',
  addWatermark: '+ Add watermark',
  addTextWatermark: '+ Add text watermark',
  addWatermarkTitle: 'Choose the watermark type',
  uploadWatermark: 'Upload watermark',
  addWatermarkAsText: 'Add as text',
  padding: 'Padding',
  paddings: 'Paddings',
  shadow: 'Shadow',
  horizontal: 'Horizontal',
  vertical: 'Vertical',
  blur: 'Blur',
  opacity: 'Opacity',
  transparency: 'Transparency',
  position: 'Position',
  stroke: 'Stroke',
  saveAsModalTitle: 'Save as',
  extension: 'Extension',
  format: 'Format',
  nameIsRequired: 'Name is required.',
  quality: 'Quality',
  imageDimensionsHoverTitle: 'Saved image size (width x height)',
  cropSizeLowerThanResizedWarning: 'Note, the selected crop area is lower than the applied resize which might cause quality decrease',
  actualSize: 'Actual size (100%)',
  fitSize: 'Fit size',
  addImageTitle: 'Select image to add...',
  mutualizedFailedToLoadImg: 'Failed to load image.',
  tabsMenu: 'Menu',
  download: 'Download',
  width: 'Width',
  height: 'Height',
  plus: '+',
  cropItemNoEffect: 'No preview available for this crop item'
};

/* eslint-disable no-console */
/** Internal Dependencies */
const backendTranslations = {};
const activatedTranslations = {
  ...defaultTranslations
};
const hardcodedErrorMsg = 'Error while loading translations from backend.';
const updateTranslations = (newTranslations = {}, language = 'en') => Object.assign(activatedTranslations, backendTranslations?.[language?.toLowerCase()] || {}, newTranslations);
const sendMissingTranslationsToBackend = (missingTranslations = []) => new Promise((resolve, reject) => {
  const xhr = new XMLHttpRequest();
  xhr.responseType = 'json';
  xhr.onload = () => {
    if (xhr.status >= 200 && xhr.status < 300) {
      resolve(xhr.response);
    } else {
      console.warn(`Error in sending translation key to backend ${xhr.response?.hint}, ${xhr.status}`);
      reject();
    }
  };
  xhr.onerror = () => {
    console.warn(`Error in sending translation key to backend ${xhr.response?.hint}, ${xhr.status}`);
    reject();
  };
  const payload = {
    grid_uuid: TRANSLATIONS_GRID_UUID,
    translations_requests: missingTranslations
  };
  xhr.open('POST', `https://neo.wordplex.io/api/import/request-translations?grid_uuid=${TRANSLATIONS_GRID_UUID}`);
  xhr.send(JSON.stringify(payload));
});
const getBackendTranslations = (language = 'en', additionalTranslations = {}) => new Promise((resolve, reject) => {
  const loweredCaseLanguage = language.toLowerCase();
  const xhr = new XMLHttpRequest();
  xhr.responseType = 'json';
  xhr.onload = () => {
    if (xhr.status >= 200 && xhr.status < 300) {
      (xhr.response || []).forEach(translation => {
        backendTranslations[loweredCaseLanguage] = {
          ...backendTranslations[loweredCaseLanguage],
          [translation.translation_key]: translation.translations[loweredCaseLanguage]
        };
      });
      const missingTranslations = [];
      Object.keys(defaultTranslations).forEach(key => {
        if (key && !backendTranslations[loweredCaseLanguage]?.[key]) {
          missingTranslations.push({
            key,
            lang: loweredCaseLanguage,
            default: defaultTranslations[key]
          });
        }
      });
      if (missingTranslations.length > 0) {
        sendMissingTranslationsToBackend(missingTranslations);
      }
      updateTranslations(additionalTranslations, loweredCaseLanguage);
      resolve(activatedTranslations);
    } else {
      console.error(`Status code: ${xhr.status}`);
      console.error(xhr.response?.msg || xhr.response?.msg || xhr.response?.details || hardcodedErrorMsg);
      reject();
    }
  };
  xhr.onerror = () => {
    console.error(`Status code ${xhr.status}, error: ${hardcodedErrorMsg}`);
    reject();
  };
  xhr.open('GET', `https://i18n-fastly.ultrafast.io/api/export?grid=${TRANSLATIONS_GRID_UUID}`);
  xhr.send();
});
const translate = key => activatedTranslations[key] || key || '';

const appReducer = (state, action) => actions[action.type] ? actions[action.type](state, action.payload) || state : state;

/** External Dependencies */
let isFieMounted = true;
const AppProvider = ({
  children,
  config = {}
}) => {
  const [state, _dispatch] = useAppReducer(appReducer, getInitialAppState(config), config);
  React.useEffect(() => {
    isFieMounted = true;
    return () => {
      isFieMounted = false;
    };
  }, []);
  const dispatch = React.useCallback((...args) => {
    if (isFieMounted) {
      _dispatch(...args);
    }
  }, [_dispatch]);
  React.useEffect(() => {
    updateTranslations(config.translations, config.language);
  }, [config.useBackendTranslations, config.language, config.translations]);
  const theme = useTheme();
  const providedValue = React.useMemo(() => ({
    ...state,
    config,
    theme,
    dispatch,
    t: translate
  }), [config, state]);
  return /*#__PURE__*/React.createElement(AppContext.Provider, {
    value: providedValue
  }, children);
};
AppProvider.defaultProps = {
  config: {}
};
AppProvider.propTypes = {
  children: PropTypes.node.isRequired,
  config: PropTypes.instanceOf(Object)
};

/** External Dependencies */

// This component is used in repassing the state to react-konva's modules
// As it has issue in context bridging.
const AppProviderOverridenValue = ({
  children,
  overridingValue
}) => /*#__PURE__*/React.createElement(AppContext.Provider, {
  value: overridingValue
}, children);
AppProviderOverridenValue.propTypes = {
  children: PropTypes.node.isRequired,
  overridingValue: PropTypes.instanceOf(Object).isRequired
};

/** External Dependencies */
const useStore = () => React.useContext(AppContext);

/** External Dependencies */
const useFinetune = (finetune, initialProps) => {
  const {
    dispatch,
    finetunes,
    finetunesProps
  } = useStore();
  const setFinetuneWithProps = React.useCallback(newFinetuneProps => {
    dispatch({
      type: SET_FINETUNE,
      payload: {
        finetune,
        finetuneProps: newFinetuneProps
      }
    });
  }, []);
  React.useEffect(() => {
    if (!finetunes.includes(finetune) && !isDefaultZeroValuesOnly(initialProps, finetunesProps)) {
      // initialProps first if we've any similar prop set before w/ diff. val don't override.
      setFinetuneWithProps({
        ...initialProps,
        ...finetunesProps
      });
    }
  }, []);
  return React.useMemo(() => [finetunesProps, setFinetuneWithProps], [finetunesProps]);
};

/** External Dependencies */
const useFilter = () => {
  const {
    dispatch,
    filter
  } = useStore();
  const setFilter = React.useCallback(filterToApply => {
    dispatch({
      type: ADD_FILTER,
      payload: {
        filter: filterToApply
      }
    });
  }, []);
  return React.useMemo(() => [filter, setFilter], [filter]);
};

const randomId = (prefixString = '') => `${prefixString}${prefixString ? '-' : ''}${parseInt(Date.now() * Math.random(), 10)}`;

const debounce$1 = (func, timeout = 300) => {
  let timer;
  return (...args) => {
    clearTimeout(timer);
    const [firstArg, ...otherArgs] = args;
    timer = setTimeout(func.bind(null, firstArg?.target?.value ?? firstArg, ...otherArgs), timeout);
  };
};

const getScrollOffset = () => {
  const {
    body
  } = document;
  const docEl = document.documentElement;
  const scrollTop = window?.pageYOffset || docEl.scrollTop || body.scrollTop;
  const scrollLeft = window?.pageXOffset || docEl.scrollLeft || body.scrollLeft;
  return {
    topOffset: scrollTop,
    leftOffset: scrollLeft
  };
};

/** Internal Dependencies */
const getElemDocumentCoords = elem => {
  if (!elem) {
    return null;
  }
  const box = elem.getBoundingClientRect();
  const {
    body
  } = document;
  const {
    topOffset,
    leftOffset
  } = getScrollOffset();
  const docEl = document.documentElement;
  const clientTop = docEl.clientTop || body.clientTop || 0;
  const clientLeft = docEl.clientLeft || body.clientLeft || 0;
  const top = box.top + topOffset - clientTop;
  const left = box.left + leftOffset - clientLeft;
  return {
    top: Math.round(top),
    left: Math.round(left),
    width: box.width,
    height: box.height
  };
};

const restrictNumber = (number, min = 0, max) => {
  // we are not assigning default value for it as if max was null it will override the default value.
  const currentMax = max || 1000000;
  const convertedNumber = +number;
  return Math.min(Math.max(min, convertedNumber), currentMax);
};

/** Internal Dependencies */

/**
 * Gets the touch/mouse position relative to the passed object to be considred as offset X/Y.
 *
 * @param {Object} previewGroup - The preview group that is a direct child of the design layer
 * @param {Object} relativeToObject - The object to be considered as parent element
 *                                    contains left, top, width & height relative to the document.
 * @returns {Object} both X & Y offset values.
 */
const getPointerOffsetPositionBoundedToObject = (previewGroup = {}, relativeToObject = {}) => {
  const designLayer = previewGroup.parent;
  const canvas = designLayer.getStage();
  const canvasZoomFactor = canvas.attrs.zoomFactor;
  const pos = designLayer.getRelativePointerPosition();
  return {
    offsetX: restrictNumber(pos.x, 0, relativeToObject.width / (canvas.scaleX() / canvasZoomFactor)) + designLayer.attrs.xPadding,
    offsetY: restrictNumber(pos.y, 0, relativeToObject.height / (canvas.scaleY() / canvasZoomFactor)) + designLayer.attrs.yPadding
  };
};

const getBoundingRectUnScaled = (pointerOffsets = {}, pointerDown = {}, previewGroup) => {
  const boundingRect = {};
  const parentAttrs = previewGroup.parent.attrs;
  boundingRect.x = Math.min(pointerOffsets.offsetX, pointerDown.startedX) - parentAttrs.xPadding || 0;
  boundingRect.y = Math.min(pointerOffsets.offsetY, pointerDown.startedY) - parentAttrs.yPadding || 0;
  boundingRect.width = pointerOffsets.offsetX - pointerDown.startedX;
  boundingRect.height = pointerOffsets.offsetY - pointerDown.startedY;
  boundingRect.startedX = pointerDown.startedX - parentAttrs.xPadding || 0;
  boundingRect.startedY = pointerDown.startedY - parentAttrs.yPadding || 0;
  return boundingRect;
};

/** External Dependencies */
const annotationsNamesToKonvaClasses = {
  [TOOLS_IDS.RECT]: Konva$2.Rect,
  [TOOLS_IDS.ELLIPSE]: Konva$2.Ellipse,
  [TOOLS_IDS.POLYGON]: Konva$2.RegularPolygon,
  [TOOLS_IDS.LINE]: Konva$2.Line,
  [TOOLS_IDS.IMAGE]: Konva$2.Image,
  [TOOLS_IDS.TEXT]: Konva$2.Text,
  [TOOLS_IDS.ARROW]: Konva$2.Arrow
};
const ANNOTATIONS_WITH_POINTS = [TOOLS_IDS.LINE, TOOLS_IDS.ARROW];
const NO_WIDTH_HEIGHT_ANNOTATIONS = [...ANNOTATIONS_WITH_POINTS, TOOLS_IDS.ELLIPSE, TOOLS_IDS.POLYGON];
const getNewAnnotationPreview = annotation => new annotationsNamesToKonvaClasses[annotation.name]({
  ...annotation,
  opacity: annotation.opacity ?? 0.7,
  x: annotation.x ?? 0,
  y: annotation.y ?? 0,
  width: Math.abs(annotation.width) || 0,
  height: Math.abs(annotation.height) || 0,
  ...(ANNOTATIONS_WITH_POINTS.includes(annotation.name) ? {
    stroke: annotation.stroke || '#000000'
  } : {})
});

// If we are changing width/height we have to update the X/Y for avoiding moving the annotation from current place.
const dimensToProperAnnotationDimens = (currentDimensions, annotationName, isShiftKeyPressed) => {
  const {
    width,
    height,
    startedX,
    startedY,
    ...newAnnotationDimens
  } = currentDimensions;
  const absWidth = Math.abs(width);
  const absHeight = Math.abs(height);
  const isReversedX = width < 0;
  const isReversedY = height < 0;
  switch (annotationName) {
    case TOOLS_IDS.RECT:
      if (isShiftKeyPressed) {
        newAnnotationDimens.width = Math.sqrt(absWidth * absWidth + absHeight * absHeight);
        newAnnotationDimens.height = newAnnotationDimens.width;
        newAnnotationDimens.x -= isReversedX ? newAnnotationDimens.width - absWidth : 0;
        newAnnotationDimens.y -= isReversedY ? newAnnotationDimens.height - absHeight : 0;
      } else {
        newAnnotationDimens.width = absWidth;
        newAnnotationDimens.height = absHeight;
      }
      break;
    case TOOLS_IDS.ELLIPSE:
      if (isShiftKeyPressed) {
        newAnnotationDimens.radiusX = Math.sqrt(absWidth * absWidth + absHeight * absHeight) / 2;
        newAnnotationDimens.radiusY = newAnnotationDimens.radiusX;
        newAnnotationDimens.x -= isReversedX ? newAnnotationDimens.radiusX * 2 - absWidth : 0;
        newAnnotationDimens.y -= isReversedY ? newAnnotationDimens.radiusY * 2 - absHeight : 0;
      } else {
        newAnnotationDimens.radiusX = absWidth / 2;
        newAnnotationDimens.radiusY = absHeight / 2;
      }
      newAnnotationDimens.offsetX = -newAnnotationDimens.radiusX;
      newAnnotationDimens.offsetY = -newAnnotationDimens.radiusY;
      break;
    case TOOLS_IDS.POLYGON:
      newAnnotationDimens.radius = (absWidth + absHeight) / 2;
      newAnnotationDimens.x -= isReversedX ? newAnnotationDimens.radius * 2 - absWidth : 0;
      newAnnotationDimens.y -= isReversedY ? newAnnotationDimens.radius * 2 - absHeight : 0;
      newAnnotationDimens.offsetX = -newAnnotationDimens.radius;
      newAnnotationDimens.offsetY = -newAnnotationDimens.radius;
      break;
    case TOOLS_IDS.LINE:
    case TOOLS_IDS.ARROW:
      newAnnotationDimens.x = startedX;
      newAnnotationDimens.y = startedY;
      newAnnotationDimens.points = [0, 0];
      if (isShiftKeyPressed) {
        newAnnotationDimens.points.push(absWidth >= absHeight ? width : 0, absHeight > absWidth ? height : 0);
      } else {
        newAnnotationDimens.points = [0, 0, width, height];
      }
      break;
    default:
      newAnnotationDimens.width = absWidth;
      newAnnotationDimens.height = absHeight;
      break;
  }
  return newAnnotationDimens;
};

/** Internal Dependencies */
const pointerDown = {
  startedX: undefined,
  startedY: undefined,
  isOutOfCanvas: false
};
const eventsOptions$1 = {
  passive: true
};
const MIN_PIXELS = 1;
let shownAnnotationPreview = null;
let textAnnotationWrappedRect = null;
let latestAnnotationProps = null;
const previewThenCallAnnotationAdding = (canvas, annotation, previewGroup, callbkAfterPreview) => {
  const getCanvasBoundingRect = () => getElemDocumentCoords(canvas.content);
  const wrapTextBoundsPreviewByRect = textAnnotation => {
    textAnnotationWrappedRect = getNewAnnotationPreview({
      ...textAnnotation,
      name: TOOLS_IDS.RECT,
      fill: '',
      stroke: '#000000',
      strokeWidth: 2,
      shadowColor: '#ffffff',
      shadowBlur: 1,
      shadowOpacity: 0.7
    });
    previewGroup.add(textAnnotationWrappedRect);
  };
  const previewAnnotation = preparedAnnotation => {
    shownAnnotationPreview = getNewAnnotationPreview(preparedAnnotation);
    previewGroup.add(shownAnnotationPreview);
    if (preparedAnnotation.name === TOOLS_IDS.TEXT) {
      wrapTextBoundsPreviewByRect(preparedAnnotation);
    }
    latestAnnotationProps = preparedAnnotation;
  };
  const updateAnnotationPreview = (preparedBoundingRect, isShiftKeyPressed) => {
    if (!latestAnnotationProps) {
      return;
    }
    const transformedAnnotation = dimensToProperAnnotationDimens(preparedBoundingRect, latestAnnotationProps.name, isShiftKeyPressed);
    if (textAnnotationWrappedRect) {
      textAnnotationWrappedRect.setAttrs(transformedAnnotation);
    }
    shownAnnotationPreview.setAttrs(transformedAnnotation);
    latestAnnotationProps = {
      ...latestAnnotationProps,
      ...transformedAnnotation
    };
  };
  const updatePreviewWithBoundedDimens = e => {
    const pointerOffsets = getPointerOffsetPositionBoundedToObject(previewGroup, getCanvasBoundingRect());
    updateAnnotationPreview(getBoundingRectUnScaled(pointerOffsets, pointerDown, previewGroup), e.shiftKey);
  };
  const destroyShownPreview = () => {
    if (previewGroup && shownAnnotationPreview) {
      previewGroup.destroyChildren();
    }
  };
  const handlePointerMove = e => {
    if (e.evt.touches?.length > 1) {
      return;
    }
    const pointerOffsets = getPointerOffsetPositionBoundedToObject(previewGroup, getCanvasBoundingRect());
    if (pointerDown.isOutOfCanvas) {
      document.removeEventListener('mousemove', updatePreviewWithBoundedDimens, eventsOptions$1);
      document.removeEventListener('touchmove', updatePreviewWithBoundedDimens, eventsOptions$1);
      pointerDown.isOutOfCanvas = false;
    }
    const boundingRect = getBoundingRectUnScaled(pointerOffsets, pointerDown, previewGroup);
    if (shownAnnotationPreview) {
      updateAnnotationPreview(boundingRect, e.evt.shiftKey);
    } else {
      const {
        id,
        x,
        y,
        points,
        ...currentAnnotationProps
      } = annotation;
      previewAnnotation({
        ...currentAnnotationProps,
        ...boundingRect
      });
    }
    canvas.setAttrs({
      isDrawing: true
    });
  };
  const handlePointerOut = () => {
    if (!pointerDown.isOutOfCanvas) {
      document.addEventListener('mousemove', updatePreviewWithBoundedDimens, eventsOptions$1);
      document.addEventListener('touchmove', updatePreviewWithBoundedDimens, eventsOptions$1);
      pointerDown.isOutOfCanvas = true;
    }
  };
  const handlePointerUp = () => {
    destroyShownPreview();
    if (latestAnnotationProps && (latestAnnotationProps.width >= MIN_PIXELS && latestAnnotationProps.height >= MIN_PIXELS || latestAnnotationProps.radiusX >= MIN_PIXELS && latestAnnotationProps.radiusY >= MIN_PIXELS || latestAnnotationProps.points?.[2] || latestAnnotationProps.points?.[3] || latestAnnotationProps.radius >= MIN_PIXELS)) {
      const {
        startedX,
        startedY,
        offsetX,
        offsetY,
        width,
        height,
        ...savableAnnotation
      } = latestAnnotationProps;
      if (!NO_WIDTH_HEIGHT_ANNOTATIONS.includes(annotation.name)) {
        savableAnnotation.width = width;
        savableAnnotation.height = height;
      }
      callbkAfterPreview(savableAnnotation, true);
    }
    shownAnnotationPreview = null;
    textAnnotationWrappedRect = null;
    latestAnnotationProps = null;
    canvas.setAttrs({
      isDrawing: false
    });
    canvas.off('mousemove touchmove', handlePointerMove);
    canvas.off('mouseleave touchcancel', handlePointerOut);
    document.removeEventListener('mouseup', handlePointerUp, eventsOptions$1);
    document.removeEventListener('touchend', handlePointerUp, eventsOptions$1);
    document.removeEventListener('mouseleave', handlePointerUp, eventsOptions$1);
    document.removeEventListener('touchcancel', handlePointerUp, eventsOptions$1);
    document.removeEventListener('mousemove', updatePreviewWithBoundedDimens, eventsOptions$1);
    document.removeEventListener('touchmove', updatePreviewWithBoundedDimens, eventsOptions$1);
    pointerDown.isOutOfCanvas = false;
  };
  const handlePointerDown = e => {
    e.evt.preventDefault();
    // if the canvas is in panning/dragging mode avoid drawing or if in zooming mode by touches avoid drawing.
    if (e.target.attrs.draggable || e.evt.touches?.length > 1) {
      return;
    }
    destroyShownPreview();
    const pointerOffsets = getPointerOffsetPositionBoundedToObject(previewGroup, getCanvasBoundingRect());

    // The dimensions are relative to the canvas.
    pointerDown.startedX = pointerOffsets.offsetX;
    pointerDown.startedY = pointerOffsets.offsetY;
    pointerDown.isOutOfCanvas = false;
    canvas.on('mousemove touchmove', handlePointerMove);
    canvas.on('mouseleave touchcancel', handlePointerOut);
    document.addEventListener('mouseup', handlePointerUp, eventsOptions$1);
    document.addEventListener('touchend', handlePointerUp, eventsOptions$1);
    document.addEventListener('mouseleave', handlePointerUp, eventsOptions$1);
    document.addEventListener('touchcancel', handlePointerUp, eventsOptions$1);
  };
  canvas.on('mousedown touchstart', handlePointerDown);
  return () => {
    destroyShownPreview();
    canvas.off('mousedown touchstart', handlePointerDown);
  };
};

/** External Dependencies */
const useDebouncedCallback = (func, timeout, dependencies = []) => React.useCallback(debounce$1(func, timeout), dependencies);

/** External Dependencies */

// TODO: Imporve the logic and separate the selected annotation options from handling preview and options before draw.
const useAnnotation = (annotation = {}, enablePreview = true) => {
  const {
    dispatch,
    previewGroup,
    annotations,
    selectionsIds = [],
    config
  } = useStore();
  const annotationDefaults = {
    ...config.annotationsCommon,
    ...config[annotations[selectionsIds[0]]?.name || annotation.name]
  };
  const [tmpAnnotation, setTmpAnnotation] = React.useState(() => ({
    ...annotationDefaults,
    ...annotation,
    ...annotations[selectionsIds[0]]
  }));
  const annotationBeforeSelection = React.useRef();
  const canvas = previewGroup?.getStage();
  const saveAnnotation = React.useCallback(annotationData => {
    const {
      fonts,
      onFontChange,
      ...savableAnnotationData
    } = annotationData;
    dispatch({
      type: SET_ANNOTATION,
      payload: savableAnnotationData
    });
    if (savableAnnotationData.id && annotation.name !== TOOLS_IDS.PEN) {
      debounce$1(() => {
        dispatch({
          type: SELECT_ANNOTATION,
          payload: {
            annotationId: savableAnnotationData.id
          }
        });
      }, 30)();
    }
  }, []);
  const updateTmpAnnotation = useDebouncedCallback(updatesObjOrFn => {
    setTmpAnnotation(latest => ({
      ...latest,
      shouldSave: false,
      neverSave: false,
      ...(typeof updatesObjOrFn === 'function' ? updatesObjOrFn(latest) : updatesObjOrFn)
    }));
  }, 15);
  const getAnnotationInitialProps = React.useCallback((currentAnnotation, newAnnotationName) => {
    if (currentAnnotation.name === newAnnotationName) {
      const {
        x,
        y,
        width,
        height,
        radius,
        radiusX,
        radiusY,
        points,
        image,
        text,
        scaleX,
        scaleY,
        rotation,
        ...dimensionlessProps
      } = currentAnnotation;
      return {
        ...annotationDefaults,
        ...annotation,
        ...dimensionlessProps
      };
    }
    return {
      ...annotationDefaults,
      ...annotation
    };
  }, []);
  const saveAnnotationNoDebounce = React.useCallback(newAnnotationData => {
    setTmpAnnotation(latest => {
      const initialProps = getAnnotationInitialProps(latest, newAnnotationData.name || annotation.name);
      return {
        ...initialProps,
        ...newAnnotationData,
        id: newAnnotationData.id || randomId(newAnnotationData.name || latest.name),
        shouldSave: true,
        neverSave: false
      };
    });
  }, []);
  React.useEffect(() => {
    const {
      shouldSave,
      neverSave,
      ...savableAnnotation
    } = tmpAnnotation;
    const selection = selectionsIds.length === 1 && annotations[selectionsIds[0]];
    if (!neverSave && (shouldSave || selection)) {
      saveAnnotation({
        ...savableAnnotation,
        id: shouldSave ? savableAnnotation.id : selection.id
      });
    }
  }, [tmpAnnotation]);
  React.useEffect(() => {
    // setTimeout to make the state changes after the annotation is drawn not before.
    setTimeout(() => {
      if (selectionsIds.length === 1) {
        annotationBeforeSelection.current = tmpAnnotation;
        setTmpAnnotation({
          ...annotations[selectionsIds[0]],
          neverSave: true
        });
      } else if (annotationBeforeSelection.current) {
        setTmpAnnotation({
          ...annotationBeforeSelection.current,
          neverSave: true
        });
        annotationBeforeSelection.current = null;
      }
    });
  }, [selectionsIds, annotations]);
  React.useEffect(() => {
    let stopAnnotationEventsListening = null;
    if (canvas && enablePreview) {
      const annotationInitialProps = getAnnotationInitialProps(tmpAnnotation, annotation.name);
      stopAnnotationEventsListening = previewThenCallAnnotationAdding(canvas, {
        ...annotationInitialProps,
        name: annotation.name
      }, previewGroup, saveAnnotationNoDebounce);
    }
    return () => {
      if (stopAnnotationEventsListening) {
        stopAnnotationEventsListening();
      }
    };
  }, [canvas, tmpAnnotation, previewGroup]);
  return React.useMemo(() => [tmpAnnotation, updateTmpAnnotation, saveAnnotationNoDebounce], [tmpAnnotation, updateTmpAnnotation, saveAnnotationNoDebounce]);
};

/** External Dependencies */
let timeout;
const applyModifyFn = (onModify, newState) => {
  timeout = setTimeout(() => {
    clearTimeout(timeout);
    if (typeof onModify === 'function' && newState) {
      onModify(newState);
    }
  });
};

/**
 * A normal react useReducer wrapped inside our own UNDO/REDO Reducer as middleware
 * for updating the UNDO/REDO states automatically
 *
 */
// TODO: maybe? make another reducer/context for design state and having the undo/redo to it only.
const useAppReducer = (reducer, initialState, passedConfig = {}) => {
  const initialStateWithUndoRedo = {
    ...initialState,
    pastDesignStates: [],
    futureDesignStates: [],
    hasRedo: false,
    hasUndo: false
  };
  const undoRedoResetReducer = (state, action) => {
    const newPresentState = reducer(state, action) || initialStateWithUndoRedo;
    if ([UNDO, REDO, RESET].includes(action.type)) {
      applyModifyFn(passedConfig.onModify, newPresentState);
      return newPresentState;
    }
    if (newPresentState.isDesignState) {
      const currentState = extractCurrentDesignState(state);
      const {
        isDesignState,
        ...neededNewPresentState
      } = newPresentState;
      const newState = {
        ...neededNewPresentState,
        pastDesignStates: [currentState, ...state.pastDesignStates],
        hasUndo: true,
        hasRedo: false,
        futureDesignStates: [],
        isResetted: false,
        haveNotSavedChanges: true
      };
      applyModifyFn(passedConfig.onModify, newState);
      return newState;
    }
    return newPresentState;
  };
  return React.useReducer(undoRedoResetReducer, initialStateWithUndoRedo);
};

/** External Dependencies */
const useAnnotationEvents = () => {
  const {
    tabId,
    dispatch
  } = useStore();
  const isAnnotationEventsDisabled = React.useMemo(() => tabId !== TABS_IDS.ANNOTATE && tabId !== TABS_IDS.WATERMARK, [tabId]);
  const updateAnnotation = React.useCallback(annotationProps => {
    dispatch({
      type: SET_ANNOTATION,
      payload: annotationProps
    });
  }, []);
  const updatePositionOnDragEnd = React.useCallback(e => {
    updateAnnotation({
      id: e.target.id(),
      x: e.target.x(),
      y: e.target.y()
    });
  }, []);
  const getAnnotationTransformProps = React.useCallback(e => {
    const transformProps = {
      id: e.target.id(),
      rotation: e.target.rotation(),
      x: e.target.x(),
      y: e.target.y()
    };
    if (e.target.name() === TOOLS_IDS.TEXT) {
      transformProps.width = e.target.width() * e.target.scaleX();
      transformProps.height = e.target.height() * e.target.scaleY();
      transformProps.scaleX = 1;
      transformProps.scaleY = 1;
    } else {
      transformProps.scaleX = e.target.scaleX();
      transformProps.scaleY = e.target.scaleY();
    }
    return transformProps;
  }, []);
  const updateAnnotationTransform = React.useCallback(e => {
    updateAnnotation(getAnnotationTransformProps(e));
  }, []);
  const updateTextAnnotationOnTransform = React.useCallback(e => {
    if (e.target.name() === TOOLS_IDS.TEXT) {
      e.target.setAttrs(getAnnotationTransformProps(e));
    }
  });
  const selectAnnotationOnClick = React.useCallback(e => {
    if (e.target.id() === WATERMARK_ANNOTATION_ID$1 || e.target.getStage().attrs.isDrawing) {
      return;
    }
    const multiple = e.evt.ctrlKey || e.evt.shiftKey || e.evt.metaKey;
    dispatch({
      type: SELECT_ANNOTATION,
      payload: {
        annotationId: e.target.id(),
        multiple
      }
    });
    // TODO: Remove this once we implement the possibility to select annotation
    // while any annotation tool is opened without changing the tool.
    dispatch({
      type: SELECT_TOOL,
      payload: {
        toolId: e.target.name(),
        keepSelections: multiple
      }
    });
  }, []);
  return React.useMemo(() => isAnnotationEventsDisabled ? {} : {
    onTransform: updateTextAnnotationOnTransform,
    onTransformEnd: updateAnnotationTransform,
    onDragEnd: updatePositionOnDragEnd,
    onClick: selectAnnotationOnClick,
    onTap: selectAnnotationOnClick
  }, [isAnnotationEventsDisabled]);
};

/** External Dependencies */
const useResizeObserver = (onResize = () => {}) => {
  const onResizeCallback = React.useRef(onResize);
  const resizeObserver = React.useRef();
  const observerCallback = React.useCallback(entries => {
    entries.forEach(entry => {
      if (entry.contentRect) {
        const {
          width,
          height
        } = entry.contentRect;
        onResizeCallback.current({
          entry,
          width,
          height
        });
      }
    });
  }, []);
  const updateOnResizeCallback = React.useCallback(newOnResizeCallback => {
    onResizeCallback.current = newOnResizeCallback;
  }, []);
  const initObserver = React.useCallback(() => {
    if (!resizeObserver.current) {
      resizeObserver.current = new ResizeObserver(observerCallback);
    }
  }, []);
  const observeElement = React.useCallback((element, newOnResizeCallback) => {
    if (element) {
      if (!resizeObserver.current) {
        initObserver();
      }
      resizeObserver.current.observe(element);
      if (newOnResizeCallback) {
        onResizeCallback.current = newOnResizeCallback;
      }
    }
  }, []);
  const unobserveElement = React.useCallback((element, newOnResizeCallback) => {
    if (resizeObserver.current && element) {
      resizeObserver.current.unobserve(element);
      if (newOnResizeCallback) {
        onResizeCallback.current = newOnResizeCallback;
      }
    }
  }, []);
  const removeObserver = React.useCallback(() => {
    if (resizeObserver.current) {
      resizeObserver.current.disconnect();
    }
  }, []);
  React.useEffect(() => {
    initObserver();
    return removeObserver;
  }, []);
  return React.useMemo(() => [observeElement, unobserveElement, updateOnResizeCallback], []);
};

const usePhoneScreen = (screenWidth = 438) => window.matchMedia(`(max-width: ${screenWidth}px)`).matches;

const mapNumber = (number, oldMin, oldMax, newMin, newMax) => (number - oldMin) * (newMax - newMin) / (oldMax - oldMin) + newMin;

const mapCropBox = (crop, shownImageDimensions, toDimensions) => ({
  ...(crop.x || crop.x === 0 ? {
    x: Math.round(mapNumber(crop.x, 0, shownImageDimensions.width,
    // could replace with image node's dimensions from designLayer as they're same
    0, toDimensions.width))
  } : {}),
  ...(crop.y || crop.y === 0 ? {
    y: Math.round(mapNumber(crop.y, 0, shownImageDimensions.height, 0, toDimensions.height))
  } : {}),
  width: Math.round(mapNumber(crop.width ?? shownImageDimensions.width, 0, shownImageDimensions.width, 0, toDimensions.width)),
  height: Math.round(mapNumber(crop.height ?? shownImageDimensions.height, 0, shownImageDimensions.height, 0, toDimensions.height))
});

const getSizeAfterRotation = (width, height, rotationAngleInDegree = 0) => {
  const absRotationAngleInDegree = Math.abs(rotationAngleInDegree);
  const roundedDegree = Math.round(rotationAngleInDegree);
  const isGreaterThan90Degree = absRotationAngleInDegree > 90;
  const currentAbsRotationAngleInDegree = isGreaterThan90Degree ? absRotationAngleInDegree - 90 : absRotationAngleInDegree;
  const currentWidth = isGreaterThan90Degree ? height : width;
  const currentHeight = isGreaterThan90Degree ? width : height;
  const radianAngle = currentAbsRotationAngleInDegree * Math.PI / 180;
  const sin = Math.abs(Math.sin(radianAngle));
  const cos = Math.abs(Math.cos(radianAngle));
  const getLeftOffset = () => roundedDegree > 90 ? currentWidth * cos + currentHeight * sin : currentHeight * sin;
  const getTopOffset = () => {
    if (roundedDegree < 0 && roundedDegree > -90) {
      return currentWidth * sin;
    }
    if (roundedDegree > 90) {
      return currentWidth * sin;
    }
    return currentHeight * cos + currentWidth * sin;
  };
  return {
    width: Math.round(currentWidth * cos) + Math.round(currentHeight * sin),
    height: Math.round(currentWidth * sin) + Math.round(currentHeight * cos),
    offsetTop: roundedDegree >= 0 && roundedDegree <= 90 ? 0 : getTopOffset(),
    offsetLeft: roundedDegree <= 0 && roundedDegree >= -90 ? 0 : getLeftOffset()
  };
};

const imageToBase64 = image => {
  if (image instanceof HTMLImageElement) {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    canvas.width = image.width;
    canvas.height = image.height;
    ctx.drawImage(image, 0, 0);
    return canvas.toDataURL();
  }
  return '';
};

const getFileFullName = (fileName = '', appendedExtension) => {
  let finalExtension = appendedExtension;
  let finalFileName = fileName;
  if (!finalExtension && POSSIBLE_IMAGE_TYPES.some(extension => fileName.lastIndexOf(`.${extension}`) === fileName.length - `.${extension}`.length)) {
    const currentExtension = fileName.slice(fileName.lastIndexOf('.') + 1)?.toLowerCase();
    finalExtension = currentExtension && SUPPORTED_IMAGE_TYPES.includes(currentExtension) ? currentExtension : DEFAULT_IMAGE_TYPE;
    finalFileName = fileName.slice(0, fileName.lastIndexOf('.'));
  }
  finalExtension = finalExtension || DEFAULT_IMAGE_TYPE;
  return {
    fullName: `${finalFileName}.${finalExtension}`,
    name: finalFileName,
    extension: finalExtension
  };
};

/* eslint-disable no-plusplus */
/* eslint-disable no-bitwise */
const rotateLeft = (n, s) => {
  const t4 = n << s | n >>> 32 - s;
  return t4;
};
const cvtHex = val => {
  let str = '';
  let i;
  let v;
  for (i = 7; i >= 0; i--) {
    v = val >>> i * 4 & 0x0f;
    str += v.toString(16);
  }
  return str;
};
const Utf8Encode = string => {
  const str = string.replace(/\r\n/g, '\n');
  let utftext = '';
  for (let n = 0; n < str.length; n++) {
    const c = str.charCodeAt(n);
    if (c < 128) {
      utftext += String.fromCharCode(c);
    } else if (c > 127 && c < 2048) {
      utftext += String.fromCharCode(c >> 6 | 192);
      utftext += String.fromCharCode(c & 63 | 128);
    } else {
      utftext += String.fromCharCode(c >> 12 | 224);
      utftext += String.fromCharCode(c >> 6 & 63 | 128);
      utftext += String.fromCharCode(c & 63 | 128);
    }
  }
  return utftext;
};
const sha1 = string => {
  let str = string;
  let blockstart;
  let i;
  let j;
  const W = new Array(80);
  let H0 = 0x67452301;
  let H1 = 0xefcdab89;
  let H2 = 0x98badcfe;
  let H3 = 0x10325476;
  let H4 = 0xc3d2e1f0;
  let A;
  let B;
  let C;
  let D;
  let E;
  let temp;
  str = Utf8Encode(str);
  const strLength = str.length;
  const wordArray = [];
  for (i = 0; i < strLength - 3; i += 4) {
    j = str.charCodeAt(i) << 24 | str.charCodeAt(i + 1) << 16 | str.charCodeAt(i + 2) << 8 | str.charCodeAt(i + 3);
    wordArray.push(j);
  }
  switch (strLength % 4) {
    case 0:
      i = 0x080000000;
      break;
    case 1:
      i = str.charCodeAt(strLength - 1) << 24 | 0x0800000;
      break;
    case 2:
      i = str.charCodeAt(strLength - 2) << 24 | str.charCodeAt(strLength - 1) << 16 | 0x08000;
      break;
    case 3:
      i = str.charCodeAt(strLength - 3) << 24 | str.charCodeAt(strLength - 2) << 16 | str.charCodeAt(strLength - 1) << 8 | 0x80;
      break;
  }
  wordArray.push(i);
  while (wordArray.length % 16 !== 14) wordArray.push(0);
  wordArray.push(strLength >>> 29);
  wordArray.push(strLength << 3 & 0x0ffffffff);
  for (blockstart = 0; blockstart < wordArray.length; blockstart += 16) {
    for (i = 0; i < 16; i++) W[i] = wordArray[blockstart + i];
    for (i = 16; i <= 79; i++) W[i] = rotateLeft(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    A = H0;
    B = H1;
    C = H2;
    D = H3;
    E = H4;
    for (i = 0; i <= 19; i++) {
      temp = rotateLeft(A, 5) + (B & C | ~B & D) + E + W[i] + 0x5a827999 & 0x0ffffffff;
      E = D;
      D = C;
      C = rotateLeft(B, 30);
      B = A;
      A = temp;
    }
    for (i = 20; i <= 39; i++) {
      temp = rotateLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0x6ed9eba1 & 0x0ffffffff;
      E = D;
      D = C;
      C = rotateLeft(B, 30);
      B = A;
      A = temp;
    }
    for (i = 40; i <= 59; i++) {
      temp = rotateLeft(A, 5) + (B & C | B & D | C & D) + E + W[i] + 0x8f1bbcdc & 0x0ffffffff;
      E = D;
      D = C;
      C = rotateLeft(B, 30);
      B = A;
      A = temp;
    }
    for (i = 60; i <= 79; i++) {
      temp = rotateLeft(A, 5) + (B ^ C ^ D) + E + W[i] + 0xca62c1d6 & 0x0ffffffff;
      E = D;
      D = C;
      C = rotateLeft(B, 30);
      B = A;
      A = temp;
    }
    H0 = H0 + A & 0x0ffffffff;
    H1 = H1 + B & 0x0ffffffff;
    H2 = H2 + C & 0x0ffffffff;
    H3 = H3 + D & 0x0ffffffff;
    H4 = H4 + E & 0x0ffffffff;
  }
  temp = cvtHex(H0) + cvtHex(H1) + cvtHex(H2) + cvtHex(H3) + cvtHex(H4);
  return temp.toLowerCase();
};

/** Internal Dependencies */
const encodeBase64 = str => {
  return btoa(str).replace(/=*$/g, '');
};
const getSha1 = (str, length) => {
  return sha1(str).slice(0, length);
};
const getSealingParams = (paramsStr, originalUrl, salt, charCount) => {
  const base64String = encodeBase64(paramsStr);
  const calcHash = getSha1(originalUrl + base64String + salt, charCount);
  return [calcHash ? `ci_seal=${calcHash}` : '', base64String ? `ci_eqs=${base64String}` : ''].filter(i => i).join('&');
};
const getImageSealingParams = (paramsStr, imageSealing, originalUrl) => {
  const {
    salt,
    charCount,
    includeParams = []
  } = imageSealing || {};
  const isIncludeParamsEmpty = !includeParams || includeParams?.length === 0;
  let sealingParamsStr = '';
  let restParamsStr = '';
  const sealingParams = [];
  const restParams = [];
  paramsStr.split('&').forEach(item => {
    const [paramName] = item.split('=');
    if (includeParams?.indexOf(paramName) > -1 || isIncludeParamsEmpty) {
      sealingParams.push(item);
    } else {
      restParams.push(item);
    }
  });
  if (restParams.length > 0) {
    restParamsStr = restParams.join('&');
  }

  // We need to add sealing always, even if sealingParams is empty.
  // In case with empty params sealing will be like: ci_seal=10613a92e5
  sealingParamsStr = getSealingParams(sealingParams.join('&'), originalUrl, salt, charCount);
  return [sealingParamsStr, restParamsStr].filter(p => p).join('&');
};

const rgbaToHexWithOpacity = (rgba = '') => {
  const defaultHexColor = {
    hex: '000000',
    opacity: 1
  };
  if (!rgba) {
    return defaultHexColor;
  }
  if (rgba.startsWith('#')) {
    return {
      hex: rgba.replace('#', ''),
      opacity: 1
    };
  }
  let [r, g, b, opacity] = rgba.split(',');
  if (!r || !g || !b) {
    return defaultHexColor;
  }
  r = parseFloat(r.replace(/rgba?\(/, '').trim()).toString(16);
  g = parseFloat(g.trim()).toString(16);
  b = parseFloat(b.trim()).toString(16);
  opacity = opacity ? parseFloat(opacity.trim() ?? 1) : undefined;
  if (r.length === 1) r = `0${r}`;
  if (g.length === 1) g = `0${g}`;
  if (b.length === 1) b = `0${b}`;
  return {
    hex: `${r}${g}${b}`,
    opacity
  };
};

const toPrecisedFloat = (number, precision = 5) => number && +parseFloat(number).toFixed(precision);

/** Internal Dependencies */
const generateCropQuery = (crop, previewDimensions, originalDimensions, cropConfig) => {
  if (crop.noEffect) {
    // if the ratio contains = means it might be a complete crop query (func=face) then use it as it's otherwise assign the ratio to gravity.
    return crop.ratio.includes('=') ? crop.ratio : `gravity=${crop.ratio}`;
  }
  const {
    lockCropAreaAt
  } = cropConfig || {};
  const {
    x,
    y,
    width,
    height
  } = mapCropBox(crop, previewDimensions, originalDimensions);
  const ellipseQuery = crop.ratio === ELLIPSE_CROP ? `&radius=${Math.max(width, height)}&force_format=png` : '';
  if (lockCropAreaAt) {
    const [yPlace, xPlace] = lockCropAreaAt.split('-');
    const gravity = `${EDITOR_TO_CLOUDIMG_POSITIONS[yPlace]}${EDITOR_TO_CLOUDIMG_POSITIONS[xPlace]}`;
    return `gravity=${gravity}&aspect_ratio=${toPrecisedFloat(typeof crop.ratio === 'string' ? width / height : crop.ratio, 2)}${ellipseQuery}`;
  }
  return `tl_px=${x},${y}&br_px=${x + width},${y + height}${ellipseQuery}`;
};
const generateResizeQuery = ({
  width,
  height
} = {}) => `w=${width}&h=${height}`;
const generateRotationQuery = rotationAngle => `r=${-rotationAngle}`;
const generateFlipQuery = (isFlippedX, isFlippedY) => `flip=${isFlippedX ? 'x' : ''}${isFlippedY ? 'y' : ''}`;
const generateWatermarkQuery = (previewDimensions, watermarkAnnotation = {}, crop = {}) => {
  const {
    width,
    height,
    x,
    y,
    opacity,
    scaleX = 1,
    scaleY = 1,
    ...watermark
  } = watermarkAnnotation;
  const mainImageRatio = previewDimensions.width / previewDimensions.height;
  const scaledWidth = previewDimensions.width * previewDimensions.scaledBy;
  const scaledHeight = previewDimensions.height * previewDimensions.scaledBy;
  const scaledX = x * previewDimensions.scaledBy;
  const scaledY = y * previewDimensions.scaledBy;
  const queryParams = `wat=1&wat_gravity=absolute&wat_pos=${Math.floor((scaledX - (crop.x || 0)) / scaledWidth * 100, 2)}p,${Math.floor((scaledY - (crop.y || 0)) / scaledHeight * 100, 2)}p`;
  if (watermarkAnnotation.name === TOOLS_IDS.TEXT) {
    const {
      hex,
      opacity: colorOpacity
    } = rgbaToHexWithOpacity(watermark.fill);
    return `${queryParams}&wat_text=${watermark.text.replaceAll('\n', '')}&wat_font=${watermark.fontFamily}&wat_color=${hex}&wat_opacity=${colorOpacity ?? opacity ?? 1}&wat_fontsize=${watermark.fontSize}max`;
  }
  const imgSrc = watermark.image?.src || watermark.image;
  const watermarkUrl = !imgSrc.startsWith('blob:') && imgSrc;
  const watermarkRatio = width / height;
  const watermarkScale = toPrecisedFloat((watermarkRatio > mainImageRatio ? width * scaleX / scaledWidth : height * scaleY / scaledHeight) * 100, 2);
  return `${queryParams}&wat_opacity=${opacity}&wat_scale=${watermarkScale}p${watermarkUrl ? `&wat_url=${encodeURIComponent(watermarkUrl)}` : ''}`;
};
const finetuneNameToParamInfo = {
  Brighten: {
    cloudimage: {
      name: 'bright',
      min: -100,
      max: 100
    },
    internal: {
      propName: 'brightness',
      min: -1,
      max: 1
    }
  },
  Contrast: {
    cloudimage: {
      name: 'contrast',
      min: -100,
      max: 100
    },
    internal: {
      propName: 'contrast',
      min: -100,
      max: 100
    }
  },
  Blur: {
    cloudimage: {
      name: 'blur',
      min: 0,
      max: 100
    },
    internal: {
      propName: 'blurRadius',
      min: 0,
      max: 100
    }
  }
};
const generateFinetuneQuery = (finetunes, finetunesProps = {}) => {
  const queryParams = [];
  finetunes.forEach(finetuneFn => {
    const finetuneParamInfo = (finetuneFn.finetuneName || finetuneFn.name) && finetuneNameToParamInfo[finetuneFn.finetuneName || finetuneFn.name];
    if (finetuneParamInfo) {
      const finetuneCloudimageVal = toPrecisedFloat(mapNumber(finetunesProps[finetuneParamInfo.internal.propName], finetuneParamInfo.internal.min, finetuneParamInfo.internal.max, finetuneParamInfo.cloudimage.min, finetuneParamInfo.cloudimage.max), 2);
      queryParams.push(`${finetuneParamInfo.cloudimage.name}=${finetuneCloudimageVal}`);
    }
  });
  return queryParams.join('&');
};
const operationsToCloudimageUrl = (cloudimage, operations, previewDimensions, originalImage, cropConfig) => {
  const {
    token,
    domain,
    dontPrefixUrl,
    version,
    imageSealing,
    secureProtocol
  } = cloudimage;
  const {
    imgSrc,
    adjustments: {
      crop,
      rotation,
      isFlippedX,
      isFlippedY
    },
    resize = {},
    finetunes = {},
    finetunesProps,
    annotations = {}
  } = operations;
  const url = !dontPrefixUrl ? `http${secureProtocol ? 's' : ''}://${token}.${domain.replace(/^(https?:\/\/)?(www\.)?|^\.|\/$/g, '')}/${version ? `${version}/` : ''}` : '';
  const operationsQueries = [];
  if (crop.width && crop.height && (crop.x || crop.x === 0) && (crop.y || crop.y === 0)) {
    operationsQueries.push(generateCropQuery(crop, previewDimensions, originalImage, cropConfig));
  }
  if (resize.width || resize.height) {
    operationsQueries.push(generateResizeQuery({
      ...originalImage,
      ...resize
    }));
  }
  if (rotation) {
    operationsQueries.push(generateRotationQuery(rotation));
  }
  if (isFlippedX || isFlippedY) {
    operationsQueries.push(generateFlipQuery(isFlippedX, isFlippedY));
  }
  if (finetunes.length > 0 && finetunesProps) {
    operationsQueries.push(generateFinetuneQuery(finetunes, finetunesProps));
  }
  if (annotations[WATERMARK_ANNOTATION_ID$1]) {
    operationsQueries.push(generateWatermarkQuery(previewDimensions, annotations[WATERMARK_ANNOTATION_ID$1], crop));
  }
  operationsQueries.push('ci_url_encoded=1');
  let paramsStr = operationsQueries.join('&');
  if (imageSealing.enable) {
    paramsStr = getImageSealingParams(paramsStr, imageSealing, imgSrc);
  }
  paramsStr = paramsStr.replaceAll(' ', '+');
  const queryPrefixOperator = !dontPrefixUrl && '?' || imgSrc.indexOf('?') === -1 ? '?' : '&';
  return `${url}${dontPrefixUrl ? imgSrc : encodeURIComponent(imgSrc)}${paramsStr ? `${queryPrefixOperator}${paramsStr.replace(/&$/, '')}` : ''}`;
};

/** External Dependencies */
const useTransformedImgData = () => {
  const state = useStore();
  const {
    dispatch,
    designLayer,
    shownImageDimensions,
    originalImage,
    resize = {},
    adjustments: {
      crop = {},
      rotation = 0
    } = {},
    config: {
      savingPixelRatio,
      previewPixelRatio,
      forceToPngInEllipticalCrop,
      defaultSavedImageType,
      useCloudimage,
      cloudimage,
      [TOOLS_IDS.CROP]: cropConfig
    }
  } = state;
  const getTransformedCloudimageData = (imageFileInfo = {}) => {
    const {
      filter,
      ...designState
    } = extractCurrentDesignState(state);
    const cloudimageUrl = operationsToCloudimageUrl(cloudimage, designState, shownImageDimensions, originalImage, cropConfig);
    const mappedCropBox = mapCropBox({
      x: crop.x,
      y: crop.y,
      width: crop.width,
      height: crop.height
    }, shownImageDimensions, originalImage);
    const imageData = {
      cloudimageUrl,
      width: imageFileInfo?.size?.width || mappedCropBox.width,
      height: imageFileInfo?.size?.height || mappedCropBox.height
    };
    return {
      imageData,
      designState
    };
  };
  const getTransformedImgData = (imageFileInfo = {}, pixelRatio = false, keepLoadingSpinnerShown = false) => {
    const currentImgFileInfo = {
      size: resize,
      ...imageFileInfo
    };
    Konva$2.pixelRatio = pixelRatio || savingPixelRatio;
    const {
      clipWidth,
      clipHeight,
      clipX,
      clipY
    } = designLayer.attrs;

    // We're using this for letting the designLayer's clipFunc know that we are in saving mode
    // so it should apply elliptical crop if it is not applied and user is chosing ellitpical ratio.
    designLayer.setAttr('isSaving', true);
    const preparedCanvas = designLayer.getStage().clone({
      width: originalImage.width,
      height: originalImage.height,
      scaleX: 1,
      scaleY: 1
    });
    const [preparedDesignLayer] = preparedCanvas.children; // children[0] = Design layer
    preparedCanvas.children[1].destroy(); // children[1] = Transformers layer, which is not needed anymore
    const imgNode = preparedCanvas.findOne(`#${IMAGE_NODE_ID}`);
    imgNode.cache();
    const preparedDesignLayerScale = {
      x: preparedCanvas.width() / shownImageDimensions.width,
      y: preparedCanvas.height() / shownImageDimensions.height
    };
    preparedDesignLayer.setAttrs({
      rotation: 0,
      offsetX: 0,
      offsetY: 0,
      x: 0,
      y: 0,
      scaleX: preparedDesignLayerScale.x,
      scaleY: preparedDesignLayerScale.y
    });
    const {
      name,
      extension,
      quality = 92,
      size = {}
    } = {
      ...((!currentImgFileInfo.name || !currentImgFileInfo.extension) && getFileFullName(originalImage.name, forceToPngInEllipticalCrop && crop.ratio === ELLIPSE_CROP ? 'png' : SUPPORTED_IMAGE_TYPES.includes(defaultSavedImageType?.toLowerCase()) && defaultSavedImageType)),
      ...currentImgFileInfo
    };
    const isQualityAcceptable = ['jpeg', 'jpg', 'webp'].includes(extension);
    const mappedCropBox = mapCropBox(crop.noEffect ? {
      x: 0,
      y: 0
    } : {
      x: crop.x || clipX,
      y: crop.y || clipY,
      width: crop.width || clipWidth,
      height: crop.height || clipHeight
    }, shownImageDimensions, preparedCanvas.attrs);
    const rotatedCropBox = getSizeAfterRotation(mappedCropBox.width, mappedCropBox.height, rotation);
    preparedCanvas.setAttrs({
      offsetX: mappedCropBox.width / 2 + mappedCropBox.x,
      offsetY: mappedCropBox.height / 2 + mappedCropBox.y,
      width: rotatedCropBox.width,
      height: rotatedCropBox.height,
      x: rotatedCropBox.width / 2,
      y: rotatedCropBox.height / 2,
      rotation
    });
    if (size.width) {
      const newScaleX = size.width / preparedCanvas.width();
      preparedCanvas.setAttrs({
        scaleX: newScaleX,
        width: size.width,
        x: preparedCanvas.x() * Math.abs(newScaleX)
      });
    }
    if (size.height) {
      const newScaleY = size.height / preparedCanvas.height();
      preparedCanvas.setAttrs({
        scaleY: newScaleY,
        height: size.height,
        y: preparedCanvas.y() * Math.abs(newScaleY)
      });
    }

    // As jpg doesn't support quality proeprty but it still same as jpeg,
    // then we convert mime to image/jpeg and name the file with .jpg
    const finalOptions = {
      mimeType: `image/${extension === 'jpg' ? 'jpeg' : extension}`,
      ...(isQualityAcceptable ? {
        quality
      } : {})
    };
    const finalCanvas = preparedCanvas.toCanvas(finalOptions);
    const finalImgBase64 = preparedCanvas.toDataURL(finalOptions);
    const finalImgDesignState = {
      ...extractCurrentDesignState(state),
      shownImageDimensions: {
        width: state.shownImageDimensions.width,
        height: state.shownImageDimensions.height,
        scaledBy: state.shownImageDimensions.scaledBy
      }
    };
    if (finalImgDesignState.filter) {
      finalImgDesignState.filter = finalImgDesignState.filter.filterName || finalImgDesignState.filter.name;
    }
    finalImgDesignState.finetunes = finalImgDesignState.finetunes.map(finetuneFn => finetuneFn.finetuneName || finetuneFn.name);
    Object.keys(finalImgDesignState.annotations).forEach(k => {
      const annotation = finalImgDesignState.annotations[k];
      const imgSrc = annotation.name === TOOLS_IDS.IMAGE && annotation.image?.src;
      if (imgSrc && imgSrc.startsWith('blob:')) {
        finalImgDesignState.annotations[k].image = imageToBase64(annotation.image);
      } else if (annotation.image instanceof HTMLImageElement) {
        finalImgDesignState.annotations[k].image = imgSrc;
      }
    });
    const finalImgPassedObject = {
      fullName: `${name}.${extension}`,
      name,
      extension,
      mimeType: `image/${extension}`,
      imageCanvas: finalCanvas,
      imageBase64: finalImgBase64,
      width: size.width || mappedCropBox.width,
      height: size.height || mappedCropBox.height,
      ...(isQualityAcceptable ? {
        quality
      } : {})
    };

    // Reseting isSaving to false so we get everything back to normal if user wants to continue editing after saving.
    designLayer.setAttr('isSaving', false);
    dispatch({
      type: SET_SAVED
    });
    imgNode.clearCache();
    preparedCanvas.destroy();
    Konva$2.pixelRatio = previewPixelRatio;
    const hideLoadingSpinner = () => {
      dispatch({
        type: HIDE_LOADER
      });
    };
    if (!keepLoadingSpinnerShown) {
      hideLoadingSpinner();
    }
    return {
      imageData: finalImgPassedObject,
      designState: finalImgDesignState,
      hideLoadingSpinner
    };
  };
  return useCloudimage ? getTransformedCloudimageData : getTransformedImgData;
};

var Type$3 = {
  Default: 'default',
  Localization: 'localization'
};

var LabelSize = {
  Sm: 'sm',
  Md: 'md',
  Lg: 'lg',
  Xl: 'xl'
};

var fontSizeLabelMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, LabelSize.Sm, function (_ref) {
  var font = _ref.theme.typography.font;
  return styled.css(font[FontVariant.LabelSmall]);
}), LabelSize.Md, function (_ref2) {
  var font = _ref2.theme.typography.font;
  return styled.css(font[FontVariant.LabelMedium]);
}), LabelSize.Lg, function (_ref3) {
  var font = _ref3.theme.typography.font;
  return styled.css(font[FontVariant.LabelLargeEmphasis]);
}), LabelSize.Xl, function (_ref4) {
  var font = _ref4.theme.typography.font;
  return styled.css(font[FontVariant.LabelExtraLargeEmphasis]);
});

var baseClassName$t = 'Label';
var Label$7 = /*#__PURE__*/styled.label.attrs({
  className: generateClassNames(baseClassName$t, 'root')
}).withConfig({
  componentId: "sc-16k2ql4-0"
})(function (_ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? LabelSize.Md : _ref$size,
    _ref$$error = _ref.$error,
    $error = _ref$$error === void 0 ? false : _ref$$error,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    htmlFor = _ref.htmlFor,
    theme = _ref.theme;
  return styled.css(["display:flex;align-items:center;color:", ";font-style:normal;font-weight:normal;", " ", " cursor:", ";", ";"], theme.palette[Color.TextSecondary], disabled && styled.css(["color:", ";", "{color:", ";}"], theme.palette[Color.ButtonDisabledText], Icon$6, theme.palette[Color.IconsMuted]), fontSizeLabelMixin[size], htmlFor && 'pointer', $error && styled.css(["color:", " !important;"], theme.palette[Color.Error]));
});
var Text$2 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$t, 'text')
}).withConfig({
  componentId: "sc-16k2ql4-1"
})(["white-space:nowrap;text-overflow:ellipsis;overflow:hidden;"]);
var Icon$6 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$t, 'Icon')
}).withConfig({
  componentId: "sc-16k2ql4-2"
})(function (_ref2) {
  var palette = _ref2.theme.palette,
    _ref2$$end = _ref2.$end,
    $end = _ref2$$end === void 0 ? false : _ref2$$end;
  return styled.css(["display:flex;", ";color:", ";"], $end ? 'margin-left: 4px' : 'margin-right: 4px', palette[Color.IconsSecondary]);
});
var Styled$O = applyDisplayNames({
  Label: Label$7,
  Icon: Icon$6,
  Text: Text$2
});
var StyledLabel = Styled$O;

var _excluded$1P = ["children", "iconStart", "iconEnd", "error", "disabled", "size", "type"];
var Label$5 = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    iconStart = _ref.iconStart,
    iconEnd = _ref.iconEnd,
    _ref$error = _ref.error,
    error = _ref$error === void 0 ? false : _ref$error,
    disabled = _ref.disabled,
    size = _ref.size,
    _ref$type = _ref.type,
    type = _ref$type === void 0 ? Type$3.Default : _ref$type,
    rest = _objectWithoutProperties(_ref, _excluded$1P);
  var textRef = React.useRef(null);
  var _useState = React.useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isEllipsisActive = _useState2[0],
    setIsEllipsisActive = _useState2[1];
  var renderIcon = function renderIcon(icon, end) {
    return /*#__PURE__*/React.createElement(StyledLabel.Icon, {
      $end: end
    }, typeof icon === 'function' ? icon({
      size: size === 'md' ? 14 : 12
    }) : icon);
  };
  var getTextTooltip = function getTextTooltip() {
    if (typeof children === 'string' && isEllipsisActive) {
      return children;
    }
  };
  var handleTextTooltip = function handleTextTooltip() {
    if (textRef.current !== null && textRef.current) {
      var _textRef$current, _textRef$current2;
      setIsEllipsisActive((textRef === null || textRef === void 0 || (_textRef$current = textRef.current) === null || _textRef$current === void 0 ? void 0 : _textRef$current.offsetWidth) < (textRef === null || textRef === void 0 || (_textRef$current2 = textRef.current) === null || _textRef$current2 === void 0 ? void 0 : _textRef$current2.scrollWidth));
    }
  };
  return /*#__PURE__*/React.createElement(StyledLabel.Label, _extends({
    ref: ref,
    $error: error,
    disabled: disabled,
    size: size,
    type: type
  }, rest), iconStart && renderIcon(iconStart, false), /*#__PURE__*/React.createElement(StyledLabel.Text, {
    title: getTextTooltip(),
    onMouseOver: handleTextTooltip,
    ref: textRef
  }, children), iconEnd && renderIcon(iconEnd, true));
});
var Label$6 = Label$5;

/** External Dependencies */
const StyledToolsBar = styled.div`
  width: fit-content;
  margin: 0 auto;
  max-width: 99.5%;
  max-height: 170px;

  [data-phone="true"] & {
    padding: 0;
    margin-top: 8px;
    max-height: initial;
  }
`;
const StyledToolsBarItems = styled.div`
  padding: 8px 16px 16px 16px;
  display: flex;
  gap: 12px;
  align-items: center;
  overflow: hidden;

  ${({
  isPhoneScreen
}) => isPhoneScreen && `
    justify-content: space-between;
    padding: 12px;
    gap: 8px;
  `}
`;

// HORIZONTAL TOOLBAR
const StyledToolsBarItemButton = styled.div(({
  theme,
  isPhoneScreen
}) => `
    display: flex;
    flex: 1;
    height: 100%;
    gap: 6px;
    border-radius: 2px;
    align-items: center;
    justify-content: center;
    padding: 6px 12px;
    border: 0.062rem solid white;
    
    svg {
      color: black;
      flex-shrink: 0;
    }

    &,
    * {
      cursor: pointer;
    }

    &:hover {
      border-radius: 20px;
      border: 0.062rem solid #a8a8a8;
    }

    &[aria-selected='true'] {
      background-color: #dedede;
      border-radius: 20px;
      border: 0.062rem solid #a8a8a8;

      * {
        color: black;
      }
    }

    ${isPhoneScreen && styled.css`
        flex-direction: column;
        min-width: 52px;
        min-height: 52px;
        padding: 8px;
        gap: 4px;
      `}
  `);

// HORIZONTAL TOOLBAR > TEXT LABEL
const StyledToolsBarItemButtonLabel = styled(Label$6)(({
  theme,
  isPhoneScreen
}) => styled.css`
    color: ${theme.palette[Color.TextPrimary]};
    font-size: 0.6875rem;
    line-height: 14px;
    font-family: 'Open Sans', sans-serif;
    letter-spacing: 0.04rem;
    ${isPhoneScreen && theme.typography.font[FontVariant.LabelExtraSmallUp]};
  `);
const StyledToolsBarItemOptionsWrapper = styled.div`
  position: relative;
  width: 100%;
  transition: max-height 100ms ease-in-out;
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 24px;

  ${props => `
      max-height: ${props.hasChildren ? "56px" : 0};
      margin: ${props.hasChildren ? "0 auto 8px" : 0};
    `};

  ${({
  isPhoneScreen
}) => isPhoneScreen && `
    max-height: unset;
    flex-direction: column;
    padding: 0 12px 8px 12px;
    gap: 8px;
    margin: 0;
  `}
`;

/** External Dependencies */
const ToolsBarItemButton = ({
  id,
  label,
  onClick,
  Icon,
  isSelected,
  children,
  className
}) => {
  const isPhoneScreen = usePhoneScreen(320);
  const handleClick = e => {
    onClick(id, e);
  };
  return /*#__PURE__*/React.createElement(StyledToolsBarItemButton, {
    className: className,
    onClick: handleClick,
    "aria-selected": isSelected,
    isPhoneScreen: isPhoneScreen
  }, /*#__PURE__*/React.createElement(Icon, {
    size: isPhoneScreen ? 20 : 16
  }), label && /*#__PURE__*/React.createElement(StyledToolsBarItemButtonLabel, {
    isPhoneScreen: isPhoneScreen
  }, label), children);
};
ToolsBarItemButton.defaultProps = {
  isSelected: false,
  id: undefined,
  children: null,
  label: ''
};
ToolsBarItemButton.propTypes = {
  children: PropTypes.node,
  id: PropTypes.string,
  label: PropTypes.string,
  onClick: PropTypes.func.isRequired,
  className: PropTypes.string.isRequired,
  isSelected: PropTypes.bool,
  Icon: PropTypes.oneOfType([PropTypes.node, PropTypes.func, PropTypes.instanceOf(Object)]).isRequired
};
var ToolsBarItemButton$1 = /*#__PURE__*/React.memo(ToolsBarItemButton);

/** External Dependencies */
const Brightness = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React.createElement(ToolsBarItemButton$1, {
  className: "FIE_brightness-tool-button",
  id: TOOLS_IDS.BRIGHTNESS,
  label: t('brightnessTool'),
  Icon: Brightness$1,
  onClick: selectTool,
  isSelected: isSelected
});
Brightness.defaultProps = {
  isSelected: false
};
Brightness.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

function useControlled(_ref) {
  var controlled = _ref.controlled,
    defaultProp = _ref["default"];
  // isControlled is ignored in the hook dependency lists as it should never change.
  var _useRef = React.useRef(controlled !== undefined),
    isControlled = _useRef.current;
  var _useState = React.useState(defaultProp),
    _useState2 = _slicedToArray(_useState, 2),
    valueState = _useState2[0],
    setValue = _useState2[1];
  var value = isControlled ? controlled : valueState;
  var setValueIfUncontrolled = React.useCallback(function (newValue) {
    if (!isControlled) {
      setValue(newValue);
    }
  }, []);
  return [value, setValueIfUncontrolled];
}

var useEnhancedEffect = typeof window !== 'undefined' ? React__namespace.useLayoutEffect : React__namespace.useEffect;
var useEnhancedEffect$1 = useEnhancedEffect;

/**
 * https://github.com/facebook/react/issues/14099#issuecomment-440013892
 */
function useEventCallback(fn) {
  var ref = React__namespace.useRef(fn);
  useEnhancedEffect$1(function () {
    ref.current = fn;
  });
  return React__namespace.useCallback(function () {
    return (
      // @ts-expect-error hide `this`
      // tslint:disable-next-line:ban-comma-operator
      (ref.current).apply(void 0, arguments)
    );
  }, []);
}

var LabelTooltip$1 = {
  Auto: 'auto',
  On: 'on',
  Off: 'off'
};

var baseClassName$s = 'Slider';
var Slider$3 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$s, 'root')
}).withConfig({
  componentId: "sc-jjink6-0"
})(function (_ref) {
  var theme = _ref.theme,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled;
  return styled.css(["display:inline-block;border-radius:2px;position:relative;cursor:pointer;touch-action:none;color:", ";height:4px;width:100%;padding:12px 0;"], disabled ? theme.palette[Color.AccentPrimaryDisabled] : theme.palette[Color.BorderActiveBottom]);
});
var Rail = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$s, 'rail')
}).withConfig({
  componentId: "sc-jjink6-1"
})(["display:block;position:absolute;border-radius:inherit;background-color:currentColor;opacity:0.38;width:100%;height:inherit;top:50%;transform:translateY(-50%);"]);
var Track = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$s, 'Track')
}).withConfig({
  componentId: "sc-jjink6-2"
})(["display:block;position:absolute;border-radius:inherit;border:1px solid currentColor;background-color:currentColor;height:inherit;top:50%;transform:translateY(-50%);"]);
var Thumb = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$s, 'thumb')
}).withConfig({
  componentId: "sc-jjink6-3"
})(["position:absolute;width:15px;height:15px;box-sizing:border-box;border-radius:50%;outline:0;background-color:currentColor;display:flex;align-items:center;justify-content:center;top:50%;transform:translate(-50%,-50%);& > input{border:0px;clip:rect(0px,0px,0px,0px);height:100%;margin:-1px;overflow:hidden;padding:0px;position:absolute;white-space:nowrap;width:100%;direction:ltr;}&::before{position:absolute;content:'';border-radius:inherit;width:100%;height:100%;box-shadow:0px 3px 1px -2px rgb(0 0 0 / 20%),0px 2px 2px 0px rgb(0 0 0 / 14%),0px 1px 5px 0px rgb(0 0 0 / 12%);}&::after{position:absolute;content:'';border-radius:50%;width:42px;height:42px;top:50%;left:50%;transform:translate(-50%,-50%);}"]);
var LabelTooltip = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$s, 'label')
}).withConfig({
  componentId: "sc-jjink6-4"
})(function (_ref2) {
  var theme = _ref2.theme,
    _ref2$open = _ref2.open,
    open = _ref2$open === void 0 ? false : _ref2$open,
    _ref2$disabled = _ref2.disabled,
    disabled = _ref2$disabled === void 0 ? false : _ref2$disabled;
  return styled.css(["display:flex;align-items:center;justify-content:center;padding:6px 6px;border-radius:2px;position:absolute;top:-10px;font-size:10px;z-index:1;white-space:nowrap;transition:transform 150ms cubic-bezier(0.4,0,0.2,1) 0ms;transform-origin:bottom center;transform:", ";background-color:", ";color:#fff;cursor:pointer;transition:all 100ms ease-out;&::before{position:absolute;content:'';background-color:inherit;width:8px;height:8px;bottom:0px;left:50%;transform:translate(-50%,50%) rotate(45deg);}"], open ? 'translateY(-100%) scale(1)' : 'translateY(-100%) scale(0)', disabled ? theme.palette[Color.AccentPrimaryDisabled] : theme.palette[Color.LinkStateless]);
});
var SliderAnnotation = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$s, 'annotation')
}).withConfig({
  componentId: "sc-jjink6-5"
})(function (_ref3) {
  var theme = _ref3.theme;
  return styled.css(["display:flex;justify-content:space-between;margin-top:12px;color:", ";"], theme.palette[Color.TextSecondary]);
});
var Styled$M = applyDisplayNames({
  Slider: Slider$3,
  Rail: Rail,
  Track: Track,
  Thumb: Thumb,
  SliderAnnotation: SliderAnnotation,
  LabelTooltip: LabelTooltip
});
var Styled$N = Styled$M;

var _excluded$1O = ["defaultValue", "disabled", "disableSwap", "hideTrack", "hideAnnotation", "value", "min", "max", "onChange", "onMouseDown", "onMouseUp", "step", "labelTooltip", "annotation", "components", "componentsProps"];
function ownKeys$b(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$b(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$b(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$b(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var INTENTIONAL_DRAG_COUNT_THRESHOLD = 2;
var dataIndex = 'data-index';
var Slider$1 = intrinsicComponent$1(function (_ref, ref) {
  var defaultValue = _ref.defaultValue,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$disableSwap = _ref.disableSwap,
    disableSwap = _ref$disableSwap === void 0 ? false : _ref$disableSwap,
    _ref$hideTrack = _ref.hideTrack,
    hideTrack = _ref$hideTrack === void 0 ? false : _ref$hideTrack,
    _ref$hideAnnotation = _ref.hideAnnotation,
    hideAnnotation = _ref$hideAnnotation === void 0 ? false : _ref$hideAnnotation,
    valueProp = _ref.value,
    _ref$min = _ref.min,
    min = _ref$min === void 0 ? 0 : _ref$min,
    _ref$max = _ref.max,
    max = _ref$max === void 0 ? 100 : _ref$max,
    onChange = _ref.onChange,
    onMouseDown = _ref.onMouseDown,
    onMouseUp = _ref.onMouseUp,
    _ref$step = _ref.step,
    step = _ref$step === void 0 ? 1 : _ref$step,
    _ref$labelTooltip = _ref.labelTooltip,
    labelTooltip = _ref$labelTooltip === void 0 ? LabelTooltip$1.Off : _ref$labelTooltip,
    _ref$annotation = _ref.annotation,
    annotation = _ref$annotation === void 0 ? 'MB' : _ref$annotation,
    _ref$components = _ref.components,
    components = _ref$components === void 0 ? {} : _ref$components,
    _ref$componentsProps = _ref.componentsProps,
    componentsProps = _ref$componentsProps === void 0 ? {} : _ref$componentsProps,
    rest = _objectWithoutProperties(_ref, _excluded$1O);
  var _useState = React.useState(-1),
    _useState2 = _slicedToArray(_useState, 2),
    active = _useState2[0],
    setActive = _useState2[1];
  var _useState3 = React.useState(-1),
    _useState4 = _slicedToArray(_useState3, 2),
    open = _useState4[0],
    setOpen = _useState4[1];
  var _useState5 = React.useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    dragging = _useState6[0],
    setDragging = _useState6[1];
  var moveCount = React.useRef(0);
  var previousIndex = React.useRef(0);
  var touchId = React.useRef();
  var sliderRef = React.useRef(null);
  var handleRef = useForkRef(ref, sliderRef);
  var _useControlled = useControlled({
      controlled: valueProp,
      "default": defaultValue !== null && defaultValue !== void 0 ? defaultValue : min
    }),
    _useControlled2 = _slicedToArray(_useControlled, 2),
    valueDerived = _useControlled2[0],
    setValueState = _useControlled2[1];
  var axis = 'horizontal';
  var range = Array.isArray(valueDerived);
  var values = range ? valueDerived.slice().sort(asc) : [valueDerived];
  var getFingerNewValue = function getFingerNewValue(_ref2) {
    var finger = _ref2.finger,
      _ref2$move = _ref2.move,
      move = _ref2$move === void 0 ? false : _ref2$move,
      values2 = _ref2.values;
    var slider = sliderRef.current;
    if (slider) {
      var _slider$getBoundingCl = slider.getBoundingClientRect(),
        width = _slider$getBoundingCl.width,
        height = _slider$getBoundingCl.height,
        bottom = _slider$getBoundingCl.bottom,
        left = _slider$getBoundingCl.left;
      var percent;
      if (axis.indexOf('vertical') === 0) {
        percent = (bottom - finger.y) / height;
      } else {
        percent = (finger.x - left) / width;
      }
      if (axis.includes('-reverse')) {
        percent = 1 - percent;
      }
      var newValue;
      newValue = percentToValue(percent, min, max);
      if (step) {
        newValue = roundValueToStep(newValue, step, min);
      }
      newValue = clamp(newValue, min, max);
      var activeIndex = 0;
      if (range) {
        if (!move) {
          activeIndex = findClosest(values2, newValue);
        } else {
          activeIndex = previousIndex.current;
        }
        if (disableSwap) {
          newValue = clamp(newValue, values2[activeIndex - 1] || -Infinity, values2[activeIndex + 1] || Infinity);
        }
        var previousValue = newValue;
        newValue = setValueIndex({
          values: values2,
          newValue: newValue,
          index: activeIndex
        });
        if (!(disableSwap && move) && Array.isArray(newValue)) {
          activeIndex = newValue.indexOf(previousValue);
          previousIndex.current = activeIndex;
        }
      }
      return {
        newValue: newValue,
        activeIndex: activeIndex
      };
    }
    return null;
  };
  var handleChange = function handleChange(event, value, thumbIndex) {
    if (onChange) {
      onChange(event, value, thumbIndex);
    }
  };
  var handleHiddenInputChange = function handleHiddenInputChange(event) {
    var index = Number(event.currentTarget.getAttribute(dataIndex));
    var newValue = event.target.valueAsNumber;
    if (range) {
      if (disableSwap) {
        newValue = clamp(newValue, values[index - 1] || -Infinity, values[index + 1] || Infinity);
      }
      var previousValue = newValue;
      newValue = setValueIndex({
        values: values,
        newValue: newValue,
        index: index
      });
      var activeIndex = index;
      if (!disableSwap) {
        activeIndex = newValue.indexOf(previousValue);
      }
      focusThumb({
        sliderRef: sliderRef,
        activeIndex: activeIndex
      });
    }
    setValueState(newValue);
    handleChange(event, newValue, index);
    if (onMouseUp) {
      onMouseUp(event);
    }
  };
  var handleTouchMove = useEventCallback(function (nativeEvent) {
    var finger = trackFinger(nativeEvent, touchId);
    if (!finger) {
      return;
    }
    moveCount.current += 1;
    if (nativeEvent.type === 'mousemove' && nativeEvent.buttons === 0) {
      handleTouchEnd(nativeEvent);
      return;
    }
    var _ref3 = getFingerNewValue({
        finger: finger,
        move: true,
        values: values
      }),
      newValue = _ref3.newValue,
      activeIndex = _ref3.activeIndex;
    focusThumb({
      sliderRef: sliderRef,
      activeIndex: activeIndex,
      setActive: setActive
    });
    setValueState(newValue);
    if (!dragging && moveCount.current > INTENTIONAL_DRAG_COUNT_THRESHOLD) {
      setDragging(true);
    }
    handleChange(nativeEvent, newValue, activeIndex);
  });
  var handleTouchEnd = useEventCallback(function (nativeEvent) {
    var finger = trackFinger(nativeEvent, touchId);
    setDragging(false);
    if (!finger) {
      return;
    }
    setActive(-1);
    if (nativeEvent.type === 'touchend') {
      setOpen(-1);
    }
    if (onMouseUp) {
      onMouseUp(nativeEvent);
    }
    touchId.current = undefined;
    stopListening();
  });
  var handleTouchStart = useEventCallback(function (nativeEvent) {
    var touch = nativeEvent.changedTouches[0];
    if (touch != null) {
      touchId.current = touch.identifier;
    }
    var finger = trackFinger(nativeEvent, touchId);
    var _ref4 = getFingerNewValue({
        finger: finger,
        values: values
      }),
      newValue = _ref4.newValue,
      activeIndex = _ref4.activeIndex;
    focusThumb({
      sliderRef: sliderRef,
      activeIndex: activeIndex,
      setActive: setActive
    });
    setValueState(newValue);
    handleChange(nativeEvent, newValue, activeIndex);
    moveCount.current = 0;
    var doc = ownerDocument(sliderRef.current);
    doc.addEventListener('touchmove', handleTouchMove);
    doc.addEventListener('touchend', handleTouchEnd);
  });
  var handleMouseOver = useEventCallback(function (event) {
    var index = Number(event.currentTarget.getAttribute(dataIndex));
    setOpen(index);
  });
  var handleMouseLeave = useEventCallback(function () {
    setOpen(-1);
  });
  var handleMouseDown = useEventCallback(function (event) {
    if (!disabled) {
      if (onMouseDown) {
        onMouseDown(event);
      }
      if (event.button !== 0) {
        return;
      }

      // Avoid text selection
      event.preventDefault();
      var finger = trackFinger(event, touchId);
      var _ref5 = getFingerNewValue({
          finger: finger,
          values: values
        }),
        newValue = _ref5.newValue,
        activeIndex = _ref5.activeIndex;
      focusThumb({
        sliderRef: sliderRef,
        activeIndex: activeIndex,
        setActive: setActive
      });
      setValueState(newValue);
      handleChange(event, newValue, activeIndex);
      moveCount.current = 0;
      var doc = ownerDocument(sliderRef.current);
      doc.addEventListener('mousemove', handleTouchMove);
      doc.addEventListener('mouseup', handleTouchEnd);
    } else {
      // Avoid text selection
      event.preventDefault();
    }
  });
  var stopListening = React.useCallback(function () {
    var doc = ownerDocument(sliderRef.current);
    doc.removeEventListener('mousemove', handleTouchMove);
    doc.removeEventListener('mouseup', handleTouchEnd);
    doc.removeEventListener('touchmove', handleTouchMove);
    doc.removeEventListener('touchend', handleTouchEnd);
  }, [handleTouchEnd, handleTouchMove]);
  React.useEffect(function () {
    var slider = sliderRef.current;
    if (slider) {
      return function () {
        stopListening();
      };
    }
  }, [stopListening, handleTouchStart]);
  React.useEffect(function () {
    if (disabled) {
      stopListening();
    }
  }, [disabled, stopListening]);
  if (disabled && active !== -1) {
    setActive(-1);
  }
  var trackOffset = valueToPercent(range ? values[0] : min, min, max);
  var trackLeap = valueToPercent(values[values.length - 1], min, max) - trackOffset;
  var trackStyle = _objectSpread$b(_objectSpread$b({}, axisProps[axis].offset(trackOffset)), axisProps[axis].leap(trackLeap));
  var railProps = componentsProps.rail;
  var Rail = typeof components.Rail === 'function' ? /*#__PURE__*/React.createElement(components.Rail, _extends({}, railProps, {
    style: _objectSpread$b({}, railProps === null || railProps === void 0 ? void 0 : railProps.style)
  })) : /*#__PURE__*/React.createElement(Styled$N.Rail, _extends({}, railProps, {
    style: _objectSpread$b({}, railProps === null || railProps === void 0 ? void 0 : railProps.style)
  }));
  var trackProps = componentsProps.track;
  var Track = !hideTrack && (typeof components.Track === 'function' ? /*#__PURE__*/React.createElement(components.Track, _extends({}, trackProps, {
    style: _objectSpread$b(_objectSpread$b({}, trackStyle), trackProps === null || trackProps === void 0 ? void 0 : trackProps.style)
  })) : /*#__PURE__*/React.createElement(Styled$N.Track, _extends({}, trackProps, {
    style: _objectSpread$b(_objectSpread$b({}, trackStyle), trackProps === null || trackProps === void 0 ? void 0 : trackProps.style)
  })));
  var thumbProps = componentsProps.thumb;
  var Thumb = components.Thumb || Styled$N.Thumb;
  var LabelTooltipComponent = components.LabelTooltip || Styled$N.LabelTooltip;
  var labelTooltipProps = componentsProps.labelTooltip;
  var annotationText = annotation ? " ".concat(annotation) : '';
  return /*#__PURE__*/React.createElement(Styled$N.Slider, _extends({
    ref: handleRef,
    disabled: disabled,
    onTouchStart: handleTouchStart,
    onMouseDown: handleMouseDown
  }, rest), Rail, Track, values.map(function (value, index) {
    var percent = valueToPercent(value, min, max);
    var style = axisProps[axis].offset(percent);
    return /*#__PURE__*/React.createElement(React.Fragment, {
      key: index
    }, /*#__PURE__*/React.createElement(Thumb, _extends({
      "data-index": index,
      onMouseOver: handleMouseOver,
      onMouseLeave: handleMouseLeave
    }, thumbProps, {
      style: _objectSpread$b(_objectSpread$b({}, style), {}, {
        pointerEvents: disableSwap && active !== index ? 'none' : undefined
      }, thumbProps === null || thumbProps === void 0 ? void 0 : thumbProps.style)
    }), /*#__PURE__*/React.createElement("input", {
      "data-index": index,
      type: "range",
      min: min,
      max: max,
      value: values[index],
      step: step,
      disabled: disabled,
      onChange: handleHiddenInputChange
    }), /*#__PURE__*/React.createElement(LabelTooltipComponent, {
      open: (open === index || active === index || labelTooltip === 'on') && labelTooltip !== 'off',
      disabled: disabled,
      style: _objectSpread$b({}, labelTooltipProps === null || labelTooltipProps === void 0 ? void 0 : labelTooltipProps.style)
    }, values[index], annotationText)));
  }), !hideAnnotation && /*#__PURE__*/React.createElement(Styled$N.SliderAnnotation, null, /*#__PURE__*/React.createElement("span", null, min, annotationText), /*#__PURE__*/React.createElement("span", null, max, annotationText)));
});
var Slider$2 = Slider$1;

/** External Dependencies */
const StyledSlider = styled(Slider$2)`
  width: ${({
  width
}) => width || '104px'};
  max-width: ${({
  width
}) => width || '104px'};
  user-select: none;
  padding: 0;
  margin-bottom: ${({
  noMargin
}) => noMargin ? '' : '16px'};
  font-size: 12px !important;
  .SfxSlider-thumb {
    background-color: black;
  }

  .SfxSlider-Track {
    height: 2px;
    color: black;
  }

  .SfxSlider-rail {
    height: 2px;
    background-color: ${({
  theme: {
    palette
  }
}) => palette[Color.BordersItem]};
  }
`;

const Slider = ({
  onChange,
  ...props
}) => {
  return /*#__PURE__*/React.createElement(StyledSlider, _extends$1({
    annotation: "",
    onChange: (_e, val) => onChange ? onChange(val) : undefined,
    hideAnnotation: true,
    labelTooltip: "auto"
  }, props));
};
Slider.propTypes = {
  onChange: PropTypes.func.isRequired
};

var _excluded$1N = ["color", "size"];
var ArrowBottom = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1N);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 11 12",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M10.8468 3.13984C11.0457 3.33138 11.0517 3.64791 10.8602 3.84682L6.04534 8.84682C5.95332 8.94238 5.82709 8.99746 5.69445 8.99991C5.5618 9.00237 5.43362 8.95201 5.33812 8.85992L0.152931 3.85992C-0.0458479 3.66824 -0.0516033 3.35171 0.140078 3.15293C0.331758 2.95415 0.648288 2.9484 0.847067 3.14008L5.67208 7.79277L10.1398 3.15318C10.3314 2.95427 10.6479 2.9483 10.8468 3.13984Z",
    fill: color
  }));
});
var ArrowBottom$1 = ArrowBottom;

var Position$3 = {
  Left: 'left',
  Right: 'right',
  Top: 'top',
  Bottom: 'bottom'
};

var ButtonColor = {
  Primary: 'primary',
  Secondary: 'secondary',
  Basic: 'basic',
  LinkPrimary: 'link-primary',
  LinkSecondary: 'link-secondary',
  LinkBasicPrimary: 'link-basic-primary',
  LinkBasicSecondary: 'link-basic-secondary',
  ErrorPrimary: 'error-primary',
  ErrorSecondary: 'error-secondary',
  ErrorBasic: 'error-basic',
  WarningPrimary: 'warning-primary',
  WarningSecondary: 'warning-secondary',
  WarningBasic: 'warning-basic'
};

var IconButtonColor = {
  Primary: 'primary',
  Secondary: 'secondary',
  Basic: 'basic'
};

var ButtonSize = {
  Xs: 'xs',
  Sm: 'sm',
  Md: 'md',
  Lg: 'lg'
};

var InputSize = {
  Sm: 'sm',
  Md: 'md'
};

var Type$2 = {
  Left: 'left',
  Right: 'right',
  Top: 'top',
  Bottom: 'bottom'
};

var typeArrowTickMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Type$2.Right, styled.css(["svg{transform:rotate(-90deg);transition:transform 150ms ease-out;}"])), Type$2.Left, styled.css(["svg{transform:rotate(90deg);transition:transform 150ms ease-out;}"])), Type$2.Top, styled.css(["svg{transform:rotate(180deg);transition:transform 150ms ease-out;}"])), Type$2.Bottom, styled.css(["svg{transform:rotate(0);transition:transform 150ms ease-out;}"]));

var baseClassName$r = 'ArrowTick';
var ArrowTick$2 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$r, 'root')
}).withConfig({
  componentId: "sc-tlypde-0"
})(function (_ref) {
  var _ref$type = _ref.type,
    type = _ref$type === void 0 ? Position$3.Right : _ref$type;
  return styled.css(["display:inline-flex;", ""], typeArrowTickMixin[type]);
});
var Styled$L = applyDisplayNames({
  ArrowTick: ArrowTick$2
});
var StyledArrowTick = Styled$L;

var _excluded$1M = ["type", "IconProps"];
var ArrowTick = intrinsicComponent$1(function (_ref, ref) {
  var _ref$type = _ref.type,
    type = _ref$type === void 0 ? Position$3.Right : _ref$type,
    IconPropsData = _ref.IconProps,
    rest = _objectWithoutProperties(_ref, _excluded$1M);
  return /*#__PURE__*/React.createElement(StyledArrowTick.ArrowTick, _extends({}, rest, {
    type: type,
    ref: ref
  }), /*#__PURE__*/React.createElement(ArrowBottom$1, IconPropsData));
});
var ArrowTick$1 = ArrowTick;

var baseClassName$q = 'AccordionHeader';
var Icon$5 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$q, 'icon')
}).withConfig({
  componentId: "sc-1dtjsgt-0"
})(function () {
  return styled.css(["display:inline-flex;padding-left:8px;"]);
});
var Label$4 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$q, 'label')
}).withConfig({
  componentId: "sc-1dtjsgt-1"
})(function (_ref) {
  var theme = _ref.theme;
  return styled.css(["", ""], theme.typography.font[FontVariant.ButtonSm]);
});
var Header$1 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$q, 'root')
}).withConfig({
  componentId: "sc-1dtjsgt-2"
})(function (_ref2) {
  var theme = _ref2.theme,
    $fullWidth = _ref2.$fullWidth;
  return styled.css(["display:inline-flex;align-items:center;justify-content:space-between;box-sizing:border-box;cursor:pointer;width:", ";color:", ";user-select:none;"], $fullWidth ? '100%' : 'auto', theme.palette[Color.LinkPrimary]);
});
var Wrapper$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$q, 'wrapper')
}).withConfig({
  componentId: "sc-1dtjsgt-3"
})(function (_ref3) {
  var theme = _ref3.theme;
  return styled.css(["color:", ";"], theme.palette[Color.LinkPrimary]);
});
var Styled$K = applyDisplayNames({
  Header: Header$1,
  Wrapper: Wrapper$2,
  Icon: Icon$5,
  Label: Label$4
});
var AccordionHeaderStyled = Styled$K;

var _excluded$1L = ["expanded", "label", "onChange", "onClick", "onContextMenu", "hideIcon", "fullWidth", "iconProps"];
function ownKeys$a(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$a(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$a(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$a(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var AccordionHeader = intrinsicComponent$1(function (_ref, ref) {
  var _ref$expanded = _ref.expanded,
    expanded = _ref$expanded === void 0 ? false : _ref$expanded,
    label = _ref.label,
    onChange = _ref.onChange,
    _onClick = _ref.onClick,
    onContextMenu = _ref.onContextMenu,
    _ref$hideIcon = _ref.hideIcon,
    hideIcon = _ref$hideIcon === void 0 ? false : _ref$hideIcon,
    _ref$fullWidth = _ref.fullWidth,
    fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
    iconPropsData = _ref.iconProps,
    rest = _objectWithoutProperties(_ref, _excluded$1L);
  return /*#__PURE__*/React.createElement(AccordionHeaderStyled.Header, _extends({
    ref: ref,
    onClick: function onClick(event) {
      if (typeof onChange === 'function') {
        onChange(!expanded);
      }
      if (typeof _onClick === 'function') {
        _onClick(event);
      }
    },
    $fullWidth: fullWidth
  }, rest), /*#__PURE__*/React.createElement(AccordionHeaderStyled.Label, {
    onContextMenu: onContextMenu
  }, label), !hideIcon && /*#__PURE__*/React.createElement(AccordionHeaderStyled.Icon, {
    onContextMenu: onContextMenu
  }, /*#__PURE__*/React.createElement(ArrowTick$1, {
    type: expanded ? Position$3.Top : Position$3.Bottom,
    IconProps: _objectSpread$a({
      size: 11
    }, iconPropsData)
  })));
});
var AccordionHeader$1 = AccordionHeader;

var baseClassName$p = 'AccordionDetails';
var AccordionDetails$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$p, 'root')
}).withConfig({
  componentId: "sc-1wr6wpr-0"
})(["margin:16px 0;"]);
var Styled$J = applyDisplayNames({
  AccordionDetails: AccordionDetails$2
});
var AccordionDetailsStyled = Styled$J;

var _excluded$1K = ["expanded", "children"];
var AccordionDetails = intrinsicComponent$1(function (_ref, ref) {
  var _ref$expanded = _ref.expanded,
    expanded = _ref$expanded === void 0 ? false : _ref$expanded,
    children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded$1K);
  return /*#__PURE__*/React.createElement(React.Fragment, null, expanded && /*#__PURE__*/React.createElement(AccordionDetailsStyled.AccordionDetails, _extends({
    ref: ref
  }, rest), children));
});
var AccordionDetails$1 = AccordionDetails;

var baseClassName$o = 'Accordion';
var Accordion$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$o, 'root')
}).withConfig({
  componentId: "sc-1g4tz7s-0"
})([""]);
var Styled$H = applyDisplayNames({
  Accordion: Accordion$2
});
var Styled$I = Styled$H;

var _excluded$1J = ["label", "expanded", "children", "detailStyle", "headerStyle", "fullWidth", "iconProps", "onClick", "onChange", "onContextMenu", "hideIcon"];
function ownKeys$9(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$9(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$9(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$9(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var Accordion = intrinsicComponent$1(function (_ref, ref) {
  var label = _ref.label,
    _ref$expanded = _ref.expanded,
    expanded = _ref$expanded === void 0 ? false : _ref$expanded,
    children = _ref.children,
    detailStyle = _ref.detailStyle,
    headerStyle = _ref.headerStyle,
    fullWidth = _ref.fullWidth,
    iconPropsData = _ref.iconProps,
    onClick = _ref.onClick,
    onChange = _ref.onChange,
    onContextMenu = _ref.onContextMenu,
    _ref$hideIcon = _ref.hideIcon,
    hideIcon = _ref$hideIcon === void 0 ? false : _ref$hideIcon,
    rest = _objectWithoutProperties(_ref, _excluded$1J);
  var handleOnClick = function handleOnClick(event) {
    if (typeof onChange === 'function') {
      onChange(!expanded, event);
    }
    if (typeof onClick === 'function') {
      onClick(event);
    }
  };
  return /*#__PURE__*/React.createElement(Styled$I.Accordion, _extends({
    ref: ref
  }, rest), /*#__PURE__*/React.createElement(AccordionHeader$1, {
    label: label,
    expanded: expanded,
    style: _objectSpread$9({}, headerStyle),
    hideIcon: hideIcon,
    onClick: handleOnClick,
    onContextMenu: onContextMenu,
    iconProps: iconPropsData,
    fullWidth: fullWidth
  }), /*#__PURE__*/React.createElement(AccordionDetails$1, {
    expanded: expanded,
    style: _objectSpread$9({}, detailStyle)
  }, children));
});
var Accordion$1 = Accordion;

var _excluded$1I = ["stroke", "size"];
var Arrow$1 = intrinsicComponent(function (_ref, ref) {
  var _ref$stroke = _ref.stroke,
    stroke = _ref$stroke === void 0 ? 'currentColor' : _ref$stroke,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 10 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1I);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size * (51 / 56),
    height: size,
    viewBox: "0 0 51 56",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M12.2754 3L37.2754 27.0741L12.2754 53",
    stroke: stroke,
    strokeWidth: "5",
    strokeLinecap: "round",
    strokeLinejoin: "round"
  }));
});
var Arrow$2 = Arrow$1;

var _excluded$1H = ["color", "size"];
var Tick = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1H);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M12.9783 2.30184C12.7972 2.12074 12.586 2 12.3143 2C12.0728 2 11.8314 2.09055 11.6503 2.30184L4.73816 9.84779L2.29327 7.34254C2.11217 7.16143 1.8707 7.07088 1.62923 7.07088C1.38776 7.07088 1.14629 7.19162 0.995367 7.37272C0.663345 7.76511 0.663345 8.36879 1.02555 8.73099L4.13448 11.9003C4.31559 12.0814 4.52687 12.1719 4.76835 12.1719C5.00982 12.1719 5.25129 12.0814 5.43239 11.8701L12.9783 3.62993C13.3406 3.2979 13.3406 2.66404 12.9783 2.30184Z",
    fill: color
  }));
});

var _excluded$1G = ["color", "size"];
var CopyOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1G);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M2.33984 12.111V2.04761C2.33984 1.49532 2.78756 1.04761 3.33984 1.04761H10.8182C11.3705 1.04761 11.8182 1.49532 11.8182 2.04761V12.111C11.8182 12.6633 11.3705 13.111 10.8182 13.111H3.33984C2.78756 13.111 2.33984 12.6633 2.33984 12.111ZM3.33984 12.111V2.04761L10.8182 2.04761L10.8182 12.111L3.33984 12.111Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M13.66 4.97388C13.66 4.69774 13.4361 4.47388 13.16 4.47388C12.8838 4.47388 12.66 4.69774 12.66 4.97388V13.9523H5.40491C5.12876 13.9523 4.90491 14.1761 4.90491 14.4523C4.90491 14.7284 5.12876 14.9523 5.40491 14.9523H13.16C13.4361 14.9523 13.66 14.7284 13.66 14.4523V4.97388Z",
    fill: color
  }));
});
var CopyOutline$1 = CopyOutline;

var _excluded$1F = ["color", "size"];
var EyeOpen = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1F);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 32",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M25 31.625C8.64336 31.625 0.533984 17.3656 0.196875 16.759C-0.065625 16.2867 -0.065625 15.7129 0.196875 15.2406C0.533984 14.6344 8.64336 0.375 25 0.375C41.3566 0.375 49.466 14.6344 49.8031 15.241C50.0656 15.7133 50.0656 16.2871 49.8031 16.7594C49.466 17.3656 41.3566 31.625 25 31.625ZM3.40117 15.9977C5.25977 18.8145 12.557 28.5 25 28.5C37.4824 28.5 44.7473 18.8223 46.5988 16.0023C44.7402 13.1855 37.443 3.5 25 3.5C12.5176 3.5 5.25273 13.1777 3.40117 15.9977ZM25 25.375C19.8305 25.375 15.625 21.1695 15.625 16C15.625 10.8305 19.8305 6.625 25 6.625C30.1695 6.625 34.375 10.8305 34.375 16C34.375 21.1695 30.1695 25.375 25 25.375ZM25 9.75C21.5539 9.75 18.75 12.5539 18.75 16C18.75 19.4461 21.5539 22.25 25 22.25C28.4461 22.25 31.25 19.4461 31.25 16C31.25 12.5539 28.4461 9.75 25 9.75Z",
    fill: color
  }));
});
var EyeOpen$1 = EyeOpen;

var _excluded$1E = ["color", "size"];
var EyeClosed = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1E);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 44 44",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M36.2553 6.05501C36.5966 5.71376 37.1514 5.71376 37.4926 6.05501C37.8339 6.39626 37.8339 6.95103 37.4926 7.29228L32.3765 12.4084C38.3601 15.8067 42.6046 20.7607 42.7917 20.9825C43.0682 21.3097 43.0699 21.7874 42.7936 22.113C42.3893 22.5908 32.7818 33.7978 22.0001 33.7978C18.9909 33.7978 15.9678 33.1203 13.0065 31.7785L7.74272 37.0423C7.57292 37.2121 7.34897 37.2978 7.12495 37.2978C6.90092 37.2978 6.67698 37.212 6.50545 37.0423C6.1642 36.701 6.1642 36.1462 6.50545 35.805L17.0426 25.2678C17.0453 25.265 17.0481 25.2622 17.0509 25.2595C17.0531 25.2573 17.0553 25.2551 17.0575 25.2529L25.7063 16.6041C25.7081 16.6023 25.7098 16.6005 25.7116 16.5987C25.7134 16.5969 25.7152 16.5952 25.717 16.5934L30.2895 12.0208C30.3028 12.0067 30.3164 11.9931 30.3304 11.9799L36.2553 6.05501ZM31.0895 13.6954L27.5301 17.2548C28.4835 18.476 28.9998 19.9721 28.9998 21.5478C28.9998 25.4083 25.8603 28.5478 21.9999 28.5478C20.4242 28.5478 18.9281 28.0314 17.7069 27.078L14.3353 30.4497C16.8728 31.5113 19.445 32.0478 22 32.0478C30.6537 32.0478 38.863 23.8071 40.9489 21.5478C39.6267 20.1195 35.855 16.3016 31.0895 13.6954ZM18.9574 25.8276C19.8392 26.458 20.8929 26.7977 21.9999 26.7977C24.8943 26.7977 27.2499 24.4422 27.2499 21.5477C27.2499 20.4409 26.9092 19.3873 26.2793 18.5056L18.9574 25.8276Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M27.7418 10.3057C25.7504 9.63545 23.8184 9.29773 22.0001 9.29773C11.2183 9.29773 1.61084 20.5047 1.20659 20.9825C0.951064 21.2835 0.930064 21.721 1.15762 22.0482C1.27837 22.2215 4.17111 26.3287 9.18485 29.659C9.33358 29.7587 9.49985 29.806 9.66785 29.806C9.94963 29.806 10.2279 29.6695 10.3959 29.4122C10.6636 29.0115 10.5534 28.4672 10.1509 28.2012C6.46889 25.753 3.94889 22.7973 3.00561 21.595C5.01989 19.4075 13.2834 11.0478 22.0001 11.0478C23.6293 11.0478 25.3741 11.3558 27.1835 11.963C27.642 12.1275 28.139 11.8738 28.2913 11.4135C28.4453 10.955 28.2003 10.4598 27.7418 10.3057Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M23.2197 14.6685C22.8224 14.5985 22.4164 14.5477 22 14.5477C18.1395 14.5477 15 17.6872 15 21.5477C15 21.9642 15.0508 22.3702 15.1225 22.7674C15.1977 23.1909 15.567 23.4902 15.9817 23.4902C16.0325 23.4902 16.0832 23.4867 16.1357 23.4762C16.6099 23.3922 16.9285 22.9371 16.8445 22.4629C16.7902 22.1654 16.75 21.8627 16.75 21.5477C16.75 18.6532 19.1055 16.2977 22 16.2977C22.315 16.2977 22.6177 16.338 22.9152 16.3905C23.3807 16.485 23.8444 16.1559 23.9284 15.6817C24.0124 15.2075 23.694 14.7525 23.2197 14.6685Z",
    fill: color
  }));
});
var EyeClosed$1 = EyeClosed;

var _excluded$1D = ["color", "size"];
var Success = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1D);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 21 21",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M20.5 10.5001C20.5 16.023 16.0228 20.5001 10.5 20.5001C4.97714 20.5001 0.5 16.023 0.5 10.5001C0.5 4.97727 4.97714 0.500122 10.5 0.500122C16.0228 0.500122 20.5 4.97727 20.5 10.5001ZM7.88239 9.56904C8.00439 9.62145 8.11473 9.69763 8.20698 9.79314L9.49998 11.0861L12.793 7.79314C12.8852 7.69763 12.9956 7.62145 13.1176 7.56904C13.2396 7.51663 13.3708 7.48905 13.5036 7.48789C13.6363 7.48674 13.768 7.51204 13.8909 7.56232C14.0138 7.6126 14.1255 7.68686 14.2194 7.78075C14.3133 7.87464 14.3875 7.98629 14.4378 8.10919C14.4881 8.23208 14.5134 8.36376 14.5122 8.49654C14.5111 8.62932 14.4835 8.76054 14.4311 8.88255C14.3787 9.00455 14.3025 9.1149 14.207 9.20714L10.207 13.2071C10.0194 13.3946 9.76514 13.4999 9.49998 13.4999C9.23482 13.4999 8.98051 13.3946 8.79298 13.2071L6.79298 11.2071C6.69747 11.1149 6.62129 11.0046 6.56888 10.8825C6.51647 10.7605 6.48889 10.6293 6.48773 10.4965C6.48658 10.3638 6.51188 10.2321 6.56216 10.1092C6.61244 9.98629 6.6867 9.87464 6.78059 9.78075C6.87448 9.68686 6.98613 9.6126 7.10903 9.56232C7.23193 9.51204 7.3636 9.48674 7.49638 9.48789C7.62916 9.48905 7.76038 9.51663 7.88239 9.56904Z",
    fill: color
  }));
});
var Success$1 = Success;

var getInputBackgroundColor = function getInputBackgroundColor(readOnly, disabled) {
  if (readOnly || disabled) {
    return lightPalette[Color.BackgroundHover];
  }
  return lightPalette[Color.BackgroundStateless];
};
var getInputTextColor = function getInputTextColor(readOnly, disabled) {
  if (readOnly) {
    return lightPalette[Color.AccentPrimaryHover];
  }
  if (disabled) {
    return lightPalette[Color.TextPlaceholder];
  }
  return lightPalette[Color.TextPrimary];
};
var getInputBorderColor = function getInputBorderColor(readOnly, disabled) {
  if (readOnly) {
    return lightPalette[Color.BordersItem];
  }
  if (disabled) {
    return lightPalette[Color.BordersSecondary];
  }
  return lightPalette[Color.BorderPrimaryStateless];
};
var handleCopyIcon = function handleCopyIcon(value, setShowCopyMessage) {
  navigator.clipboard.writeText(value);
  setShowCopyMessage(true);
};

var Type$1 = {
  Text: 'text',
  Password: 'password'
};

var sizeInputMixin = _defineProperty(_defineProperty({}, InputSize.Sm, "\n    padding: 8px 12px;\n    height: 32px;\n  "), InputSize.Md, "\n    padding: 11px 16px;\n    height: 40px;\n  ");
_defineProperty(_defineProperty({}, InputSize.Sm, "\n    padding: 4px 6px 4px 12px;\n    max-height: 32px;\n  "), InputSize.Md, "\n    padding: 0px 4px 0px 16px;\n    max-height: 40px;\n  ");
var fontSizeInputMixin = _defineProperty(_defineProperty({}, InputSize.Sm, function (_ref) {
  var font = _ref.theme.typography.font;
  return styled.css(["", ""], font[FontVariant.InputMd]);
}), InputSize.Md, function (_ref2) {
  var font = _ref2.theme.typography.font;
  return styled.css(["", ""], font[FontVariant.InputLg]);
});
_defineProperty(_defineProperty({}, InputSize.Sm, function (_ref3) {
  var font = _ref3.theme.typography.font;
  return styled.css(font[FontVariant.LabelSmall]);
}), InputSize.Md, function (_ref4) {
  var font = _ref4.theme.typography.font;
  return styled.css(font[FontVariant.LabelMedium]);
});
var errorMixin$1 = function errorMixin(_ref5) {
  var palette = _ref5.theme.palette;
  return styled.css(["background:", " !important;border:1px solid ", " !important;"], palette[Color.BackgroundSecondary], palette[Color.Error]);
};

var baseClassName$n = 'Input';
var Icon$4 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$n, 'Icon')
}).withConfig({
  componentId: "sc-150k0cz-0"
})(function (_ref) {
  var iconClickStart = _ref.iconClickStart,
    iconClickEnd = _ref.iconClickEnd,
    disabled = _ref.disabled,
    readOnly = _ref.readOnly,
    $iconType = _ref.$iconType,
    palette = _ref.theme.palette;
  return styled.css(["display:flex;color:", ";cursor:", ";flex-shrink:0;", ""], palette[Color.IconsPrimary], (iconClickStart || iconClickEnd) && !disabled && !readOnly ? 'pointer' : 'default', $iconType === 'end' && styled.css(["color:", ";"], palette[Color.IconsSecondary]));
});
var CopyIcon$1 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$n, 'CopyIcon')
}).withConfig({
  componentId: "sc-150k0cz-1"
})(function (_ref2) {
  var palette = _ref2.theme.palette;
  return styled.css(["display:flex;color:", ";cursor:pointer;"], palette[Color.IconsSecondary]);
});
var PasswordIcon = /*#__PURE__*/styled(CopyIcon$1).attrs({
  className: generateClassNames(baseClassName$n, 'PasswordIcon')
}).withConfig({
  componentId: "sc-150k0cz-2"
})([""]);
var Container$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$n, 'Container')
}).withConfig({
  componentId: "sc-150k0cz-3"
})(function () {
  return styled.css(["display:block;color:inherit;font-size:inherit;width:100%;min-width:0;margin:0;padding:0;border:0;background-color:transparent;outline:none;"]);
});
var Base$1 = /*#__PURE__*/styled.input.attrs({
  className: generateClassNames(baseClassName$n, 'Base')
}).withConfig({
  componentId: "sc-150k0cz-4"
})(function (_ref3) {
  var palette = _ref3.theme.palette,
    _ref3$$isEllipsis = _ref3.$isEllipsis,
    $isEllipsis = _ref3$$isEllipsis === void 0 ? false : _ref3$$isEllipsis;
  return styled.css(["display:block;color:inherit;width:100%;min-width:fit-content;margin:0;padding:0;border:0;background-color:transparent;outline:none;", " &::placeholder{color:", ";}"], $isEllipsis && styled.css(["text-overflow:ellipsis;"]), palette[Color.TextPlaceholder]);
});
var Input$3 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$n, 'root')
}).withConfig({
  componentId: "sc-150k0cz-5"
})(function (_ref4) {
  var _ref4$size = _ref4.size,
    size = _ref4$size === void 0 ? InputSize.Md : _ref4$size,
    _ref4$$error = _ref4.$error,
    $error = _ref4$$error === void 0 ? false : _ref4$$error,
    _ref4$$fullWidth = _ref4.$fullWidth,
    $fullWidth = _ref4$$fullWidth === void 0 ? false : _ref4$$fullWidth,
    _ref4$readOnly = _ref4.readOnly,
    readOnly = _ref4$readOnly === void 0 ? false : _ref4$readOnly,
    _ref4$disabled = _ref4.disabled,
    disabled = _ref4$disabled === void 0 ? false : _ref4$disabled,
    _ref4$isHovering = _ref4.isHovering,
    isHovering = _ref4$isHovering === void 0 ? false : _ref4$isHovering,
    _ref4$$isSelectedItem = _ref4.$isSelectedItems,
    $isSelectedItems = _ref4$$isSelectedItem === void 0 ? false : _ref4$$isSelectedItem,
    _ref4$hasInputActions = _ref4.hasInputActions,
    hasInputActions = _ref4$hasInputActions === void 0 ? false : _ref4$hasInputActions,
    theme = _ref4.theme;
  return styled.css(["position:relative;display:flex;flex-direction:", ";", " box-sizing:border-box;column-gap:8px;cursor:text;transition:all 100ms ease-out;width:", ";pointer-events:", ";background-color:", ";border-radius:", ";border:1px solid ", ";color:", ";", " ", ";", "{", "}", " ", " &:hover{color:", ";}", ""], !hasInputActions ? 'row' : 'column', hasInputActions && 'align-items: stretch;', $fullWidth ? '100%' : '300px', disabled ? 'none' : 'auto', getInputBackgroundColor(readOnly, disabled), theme.shape.borderRadius[BorderRadiusSize.Md], getInputBorderColor(readOnly, disabled), disabled ? theme.palette[Color.TextPlaceholder] : theme.palette[Color.TextPrimary], sizeInputMixin[size], $isSelectedItems && "\n      height: fit-content;\n\n      ".concat(Base$1, " {\n        max-width: fit-content;\n        min-width: 20px;\n        flex-grow: 1;\n        width: 40px;\n      }\n    "), Base$1, fontSizeInputMixin[size], !readOnly && !disabled && styled.css(["&:focus-within{background-color:", "!important;border:1px solid ", ";&:hover{border:1px solid ", ";", "{color:", ";}}}", " &:hover{background-color:", ";border:1px solid ", ";", "{color:", ";}}"], theme.palette[Color.BackgroundSecondary], theme.palette[Color.AccentStateless], theme.palette[Color.AccentStateless], Icon$4, theme.palette[Color.IconsPrimary], isHovering && styled.css(["", "{color:", ";}"], Icon$4, theme.palette[Color.IconsPrimaryHover]), theme.palette[Color.BackgroundStateless], theme.palette[Color.BordersPrimaryHover], Icon$4, theme.palette[Color.IconsPrimaryHover]), disabled && styled.css(["", "{color:", ";}"], Icon$4, theme.palette[Color.IconsMuted]), getInputTextColor(readOnly, disabled), $error && errorMixin$1);
});
var ClearIcon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$n, 'ClearIcon')
}).withConfig({
  componentId: "sc-150k0cz-6"
})(function (_ref5) {
  var palette = _ref5.theme.palette;
  return styled.css(["display:flex;cursor:pointer;color:", ";"], palette[Color.IconsPrimary]);
});
var NotificationBox = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$n, 'NotificationBox')
}).withConfig({
  componentId: "sc-150k0cz-7"
})(function (_ref6) {
  var _ref6$size = _ref6.size,
    size = _ref6$size === void 0 ? InputSize.Md : _ref6$size,
    _ref6$isTextarea = _ref6.isTextarea,
    isTextarea = _ref6$isTextarea === void 0 ? false : _ref6$isTextarea,
    palette = _ref6.theme.palette;
  return styled.css(["display:flex;position:absolute;align-items:center;max-height:34px;right:0px;padding:8px 12px;gap:6px;bottom:", ";box-shadow:0px 2px 6px ", ";background-color:", ";border-radius:4px;align-items:center;", ""], size === InputSize.Md ? '45px' : '35px', palette[Color.LargeShadow], palette[Color.BackgroundStateless], isTextarea && "\n      bottom: ".concat(size === InputSize.Md ? 27 : 22, "px;\n      right: ").concat(size === InputSize.Md ? 16 : 12, "px;\n    "));
});
var NotificationIcon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$n, 'NotificationIcon')
}).withConfig({
  componentId: "sc-150k0cz-8"
})(function (_ref7) {
  var palette = _ref7.theme.palette;
  return styled.css(["display:flex;color:", ";"], palette[Color.IconsPrimary]);
});
var NotificationText = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$n, 'NotificationText')
}).withConfig({
  componentId: "sc-150k0cz-9"
})(function (_ref8) {
  var _ref8$theme = _ref8.theme,
    palette = _ref8$theme.palette,
    font = _ref8$theme.typography.font;
  return styled.css(["display:flex;white-space:nowrap;", ";color:", ";"], font[FontVariant.TextSmall], palette[Color.TextPrimary]);
});
var FieldWrapper = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$n, 'fieldWrapper')
}).withConfig({
  componentId: "sc-150k0cz-10"
})(function (_ref9) {
  var $isSelectedItems = _ref9.$isSelectedItems;
  return styled.css(["width:100%;height:100%;display:inline-flex;flex-wrap:wrap;gap:8px;max-height:120px;", ";::-webkit-scrollbar{display:none;}"], $isSelectedItems && "\n      overflow-y: auto;\n    ");
});
var InputActions = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$n, 'inputActions')
}).withConfig({
  componentId: "sc-150k0cz-11"
})(["padding-top:16px;width:100%;box-sizing:border-box;"]);
var InputContent = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$n, 'inputContent')
}).withConfig({
  componentId: "sc-150k0cz-12"
})(["display:flex;align-items:center;width:100%;column-gap:8px;box-sizing:border-box;"]);
var Styled$G = applyDisplayNames({
  Input: Input$3,
  Container: Container$2,
  Base: Base$1,
  Icon: Icon$4,
  CopyIcon: CopyIcon$1,
  PasswordIcon: PasswordIcon,
  ClearIcon: ClearIcon,
  NotificationBox: NotificationBox,
  NotificationIcon: NotificationIcon,
  NotificationText: NotificationText,
  FieldWrapper: FieldWrapper,
  InputActions: InputActions,
  InputContent: InputContent
});
var StyledInput = Styled$G;

var _excluded$1C = ["inputType", "children", "iconStart", "iconEnd", "iconChange", "inputActions", "clearIcon", "iconClickStart", "iconClickEnd", "clearIconClick", "size", "className", "style", "fullWidth", "readOnly", "disabled", "hideCopyIcon", "focusOnMount", "focusOnClick", "isEllipsis", "copyTextMessage", "copySuccessIcon", "error", "renderTags", "showPlaceholder", "InputProps"];
var getIconSize$5 = function getIconSize(sizeName, iconType) {
  switch (sizeName) {
    case InputSize.Md:
      return iconType === 'start' ? 15 : 14;
    case InputSize.Sm:
    default:
      return iconType === 'start' ? 13 : 10;
  }
};
var getPasswordIconSize = function getPasswordIconSize(sizeName) {
  switch (sizeName) {
    case InputSize.Md:
      return 16;
    case InputSize.Sm:
    default:
      return 14;
  }
};
var Input$1 = intrinsicComponent$1(function (_ref, ref) {
  var _rest$selectedItems;
  var inputType = _ref.inputType,
    children = _ref.children,
    iconStart = _ref.iconStart,
    iconEnd = _ref.iconEnd,
    iconChange = _ref.iconChange,
    inputActions = _ref.inputActions,
    clearIcon = _ref.clearIcon,
    iconClickStart = _ref.iconClickStart,
    iconClickEnd = _ref.iconClickEnd,
    clearIconClick = _ref.clearIconClick,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? InputSize.Md : _ref$size,
    className = _ref.className,
    style = _ref.style,
    _ref$fullWidth = _ref.fullWidth,
    fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
    _ref$readOnly = _ref.readOnly,
    readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$hideCopyIcon = _ref.hideCopyIcon,
    hideCopyIcon = _ref$hideCopyIcon === void 0 ? false : _ref$hideCopyIcon,
    _ref$focusOnMount = _ref.focusOnMount,
    focusOnMount = _ref$focusOnMount === void 0 ? false : _ref$focusOnMount,
    _ref$focusOnClick = _ref.focusOnClick,
    focusOnClick = _ref$focusOnClick === void 0 ? true : _ref$focusOnClick,
    _ref$isEllipsis = _ref.isEllipsis,
    isEllipsis = _ref$isEllipsis === void 0 ? false : _ref$isEllipsis,
    _ref$copyTextMessage = _ref.copyTextMessage,
    copyTextMessage = _ref$copyTextMessage === void 0 ? 'Copied!' : _ref$copyTextMessage,
    _ref$copySuccessIcon = _ref.copySuccessIcon,
    copySuccessIcon = _ref$copySuccessIcon === void 0 ? /*#__PURE__*/React.createElement(Success$1, {
      size: 16
    }) : _ref$copySuccessIcon,
    _ref$error = _ref.error,
    error = _ref$error === void 0 ? false : _ref$error,
    renderTags = _ref.renderTags,
    showPlaceholder = _ref.showPlaceholder,
    InputPropsData = _ref.InputProps,
    rest = _objectWithoutProperties(_ref, _excluded$1C);
  var _useState = React.useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isHovering = _useState2[0],
    setIsHovering = _useState2[1];
  var _useState3 = React.useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    showCopyMessage = _useState4[0],
    setShowCopyMessage = _useState4[1];
  var _useState5 = React.useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    isVisible = _useState6[0],
    setIsVisible = _useState6[1];
  var inputRef = React.useRef(null);
  var isSelectedItems = (_rest$selectedItems = rest.selectedItems) === null || _rest$selectedItems === void 0 ? void 0 : _rest$selectedItems.length;
  var placeholder = rest.value || isSelectedItems ? '' : rest.placeholder;
  var showCopyIcon = isHovering && readOnly && rest.value.length > 0 && !hideCopyIcon;
  var handleFocus = function handleFocus() {
    var _inputRef$current;
    if (disabled || readOnly) return;
    showPlaceholder === null || showPlaceholder === void 0 || showPlaceholder(false);
    (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 || _inputRef$current.focus();
  };
  React.useEffect(function () {
    if (focusOnMount) {
      handleFocus();
    }
  }, []);
  React.useEffect(function () {
    setTimeout(function () {
      return setShowCopyMessage(false);
    }, 2000);
  }, [showCopyMessage]);
  var handleEntering = function handleEntering() {
    setTimeout(function () {
      setIsHovering(true);
    }, 150);
  };
  var handleLeaving = function handleLeaving() {
    setTimeout(function () {
      setIsHovering(false);
    }, 200);
  };
  var handleIconClick = function handleIconClick(event, type) {
    if (disabled || readOnly) return;
    if (focusOnClick) {
      handleFocus();
    }
    if (type === 'start') {
      if (iconClickStart) {
        iconClickStart(event);
      }
    } else if (type === 'end') {
      if (iconClickEnd) {
        iconClickEnd(event);
      }
    } else if (clearIconClick) {
      clearIconClick(event);
    }
  };
  var renderIcon = function renderIcon(_icon, type) {
    return _icon ? /*#__PURE__*/React.createElement(StyledInput.Icon, {
      onClick: function onClick(event) {
        return handleIconClick(event, type);
      },
      iconClickStart: iconClickStart,
      iconClickEnd: iconClickEnd,
      $iconType: type,
      disabled: disabled,
      readOnly: readOnly
    }, typeof _icon === 'function' ? _icon({
      size: getIconSize$5(size, type)
    }) : _icon) : undefined;
  };
  var renderClearIcon = function renderClearIcon() {
    return disabled || readOnly || !clearIcon ? undefined : /*#__PURE__*/React.createElement(StyledInput.ClearIcon, {
      onClick: function onClick(event) {
        return handleIconClick(event, 'clear');
      }
    }, typeof clearIcon === 'function' ? clearIcon({
      size: getIconSize$5(size, 'clear')
    }) : clearIcon);
  };
  var renderCopyIcon = function renderCopyIcon(icon) {
    return showCopyIcon ? /*#__PURE__*/React.createElement(StyledInput.CopyIcon, {
      onClick: function onClick() {
        return handleCopyIcon(rest.value, setShowCopyMessage);
      }
    }, icon) : undefined;
  };
  var toggleVisibility = function toggleVisibility(event) {
    event.stopPropagation();
    setIsVisible(!isVisible);
  };
  var renderPasswordIcon = function renderPasswordIcon() {
    return /*#__PURE__*/React.createElement(StyledInput.PasswordIcon, {
      onClick: function onClick(event) {
        return toggleVisibility(event);
      }
    }, isVisible ? /*#__PURE__*/React.createElement(EyeClosed$1, {
      size: getPasswordIconSize(size)
    }) : /*#__PURE__*/React.createElement(EyeOpen$1, {
      size: getPasswordIconSize(size)
    }));
  };
  var getInputType = function getInputType() {
    if (!inputType && rest !== null && rest !== void 0 && rest.type) {
      return rest === null || rest === void 0 ? void 0 : rest.type;
    }
    if (inputType === Type$1.Password && !isVisible) {
      return Type$1.Password;
    }
    return Type$1.Text;
  };
  var renderField = function renderField() {
    return /*#__PURE__*/React.createElement(StyledInput.FieldWrapper, {
      $isSelectedItems: Boolean(isSelectedItems)
    }, renderTags && renderTags(), /*#__PURE__*/React.createElement(StyledInput.Base, _extends({}, rest, {
      placeholder: placeholder,
      ref: inputRef,
      readOnly: Boolean(readOnly),
      type: getInputType(),
      $isEllipsis: isEllipsis
    })));
  };
  var renderCopyText = function renderCopyText() {
    return /*#__PURE__*/React.createElement(StyledInput.NotificationBox, {
      size: size
    }, /*#__PURE__*/React.createElement(StyledInput.NotificationIcon, null, copySuccessIcon), /*#__PURE__*/React.createElement(StyledInput.NotificationText, null, copyTextMessage));
  };
  var renderInputActions = function renderInputActions(inputActions) {
    if (!inputActions) return;
    return /*#__PURE__*/React.createElement(StyledInput.InputActions, null, inputActions);
  };
  return /*#__PURE__*/React.createElement(StyledInput.Input, _extends({
    onClick: focusOnClick ? handleFocus : undefined,
    ref: ref,
    size: size,
    onMouseEnter: handleEntering,
    onMouseLeave: handleLeaving,
    className: className,
    style: style,
    readOnly: readOnly,
    disabled: disabled,
    $fullWidth: Boolean(fullWidth),
    $error: error,
    clearIcon: clearIcon,
    isHovering: rest.isHovering,
    $isSelectedItems: Boolean(isSelectedItems || inputActions),
    hasInputActions: Boolean(inputActions)
  }, InputPropsData || {}), /*#__PURE__*/React.createElement(StyledInput.InputContent, null, renderIcon(iconStart, 'start'), renderField(), renderCopyIcon( /*#__PURE__*/React.createElement(CopyOutline$1, {
    size: getIconSize$5(size, 'copy')
  })), showCopyMessage && renderCopyText(), renderClearIcon(), inputType === Type$1.Password && renderPasswordIcon(), renderIcon(iconEnd, 'end'), renderIcon(iconChange, ''), children && /*#__PURE__*/React.createElement(React.Fragment, null, children)), renderInputActions(inputActions));
});
var Input$2 = Input$1;

var Position$2 = {
  AutoStart: 'auto-start',
  Auto: 'auto',
  AutoEnd: 'auto-end',
  TopStart: 'top-start',
  Top: 'top',
  TopEnd: 'top-end',
  BottomStart: 'bottom-start',
  Bottom: 'bottom',
  BottomEnd: 'bottom-end',
  LeftStart: 'left-start',
  Left: 'left',
  LeftEnd: 'left-end',
  RightStart: 'right-start',
  Right: 'right',
  RightEnd: 'right-end'
};

var top = 'top';
var bottom = 'bottom';
var right = 'right';
var left = 'left';
var auto = 'auto';
var basePlacements = [top, bottom, right, left];
var start = 'start';
var end = 'end';
var clippingParents = 'clippingParents';
var viewport = 'viewport';
var popper = 'popper';
var reference = 'reference';
var variationPlacements = /*#__PURE__*/basePlacements.reduce(function (acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = /*#__PURE__*/[].concat(basePlacements, [auto]).reduce(function (acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []); // modifiers that need to read the DOM

var beforeRead = 'beforeRead';
var read = 'read';
var afterRead = 'afterRead'; // pure-logic modifiers

var beforeMain = 'beforeMain';
var main = 'main';
var afterMain = 'afterMain'; // modifier with the purpose to write to the DOM (or write into a framework state)

var beforeWrite = 'beforeWrite';
var write = 'write';
var afterWrite = 'afterWrite';
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

function getNodeName(element) {
  return element ? (element.nodeName || '').toLowerCase() : null;
}

function getWindow(node) {
  if (node == null) {
    return window;
  }

  if (node.toString() !== '[object Window]') {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }

  return node;
}

function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}

function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}

function isShadowRoot(node) {
  // IE 11 has no ShadowRoot
  if (typeof ShadowRoot === 'undefined') {
    return false;
  }

  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// and applies them to the HTMLElements such as popper and arrow

function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function (name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name]; // arrow is optional + virtual elements

    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    } // Flow doesn't support to extend this property, but it's the most
    // effective way to apply styles to an HTMLElement
    // $FlowFixMe[cannot-write]


    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function (name) {
      var value = attributes[name];

      if (value === false) {
        element.removeAttribute(name);
      } else {
        element.setAttribute(name, value === true ? '' : value);
      }
    });
  });
}

function effect$2(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: '0',
      top: '0',
      margin: '0'
    },
    arrow: {
      position: 'absolute'
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;

  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }

  return function () {
    Object.keys(state.elements).forEach(function (name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]); // Set all values to an empty string to unset them

      var style = styleProperties.reduce(function (style, property) {
        style[property] = '';
        return style;
      }, {}); // arrow is optional + virtual elements

      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }

      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function (attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
} // eslint-disable-next-line import/no-unused-modules


var applyStyles$1 = {
  name: 'applyStyles',
  enabled: true,
  phase: 'write',
  fn: applyStyles,
  effect: effect$2,
  requires: ['computeStyles']
};

function getBasePlacement(placement) {
  return placement.split('-')[0];
}

var max = Math.max;
var min = Math.min;
var round = Math.round;

function getUAString() {
  var uaData = navigator.userAgentData;

  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
    return uaData.brands.map(function (item) {
      return item.brand + "/" + item.version;
    }).join(' ');
  }

  return navigator.userAgent;
}

function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}

function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }

  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }

  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;

  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }

  var _ref = isElement(element) ? getWindow(element) : window,
      visualViewport = _ref.visualViewport;

  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width: width,
    height: height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x: x,
    y: y
  };
}

// means it doesn't take into account transforms.

function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element); // Use the clientRect sizes if it's not been transformed.
  // Fixes https://github.com/popperjs/popper-core/issues/1223

  var width = element.offsetWidth;
  var height = element.offsetHeight;

  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }

  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }

  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width: width,
    height: height
  };
}

function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode(); // First, attempt with faster native method

  if (parent.contains(child)) {
    return true;
  } // then fallback to custom implementation with Shadow DOM support
  else if (rootNode && isShadowRoot(rootNode)) {
      var next = child;

      do {
        if (next && parent.isSameNode(next)) {
          return true;
        } // $FlowFixMe[prop-missing]: need a better way to handle this...


        next = next.parentNode || next.host;
      } while (next);
    } // Give up, the result is false


  return false;
}

function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}

function isTableElement(element) {
  return ['table', 'td', 'th'].indexOf(getNodeName(element)) >= 0;
}

function getDocumentElement(element) {
  // $FlowFixMe[incompatible-return]: assume body is always available
  return ((isElement(element) ? element.ownerDocument : // $FlowFixMe[prop-missing]
  element.document) || window.document).documentElement;
}

function getParentNode(element) {
  if (getNodeName(element) === 'html') {
    return element;
  }

  return (// this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || ( // DOM Element detected
    isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element) // fallback

  );
}

function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle(element).position === 'fixed') {
    return null;
  }

  return element.offsetParent;
} // `.offsetParent` reports `null` for fixed elements, while absolute elements
// return the containing block


function getContainingBlock(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());

  if (isIE && isHTMLElement(element)) {
    // In IE 9, 10 and 11 fixed elements containing block is always established by the viewport
    var elementCss = getComputedStyle(element);

    if (elementCss.position === 'fixed') {
      return null;
    }
  }

  var currentNode = getParentNode(element);

  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }

  while (isHTMLElement(currentNode) && ['html', 'body'].indexOf(getNodeName(currentNode)) < 0) {
    var css = getComputedStyle(currentNode); // This is non-exhaustive but covers the most common CSS properties that
    // create a containing block.
    // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block

    if (css.transform !== 'none' || css.perspective !== 'none' || css.contain === 'paint' || ['transform', 'perspective'].indexOf(css.willChange) !== -1 || isFirefox && css.willChange === 'filter' || isFirefox && css.filter && css.filter !== 'none') {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }

  return null;
} // Gets the closest ancestor positioned element. Handles some edge cases,
// such as table ancestors and cross browser bugs.


function getOffsetParent(element) {
  var window = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);

  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === 'static') {
    offsetParent = getTrueOffsetParent(offsetParent);
  }

  if (offsetParent && (getNodeName(offsetParent) === 'html' || getNodeName(offsetParent) === 'body' && getComputedStyle(offsetParent).position === 'static')) {
    return window;
  }

  return offsetParent || getContainingBlock(element) || window;
}

function getMainAxisFromPlacement(placement) {
  return ['top', 'bottom'].indexOf(placement) >= 0 ? 'x' : 'y';
}

function within(min$1, value, max$1) {
  return max(min$1, min(value, max$1));
}
function withinMaxClamp(min, value, max) {
  var v = within(min, value, max);
  return v > max ? max : v;
}

function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

function expandToHashMap(value, keys) {
  return keys.reduce(function (hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

var toPaddingObject = function toPaddingObject(padding, state) {
  padding = typeof padding === 'function' ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
};

function arrow(_ref) {
  var _state$modifiersData$;

  var state = _ref.state,
      name = _ref.name,
      options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? 'height' : 'width';

  if (!arrowElement || !popperOffsets) {
    return;
  }

  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === 'y' ? top : left;
  var maxProp = axis === 'y' ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets[axis] - state.rects.popper[len];
  var startDiff = popperOffsets[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === 'y' ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2; // Make sure the arrow doesn't overflow the popper if the center point is
  // outside of the popper bounds

  var min = paddingObject[minProp];
  var max = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset = within(min, center, max); // Prevents breaking syntax highlighting...

  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset, _state$modifiersData$.centerOffset = offset - center, _state$modifiersData$);
}

function effect$1(_ref2) {
  var state = _ref2.state,
      options = _ref2.options;
  var _options$element = options.element,
      arrowElement = _options$element === void 0 ? '[data-popper-arrow]' : _options$element;

  if (arrowElement == null) {
    return;
  } // CSS selector


  if (typeof arrowElement === 'string') {
    arrowElement = state.elements.popper.querySelector(arrowElement);

    if (!arrowElement) {
      return;
    }
  }

  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }

  state.elements.arrow = arrowElement;
} // eslint-disable-next-line import/no-unused-modules


var arrow$1 = {
  name: 'arrow',
  enabled: true,
  phase: 'main',
  fn: arrow,
  effect: effect$1,
  requires: ['popperOffsets'],
  requiresIfExists: ['preventOverflow']
};

function getVariation(placement) {
  return placement.split('-')[1];
}

var unsetSides = {
  top: 'auto',
  right: 'auto',
  bottom: 'auto',
  left: 'auto'
}; // Round the offsets to the nearest suitable subpixel based on the DPR.
// Zooming can change the DPR, but it seems to report a value that will
// cleanly divide the values into the appropriate subpixels.

function roundOffsetsByDPR(_ref, win) {
  var x = _ref.x,
      y = _ref.y;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}

function mapToStyles(_ref2) {
  var _Object$assign2;

  var popper = _ref2.popper,
      popperRect = _ref2.popperRect,
      placement = _ref2.placement,
      variation = _ref2.variation,
      offsets = _ref2.offsets,
      position = _ref2.position,
      gpuAcceleration = _ref2.gpuAcceleration,
      adaptive = _ref2.adaptive,
      roundOffsets = _ref2.roundOffsets,
      isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x,
      x = _offsets$x === void 0 ? 0 : _offsets$x,
      _offsets$y = offsets.y,
      y = _offsets$y === void 0 ? 0 : _offsets$y;

  var _ref3 = typeof roundOffsets === 'function' ? roundOffsets({
    x: x,
    y: y
  }) : {
    x: x,
    y: y
  };

  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty('x');
  var hasY = offsets.hasOwnProperty('y');
  var sideX = left;
  var sideY = top;
  var win = window;

  if (adaptive) {
    var offsetParent = getOffsetParent(popper);
    var heightProp = 'clientHeight';
    var widthProp = 'clientWidth';

    if (offsetParent === getWindow(popper)) {
      offsetParent = getDocumentElement(popper);

      if (getComputedStyle(offsetParent).position !== 'static' && position === 'absolute') {
        heightProp = 'scrollHeight';
        widthProp = 'scrollWidth';
      }
    } // $FlowFixMe[incompatible-cast]: force type refinement, we compare offsetParent with window above, but Flow doesn't detect it


    offsetParent = offsetParent;

    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : // $FlowFixMe[prop-missing]
      offsetParent[heightProp];
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }

    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : // $FlowFixMe[prop-missing]
      offsetParent[widthProp];
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }

  var commonStyles = Object.assign({
    position: position
  }, adaptive && unsetSides);

  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x: x,
    y: y
  }, getWindow(popper)) : {
    x: x,
    y: y
  };

  x = _ref4.x;
  y = _ref4.y;

  if (gpuAcceleration) {
    var _Object$assign;

    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? '0' : '', _Object$assign[sideX] = hasX ? '0' : '', _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }

  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : '', _Object$assign2[sideX] = hasX ? x + "px" : '', _Object$assign2.transform = '', _Object$assign2));
}

function computeStyles(_ref5) {
  var state = _ref5.state,
      options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration,
      gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat,
      _options$adaptive = options.adaptive,
      adaptive = _options$adaptive === void 0 ? true : _options$adaptive,
      _options$roundOffsets = options.roundOffsets,
      roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration: gpuAcceleration,
    isFixed: state.options.strategy === 'fixed'
  };

  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive: adaptive,
      roundOffsets: roundOffsets
    })));
  }

  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: 'absolute',
      adaptive: false,
      roundOffsets: roundOffsets
    })));
  }

  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-placement': state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


var computeStyles$1 = {
  name: 'computeStyles',
  enabled: true,
  phase: 'beforeWrite',
  fn: computeStyles,
  data: {}
};

var passive = {
  passive: true
};

function effect(_ref) {
  var state = _ref.state,
      instance = _ref.instance,
      options = _ref.options;
  var _options$scroll = options.scroll,
      scroll = _options$scroll === void 0 ? true : _options$scroll,
      _options$resize = options.resize,
      resize = _options$resize === void 0 ? true : _options$resize;
  var window = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);

  if (scroll) {
    scrollParents.forEach(function (scrollParent) {
      scrollParent.addEventListener('scroll', instance.update, passive);
    });
  }

  if (resize) {
    window.addEventListener('resize', instance.update, passive);
  }

  return function () {
    if (scroll) {
      scrollParents.forEach(function (scrollParent) {
        scrollParent.removeEventListener('scroll', instance.update, passive);
      });
    }

    if (resize) {
      window.removeEventListener('resize', instance.update, passive);
    }
  };
} // eslint-disable-next-line import/no-unused-modules


var eventListeners = {
  name: 'eventListeners',
  enabled: true,
  phase: 'write',
  fn: function fn() {},
  effect: effect,
  data: {}
};

var hash$1 = {
  left: 'right',
  right: 'left',
  bottom: 'top',
  top: 'bottom'
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function (matched) {
    return hash$1[matched];
  });
}

var hash = {
  start: 'end',
  end: 'start'
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function (matched) {
    return hash[matched];
  });
}

function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft: scrollLeft,
    scrollTop: scrollTop
  };
}

function getWindowScrollBarX(element) {
  // If <html> has a CSS width greater than the viewport, then this will be
  // incorrect for RTL.
  // Popper 1 is broken in this case and never had a bug report so let's assume
  // it's not an issue. I don't think anyone ever specifies width on <html>
  // anyway.
  // Browsers where the left scrollbar doesn't cause an issue report `0` for
  // this (e.g. Edge 2019, IE11, Safari)
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

function getViewportRect(element, strategy) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;

  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();

    if (layoutViewport || !layoutViewport && strategy === 'fixed') {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }

  return {
    width: width,
    height: height,
    x: x + getWindowScrollBarX(element),
    y: y
  };
}

// of the `<html>` and `<body>` rect bounds if horizontally scrollable

function getDocumentRect(element) {
  var _element$ownerDocumen;

  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;

  if (getComputedStyle(body || html).direction === 'rtl') {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }

  return {
    width: width,
    height: height,
    x: x,
    y: y
  };
}

function isScrollParent(element) {
  // Firefox wants us to check `-x` and `-y` variations as well
  var _getComputedStyle = getComputedStyle(element),
      overflow = _getComputedStyle.overflow,
      overflowX = _getComputedStyle.overflowX,
      overflowY = _getComputedStyle.overflowY;

  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

function getScrollParent(node) {
  if (['html', 'body', '#document'].indexOf(getNodeName(node)) >= 0) {
    // $FlowFixMe[incompatible-return]: assume body is always available
    return node.ownerDocument.body;
  }

  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }

  return getScrollParent(getParentNode(node));
}

/*
given a DOM element, return the list of all scroll parents, up the list of ancesors
until we get to the top window object. This list is what we attach scroll listeners
to, because if any of these parent elements scroll, we'll need to re-calculate the
reference element's position.
*/

function listScrollParents(element, list) {
  var _element$ownerDocumen;

  if (list === void 0) {
    list = [];
  }

  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
  updatedList.concat(listScrollParents(getParentNode(target)));
}

function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

function getInnerBoundingClientRect(element, strategy) {
  var rect = getBoundingClientRect(element, false, strategy === 'fixed');
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}

function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
} // A "clipping parent" is an overflowable container with the characteristic of
// clipping (or hiding) overflowing elements with a position different from
// `initial`


function getClippingParents(element) {
  var clippingParents = listScrollParents(getParentNode(element));
  var canEscapeClipping = ['absolute', 'fixed'].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;

  if (!isElement(clipperElement)) {
    return [];
  } // $FlowFixMe[incompatible-return]: https://github.com/facebook/flow/issues/1414


  return clippingParents.filter(function (clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== 'body';
  });
} // Gets the maximum area that the element is visible in due to any number of
// clipping parents


function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === 'clippingParents' ? getClippingParents(element) : [].concat(boundary);
  var clippingParents = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents[0];
  var clippingRect = clippingParents.reduce(function (accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

function computeOffsets(_ref) {
  var reference = _ref.reference,
      element = _ref.element,
      placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference.x + reference.width / 2 - element.width / 2;
  var commonY = reference.y + reference.height / 2 - element.height / 2;
  var offsets;

  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference.y - element.height
      };
      break;

    case bottom:
      offsets = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;

    case right:
      offsets = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;

    case left:
      offsets = {
        x: reference.x - element.width,
        y: commonY
      };
      break;

    default:
      offsets = {
        x: reference.x,
        y: reference.y
      };
  }

  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;

  if (mainAxis != null) {
    var len = mainAxis === 'y' ? 'height' : 'width';

    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference[len] / 2 - element[len] / 2);
        break;

      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference[len] / 2 - element[len] / 2);
        break;
    }
  }

  return offsets;
}

function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      _options$placement = _options.placement,
      placement = _options$placement === void 0 ? state.placement : _options$placement,
      _options$strategy = _options.strategy,
      strategy = _options$strategy === void 0 ? state.strategy : _options$strategy,
      _options$boundary = _options.boundary,
      boundary = _options$boundary === void 0 ? clippingParents : _options$boundary,
      _options$rootBoundary = _options.rootBoundary,
      rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary,
      _options$elementConte = _options.elementContext,
      elementContext = _options$elementConte === void 0 ? popper : _options$elementConte,
      _options$altBoundary = _options.altBoundary,
      altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary,
      _options$padding = _options.padding,
      padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== 'number' ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: 'absolute',
    placement: placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect; // positive = overflowing the clipping rect
  // 0 or negative = within the clipping rect

  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset; // Offsets can be applied only to the popper element

  if (elementContext === popper && offsetData) {
    var offset = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function (key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? 'y' : 'x';
      overflowOffsets[key] += offset[axis] * multiply;
    });
  }

  return overflowOffsets;
}

function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }

  var _options = options,
      placement = _options.placement,
      boundary = _options.boundary,
      rootBoundary = _options.rootBoundary,
      padding = _options.padding,
      flipVariations = _options.flipVariations,
      _options$allowedAutoP = _options.allowedAutoPlacements,
      allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements$1 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function (placement) {
    return getVariation(placement) === variation;
  }) : basePlacements;
  var allowedPlacements = placements$1.filter(function (placement) {
    return allowedAutoPlacements.indexOf(placement) >= 0;
  });

  if (allowedPlacements.length === 0) {
    allowedPlacements = placements$1;
  } // $FlowFixMe[incompatible-type]: Flow seems to have problems with two array unions...


  var overflows = allowedPlacements.reduce(function (acc, placement) {
    acc[placement] = detectOverflow(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding
    })[getBasePlacement(placement)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function (a, b) {
    return overflows[a] - overflows[b];
  });
}

function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }

  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}

function flip(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;

  if (state.modifiersData[name]._skip) {
    return;
  }

  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis,
      specifiedFallbackPlacements = options.fallbackPlacements,
      padding = options.padding,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      _options$flipVariatio = options.flipVariations,
      flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio,
      allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements = [preferredPlacement].concat(fallbackPlacements).reduce(function (acc, placement) {
    return acc.concat(getBasePlacement(placement) === auto ? computeAutoPlacement(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      padding: padding,
      flipVariations: flipVariations,
      allowedAutoPlacements: allowedAutoPlacements
    }) : placement);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements[0];

  for (var i = 0; i < placements.length; i++) {
    var placement = placements[i];

    var _basePlacement = getBasePlacement(placement);

    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? 'width' : 'height';
    var overflow = detectOverflow(state, {
      placement: placement,
      boundary: boundary,
      rootBoundary: rootBoundary,
      altBoundary: altBoundary,
      padding: padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;

    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }

    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];

    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }

    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }

    if (checks.every(function (check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }

    checksMap.set(placement, checks);
  }

  if (makeFallbackChecks) {
    // `2` may be desired in some cases – research later
    var numberOfChecks = flipVariations ? 3 : 1;

    var _loop = function _loop(_i) {
      var fittingPlacement = placements.find(function (placement) {
        var checks = checksMap.get(placement);

        if (checks) {
          return checks.slice(0, _i).every(function (check) {
            return check;
          });
        }
      });

      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };

    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);

      if (_ret === "break") break;
    }
  }

  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
} // eslint-disable-next-line import/no-unused-modules


var flip$1 = {
  name: 'flip',
  enabled: true,
  phase: 'main',
  fn: flip,
  requiresIfExists: ['offset'],
  data: {
    _skip: false
  }
};

function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }

  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}

function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function (side) {
    return overflow[side] >= 0;
  });
}

function hide(_ref) {
  var state = _ref.state,
      name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: 'reference'
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets: referenceClippingOffsets,
    popperEscapeOffsets: popperEscapeOffsets,
    isReferenceHidden: isReferenceHidden,
    hasPopperEscaped: hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    'data-popper-reference-hidden': isReferenceHidden,
    'data-popper-escaped': hasPopperEscaped
  });
} // eslint-disable-next-line import/no-unused-modules


var hide$1 = {
  name: 'hide',
  enabled: true,
  phase: 'main',
  requiresIfExists: ['preventOverflow'],
  fn: hide
};

function distanceAndSkiddingToXY(placement, rects, offset) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;

  var _ref = typeof offset === 'function' ? offset(Object.assign({}, rects, {
    placement: placement
  })) : offset,
      skidding = _ref[0],
      distance = _ref[1];

  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}

function offset(_ref2) {
  var state = _ref2.state,
      options = _ref2.options,
      name = _ref2.name;
  var _options$offset = options.offset,
      offset = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function (acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement],
      x = _data$state$placement.x,
      y = _data$state$placement.y;

  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


var offset$1 = {
  name: 'offset',
  enabled: true,
  phase: 'main',
  requires: ['popperOffsets'],
  fn: offset
};

function popperOffsets(_ref) {
  var state = _ref.state,
      name = _ref.name;
  // Offsets are the actual position the popper needs to have to be
  // properly positioned near its reference element
  // This is the most basic placement, and will be adjusted by
  // the modifiers in the next step
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: 'absolute',
    placement: state.placement
  });
} // eslint-disable-next-line import/no-unused-modules


var popperOffsets$1 = {
  name: 'popperOffsets',
  enabled: true,
  phase: 'read',
  fn: popperOffsets,
  data: {}
};

function getAltAxis(axis) {
  return axis === 'x' ? 'y' : 'x';
}

function preventOverflow(_ref) {
  var state = _ref.state,
      options = _ref.options,
      name = _ref.name;
  var _options$mainAxis = options.mainAxis,
      checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis,
      _options$altAxis = options.altAxis,
      checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis,
      boundary = options.boundary,
      rootBoundary = options.rootBoundary,
      altBoundary = options.altBoundary,
      padding = options.padding,
      _options$tether = options.tether,
      tether = _options$tether === void 0 ? true : _options$tether,
      _options$tetherOffset = options.tetherOffset,
      tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary: boundary,
    rootBoundary: rootBoundary,
    padding: padding,
    altBoundary: altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === 'function' ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === 'number' ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };

  if (!popperOffsets) {
    return;
  }

  if (checkMainAxis) {
    var _offsetModifierState$;

    var mainSide = mainAxis === 'y' ? top : left;
    var altSide = mainAxis === 'y' ? bottom : right;
    var len = mainAxis === 'y' ? 'height' : 'width';
    var offset = popperOffsets[mainAxis];
    var min$1 = offset + overflow[mainSide];
    var max$1 = offset - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len]; // We need to include the arrow in the calculation so the arrow doesn't go
    // outside the reference bounds

    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData['arrow#persistent'] ? state.modifiersData['arrow#persistent'].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide]; // If the reference length is smaller than the arrow length, we don't want
    // to include its full size in the calculation. If the reference is small
    // and near the edge of a boundary, the popper can overflow even if the
    // reference is not overflowing as well (e.g. virtual elements with no
    // width or height)

    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === 'y' ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min$1, tetherMin) : min$1, offset, tether ? max(max$1, tetherMax) : max$1);
    popperOffsets[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset;
  }

  if (checkAltAxis) {
    var _offsetModifierState$2;

    var _mainSide = mainAxis === 'x' ? top : left;

    var _altSide = mainAxis === 'x' ? bottom : right;

    var _offset = popperOffsets[altAxis];

    var _len = altAxis === 'y' ? 'height' : 'width';

    var _min = _offset + overflow[_mainSide];

    var _max = _offset - overflow[_altSide];

    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;

    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;

    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;

    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;

    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);

    popperOffsets[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }

  state.modifiersData[name] = data;
} // eslint-disable-next-line import/no-unused-modules


var preventOverflow$1 = {
  name: 'preventOverflow',
  enabled: true,
  phase: 'main',
  fn: preventOverflow,
  requiresIfExists: ['offset']
};

function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
} // Returns the composite rect of an element relative to its offsetParent.
// Composite means it takes into account transforms as well as layout.


function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }

  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };

  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== 'body' || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }

    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }

  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

function order(modifiers) {
  var map = new Map();
  var visited = new Set();
  var result = [];
  modifiers.forEach(function (modifier) {
    map.set(modifier.name, modifier);
  }); // On visiting object, check for its dependencies and visit them recursively

  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function (dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);

        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }

  modifiers.forEach(function (modifier) {
    if (!visited.has(modifier.name)) {
      // check for visited object
      sort(modifier);
    }
  });
  return result;
}

function orderModifiers(modifiers) {
  // order based on dependencies
  var orderedModifiers = order(modifiers); // order based on phase

  return modifierPhases.reduce(function (acc, phase) {
    return acc.concat(orderedModifiers.filter(function (modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

function debounce(fn) {
  var pending;
  return function () {
    if (!pending) {
      pending = new Promise(function (resolve) {
        Promise.resolve().then(function () {
          pending = undefined;
          resolve(fn());
        });
      });
    }

    return pending;
  };
}

function mergeByName(modifiers) {
  var merged = modifiers.reduce(function (merged, current) {
    var existing = merged[current.name];
    merged[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged;
  }, {}); // IE11 does not support Object.values

  return Object.keys(merged).map(function (key) {
    return merged[key];
  });
}

var DEFAULT_OPTIONS = {
  placement: 'bottom',
  modifiers: [],
  strategy: 'absolute'
};

function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return !args.some(function (element) {
    return !(element && typeof element.getBoundingClientRect === 'function');
  });
}

function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }

  var _generatorOptions = generatorOptions,
      _generatorOptions$def = _generatorOptions.defaultModifiers,
      defaultModifiers = _generatorOptions$def === void 0 ? [] : _generatorOptions$def,
      _generatorOptions$def2 = _generatorOptions.defaultOptions,
      defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper(reference, popper, options) {
    if (options === void 0) {
      options = defaultOptions;
    }

    var state = {
      placement: 'bottom',
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference,
        popper: popper
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state: state,
      setOptions: function setOptions(setOptionsAction) {
        var options = typeof setOptionsAction === 'function' ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options);
        state.scrollParents = {
          reference: isElement(reference) ? listScrollParents(reference) : reference.contextElement ? listScrollParents(reference.contextElement) : [],
          popper: listScrollParents(popper)
        }; // Orders the modifiers based on their dependencies and `phase`
        // properties

        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers, state.options.modifiers))); // Strip out disabled modifiers

        state.orderedModifiers = orderedModifiers.filter(function (m) {
          return m.enabled;
        });
        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }

        var _state$elements = state.elements,
            reference = _state$elements.reference,
            popper = _state$elements.popper; // Don't proceed if `reference` or `popper` are not valid elements
        // anymore

        if (!areValidElements(reference, popper)) {
          return;
        } // Store the reference and popper rects to be read by modifiers


        state.rects = {
          reference: getCompositeRect(reference, getOffsetParent(popper), state.options.strategy === 'fixed'),
          popper: getLayoutRect(popper)
        }; // Modifiers have the ability to reset the current update cycle. The
        // most common use case for this is the `flip` modifier changing the
        // placement, which then needs to re-run all the modifiers, because the
        // logic was previously ran for the previous placement and is therefore
        // stale/incorrect

        state.reset = false;
        state.placement = state.options.placement; // On each update cycle, the `modifiersData` property for each modifier
        // is filled with the initial data specified by the modifier. This means
        // it doesn't persist and is fresh on each update.
        // To ensure persistent data, use `${name}#persistent`

        state.orderedModifiers.forEach(function (modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });

        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }

          var _state$orderedModifie = state.orderedModifiers[index],
              fn = _state$orderedModifie.fn,
              _state$orderedModifie2 = _state$orderedModifie.options,
              _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2,
              name = _state$orderedModifie.name;

          if (typeof fn === 'function') {
            state = fn({
              state: state,
              options: _options,
              name: name,
              instance: instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function () {
        return new Promise(function (resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };

    if (!areValidElements(reference, popper)) {
      return instance;
    }

    instance.setOptions(options).then(function (state) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state);
      }
    }); // Modifiers have the ability to execute arbitrary code before the first
    // update cycle runs. They will be executed in the same order as the update
    // cycle. This is useful when a modifier adds some persistent data that
    // other modifiers need to use, but the modifier is run after the dependent
    // one.

    function runModifierEffects() {
      state.orderedModifiers.forEach(function (_ref) {
        var name = _ref.name,
            _ref$options = _ref.options,
            options = _ref$options === void 0 ? {} : _ref$options,
            effect = _ref.effect;

        if (typeof effect === 'function') {
          var cleanupFn = effect({
            state: state,
            name: name,
            instance: instance,
            options: options
          });

          var noopFn = function noopFn() {};

          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }

    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function (fn) {
        return fn();
      });
      effectCleanupFns = [];
    }

    return instance;
  };
}

var defaultModifiers = [eventListeners, popperOffsets$1, computeStyles$1, applyStyles$1, offset$1, flip$1, preventOverflow$1, arrow$1, hide$1];
var createPopper = /*#__PURE__*/popperGenerator({
  defaultModifiers: defaultModifiers
}); // eslint-disable-next-line import/no-unused-modules

/**
 * Creates DOM element to be used as React root.
 */
function createRootElement(id) {
  var rootContainer = document.createElement('div');
  rootContainer.setAttribute('id', id);
  return rootContainer;
}

/**
 * Appends element as last child of body.
 */
function addRootElement(rootElem) {
  document.body.append(rootElem);
}

/**
 * Hook to create a React Portal.
 * Automatically handles creating and tearing-down the root elements (no SRR
 * makes this trivial), so there is no need to ensure the parent target already
 * exists.
 * @example
 * const target = usePortal(id, [id]);
 * return createPortal(children, target);
 * @param {String} id The id of the target container, e.g 'modal' or 'spotlight'
 * @returns {HTMLElement} The DOM node to use as the Portal target.
 */
function usePortal(id) {
  var rootElemRef = React.useRef(null);
  React.useEffect(function () {
    // Look for existing target dom element to append to
    var existingParent = document.querySelector("#".concat(id));
    // Parent is either a new root or the existing dom element
    var parentElem = existingParent || createRootElement(id);

    // If there is no existing DOM element, add a new one.
    if (!existingParent) {
      addRootElement(parentElem);
    }

    // Add the detached element to the parent
    if (rootElemRef.current) {
      parentElem.append(rootElemRef.current);
    }
    return function removeElement() {
      if (rootElemRef.current) {
        rootElemRef.current.remove();
      }
      if (parentElem.childNodes.length === -1) {
        parentElem.remove();
      }
    };
  }, []);

  /**
   * It's important we evaluate this lazily:
   * - We need first render to contain the DOM element, so it shouldn't happen
   *   in useEffect. We would normally put this in the constructor().
   * - We can't do 'const rootElemRef = useRef(document.createElement('div))',
   *   since this will run every single render (that's a lot).
   * - We want the ref to consistently point to the same DOM element and only
   *   ever run once.
   * @link https://reactjs.org/docs/hooks-faq.html#how-to-create-expensive-objects-lazily
   */
  function getRootElem() {
    if (!rootElemRef.current) {
      rootElemRef.current = document.createElement('div');
    }
    return rootElemRef.current;
  }
  return getRootElem();
}

var _PopperMixin;
var PopperMixin = (_PopperMixin = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_PopperMixin, Position$2.Auto, styled.css(["top:0px;bottom:0px;left:0px;right:0px;"])), Position$2.AutoEnd, styled.css(["top:0px;bottom:0px;left:0px;right:0px;"])), Position$2.AutoStart, styled.css(["top:0px;bottom:0px;left:0px;right:0px;"])), Position$2.Right, styled.css(["left:-4px;"])), Position$2.RightEnd, styled.css(["left:-4px;"])), Position$2.RightStart, styled.css(["left:-4px;"])), Position$2.Left, styled.css(["right:-4px;"])), Position$2.LeftEnd, styled.css(["right:-4px;"])), Position$2.LeftStart, styled.css(["right:-4px;"])), Position$2.Top, styled.css(["bottom:-4px;"])), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_PopperMixin, Position$2.TopEnd, styled.css(["bottom:-4px;"])), Position$2.TopStart, styled.css(["bottom:-4px;"])), Position$2.Bottom, styled.css(["top:-4px;"])), Position$2.BottomEnd, styled.css(["top:-4px;"])), Position$2.BottomStart, styled.css(["top:-4px;"])));

var baseClassName$m = 'Popper';
var Popper$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$m, 'root')
}).withConfig({
  componentId: "sc-1373tsp-0"
})(function (_ref) {
  var open = _ref.open;
  return styled.css(["display:", ";"], !open && 'none');
});
var PopperWrapper = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$m, 'wrapper')
}).withConfig({
  componentId: "sc-1373tsp-1"
})(function (_ref2) {
  var $zIndex = _ref2.$zIndex;
  return styled.css(["position:relative;z-index:", ";"], $zIndex);
});
var Arrow = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$m, 'arrow')
}).withConfig({
  componentId: "sc-1373tsp-2"
})(function (_ref3) {
  var _ref3$warning = _ref3.warning,
    warning = _ref3$warning === void 0 ? false : _ref3$warning,
    _ref3$position = _ref3.position,
    position = _ref3$position === void 0 ? Position$2.Right : _ref3$position,
    theme = _ref3.theme;
  return styled.css(["width:8px;height:8px;position:absolute;&::before{content:'';background:", ";width:8px;height:8px;transform:rotate(45deg);position:absolute;top:0;left:0;z-index:-1;}", ""], warning ? theme.palette[Color.BackgroundOrange] : theme.palette[Color.BackgroundGrey], PopperMixin[position]);
});
var Overlay$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$m, 'Overlay')
}).withConfig({
  componentId: "sc-1373tsp-3"
})(function () {
  return styled.css(["position:fixed;right:0;bottom:0;top:0;left:0;background-color:transparent;"]);
});
var Styled$E = applyDisplayNames({
  Popper: Popper$2,
  Overlay: Overlay$2,
  Arrow: Arrow,
  PopperWrapper: PopperWrapper
});
var Styled$F = Styled$E;

var passEventToUnderLayingEvent = function passEventToUnderLayingEvent(event) {
  setTimeout(function () {
    if (event.clientX && event.clientY) {
      var elem = document.elementFromPoint(event.clientX, event.clientY);
      if (elem) {
        elem.dispatchEvent(event.nativeEvent);
      }
    }
  }, 0);
};

var _excluded$1B = ["anchorEl", "children", "open", "warning", "position", "arrow", "popperOptions", "overlay", "zIndex", "enableUnderlayingEvent", "wrapperStyles", "disablePortal", "onClick"];
function ownKeys$8(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$8(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$8(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$8(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var Popper = intrinsicComponent$1(function (_ref, ref) {
  var anchorEl = _ref.anchorEl,
    children = _ref.children,
    open = _ref.open,
    _ref$warning = _ref.warning,
    warning = _ref$warning === void 0 ? false : _ref$warning,
    _ref$position = _ref.position,
    initialPlacement = _ref$position === void 0 ? Position$2.Bottom : _ref$position,
    _ref$arrow = _ref.arrow,
    arrow = _ref$arrow === void 0 ? false : _ref$arrow,
    _ref$popperOptions = _ref.popperOptions,
    popperOptions = _ref$popperOptions === void 0 ? {} : _ref$popperOptions,
    _ref$overlay = _ref.overlay,
    overlay = _ref$overlay === void 0 ? false : _ref$overlay,
    _ref$zIndex = _ref.zIndex,
    zIndex = _ref$zIndex === void 0 ? 1300 : _ref$zIndex,
    _ref$enableUnderlayin = _ref.enableUnderlayingEvent,
    enableUnderlayingEvent = _ref$enableUnderlayin === void 0 ? false : _ref$enableUnderlayin,
    _ref$wrapperStyles = _ref.wrapperStyles,
    wrapperStyles = _ref$wrapperStyles === void 0 ? {} : _ref$wrapperStyles,
    _ref$disablePortal = _ref.disablePortal,
    disablePortal = _ref$disablePortal === void 0 ? false : _ref$disablePortal,
    onClick = _ref.onClick,
    rest = _objectWithoutProperties(_ref, _excluded$1B);
  var target = usePortal(generateClassNames('Popper'));
  var popperRef = React.useRef(null);
  var handlePopperRef = useForkRef(popperRef, ref);
  React.useEffect(function () {
    if (!anchorEl || !open || popperRef.current === null) {
      return undefined;
    }
    var defaultModifiers = [{
      name: 'arrow',
      options: {
        element: '[data-popper-arrow]'
      }
    }, {
      name: 'offset',
      options: {
        offset: [0, 10]
      }
    }];
    var popperModifiers = arrow ? defaultModifiers : [];
    if (popperOptions && popperOptions.modifiers != null) {
      popperModifiers = popperModifiers.concat(popperOptions.modifiers);
    }
    var popper = createPopper(anchorEl, popperRef.current, _objectSpread$8(_objectSpread$8({
      placement: initialPlacement
    }, popperOptions), {}, {
      modifiers: popperModifiers
    }));
    handlePopperRef.current = popper;
    return function () {
      popper.destroy();
      handlePopperRef.current = null;
    };
  }, [anchorEl, open, popperOptions, initialPlacement, arrow]);
  var handleOnClicking = function handleOnClicking(event) {
    event.persist();
    event.preventDefault();
    event.stopPropagation();
    if (onClick) {
      onClick(event);
    }
    if (enableUnderlayingEvent) {
      passEventToUnderLayingEvent(event);
    }
  };
  var renderOverlay = function renderOverlay() {
    return /*#__PURE__*/React.createElement(Styled$F.Overlay, {
      onClick: handleOnClicking,
      onContextMenu: handleOnClicking
    });
  };
  var render = function render() {
    var _handlePopperRef$stat;
    return /*#__PURE__*/React.createElement(Styled$F.PopperWrapper, {
      $zIndex: zIndex,
      style: _objectSpread$8({}, wrapperStyles)
    }, overlay && open && renderOverlay(), /*#__PURE__*/React.createElement(Styled$F.Popper, _extends({
      ref: handlePopperRef,
      open: open
    }, rest), children, arrow && /*#__PURE__*/React.createElement(Styled$F.Arrow, {
      warning: warning,
      "data-popper-arrow": true,
      position: (handlePopperRef === null || handlePopperRef === void 0 || (_handlePopperRef$stat = handlePopperRef.state) === null || _handlePopperRef$stat === void 0 ? void 0 : _handlePopperRef$stat.placement) || initialPlacement
    })));
  };
  return disablePortal ? render() : /*#__PURE__*/reactDom.createPortal(render(), target);
});
var Popper$1 = Popper;

var baseClassName$l = 'Menu';
var Overlay$1 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$l, 'Overlay')
}).withConfig({
  componentId: "sc-10okxhw-0"
})(function () {
  return styled.css(["position:fixed;right:0;bottom:0;top:0;left:0;background-color:transparent;z-index:-1;"]);
});
var opacityKeyframes = /*#__PURE__*/styled.keyframes(["from{opacity:0;}to{opacity:1;}"]);
var transformKeyframes = /*#__PURE__*/styled.keyframes(["from{transform:scale(0.97);margin-top:0px;}to{transform:scale(1);margin-top:4px;}"]);
var fadeInAnimation = /*#__PURE__*/styled.css(["animation:", " 250ms 0ms cubic-bezier(0.4,0,0.2,1),", " 250ms cubic-bezier(0.4,0,0.2,1);"], opacityKeyframes, transformKeyframes);
var Menu$3 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$l, 'root')
}).withConfig({
  componentId: "sc-10okxhw-1"
})(function (_ref) {
  var theme = _ref.theme,
    _ref$$maxHeight = _ref.$maxHeight,
    $maxHeight = _ref$$maxHeight === void 0 ? '' : _ref$$maxHeight,
    $rect = _ref.$rect;
  return styled.css(["min-width:", "px;width:195px;min-height:16px;overflow-x:hidden;overflow-y:auto;transition:opacity 250ms cubic-bezier(0.4,0,0,1),transform 250ms cubic-bezier(0.4,0,0,1),margin-top 250ms cubic-bezier(0.4,0,0,1);outline:0;box-shadow:0 2px 4px ", ";border-radius:", ";padding:4px 0;background-color:", ";margin-top:4px;", " ", " ", ""], $rect.width, theme.palette[Color.MediumShadow], theme.shape.borderRadius[BorderRadiusSize.Md], theme.palette[Color.BackgroundStateless], scrollBar, fadeInAnimation, $maxHeight && styled.css(["max-height:", ";"], Number.isNaN(+$maxHeight) ? $maxHeight : "".concat($maxHeight, "px")));
});
var Styled$C = applyDisplayNames({
  Menu: Menu$3,
  Overlay: Overlay$1
});
var Styled$D = Styled$C;

var _excluded$1A = ["children", "anchorEl", "maxHeight", "position", "zIndex", "open", "enableOverlay", "hideScroll", "enableUnderlayingEvent", "containerProps", "popperOptions", "popperWrapperStyles", "onClose"];
var Menu$1 = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    anchorEl = _ref.anchorEl,
    _ref$maxHeight = _ref.maxHeight,
    maxHeight = _ref$maxHeight === void 0 ? 250 : _ref$maxHeight,
    _ref$position = _ref.position,
    position = _ref$position === void 0 ? Position$2.BottomStart : _ref$position,
    zIndex = _ref.zIndex,
    _ref$open = _ref.open,
    open = _ref$open === void 0 ? false : _ref$open,
    _ref$enableOverlay = _ref.enableOverlay,
    enableOverlay = _ref$enableOverlay === void 0 ? true : _ref$enableOverlay,
    _ref$hideScroll = _ref.hideScroll,
    hideScroll = _ref$hideScroll === void 0 ? true : _ref$hideScroll,
    _ref$enableUnderlayin = _ref.enableUnderlayingEvent,
    enableUnderlayingEvent = _ref$enableUnderlayin === void 0 ? false : _ref$enableUnderlayin,
    _ref$containerProps = _ref.containerProps,
    containerProps = _ref$containerProps === void 0 ? {} : _ref$containerProps,
    popperOptions = _ref.popperOptions,
    _ref$popperWrapperSty = _ref.popperWrapperStyles,
    popperWrapperStyles = _ref$popperWrapperSty === void 0 ? {} : _ref$popperWrapperSty,
    onClose = _ref.onClose,
    rest = _objectWithoutProperties(_ref, _excluded$1A);
  var _useState = React.useState(null),
    _useState2 = _slicedToArray(_useState, 2),
    timeout = _useState2[0],
    setTimeoutState = _useState2[1];
  var _useState3 = React.useState(new DOMRect()),
    _useState4 = _slicedToArray(_useState3, 2),
    rect = _useState4[0],
    setRect = _useState4[1];
  var menuRef = React.useRef(null);
  var updateRect = React.useCallback(function () {
    var _anchorEl$getBounding;
    var defaultPosition = {
      top: 0,
      left: 0,
      height: 0,
      width: 0
    };
    var defaultRect = new DOMRect(defaultPosition.left, defaultPosition.top, defaultPosition.width, defaultPosition.height);
    setRect((_anchorEl$getBounding = anchorEl === null || anchorEl === void 0 ? void 0 : anchorEl.getBoundingClientRect()) !== null && _anchorEl$getBounding !== void 0 ? _anchorEl$getBounding : defaultRect);
  }, [open, timeout, anchorEl]);
  var handleWindowSizeChanged = React.useCallback(function () {
    if (open) {
      if (timeout) {
        clearTimeout(timeout);
      }
      setTimeoutState(setTimeout(updateRect, 300));
    }
  }, [open, timeout]);
  React.useEffect(function () {
    window.addEventListener('resize', handleWindowSizeChanged);
    return function () {
      window.removeEventListener('resize', handleWindowSizeChanged);
    };
  }, [handleWindowSizeChanged]);
  React.useEffect(function () {
    updateRect();
  }, [updateRect]);
  React.useEffect(function () {
    if (hideScroll) {
      if (open) {
        document.body.classList.add('Menu-open');
        updateRect();
      } else {
        document.body.classList.remove('Menu-open');
      }
      return function () {
        document.body.classList.remove('Menu-open');
      };
    }
  }, [open, updateRect]);
  var handleClose = function handleClose(event) {
    if (typeof onClose === 'function') {
      onClose(event);
    }
  };
  return /*#__PURE__*/React.createElement(Popper$1, {
    ref: menuRef,
    position: position,
    open: open,
    anchorEl: anchorEl,
    overlay: enableOverlay,
    popperOptions: popperOptions,
    zIndex: zIndex,
    enableUnderlayingEvent: enableUnderlayingEvent,
    wrapperStyles: popperWrapperStyles,
    onClick: handleClose
  }, /*#__PURE__*/React.createElement(Styled$D.Menu, _extends({
    ref: ref,
    $maxHeight: maxHeight,
    $rect: rect
  }, containerProps, rest), children));
});
var Menu$2 = Menu$1;

var Size$2 = {
  Sm: 'sm',
  Md: 'md'
};

var sizeMenuItemMixin = _defineProperty(_defineProperty({}, Size$2.Sm, function (_ref) {
  var font = _ref.theme.typography.font;
  return styled.css(["padding:8px 16px;min-height:32px;", ""], font[FontVariant.LabelMedium]);
}), Size$2.Md, function (_ref2) {
  var font = _ref2.theme.typography.font;
  return styled.css(["padding:11px 16px;min-height:40px;", ""], font[FontVariant.LabelLarge]);
});

var baseClassName$k = 'MenuItem';
var Icon$3 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$k, 'Icon')
}).withConfig({
  componentId: "sc-rrzye0-0"
})(function (_ref) {
  var palette = _ref.theme.palette,
    disabled = _ref.disabled;
  return styled.css(["flex-shrink:0;margin-right:10px;color:", ";"], disabled ? palette[Color.TextPlaceholder] : palette[Color.IconsPrimary]);
});
var Actions = /*#__PURE__*/styled(Icon$3).attrs({
  className: generateClassNames(baseClassName$k, 'Actions')
}).withConfig({
  componentId: "sc-rrzye0-1"
})(function () {
  return styled.css(["margin-right:0px;margin-left:16px;"]);
});
var Label$3 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$k, 'Label')
}).withConfig({
  componentId: "sc-rrzye0-2"
})(["align-items:center;column-gap:4px;flex-grow:1;"]);
var MenuItemWrapper = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$k, 'wrapper')
}).withConfig({
  componentId: "sc-rrzye0-3"
})(function (_ref2) {
  var _ref2$divider = _ref2.divider,
    divider = _ref2$divider === void 0 ? false : _ref2$divider,
    _ref2$disabled = _ref2.disabled,
    disabled = _ref2$disabled === void 0 ? false : _ref2$disabled,
    theme = _ref2.theme;
  return styled.css(["", " ", ""], divider && styled.css(["width:100%;height:1px;background:", ";box-sizing:border-box;margin:4px 0;"], theme.palette[Color.BordersSecondary]), disabled && styled.css(["color:", ";"], theme.palette[Color.ButtonDisabledText]));
});
var MenuItem$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$k, 'root')
}).withConfig({
  componentId: "sc-rrzye0-4"
})(function (_ref3) {
  var _ref3$size = _ref3.size,
    size = _ref3$size === void 0 ? Size$2.Sm : _ref3$size,
    $active = _ref3.$active,
    theme = _ref3.theme,
    _ref3$disableHover = _ref3.disableHover,
    disableHover = _ref3$disableHover === void 0 ? false : _ref3$disableHover,
    disabled = _ref3.disabled,
    $isFocused = _ref3.$isFocused;
  return styled.css(["display:flex;justify-content:space-between;flex-direction:row;align-items:center;width:100%;background:", ";color:", ";cursor:pointer;box-sizing:border-box;transition:all 100ms ease-out;", " &:focus-within,&:focus,&:hover{", ";", "}", " ", ""], theme.palette[$active ? Color.BackgroundActive : Color.BackgroundSecondary], theme.palette[Color.TextPrimary], sizeMenuItemMixin[size], !disableHover && styled.css(["background-color:", ";"], theme.palette[Color.BackgroundHover]), disabled && styled.css(["cursor:default;background-color:white;"]), disabled && styled.css(["& > svg{path{fill:", ";}}color:", ";"], theme.palette[Color.ButtonDisabledText], theme.palette[Color.ButtonDisabledText]), $isFocused && !disableHover && styled.css(["background-color:", ";"], theme.palette[Color.BackgroundHover]));
});
var MenuPrefix = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$k, 'prefix')
}).withConfig({
  componentId: "sc-rrzye0-5"
})(function () {
  return styled.css(["display:flex;"]);
});
var MenuContent = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$k, 'content')
}).withConfig({
  componentId: "sc-rrzye0-6"
})(function () {
  return styled.css(["flex-grow:1;line-height:16px;"]);
});
var MenuSuffix = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$k, 'suffix')
}).withConfig({
  componentId: "sc-rrzye0-7"
})(function () {
  return styled.css(["display:flex;margin-left:8px;"]);
});
var Styled$A = applyDisplayNames({
  MenuItemWrapper: MenuItemWrapper,
  MenuItem: MenuItem$2,
  MenuPrefix: MenuPrefix,
  MenuContent: MenuContent,
  MenuSuffix: MenuSuffix,
  Label: Label$3,
  Icon: Icon$3,
  Actions: Actions
});
var Styled$B = Styled$A;

function ownKeys$7(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$7(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$7(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$7(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var MenuItem = intrinsicComponent$1(function (props, ref) {
  var list = props.list,
    children = props.children,
    disableHover = props.disableHover,
    disabled = props.disabled,
    enableScrollIntoView = props.enableScrollIntoView,
    _props$isFocused = props.isFocused,
    isFocused = _props$isFocused === void 0 ? false : _props$isFocused,
    active = props.active,
    value = props.value,
    dividerStyle = props.dividerStyle,
    _props$depth = props.depth,
    depth = _props$depth === void 0 ? 0 : _props$depth;
  var menuItemRef = React.useRef(null);
  var _React$useState = React.useState(null),
    _React$useState2 = _slicedToArray(_React$useState, 2),
    anchorEl = _React$useState2[0],
    setAnchorEl = _React$useState2[1];
  var _React$useState3 = React.useState([]),
    _React$useState4 = _slicedToArray(_React$useState3, 2),
    selectedIds = _React$useState4[0],
    setSelectedIds = _React$useState4[1];
  var handleOpenMenu = function handleOpenMenu(event) {
    setAnchorEl(event.currentTarget);
  };
  var handleScroll = function handleScroll() {
    var _menuItemRef$current;
    (_menuItemRef$current = menuItemRef.current) === null || _menuItemRef$current === void 0 || _menuItemRef$current.scrollIntoView({
      behavior: 'auto',
      block: 'nearest'
    });
  };
  React.useEffect(function () {
    if ((active || isFocused) && enableScrollIntoView) {
      handleScroll();
    }
  }, [active, isFocused]);
  var handleSelectedId = function handleSelectedId(ev, selected, depthLevel) {
    var updatedArray = selectedIds.slice(0);
    updatedArray[depthLevel] = selected;
    setSelectedIds(updatedArray);
    handleOpenMenu(ev);
  };
  var handleCloseSubMenu = function handleCloseSubMenu(depthLevel) {
    var updatedArray = selectedIds.slice(0);
    updatedArray[depthLevel] = '';
    setSelectedIds(updatedArray);
    setAnchorEl(null);
  };
  var renderItems = function renderItems(options) {
    var depthLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    return options.map(function (option) {
      var hasOptions = option.subList && option.subList.length > 0;
      var subMenu;
      if (selectedIds[depthLevel] === option.key && hasOptions) {
        var newDepthLevel = depthLevel + 1;
        subMenu = /*#__PURE__*/React.createElement(Menu$2, _extends({
          key: option.key,
          position: "right",
          open: Boolean(anchorEl),
          anchorEl: anchorEl,
          enableOverlay: false
        }, option.subMenuProps), /*#__PURE__*/React.createElement(MenuItem, _extends({}, props, {
          list: option.subList,
          depth: newDepthLevel
        })));
      }
      if (option.content === 'divider') {
        return /*#__PURE__*/React.createElement(Styled$B.MenuItemWrapper, {
          divider: true,
          key: option.key,
          style: option.dividerStyle
        });
      }
      return /*#__PURE__*/React.createElement(Styled$B.MenuItemWrapper, _extends({
        disabled: false,
        key: option.key,
        onMouseLeave: function onMouseLeave() {
          return handleCloseSubMenu(depthLevel);
        }
      }, props), /*#__PURE__*/React.createElement(Styled$B.MenuItem, _extends({}, props, {
        className: option.className,
        ref: ref,
        $isFocused: isFocused,
        $active: Boolean(option.active),
        onClick: function onClick(event) {
          var _option$onClick;
          return (_option$onClick = option.onClick) === null || _option$onClick === void 0 ? void 0 : _option$onClick.call(option, _objectSpread$7({
            event: event
          }, props));
        },
        onMouseEnter: function onMouseEnter(ev) {
          return handleSelectedId(ev, option.key, depthLevel);
        },
        disableHover: disableHover || option.disableHover
      }), option.prefix && /*#__PURE__*/React.createElement(Styled$B.MenuPrefix, null, typeof option.prefix === 'function' ? option.prefix(props) : option.prefix), option.content && /*#__PURE__*/React.createElement(Styled$B.MenuContent, null, typeof option.content === 'function' ? option.content(props) : option.content), (option.suffix || option.subList) && /*#__PURE__*/React.createElement(Styled$B.MenuSuffix, null, typeof option.suffix === 'function' ? option.suffix(props) : option.suffix, option.subList && /*#__PURE__*/React.createElement(Arrow$2, {
        size: 10,
        color: "#768A9F"
      }))), subMenu);
    });
  };
  if (!list) {
    if (value === 'divider') {
      return /*#__PURE__*/React.createElement(Styled$B.MenuItemWrapper, {
        divider: true,
        key: value,
        style: dividerStyle
      });
    }
    return /*#__PURE__*/React.createElement(Styled$B.MenuItemWrapper, {
      disabled: Boolean(disabled)
    }, /*#__PURE__*/React.createElement(Styled$B.MenuItem, _extends({}, props, {
      ref: menuItemRef,
      disableHover: disableHover,
      disabled: disabled,
      $isFocused: isFocused,
      $active: active
    }), children));
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, renderItems(list, depth));
});
MenuItem.displayName = 'MenuItem';
var MenuItem$1 = MenuItem;

var _excluded$1z = ["children", "disabled", "size"];
var getIconSize$4 = function getIconSize(sizeName) {
  switch (sizeName) {
    case Size$2.Md:
      return 16;
    case Size$2.Sm:
    default:
      return 14;
  }
};
var MenuItemIcon = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? Size$2.Md : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1z);
  return /*#__PURE__*/React.createElement(Styled$B.Icon, _extends({
    disabled: disabled
  }, rest, {
    ref: ref
  }), children && typeof children === 'function' ? children({
    size: getIconSize$4(size)
  }) : children);
});
var MenuItemIcon$1 = MenuItemIcon;

var _excluded$1y = ["children"];
var MenuItemLabel = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded$1y);
  return /*#__PURE__*/React.createElement(Styled$B.Label, _extends({}, rest, {
    ref: ref
  }), children);
});
MenuItemLabel.displayName = 'MenuItemLabel';
var MenuItemLabel$1 = MenuItemLabel;

var _excluded$1x = ["children"];
var getIconSize$3 = function getIconSize(sizeName) {
  switch (sizeName) {
    case Size$2.Md:
      return 16;
    case Size$2.Sm:
    default:
      return 14;
  }
};
var MenuItemActions = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded$1x);
  return /*#__PURE__*/React.createElement(Styled$B.Actions, _extends({}, rest, {
    ref: ref
  }), children && typeof children === 'function' ? children({
    size: getIconSize$3(rest.size)
  }) : children);
});
MenuItemActions.displayName = 'MenuItemActions';
var MenuItemActions$1 = MenuItemActions;

var _excluded$1w = ["color", "size"];
var CrossOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1w);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 44 44",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M43.3196 40.0403C44.2253 40.9461 44.2253 42.4146 43.3196 43.3204C42.4138 44.2262 40.9453 44.2262 40.0396 43.3204L21.9997 25.2802L3.95952 43.3207C3.05376 44.2264 1.58525 44.2264 0.679494 43.3207C-0.226258 42.4149 -0.226258 40.9464 0.679495 40.0406L18.7197 22.0001L0.679313 3.95941C-0.226437 3.05364 -0.226439 1.5851 0.679314 0.679328C1.58507 -0.226442 3.05358 -0.226443 3.95934 0.679328L21.9997 18.72L40.0398 0.679604C40.9455 -0.226163 42.414 -0.226165 43.3198 0.679605C44.2255 1.58537 44.2255 3.05392 43.3198 3.95969L25.2797 22.0001L43.3196 40.0403Z",
    fill: color
  }));
});
var CrossOutline$1 = CrossOutline;

var sizeHintMixin = _defineProperty(_defineProperty({}, InputSize.Sm, function (_ref) {
  var font = _ref.theme.typography.font;
  return styled.css(font[FontVariant.LabelExtraSmallUp]);
}), InputSize.Md, function (_ref2) {
  var font = _ref2.theme.typography.font;
  return styled.css(font[FontVariant.LabelSmall]);
});

var baseClassName$j = 'FormHint';
var FormHint$2 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$j, 'root')
}).withConfig({
  componentId: "sc-1vu99sv-0"
})(function (_ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? InputSize.Md : _ref$size,
    _ref$$error = _ref.$error,
    $error = _ref$$error === void 0 ? false : _ref$$error,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    theme = _ref.theme;
  return styled.css(["display:flex;align-items:center;color:", ";", " ", ""], $error ? theme.palette[Color.Error] : theme.palette[Color.TextSecondary], disabled && styled.css(["color:", ";"], theme.palette[Color.ButtonDisabledText]), sizeHintMixin[size]);
});
var Styled$z = applyDisplayNames({
  FormHint: FormHint$2
});
var StyledFormHint = Styled$z;

var _excluded$1v = ["error"];
var FormHint = intrinsicComponent$1(function (_ref, ref) {
  var _ref$error = _ref.error,
    error = _ref$error === void 0 ? false : _ref$error,
    rest = _objectWithoutProperties(_ref, _excluded$1v);
  return /*#__PURE__*/React.createElement(StyledFormHint.FormHint, _extends({
    ref: ref,
    $error: error
  }, rest));
});
var FormHint$1 = FormHint;

var _excluded$1u = ["color", "size"];
var Spinner$1 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 28 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1u);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M41.3465 44.355C33.5656 50.7844 22.9687 51.6268 14.3708 47.3665L17.8949 44.4545C24.754 47.117 32.7424 46.1093 38.709 41.1792C44.6755 36.249 47.1546 28.6071 45.8085 21.3893L49.3325 18.4773C51.9291 27.6967 49.1274 37.9256 41.3465 44.355Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M36.1749 2.63356L32.6509 5.54555C25.821 2.91828 17.838 3.86187 11.8366 8.82088C5.87009 13.7511 3.42028 21.4282 4.7372 28.6107L1.21311 31.5227C-1.38344 22.3034 1.45314 12.0456 9.19916 5.64502C16.9801 -0.784402 27.5768 -1.62682 36.1749 2.63356Z",
    fill: color
  }));
});
var SpinnerIcon = Spinner$1;

var _excluded$1t = ["color", "size"];
var TwoArrowsRight = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1t);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 12 12",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M5.74299 0.152553C5.95998 -0.056404 6.30528 -0.0498885 6.51424 0.167105C6.7232 0.384099 6.71668 0.7294 6.49969 0.938357L1.43832 5.81227L6.51398 11.0759C6.72309 11.2928 6.71681 11.6381 6.49996 11.8472C6.28311 12.0563 5.9378 12.05 5.7287 11.8332L0.274151 6.1766C0.17369 6.07242 0.118752 5.93258 0.121433 5.78788C0.124113 5.64317 0.184193 5.50547 0.288444 5.40508L5.74299 0.152553Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M10.9549 0.152554C11.1719 -0.0564031 11.5172 -0.0498876 11.7262 0.167106C11.9351 0.3841 11.9286 0.729401 11.7116 0.938357L6.65023 5.81227L11.7259 11.0759C11.935 11.2928 11.9287 11.6381 11.7119 11.8472C11.495 12.0563 11.1497 12.05 10.9406 11.8332L5.48606 6.1766C5.3856 6.07242 5.33067 5.93258 5.33335 5.78788C5.33603 5.64317 5.39611 5.50547 5.50036 5.40508L10.9549 0.152554Z",
    fill: color
  }));
});
var TwoArrowsRight$1 = TwoArrowsRight;

var _excluded$1s = ["color", "size"];
var TwoArrowsLeft = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1s);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 12 12",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M6.25714 11.8474C6.04014 12.0564 5.69484 12.0499 5.48588 11.8329C5.27693 11.6159 5.28344 11.2706 5.50043 11.0616L10.5618 6.18773L5.48614 0.924074C5.27704 0.707224 5.28331 0.361919 5.50016 0.152813C5.71701 -0.0562931 6.06232 -0.0500145 6.27143 0.166835L11.726 5.8234C11.8264 5.92758 11.8814 6.06742 11.8787 6.21212C11.876 6.35683 11.8159 6.49453 11.7117 6.59492L6.25714 11.8474Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M1.04522 11.8474C0.828227 12.0564 0.482925 12.0499 0.273969 11.8329C0.065012 11.6159 0.0715275 11.2706 0.288521 11.0616L5.34989 6.18773L0.274227 0.924074C0.0651226 0.707224 0.0714006 0.361919 0.28825 0.152813C0.5051 -0.0562931 0.850407 -0.0500145 1.05951 0.166835L6.51406 5.8234C6.61452 5.92758 6.66946 6.06742 6.66678 6.21212C6.6641 6.35683 6.60402 6.49453 6.49977 6.59492L1.04522 11.8474Z",
    fill: color
  }));
});
var TwoArrowsLeft$1 = TwoArrowsLeft;

var BadgeColor = {
  Primary: 'primary',
  Secondary: 'secondary',
  White: 'white'
};

var colorBadgeMixin = _defineProperty(_defineProperty(_defineProperty({}, BadgeColor.Primary, function (_ref) {
  var palette = _ref.theme.palette;
  return styled.css(["background-color:", ";color:", ";"], palette[Color.AccentPrimary], palette[Color.ButtonPrimaryText]);
}), BadgeColor.White, function (_ref2) {
  var palette = _ref2.theme.palette;
  return styled.css(["background-color:", ";color:", ";"], palette[Color.ButtonPrimaryText], palette[Color.AccentPrimary]);
}), BadgeColor.Secondary, function (_ref3) {
  var palette = _ref3.theme.palette;
  return styled.css(["background-color:", ";color:", ";"], palette[Color.Accent_1_2_Opacity], palette[Color.TextPrimary]);
});

var baseClassName$i = 'Badge';
var defaultSize = 20;
var BadgeRoot = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$i, 'root')
}).withConfig({
  componentId: "sc-1rfm40m-0"
})(["position:relative;display:inline-flex;flex-shrink:0;vertical-align:middle;"]);
var Badge$3 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$i)
}).withConfig({
  componentId: "sc-1rfm40m-1"
})(function (_ref) {
  var size = _ref.size,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'secondary' : _ref$color,
    fontSize = _ref.fontSize,
    _ref$padding = _ref.padding,
    padding = _ref$padding === void 0 ? '0 6px' : _ref$padding,
    inline = _ref.inline;
  return styled.css(["", " display:flex;flex-wrap:wrap;flex-direction:row;justify-content:center;align-items:center;align-content:center;height:", "px;min-width:", "px;line-height:1;padding:", ";font-size:", ";box-sizing:border-box;transition:transform 225ms cubic-bezier(0.4,0,0.2,1) 0ms;border-radius:", "px;z-index:1;", ""], inline ? '' : 'position: absolute;', size || defaultSize, size || defaultSize, typeof padding === 'number' ? "".concat(padding, "px") : padding, typeof fontSize === 'number' ? "".concat(fontSize, "px") : fontSize, (size || defaultSize) / 2, colorBadgeMixin[color]);
});
var Styled$y = applyDisplayNames({
  BadgeRoot: BadgeRoot,
  Badge: Badge$3
});
var StyledBadge = Styled$y;

var _excluded$1r = ["color", "inline", "badgeContent"];
var Badge$1 = intrinsicComponent$1(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? BadgeColor.Secondary : _ref$color,
    _ref$inline = _ref.inline,
    inline = _ref$inline === void 0 ? false : _ref$inline,
    badgeContent = _ref.badgeContent,
    rest = _objectWithoutProperties(_ref, _excluded$1r);
  return /*#__PURE__*/React.createElement(StyledBadge.BadgeRoot, {
    ref: ref
  }, /*#__PURE__*/React.createElement(StyledBadge.Badge, _extends({
    color: color,
    inline: inline,
    badgeContent: badgeContent
  }, rest), badgeContent));
});
var Badge$2 = Badge$1;

var ButtonType = {
  Default: 'default',
  Sidebar: 'sidebar'
};

var SideBarType = {
  Left: 'left',
  Right: 'right'
};

var getIconSize$2 = function getIconSize(sizeName) {
  switch (sizeName) {
    case ButtonSize.Lg:
      return 18;
    case ButtonSize.Md:
      return 16;
    case ButtonSize.Sm:
      return 14;
    case ButtonSize.Xs:
      return 12;
    default:
      return 16;
  }
};
var getSideBarIconSize = function getSideBarIconSize(sizeName) {
  switch (sizeName) {
    case ButtonSize.Lg:
      return 12;
    case ButtonSize.Md:
      return 11;
    case ButtonSize.Sm:
      return 10;
    default:
      return 11;
  }
};

var _colorButtonMixin;
var colorButtonMixin$1 = (_colorButtonMixin = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_colorButtonMixin, ButtonColor.Primary, function (_ref) {
  var palette = _ref.theme.palette,
    active = _ref.active;
  return styled.css(["background-color:", ";color:", ";", "{color:", ";background:transparent;}&:hover{background-color:", ";}&:active{background-color:", ";}", " &:disabled{color:", ";background:", ";cursor:default;", "{color:", ";background:transparent;}}"], palette[Color.AccentStateless], palette[Color.ButtonPrimaryText], StyledBadge.Badge, palette[Color.ButtonPrimaryText], palette[Color.AccentPrimaryHover], palette[Color.AccentPrimaryActive], active && styled.css(["background-color:", ";&:hover,&:focus{background-color:", ";}"], palette[Color.AccentPrimaryActive], palette[Color.AccentPrimaryActive]), palette[Color.BordersDisabled], palette[Color.Accent_1_2_Opacity], StyledBadge.Badge, palette[Color.BordersDisabled]);
}), ButtonColor.Secondary, function (_ref2) {
  var palette = _ref2.theme.palette,
    active = _ref2.active;
  return styled.css(["background-color:", ";color:", ";border:1px solid ", ";", "{color:", ";background:transparent;}&:hover{color:", ";background-color:", ";", "{color:", ";}}&:focus{color:", ";background-color:", ";border:1px solid ", ";", "{color:", ";}}&:active{color:", ";background-color:", ";", "{color:", ";}}", " &:disabled{color:", ";background:", ";border:none;cursor:default;", "{color:", ";}}"], palette[Color.BackgroundStateless], palette[Color.AccentStateless], palette[Color.AccentStateless], StyledBadge.Badge, palette[Color.AccentStateless], palette[Color.ButtonPrimaryText], palette[Color.AccentPrimaryHover], StyledBadge.Badge, palette[Color.ButtonPrimaryText], palette[Color.AccentPrimaryActive], palette[Color.Accent_1_2_Opacity], palette[Color.AccentPrimaryActive], StyledBadge.Badge, palette[Color.AccentPrimaryActive], palette[Color.ButtonPrimaryText], palette[Color.AccentPrimaryActive], StyledBadge.Badge, palette[Color.ButtonPrimaryText], active && styled.css(["color:", ";background-color:", ";", "{color:", ";}&:hover,&:focus{color:", ";background-color:", ";", "{color:", ";}}"], palette[Color.ButtonPrimaryText], palette[Color.AccentPrimaryActive], StyledBadge.Badge, palette[Color.ButtonPrimaryText], palette[Color.ButtonPrimaryText], palette[Color.AccentPrimaryActive], StyledBadge.Badge, palette[Color.ButtonPrimaryText]), palette[Color.BordersDisabled], palette[Color.Accent_1_2_Opacity], StyledBadge.Badge, palette[Color.BordersDisabled]);
}), ButtonColor.Basic, function (_ref3) {
  var palette = _ref3.theme.palette,
    active = _ref3.active;
  return styled.css(["background-color:transparent;border:1px solid ", ";color:", ";", "{background-color:transparent;color:", ";}&:hover{background-color:", ";color:", ";", "{color:", ";}}&:active{background-color:", ";color:", ";", "{color:", ";}}", " &:disabled{background-color:", ";color:", ";cursor:default;border:none;", "{color:", ";}}"], palette[Color.BordersButton], palette[Color.LinkStateless], StyledBadge.Badge, palette[Color.LinkStateless], palette[Color.BackgroundHover], palette[Color.LinkHover], StyledBadge.Badge, palette[Color.LinkHover], palette[Color.BackgroundActive], palette[Color.LinkHover], StyledBadge.Badge, palette[Color.LinkHover], active && styled.css(["background-color:", ";color:", ";", "{color:", ";}&:hover,&:focus{background-color:", ";color:", ";}"], palette[Color.BackgroundActive], palette[Color.LinkHover], StyledBadge.Badge, palette[Color.LinkHover], palette[Color.BackgroundActive], palette[Color.LinkHover]), palette[Color.Accent_1_2_Opacity], palette[Color.BordersDisabled], StyledBadge.Badge, palette[Color.BordersDisabled]);
}), ButtonColor.LinkPrimary, function (_ref4) {
  var palette = _ref4.theme.palette,
    active = _ref4.active;
  return styled.css(["color:", ";background-color:transparent;padding:0px !important;&:hover{background-color:transparent;color:", ";}&:active{color:", ";}", " &:disabled{background-color:transparent;color:", ";cursor:default;}"], palette[Color.AccentStateless], palette[Color.AccentPrimaryHover], palette[Color.AccentPrimaryActive], active && styled.css(["color:", ";&:hover,&:focus{color:", ";"], palette[Color.AccentPrimaryActive], palette[Color.AccentPrimaryActive]), palette[Color.BordersDisabled]);
}), ButtonColor.LinkSecondary, function (_ref5) {
  var palette = _ref5.theme.palette,
    active = _ref5.active;
  return styled.css(["color:", ";background-color:transparent;padding:0px !important;&:hover{background-color:transparent;color:", ";}&:active{color:", ";}", " &:disabled{background-color:transparent;color:", ";cursor:default;}"], palette[Color.LinkStateless], palette[Color.AccentPrimaryHover], palette[Color.AccentPrimaryActive], active && styled.css(["color:", ";&:hover,&:focus{color:", ";}"], palette[Color.AccentPrimaryActive], palette[Color.AccentPrimaryActive]), palette[Color.BordersDisabled]);
}), ButtonColor.LinkBasicPrimary, function (_ref6) {
  var palette = _ref6.theme.palette,
    active = _ref6.active;
  return styled.css(["color:", ";background-color:transparent;padding:0px !important;&:hover{background-color:transparent;color:", ";}&:active{color:", ";}", " &:disabled{background-color:transparent;color:", ";cursor:default;}"], palette[Color.AccentStateless], palette[Color.AccentPrimaryHover], palette[Color.AccentPrimaryActive], active && styled.css(["color:", ";&:hover,&:focus{color:", ";}"], palette[Color.AccentPrimaryActive], palette[Color.AccentPrimaryActive]), palette[Color.BordersDisabled]);
}), ButtonColor.LinkBasicSecondary, function (_ref7) {
  var palette = _ref7.theme.palette,
    active = _ref7.active;
  return styled.css(["color:", ";background-color:transparent;padding:0px !important;&:hover{background-color:transparent;color:", ";}&:active{color:", ";}", " &:disabled{background-color:transparent;color:", ";cursor:default;}"], palette[Color.LinkStateless], palette[Color.AccentPrimaryHover], palette[Color.AccentPrimaryActive], active && styled.css(["color:", ";&:hover,&:focus{color:", ";}"], palette[Color.AccentPrimaryActive], palette[Color.AccentPrimaryActive]), palette[Color.BordersDisabled]);
}), ButtonColor.ErrorPrimary, function (_ref8) {
  var palette = _ref8.theme.palette,
    active = _ref8.active;
  return styled.css(["background-color:", ";color:", ";", "{color:", ";background:transparent;}&:hover{background-color:", ";}&:active{background-color:", ";}", " &:disabled{background-color:", ";color:", ";cursor:default;", "{color:", ";background:transparent;}}"], palette[Color.Error], palette[Color.ButtonPrimaryText], StyledBadge.Badge, palette[Color.ButtonPrimaryText], palette[Color.ErrorHover], palette[Color.ErrorActive], active && styled.css(["background-color:", ";&:hover,&:focus{background-color:", ";}"], palette[Color.ErrorActive], palette[Color.ErrorActive]), palette[Color.Accent_1_2_Opacity], palette[Color.BordersDisabled], StyledBadge.Badge, palette[Color.BordersDisabled]);
}), ButtonColor.ErrorSecondary, function (_ref9) {
  var palette = _ref9.theme.palette,
    active = _ref9.active;
  return styled.css(["background-color:", ";color:", ";border:1px solid ", ";", "{color:", ";background-color:transparent;}&:hover{background-color:", ";color:", ";border:none;", "{color:", ";}}&:active{background-color:", ";color:", ";border:none;}", " &:disabled{color:", ";background:", ";border:none;cursor:default;", "{color:", ";}}"], palette[Color.BackgroundStateless], palette[Color.LinkStateless], palette[Color.BordersButton], StyledBadge.Badge, palette[Color.LinkStateless], palette[Color.ErrorHover], palette[Color.ButtonPrimaryText], StyledBadge.Badge, palette[Color.ButtonPrimaryText], palette[Color.ErrorActive], palette[Color.ButtonPrimaryText], active && styled.css(["background-color:", ";color:", ";border:none;&:hover,&:focus{background-color:", ";}"], palette[Color.ErrorActive], palette[Color.ButtonPrimaryText], palette[Color.ErrorActive]), palette[Color.BordersDisabled], palette[Color.Accent_1_2_Opacity], StyledBadge.Badge, palette[Color.BordersDisabled]);
}), ButtonColor.ErrorBasic, function (_ref10) {
  var palette = _ref10.theme.palette,
    active = _ref10.active;
  return styled.css(["color:", ";background-color:transparent;&:hover{color:", ";}&:active{color:", ";}", " &:disabled{color:", ";cursor:default;}"], palette[Color.LinkStateless], palette[Color.ErrorHover], palette[Color.ErrorActive], active && styled.css(["color:", ";&:hover,&:focus{color:", ";}"], palette[Color.ErrorActive], palette[Color.ErrorActive]), palette[Color.BordersDisabled]);
}), _defineProperty(_defineProperty(_defineProperty(_colorButtonMixin, ButtonColor.WarningPrimary, function (_ref11) {
  var palette = _ref11.theme.palette,
    active = _ref11.active;
  return styled.css(["background-color:", ";color:", ";", "{color:", ";background:transparent;}&:hover{background-color:", ";}&:active{background-color:", ";}", " &:disabled{background-color:", ";color:", ";cursor:default;", "{color:", ";background:transparent;}}"], palette[Color.Warning], palette[Color.ButtonPrimaryText], StyledBadge.Badge, palette[Color.ButtonPrimaryText], palette[Color.WarningHover], palette[Color.WarningActive], active && styled.css(["background-color:", ";&:hover,&:focus{background-color:", ";}"], palette[Color.WarningActive], palette[Color.WarningActive]), palette[Color.Accent_1_2_Opacity], palette[Color.BordersDisabled], StyledBadge.Badge, palette[Color.BordersDisabled]);
}), ButtonColor.WarningSecondary, function (_ref12) {
  var palette = _ref12.theme.palette,
    active = _ref12.active;
  return styled.css(["background-color:", ";color:", ";border:1px solid ", ";", "{color:", ";background-color:transparent;}&:hover{background-color:", ";color:", ";border:none;", "{color:", ";}}&:active{background-color:", ";color:", ";border:none;}", " &:disabled{color:", ";background:", ";border:none;cursor:default;", "{color:", ";}}"], palette[Color.BackgroundStateless], palette[Color.LinkStateless], palette[Color.BordersButton], StyledBadge.Badge, palette[Color.LinkStateless], palette[Color.WarningHover], palette[Color.ButtonPrimaryText], StyledBadge.Badge, palette[Color.ButtonPrimaryText], palette[Color.WarningActive], palette[Color.ButtonPrimaryText], active && styled.css(["background-color:", ";color:", ";border:none;", "{color:", ";background-color:transparent;}&:hover,&:focus{background-color:", ";}"], palette[Color.WarningActive], palette[Color.ButtonPrimaryText], StyledBadge.Badge, palette[Color.ButtonPrimaryText], palette[Color.WarningActive]), palette[Color.BordersDisabled], palette[Color.Accent_1_2_Opacity], StyledBadge.Badge, palette[Color.BordersDisabled]);
}), ButtonColor.WarningBasic, function (_ref13) {
  var palette = _ref13.theme.palette,
    active = _ref13.active;
  return styled.css(["color:", ";background-color:transparent;&:hover{color:", ";}&:active{color:", ";}", " &:disabled{color:", ";cursor:default;}"], palette[Color.LinkStateless], palette[Color.WarningHover], palette[Color.WarningActive], active && styled.css(["color:", ";&:hover,&:focus{color:", ";}"], palette[Color.WarningActive], palette[Color.WarningActive]), palette[Color.BordersDisabled]);
}));
var sizeButtonMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, ButtonSize.Xs, styled.css(["padding:5px 10px;"])), ButtonSize.Sm, styled.css(["padding:8px 12px;"])), ButtonSize.Md, styled.css(["padding:11px 16px;"])), ButtonSize.Lg, styled.css(["padding:14px 24px;"]));
var sizeSecondaryButtonMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, ButtonSize.Xs, styled.css(["padding:4px 10px;"])), ButtonSize.Sm, styled.css(["padding:7px 12px;"])), ButtonSize.Md, styled.css(["padding:10px 16px;"])), ButtonSize.Lg, styled.css(["padding:13px 24px;"]));
var sizeSidebarMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, ButtonSize.Xs, styled.css(["padding:5px 10px;"])), ButtonSize.Sm, styled.css(["padding:8px 12px;"])), ButtonSize.Md, styled.css(["padding:11px 14px;"])), ButtonSize.Lg, styled.css(["padding:14px 16px;"]));
var sizeSidebarDividerMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, ButtonSize.Xs, styled.css(["height:14px;"])), ButtonSize.Sm, styled.css(["height:16px;"])), ButtonSize.Md, styled.css(["height:18px;"])), ButtonSize.Lg, styled.css(["height:20px;"]));
var paddingIconLabelMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, ButtonSize.Xs, styled.css(["margin-right:5px;"])), ButtonSize.Sm, styled.css(["margin-right:6px;"])), ButtonSize.Md, styled.css(["margin-right:7px;"])), ButtonSize.Lg, styled.css(["margin-right:8px;"]));
var sizeButtonLabelMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, ButtonSize.Xs, function (_ref14) {
  var font = _ref14.theme.typography.font;
  return styled.css(font[FontVariant.ButtonSmEmphasis]);
}), ButtonSize.Sm, function (_ref15) {
  var font = _ref15.theme.typography.font;
  return styled.css(font[FontVariant.ButtonMdEmphasis]);
}), ButtonSize.Md, function (_ref16) {
  var font = _ref16.theme.typography.font;
  return styled.css(font[FontVariant.ButtonLgEmphasis]);
}), ButtonSize.Lg, function (_ref17) {
  var font = _ref17.theme.typography.font;
  return styled.css(font[FontVariant.ButtonLgUpEmphasis]);
});

var baseClassName$h = 'Button';
var Label$2 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$h, 'Label')
}).withConfig({
  componentId: "sc-lxwit0-0"
})(["display:flex;"]);
var Badge = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$h, 'Badge')
}).withConfig({
  componentId: "sc-lxwit0-1"
})(["display:flex;margin-left:5px;"]);
var Wrapper$1 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$h, 'Body')
}).withConfig({
  componentId: "sc-lxwit0-2"
})(["display:flex;align-items:center;"]);
var Button$2 = /*#__PURE__*/styled.button.attrs({
  className: generateClassNames(baseClassName$h, 'root')
}).withConfig({
  componentId: "sc-lxwit0-3"
})(function (_ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? ButtonColor.Secondary : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? ButtonSize.Md : _ref$size,
    $buttonType = _ref.$buttonType,
    active = _ref.active,
    theme = _ref.theme;
  return styled.css(["display:inline-flex;flex-shrink:0;flex-direction:row;align-items:center;justify-content:center;border-radius:", ";transition:all 100ms ease-out;border:0;cursor:pointer;outline:none;", " ", " ", " ", "{", " ", "}", "{", "}", ""], theme.shape.borderRadius[BorderRadiusSize.Md], $buttonType !== ButtonType.Sidebar && colorButtonMixin$1[color], $buttonType === ButtonType.Sidebar ? sizeSidebarMixin[size] : sizeButtonMixin[size], color === ButtonColor.Secondary && sizeSecondaryButtonMixin[size], Label$2, sizeButtonLabelMixin[size], (color === ButtonColor.LinkBasicPrimary || color === ButtonColor.LinkBasicSecondary) && "font-weight: 400", Badge, sizeButtonLabelMixin[size], $buttonType === ButtonType.Sidebar && styled.css(["background-color:", ";color:", ";border:1px solid ", ";", " ", " &:disabled{color:", ";background:", ";border:none;cursor:default;}"], theme.palette[Color.ButtonPrimaryText], theme.palette[Color.LinkStateless], theme.palette[Color.BordersButton], !active && styled.css(["&:hover{color:", ";background-color:", ";border:none;}&:active{color:", ";background-color:", ";border:none;}"], theme.palette[Color.ButtonPrimaryText], theme.palette[Color.AccentPrimaryHover], theme.palette[Color.ButtonPrimaryText], theme.palette[Color.AccentPrimaryActive]), active && styled.css(["background-color:", ";color:", ";border:1px solid ", ";"], theme.palette[Color.Accent_1_2_Opacity], theme.palette[Color.AccentPrimaryActive], theme.palette[Color.AccentPrimaryActive]), theme.palette[Color.BordersDisabled], theme.palette[Color.AccentPrimaryDisabled]));
});
var StartIcon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$h, 'StartIcon')
}).withConfig({
  componentId: "sc-lxwit0-4"
})(function (_ref2) {
  var $loading = _ref2.$loading,
    _ref2$size = _ref2.size,
    size = _ref2$size === void 0 ? ButtonSize.Md : _ref2$size;
  return styled.css(["display:flex;svg{animation:", ";}", ""], $loading ? 'spinner 1.2s linear infinite' : '1.2s', paddingIconLabelMixin[size]);
});
var SideArrows = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$h, 'SideBar')
}).withConfig({
  componentId: "sc-lxwit0-5"
})(function (_ref3) {
  var $sideBarType = _ref3.$sideBarType;
  return styled.css(["display:flex;", ":12px;"], "margin-".concat($sideBarType === SideBarType.Left ? 'right' : 'left'));
});
var Divider = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$h, 'Divider')
}).withConfig({
  componentId: "sc-lxwit0-6"
})(function (_ref4) {
  var $sideBarType = _ref4.$sideBarType,
    _ref4$size = _ref4.size,
    size = _ref4$size === void 0 ? ButtonSize.Md : _ref4$size;
  return styled.css(["border-left-style:solid;border-width:1px;", " ", ":12px;"], sizeSidebarDividerMixin[size], "margin-".concat($sideBarType === SideBarType.Left ? 'right' : 'left'));
});
var EndIcon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$h, 'EndIcon')
}).withConfig({
  componentId: "sc-lxwit0-7"
})(["display:flex;margin-left:6px;"]);
var Styled$x = applyDisplayNames({
  Button: Button$2,
  Wrapper: Wrapper$1,
  Label: Label$2,
  SideArrows: SideArrows,
  Divider: Divider,
  StartIcon: StartIcon,
  EndIcon: EndIcon,
  Badge: Badge
});
var BStyled = Styled$x;

var _excluded$1q = ["children", "startIcon", "endIcon", "badge", "color", "active", "buttonType", "sideBarType", "size", "loading", "disabled"];
var Button = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    startIcon = _ref.startIcon,
    endIcon = _ref.endIcon,
    badge = _ref.badge,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? ButtonColor.Primary : _ref$color,
    _ref$active = _ref.active,
    active = _ref$active === void 0 ? false : _ref$active,
    _ref$buttonType = _ref.buttonType,
    buttonType = _ref$buttonType === void 0 ? ButtonType.Default : _ref$buttonType,
    _ref$sideBarType = _ref.sideBarType,
    sideBarType = _ref$sideBarType === void 0 ? SideBarType.Left : _ref$sideBarType,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? ButtonSize.Md : _ref$size,
    _ref$loading = _ref.loading,
    loading = _ref$loading === void 0 ? false : _ref$loading,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    rest = _objectWithoutProperties(_ref, _excluded$1q);
  var getSideBarArrows = function getSideBarArrows(props) {
    switch (sideBarType) {
      case SideBarType.Right:
        return active ? /*#__PURE__*/React.createElement(TwoArrowsLeft$1, props) : /*#__PURE__*/React.createElement(TwoArrowsRight$1, props);
      case SideBarType.Left:
        return active ? /*#__PURE__*/React.createElement(TwoArrowsRight$1, props) : /*#__PURE__*/React.createElement(TwoArrowsLeft$1, props);
    }
  };
  var getSideBarSection = function getSideBarSection() {
    var sideBarSection = [/*#__PURE__*/React.createElement(BStyled.SideArrows, {
      key: "arrows",
      $sideBarType: sideBarType
    }, getSideBarArrows({
      size: getSideBarIconSize(size)
    }))];
    var divider = /*#__PURE__*/React.createElement(BStyled.Divider, {
      key: "divider",
      size: size,
      $sideBarType: sideBarType
    });
    if (sideBarType === SideBarType.Right) {
      sideBarSection.unshift(divider);
    } else {
      sideBarSection.push(divider);
    }
    return buttonType === ButtonType.Sidebar && sideBarSection;
  };
  return /*#__PURE__*/React.createElement(BStyled.Button, _extends({
    type: "button",
    $buttonType: buttonType
  }, rest, {
    disabled: loading || disabled,
    color: color,
    active: active,
    size: size,
    ref: ref
  }), sideBarType === SideBarType.Left && getSideBarSection(), /*#__PURE__*/React.createElement(BStyled.Wrapper, null, startIcon && /*#__PURE__*/React.createElement(BStyled.StartIcon, {
    $loading: loading,
    size: size
  }, typeof startIcon === 'function' ? loading ? /*#__PURE__*/React.createElement(SpinnerIcon, {
    size: getIconSize$2(size)
  }) : startIcon({
    size: getIconSize$2(size)
  }) : loading ? /*#__PURE__*/React.createElement(SpinnerIcon, {
    size: getIconSize$2(size)
  }) : startIcon), loading && !startIcon && /*#__PURE__*/React.createElement(BStyled.StartIcon, {
    $loading: loading
  }, /*#__PURE__*/React.createElement(SpinnerIcon, {
    size: getIconSize$2(size)
  })), /*#__PURE__*/React.createElement(BStyled.Label, null, children), endIcon && /*#__PURE__*/React.createElement(BStyled.EndIcon, null, typeof endIcon === 'function' ? endIcon({
    size: getIconSize$2(size)
  }) : endIcon)), sideBarType === SideBarType.Right && getSideBarSection(), badge && /*#__PURE__*/React.createElement(BStyled.Badge, null, /*#__PURE__*/React.createElement(Badge$2, {
    inline: true,
    size: 14,
    padding: "0 1px",
    badgeContent: badge,
    color: color === ButtonColor.Primary ? 'white' : 'secondary'
  })));
});
var Button$1 = Button;

var _excluded$1p = ["color", "size"];
var Undo = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1p);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 40 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M39.5112 31.2036C39.5112 41.568 31.0785 50 20.7148 50H14.0613C12.9587 50 12.0652 49.1066 12.0652 48.004V47.3386C12.0652 46.2359 12.9586 45.3425 14.0613 45.3425H20.7148C28.5107 45.3425 34.8537 38.9995 34.8537 31.2036C34.8537 23.4078 28.5107 17.0648 20.7148 17.0648H8.4394L16.8935 25.5189C17.8015 26.4266 17.8015 27.9042 16.8935 28.8119C16.0124 29.6923 14.479 29.691 13.5999 28.8119L1.17111 16.3828C0.731285 15.943 0.488892 15.3581 0.488892 14.7359C0.488892 14.1142 0.731285 13.529 1.17111 13.0894L13.6006 0.65976C14.4797 -0.220001 16.0144 -0.220001 16.8936 0.65976C17.8016 1.56722 17.8016 3.04511 16.8936 3.95246L8.43951 12.4072H20.7148C31.0785 12.4072 39.5112 20.8395 39.5112 31.2036Z",
    fill: color
  }));
});
var Undo$1 = Undo;

var _excluded$1o = ["color", "size"];
var Redo = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1o);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 40 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M0.98 31.2037C0.98 41.568 9.41216 50 19.7752 50H26.4284C27.5309 50 28.4244 49.1066 28.4244 48.004V47.3386C28.4244 46.2359 27.531 45.3425 26.4284 45.3425H19.7752C11.9798 45.3425 5.6372 38.9995 5.6372 31.2037C5.6372 23.4079 11.9798 17.0648 19.7752 17.0648H32.05L23.5964 25.5189C22.6884 26.4266 22.6884 27.9043 23.5964 28.812C24.4774 29.6924 26.0107 29.6911 26.8897 28.812L39.3178 16.3828C39.7576 15.943 40 15.3582 40 14.736C40 14.1142 39.7576 13.5291 39.3178 13.0895L26.8891 0.659821C26.01 -0.21994 24.4754 -0.21994 23.5962 0.659821C22.6883 1.56728 22.6883 3.04517 23.5962 3.95252L32.0498 12.4073H19.7752C9.41216 12.4073 0.98 20.8396 0.98 31.2037Z",
    fill: color
  }));
});
var Redo$1 = Redo;

var _excluded$1n = ["color", "size"];
var Line = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1n);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M40.1901 7.27549L7.59689 39.8687C6.83412 40.6315 6.83412 41.8681 7.59689 42.6308C8.35965 43.3936 9.59626 43.3936 10.359 42.6308L42.9522 10.0376C43.715 9.27486 43.715 8.03825 42.9522 7.27549C42.1895 6.51272 40.9529 6.51272 40.1901 7.27549Z",
    fill: color
  }));
});
var Line$1 = Line;

var _excluded$1m = ["color", "size"];
var ImageFilters = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1m);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M41.2229 16.7653C41.3215 12.426 39.7436 8.284 36.6864 5.02956C33.6292 1.77513 29.4872 -2.09808e-05 25.0493 -2.09808e-05C20.6114 -2.09808e-05 16.3708 1.77513 13.3136 5.02956C10.2564 8.18538 8.6785 12.3274 8.77712 16.7653C3.45168 19.5266 0 25.1479 0 31.1637C0 37.2781 3.25444 42.6035 8.57988 45.4635C11.0454 46.7455 13.7081 47.4359 16.2722 47.4359C19.3294 47.4359 22.288 46.5483 24.9507 44.8718C29.9803 48.1262 36.0947 48.3234 41.4201 45.4635C46.7456 42.6035 50 37.2781 50 31.1637C50 25.0493 46.6469 19.5266 41.2229 16.7653ZM22.7811 43.0966C18.6391 45.3649 13.7081 45.3649 9.56607 42.998C5.22682 40.5325 2.66272 36.1933 2.66272 31.1637C2.66272 26.43 5.12821 22.0907 9.1716 19.6252C10.1578 24.359 13.3136 28.501 17.6529 30.6706C17.4556 35.4043 19.3294 39.8422 22.7811 43.0966ZM32.1499 27.8106C31.4596 24.5562 29.783 21.499 27.3176 19.2307C30.6706 17.357 34.8126 17.0611 38.4615 18.3432C37.7712 22.2879 35.503 25.7396 32.1499 27.8106ZM20.6114 28.1065C21.3018 25.2465 22.8797 22.6824 25.0493 20.8087C27.5148 22.8797 29.1913 25.8382 29.6844 28.9941C26.7258 30.0789 23.4714 30.0789 20.4142 28.9941C20.4142 28.6982 20.5128 28.4023 20.6114 28.1065ZM25.0493 17.4556C23.57 16.4694 21.8935 15.7791 20.1183 15.3846C19.428 15.1874 18.6391 15.6805 18.5404 16.3708C18.4418 16.7653 18.5404 17.0611 18.7377 17.357C18.9349 17.6528 19.2308 17.8501 19.5266 17.9487C20.7101 18.2446 21.7949 18.639 22.7811 19.2307C20.3156 21.499 18.6391 24.4576 17.9487 27.8106C14.5957 25.7396 12.2288 22.2879 11.6371 18.3432C11.9329 18.2446 12.1302 18.1459 12.426 18.0473C12.7219 17.9487 13.0178 17.7515 13.215 17.357C13.4122 17.0611 13.4122 16.6666 13.3136 16.3708C13.1164 15.6805 12.3274 15.286 11.6371 15.4832C11.5385 15.4832 11.5385 15.4832 11.4398 15.5818C11.8343 8.48124 17.7515 2.6627 25.0493 2.6627C32.3471 2.6627 38.2643 8.38262 38.6588 15.5818C34.0237 14.2012 28.9941 14.8915 25.0493 17.4556ZM29.783 31.7554C29.5858 35.5029 27.9093 39.0532 25.0493 41.5187C22.1893 39.0532 20.4142 35.6016 20.3156 31.7554C23.3728 32.7416 26.7258 32.7416 29.783 31.7554ZM32.4458 30.6706C36.785 28.4023 39.8422 24.359 40.927 19.6252C44.9704 22.0907 47.4359 26.43 47.4359 31.1637C47.4359 36.0947 44.8718 40.5325 40.5325 42.998C36.3905 45.3649 31.4596 45.3649 27.3176 43.0966C30.7692 39.8422 32.643 35.4043 32.4458 30.6706Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M15.5819 14.8915C14.9901 14.9901 14.497 15.5818 14.497 16.1735C14.497 16.8639 15.0888 17.5542 15.8777 17.5542C16.6667 17.5542 17.2584 16.9625 17.2584 16.1735C17.2584 15.7791 17.0611 15.3846 16.7653 15.1874C16.3708 14.9901 15.9763 14.8915 15.5819 14.8915Z",
    fill: color
  }));
});

var _excluded$1l = ["color", "size"];
var Crop$1 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1l);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M5 2.00049C3.34315 2.00049 2 3.34364 2 5.00049V16.7505H5.5V5.50049H16.75V2.00049H5ZM45 2.00049H33.25V5.50049H44.5V16.7505H48V5.00049C48 3.34363 46.6569 2.00049 45 2.00049ZM5.5 33.2505H2V45.0005C2 46.6573 3.34315 48.0005 5 48.0005H16.75V44.5005H5.5V33.2505ZM48 33.2505H44.5V44.5005H33.25V48.0005H45C46.6569 48.0005 48 46.6573 48 45.0005V33.2505Z",
    fill: color
  }));
});

var _excluded$1k = ["color", "size"];
var CropLandscape = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1k);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 53 37",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M4.11841 3.93799V32.063H47.8684V3.93799H4.11841ZM3.49341 0.812988C2.1127 0.812988 0.993408 1.91229 0.993408 3.26835V32.7326C0.993408 34.0887 2.1127 35.188 3.49341 35.188H48.4934C49.8741 35.188 50.9934 34.0887 50.9934 32.7326V3.26835C50.9934 1.91229 49.8741 0.812988 48.4934 0.812988H3.49341Z",
    fill: color
  }));
});

var _excluded$1j = ["color", "size"];
var Resize$1 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1j);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M0.5 0.5H3V2.375H2.375V3H0.5V0.5Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M0.5 21.125H3V21.2693H24.7308V43H24.875V45.5L0.5 45.5001V21.125ZM22.2308 43L3 43.0001V23.7693H22.2308V43Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M43 45.5H45.5V43H43.625V43.625H43V45.5Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M45.5 3V0.5H43V2.375H43.625V3H45.5Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M6.125 0.5V3H9.875V0.5H6.125Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M13.625 0.5V3H17.375V0.5H13.625Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M21.125 0.5V3H24.875V0.5H21.125Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M28.625 0.5V3H32.375V0.5H28.625Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M36.125 0.5V3H39.875V0.5H36.125Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M45.5 6.125H43V9.875H45.5V6.125Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M45.5 13.625H43V17.375H45.5V13.625Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M45.5 21.125H43V24.875H45.5V21.125Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M45.5 28.625H43V32.375H45.5V28.625Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M45.5 36.125H43V39.875H45.5V36.125Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M39.875 45.5V43H36.125V45.5H39.875Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M32.375 45.5V43H28.625V45.5H32.375Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M0.5 17.375H3V13.625H0.5V17.375Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M0.5 9.875H3V6.125H0.5V9.875Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M35.1391 9.23718L26.3209 17.8619C25.8274 18.3446 25.8186 19.136 26.3013 19.6295C26.784 20.1231 27.5754 20.1319 28.069 19.6492L37.1012 10.815V16.9907C37.1012 17.681 37.6609 18.2407 38.3512 18.2407C39.0416 18.2407 39.6012 17.681 39.6012 16.9907V7.98718C39.6012 7.29683 39.0416 6.73718 38.3512 6.73718L29.3477 6.73718C28.6574 6.73718 28.0977 7.29683 28.0977 7.98718C28.0977 8.67754 28.6574 9.23718 29.3477 9.23718L35.1391 9.23718Z",
    fill: color
  }));
});

var _excluded$1i = ["color", "size"];
var Watermark$1 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1i);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M42.1323 0.500031H2.73399C1.42693 0.500031 0.399963 1.527 0.399963 2.83406V43.166C0.399963 44.4731 1.42693 45.5 2.73399 45.5H42.1323C43.4394 45.5 44.4664 44.4731 44.4664 43.166V2.83406C44.4664 1.527 43.4394 0.500031 42.1323 0.500031ZM41.6655 3.30086V25.8942L36.624 21.693C36.1572 21.2262 35.4103 21.2262 34.8502 21.5996L28.595 26.2677L15.5244 11.2365C15.3377 10.9565 14.9643 10.7697 14.5908 10.7697C14.2174 10.7697 13.8439 10.9565 13.5639 11.1432L3.20079 21.693V3.30086H41.6655ZM3.20079 42.6992V39.8984C4.22776 40.3652 5.72154 40.832 7.58876 40.832C9.36262 40.832 10.483 40.2718 11.3232 39.805C12.0701 39.4316 12.5369 39.1515 13.3771 39.2448C14.3108 39.3382 14.8709 39.5249 15.4311 39.805C16.2713 40.0851 17.2049 40.4585 18.9788 40.4585V38.3112C17.6717 38.3112 17.0182 38.0312 16.178 37.7511C15.5244 37.471 14.6842 37.1909 13.5639 37.0975C12.0701 36.9108 11.1365 37.471 10.2962 37.8444C9.54934 38.2179 8.80245 38.5913 7.4954 38.5913C5.06801 38.5913 3.6676 37.7511 3.10743 37.2843V35.0436C4.1344 35.5104 5.62818 35.9772 7.4954 35.9772C9.26926 35.9772 10.3896 35.417 11.2298 34.9502C11.9767 34.5768 12.4435 34.2967 13.2838 34.3901C14.2174 34.4834 14.7776 34.6702 15.3377 34.9502C16.178 35.2303 17.1116 35.6038 18.8854 35.6038V33.4565C17.5784 33.4565 16.9249 33.1764 16.0846 32.8963C15.4311 32.6162 14.5908 32.3361 13.4705 32.2428C11.9767 32.056 11.0431 32.6162 10.2029 32.9897C9.45598 33.3631 8.70909 33.7365 7.40204 33.7365C4.97465 33.7365 3.57424 32.8963 3.01407 32.4295V30.1888C4.04104 30.6556 5.53482 31.1224 7.40204 31.1224C9.1759 31.1224 10.2962 30.5623 11.1365 30.0955C11.8834 29.722 12.3502 29.4419 13.1904 29.5353C14.124 29.6287 14.6842 29.8154 15.2444 30.0955C16.0846 30.3755 17.0182 30.749 18.7921 30.749V28.6017C17.485 28.6017 16.8315 28.3216 15.9912 28.0415C15.3377 27.7614 14.4975 27.4814 13.3771 27.388C11.8834 27.2013 10.9498 27.7614 10.1095 28.1349C9.36262 28.5083 8.61573 28.8818 7.30868 28.8818C4.88129 28.8818 3.48088 28.0415 2.92071 27.5747V25.7075L14.124 14.2241L27.1012 29.0685C27.568 29.6287 28.4083 29.722 28.9684 29.2552L35.4103 24.4004L41.3854 29.4419V42.6058H3.20079V42.6992Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M32.7029 15.7179C35.4103 15.7179 37.651 13.4772 37.651 10.7697C37.651 8.06227 35.4103 5.82161 32.7029 5.82161C29.9954 5.82161 27.7547 8.06227 27.7547 10.7697C27.7547 13.4772 29.9954 15.7179 32.7029 15.7179ZM32.7029 8.15563C34.1966 8.15563 35.317 9.36933 35.317 10.7697C35.317 12.1702 34.1033 13.3838 32.7029 13.3838C31.3025 13.3838 30.0888 12.1702 30.0888 10.7697C30.0888 9.36933 31.2091 8.15563 32.7029 8.15563Z",
    fill: color
  }));
});

var _excluded$1h = ["color", "size"];
var Images = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1h);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M43.4164 5.98527H1.06762C0.533808 5.98527 0 6.53674 0 7.08821V49C0 49.7353 0.533808 50.1029 1.06762 50.1029H43.4164C44.1281 50.1029 44.484 49.7353 44.484 49V7.08821C44.484 6.53674 44.1281 5.98527 43.4164 5.98527ZM35.7651 13.1544C37.9004 13.1544 39.5 15.0809 39.5 17.1029C39.5 19.3088 37.7224 20.6029 35.7651 20.6029C33.8078 20.6029 32 19.125 32 17.1029C31.8221 14.897 33.6299 13.1544 35.7651 13.1544ZM1.9573 45.875C2.13523 45.6912 14.2349 30.9853 16.548 27.8603C16.726 27.4926 17.2598 27.4926 17.4377 27.8603L29.7153 43.4853L35.0534 37.4191C35.4093 37.0514 35.7651 37.2353 35.9431 37.4191L42.5267 45.875H1.9573Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M48.9164 -3.8147e-06H6.74555C6.03381 -3.8147e-06 5.5 0.367643 5.5 1.10294V4.29294H7.5V2.20588H47.6892V39H46.2473V44.1176H48.9164C49.6281 44.1176 49.984 43.75 49.984 43.0147V1.10294C49.984 0.367643 49.6281 -3.8147e-06 48.9164 -3.8147e-06Z",
    fill: color
  }));
});

var _excluded$1g = ["color", "size"];
var Reset = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1g);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 52 52",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M25 0C38.8071 0 50 11.1929 50 25C50 38.807 38.8071 50 25 50C14.111 50 4.854 43.0397 1.42326 33.333C0.963005 32.0312 1.6455 30.603 2.94725 30.143C4.249 29.6828 5.67725 30.365 6.1375 31.667C8.88425 39.4382 16.2957 45 25 45C36.0457 45 45 36.0457 45 25C45 13.9543 36.0457 5 25 5C21.121 5 17.8345 6.40292 14.7095 8.6015C12.6078 10.0803 10.663 11.8526 8.6895 13.75H16.25C17.6308 13.75 18.75 14.8693 18.75 16.25C18.75 17.6307 17.6308 18.75 16.25 18.75H2.5C1.11926 18.75 0 17.6307 0 16.25V2.5C0 1.1193 1.11926 0 2.5 0C3.88075 0 5 1.1193 5 2.5V10.3593C7.12075 8.31457 9.38601 6.23342 11.8325 4.51222C15.5128 1.9229 19.7882 0 25 0Z",
    fill: color
  }));
});

var _excluded$1f = ["color", "size"];
var Text = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1f);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M39.4229 8.89453L39.7891 16.6582H38.8613C38.6823 15.291 38.4382 14.3145 38.1289 13.7285C37.6243 12.7845 36.9489 12.0928 36.1025 11.6533C35.2725 11.1976 34.1738 10.9697 32.8066 10.9697H28.1436V36.2627C28.1436 38.2972 28.3633 39.5667 28.8027 40.0713C29.4212 40.7549 30.3734 41.0967 31.6592 41.0967H32.8066V42H18.7686V41.0967H19.9404C21.3402 41.0967 22.333 40.6735 22.9189 39.8271C23.277 39.3063 23.4561 38.1182 23.4561 36.2627V10.9697H19.4766C17.9303 10.9697 16.8317 11.0837 16.1807 11.3115C15.3343 11.6208 14.61 12.2148 14.0078 13.0938C13.4056 13.9727 13.0475 15.1608 12.9336 16.6582H12.0059L12.3965 8.89453H39.4229Z",
    fill: color
  }));
});
var Text$1 = Text;

var _excluded$1e = ["color", "size"];
var TextAlignLeft = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1e);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 45 29",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M0 1.89502C0 1.20466 0.559644 0.64502 1.25 0.64502H28.75C29.4404 0.64502 30 1.20466 30 1.89502C30 2.58538 29.4404 3.14502 28.75 3.14502H1.25C0.559645 3.14502 0 2.58538 0 1.89502Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M0 14.395C0 13.7047 0.559644 13.145 1.25 13.145H43.75C44.4404 13.145 45 13.7047 45 14.395C45 15.0854 44.4404 15.645 43.75 15.645H1.25C0.559645 15.645 0 15.0854 0 14.395Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M1.25 25.645C0.559644 25.645 0 26.2047 0 26.895C0 27.5854 0.559645 28.145 1.25 28.145H28.75C29.4404 28.145 30 27.5854 30 26.895C30 26.2047 29.4404 25.645 28.75 25.645H1.25Z",
    fill: color
  }));
});

var _excluded$1d = ["color", "size"];
var TextAlignCenter = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1d);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 46 28",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M38 1.50049C38 0.810132 37.4404 0.250488 36.75 0.250488H9.25C8.55964 0.250488 8 0.810132 8 1.50049C8 2.19084 8.55964 2.75049 9.25 2.75049H36.75C37.4404 2.75049 38 2.19084 38 1.50049Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M45.5 14.0005C45.5 13.3101 44.9404 12.7505 44.25 12.7505H1.75C1.05964 12.7505 0.5 13.3101 0.5 14.0005C0.5 14.6908 1.05964 15.2505 1.75 15.2505H44.25C44.9404 15.2505 45.5 14.6908 45.5 14.0005Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M36.75 25.2505C37.4404 25.2505 38 25.8101 38 26.5005C38 27.1908 37.4404 27.7505 36.75 27.7505H9.25C8.55964 27.7505 8 27.1908 8 26.5005C8 25.8101 8.55964 25.2505 9.25 25.2505H36.75Z",
    fill: color
  }));
});

var _excluded$1c = ["color", "size"];
var RotationLeft = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1c);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 45 43",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M2.66027 14.6997L3.59752 14.4437L3.09232 3.93218C3.05918 3.24262 2.47331 2.71049 1.78375 2.74363C1.09419 2.77677 0.562061 3.36263 0.595202 4.05219L1.16041 15.8123C1.19355 16.5018 1.77942 17.034 2.46898 17.0008L14.2291 16.4356C14.9186 16.4025 15.4508 15.8166 15.4176 15.1271C15.3845 14.4375 14.7986 13.9054 14.1091 13.9385L5.48447 14.353C8.23224 7.41077 15.0052 2.50049 22.925 2.50049C33.2802 2.50049 41.6748 10.8951 41.6748 21.2503C41.6748 22.4035 41.5706 23.5324 41.3713 24.6281L43.7968 25.261C44.0449 23.9622 44.1748 22.6214 44.1748 21.2503C44.1748 9.51435 34.6609 0.000488281 22.925 0.000488281C15.0467 0.000488281 8.16974 4.28779 4.50001 10.6566L2.66027 14.6997Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M9.88491 34.708L8.27773 36.6309C8.82614 37.1539 9.40248 37.6479 10.0043 38.1103L11.5276 36.128C10.9528 35.6863 10.4043 35.2121 9.88491 34.708Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M12.3142 39.6567C13.9038 40.5764 15.6235 41.2961 17.439 41.7814L18.0846 39.3662C16.4846 38.9385 14.9685 38.3041 13.5662 37.4928L12.3142 39.6567Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M20.1654 42.3209C21.0738 42.4394 22.0002 42.5005 22.9408 42.5005C23.8815 42.5005 24.8079 42.4394 25.7162 42.3209L25.3929 39.8419C24.5915 39.9465 23.7731 40.0005 22.9408 40.0005C22.1086 40.0005 21.2902 39.9465 20.4888 39.8419L20.1654 42.3209Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M28.4427 41.7814C30.2582 41.2961 31.9779 40.5764 33.5674 39.6567L32.3154 37.4928C30.9132 38.3041 29.397 38.9385 27.7971 39.3662L28.4427 41.7814Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M35.8774 38.1103C37.3494 36.9791 38.6692 35.6594 39.8004 34.1873L37.8181 32.664C36.8193 33.9638 35.6538 35.1292 34.354 36.128L35.8774 38.1103Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M41.3468 31.8773C42.2665 30.2878 42.9862 28.5681 43.4715 26.7526L41.0563 26.107C40.6286 27.707 39.9942 29.2231 39.1829 30.6253L41.3468 31.8773Z",
    fill: color
  }));
});
var RotationLeft$1 = RotationLeft;

var _excluded$1b = ["color", "size"];
var RotationRight = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1b);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("g", {
    clipPath: "url(#clip0)"
  }, /*#__PURE__*/React.createElement("path", {
    d: "M50.2753 26.8064H24.4689L36.5656 14.7096C32.735 11.0806 28.7027 9.66933 23.6624 9.66933C13.3802 9.66933 6.32372 15.3145 3.50118 25.5967L0.275391 24.7903C3.50118 13.0968 11.9689 6.44355 23.6625 6.44355C29.7109 6.44355 34.348 8.25806 38.9851 12.2903L50.2754 1L50.2753 26.8064Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M34.5495 46.3628L33.1382 44.3467C33.743 43.9435 34.3479 43.3386 34.9527 42.9355L36.5656 44.75C35.9608 45.1532 35.3559 45.758 34.5495 46.3628Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M27.2913 49.387C26.6865 49.5886 26.0817 49.5886 25.4768 49.7903L25.0736 47.3709C26.4848 47.1693 27.8962 46.7661 29.3074 46.3628L30.1139 48.5806C29.1058 48.9838 28.2994 49.1854 27.2913 49.387ZM20.4365 49.9919C18.8235 49.7903 17.2107 49.5886 15.5978 48.9838L16.4042 46.766C17.8155 47.1693 19.2268 47.5724 20.6381 47.5724L20.4365 49.9919ZM11.1623 46.9677C9.75104 46.1612 8.33971 45.1532 7.13003 43.9435L8.74296 42.129C9.75104 43.137 10.9607 43.9435 12.372 44.7499L11.1623 46.9677ZM3.90425 40.3144C2.89617 38.9032 2.08974 37.2903 1.6865 35.879L3.90425 35.0726C4.50909 36.4838 5.11393 37.6935 5.92036 38.9032L3.90425 40.3144Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M3.2996 30.0322L0.880241 30.2338C0.678647 29.2257 0.678647 28.4193 0.678647 27.4112H3.09801C3.09801 28.4193 3.2996 29.2258 3.2996 30.0322Z",
    fill: color
  })), /*#__PURE__*/React.createElement("defs", null, /*#__PURE__*/React.createElement("rect", {
    width: "50",
    height: "50",
    fill: "white",
    transform: "translate(0.275391)"
  })));
});
var RotationRight$1 = RotationRight;

var _excluded$1a = ["color", "size"];
var LockOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$1a);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 51 51",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M40.5 20H38V12.5C38 5.6 32.4 0 25.5 0C18.6 0 13 5.6 13 12.5V20H10.5C9.1 20 8 21.1 8 22.5V47.5C8 48.9 9.1 50 10.5 50H40.5C41.9 50 43 48.9 43 47.5V22.5C43 21.1 41.9 20 40.5 20ZM15.5 12.5C15.5 7 20 2.5 25.5 2.5C31 2.5 35.5 7 35.5 12.5V20H15.5V12.5ZM40.5 47.5H10.5V22.5H40.5V47.5Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M24.3 37.3V41.3H26.8V37.3C28.3 36.8 29.3 35.4 29.3 33.8C29.3 31.7 27.6 30 25.5 30C23.4 30 21.7 31.7 21.7 33.8C21.8 35.4 22.8 36.8 24.3 37.3ZM25.5 32.5C26.2 32.5 26.8 33.1 26.8 33.8C26.8 34.5 26.2 35.1 25.5 35.1C24.8 35.1 24.2 34.5 24.2 33.8C24.3 33.1 24.8 32.5 25.5 32.5Z",
    fill: color
  }));
});
var LockOutline$1 = LockOutline;

var _excluded$19 = ["color", "size"];
var UnlockOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$19);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 52 52",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M36.2754 7.5C34.2754 3.1 29.8754 0 24.7754 0C17.8754 0 12.2754 5.6 12.2754 12.5V20H9.77539C8.37539 20 7.27539 21.1 7.27539 22.5V47.5C7.27539 48.9 8.37539 50 9.77539 50H39.7754C41.1754 50 42.2754 48.9 42.2754 47.5V22.5C42.2754 21.1 41.1754 20 39.7754 20H14.7754V12.5C14.7754 7 19.2754 2.5 24.7754 2.5C28.4754 2.5 31.7754 4.5 33.4754 7.6L36.2754 7.5ZM39.7754 47.5H9.77539V22.5H39.7754V47.5Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M24.7754 30C22.6754 30 20.9754 31.7 20.9754 33.7C20.9754 35.3 21.9754 36.7 23.4754 37.2V41.2H25.9754V37.2C27.4754 36.7 28.4754 35.3 28.4754 33.7C28.5754 31.7 26.8754 30 24.7754 30ZM24.7754 35C24.0754 35 23.4754 34.4 23.4754 33.7C23.4754 33 24.0754 32.4 24.7754 32.4C25.4754 32.4 25.9754 33 25.9754 33.7C25.9754 34.4 25.4754 35 24.7754 35Z",
    fill: color
  }));
});
var UnlockOutline$1 = UnlockOutline;

var _excluded$18 = ["color", "size"];
var Point = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$18);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("circle", {
    cx: "25",
    cy: "25",
    r: "8.33333",
    fill: color
  }));
});

var _excluded$17 = ["color", "size"];
var About = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$17);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M42.6793 7.32203C32.916 -2.44013 17.0863 -2.44122 7.32197 7.32203C-2.44128 17.0853 -2.4402 32.915 7.32197 42.6793C17.0852 52.4404 32.9149 52.4415 42.6793 42.6793C52.4414 32.915 52.4403 17.0864 42.6793 7.32203ZM28.2605 35.8705C28.2605 37.6716 26.8007 39.1314 24.9995 39.1314C23.1984 39.1314 21.7386 37.6716 21.7386 35.8705V22.8267C21.7386 21.0256 23.1984 19.5658 24.9995 19.5658C26.8007 19.5658 28.2605 21.0256 28.2605 22.8267V35.8705ZM24.9419 17.2527C23.0636 17.2527 21.8114 15.9222 21.8506 14.2798C21.8114 12.558 23.0636 11.2678 24.98 11.2678C26.8974 11.2678 28.1105 12.5591 28.1507 14.2798C28.1496 15.9222 26.8985 17.2527 24.9419 17.2527Z",
    fill: color
  }));
});

var _excluded$16 = ["color", "size"];
var Warning = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$16);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M48.9856 38.314L31.3034 3.80423C29.9688 1.42247 27.6118 0 24.9985 0C22.3852 0 20.0282 1.42247 18.6936 3.80423C18.6836 3.82245 18.6751 3.84067 18.665 3.8589L1.04158 38.2594C-0.321602 40.6914 -0.347383 43.612 0.971367 46.0713C2.29314 48.5321 4.67439 50 7.345 50H42.5544C45.225 50 47.7041 48.5321 49.0258 46.0713C50.3445 43.6121 50.3188 40.6913 48.9856 38.314ZM22.0659 15.8013C22.0659 14.0842 23.3789 12.6924 24.9985 12.6924C26.6182 12.6924 27.9311 14.0843 27.9311 15.8013V28.2372C27.9311 29.9541 26.6181 31.3462 24.9985 31.3462C23.3789 31.3462 22.0659 29.954 22.0659 28.2372V15.8013ZM24.9985 43.7821C22.5728 43.7821 20.5995 41.6902 20.5995 39.1186C20.5995 36.5471 22.5727 34.4552 24.9985 34.4552C27.4242 34.4552 29.3974 36.5471 29.3974 39.1186C29.3975 41.6901 27.4243 43.7821 24.9985 43.7821Z",
    fill: color
  }));
});

var _excluded$15 = ["color", "size"];
var InfoOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$15);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M25 50C11.2033 50 0 38.7967 0 25C0 11.2033 11.2033 0 25 0C38.7967 0 50 11.2033 50 25C50 38.7967 38.6929 50 25 50ZM25 3.52697C13.1743 3.52697 3.63071 13.1743 3.63071 24.8963C3.63071 36.6183 13.278 46.2656 25 46.2656C36.8257 46.2656 46.3693 36.6183 46.3693 24.8963C46.3693 13.1743 36.8257 3.52697 25 3.52697Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M28.3755 13.125C28.3755 11.3992 26.9765 10 25.2505 10C23.5245 10 22.1255 11.3992 22.1255 13.125C22.1255 14.8516 23.5245 16.25 25.2505 16.25C26.9765 16.25 28.3755 14.8516 28.3755 13.125Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M20.563 38.5H29.938C30.8009 38.5 31.5005 37.8012 31.5005 36.9375C31.5005 36.0746 30.8009 35.375 29.938 35.375H28.3755V20.9375C28.3755 20.0746 27.6759 19.375 26.813 19.375H20.563C19.7001 19.375 19.0005 20.0746 19.0005 20.9375C19.0005 21.8012 19.7001 22.5 20.563 22.5H22.1255V35.375H20.563C19.7001 35.375 19.0005 36.0746 19.0005 36.9375C19.0005 37.8012 19.7001 38.5 20.563 38.5Z",
    fill: color
  }));
});

var _excluded$14 = ["color", "size"];
var ImageOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$14);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M31.3032 17.8662C34.0646 17.8662 36.3032 15.6276 36.3032 12.8662C36.3032 10.1048 34.0646 7.86618 31.3032 7.86618C28.5418 7.86618 26.3032 10.1048 26.3032 12.8662C26.3032 15.6276 28.5418 17.8662 31.3032 17.8662ZM31.3032 15.3662C32.6839 15.3662 33.8032 14.2469 33.8032 12.8662C33.8032 11.4855 32.6839 10.3662 31.3032 10.3662C29.9225 10.3662 28.8032 11.4855 28.8032 12.8662C28.8032 14.2469 29.9225 15.3662 31.3032 15.3662Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M15.9372 15.1063C16.3967 15.0794 16.8338 15.3071 17.075 15.6991L25.0831 28.7141L29.8357 24.4289C30.0935 24.1966 30.4362 24.0818 30.7819 24.1121C31.1276 24.1424 31.4452 24.3151 31.6586 24.5887L40.2822 35.6497C40.5759 36.0264 40.6292 36.5376 40.4196 36.9668C40.21 37.396 39.7741 37.6683 39.2964 37.6683H6.70331C6.2766 37.6683 5.87937 37.4506 5.64974 37.091C5.42011 36.7313 5.38981 36.2794 5.56937 35.8923L14.8765 15.8282C15.0702 15.4106 15.4777 15.1333 15.9372 15.1063ZM16.1652 18.991L8.66108 35.1683H36.7368L30.5126 27.1848L25.6422 31.5761C25.3666 31.8246 24.9947 31.9378 24.6274 31.885C24.26 31.8322 23.9351 31.6189 23.7406 31.3027L16.1652 18.991Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M0.5 3C0.5 1.61929 1.61929 0.5 3 0.5H43C44.3807 0.5 45.5 1.61929 45.5 3V43C45.5 44.3807 44.3807 45.5 43 45.5H3C1.61929 45.5 0.5 44.3807 0.5 43V3ZM3 3H43V43H3V3Z",
    fill: color
  }));
});
var ImageOutline$1 = ImageOutline;

var _excluded$13 = ["color", "size"];
var Custom = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$13);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M0.562515 0.562512H3.68752V2.90626H2.90627V3.68751H0.562515V0.562512ZM0.562515 44.3125V47.4375H3.68752V45.0938H2.90627V44.3125H0.562515ZM44.3125 47.4375H47.4375V44.3125H45.0938V45.0938H44.3125V47.4375ZM47.4375 3.68751V0.562512H44.3125V2.90626H45.0938V3.68751H47.4375ZM7.59376 0.562512V3.68751H12.2813V0.562512H7.59376ZM16.9688 0.562512V3.68751H21.6563V0.562512H16.9688ZM26.3438 0.562512V3.68751H31.0313V0.562512H26.3438ZM35.7188 0.562512V3.68751H40.4063V0.562512H35.7188ZM47.4375 7.59376H44.3125V12.2813H47.4375V7.59376ZM47.4375 16.9688H44.3125V21.6563H47.4375V16.9688ZM47.4375 26.3438H44.3125V31.0313H47.4375V26.3438ZM47.4375 35.7188H44.3125V40.4063H47.4375V35.7188ZM40.4063 47.4375V44.3125H35.7188V47.4375H40.4063ZM31.0313 47.4375V44.3125H26.3438V47.4375H31.0313ZM21.6563 47.4375V44.3125H16.9688V47.4375H21.6563ZM12.2813 47.4375V44.3125H7.59377V47.4375H12.2813ZM0.562515 40.4063H3.68752V35.7188H0.562515V40.4063ZM0.562515 31.0313H3.68752V26.3438H0.562515V31.0313ZM0.562515 21.6563H3.68752V16.9688H0.562515V21.6563ZM0.562515 12.2813H3.68752V7.59376H0.562515V12.2813Z",
    fill: color
  }));
});
var Custom$1 = Custom;

var _excluded$12 = ["color", "size"];
var FlipY$1 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$12);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M37.5001 24.0625C38.2086 24.0625 38.8284 23.5858 39.0102 22.901C39.1921 22.2162 38.8904 21.4948 38.2753 21.1433L3.27531 1.14333C2.79171 0.866989 2.19757 0.868973 1.71583 1.14854C1.23409 1.4281 0.937592 1.94298 0.937592 2.49996V22.5C0.937592 23.3629 1.63715 24.0625 2.50009 24.0625L37.5001 24.0625ZM4.06259 20.9375L4.06259 5.19243L31.6164 20.9375L4.06259 20.9375Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M38.2753 28.8566C38.8904 28.5051 39.1921 27.7837 39.0102 27.0989C38.8284 26.4142 38.2086 25.9375 37.5001 25.9375H35.3126V26.9504L34.5374 27.3933L35.3126 28.75V29.0625H35.4912L36.0878 30.1066L38.2753 28.8566Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M27.3378 35.1066L31.7128 32.6066L30.1624 29.8933L25.7874 32.3933L27.3378 35.1066Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M30.9376 25.9375H26.5626L26.5626 29.0625H30.9376L30.9376 25.9375Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M18.5878 40.1066L22.9628 37.6066L21.4124 34.8933L17.0374 37.3933L18.5878 40.1066Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M22.1876 25.9375H17.8126V29.0625H22.1876V25.9375Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M9.83781 45.1066L14.2128 42.6066L12.6624 39.8933L8.28738 42.3933L9.83781 45.1066Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M13.4376 25.9375H9.0626V29.0625H13.4376V25.9375Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M3.27531 48.8566L5.46281 47.6066L4.06259 45.1562V45H3.97331L3.91238 44.8933L3.72578 45H0.937592V47.5C0.937592 48.0569 1.23409 48.5718 1.71583 48.8514C2.19758 49.1309 2.79171 49.1329 3.27531 48.8566Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M4.6876 25.9375L2.50009 25.9375C1.63715 25.9375 0.937592 26.637 0.937592 27.5V30H4.06259V29.0625H4.6876V25.9375Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M0.937592 35V40L4.06259 40V35H0.937592Z",
    fill: color
  }));
});

var _excluded$11 = ["color", "size"];
var FlipX$1 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$11);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M24.0625 1.93758C24.0625 1.22909 23.5858 0.609274 22.901 0.427427C22.2163 0.245581 21.4949 0.547225 21.1434 1.16237L1.14337 39.2874C0.867028 39.771 0.869012 40.3651 1.14858 40.8468C1.42814 41.3286 1.94302 41.6251 2.5 41.6251H22.5C23.3629 41.6251 24.0625 40.9255 24.0625 40.0626V1.93758ZM20.9375 38.5001H5.19247L20.9375 7.82128V38.5001Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M28.8566 1.16237C28.5051 0.547225 27.7837 0.245581 27.099 0.427428C26.4142 0.609274 25.9375 1.22909 25.9375 1.93758V4.12508H26.9504L27.3934 4.9003L28.75 4.12508H29.0625V3.94651L30.1066 3.34986L28.8566 1.16237Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M35.1066 12.0999L32.6066 7.72486L29.8934 9.2753L32.3934 13.6503L35.1066 12.0999Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M25.9375 8.50008V12.8751H29.0625V8.50008H25.9375Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M40.1066 23.9749L37.6066 19.5999L34.8934 21.1503L37.3934 25.5253L40.1066 23.9749Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M25.9375 20.3751V24.7501H29.0625V20.3751H25.9375Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M45.1066 32.7249L42.6066 28.3499L39.8934 29.9003L42.3934 34.2753L45.1066 32.7249Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M25.9375 29.1251V33.5001H29.0625V29.1251H25.9375Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M48.8566 39.2874L47.6066 37.0999L45.1562 38.5001H45V38.5894L44.8934 38.6503L45 38.8369V41.6251H47.5C48.057 41.6251 48.5719 41.3286 48.8514 40.8468C49.131 40.3651 49.133 39.771 48.8566 39.2874Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M25.9375 37.8751V40.0626C25.9375 40.9255 26.6371 41.6251 27.5 41.6251H30V38.5001H29.0625V37.8751H25.9375Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M35 41.6251H40V38.5001H35V41.6251Z",
    fill: color
  }));
});

var _excluded$10 = ["color", "size"];
var Ellipse = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$10);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 52 52",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M25.2047 46.875C37.2859 46.875 47.0797 37.0812 47.0797 25C47.0797 12.9188 37.2859 3.125 25.2047 3.125C13.1235 3.125 3.32968 12.9188 3.32968 25C3.32968 37.0812 13.1235 46.875 25.2047 46.875ZM25.2047 50C39.0118 50 50.2047 38.8071 50.2047 25C50.2047 11.1929 39.0118 0 25.2047 0C11.3976 0 0.204681 11.1929 0.204681 25C0.204681 38.8071 11.3976 50 25.2047 50Z",
    fill: color
  }));
});
var Ellipse$1 = Ellipse;

var _excluded$$ = ["color", "size"];
var Landscape = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$$);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 51 36",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M4.11841 3.93805V32.063H47.8684V3.93805H4.11841ZM3.49341 0.813049C2.1127 0.813049 0.993408 1.91235 0.993408 3.26841V32.7327C0.993408 34.0887 2.1127 35.188 3.49341 35.188H48.4934C49.8741 35.188 50.9934 34.0887 50.9934 32.7327V3.26841C50.9934 1.91235 49.8741 0.813049 48.4934 0.813049H3.49341Z",
    fill: color
  }));
});
var Landscape$1 = Landscape;

var _excluded$_ = ["color", "size"];
var Stroke = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$_);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M5.50015 7.9997C5.50015 6.61898 6.61944 5.49969 8.00015 5.49969H38.0002C39.3809 5.49969 40.5002 6.61898 40.5002 7.99969V37.9997C40.5002 39.3804 39.3809 40.4997 38.0002 40.4997H8.00015C6.61944 40.4997 5.50015 39.3804 5.50015 37.9997V7.9997ZM8.00015 7.99969H38.0002V37.9997H8.00015V7.99969Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M0.5 3C0.5 1.61929 1.61929 0.5 3 0.5H43C44.3807 0.5 45.5 1.61929 45.5 3V43C45.5 44.3807 44.3807 45.5 43 45.5H3C1.61929 45.5 0.5 44.3807 0.5 43V3ZM3 3H43V43H3V3Z",
    fill: color
  }));
});
var Stroke$1 = Stroke;

var _excluded$Z = ["color", "size"];
var Transparency = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$Z);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M0.166672 0.166664H8.50001V8.5H0.166672V0.166664Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M16.8333 8.5H8.50001V16.8333H0.166672V25.1667H8.50001V33.5H0.166672V41.8333H8.50001V33.5H16.8333V41.8333H25.1667V33.5H33.5V41.8333H41.8333V33.5H33.5V25.1667H41.8333V16.8333H33.5V8.5H41.8333V0.166664H33.5V8.5H25.1667V0.166664H16.8333V8.5ZM16.8333 16.8333V8.5H25.1667V16.8333H16.8333ZM16.8333 25.1667V33.5H25.1667V25.1667H33.5V16.8333H25.1667V25.1667H16.8333ZM16.8333 25.1667H8.50001V16.8333H16.8333V25.1667Z",
    fill: color
  }));
});
var Transparency$1 = Transparency;

var _excluded$Y = ["color", "size"];
var Shadow = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$Y);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M2.95831 0.458374C1.5776 0.458374 0.458313 1.57766 0.458313 2.95837V35.4584C0.458313 36.8391 1.5776 37.9584 2.95831 37.9584H7.54167V43.7917C7.54167 45.8627 9.2206 47.5417 11.2917 47.5417H43.7917C45.8627 47.5417 47.5417 45.8627 47.5417 43.7917V11.2917C47.5417 9.22059 45.8627 7.54166 43.7917 7.54166H37.9583V2.95837C37.9583 1.57766 36.839 0.458374 35.4583 0.458374H2.95831ZM35.4583 2.95837H2.95831L2.95831 35.4584H35.4583V2.95837ZM15.7267 37.9584L10.0417 43.746V37.9584H15.7267ZM11.5135 45.0417L18.4712 37.9584H28.5529L21.4696 45.0417H11.5135ZM24.4159 45.0417H34.2932L45.0417 34.1339V24.0207L37.9583 31.3242V35.4584C37.9583 36.8391 36.839 37.9584 35.4583 37.9584H31.4912C31.4689 37.9859 31.445 38.0126 31.4194 38.0382L24.4159 45.0417ZM45.0417 21.3515L37.9583 28.655V18.9107L45.0417 11.8338V21.3515ZM37.0311 45.0417H43.7917C44.482 45.0417 45.0417 44.482 45.0417 43.7917V36.9124L37.0311 45.0417ZM43.8844 10.045C43.8538 10.0428 43.8229 10.0417 43.7917 10.0417H37.9583V15.9657L43.8844 10.045Z",
    fill: color
  }));
});
var Shadow$1 = Shadow;

var _excluded$X = ["color", "size"];
var RadiusCorner = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$X);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M3 3H23V0.5H3C1.61929 0.5 0.5 1.61929 0.5 3V43C0.5 44.3807 1.61929 45.5 3 45.5H43C44.3807 45.5 45.5 44.3807 45.5 43V23H43V43H3V3Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M45.5 7.25076H43V5.50076C43 5.15718 42.9321 4.83576 42.8113 4.54446L45.1206 3.58682C45.3651 4.17636 45.5 4.82281 45.5 5.50076V7.25076Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M24.75 0.500763V3.00076H28.25V0.500763H24.75Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M31.75 0.500763V3.00076H35.25V0.500763H31.75Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M38.75 0.500763V3.00076H40.5C40.8436 3.00076 41.165 3.06868 41.4563 3.18948L42.414 0.880166C41.8244 0.635694 41.178 0.500763 40.5 0.500763H38.75Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M45.5 10.7508H43V14.2508H45.5V10.7508Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M45.5 17.7508H43V21.2508H45.5V17.7508Z",
    fill: color
  }));
});
var RadiusCorner$1 = RadiusCorner;

var _excluded$W = ["color", "size"];
var Position = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$W);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M9.25008 9.24878H11.7501V10.9675H10.9688V11.7488H9.25008V9.24878Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M9.25008 34.2488V36.7488H11.7501V35.03H10.9688V34.2488H9.25008Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M34.2501 36.7488H36.7501V34.2488H35.0313V35.03H34.2501V36.7488Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M36.7501 11.7488V9.24878H34.2501V10.9675H35.0313V11.7488H36.7501Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M14.4063 9.24878V11.7488H17.8438V9.24878H14.4063Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M21.2813 9.24878V11.7488H24.7188V9.24878H21.2813Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M28.1563 9.24878V11.7488H31.5938V9.24878H28.1563Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M36.7501 14.405H34.2501V17.8425H36.7501V14.405Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M36.7501 21.28H34.2501V24.7175H36.7501V21.28Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M36.7501 28.155H34.2501V31.5925H36.7501V28.155Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M31.5938 36.7488V34.2488H28.1563V36.7488H31.5938Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M24.7188 36.7488V34.2488H21.2813V36.7488H24.7188Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M17.8438 36.7488V34.2488H14.4063V36.7488H17.8438Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M9.25008 31.5925H11.7501V28.155H9.25008V31.5925Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M9.25008 24.7175H11.7501V21.28H9.25008V24.7175Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M9.25008 17.8425H11.7501V14.405H9.25008V17.8425Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M23.0002 26.7497C25.0712 26.7497 26.7502 25.0708 26.7502 22.9997C26.7502 20.9286 25.0712 19.2497 23.0002 19.2497C20.9291 19.2497 19.2502 20.9286 19.2502 22.9997C19.2502 25.0708 20.9291 26.7497 23.0002 26.7497Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M3 0.5C1.61929 0.5 0.5 1.61929 0.5 3V43C0.5 44.3807 1.61929 45.5 3 45.5H43C44.3807 45.5 45.5 44.3807 45.5 43V3C45.5 1.61929 44.3807 0.5 43 0.5H3ZM43 3H3V43H43V3Z",
    fill: color
  }));
});
var Position$1 = Position;

var _excluded$V = ["color", "size"];
var Spacing = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$V);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M4.29986 0.991788C4.78802 0.503633 5.57947 0.503633 6.06763 0.991788L9.367 4.29116C9.85516 4.77932 9.85516 5.57077 9.367 6.05893C8.87885 6.54708 8.08739 6.54708 7.59924 6.05893L6.43374 4.89344V34.0829L7.59924 32.9174C8.08739 32.4293 8.87885 32.4293 9.367 32.9174C9.85516 33.4056 9.85516 34.197 9.367 34.6852L6.06763 37.9846C5.8332 38.219 5.51524 38.3507 5.18371 38.3507C4.85217 38.3507 4.53422 38.219 4.29981 37.9845L1.00084 34.6851C0.512712 34.1969 0.512761 33.4055 1.00095 32.9174C1.48913 32.4292 2.28059 32.4293 2.76871 32.9175L3.93374 34.0827V4.89344L2.76825 6.05893C2.2801 6.54708 1.48864 6.54708 1.00049 6.05893C0.51233 5.57077 0.51233 4.77932 1.00049 4.29116L4.29986 0.991788ZM13.1588 8.34109V1.49725H46.3156V8.34102H43.398V7.19776C43.398 5.54595 42.0562 4.20442 40.4047 4.20442H31.8516V26.0992C31.8516 28.1387 33.5088 29.7957 35.5481 29.7957H36.5137V32.4599H23.01V29.7957H23.9756C26.0151 29.7957 27.6721 28.1387 27.6721 26.0992V4.20448H19.0697C17.418 4.20448 16.0763 5.54604 16.0763 7.19783V8.34109H13.1588ZM46.9995 39.7088C47.4877 39.2207 47.4877 38.4292 46.9995 37.9411L43.7001 34.6417C43.212 34.1535 42.4205 34.1535 41.9324 34.6417C41.4442 35.1298 41.4442 35.9213 41.9324 36.4095L43.0979 37.5749L15.0832 37.5749L16.2484 36.4099C16.7366 35.9218 16.7366 35.1303 16.2485 34.6421C15.7604 34.154 14.9689 34.1539 14.4807 34.642L11.1814 37.941C10.9469 38.1754 10.8152 38.4934 10.8152 38.8249C10.8152 39.1564 10.9469 39.4744 11.1813 39.7088L14.4807 43.0082C14.9688 43.4964 15.7603 43.4964 16.2485 43.0082C16.7366 42.5201 16.7366 41.7286 16.2485 41.2404L15.083 40.0749L43.0979 40.0749L41.9324 41.2404C41.4442 41.7286 41.4442 42.5201 41.9324 43.0082C42.4205 43.4964 43.212 43.4964 43.7001 43.0082L46.9995 39.7088Z",
    fill: color
  }));
});
var Spacing$1 = Spacing;

var _excluded$U = ["color", "size"];
var Padding = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$U);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M13.8334 9.19949C13.8334 8.50914 14.3931 7.94949 15.0834 7.94949H31.3334C32.0238 7.94949 32.5834 8.50914 32.5834 9.19949C32.5834 9.88985 32.0238 10.4495 31.3334 10.4495H15.0834C14.3931 10.4495 13.8334 9.88985 13.8334 9.19949Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M15.0834 35.5496C14.3931 35.5496 13.8334 36.1092 13.8334 36.7996C13.8334 37.4899 14.3931 38.0496 15.0834 38.0496H31.3334C32.0238 38.0496 32.5834 37.4899 32.5834 36.7996C32.5834 36.1092 32.0238 35.5496 31.3334 35.5496H15.0834Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M36.8001 13.4163C37.4905 13.4163 38.0501 13.9759 38.0501 14.6663V30.9163C38.0501 31.6066 37.4905 32.1663 36.8001 32.1663C36.1098 32.1663 35.5501 31.6066 35.5501 30.9163V14.6663C35.5501 13.9759 36.1098 13.4163 36.8001 13.4163Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M10.45 14.6663C10.45 13.9759 9.89038 13.4163 9.20003 13.4163C8.50967 13.4163 7.95003 13.9759 7.95003 14.6663L7.95003 30.9163C7.95003 31.6066 8.50967 32.1663 9.20003 32.1663C9.89038 32.1663 10.45 31.6066 10.45 30.9163L10.45 14.6663Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M3 0.5C1.61929 0.5 0.5 1.61929 0.5 3V43C0.5 44.3807 1.61929 45.5 3 45.5H43C44.3807 45.5 45.5 44.3807 45.5 43V3C45.5 1.61929 44.3807 0.5 43 0.5H3ZM43 3H3V43H43V3Z",
    fill: color
  }));
});
var Padding$1 = Padding;

var _excluded$T = ["color", "size"];
var Polygon = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$T);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M44.103 18.4866L24.0002 3.8811L3.89749 18.4866L11.5761 42.1188H36.4244L44.103 18.4866ZM25.8371 1.35293C24.7418 0.557164 23.2587 0.557162 22.1634 1.35292L2.06066 15.9584C0.96539 16.7542 0.507082 18.1647 0.925439 19.4523L8.604 43.0845C9.02236 44.372 10.2222 45.2438 11.5761 45.2438H36.4244C37.7782 45.2438 38.9781 44.372 39.3965 43.0845L47.075 19.4523C47.4934 18.1647 47.0351 16.7542 45.9398 15.9584L25.8371 1.35293Z",
    fill: color
  }));
});

var _excluded$S = ["color", "size"];
var PolygonSides = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$S);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 48",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M23.0078 29.9669H25.835L24.7803 35.9727H27.4609L28.5156 29.9669H32.2363V27.4473H28.9551L29.6875 23.2872H33.3496V20.7383H30.1416L31.2109 14.6446H28.5303L27.4609 20.7383H24.6191L25.6885 14.6446H23.0225L21.9531 20.7383H18.1006V23.2872H21.499L20.7666 27.4473H17.002V29.9669H20.3271L19.2725 35.9727H21.9531L23.0078 29.9669ZM26.2744 27.4473H23.4473L24.165 23.2872H27.0068L26.2744 27.4473Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M23.5448 0.821208C24.421 0.184598 25.6075 0.184597 26.4837 0.821207L48.4803 16.8026C49.3565 17.4392 49.7231 18.5677 49.3885 19.5977L40.9865 45.4562C40.6518 46.4862 39.692 47.1836 38.6089 47.1836H11.4197C10.3366 47.1836 9.37672 46.4862 9.04204 45.4562L0.640107 19.5977C0.305422 18.5677 0.672067 17.4392 1.54829 16.8026L23.5448 0.821208ZM25.0143 2.84375L47.0108 18.8252L38.6089 44.6836H11.4197L3.01775 18.8252L25.0143 2.84375Z",
    fill: color
  }));
});
var PolygonSides$1 = PolygonSides;

var _excluded$R = ["color", "size"];
var ArrowRight = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$R);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 46 30",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M45.5 15.0005C45.5 15.7079 45.2003 16.3822 44.6753 16.8562L30.8291 29.3562C29.8042 30.2814 28.2234 30.2006 27.2982 29.1758C26.373 28.1509 26.4537 26.57 27.4786 25.6448L36.5 17.5005L3 17.5005C1.61928 17.5005 0.499999 16.3812 0.499999 15.0005C0.499999 13.6198 1.61929 12.5005 3 12.5005L36.5 12.5005L27.4786 4.35618C26.4537 3.43096 26.373 1.85011 27.2982 0.82525C28.2234 -0.199608 29.8042 -0.280382 30.8291 0.644837L44.6753 13.1448C45.2003 13.6189 45.5 14.2931 45.5 15.0005Z",
    fill: color
  }));
});

var _excluded$Q = ["color", "size"];
var FontItalic = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$Q);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M19 48L26.9931 2H31.2019L23.2087 48H19Z",
    fill: color
  }));
});
var FontItalic$1 = FontItalic;

var _excluded$P = ["color", "size"];
var FontBold = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$P);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 14 18",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M0.214966 17.4813V0.518677H6.61123C8.82693 0.518677 10.5075 0.914783 11.653 1.70699C12.7985 2.49144 13.3712 3.64481 13.3712 5.16709C13.3712 5.99814 13.1413 6.7321 12.6814 7.36898C12.2216 7.99809 11.5819 8.46021 10.7625 8.75535C11.699 8.97282 12.4348 9.41164 12.9699 10.0718C13.5133 10.732 13.7851 11.5397 13.7851 12.4951C13.7851 14.1261 13.2249 15.361 12.1045 16.1998C10.9841 17.0386 9.38713 17.4658 7.31357 17.4813H0.214966ZM3.97748 10.0951V14.6736H7.20069C8.08697 14.6736 8.77677 14.4795 9.27007 14.0911C9.77174 13.695 10.0226 13.1513 10.0226 12.4601C10.0226 10.9067 9.1572 10.1184 7.42644 10.0951H3.97748ZM3.97748 7.62528H6.76173C8.65971 7.59421 9.6087 6.89132 9.6087 5.5166C9.6087 4.74769 9.36623 4.19625 8.88128 3.86228C8.4047 3.52054 7.64801 3.34967 6.61123 3.34967H3.97748V7.62528Z",
    fill: color
  }));
});
var FontBold$1 = FontBold;

var _excluded$O = ["color", "size"];
var UploadOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$O);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M17.5911 1.54582C16.7075 0.680052 15.2937 0.680014 14.4101 1.54573L4.05296 11.6925C3.15635 12.5709 3.14159 14.0098 4.01999 14.9064C4.89839 15.8031 6.33733 15.8178 7.23394 14.9394L13.7278 8.57741V30.4419C13.7278 31.6971 14.7454 32.7147 16.0006 32.7147C17.2558 32.7147 18.2733 31.6971 18.2733 30.4419V8.57782L24.766 14.9393C25.6625 15.8178 27.1015 15.8031 27.9799 14.9065C28.8584 14.01 28.8437 12.571 27.9471 11.6926L17.5911 1.54582Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M2.78827 36.5543C1.53308 36.5543 0.515541 37.5719 0.515541 38.827C0.515541 40.0822 1.53308 41.0998 2.78827 41.0998H29.1519C30.4071 41.0998 31.4246 40.0822 31.4246 38.827C31.4246 37.5719 30.4071 36.5543 29.1519 36.5543H2.78827Z",
    fill: color
  }));
});
var UploadOutline$1 = UploadOutline;

var _excluded$N = ["color", "size"];
var ArrowLeftOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$N);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 28 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M26.907 0.71085C25.7493 -0.292553 23.9445 -0.224769 22.8758 0.862251L0.931376 23.1837C-0.0773525 24.2097 -0.0773525 25.7913 0.931376 26.8173L22.8758 49.1388C23.9445 50.2258 25.7493 50.2936 26.907 49.2902C28.0647 48.2868 28.1369 46.5921 27.0683 45.5051L6.90997 25.0005L27.0683 4.49589C28.1369 3.40888 28.0647 1.71425 26.907 0.71085Z",
    fill: color
  }));
});

var _excluded$M = ["color", "size"];
var ArrowRightOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$M);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 28 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M1.09286 0.71085C2.25057 -0.292553 4.05541 -0.224769 5.12407 0.862251L27.0685 23.1837C28.0772 24.2097 28.0772 25.7913 27.0685 26.8173L5.12407 49.1388C4.05541 50.2258 2.25057 50.2936 1.09286 49.2902C-0.0648579 48.2868 -0.137051 46.5921 0.93161 45.5051L21.0899 25.0005L0.93161 4.49589C-0.137051 3.40888 -0.0648579 1.71425 1.09286 0.71085Z",
    fill: color
  }));
});

var _excluded$L = ["color", "size"];
var PlusOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$L);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    xmlns: "http://www.w3.org/2000/svg",
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M22.9167 27.0838L22.9167 41.6672C22.9167 42.8177 23.8494 43.7505 25 43.7505C26.1506 43.7505 27.0833 42.8177 27.0833 41.6672L27.0833 27.0838H41.6667C42.8173 27.0838 43.75 26.1511 43.75 25.0005C43.75 23.8499 42.8173 22.9172 41.6667 22.9172L27.0833 22.9172L27.0833 8.33382C27.0833 7.18323 26.1506 6.25049 25 6.25049C23.8494 6.25049 22.9167 7.18323 22.9167 8.33382L22.9167 22.9172H8.33333C7.18274 22.9172 6.25 23.8499 6.25 25.0005C6.25 26.1511 7.18274 27.0838 8.33333 27.0838H22.9167Z",
    fill: color
  }));
});

var _excluded$K = ["color", "size"];
var ArrowTool = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$K);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M1.04757 38.9503C0.437373 38.3401 0.437373 37.3508 1.04757 36.7406L33.9229 3.86697L23.8354 3.33584C22.9736 3.29047 22.3118 2.5551 22.3572 1.69335C22.4026 0.831601 23.138 0.169794 23.9997 0.215167L37.5909 0.930759C38.3892 0.972794 39.027 1.61063 39.0691 2.40894L39.7846 16.0001C39.83 16.8619 39.1682 17.5972 38.3065 17.6426C37.4447 17.688 36.7093 17.0262 36.664 16.1644L36.1328 6.07651L3.25728 38.9503C2.64708 39.5605 1.65776 39.5605 1.04757 38.9503Z",
    fill: color
  }));
});

var _excluded$J = ["color", "size"];
var MinusOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$J);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 38 6",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M35.835 5.0769L2.16498 5.0769C1.00277 5.0769 0.0606079 4.14726 0.0606079 3.00048C0.060608 1.85371 1.00277 0.924072 2.16498 0.924072L35.835 0.924074C36.9972 0.924074 37.9394 1.85372 37.9394 3.00049C37.9394 4.14726 36.9972 5.0769 35.835 5.0769Z",
    fill: color
  }));
});

var _excluded$I = ["color", "size"];
var Temprature = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$I);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M9.48799 3.125H17.0311L17.0311 24.4063C17.0311 26.6148 18.1889 28.4084 19.5429 29.5401C21.7011 31.3438 23.0656 34.0456 23.0656 37.069C23.0656 42.4847 18.6753 46.875 13.2595 46.875C7.84382 46.875 3.45351 42.4847 3.45351 37.069C3.45351 34.0456 4.81799 31.3438 6.97617 29.5401C8.33021 28.4084 9.48799 26.6148 9.48799 24.4063V3.125ZM20.1561 3.125C20.1561 1.39911 18.757 0 17.0311 0H9.48799C7.7621 0 6.36299 1.39911 6.36299 3.125V24.4063C6.36299 25.4785 5.79482 26.4547 4.97216 27.1423C2.13398 29.5143 0.328506 33.0808 0.328506 37.069C0.328506 44.2106 6.11793 50 13.2595 50C20.4012 50 26.1906 44.2106 26.1906 37.069C26.1906 33.0808 24.3851 29.5143 21.5469 27.1423C20.7243 26.4547 20.1561 25.4785 20.1561 24.4063V3.125ZM35.6715 1.25C35.6715 0.559645 35.1119 0 34.4215 0H28.1715C27.4812 0 26.9215 0.559644 26.9215 1.25C26.9215 1.94036 27.4812 2.5 28.1715 2.5L34.4215 2.5C35.1119 2.5 35.6715 1.94036 35.6715 1.25ZM35.6715 8.24951C35.6715 7.55916 35.1119 6.99951 34.4215 6.99951H28.1715C27.4812 6.99951 26.9215 7.55916 26.9215 8.24951C26.9215 8.93987 27.4812 9.49951 28.1715 9.49951H34.4215C35.1119 9.49951 35.6715 8.93987 35.6715 8.24951ZM34.4215 13.999C35.1119 13.999 35.6715 14.5587 35.6715 15.249C35.6715 15.9394 35.1119 16.499 34.4215 16.499H28.1715C27.4812 16.499 26.9215 15.9394 26.9215 15.249C26.9215 14.5587 27.4812 13.999 28.1715 13.999H34.4215ZM13.2594 43.7501C16.366 43.7501 18.8844 41.2317 18.8844 38.1251C18.8844 35.4037 16.9519 33.1337 14.3844 32.6126V10.3662C14.3844 9.67582 13.8247 9.11617 13.1344 9.11617C12.444 9.11617 11.8844 9.67582 11.8844 10.3662V32.6694C9.44245 33.2829 7.63441 35.4928 7.63441 38.1251C7.63441 41.2317 10.1528 43.7501 13.2594 43.7501Z",
    fill: color
  }));
});

var _excluded$H = ["color", "size"];
var Contrast$1 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$H);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M20.4376 40.6858V38.5625V4.18746V3.31418C10.8133 4.10816 3.25006 12.1708 3.25006 22C3.25006 31.8292 10.8133 39.8918 20.4376 40.6858ZM40.7501 22C40.7501 31.8292 33.1868 39.8918 23.5626 40.6858V38.5625V4.18746V3.31418C33.1868 4.10816 40.7501 12.1708 40.7501 22ZM43.8751 22C43.8751 34.0812 34.0813 43.875 22.0001 43.875C9.91883 43.875 0.125061 34.0812 0.125061 22C0.125061 9.91877 9.91883 0.125 22.0001 0.125C34.0813 0.125 43.8751 9.91877 43.8751 22Z",
    fill: color
  }));
});

var _excluded$G = ["color", "size"];
var FineTune = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$G);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M16.3679 7.50003C15.7995 10.005 13.5592 11.875 10.8823 11.875C8.20528 11.875 5.96506 10.005 5.39665 7.50003H1.5448C0.854444 7.50003 0.2948 6.94039 0.2948 6.25003C0.2948 5.55967 0.854444 5.00003 1.5448 5.00003H5.39665C5.96506 2.49504 8.20528 0.625031 10.8823 0.625031C13.5592 0.625031 15.7995 2.49504 16.3679 5.00003H48.4557C49.1461 5.00003 49.7057 5.55967 49.7057 6.25003C49.7057 6.94039 49.1461 7.50003 48.4557 7.50003H16.3679ZM14.0073 6.25003C14.0073 7.97592 12.6082 9.37503 10.8823 9.37503C9.15637 9.37503 7.75726 7.97592 7.75726 6.25003C7.75726 4.52414 9.15637 3.12503 10.8823 3.12503C12.6082 3.12503 14.0073 4.52414 14.0073 6.25003Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M34.5715 27.625C37.2485 27.625 39.4887 25.755 40.0571 23.25H48.4554C49.1458 23.25 49.7054 22.6904 49.7054 22C49.7054 21.3096 49.1458 20.75 48.4554 20.75H40.0571C39.4887 18.245 37.2485 16.375 34.5715 16.375C31.8946 16.375 29.6543 18.245 29.0859 20.75H1.5448C0.854444 20.75 0.2948 21.3096 0.2948 22C0.2948 22.6904 0.854444 23.25 1.5448 23.25H29.0859C29.6543 25.755 31.8946 27.625 34.5715 27.625ZM34.5715 25.125C36.2974 25.125 37.6965 23.7259 37.6965 22C37.6965 20.2741 36.2974 18.875 34.5715 18.875C32.8456 18.875 31.4465 20.2741 31.4465 22C31.4465 23.7259 32.8456 25.125 34.5715 25.125Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M22.7702 39C22.2018 41.505 19.9615 43.375 17.2845 43.375C14.6076 43.375 12.3673 41.505 11.7989 39H1.5448C0.854444 39 0.2948 38.4403 0.2948 37.75C0.2948 37.0596 0.854444 36.5 1.5448 36.5H11.7989C12.3673 33.995 14.6076 32.125 17.2845 32.125C19.9615 32.125 22.2018 33.995 22.7702 36.5H48.4554C49.1458 36.5 49.7054 37.0596 49.7054 37.75C49.7054 38.4403 49.1458 39 48.4554 39H22.7702ZM20.4095 37.75C20.4095 39.4759 19.0104 40.875 17.2845 40.875C15.5587 40.875 14.1595 39.4759 14.1595 37.75C14.1595 36.0241 15.5587 34.625 17.2845 34.625C19.0104 34.625 20.4095 36.0241 20.4095 37.75Z",
    fill: color
  }));
});

var _excluded$F = ["color", "size"];
var Saturation = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$F);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M37.2341 37.6984H37.5121V37.4237C41.4447 33.4687 43.875 28.0182 43.875 22C43.875 15.9819 41.4447 10.5314 37.5121 6.57632V6.30045H37.2328C33.2942 2.47819 27.9219 0.125031 22 0.125031C9.91877 0.125031 0.125 9.9188 0.125 22C0.125 34.0813 9.91877 43.875 22 43.875C24.718 43.875 27.3203 43.3793 29.7213 42.4733H30.5303V42.1494C33.0389 41.0861 35.308 39.5679 37.2341 37.6984ZM20.4257 3.31519C10.807 4.1148 3.25 12.1749 3.25 22C3.25 31.8252 10.807 39.8853 20.4257 40.6849V3.31519ZM34.3871 36.0759C33.221 37.1029 31.9263 37.9873 30.5303 38.7017V5.29836C31.9263 6.01281 33.221 6.89715 34.3871 7.92411V36.0759ZM37.5121 11.4641C39.5556 14.4669 40.75 18.094 40.75 22C40.75 25.9061 39.5556 29.5332 37.5121 32.536V11.4641ZM23.5507 40.6868C24.8796 40.578 26.1693 40.3307 27.4053 39.9592V4.04089C26.1693 3.66941 24.8796 3.42203 23.5507 3.31324V40.6868Z",
    fill: color
  }));
});

var _excluded$E = ["color", "size"];
var Annotate = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$E);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M46.1442 31.379C45.4585 31.379 44.8974 31.9429 44.8974 32.6321V43.7349C44.8974 45.8025 43.2267 47.4817 41.157 47.4943H6.22156C4.16433 47.4943 2.49361 45.8151 2.48114 43.7349V11.1283C2.48114 9.06067 4.15186 7.38147 6.22156 7.36894H17.2807C17.9665 7.36894 18.5275 6.80503 18.5275 6.1158C18.5275 5.42658 17.9665 4.86267 17.2807 4.86267H6.22156C2.79284 4.8752 0 7.66969 0 11.1283V43.7349C0 47.1935 2.79284 50.0005 6.22156 50.0005H41.157C44.5982 50.0005 47.3786 47.1935 47.3786 43.7474V32.6321C47.391 31.9429 46.83 31.379 46.1442 31.379Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M46.8923 1.65462C44.698 -0.55089 41.157 -0.55089 38.9627 1.65462L16.7571 23.9729C16.6075 24.1233 16.4953 24.3113 16.4329 24.5243L13.5154 35.1258C13.3907 35.5644 13.5154 36.0281 13.8396 36.3413C14.1513 36.6546 14.6251 36.7799 15.049 36.6672L25.5969 33.7348C25.8089 33.6722 25.9959 33.5719 26.1455 33.409L48.3636 11.0782C50.5455 8.87267 50.5455 5.31377 48.3636 3.10826L46.8923 1.65462ZM19.4751 24.7875L37.6535 6.51678L43.5135 12.4065L25.3351 30.6897L19.4751 24.7875ZM18.3031 27.1559L22.9911 31.8677L16.5077 33.6722L18.3031 27.1559ZM46.5931 9.31127L45.2715 10.6396L39.4115 4.74986L40.7331 3.42154C41.9425 2.206 43.9249 2.206 45.1343 3.42154L46.5931 4.88771C47.815 6.11578 47.815 8.09573 46.5931 9.31127Z",
    fill: color
  }));
});

var _excluded$D = ["color", "size"];
var Blur$1 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$D);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M18.3626 41.293C17.5103 41.4285 16.7096 40.8474 16.5742 39.9952C16.4387 39.143 17.0198 38.3423 17.872 38.2068C18.2902 38.1403 18.6988 38.0456 19.0958 37.9246C21.9368 37.059 24.1957 34.8468 25.1254 32.0335C25.2671 31.6049 25.378 31.1621 25.4555 30.7076C25.6005 29.857 26.4076 29.2849 27.2583 29.4299C28.109 29.5749 28.681 30.3821 28.536 31.2327C28.432 31.8429 28.283 32.4379 28.0926 33.0142C26.8449 36.7893 23.8206 39.7519 20.0065 40.914C19.4728 41.0766 18.9239 41.2038 18.3626 41.293Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M33.9356 31.0645C33.9356 23.9644 24.1764 8.59028 19.4747 1.59549C18.2785 -0.184172 15.7216 -0.184172 14.5254 1.59548C9.82374 8.59028 0.0645752 23.9644 0.0645752 31.0645C0.0645752 40.4177 7.64685 48 17.0001 48C26.3533 48 33.9356 40.4177 33.9356 31.0645ZM30.8106 31.0645C30.8106 29.8836 30.375 28.0316 29.4236 25.578C28.5 23.1959 27.1988 20.5159 25.7187 17.7756C22.8106 12.3913 19.3287 6.98743 17.0001 3.51586C14.6715 6.98743 11.1895 12.3913 8.28145 17.7756C6.80135 20.5159 5.50017 23.1959 4.57655 25.578C3.62517 28.0316 3.18958 29.8836 3.18958 31.0645C3.18958 38.6918 9.37274 44.875 17.0001 44.875C24.6274 44.875 30.8106 38.6918 30.8106 31.0645Z",
    fill: color
  }));
});

var _excluded$C = ["color", "size"];
var PinOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$C);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M43.0081 15.2287L36.7869 17.6214L28.935 29.9601C30.5809 33.9266 30.3662 38.0903 27.1408 41.3158L26.5656 41.8909C25.9554 42.5011 24.9661 42.5011 24.3559 41.8909L14.4122 31.9472L2.99211 43.3673C2.38192 43.9775 1.3926 43.9775 0.782403 43.3673C0.17221 42.7571 0.172211 41.7678 0.782403 41.1576L12.2025 29.7375L2.25883 19.7938C1.64864 19.1836 1.64864 18.1943 2.25883 17.5841L2.50512 17.3378C5.73058 14.1123 10.2231 13.5688 14.1897 15.2147L26.5283 7.36283L28.9211 1.14165C29.327 0.0863053 30.6847 -0.201832 31.4843 0.597706L43.552 12.6655C44.3516 13.465 44.0634 14.8228 43.0081 15.2287ZM29.0752 9.44618L30.9747 4.50752L39.6422 13.1751L34.7035 15.0745L25.4251 29.655L26.0486 31.1577C27.234 34.0146 27.0773 36.5309 25.4342 38.5498L5.64209 18.7576C7.75439 17.2384 10.4304 17.0382 12.992 18.1011L14.4948 18.7246L29.0752 9.44618Z",
    fill: color
  }));
});

var _excluded$B = ["color", "size"];
var Duplicate = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$B);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 16 16",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M2.33984 12.111V2.04761C2.33984 1.49532 2.78756 1.04761 3.33984 1.04761H10.8182C11.3705 1.04761 11.8182 1.49532 11.8182 2.04761V12.111C11.8182 12.6633 11.3705 13.111 10.8182 13.111H3.33984C2.78756 13.111 2.33984 12.6633 2.33984 12.111ZM3.33984 12.111V2.04761L10.8182 2.04761L10.8182 12.111L3.33984 12.111Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M13.66 4.97388C13.66 4.69774 13.4361 4.47388 13.16 4.47388C12.8838 4.47388 12.66 4.69774 12.66 4.97388V13.9523H5.40491C5.12876 13.9523 4.90491 14.1761 4.90491 14.4523C4.90491 14.7284 5.12876 14.9523 5.40491 14.9523H13.16C13.4361 14.9523 13.66 14.7284 13.66 14.4523V4.97388Z",
    fill: color
  }));
});
var Duplicate$1 = Duplicate;

var _excluded$A = ["color", "size"];
var DeleteOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$A);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M17.8571 19.6429C17.8571 18.6566 18.6566 17.8571 19.6429 17.8571C20.6291 17.8571 21.4286 18.6566 21.4286 19.6429L21.4286 37.5C21.4286 38.4862 20.6291 39.2857 19.6429 39.2857C18.6566 39.2857 17.8571 38.4862 17.8571 37.5L17.8571 19.6429Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M30.3571 17.8571C29.3709 17.8571 28.5714 18.6566 28.5714 19.6429L28.5714 37.5C28.5714 38.4862 29.3709 39.2857 30.3571 39.2857C31.3434 39.2857 32.1429 38.4862 32.1429 37.5V19.6429C32.1429 18.6566 31.3434 17.8571 30.3571 17.8571Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M14.2857 7.14286V3.57143C14.2857 1.59898 15.8847 0 17.8571 0H32.1429C34.1153 0 35.7143 1.59898 35.7143 3.57143V7.14286H48.2143C49.2005 7.14286 50 7.94235 50 8.92857C50 9.91479 49.2005 10.7143 48.2143 10.7143H44.6429V46.4286C44.6429 48.401 43.0439 50 41.0714 50H8.92857C6.95613 50 5.35714 48.401 5.35714 46.4286V10.7143L1.78571 10.7143C0.799491 10.7143 0 9.91479 0 8.92857C0 7.94235 0.799492 7.14286 1.78571 7.14286H14.2857ZM17.8571 3.57143H32.1429V7.14286H17.8571V3.57143ZM8.92857 10.7143L8.92857 46.4286H41.0714V10.7143H8.92857Z",
    fill: color
  }));
});
var DeleteOutline$1 = DeleteOutline;

var _excluded$z = ["color", "size"];
var CropFrame = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$z);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M43 3H31.75V0.5H43C44.3807 0.5 45.5 1.61929 45.5 3V14.25H43V3Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M3 14.25V3H14.25V0.5H3C1.61929 0.5 0.5 1.61929 0.5 3V14.25H3Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M0.5 31.75V43C0.5 44.3807 1.61929 45.5 3 45.5H14.25V43H3V31.75H0.5Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M43 31.75H45.5V43C45.5 44.3807 44.3807 45.5 43 45.5H31.75V43H43V31.75Z",
    fill: color
  }));
});

var _excluded$y = ["color", "size"];
var Portrait = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$y);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 36 52",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M32.0559 46.8755L32.0559 3.12555L3.93091 3.12555L3.93091 46.8755H32.0559ZM35.1809 3.12555C35.1809 1.39966 33.7818 0.000549316 32.0559 0.000549316H3.93091C2.20502 0.000549316 0.805908 1.39966 0.805908 3.12555V46.8755C0.805908 48.6014 2.20502 50.0005 3.93091 50.0005H32.0559C33.7818 50.0005 35.1809 48.6014 35.1809 46.8755L35.1809 3.12555Z",
    fill: color
  }));
});
var Portrait$1 = Portrait;

var _excluded$x = ["color", "size"];
var WarningOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$x);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M45.961 39.0119L28.2837 7.27185C27.5934 6.17538 26.3971 5.5 24.9981 5.5C23.5956 5.5 22.3967 6.17887 21.7073 7.28034L4.06571 38.9613L4.03009 39.0197C3.33595 40.159 3.32316 41.4697 3.9939 42.6216C4.67405 43.786 5.89 44.5 7.34459 44.5H42.554C44.0596 44.5 45.3464 43.7436 46.0016 42.6231C46.6817 41.4564 46.652 40.1455 45.9968 39.0706L45.961 39.0119ZM49.0254 44.3856C47.7038 46.6495 45.2246 48 42.554 48H7.34459C4.67398 48 2.29272 46.6495 0.970942 44.3856C-0.347811 42.1231 -0.322029 39.4361 1.04116 37.1987L18.6646 5.55018C18.6697 5.5418 18.6743 5.53342 18.6789 5.52504C18.6836 5.51666 18.6882 5.50828 18.6932 5.49989C20.0278 3.30867 22.3849 2 24.9981 2C27.6114 2 29.9685 3.30867 31.303 5.49989L48.9853 37.2489C50.3185 39.436 50.3442 42.1232 49.0254 44.3856Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M22.0001 16C22.0001 14.3431 23.3433 13 25.0001 13C26.657 13 28.0001 14.3431 28.0001 16V28C28.0001 29.6569 26.657 31 25.0001 31C23.3433 31 22.0001 29.6569 22.0001 28V16Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M28.0001 37C28.0001 38.6569 26.657 40 25.0001 40C23.3433 40 22.0001 38.6569 22.0001 37C22.0001 35.3431 23.3433 34 25.0001 34C26.657 34 28.0001 35.3431 28.0001 37Z",
    fill: color
  }));
});

var _excluded$w = ["color", "size"];
var Error$1 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$w);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 21 21",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M10.5 20.5001C16.0228 20.5001 20.5 16.023 20.5 10.5001C20.5 4.97727 16.0228 0.500122 10.5 0.500122C4.97715 0.500122 0.5 4.97727 0.5 10.5001C0.5 16.023 4.97715 20.5001 10.5 20.5001ZM15.4375 7.0912L11.8155 10.7132L15.4638 14.309C15.6213 14.4665 15.7 14.6503 15.7 14.8865C15.7 15.1227 15.6213 15.3064 15.4638 15.4639C15.3063 15.6214 15.1226 15.7001 14.8864 15.7001C14.6501 15.7001 14.4664 15.6214 14.3089 15.4639L10.6869 11.8419L7.06483 15.4639C6.77612 15.7789 6.25118 15.7789 5.93622 15.4639C5.77874 15.3064 5.7 15.0964 5.7 14.8865C5.7 14.6765 5.77874 14.4928 5.93622 14.3353L9.55827 10.7132L5.93622 7.0912C5.77874 6.93372 5.7 6.72374 5.7 6.51377C5.7 6.3038 5.77874 6.12007 5.93622 5.96259C6.25118 5.64763 6.74987 5.64763 7.06483 5.96259L10.6869 9.58464L14.3089 5.93634C14.5976 5.62138 15.1226 5.62138 15.4375 5.93634C15.595 6.09382 15.6738 6.27755 15.6738 6.51377C15.6738 6.74999 15.595 6.93372 15.4375 7.0912Z",
    fill: color
  }));
});

var _excluded$v = ["color", "size"];
var ErrorOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$v);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 52 52",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M37.3438 16.4782L28.2887 25.5333L37.4095 34.5228C37.8032 34.9165 38 35.3758 38 35.9664C38 36.5569 37.8032 37.0162 37.4095 37.4099C37.0158 37.8036 36.5564 38.0005 35.9659 38.0005C35.3753 38.0005 34.916 37.8036 34.5223 37.4099L25.4672 28.3548L16.4121 37.4099C15.6903 38.1973 14.378 38.1973 13.5906 37.4099C13.1969 37.0162 13 36.4913 13 35.9664C13 35.4414 13.1969 34.9821 13.5906 34.5884L22.6457 25.5333L13.5906 16.4782C13.1969 16.0845 13 15.5595 13 15.0346C13 14.5097 13.1969 14.0504 13.5906 13.6567C14.378 12.8693 15.6247 12.8693 16.4121 13.6567L25.4672 22.7118L34.5223 13.591C35.2441 12.8036 36.5564 12.8036 37.3438 13.591C37.7375 13.9847 37.9344 14.4441 37.9344 15.0346C37.9344 15.6252 37.7375 16.0845 37.3438 16.4782Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M-0.000488281 25.0005C-0.000488281 38.7972 11.2028 50.0005 24.9995 50.0005C38.6925 50.0005 49.9995 38.7972 49.9995 25.0005C49.9995 11.2038 38.7962 0.000488281 24.9995 0.000488281C11.2028 0.000488281 -0.000488281 11.2038 -0.000488281 25.0005ZM3.63022 24.8968C3.63022 13.1748 13.1738 3.52746 24.9995 3.52746C36.8252 3.52746 46.3688 13.1748 46.3688 24.8968C46.3688 36.6187 36.8252 46.266 24.9995 46.266C13.2775 46.266 3.63022 36.6187 3.63022 24.8968Z",
    fill: color
  }));
});

var _excluded$u = ["color", "size"];
var Loading = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$u);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M29.9338 5.26853C27.8524 4.75154 25.7006 4.56814 23.5381 4.72351C22.4874 4.799 21.4379 4.95535 20.4183 5.18855L19.3724 0.636496C20.6245 0.350265 21.9128 0.158175 23.2017 0.065597C25.8579 -0.125223 28.5034 0.100753 31.0653 0.737277L29.9338 5.26853Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    opacity: "0.9",
    d: "M40.6131 11.9278C38.5498 9.48098 35.9044 7.52805 32.963 6.2805L34.7952 1.98303C38.4106 3.51633 41.6615 5.91575 44.1962 8.922L40.6131 11.9278Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    opacity: "0.8",
    d: "M45.3329 23.5739L45.3303 23.5392C45.097 20.3085 44.1359 17.275 42.4734 14.5227L46.4838 12.1129C48.5302 15.501 49.7133 19.2325 50 23.2036L45.3329 23.5739Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    opacity: "0.7",
    d: "M46.2688 38.2308L42.2981 35.7565C43.9958 33.0458 45.0372 29.9357 45.3095 26.7618L49.9744 27.1604C49.639 31.0674 48.3577 34.8958 46.2688 38.2308Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    opacity: "0.6",
    d: "M34.4209 48.1735L32.6626 43.8456C35.6192 42.6505 38.2938 40.7405 40.3975 38.3222L43.9338 41.3828C41.3483 44.3551 38.0588 46.7033 34.4209 48.1735V48.1735Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    opacity: "0.5",
    d: "M26.8033 49.9345C24.1593 50.1242 21.5262 49.9011 18.9766 49.2716L20.1013 44.7386C22.1729 45.25 24.3148 45.4309 26.4673 45.2766C27.5283 45.2004 28.5879 45.0416 29.6165 44.8049L30.6697 49.3551C29.4061 49.6459 28.1052 49.841 26.8033 49.9345V49.9345Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    opacity: "0.4",
    d: "M15.2449 48.0311C11.6272 46.5033 8.37276 44.1086 5.83362 41.1063L9.412 38.0952C11.479 40.5388 14.1272 42.4877 17.0704 43.7306L15.2449 48.0311Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    opacity: "0.3",
    d: "M3.54069 37.9198C1.48217 34.5223 0.292537 30.78 0.00479729 26.7959L0 26.7274L4.66972 26.3918L4.67579 26.478C4.90861 29.7017 5.87511 32.7443 7.54751 35.504L3.54069 37.9198Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    opacity: "0.2",
    d: "M4.69761 23.2075L0.0335693 22.802C0.374666 18.8955 1.66191 15.0691 3.75587 11.7373L7.72274 14.2175C6.02088 16.9257 4.97478 20.0344 4.69761 23.2075V23.2075Z",
    fill: color
  }));
});

var _excluded$t = ["color", "size"];
var ColorPicker$2 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$t);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 42 42",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M42.0001 6.11477C42.0001 4.48089 41.3639 2.94468 40.2086 1.78931C37.8238 -0.595528 33.9433 -0.595878 31.5582 1.78931L25.666 7.68191L22.9908 5.00654C22.5351 4.5509 21.7965 4.5509 21.3407 5.00654L17.8405 8.50695C17.3849 8.96259 17.3849 9.70141 17.8405 10.1572L20.5157 12.8325L3.63971 29.7097C3.5116 29.8378 3.41511 29.9939 3.35783 30.1658L2.27826 33.4048L1.30626 34.3769C-0.435198 36.1186 -0.435314 38.9525 1.30626 40.6943C3.04783 42.436 5.88157 42.4359 7.62314 40.6943L8.59514 39.7223L11.834 38.6426C12.0058 38.5853 12.1619 38.4888 12.29 38.3607L29.1661 21.4835L31.8413 24.1588C32.297 24.6145 33.0357 24.6145 33.4914 24.1588L36.9916 20.6584C37.4472 20.2028 37.4472 19.464 36.9916 19.0082L34.3164 16.3328L40.2086 10.4402C41.3639 9.28486 42.0001 7.74876 42.0001 6.11477ZM20.5157 26.8341H9.81507L22.1658 14.4826L27.516 19.8333L20.5157 26.8341ZM32.6663 21.6836L20.3156 9.332L22.1657 7.48168L34.5163 19.8333L32.6663 21.6836ZM38.5585 8.79014L32.6663 14.6827L27.316 9.332L33.2081 3.4394C34.6833 1.96421 37.0835 1.96409 38.5584 3.4394C40.0263 4.84774 40.0261 7.3818 38.5585 8.79014Z",
    fill: color
  }));
});
var ColorPickerIcon$1 = ColorPicker$2;

var _excluded$s = ["color", "size"];
var Menu = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$s);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M0 7.75049C0 6.92206 0.671573 6.25049 1.5 6.25049H48.5C49.3284 6.25049 50 6.92206 50 7.75049V9.43806C50 10.2665 49.3284 10.9381 48.5 10.9381H1.5C0.671571 10.9381 0 10.2665 0 9.43806V7.75049ZM0 24.1567C0 23.3283 0.671573 22.6567 1.5 22.6567H48.5C49.3284 22.6567 50 23.3283 50 24.1567V25.8443C50 26.6727 49.3284 27.3443 48.5 27.3443H1.5C0.671571 27.3443 0 26.6727 0 25.8443V24.1567ZM1.5 39.0629C0.671573 39.0629 0 39.7345 0 40.5629V42.2505C0 43.0789 0.671571 43.7505 1.5 43.7505H48.5C49.3284 43.7505 50 43.0789 50 42.2505V40.5629C50 39.7345 49.3284 39.0629 48.5 39.0629H1.5Z",
    fill: color
  }));
});

var _excluded$r = ["color", "size"];
var MoveDownOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$r);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 46 26",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M1.23229 1.23267C2.20863 0.256387 3.79154 0.256434 4.76782 1.23277L22.9989 19.465L41.2323 1.23267C42.2086 0.256387 43.7915 0.256434 44.7678 1.23277C45.7441 2.20911 45.7441 3.79203 44.7677 4.76831L24.7665 24.7683C24.2977 25.2371 23.6618 25.5005 22.9987 25.5005C22.3357 25.5005 21.6998 25.2371 21.231 24.7682L1.23218 4.7682C0.255899 3.79186 0.255946 2.20895 1.23229 1.23267Z",
    fill: color
  }));
});

var _excluded$q = ["color", "size"];
var MoveUpOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$q);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 46 26",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M21.2326 1.23271C22.2089 0.256404 23.7918 0.256417 24.7681 1.23274L44.7678 21.2327C45.7441 22.2091 45.7441 23.792 44.7678 24.7683C43.7914 25.7446 42.2085 25.7446 41.2322 24.7682L23.0003 6.53602L4.76775 24.7683C3.79143 25.7446 2.20852 25.7446 1.23222 24.7682C0.255916 23.7919 0.255928 22.209 1.23225 21.2327L21.2326 1.23271Z",
    fill: color
  }));
});

var _excluded$p = ["color", "size"];
var ArrowSidebarLeftOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$p);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M25 47.5006C37.4264 47.5006 47.5 37.427 47.5 25.0006C47.5 12.5742 37.4264 2.50061 25 2.50061C12.5736 2.50061 2.5 12.5742 2.5 25.0006C2.5 37.427 12.5736 47.5006 25 47.5006ZM25 50.0006C38.8071 50.0006 50 38.8077 50 25.0006C50 11.1935 38.8071 0.000610352 25 0.000610352C11.1929 0.000610352 0 11.1935 0 25.0006C0 38.8077 11.1929 50.0006 25 50.0006Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M27.7355 35.1357C27.1751 35.7705 26.2217 35.7926 25.6359 35.1773L17.3026 26.423C17.0301 26.1368 16.8819 25.755 16.8752 25.3647C16.8686 24.9745 17.0037 24.5881 17.2652 24.2923L25.5985 14.8647C26.1593 14.2302 27.1128 14.2089 27.6981 14.8247C28.2539 15.4093 28.2679 16.3516 27.7348 16.9546L20.36 25.2978L27.6974 33.0057C28.2536 33.59 28.2681 34.5323 27.7355 35.1357ZM26.6695 34.3756C26.7058 34.3748 26.753 34.3599 26.7984 34.3085C26.9042 34.1886 26.8989 33.9798 26.792 33.8676L19.0594 25.7444C18.8357 25.5095 18.829 25.1425 19.0438 24.8995L26.7983 16.1268C26.9041 16.007 26.899 15.7983 26.7921 15.6859C26.7464 15.6377 26.7001 15.6249 26.6639 15.6256C26.6276 15.6263 26.5805 15.6412 26.5351 15.6926L18.2017 25.1202C18.1562 25.1717 18.1235 25.2514 18.1251 25.3435C18.1266 25.4356 18.1619 25.5128 18.208 25.5612L26.5413 34.3154C26.5871 34.3635 26.6334 34.3763 26.6695 34.3756Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M26.7984 34.3085C26.753 34.3599 26.7058 34.3748 26.6695 34.3756C26.6334 34.3763 26.5871 34.3635 26.5413 34.3154L18.208 25.5612C18.1619 25.5128 18.1266 25.4356 18.1251 25.3435C18.1235 25.2514 18.1562 25.1717 18.2017 25.1202L26.5351 15.6926C26.5805 15.6412 26.6276 15.6263 26.6639 15.6256C26.7001 15.6249 26.7464 15.6377 26.7921 15.6859C26.899 15.7983 26.9041 16.007 26.7983 16.1268L19.0438 24.8995C18.829 25.1425 18.8357 25.5095 19.0594 25.7444L26.792 33.8676C26.8989 33.9798 26.9042 34.1886 26.7984 34.3085Z",
    fill: color
  }));
});
var ArrowSidebarLeftOutline$1 = ArrowSidebarLeftOutline;

var _excluded$o = ["color", "size"];
var ArrowSidebarRightOutline = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$o);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M25 47.5006C37.4264 47.5006 47.5 37.427 47.5 25.0006C47.5 12.5742 37.4264 2.50061 25 2.50061C12.5736 2.50061 2.5 12.5742 2.5 25.0006C2.5 37.427 12.5736 47.5006 25 47.5006ZM25 50.0006C38.8071 50.0006 50 38.8077 50 25.0006C50 11.1935 38.8071 0.000610352 25 0.000610352C11.1929 0.000610352 0 11.1935 0 25.0006C0 38.8077 11.1929 50.0006 25 50.0006Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M22.2645 14.8655C22.8249 14.2307 23.7783 14.2086 24.3641 14.8239L32.6974 23.5781C32.9699 23.8644 33.1181 24.2461 33.1248 24.6364C33.1314 25.0267 32.9963 25.4131 32.7348 25.7089L24.4015 35.1365C23.8406 35.7709 22.8872 35.7923 22.3019 35.1765C21.7461 34.5919 21.7321 33.6496 22.2652 33.0465L29.6399 24.7034L22.3026 16.9954C21.7464 16.4112 21.7319 15.4689 22.2645 14.8655ZM23.3305 15.6256C23.2942 15.6264 23.247 15.6413 23.2016 15.6927C23.0958 15.8126 23.1011 16.0214 23.208 16.1336L30.9406 24.2568C31.1643 24.4917 31.171 24.8586 30.9562 25.1016L23.2017 33.8744C23.0959 33.9942 23.101 34.2029 23.2079 34.3153C23.2536 34.3634 23.2999 34.3763 23.3361 34.3756C23.3724 34.3748 23.4195 34.36 23.4649 34.3086L31.7983 24.881C31.8438 24.8295 31.8765 24.7497 31.8749 24.6577C31.8734 24.5656 31.838 24.4883 31.792 24.44L23.4587 15.6858C23.4129 15.6377 23.3666 15.6249 23.3305 15.6256Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    d: "M23.2016 15.6927C23.247 15.6413 23.2942 15.6264 23.3305 15.6256C23.3666 15.6249 23.4129 15.6377 23.4587 15.6858L31.792 24.44C31.838 24.4883 31.8734 24.5656 31.8749 24.6577C31.8765 24.7497 31.8438 24.8295 31.7983 24.881L23.4649 34.3086C23.4195 34.36 23.3724 34.3748 23.3361 34.3756C23.2999 34.3763 23.2536 34.3634 23.2079 34.3153C23.101 34.2029 23.0959 33.9942 23.2017 33.8744L30.9562 25.1016C31.171 24.8586 31.1643 24.4917 30.9406 24.2568L23.208 16.1336C23.1011 16.0214 23.0958 15.8126 23.2016 15.6927Z",
    fill: color
  }));
});
var ArrowSidebarRightOutline$1 = ArrowSidebarRightOutline;

var _excluded$n = ["color", "size"];
var Annotation = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$n);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 50 50",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M48.5577 38.9423H34.8557C31.8069 38.9423 29.327 41.4224 29.327 44.4712C29.327 45.9293 28.1406 47.1157 26.6827 47.1157H5.52902C4.07066 47.1157 2.88467 45.9293 2.88467 44.4712V42.5459C2.88467 41.0886 4.07028 39.9025 5.5275 39.9018L9.33952 39.8999C9.34067 39.8999 9.34219 39.8995 9.34334 39.8995C9.38683 39.8995 9.43031 39.8968 9.47418 39.893C9.49211 39.8915 9.50966 39.8884 9.52759 39.8861C9.54628 39.8835 9.56535 39.8819 9.58405 39.8789L19.7636 38.1229C19.7689 38.1217 19.7739 38.1206 19.7788 38.1195C19.7948 38.1164 19.8105 38.113 19.8261 38.1095C19.8517 38.1038 19.8769 38.0981 19.9017 38.0908C19.9192 38.0863 19.9368 38.0809 19.9543 38.0756C19.9776 38.068 20.0008 38.0599 20.0241 38.0512C20.0409 38.0447 20.0581 38.039 20.0748 38.0321C20.1107 38.0168 20.1458 38.0008 20.1805 37.9829C20.1942 37.9756 20.208 37.9672 20.2217 37.9596C20.2461 37.9459 20.2702 37.9321 20.2938 37.9169C20.3083 37.9077 20.3228 37.8978 20.3373 37.8879C20.3602 37.8719 20.3831 37.8551 20.4052 37.8375C20.417 37.8284 20.4292 37.8192 20.4411 37.8093C20.4746 37.7815 20.5074 37.7525 20.5383 37.7212L46.2479 12.0109C48.3097 9.94895 48.3097 6.59377 46.2479 4.53146L43.2632 1.54708C41.2014 -0.515234 37.846 -0.514853 35.7841 1.54708L10.075 27.2574C10.0437 27.2883 10.0147 27.3215 9.9865 27.355C9.97696 27.3665 9.9678 27.3783 9.95865 27.3901C9.9411 27.4127 9.92432 27.4355 9.90829 27.4588C9.89838 27.4729 9.88846 27.4874 9.8793 27.5019C9.86443 27.5252 9.85069 27.5488 9.83734 27.5729C9.82857 27.5885 9.81941 27.6042 9.81102 27.6198C9.79424 27.653 9.77898 27.6862 9.76448 27.7205C9.75723 27.7377 9.75113 27.7556 9.74426 27.7732C9.73625 27.7953 9.72824 27.8178 9.72099 27.8403C9.71527 27.8586 9.70993 27.8769 9.70497 27.8952C9.69849 27.9189 9.69276 27.9429 9.68742 27.9673C9.68361 27.9841 9.67979 28.0009 9.67674 28.0177C9.6756 28.0226 9.67445 28.0272 9.67369 28.0318L8.12378 37.0158L5.52597 37.017C2.47879 37.0185 0 39.4989 0 42.5459V44.4712C0 47.5201 2.48032 50.0005 5.52902 50.0005H26.6827C29.7314 50.0005 32.2117 47.5201 32.2117 44.4712C32.2117 43.0132 33.3977 41.8267 34.8557 41.8267H48.5577C49.3542 41.8267 50 41.1813 50 40.3847C50 39.5878 49.3542 38.9423 48.5577 38.9423ZM12.043 31.2653L16.5306 35.7531L11.1076 36.6885L12.043 31.2653ZM33.5567 7.85382L35.7288 10.026L15.3065 30.4493L13.1344 28.2771L33.5567 7.85382ZM19.5183 34.6613L17.3462 32.4891L37.7689 12.0658L39.941 14.238L19.5183 34.6613ZM37.8239 3.58651C38.7611 2.64958 40.2859 2.64958 41.2235 3.58651L44.2078 6.57126C45.145 7.50858 45.145 9.03376 44.2078 9.97108L41.9804 12.1986L35.5965 5.81401L37.8239 3.58651Z",
    fill: color
  }));
});

var _excluded$m = ["color", "size"];
var Rotate90 = intrinsicComponent(function (_ref, ref) {
  var _ref$color = _ref.color,
    color = _ref$color === void 0 ? 'currentColor' : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 14 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$m);
  return /*#__PURE__*/React.createElement("svg", _extends({
    ref: ref,
    width: size,
    height: size,
    viewBox: "0 0 52 42",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg"
  }, rest), /*#__PURE__*/React.createElement("path", {
    d: "M46.4326 40.0282C46.1217 40.5666 45.6098 40.9595 45.0093 41.1204C44.4088 41.2813 43.7691 41.197 43.2307 40.8862C42.6923 40.5754 42.2995 40.0634 42.1386 39.463C41.9777 38.8625 42.0619 38.2227 42.3727 37.6843C45.2819 32.6454 46.0703 26.6571 44.5644 21.0369C43.0584 15.4167 39.3816 10.6249 34.3426 7.71563C25.1427 2.4043 13.7736 4.38306 6.93632 12.1744L14.5457 12.0831H14.5744C15.196 12.0795 15.7937 12.3229 16.2358 12.7599C16.678 13.1969 16.9284 13.7916 16.9321 14.4133C16.9357 15.0349 16.6923 15.6326 16.2553 16.0747C15.8183 16.5169 15.2236 16.7673 14.6019 16.771L2.37222 16.9175H2.34409C2.03391 16.9175 1.72681 16.856 1.44059 16.7364C1.15437 16.6169 0.894721 16.4417 0.676697 16.2211C0.458674 16.0004 0.28661 15.7387 0.170478 15.4511C0.0543471 15.1635 -0.00354164 14.8557 0.000167612 14.5455L0.147346 2.31591C0.151046 2.00811 0.215338 1.70404 0.336549 1.42108C0.457761 1.13812 0.633519 0.881802 0.853788 0.666765C1.07406 0.451728 1.33453 0.282182 1.62032 0.167807C1.90611 0.0534328 2.21164 -0.00353076 2.51944 0.000169355C2.82725 0.00386947 3.13132 0.0681609 3.41428 0.189372C3.69724 0.310584 3.95356 0.486342 4.16859 0.706611C4.38363 0.926881 4.55318 1.18735 4.66755 1.47314C4.78193 1.75894 4.83889 2.06446 4.83519 2.37227L4.77171 7.65586C9.37537 3.16334 15.4496 0.489016 21.8718 0.127065C28.2941 -0.234886 34.6303 1.74001 39.7096 5.6868C44.7889 9.63359 48.2679 15.2855 49.5038 21.5981C50.7397 27.9107 49.6485 34.4574 46.4326 40.0282Z",
    fill: color
  }), /*#__PURE__*/React.createElement("path", {
    fillRule: "evenodd",
    clipRule: "evenodd",
    d: "M25 28C26.6569 28 28 26.6569 28 25C28 23.3431 26.6569 22 25 22C23.3431 22 22 23.3431 22 25C22 26.6569 23.3431 28 25 28ZM25 32C28.866 32 32 28.866 32 25C32 21.134 28.866 18 25 18C21.134 18 18 21.134 18 25C18 28.866 21.134 32 25 32Z",
    fill: color
  }));
});

var Size$1 = {
  Xs: 'xs',
  Sm: 'sm',
  Md: 'md',
  Lg: 'lg'
};

var baseClassName$g = 'CrossButton';
var crossButtonPaddingMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Size$1.Xs, styled.css(["padding:5px;height:20px;"])), Size$1.Sm, styled.css(["padding:6px;height:24px;"])), Size$1.Md, styled.css(["padding:9px;"])), Size$1.Lg, styled.css(["padding:12px;"]));
var CrossButton$2 = /*#__PURE__*/styled.button.attrs({
  className: generateClassNames(baseClassName$g, 'root')
}).withConfig({
  componentId: "sc-ygfku-0"
})(function (_ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? Size$1.Lg : _ref$size,
    theme = _ref.theme;
  return styled.css(["display:flex;justify-content:center;align-items:center;cursor:pointer;border-radius:4px;", " color:", ";background:transparent;border:none;transition:all 100ms ease-out;&:hover{color:", ";background:", ";}&:active{color:", ";background:", ";}"], crossButtonPaddingMixin[size], theme.palette[Color.IconsSecondary], theme.palette[Color.IconsPrimary], theme.palette[Color.BackgroundHover], theme.palette[Color.IconsPrimaryHover], theme.palette[Color.BackgroundActive]);
});
var Styled$v = applyDisplayNames({
  CrossButton: CrossButton$2
});
var Styled$w = Styled$v;

var _excluded$l = ["size"];
var getIconSize$1 = function getIconSize(sizeName) {
  switch (sizeName) {
    case Size$1.Lg:
      return 16;
    case Size$1.Xs:
      return 10;
    case Size$1.Sm:
    default:
      return 12;
  }
};
var CrossButton = intrinsicComponent$1(function (_ref, ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? Size$1.Lg : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$l);
  return /*#__PURE__*/React.createElement(Styled$w.CrossButton, _extends({
    type: "button",
    size: size
  }, rest, {
    ref: ref
  }), /*#__PURE__*/React.createElement(CrossOutline$1, {
    size: getIconSize$1(size)
  }));
});
var CrossButton$1 = CrossButton;

var baseClassName$f = 'Select';
var Icon$2 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$f, 'Icon')
}).withConfig({
  componentId: "sc-mfrapg-0"
})(function (_ref) {
  var palette = _ref.theme.palette,
    size = _ref.size,
    disabled = _ref.disabled;
  return styled.css(["display:flex;flex-shrink:0;color:", ";padding:", ";"], disabled ? palette[Color.IconsMuted] : palette[Color.IconsPrimary], size === Size$2.Md ? '2.5px' : '2px');
});
var TickIcon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$f, 'tickIcon')
}).withConfig({
  componentId: "sc-mfrapg-1"
})(function (_ref2) {
  var palette = _ref2.theme.palette;
  return styled.css(["color:", ";"], palette[Color.AccentStateless]);
});
var Container$1 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$f, 'Container')
}).withConfig({
  componentId: "sc-mfrapg-2"
})(function (_ref3) {
  var _ref3$fullWidth = _ref3.fullWidth,
    fullWidth = _ref3$fullWidth === void 0 ? false : _ref3$fullWidth;
  return styled.css(["position:relative;display:inline-flex;", ""], fullWidth ? 'width: 100%' : '');
});
var StyledCrossButton = /*#__PURE__*/styled(CrossButton$1).attrs({
  className: generateClassNames(baseClassName$f, 'CrossButton')
}).withConfig({
  componentId: "sc-mfrapg-3"
})(function () {
  return styled.css(["display:none;margin-right:6px;"]);
});
var Select$3 = /*#__PURE__*/styled(StyledInput.Input).attrs({
  className: generateClassNames(baseClassName$f, 'root')
}).withConfig({
  componentId: "sc-mfrapg-4"
})(function (_ref4) {
  var palette = _ref4.theme.palette,
    disabled = _ref4.disabled,
    readOnly = _ref4.readOnly,
    _ref4$size = _ref4.size,
    size = _ref4$size === void 0 ? 'sm' : _ref4$size,
    isValueExists = _ref4.isValueExists;
  return styled.css(["cursor:", ";user-select:none;gap:0px;background:", ";", " ", ";"], disabled || readOnly ? 'default' : 'pointer', disabled ? palette[Color.BackgroundHover] : palette[Color.BackgroundStateless], isValueExists && "\n    &:hover {\n      ".concat(StyledCrossButton, " {\n        display: flex;\n      }\n    }\n    "), fontSizeInputMixin[size]);
});
var Label$1 = /*#__PURE__*/styled.label.attrs({
  className: generateClassNames(baseClassName$f, 'Label')
}).withConfig({
  componentId: "sc-mfrapg-5"
})(function (_ref5) {
  var hideEllipsis = _ref5.hideEllipsis,
    _ref5$size = _ref5.size,
    size = _ref5$size === void 0 ? Size$2.Md : _ref5$size;
  return "\n    flex-grow: 1;\n    margin-right: ".concat(size === Size$2.Md ? 8 : 12, "px;\n\n    ").concat(!hideEllipsis && styled.css(["white-space:nowrap;text-overflow:ellipsis;overflow:hidden;"]), "\n  ");
});
var Placeholder = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$f, 'Placeholder')
}).withConfig({
  componentId: "sc-mfrapg-6"
})(function (_ref6) {
  var palette = _ref6.theme.palette,
    size = _ref6.size;
  return styled.css(["width:100%;color:", ";margin-right:", "px;"], palette[Color.TextPlaceholder], size === Size$2.Md ? 16 : 12);
});
var Input = /*#__PURE__*/styled.input.attrs({
  className: generateClassNames(baseClassName$f, 'Input'),
  'aria-hidden': 'true'
}).withConfig({
  componentId: "sc-mfrapg-7"
})(["left:0;width:100%;bottom:0;opacity:0;position:absolute;pointer-events:none;box-sizing:border-box;"]);
var Styled$t = applyDisplayNames({
  Container: Container$1,
  Select: Select$3,
  Label: Label$1,
  Icon: Icon$2,
  TickIcon: TickIcon,
  Input: Input,
  Placeholder: Placeholder,
  StyledCrossButton: StyledCrossButton
});
var Styled$u = Styled$t;

function ownKeys$6(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$6(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$6(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$6(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var getIconSize = function getIconSize(size) {
  switch (size) {
    case InputSize.Md:
      return 16;
    case InputSize.Sm:
    default:
      return 14;
  }
};
var generateChildren = function generateChildren(children) {
  var isActive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var size = arguments.length > 2 ? arguments[2] : undefined;
  var hideMenuItemsActions = arguments.length > 3 ? arguments[3] : undefined;
  var miChildren = /*#__PURE__*/React.createElement(MenuItemLabel$1, null, children);
  if (isActive && children) {
    var miActions = /*#__PURE__*/React.createElement(MenuItemActions$1, null, /*#__PURE__*/React.createElement(Styled$u.TickIcon, null, /*#__PURE__*/React.createElement(Tick, {
      size: getIconSize(size)
    })));
    if (React.Children.count(children) === 1) {
      return /*#__PURE__*/React.createElement(React.Fragment, null, miChildren, !hideMenuItemsActions && miActions);
    }
    if (React.Children.count(children) > 1 && !React.Children.toArray(children).some(function (child) {
      var _child$type;
      return (child === null || child === void 0 || (_child$type = child.type) === null || _child$type === void 0 ? void 0 : _child$type.displayName) === 'MenuItemActions';
    })) {
      return /*#__PURE__*/React.createElement(React.Fragment, null, children, miActions);
    }
  }
  return miChildren;
};
var renderOption = function renderOption(menuItem, _ref) {
  var _type, _props, _props2, _props3;
  var value = _ref.value,
    _ref$multiple = _ref.multiple,
    multiple = _ref$multiple === void 0 ? false : _ref$multiple,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? InputSize.Md : _ref$size,
    _ref$hideMenuItemsAct = _ref.hideMenuItemsActions,
    hideMenuItemsActions = _ref$hideMenuItemsAct === void 0 ? false : _ref$hideMenuItemsAct,
    onClose = _ref.onClose,
    onChange = _ref.onChange;
  if (! /*#__PURE__*/React.isValidElement(menuItem)) {
    return menuItem;
  }
  if (((_type = menuItem.type) === null || _type === void 0 ? void 0 : _type.displayName) !== 'MenuItem') {
    return /*#__PURE__*/React.cloneElement(menuItem);
  }
  var menuItemValue = menuItem === null || menuItem === void 0 || (_props = menuItem.props) === null || _props === void 0 ? void 0 : _props.value;
  var valueArr = multiple ? Array.isArray(value) ? value : [] : [value];
  var active = valueArr.length > 0 && valueArr.includes(menuItemValue);
  var isDisabledMenuItem = menuItem === null || menuItem === void 0 || (_props2 = menuItem.props) === null || _props2 === void 0 ? void 0 : _props2.disabled;
  return /*#__PURE__*/React.cloneElement(menuItem, {
    active: active,
    size: size,
    children: generateChildren(menuItem === null || menuItem === void 0 || (_props3 = menuItem.props) === null || _props3 === void 0 ? void 0 : _props3.children, active, size, hideMenuItemsActions),
    onClick: function onClick() {
      var _menuItemValue$toStri;
      if (!multiple && typeof onClose === 'function') {
        onClose();
      }
      if (typeof onChange === 'function' && !isDisabledMenuItem && !!(menuItemValue !== null && menuItemValue !== void 0 && (_menuItemValue$toStri = menuItemValue.toString()) !== null && _menuItemValue$toStri !== void 0 && _menuItemValue$toStri.length)) {
        var newValue = menuItemValue;
        if (multiple) {
          newValue = _toConsumableArray(Array.isArray(value) ? value : []);
          var index = newValue.indexOf(menuItemValue);
          if (index > -1) {
            newValue.splice(index, 1);
          } else {
            newValue.push(menuItemValue);
          }
        }
        onChange(newValue);
      }
    }
  });
};
var getOptionValue = function getOptionValue(option) {
  var children = option.props ? option.props.children : option;
  if (Array.isArray(children)) return children.map(function (child) {
    return getOptionValue(child);
  }).join(' ');
  if (_typeof(children) === 'object') return getOptionValue(children.props.children);
  return children;
};
var renderOptionValue = function renderOptionValue(option, showSelectionKey) {
  if (option && option.children) {
    var child = showSelectionKey ? option.value : option.children;
    while (typeof child !== 'string') {
      if (Array.isArray(child)) {
        child = getOptionValue(child[1]);
      } else {
        child = getOptionValue(child);
      }
    }
    return child;
  }
};
var renderValue = function renderValue(_ref2) {
  var value = _ref2.value,
    _ref2$multiple = _ref2.multiple,
    multiple = _ref2$multiple === void 0 ? false : _ref2$multiple,
    children = _ref2.children,
    _ref2$showSelectionKe = _ref2.showSelectionKey,
    showSelectionKey = _ref2$showSelectionKe === void 0 ? false : _ref2$showSelectionKe;
  var optionsProps = [];
  React.Children.forEach(children, function (child) {
    if ( /*#__PURE__*/React.isValidElement(child)) {
      var _ref3 = (child === null || child === void 0 ? void 0 : child.type) || {},
        displayName = _ref3.displayName;
      if (displayName === 'MenuItem' && Boolean(child.props)) {
        optionsProps.push(_objectSpread$6({}, child.props));
      }
    }
  });
  var activeOptions = multiple ? optionsProps.filter(function (itemProps) {
    return Array.isArray(value) && value.includes(itemProps.value);
  }) : [optionsProps.find(function (itemProps) {
    return itemProps.value === value;
  })];
  if (activeOptions.length > 0) {
    return activeOptions.map(function (option) {
      return renderOptionValue(option, showSelectionKey);
    }).join(', ');
  }
  return Array.isArray(value) ? value.join(', ') : value;
};

var _excluded$k = ["children", "size", "error", "multiple", "onChange", "value", "fullWidth", "selectProps", "MenuProps", "readOnly", "disabled", "placeholder", "showSelectionKey", "hideMenuItemsActions", "showClearIcon", "renderLabel", "onRequestClose", "hideEllipsis"];
var Select$1 = intrinsicComponent$1(function (_ref, ref) {
  var _value$toString;
  var children = _ref.children,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? InputSize.Md : _ref$size,
    _ref$error = _ref.error,
    error = _ref$error === void 0 ? false : _ref$error,
    _ref$multiple = _ref.multiple,
    multiple = _ref$multiple === void 0 ? false : _ref$multiple,
    onChange = _ref.onChange,
    value = _ref.value,
    _ref$fullWidth = _ref.fullWidth,
    fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
    selectProps = _ref.selectProps,
    MenuProps = _ref.MenuProps,
    _ref$readOnly = _ref.readOnly,
    readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,
    disabled = _ref.disabled,
    placeholder = _ref.placeholder,
    showSelectionKey = _ref.showSelectionKey,
    _ref$hideMenuItemsAct = _ref.hideMenuItemsActions,
    hideMenuItemsActions = _ref$hideMenuItemsAct === void 0 ? false : _ref$hideMenuItemsAct,
    _ref$showClearIcon = _ref.showClearIcon,
    showClearIcon = _ref$showClearIcon === void 0 ? false : _ref$showClearIcon,
    renderLabel = _ref.renderLabel,
    onRequestClose = _ref.onRequestClose,
    _ref$hideEllipsis = _ref.hideEllipsis,
    hideEllipsis = _ref$hideEllipsis === void 0 ? false : _ref$hideEllipsis,
    rest = _objectWithoutProperties(_ref, _excluded$k);
  var _useState = React.useState(undefined),
    _useState2 = _slicedToArray(_useState, 2),
    anchorEl = _useState2[0],
    setAnchorEl = _useState2[1];
  var open = Boolean(anchorEl);
  var handleClick = function handleClick(event) {
    return setAnchorEl(event.currentTarget);
  };
  var isValueExists = Array.isArray(value) ? !!value.length : !!(value !== null && value !== void 0 && (_value$toString = value.toString()) !== null && _value$toString !== void 0 && _value$toString.length);
  var handleClose = function handleClose() {
    if (onRequestClose) {
      onRequestClose();
    }
    setAnchorEl(undefined);
  };
  var handleClearSelection = function handleClearSelection(event) {
    event.stopPropagation();
    if (typeof onChange === 'function') {
      onChange('');
    }
  };
  return /*#__PURE__*/React.createElement(Styled$u.Container, {
    ref: ref,
    fullWidth: Boolean(fullWidth)
  }, /*#__PURE__*/React.createElement(Styled$u.Select, _extends({}, rest, {
    disabled: disabled,
    size: size,
    $error: error,
    $fullWidth: Boolean(fullWidth),
    readOnly: readOnly,
    showSelectionKey: showSelectionKey,
    isValueExists: isValueExists,
    onClick: readOnly || disabled ? undefined : handleClick
  }), isValueExists && /*#__PURE__*/React.createElement(Styled$u.Label, {
    hideEllipsis: hideEllipsis,
    size: size
  }, typeof renderLabel === 'function' ? renderLabel(value) : renderValue({
    value: value,
    multiple: multiple,
    children: children,
    showSelectionKey: showSelectionKey
  })), !isValueExists && /*#__PURE__*/React.createElement(Styled$u.Placeholder, {
    size: size
  }, placeholder), !readOnly && showClearIcon && /*#__PURE__*/React.createElement(Styled$u.StyledCrossButton, {
    size: size === Size$1.Md ? Size$1.Sm : Size$1.Xs,
    onClick: handleClearSelection
  }), /*#__PURE__*/React.createElement(Styled$u.Icon, {
    size: size,
    disabled: disabled
  }, /*#__PURE__*/React.createElement(ArrowTick$1, {
    type: open ? 'top' : 'bottom',
    IconProps: {
      size: size === Size$1.Md ? 11 : 10
    }
  })), /*#__PURE__*/React.createElement(Styled$u.Input, selectProps)), /*#__PURE__*/React.createElement(Menu$2, _extends({
    onClose: handleClose
  }, MenuProps, {
    open: open,
    anchorEl: anchorEl
  }), React.Children.map(children, function (child) {
    return renderOption(child, {
      value: value,
      multiple: multiple,
      size: size,
      hideMenuItemsActions: hideMenuItemsActions,
      onClose: handleClose,
      onChange: readOnly || disabled ? undefined : onChange
    });
  })));
});
PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.oneOf([null])]);
var Select$2 = Select$1;

function useDrag(onMove, onStart, onEnd) {
  var onDragging = function onDragging(e) {
    if (typeof onMove === 'function') {
      var _e$touches;
      onMove(((_e$touches = e.touches) === null || _e$touches === void 0 ? void 0 : _e$touches[0]) || e);
    }
  };
  var disableSliding = function disableSliding(e) {
    document.removeEventListener('mousemove', onDragging);
    document.removeEventListener('mouseup', disableSliding);
    document.removeEventListener('mouseleave', disableSliding);
    document.removeEventListener('touchmove', onDragging);
    document.removeEventListener('touchend', disableSliding);
    document.removeEventListener('touchcancel', disableSliding);
    if (typeof onEnd === 'function') {
      var _e$touches2;
      onEnd(((_e$touches2 = e.touches) === null || _e$touches2 === void 0 ? void 0 : _e$touches2[0]) || e);
    }
  };
  var enableDrag = function enableDrag(e) {
    document.addEventListener('mousemove', onDragging);
    document.addEventListener('mouseup', disableSliding);
    document.addEventListener('mouseleave', disableSliding);
    document.addEventListener('touchmove', onDragging);
    document.addEventListener('touchend', disableSliding);
    document.addEventListener('touchcancel', disableSliding);
    if (typeof onStart === 'function') {
      var _e$touches3;
      onStart(((_e$touches3 = e.touches) === null || _e$touches3 === void 0 ? void 0 : _e$touches3[0]) || e);
    }
  };
  return {
    onMouseDown: enableDrag,
    onTouchStart: enableDrag
  };
}

function ownKeys$5(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$5(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$5(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$5(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var baseClassName$e = 'ColorPicker';
var colorItemClassName = 'ColorItem';
var ColorPickerWrapper = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$e, 'root')
}).withConfig({
  componentId: "sc-qj4xo5-0"
})(["background-color:", ";box-shadow:0px 1px 2px rgba(78,77,77,0.15);border-radius:2px;padding:12px;max-width:300px;"], function (_ref) {
  var theme = _ref.theme;
  return theme.palette[Color.BackgroundSecondary];
});
var ColorPickerIcon = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$e, 'icon')
}).withConfig({
  componentId: "sc-qj4xo5-1"
})(["display:flex;justify-content:space-between;align-items:center;cursor:pointer;"]);
var RangePickerWrapper = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$e, 'range-picker')
}).withConfig({
  componentId: "sc-qj4xo5-2"
})(function (_ref2) {
  var color = _ref2.color;
  return styled.css(["position:relative;border-radius:2px;width:100%;height:180px;user-select:none;cursor:crosshair;background-color:", ";"], color);
});
var WhiteGradient = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$e, 'white-gradient')
}).withConfig({
  componentId: "sc-qj4xo5-3"
})(["background:linear-gradient(to right,white 0%,rgba(255,255,255,0) 100%);z-index:0;position:absolute;width:100%;height:100%;border-radius:2px;user-select:none;pointer-events:none;top:-1px;"]);
var BlackGradient = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$e, 'black-gradient')
}).withConfig({
  componentId: "sc-qj4xo5-4"
})(["background:linear-gradient(to bottom,rgba(0,0,0,0) 0%,black 100%);z-index:1;position:absolute;width:100%;height:100%;border-radius:2px;user-select:none;pointer-events:none;"]);
var ColorPointer = /*#__PURE__*/styled.span.attrs(function (_ref3) {
  var _ref3$left = _ref3.left,
    left = _ref3$left === void 0 ? 0 : _ref3$left,
    _ref3$top = _ref3.top,
    top = _ref3$top === void 0 ? 0 : _ref3$top,
    _ref3$considerTopWidt = _ref3.considerTopWidth,
    considerTopWidth = _ref3$considerTopWidt === void 0 ? false : _ref3$considerTopWidt,
    style = _ref3.style;
  return {
    className: generateClassNames(baseClassName$e, 'pointer'),
    style: _objectSpread$5({
      left: left - 7,
      // 7
      top: top - (considerTopWidth ? 7 : 0)
    }, style)
  };
}).withConfig({
  componentId: "sc-qj4xo5-5"
})(function (_ref4) {
  var theme = _ref4.theme,
    pointerColor = _ref4.pointerColor;
  return styled.css(["display:inline-block;box-sizing:border-box;width:15px;height:15px;border-radius:20px;box-shadow:0px 1px 2px rgba(78,77,77,0.15);border:2px solid ", ";background-color:", ";position:absolute;cursor:pointer;z-index:11;user-select:none;outline:none;"], theme.palette[Color.BackgroundSecondary], pointerColor);
});
var BarWrapper = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$e, 'bar-wrapper')
}).withConfig({
  componentId: "sc-qj4xo5-6"
})(["margin-top:8px;position:relative;width:100%;height:12px;"]);
var Bar = /*#__PURE__*/styled.table.attrs({
  className: generateClassNames(baseClassName$e, 'bar')
}).withConfig({
  componentId: "sc-qj4xo5-7"
})(["border-radius:4px;width:100%;height:8px;border-collapse:collapse;"]);
var BarColorStop = /*#__PURE__*/styled.td.attrs(function (_ref5) {
  var $color = _ref5.$color;
  return {
    className: generateClassNames(baseClassName$e, 'stop'),
    style: {
      backgroundColor: $color
    }
  };
}).withConfig({
  componentId: "sc-qj4xo5-8"
})(["padding:0;user-select:none;pointer-events:none;&:first-child{width:4px;border-top-left-radius:4px;border-bottom-left-radius:4px;}&:last-child{width:4px;border-top-right-radius:4px;border-bottom-right-radius:4px;}"]);
var ColorPickerAction = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$e, 'action')
}).withConfig({
  componentId: "sc-qj4xo5-9"
})(["display:flex;justify-content:space-between;align-items:center;gap:12px;margin-bottom:12px;"]);
var ColorItemWrapper = /*#__PURE__*/styled.label.attrs({
  className: generateClassNames(colorItemClassName, 'label')
}).withConfig({
  componentId: "sc-qj4xo5-10"
})(function (_ref6) {
  var theme = _ref6.theme,
    size = _ref6.size,
    color = _ref6.color,
    stroke = _ref6.stroke,
    value = _ref6.value;
  return styled.css(["border-radius:2px;border:", ";box-sizing:border-box;width:", "px;height:", "px;background-color:", ";user-select:none;display:flex;align-items:center;justify-content:center;cursor:pointer;transition:all 300ms;margin-bottom:8px;background:", ";input{display:none;}"], "1px solid ".concat(stroke), size, size, color, value === 'rgba(0,0,0,0)' && "repeating-conic-gradient(".concat(theme.palette[Color.LinkPrimary], " 0% 25%, transparent 0% 50%) 50% / 8px 8px"));
});
var ColorItemsContainer = /*#__PURE__*/styled.div.withConfig({
  componentId: "sc-qj4xo5-11"
})(["display:flex;flex-wrap:wrap;align-content:space-between;margin-top:14px;margin-left:12px;& > .item{margin-right:8px;display:flex;justify-content:center;}"]);
var Select = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$e, 'select')
}).withConfig({
  componentId: "sc-qj4xo5-12"
})(function (_ref7) {
  var value = _ref7.value;
  return styled.css(["width:", ";"], value === 'rgb' ? '25%' : '35%');
});
var SelectWrapper = /*#__PURE__*/styled.div.withConfig({
  componentId: "sc-qj4xo5-13"
})({
  display: 'flex',
  alignItems: 'center',
  gap: '12px'
});
var Styled$r = applyDisplayNames({
  ColorPickerWrapper: ColorPickerWrapper,
  RangePickerWrapper: RangePickerWrapper,
  WhiteGradient: WhiteGradient,
  BlackGradient: BlackGradient,
  ColorPointer: ColorPointer,
  BarWrapper: BarWrapper,
  Bar: Bar,
  BarColorStop: BarColorStop,
  ColorPickerAction: ColorPickerAction,
  ColorPickerIcon: ColorPickerIcon,
  ColorItemsContainer: ColorItemsContainer,
  ColorItemWrapper: ColorItemWrapper,
  Select: Select,
  SelectWrapper: SelectWrapper
});
var Styled$s = Styled$r;

var ColorItem = intrinsicComponent$1(function (_ref, ref) {
  var value = _ref.value,
    onChange = _ref.onChange,
    checked = _ref.checked,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? 24 : _ref$size;
  var checkIconColor = React.useMemo(function () {
    if (value === '#ffffff' || value === 'rgba(0,0,0,0)') {
      return 'black';
    }
    return 'white';
  }, [value]);
  return /*#__PURE__*/React.createElement(Styled$s.ColorItemWrapper, {
    ref: ref,
    color: value,
    size: size,
    stroke: value === 'rgba(0,0,0,0)' ? '#a8a8a8' : '#E9EEF2',
    value: value
  }, /*#__PURE__*/React.createElement("input", {
    type: "radio",
    value: value,
    checked: checked,
    onChange: onChange
  }), checked && /*#__PURE__*/React.createElement(Tick, {
    color: checkIconColor
  }));
});
var ColorItem$1 = ColorItem;

var _excluded$j = ["defaultColor", "onChange", "pinnedColors", "showTransparentColor", "hidePinIcon", "containerProps"];
function ownKeys$4(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$4(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$4(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$4(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var transparentColor = ['rgba(0,0,0,0)'];
var transparentColorHex = '#00000000';
var colorsHuesCount = 360;
var ColorPicker = intrinsicComponent$1(function (_ref, ref) {
  var _ref$defaultColor = _ref.defaultColor,
    defaultColor = _ref$defaultColor === void 0 ? '#000000' : _ref$defaultColor,
    onChange = _ref.onChange,
    _ref$pinnedColors = _ref.pinnedColors,
    pinnedColors = _ref$pinnedColors === void 0 ? [] : _ref$pinnedColors,
    _ref$showTransparentC = _ref.showTransparentColor,
    showTransparentColor = _ref$showTransparentC === void 0 ? false : _ref$showTransparentC,
    _ref$hidePinIcon = _ref.hidePinIcon,
    hidePinIcon = _ref$hidePinIcon === void 0 ? false : _ref$hidePinIcon,
    containerProps = _ref.containerProps,
    rest = _objectWithoutProperties(_ref, _excluded$j);
  var showedColors = showTransparentColor ? transparentColor.concat(pinnedColors) : pinnedColors;
  var isTransparentColor = function isTransparentColor(color) {
    return color === transparentColorHex || color === transparentColor[0];
  };
  var _useState = React.useState({
      color: '#ff0000',
      pointerLeft: 0
    }),
    _useState2 = _slicedToArray(_useState, 2),
    bar = _useState2[0],
    setBar = _useState2[1];
  var _useState3 = React.useState({
      color: isTransparentColor(defaultColor) ? '#00000000' : colorToHex(defaultColor) || '#000000',
      pointer: {
        left: 0,
        top: 0
      }
    }),
    _useState4 = _slicedToArray(_useState3, 2),
    rangePicker = _useState4[0],
    setRangePicker = _useState4[1];
  var _useState5 = React.useState(showedColors),
    _useState6 = _slicedToArray(_useState5, 2),
    localPinnedColors = _useState6[0],
    setLocalPinnedColors = _useState6[1];
  var _useState7 = React.useState('hex'),
    _useState8 = _slicedToArray(_useState7, 2),
    inputType = _useState8[0],
    setInputType = _useState8[1];
  var _useState9 = React.useState([]),
    _useState10 = _slicedToArray(_useState9, 2),
    rgbColorValue = _useState10[0],
    setRgbColorValue = _useState10[1];
  var _useState11 = React.useState(colorToHex(rangePicker.color)),
    _useState12 = _slicedToArray(_useState11, 2),
    hexInputValue = _useState12[0],
    setHexInputValue = _useState12[1];
  var _useState13 = React.useState(null),
    _useState14 = _slicedToArray(_useState13, 2),
    barRef = _useState14[0],
    setBarRef = _useState14[1];
  var _useState15 = React.useState(null),
    _useState16 = _slicedToArray(_useState15, 2),
    rangePickerRef = _useState16[0],
    setRangePickerRef = _useState16[1];
  var isColorChecked = function isColorChecked(checkedColor) {
    if (checkedColor === transparentColor[0] && rangePicker.color === transparentColorHex) {
      return true;
    }
    return checkedColor === rangePicker.color;
  };
  var filterTransparentColor = function filterTransparentColor(colors) {
    return colors.filter(function (item) {
      return item !== 'rgba(0,0,0,0)';
    });
  };
  var getRgbColor = function getRgbColor(color) {
    return isTransparentColor(color) ? transparentColor[0] : "rgb(".concat(hexToRgb(color).join(', '), ")");
  };
  var handlePinnedColors = function handlePinnedColors(hexColor, type) {
    if (type === 'add') {
      var newLocalPinnedColors = [].concat(_toConsumableArray(localPinnedColors), [hexColor]);
      setLocalPinnedColors(newLocalPinnedColors);
      if (typeof onChange === 'function') {
        onChange(rangePicker.color, getRgbColor(hexColor), filterTransparentColor(newLocalPinnedColors));
      }
    } else {
      var _newLocalPinnedColors = localPinnedColors.filter(function (item) {
        return item !== rangePicker.color;
      });
      setLocalPinnedColors(_newLocalPinnedColors);
      if (typeof onChange === 'function') {
        onChange(rangePicker.color, getRgbColor(hexColor), filterTransparentColor(_newLocalPinnedColors));
      }
    }
  };
  var changeBarPosByColor = function changeBarPosByColor(color) {
    if (barRef !== null) {
      var _ref2 = getElemDocumentCoords$1(barRef),
        left = _ref2.left;
      var _colorToHsl = colorToHsl(color || rangePicker.color),
        _colorToHsl2 = _slicedToArray(_colorToHsl, 1),
        h = _colorToHsl2[0];
      var targetColorElem = barRef.querySelector("[data-hue='".concat(h, "']"));
      if (targetColorElem !== null) {
        var targetColorRgb = targetColorElem.style.backgroundColor || bar.color;
        setBar({
          color: targetColorRgb,
          pointerLeft: getElemDocumentCoords$1(targetColorElem).left - left || bar.pointerLeft
        });
      }
    }
  };
  var handleRgbInput = function handleRgbInput(value, index) {
    if (value > 255 || Number.isNaN(value)) {
      return;
    }
    var rgbArr = rgbColorValue;
    rgbArr[index] = value;
    var newHexColor = rgbToHex.apply(void 0, _toConsumableArray(rgbArr));
    setRgbColorValue(_toConsumableArray(rgbArr));
    if (validateHex(newHexColor)) {
      setRangePicker(_objectSpread$4(_objectSpread$4({}, rangePicker), {}, {
        color: newHexColor
      }));
      changeBarPosByColor(newHexColor);
      changeRangePickerPointerPosByColor(newHexColor);
    }
  };
  var updateRgb = function updateRgb(color) {
    if (color.includes('rgb')) {
      setRgbColorValue(rgbStringToArray(color));
    } else {
      setRgbColorValue(hexToRgb(color));
    }
  };
  var getHexColor = function getHexColor(color) {
    return isTransparentColor(color) ? transparentColorHex : color;
  };
  var changeRangePickerPointerPosByColor = function changeRangePickerPointerPosByColor(color) {
    if (rangePickerRef !== null) {
      var _ref3 = getElemDocumentCoords$1(rangePickerRef),
        width = _ref3.width,
        height = _ref3.height;
      var colorHsl = colorToHsl(color);
      var colorHsv = hslToHsv(colorHsl[0], colorHsl[1] / 100, colorHsl[2] / 100);
      var left = mapNumber$1(colorHsv[1], 0, 100, 0, width);
      var top = height - mapNumber$1(colorHsv[2], 0, 100, 0, height);
      setRangePicker({
        color: getHexColor(color),
        pointer: {
          left: left,
          top: top
        }
      });
      changeBarPosByColor(color);
      updateRgb(color);
      if (typeof onChange === 'function') {
        onChange(getHexColor(color), getRgbColor(color), filterTransparentColor(localPinnedColors));
      }
    }
  };
  var changeRangePickerColorByPosition = function changeRangePickerColorByPosition(left, top, barColor) {
    if (rangePickerRef !== null) {
      var _ref4 = getElemDocumentCoords$1(rangePickerRef),
        width = _ref4.width,
        height = _ref4.height;
      var _colorToHsl3 = colorToHsl(barColor),
        _colorToHsl4 = _slicedToArray(_colorToHsl3, 1),
        barColorHue = _colorToHsl4[0];
      var restrictedLeft = restrictNumber$1(left, 0, width) || 0;
      var restrictedTop = restrictNumber$1(top, 0, height) || 0;
      var hsl = hsvToHsl(barColorHue, restrictedLeft / width, (height - restrictedTop) / height);
      var hexColor = hslToHex(hsl[0], hsl[1], hsl[2]);
      setRangePicker({
        color: hexColor,
        pointer: {
          left: restrictedLeft,
          top: restrictedTop
        }
      });
      if (typeof onChange === 'function') {
        onChange(hexColor, "rgb(".concat(hexToRgb(hexColor).join(', '), ")"), filterTransparentColor(localPinnedColors));
      }
    }
  };
  var changeBarColorByPosition = function changeBarColorByPosition(pointerLeft) {
    var barElem = barRef;
    if (barElem !== null) {
      var _ref5 = getElemDocumentCoords$1(barElem),
        width = _ref5.width;
      var mappedPointerLeft = restrictNumber$1(Math.round(mapNumber$1(pointerLeft, 0, width, 0, colorsHuesCount)), 0, colorsHuesCount);
      var targetColorElem = barElem.querySelector("[data-hue='".concat(mappedPointerLeft, "']"));
      var targetColorRgb = targetColorElem.style.backgroundColor;
      setBar({
        color: targetColorRgb,
        pointerLeft: restrictNumber$1(pointerLeft, 0, width)
      });
      return targetColorRgb;
    }
    return bar.color;
  };
  var updateBarColor = function updateBarColor(e) {
    var barElem = barRef;
    if (barElem !== null) {
      var _e$touches;
      var _ref6 = getElemDocumentCoords$1(barElem),
        left = _ref6.left;
      var pointerEvent = ((_e$touches = e.touches) === null || _e$touches === void 0 ? void 0 : _e$touches[0]) || e;
      var barColor = changeBarColorByPosition(pointerEvent.pageX - left);
      changeRangePickerColorByPosition(rangePicker.pointer.left, rangePicker.pointer.top, barColor);
    }
  };
  var updateRangePickerColor = function updateRangePickerColor(e) {
    var rangePickerElem = rangePickerRef;
    if (rangePickerElem !== null) {
      var _ref7 = getElemDocumentCoords$1(rangePickerElem),
        left = _ref7.left,
        top = _ref7.top,
        height = _ref7.height,
        width = _ref7.width;
      var pointerLeft = e ? restrictNumber$1(e.pageX - left, 0, width) : rangePicker.pointer.left || 0;
      var pointerTop = e ? restrictNumber$1(e.pageY - top, 0, height) : rangePicker.pointer.left || 0;
      changeRangePickerColorByPosition(pointerLeft, pointerTop, bar.color);
    }
  };
  var moveBarPointerByArrows = function moveBarPointerByArrows(e) {
    if (e.key !== 'ArrowLeft' && e.key !== 'ArrowRight') {
      return;
    }
    changeBarColorByPosition(bar.pointerLeft + (e.key === 'ArrowLeft' ? -1 : 1));
  };
  var moveRangePickerPointerByArrows = function moveRangePickerPointerByArrows(e) {
    var currentDirection = 0;
    if (e.key === 'ArrowLeft' || e.key === 'ArrowUp') {
      currentDirection = -1;
    } else if (e.key === 'ArrowRight' || e.key === 'ArrowDown') {
      currentDirection = 1;
    }
    if (currentDirection) {
      changeRangePickerColorByPosition((rangePicker.pointer.left || 0) + (['ArrowLeft', 'ArrowRight'].includes(e.key) ? currentDirection : 0), (rangePicker.pointer.top || 0) + (['ArrowUp', 'ArrowDown'].includes(e.key) ? currentDirection : 0), bar.color);
    }
  };
  var validateHexAndUpdate = function validateHexAndUpdate(color) {
    var testHex = validateHex(color);
    if (testHex) {
      changeRangePickerPointerPosByColor(color);
    }
    setHexInputValue(color);
  };
  React.useEffect(function () {
    changeBarPosByColor(rangePicker.color);
    changeRangePickerPointerPosByColor(rangePicker.color);
  }, [barRef]);
  React.useEffect(function () {
    setHexInputValue(rangePicker.color);
    updateRgb(rangePicker.color);
  }, [rangePicker.color]);
  var barColors = React.useMemo(function () {
    return _toConsumableArray(new Array(colorsHuesCount + 1)).map(function (_, h) {
      return /*#__PURE__*/React.createElement(Styled$s.BarColorStop, {
        key: h,
        $color: "hsl(".concat(h, ", 100%, 50%)"),
        "data-hue": h
      });
    });
  }, []);
  var barPointSliding = useDrag(updateBarColor, updateBarColor, null);
  var rangePickerPointSliding = useDrag(updateRangePickerColor, updateRangePickerColor, null);
  return /*#__PURE__*/React.createElement(Styled$s.ColorPickerWrapper, _extends({
    ref: ref
  }, rest), /*#__PURE__*/React.createElement(Styled$s.ColorPickerAction, null, /*#__PURE__*/React.createElement(Styled$s.SelectWrapper, null, /*#__PURE__*/React.createElement(Styled$s.Select, {
    value: inputType
  }, /*#__PURE__*/React.createElement(Select$2, {
    size: "sm",
    value: inputType,
    MenuProps: _objectSpread$4({
      zIndex: 11112
    }, containerProps),
    onChange: function onChange(ev) {
      return setInputType(ev);
    },
    fullWidth: true,
    hideEllipsis: true
  }, /*#__PURE__*/React.createElement(MenuItem$1, {
    value: "hex"
  }, "Hex"), /*#__PURE__*/React.createElement(MenuItem$1, {
    value: "rgb"
  }, "RGB"))), inputType === 'hex' ? /*#__PURE__*/React.createElement(Input$2, {
    size: "sm",
    error: !/^#(?:[0-9a-fA-F]{3,4}){1,2}$/i.test(rangePicker.color),
    value: hexInputValue,
    onChange: function onChange(e) {
      return validateHexAndUpdate(e.target.value);
    },
    style: {
      width: '45%'
    }
  }) : rgbColorValue.map(function (rgb, index) {
    return /*#__PURE__*/React.createElement(Input$2, {
      key: index,
      size: "sm",
      value: rgb,
      onChange: function onChange(e) {
        var _e$target;
        return handleRgbInput(Number((_e$target = e.target) === null || _e$target === void 0 ? void 0 : _e$target.value), index);
      },
      style: {
        width: '20%'
      }
    });
  })), rangePicker.color !== transparentColorHex && !hidePinIcon && /*#__PURE__*/React.createElement(Styled$s.ColorPickerIcon, {
    onClick: function onClick() {
      return localPinnedColors.some(function (checkedColor) {
        return isColorChecked(checkedColor);
      }) ? handlePinnedColors(rangePicker.color, 'delete') : handlePinnedColors(rangePicker.color, 'add');
    }
  }, localPinnedColors.some(function (checkedColor) {
    return isColorChecked(checkedColor);
  }) ? /*#__PURE__*/React.createElement(DeleteOutline, null) : /*#__PURE__*/React.createElement(PinOutline, null))), /*#__PURE__*/React.createElement(Styled$s.RangePickerWrapper, _extends({
    ref: setRangePickerRef,
    color: bar.color
  }, rangePickerPointSliding), /*#__PURE__*/React.createElement(Styled$s.WhiteGradient, null), /*#__PURE__*/React.createElement(Styled$s.BlackGradient, null), /*#__PURE__*/React.createElement(Styled$s.ColorPointer, {
    tabIndex: -1,
    left: rangePicker.pointer.left || 0,
    top: rangePicker.pointer.top || 0,
    onKeyDown: moveRangePickerPointerByArrows,
    pointerColor: hexInputValue,
    considerTopWidth: true
  })), /*#__PURE__*/React.createElement(Styled$s.BarWrapper, barPointSliding, /*#__PURE__*/React.createElement(Styled$s.Bar, {
    ref: setBarRef
  }, /*#__PURE__*/React.createElement("tbody", null, /*#__PURE__*/React.createElement("tr", null, barColors))), /*#__PURE__*/React.createElement(Styled$s.ColorPointer, {
    tabIndex: -1,
    left: bar.pointerLeft,
    onKeyDown: moveBarPointerByArrows,
    considerTopWidth: false,
    pointerColor: hexInputValue,
    style: {
      top: -3
    }
  })), /*#__PURE__*/React.createElement(Styled$s.ColorItemsContainer, null, localPinnedColors.map(function (color) {
    return /*#__PURE__*/React.createElement("div", {
      className: "item",
      key: color
    }, /*#__PURE__*/React.createElement(ColorItem$1, {
      value: color,
      checked: isColorChecked(color),
      onChange: function onChange(ev) {
        return changeRangePickerPointerPosByColor(ev.target.value);
      }
    }));
  })));
});
var ColorPicker$1 = ColorPicker;

var colorButtonMixin = _defineProperty(_defineProperty(_defineProperty({}, IconButtonColor.Primary, function (_ref) {
  var palette = _ref.theme.palette,
    active = _ref.active;
  return styled.css(["background-color:", ";color:", ";&:hover{background-color:", ";}&:focus{background-color:", ";}&:active{background-color:", ";}", " &:disabled{color:", ";background:", ";cursor:default;}"], palette[Color.AccentStateless], palette[Color.IconsInvert], palette[Color.AccentPrimaryHover], palette[Color.AccentPrimaryActive], palette[Color.AccentPrimaryActive], active && styled.css(["background-color:", ";&:hover,&:focus{background-color:", ";}"], palette[Color.AccentPrimaryActive], palette[Color.AccentPrimaryActive]), palette[Color.BordersDisabled], palette[Color.Accent_1_2_Opacity]);
}), IconButtonColor.Secondary, function (_ref2) {
  var palette = _ref2.theme.palette,
    active = _ref2.active;
  return styled.css(["background-color:", ";color:", ";border:1px solid ", ";&:hover{color:", ";background-color:", ";}&:focus{background-color:", ";color:", ";border:1px solid ", ";}&:active{color:", ";background-color:", ";}", " &:disabled{color:", ";background:", ";border:none;cursor:default;}"], palette[Color.BackgroundStateless], palette[Color.AccentStateless], palette[Color.AccentStateless], palette[Color.IconsInvert], palette[Color.AccentPrimaryHover], palette[Color.Accent_1_2_Opacity], palette[Color.AccentPrimaryActive], palette[Color.AccentPrimaryActive], palette[Color.IconsInvert], palette[Color.AccentPrimaryActive], active && styled.css(["color:", ";background-color:", ";&:hover,&:focus{color:", ";background-color:", ";}"], palette[Color.IconsInvert], palette[Color.AccentPrimaryActive], palette[Color.IconsInvert], palette[Color.AccentPrimaryActive]), palette[Color.BordersDisabled], palette[Color.Accent_1_2_Opacity]);
}), IconButtonColor.Basic, function (_ref3) {
  var palette = _ref3.theme.palette,
    active = _ref3.active;
  return styled.css(["background-color:transparent;color:", ";border:none;&:hover{background-color:", ";color:", ";}&:focus{background-color:", ";color:", ";}&:active{background-color:", ";color:", ";}", " &:disabled{background-color:transparent;color:", ";cursor:default;}"], palette[Color.IconsPrimary], palette[Color.BackgroundHover], palette[Color.IconsPrimaryHover], palette[Color.BackgroundActive], palette[Color.LinkActive], palette[Color.BackgroundActive], palette[Color.LinkActive], active && styled.css(["background-color:", ";color:", ";&:hover,&:focus{background-color:", ";color:", ";}"], palette[Color.BackgroundActive], palette[Color.LinkActive], palette[Color.BackgroundActive], palette[Color.LinkActive]), palette[Color.BordersDisabled]);
});
var squarePaddingMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, ButtonSize.Xs, styled.css(["padding:6px;"])), ButtonSize.Sm, styled.css(["padding:9px;"])), ButtonSize.Md, styled.css(["padding:12px;"])), ButtonSize.Lg, styled.css(["padding:11px;"]));

var baseClassName$d = 'IconButton';
var IconButton$2 = /*#__PURE__*/styled(BStyled.Button).attrs({
  className: generateClassNames(baseClassName$d, 'root')
}).withConfig({
  componentId: "sc-10edh45-0"
})(function (_ref) {
  var theme = _ref.theme,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? IconButtonColor.Secondary : _ref$color,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? ButtonSize.Md : _ref$size,
    _ref$$active = _ref.$active,
    $active = _ref$$active === void 0 ? false : _ref$$active;
  return styled.css(["", " ", ""], squarePaddingMixin[size], colorButtonMixin[color] ? colorButtonMixin[color]({
    theme: theme,
    active: $active
  }) : colorButtonMixin[IconButtonColor.Basic]({
    theme: theme,
    active: $active
  }));
});
var Styled$q = applyDisplayNames({
  IconButton: IconButton$2
});
var IconButtonStyled = Styled$q;

var _excluded$i = ["children", "size", "color", "active"];
var IconButton = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? ButtonSize.Md : _ref$size,
    _ref$color = _ref.color,
    color = _ref$color === void 0 ? IconButtonColor.Primary : _ref$color,
    _ref$active = _ref.active,
    active = _ref$active === void 0 ? false : _ref$active,
    rest = _objectWithoutProperties(_ref, _excluded$i);
  return /*#__PURE__*/React.createElement(IconButtonStyled.IconButton, _extends({
    type: "button"
  }, rest, {
    size: size,
    color: color,
    $active: active,
    ref: ref
  }), children && (typeof children === 'function' ? children({
    size: getIconSize$2(size)
  }) : children));
});
var IconButton$1 = IconButton;

var onClickByMouseDown = function onClickByMouseDown(event, callback) {
  event.preventDefault();
  if (event.button !== 0) {
    return;
  }
  if (callback) {
    callback(event);
  }
};

var errorMixin = function errorMixin(_ref) {
  var palette = _ref.theme.palette;
  return styled.css(["background:", " !important;border:1px solid ", " !important;"], palette[Color.BackgroundSecondary], palette[Color.Error]);
};
var heightTextAreaMixin = _defineProperty(_defineProperty({}, InputSize.Sm, function () {
  return styled.css(["height:136px;"]);
}), InputSize.Md, function () {
  return styled.css(["height:152px;"]);
});
var sizeTextAreaMixin = _defineProperty(_defineProperty({}, InputSize.Sm, function (_ref2) {
  var font = _ref2.theme.typography.font;
  return styled.css(["padding:8px 12px;", ""], font[FontVariant.InputMd]);
}), InputSize.Md, function (_ref3) {
  var font = _ref3.theme.typography.font;
  return styled.css(["padding:8px 16px;", ""], font[FontVariant.InputLg]);
});

var baseClassName$c = 'Textarea';
var Textarea$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$c, 'root')
}).withConfig({
  componentId: "sc-1usif6k-0"
})(function (_ref) {
  var _ref$size = _ref.size,
    size = _ref$size === void 0 ? InputSize.Md : _ref$size,
    _ref$error = _ref.error,
    error = _ref$error === void 0 ? false : _ref$error,
    _ref$fullWidth = _ref.fullWidth,
    fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
    _ref$readOnly = _ref.readOnly,
    readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$autoSize = _ref.autoSize,
    autoSize = _ref$autoSize === void 0 ? false : _ref$autoSize,
    theme = _ref.theme;
  return styled.css(["position:relative;display:inline-flex;flex-direction:column;align-items:flex-end;justify-content:space-between;cursor:text;box-sizing:border-box;transition:all 100ms ease-out;width:", ";pointer-events:", ";background-color:", ";border-radius:", ";border:1px solid ", ";color:", ";", " ", " &:hover{color:", ";}", " ", ""], fullWidth ? '100%' : '300px', disabled ? 'none' : 'auto', getInputBackgroundColor(readOnly, disabled), theme.shape.borderRadius[BorderRadiusSize.Md], getInputBorderColor(readOnly, disabled), disabled ? theme.palette[Color.TextPlaceholder] : theme.palette[Color.TextPrimary], heightTextAreaMixin[size], !readOnly && !disabled && styled.css(["&:focus-within{background-color:", "!important;border:1px solid ", ";&:hover{border:1px solid ", ";}}&:hover{background-color:", ";border:1px solid ", ";}"], theme.palette[Color.BackgroundSecondary], theme.palette[Color.AccentStateless], theme.palette[Color.AccentStateless], theme.palette[Color.BackgroundStateless], theme.palette[Color.BordersPrimaryHover]), getInputTextColor(readOnly, disabled), error && errorMixin, autoSize && styled.css(["width:auto;height:auto;"]));
});
var Base = /*#__PURE__*/styled.textarea.attrs({
  className: generateClassNames(baseClassName$c, 'Base')
}).withConfig({
  componentId: "sc-1usif6k-1"
})(function (_ref2) {
  var palette = _ref2.theme.palette,
    _ref2$readOnly = _ref2.readOnly,
    readOnly = _ref2$readOnly === void 0 ? false : _ref2$readOnly,
    _ref2$size = _ref2.size,
    size = _ref2$size === void 0 ? InputSize.Md : _ref2$size;
  return styled.css(["display:block;width:100%;height:100%;color:inherit;outline:none;resize:none;min-width:0;margin:0;padding:0;border:0;background-color:transparent;outline:none;font-size:inherit;line-height:inherit;color:inherit;font-weight:inherit;font-family:inherit;box-sizing:border-box;flex:1;", " ", ";&::placeholder{color:", ";}::-webkit-scrollbar{width:12px;}::-webkit-scrollbar-track{width:8px;}::-webkit-scrollbar-thumb{background:", ";border-radius:8px;border:4px solid ", ";}"], readOnly && "padding-bottom: 0px;", sizeTextAreaMixin[size], palette[Color.TextPlaceholder], palette[Color.BorderPrimaryStateless], palette[Color.BackgroundStateless]);
});
var ActionsButtonsWrapper = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$c, 'ActionsButtonsWrapper')
}).withConfig({
  componentId: "sc-1usif6k-2"
})(function (_ref3) {
  var _ref3$size = _ref3.size,
    size = _ref3$size === void 0 ? InputSize.Md : _ref3$size;
  return styled.css(["display:flex;align-items:center;width:100%;column-gap:12px;box-sizing:border-box;", ";.SfxButton-Label{font-weight:500;}"], sizeTextAreaMixin[size]);
});
var CopyIcon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$c, 'CopyIcon')
}).withConfig({
  componentId: "sc-1usif6k-3"
})(function (_ref4) {
  var palette = _ref4.theme.palette;
  return styled.css(["cursor:pointer;color:", ";margin-left:auto;"], palette[Color.IconsPrimary]);
});
var Styled$o = applyDisplayNames({
  Textarea: Textarea$2,
  CopyIcon: CopyIcon,
  Base: Base,
  ActionsButtonsWrapper: ActionsButtonsWrapper
});
var Styled$p = Styled$o;

var _excluded$h = ["fullWidth", "size", "value", "readOnly", "disabled", "error", "cols", "rows", "copyTextMessage", "copySuccessIcon", "showActionButton", "showClearButton", "hideCopyIcon", "disableActionButton", "isActionButtonLoading", "actionButtonLabel", "clearAllButtonLabel", "onClickActionButton", "onClear", "onChange"];
function ownKeys$3(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$3(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$3(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$3(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var Textarea = intrinsicComponent$1(function (_ref, ref) {
  var _inputRef$current;
  var _ref$fullWidth = _ref.fullWidth,
    fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
    _ref$size = _ref.size,
    size = _ref$size === void 0 ? InputSize.Md : _ref$size,
    value = _ref.value,
    _ref$readOnly = _ref.readOnly,
    readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    _ref$error = _ref.error,
    error = _ref$error === void 0 ? false : _ref$error,
    cols = _ref.cols,
    rows = _ref.rows,
    _ref$copyTextMessage = _ref.copyTextMessage,
    copyTextMessage = _ref$copyTextMessage === void 0 ? 'Copied!' : _ref$copyTextMessage,
    _ref$copySuccessIcon = _ref.copySuccessIcon,
    copySuccessIcon = _ref$copySuccessIcon === void 0 ? /*#__PURE__*/React.createElement(Success$1, {
      size: 16
    }) : _ref$copySuccessIcon,
    _ref$showActionButton = _ref.showActionButton,
    showActionButton = _ref$showActionButton === void 0 ? false : _ref$showActionButton,
    _ref$showClearButton = _ref.showClearButton,
    showClearButton = _ref$showClearButton === void 0 ? false : _ref$showClearButton,
    _ref$hideCopyIcon = _ref.hideCopyIcon,
    hideCopyIcon = _ref$hideCopyIcon === void 0 ? true : _ref$hideCopyIcon,
    _ref$disableActionBut = _ref.disableActionButton,
    disableActionButton = _ref$disableActionBut === void 0 ? false : _ref$disableActionBut,
    _ref$isActionButtonLo = _ref.isActionButtonLoading,
    isActionButtonLoading = _ref$isActionButtonLo === void 0 ? false : _ref$isActionButtonLo,
    _ref$actionButtonLabe = _ref.actionButtonLabel,
    actionButtonLabel = _ref$actionButtonLabe === void 0 ? 'Action' : _ref$actionButtonLabe,
    _ref$clearAllButtonLa = _ref.clearAllButtonLabel,
    clearAllButtonLabel = _ref$clearAllButtonLa === void 0 ? 'Clear all' : _ref$clearAllButtonLa,
    onClickActionButton = _ref.onClickActionButton,
    onClear = _ref.onClear,
    onChange = _ref.onChange,
    rest = _objectWithoutProperties(_ref, _excluded$h);
  var inputRef = React.useRef(null);
  var textareaRef = useForkRef(inputRef, ref);
  var _useState = React.useState(false),
    _useState2 = _slicedToArray(_useState, 2),
    isHovering = _useState2[0],
    setIsHovering = _useState2[1];
  var _useState3 = React.useState({}),
    _useState4 = _slicedToArray(_useState3, 2),
    overflowStyles = _useState4[0],
    setOverflowStyles = _useState4[1];
  var _useState5 = React.useState(false),
    _useState6 = _slicedToArray(_useState5, 2),
    showCopyMessage = _useState6[0],
    setShowCopyMessage = _useState6[1];
  var _useState7 = React.useState(value),
    _useState8 = _slicedToArray(_useState7, 2),
    inputValue = _useState8[0],
    setInputValue = _useState8[1];
  var showCopyIcon = !!(isHovering && inputValue !== null && inputValue !== void 0 && inputValue.length && !hideCopyIcon);
  var actionButtonHandler = function actionButtonHandler(event) {
    if (onClickActionButton) {
      onClickActionButton(event);
    }
  };
  var clearAllHandler = function clearAllHandler(event) {
    setInputValue('');
    if (onClear) {
      onClear(event);
    }
  };
  var onChangeHandler = function onChangeHandler(event) {
    setInputValue(event.target.value);
    if (onChange) {
      onChange(event);
    }
  };
  var copyIconHandler = function copyIconHandler() {
    if (showCopyIcon) {
      handleCopyIcon(inputValue, setShowCopyMessage);
    }
  };
  React.useEffect(function () {
    var current = inputRef.current;
    if (current && current.scrollHeight > current.clientHeight) {
      setOverflowStyles({
        paddingRight: size === Size$2.Md ? '4px' : '0px'
      });
    }
  }, [(_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.scrollHeight, size]);
  React.useEffect(function () {
    setTimeout(function () {
      return setShowCopyMessage(false);
    }, 2000);
  }, [showCopyMessage]);
  React.useEffect(function () {
    setInputValue(value);
  }, [value]);
  var handleEntering = function handleEntering() {
    setTimeout(function () {
      setIsHovering(true);
    }, 150);
  };
  var handleLeaving = function handleLeaving() {
    setTimeout(function () {
      setIsHovering(false);
    }, 200);
  };
  var renderCopyText = function renderCopyText() {
    return /*#__PURE__*/React.createElement(StyledInput.NotificationBox, {
      size: size,
      isTextarea: true
    }, /*#__PURE__*/React.createElement(StyledInput.NotificationIcon, null, copySuccessIcon), /*#__PURE__*/React.createElement(StyledInput.NotificationText, null, copyTextMessage));
  };
  return /*#__PURE__*/React.createElement(Styled$p.Textarea, {
    size: size,
    value: inputValue,
    onMouseEnter: handleEntering,
    onMouseLeave: handleLeaving,
    readOnly: readOnly,
    disabled: disabled,
    fullWidth: Boolean(fullWidth),
    error: error,
    autoSize: Boolean(cols) || Boolean(rows)
  }, /*#__PURE__*/React.createElement(Styled$p.Base, _extends({}, rest, {
    value: inputValue,
    ref: textareaRef,
    size: size,
    onChange: onChangeHandler,
    readOnly: readOnly,
    disabled: disabled,
    style: _objectSpread$3({}, overflowStyles)
  })), (showActionButton || showClearButton || showCopyIcon) && /*#__PURE__*/React.createElement(Styled$p.ActionsButtonsWrapper, {
    size: size
  }, showActionButton && /*#__PURE__*/React.createElement(Button$1, {
    color: "link-primary",
    size: "sm",
    disabled: disableActionButton,
    loading: isActionButtonLoading,
    onMouseDown: function onMouseDown(event) {
      return onClickByMouseDown(event, actionButtonHandler);
    }
  }, actionButtonLabel), showClearButton && /*#__PURE__*/React.createElement(Button$1, {
    color: "link-secondary",
    size: "sm",
    onMouseDown: function onMouseDown(event) {
      return onClickByMouseDown(event, clearAllHandler);
    }
  }, clearAllButtonLabel), showCopyIcon && /*#__PURE__*/React.createElement(Styled$p.CopyIcon, {
    size: size,
    onMouseDown: function onMouseDown(event) {
      return onClickByMouseDown(event, copyIconHandler);
    }
  }, /*#__PURE__*/React.createElement(CopyOutline$1, {
    size: getIconSize$2(size)
  }), showCopyMessage && renderCopyText())));
});
var Textarea$1 = Textarea;

var Type = {
  Input: 'input',
  Textarea: 'textarea'
};

var baseClassName$b = 'InputGroup';
var InputGroup$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$b, 'root')
}).withConfig({
  componentId: "sc-zhtjwh-0"
})(["", "{margin-top:4px;}", "{margin-bottom:4px;}"], StyledFormHint.FormHint, StyledLabel.Label);
var Styled$n = applyDisplayNames({
  InputGroup: InputGroup$2
});
var StyledInputGroup = Styled$n;

var _excluded$g = ["type", "error", "label", "hint", "LabelProps", "InputProps", "inputProps", "inputRef", "TextareaProps", "readOnly", "disabled", "size", "value", "hideCopyIcon", "copyTextMessage", "copySuccessIcon", "placeholder", "fullWidth", "onChange"];
var InputGroup = intrinsicComponent$1(function (_ref, ref) {
  var _ref$type = _ref.type,
    type = _ref$type === void 0 ? Type.Input : _ref$type,
    _ref$error = _ref.error,
    error = _ref$error === void 0 ? false : _ref$error,
    label = _ref.label,
    hint = _ref.hint,
    LabelPropsData = _ref.LabelProps,
    InputProps = _ref.InputProps,
    inputProps = _ref.inputProps,
    inputRef = _ref.inputRef,
    TextareaPropsData = _ref.TextareaProps,
    _ref$readOnly = _ref.readOnly,
    readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,
    disabled = _ref.disabled,
    size = _ref.size,
    value = _ref.value,
    hideCopyIcon = _ref.hideCopyIcon,
    _ref$copyTextMessage = _ref.copyTextMessage,
    copyTextMessage = _ref$copyTextMessage === void 0 ? 'Copied!' : _ref$copyTextMessage,
    _ref$copySuccessIcon = _ref.copySuccessIcon,
    copySuccessIcon = _ref$copySuccessIcon === void 0 ? /*#__PURE__*/React.createElement(Success$1, {
      size: 16
    }) : _ref$copySuccessIcon,
    placeholder = _ref.placeholder,
    fullWidth = _ref.fullWidth,
    _onChange = _ref.onChange,
    rest = _objectWithoutProperties(_ref, _excluded$g);
  var renderLabel = function renderLabel() {
    if (label) {
      if (typeof label === 'function') {
        return label({
          error: error
        });
      }
      if (_typeof(label) === 'object') {
        return label;
      }
      return /*#__PURE__*/React.createElement(Label$6, _extends({
        size: size,
        disabled: disabled
      }, LabelPropsData || {}), label);
    }
    return null;
  };
  var renderField = function renderField() {
    var fieldProps = {
      value: value,
      readOnly: readOnly,
      disabled: disabled,
      size: size,
      error: error,
      placeholder: placeholder,
      hideCopyIcon: hideCopyIcon,
      copyTextMessage: copyTextMessage,
      copySuccessIcon: copySuccessIcon,
      fullWidth: fullWidth
    };
    if (type === Type.Input) {
      return /*#__PURE__*/React.createElement(Input$2, _extends({}, fieldProps, rest, inputProps, {
        InputProps: InputProps,
        ref: inputRef,
        readOnly: readOnly,
        disabled: disabled,
        onChange: _onChange
      }));
    }
    if (type === Type.Textarea) {
      return /*#__PURE__*/React.createElement(Textarea$1, _extends({}, fieldProps, TextareaPropsData || {}, {
        onChange: function onChange(event) {
          return _onChange(event);
        }
      }));
    }
    return null;
  };
  var renderHint = function renderHint() {
    if (hint) {
      if (typeof hint === 'function') {
        return hint({
          error: error
        });
      }
      if (_typeof(hint) === 'object') {
        return hint;
      }
      return /*#__PURE__*/React.createElement(FormHint$1, {
        size: size,
        error: error,
        disabled: disabled
      }, hint);
    }
    return null;
  };
  return /*#__PURE__*/React.createElement(StyledInputGroup.InputGroup, {
    ref: ref
  }, renderLabel(), renderField(), renderHint());
});
var InputGroup$1 = InputGroup;

function _objectDestructuringEmpty(t) {
  if (null == t) throw new TypeError("Cannot destructure " + t);
}

var Size = {
  Xs: 'xs',
  Sm: 'sm',
  Md: 'md',
  Lg: 'lg',
  Xl: 'xl'
};

var ModalMenuContext = /*#__PURE__*/React__namespace.createContext({
  modalOpened: false
});
if (process.env.NODE_ENV !== 'production') {
  ModalMenuContext.displayName = 'ModalMenuContext';
}
var ModalMenuContext$1 = ModalMenuContext;

var modalSizeMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Size.Xs, styled.css(["max-width:300px;"])), Size.Sm, styled.css(["max-width:600px;"])), Size.Md, styled.css(["max-width:960px;"])), Size.Lg, styled.css(["max-width:1280px;"])), Size.Xl, styled.css(["max-width:1920px;"]));

var baseClassName$a = 'Modal';
var Wrapper = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$a, 'Wrapper')
}).withConfig({
  componentId: "sc-80m07l-0"
})(function (_ref) {
  var open = _ref.open;
  return styled.css(["position:fixed;right:0px;bottom:0px;top:0px;left:0px;z-index:1200;visibility:", ";"], open ? 'visible' : 'hidden');
});
var Overlay = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$a, 'Overlay')
}).withConfig({
  componentId: "sc-80m07l-1"
})(function (_ref2) {
  var open = _ref2.open;
  return styled.css(["position:fixed;right:0px;bottom:0px;top:0px;left:0px;background-color:rgba(0,0,0,0.5);z-index:-1;transition:opacity 251ms cubic-bezier(0.4,0,0.2,1) 0ms;opacity:", ";"], open ? '1' : '0');
});
var Container = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$a, 'Container')
}).withConfig({
  componentId: "sc-80m07l-2"
})(function (_ref3) {
  var theme = _ref3.theme,
    _ref3$open = _ref3.open,
    open = _ref3$open === void 0 ? false : _ref3$open,
    _ref3$fullWidth = _ref3.fullWidth,
    fullWidth = _ref3$fullWidth === void 0 ? false : _ref3$fullWidth,
    _ref3$maxWidth = _ref3.maxWidth,
    maxWidth = _ref3$maxWidth === void 0 ? Size.Sm : _ref3$maxWidth;
  return styled.css(["position:absolute;overflow-x:hidden;overflow-y:auto;transition:opacity 251ms cubic-bezier(0.4,0,0.2,1) 0ms,transform 167ms cubic-bezier(0.4,0,0.2,1) 0ms;outline:0;border-radius:", ";background-color:", ";box-shadow:0px 2px 4px ", ";visibility:", ";opacity:", ";display:flex;max-height:calc(100% - 64px);flex-direction:column;", " ", " top:50%;left:50%;transform:translate(-50%,-50%);"], theme.shape.borderRadius[BorderRadiusSize.Lg], theme.palette[Color.BackgroundSecondary], theme.palette[Color.LightShadow], open ? 'visible' : 'hidden', open ? '1' : '0', fullWidth && styled.css(["width:calc(100% - 64px);"]), modalSizeMixin[maxWidth]);
});
var Modal$3 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$a, 'root')
}).withConfig({
  componentId: "sc-80m07l-3"
})(function () {
  return styled.css(["position:relative;padding-top:8px;padding-bottom:8px;margin:0;padding:0;outline:0;display:flex;flex-direction:column;"]);
});
var Styled$l = applyDisplayNames({
  Modal: Modal$3,
  Wrapper: Wrapper,
  Overlay: Overlay,
  Container: Container
});
var Styled$m = Styled$l;

var _excluded$f = ["children", "open", "onClose", "onDragOver", "onDrop", "maxWidth", "fullWidth", "modalStyles", "hideOverlay", "disableOverlayClick"];
function ownKeys$2(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$2(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$2(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var isValidSingleFragmentChildren = function isValidSingleFragmentChildren(children) {
  return children && /*#__PURE__*/React.isValidElement(children) && React.Children.count(children) === 1 && children.type === React.Fragment;
};
var Modal$1 = intrinsicComponent$1(function (_ref, ref) {
  var _children = _ref.children,
    _ref$open = _ref.open,
    open = _ref$open === void 0 ? false : _ref$open,
    onClose = _ref.onClose,
    onDragOver = _ref.onDragOver,
    onDrop = _ref.onDrop,
    _ref$maxWidth = _ref.maxWidth,
    maxWidth = _ref$maxWidth === void 0 ? Size.Xs : _ref$maxWidth,
    _ref$fullWidth = _ref.fullWidth,
    fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
    modalStyles = _ref.modalStyles,
    _ref$hideOverlay = _ref.hideOverlay,
    hideOverlay = _ref$hideOverlay === void 0 ? false : _ref$hideOverlay,
    _ref$disableOverlayCl = _ref.disableOverlayClick,
    disableOverlayClick = _ref$disableOverlayCl === void 0 ? false : _ref$disableOverlayCl,
    rest = _objectWithoutProperties(_ref, _excluded$f);
  var children = isValidSingleFragmentChildren(_children) ? _children.props.children : _children;

  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
  var target = document.querySelector('body');
  React.useEffect(function () {
    if (open) {
      document.body.classList.add('Modal-open');
    } else {
      document.body.classList.remove('Modal-open');
    }
    return function () {
      document.body.classList.remove('Modal-open');
    };
  }, [open]);
  var handleClose = function handleClose() {
    if (typeof onClose === 'function') {
      onClose();
    }
  };
  React.useEffect(function () {
    var keyListener = function keyListener(ev) {
      if (ev.key === 'Escape') {
        handleClose();
      }
    };
    document.addEventListener('keydown', keyListener);
    return function () {
      return document.removeEventListener('keydown', keyListener);
    };
  });
  var render = function render() {
    return /*#__PURE__*/React.createElement(ModalMenuContext$1.Provider, {
      value: {
        modalOpened: Boolean(open)
      }
    }, /*#__PURE__*/React.createElement(Styled$m.Wrapper, {
      style: _objectSpread$2({}, modalStyles),
      open: Boolean(open),
      ref: ref,
      onDragOver: onDragOver ? onDragOver : ignoreEvent,
      onDrop: onDrop ? onDrop : ignoreEvent
    }, !hideOverlay && /*#__PURE__*/React.createElement(Styled$m.Overlay, {
      onClick: function onClick() {
        return disableOverlayClick ? null : handleClose();
      },
      open: Boolean(open)
    }), /*#__PURE__*/React.createElement(Styled$m.Container, _extends({}, rest, {
      maxWidth: maxWidth,
      fullWidth: fullWidth,
      open: Boolean(open)
    }), /*#__PURE__*/React.createElement(Styled$m.Modal, null, React.Children.map(children, function (child) {
      if ( /*#__PURE__*/React.isValidElement(child) && child.type.displayName === 'ModalTitle') {
        return /*#__PURE__*/React.cloneElement(child, _objectSpread$2({
          onClose: handleClose
        }, child.props || {}));
      }
      return child;
    })))));
  };
  return /*#__PURE__*/reactDom.createPortal(render(), target);
});
var Modal$2 = Modal$1;

var Align = {
  Left: 'left',
  Center: 'center',
  Right: 'right'
};

var baseClassName$9 = 'ModalActions';
var ModalActions$3 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$9, 'root')
}).withConfig({
  componentId: "sc-1wg6u00-0"
})(function (_ref) {
  var _ref$align = _ref.align,
    align = _ref$align === void 0 ? Align.Center : _ref$align;
  return styled.css(["position:relative;display:flex;align-items:center;padding:24px;justify-content:", ";gap:12px;"], align === Align.Right ? 'flex-end' : align);
});
var Styled$j = applyDisplayNames({
  ModalActions: ModalActions$3
});
var Styled$k = Styled$j;

var _excluded$e = ["children", "align"];
var ModalActions$1 = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    _ref$align = _ref.align,
    align = _ref$align === void 0 ? Align.Center : _ref$align,
    rest = _objectWithoutProperties(_ref, _excluded$e);
  return /*#__PURE__*/React.createElement(Styled$k.ModalActions, _extends({}, rest, {
    align: align,
    ref: ref
  }), children);
});
ModalActions$1.displayName = 'ModalActions';
var ModalActions$2 = ModalActions$1;

var baseClassName$8 = 'ModalContent';
var ModalContent$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$8, 'root')
}).withConfig({
  componentId: "sc-1ng1w0v-0"
})(["position:relative;padding:12px 24px 0px;"]);
var Styled$h = applyDisplayNames({
  ModalContent: ModalContent$2
});
var Styled$i = Styled$h;

var _excluded$d = ["children"];
var ModalContent = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded$d);
  return /*#__PURE__*/React.createElement(Styled$i.ModalContent, _extends({}, rest, {
    ref: ref
  }), children);
});
ModalContent.displayName = 'ModalContent';
var ModalContent$1 = ModalContent;

var Variant$1 = {
  Default: 'default',
  WithIcon: 'with-icon'
};

var baseClassName$7 = 'ModalTitle';
var Icon$1 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$7, 'Icon')
}).withConfig({
  componentId: "sc-l3tf49-0"
})(function (_ref) {
  var palette = _ref.theme.palette;
  return styled.css(["display:flex;margin-bottom:8px;padding:14.5px;border-radius:50%;background:", ";color:", ";"], palette[Color.Accent_1_2_Opacity], palette[Color.AccentStateless]);
});
var LabelPrimary = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$7, 'LabelPrimary')
}).withConfig({
  componentId: "sc-l3tf49-1"
})(function (_ref2) {
  var _ref2$variant = _ref2.variant,
    variant = _ref2$variant === void 0 ? Variant$1.Default : _ref2$variant;
  return styled.css(["font-size:18px;line-height:27px;font-weight:", ";"], variant === Variant$1.Default ? 400 : 500);
});
var LabelSecondary = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$7, 'LabelSecondary')
}).withConfig({
  componentId: "sc-l3tf49-2"
})(["font-size:12px;line-height:14px;margin-top:4px;"]);
var Close = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$7, 'Close')
}).withConfig({
  componentId: "sc-l3tf49-3"
})(function (_ref3) {
  var _ref3$variant = _ref3.variant,
    variant = _ref3$variant === void 0 ? Variant$1.Default : _ref3$variant,
    palette = _ref3.theme.palette;
  return styled.css(["position:absolute;display:flex;top:", "px;right:", "px;color:", ";&:hover{color:", ";}cursor:pointer;"], variant === Variant$1.WithIcon ? 2 : 8, variant === Variant$1.WithIcon ? 2 : 8, palette[Color.IconsSecondary], palette[Color.AccentPrimary]);
});
var ModalTitle$1 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$7, 'root')
}).withConfig({
  componentId: "sc-l3tf49-4"
})(function (_ref4) {
  var _ref4$variant = _ref4.variant,
    variant = _ref4$variant === void 0 ? Variant$1.Default : _ref4$variant,
    _ref4$theme = _ref4.theme,
    palette = _ref4$theme.palette,
    borderRadius = _ref4$theme.shape.borderRadius;
  return styled.css(["position:relative;color:", ";border-radius:", " ", " 0px 0px;", " ", " ", ""], palette[Color.TextPrimary], borderRadius[BorderRadiusSize.Md], borderRadius[BorderRadiusSize.Md], function () {
    var paddingY = variant === Variant$1.WithIcon ? 26 : 14;
    var paddingX = variant === Variant$1.WithIcon ? 12 : 14;
    var paddingLeft = 18;
    var paddingRight = variant === Variant$1.WithIcon ? paddingLeft : 40;
    return styled.css(["padding:", "px ", "px ", "px ", "px;"], paddingY, paddingRight, paddingX, paddingLeft);
  }, variant === Variant$1.Default && styled.css(["background:", ";border-bottom:1px solid ", ";"], palette[Color.BackgroundPrimary], palette[Color.BordersSecondary]), variant === Variant$1.WithIcon && styled.css(["display:flex;align-items:center;flex-direction:column;"]));
});
var Styled$f = applyDisplayNames({
  ModalTitle: ModalTitle$1,
  LabelPrimary: LabelPrimary,
  LabelSecondary: LabelSecondary,
  Close: Close,
  Icon: Icon$1
});
var Styled$g = Styled$f;

var _excluded$c = ["secondary", "onClose", "primaryLabelStyles", "iconShadow", "variant"];
var ModalTitle = intrinsicComponent$1(function (_ref, ref) {
  var secondary = _ref.secondary,
    onClose = _ref.onClose,
    primaryLabelStyles = _ref.primaryLabelStyles,
    _ref$iconShadow = _ref.iconShadow,
    iconShadow = _ref$iconShadow === void 0 ? true : _ref$iconShadow,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? Variant$1.Default : _ref$variant,
    rest = _objectWithoutProperties(_ref, _excluded$c);
  return /*#__PURE__*/React.createElement(Styled$g.ModalTitle, _extends({}, rest, {
    variant: variant,
    ref: ref
  }), rest.icon && /*#__PURE__*/React.createElement(Styled$g.Icon, {
    iconShadow: Boolean(iconShadow)
  }, rest.icon), /*#__PURE__*/React.createElement(Styled$g.LabelPrimary, {
    variant: variant,
    style: primaryLabelStyles
  }, rest.primary), variant === Variant$1.WithIcon && secondary && /*#__PURE__*/React.createElement(Styled$g.LabelSecondary, null, secondary), /*#__PURE__*/React.createElement(Styled$g.Close, {
    variant: variant
  }, /*#__PURE__*/React.createElement(CrossButton$1, {
    size: "lg",
    onClick: onClose
  })));
});
ModalTitle.displayName = 'ModalTitle';
var modalTitle = ModalTitle;

var Status = {
  Success: 'success',
  Info: 'info',
  Error: 'error',
  Warning: 'warning'
};

var baseClassName$6 = 'PopupStatus';
var PopupStatus$3 = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$6, 'root')
}).withConfig({
  componentId: "sc-qash56-0"
})(["display:flex;"]);
var Styled$d = applyDisplayNames({
  PopupStatus: PopupStatus$3
});
var Styled$e = Styled$d;

var _excluded$b = ["status", "notificationBackground"];
var getPopupStatusIcon = function getPopupStatusIcon(status, notificationBackground) {
  switch (status) {
    case Status.Warning:
      return notificationBackground ? /*#__PURE__*/React.createElement(Warning, {
        color: lightPalette[Color.Warning],
        size: 20
      }) : /*#__PURE__*/React.createElement(WarningOutline, {
        color: lightPalette[Color.Warning],
        size: 12
      });
    case Status.Error:
      return notificationBackground ? /*#__PURE__*/React.createElement(Error$1, {
        color: lightPalette[Color.Error],
        size: 20
      }) : /*#__PURE__*/React.createElement(ErrorOutline, {
        color: lightPalette[Color.Error],
        size: 12
      });
    case Status.Info:
      return notificationBackground ? /*#__PURE__*/React.createElement(About, {
        color: lightPalette[Color.Info],
        size: 20
      }) : /*#__PURE__*/React.createElement(InfoOutline, {
        color: lightPalette[Color.Info],
        size: 12
      });
    case Status.Success:
    default:
      return /*#__PURE__*/React.createElement(Success, {
        color: lightPalette[Color.Success],
        size: 20
      });
  }
};
var PopupStatus$1 = intrinsicComponent$1(function (_ref, ref) {
  var status = _ref.status,
    _ref$notificationBack = _ref.notificationBackground,
    notificationBackground = _ref$notificationBack === void 0 ? true : _ref$notificationBack,
    rest = _objectWithoutProperties(_ref, _excluded$b);
  return /*#__PURE__*/React.createElement(Styled$e.PopupStatus, _extends({
    status: status
  }, rest, {
    ref: ref
  }), getPopupStatusIcon(status, notificationBackground));
});
var PopupStatus$2 = PopupStatus$1;

var popupContentMixin = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, Status.Success, function (_ref) {
  var palette = _ref.theme.palette;
  return styled.css(["background-color:", ";"], palette[Color.BackgroundGreen]);
}), Status.Info, function (_ref2) {
  var palette = _ref2.theme.palette;
  return styled.css(["background-color:", ";"], palette[Color.BackgroundBlue]);
}), Status.Error, function (_ref3) {
  var palette = _ref3.theme.palette;
  return styled.css(["background-color:", ";"], palette[Color.BackgroundRed]);
}), Status.Warning, function (_ref4) {
  var palette = _ref4.theme.palette;
  return styled.css(["background-color:", ";"], palette[Color.BackgroundOrange]);
});

var baseClassName$5 = 'PopupContent';
var LabelWrapper = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$5, 'LabelWrapper')
}).withConfig({
  componentId: "sc-njbmnt-0"
})(function (_ref) {
  var palette = _ref.theme.palette;
  return styled.css(["display:flex;flex-grow:1;margin-left:44px;padding:16px;padding-right:0;overflow:hidden;background:", ";"], palette[Color.ButtonPrimaryText]);
});
var Label = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$5, 'Label')
}).withConfig({
  componentId: "sc-njbmnt-1"
})(function (_ref2) {
  var _ref2$theme = _ref2.theme,
    palette = _ref2$theme.palette,
    font = _ref2$theme.typography.font;
  return styled.css(["max-width:calc(100% - 40px);overflow:hidden;text-overflow:ellipsis;color:", ";", ""], palette[Color.TextPrimary], font[FontVariant.TextSmallUp]);
});
var PopupContent$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$5, 'PopupContent')
}).withConfig({
  componentId: "sc-njbmnt-2"
})(function (_ref3) {
  var theme = _ref3.theme;
  return styled.css(["position:relative;display:flex;align-items:center;width:360px;border-radius:4px;box-shadow:0px 2px 6px ", ";"], theme.palette[Color.LargeShadow]);
});
var CloseWrapper = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$5, 'PopupContent')
}).withConfig({
  componentId: "sc-njbmnt-3"
})(function (_ref4) {
  var theme = _ref4.theme;
  return styled.css(["position:absolute;top:0;right:0;display:flex;justify-content:center;align-items:flex-start;box-sizing:border-box;padding:2px;height:fit-content;cursor:pointer;background:", ";border-radius:0 4px 4px 0;height:100%;"], theme.palette[Color.BackgroundStateless]);
});
var PopupStatus = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$5, 'PopupStatus')
}).withConfig({
  componentId: "sc-njbmnt-4"
})(function (_ref5) {
  var _ref5$status = _ref5.status,
    status = _ref5$status === void 0 ? 'success' : _ref5$status;
  return styled.css(["position:absolute;display:flex;left:0;z-index:1;height:100%;min-width:44px;align-items:center;justify-content:center;box-sizing:border-box;border-radius:4px 0 0 4px;", ""], popupContentMixin[status]);
});
var Styled$b = applyDisplayNames({
  PopupContent: PopupContent$2,
  PopupStatus: PopupStatus,
  LabelWrapper: LabelWrapper,
  CloseWrapper: CloseWrapper,
  Label: Label
});
var Styled$c = Styled$b;

var _excluded$a = ["onClose", "message", "status", "popupStatusProps"];
var PopupContent = intrinsicComponent$1(function (_ref, ref) {
  var onClose = _ref.onClose,
    message = _ref.message,
    _ref$status = _ref.status,
    status = _ref$status === void 0 ? Status.Success : _ref$status,
    popupStatusProps = _ref.popupStatusProps,
    rest = _objectWithoutProperties(_ref, _excluded$a);
  return /*#__PURE__*/React.createElement(Styled$c.PopupContent, _extends({}, rest, {
    ref: ref
  }), /*#__PURE__*/React.createElement(Styled$c.PopupStatus, _extends({
    status: status,
    message: message
  }, popupStatusProps), /*#__PURE__*/React.createElement(PopupStatus$2, {
    status: status
  })), /*#__PURE__*/React.createElement(Styled$c.LabelWrapper, null, /*#__PURE__*/React.createElement(Styled$c.Label, null, message)), /*#__PURE__*/React.createElement(Styled$c.CloseWrapper, null, /*#__PURE__*/React.createElement(CrossButton$1, {
    size: "sm",
    onClick: onClose
  })));
});
var PopupContent$1 = PopupContent;

var Horizontal = {
  Center: 'center',
  Left: 'left',
  Right: 'right'
};

var Vertical = {
  Top: 'top',
  Bottom: 'bottom'
};

var positionHorizontalMixin = _defineProperty(_defineProperty(_defineProperty({}, Horizontal.Left, styled.css(["left:25px;right:auto;"])), Horizontal.Center, styled.css(["left:50%;right:auto;transform:translateX(-50%);"])), Horizontal.Right, styled.css(["left:auto;right:25px;"]));
var positionVerticalMixin = _defineProperty(_defineProperty({}, Vertical.Top, styled.css(["top:25px;bottom:auto;"])), Vertical.Bottom, styled.css(["top:auto;bottom:25px;"]));

var baseClassName$4 = 'Popup';
var Popup$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$4, 'root')
}).withConfig({
  componentId: "sc-jmtjri-0"
})(function (_ref) {
  var anchorOrigin = _ref.anchorOrigin;
  return styled.css(["position:fixed;display:flex;align-items:center;justify-content:center;z-index:1400;", " ", ""], positionHorizontalMixin[(anchorOrigin === null || anchorOrigin === void 0 ? void 0 : anchorOrigin.horizontal) || Horizontal.Left], positionVerticalMixin[(anchorOrigin === null || anchorOrigin === void 0 ? void 0 : anchorOrigin.vertical) || Vertical.Bottom]);
});
var Styled$9 = applyDisplayNames({
  Popup: Popup$2
});
var Styled$a = Styled$9;

var _excluded$9 = ["autoHideDuration", "anchorOrigin", "open", "onClose", "status"];
var Popup = intrinsicComponent$1(function (props, ref) {
  var _props$autoHideDurati = props.autoHideDuration,
    autoHideDuration = _props$autoHideDurati === void 0 ? 5000 : _props$autoHideDurati,
    _props$anchorOrigin = props.anchorOrigin,
    anchorOrigin = _props$anchorOrigin === void 0 ? {
      vertical: Vertical.Bottom,
      horizontal: Horizontal.Left
    } : _props$anchorOrigin,
    _props$open = props.open,
    open = _props$open === void 0 ? false : _props$open,
    onClose = props.onClose,
    _props$status = props.status,
    status = _props$status === void 0 ? Status.Success : _props$status,
    rest = _objectWithoutProperties(props, _excluded$9);
  var target = usePortal(generateClassNames('Popup'));
  var _useState = React.useState(autoHideDuration),
    _useState2 = _slicedToArray(_useState, 2),
    hoverHideDuration = _useState2[0],
    setHoverHideDuration = _useState2[1];
  var _useState3 = React.useState(false),
    _useState4 = _slicedToArray(_useState3, 2),
    isHovering = _useState4[0],
    setIsHovering = _useState4[1];
  var handleMouseLeave = function handleMouseLeave() {
    setIsHovering(false);
    setHoverHideDuration(1000);
  };
  React.useEffect(function () {
    if (open) setHoverHideDuration(autoHideDuration);
  }, [open]);
  React.useEffect(function () {
    var timeout = null;
    if (open && !isHovering && hoverHideDuration && typeof onClose === 'function') {
      timeout = setTimeout(onClose, hoverHideDuration);
    }
    return function () {
      if (timeout) {
        clearTimeout(timeout);
      }
    };
  }, [hoverHideDuration, isHovering, open, onClose]);
  var render = function render() {
    if (!open) {
      return null;
    }
    return /*#__PURE__*/React.createElement(Styled$a.Popup, _extends({
      onMouseEnter: function onMouseEnter() {
        return setIsHovering(true);
      },
      onMouseLeave: handleMouseLeave,
      anchorOrigin: anchorOrigin
    }, props), /*#__PURE__*/React.createElement(PopupContent$1, _extends({
      onClose: onClose,
      status: status,
      ref: ref
    }, rest)));
  };
  return /*#__PURE__*/reactDom.createPortal(render(), target);
});
var Popup$1 = Popup;

var baseClassName$3 = 'RotationSlider';
var RotationSliderList = /*#__PURE__*/styled.ul.attrs({
  className: generateClassNames(baseClassName$3, 'list')
}).withConfig({
  componentId: "sc-1xuruq0-0"
})(["display:flex;align-items:center;position:relative;padding:0;width:100%;list-style:none;"]);
var RotationSliderBigDot = /*#__PURE__*/styled.li.attrs({
  className: generateClassNames(baseClassName$3, 'big-dot')
}).withConfig({
  componentId: "sc-1xuruq0-1"
})(function (_ref) {
  var palette = _ref.theme.palette;
  return styled.css(["width:8px;height:8px;border-radius:50%;background-color:", ";cursor:pointer;"], palette[Color.LinkPrimary]);
});
var RotationSliderSmallDotWrapper = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$3, 'small-dot-wrapper')
}).withConfig({
  componentId: "sc-1xuruq0-2"
})(["padding:2px;"]);
var RotationSliderSmallDot = /*#__PURE__*/styled.li.attrs({
  className: generateClassNames(baseClassName$3, 'small-dot')
}).withConfig({
  componentId: "sc-1xuruq0-3"
})(function (_ref2) {
  var palette = _ref2.theme.palette;
  return styled.css(["width:2px;height:2px;border-radius:50%;background-color:", ";cursor:pointer;"], palette[Color.LinkPrimary]);
});
var RotationSliderControl = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$3, 'control')
}).withConfig({
  componentId: "sc-1xuruq0-4"
})(function (_ref3) {
  var palette = _ref3.theme.palette;
  return styled.css(["display:flex;justify-content:center;align-items:center;position:absolute;height:18px;width:2px;transform:translate(-50%,-50%);top:50%;background-color:", ";& > input{border:0px;clip:rect(0px,0px,0px,0px);height:100%;margin:-1px;overflow:hidden;padding:0px;position:absolute;white-space:nowrap;width:100%;direction:ltr;}&::before{position:absolute;content:'';border-radius:inherit;width:100%;height:100%;box-shadow:0px 3px 1px -2px rgb(0 0 0 / 20%),0px 2px 2px 0px rgb(0 0 0 / 14%),0px 1px 5px 0px rgb(0 0 0 / 12%);}&::after{position:absolute;content:'';border-radius:50%;width:42px;height:42px;top:50%;left:50%;transform:translate(-50%,-50%);}"], palette[Color.LinkActive]);
});
var RotationSliderMark = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$3, 'mark')
}).withConfig({
  componentId: "sc-1xuruq0-5"
})(["padding:4px;"]);
var RotationSliderMarkText = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName$3, 'mark-text')
}).withConfig({
  componentId: "sc-1xuruq0-6"
})(function (_ref4) {
  var palette = _ref4.theme.palette;
  return styled.css(["position:absolute;top:20px;font-size:14px;transform:translateX(-10%);color:", ";"], palette[Color.TextPrimary]);
});
var Styled$7 = applyDisplayNames({
  RotationSliderList: RotationSliderList,
  RotationSliderBigDot: RotationSliderBigDot,
  RotationSliderSmallDotWrapper: RotationSliderSmallDotWrapper,
  RotationSliderSmallDot: RotationSliderSmallDot,
  RotationSliderControl: RotationSliderControl,
  RotationSliderMark: RotationSliderMark,
  RotationSliderMarkText: RotationSliderMarkText
});
var Styled$8 = Styled$7;

var _excluded$8 = ["min", "max", "angle", "onChange", "onMouseDown", "onMouseUp", "step", "labelTooltipOptions", "annotation", "hideMarkText", "showCurrentMarkText", "value", "railProps", "trackProps", "thumbProps", "labelTooltipProps", "markStyles", "markTextStyles"];
function ownKeys$1(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread$1(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var RotationSlider = intrinsicComponent$1(function (_ref, ref) {
  var _ref$min = _ref.min,
    min = _ref$min === void 0 ? 0 : _ref$min,
    _ref$max = _ref.max,
    max = _ref$max === void 0 ? 100 : _ref$max,
    _ref$angle = _ref.angle,
    angle = _ref$angle === void 0 ? 10 : _ref$angle,
    onChange = _ref.onChange,
    onMouseDown = _ref.onMouseDown,
    onMouseUp = _ref.onMouseUp,
    _ref$step = _ref.step,
    step = _ref$step === void 0 ? 1 : _ref$step,
    _ref$labelTooltipOpti = _ref.labelTooltipOptions,
    labelTooltipOptions = _ref$labelTooltipOpti === void 0 ? LabelTooltip$1.Off : _ref$labelTooltipOpti,
    _ref$annotation = _ref.annotation,
    annotation = _ref$annotation === void 0 ? '°' : _ref$annotation,
    _ref$hideMarkText = _ref.hideMarkText,
    hideMarkText = _ref$hideMarkText === void 0 ? false : _ref$hideMarkText,
    _ref$showCurrentMarkT = _ref.showCurrentMarkText,
    showCurrentMarkText = _ref$showCurrentMarkT === void 0 ? false : _ref$showCurrentMarkT,
    value = _ref.value,
    _ref$railProps = _ref.railProps,
    railProps = _ref$railProps === void 0 ? {} : _ref$railProps,
    _ref$trackProps = _ref.trackProps,
    trackProps = _ref$trackProps === void 0 ? {} : _ref$trackProps,
    _ref$thumbProps = _ref.thumbProps,
    thumbProps = _ref$thumbProps === void 0 ? {} : _ref$thumbProps,
    _ref$labelTooltipProp = _ref.labelTooltipProps,
    labelTooltipProps = _ref$labelTooltipProp === void 0 ? {} : _ref$labelTooltipProp,
    _ref$markStyles = _ref.markStyles,
    markStyles = _ref$markStyles === void 0 ? {} : _ref$markStyles,
    _ref$markTextStyles = _ref.markTextStyles,
    markTextStyles = _ref$markTextStyles === void 0 ? {} : _ref$markTextStyles,
    rest = _objectWithoutProperties(_ref, _excluded$8);
  var handleChange = function handleChange(event, newValue) {
    if (onChange) {
      onChange(event, newValue);
    }
  };
  var getValue = function getValue() {
    if (value || value === 0) {
      if (value > max) {
        return max;
      }
      if (value < min) {
        return min;
      }
      return value;
    }
    return min;
  };
  var showMarkText = function showMarkText(index) {
    if (hideMarkText) return false;
    if (!showCurrentMarkText) return true;
    return getValue() === index;
  };
  var renderBar = function renderBar() {
    var barDom = [];
    var barDiv;
    for (var i = min; i <= max; i += step) {
      barDiv = [];
      if (i % angle === 0 || i === max) {
        barDiv = /*#__PURE__*/React.createElement(Styled$8.RotationSliderMark, {
          key: i,
          style: _objectSpread$1({}, markStyles)
        }, showMarkText(i) && /*#__PURE__*/React.createElement(Styled$8.RotationSliderMarkText, {
          style: _objectSpread$1({}, markTextStyles)
        }, i === min + 1 ? max : i, /*#__PURE__*/React.createElement("sup", null, annotation)), /*#__PURE__*/React.createElement(Styled$8.RotationSliderBigDot, null));
      } else if (i % 10 === 0) {
        barDiv = /*#__PURE__*/React.createElement(Styled$8.RotationSliderSmallDotWrapper, {
          key: i
        }, /*#__PURE__*/React.createElement(Styled$8.RotationSliderSmallDot, null));
      }
      if (!Array.isArray(barDiv)) {
        barDom.push(barDiv);
      }
    }
    return barDom;
  };
  return /*#__PURE__*/React.createElement(Slider$2, _extends({
    min: min,
    max: max,
    step: step,
    value: getValue(),
    hideTrack: true,
    hideAnnotation: true,
    annotation: annotation,
    onChange: function onChange(event, newValue) {
      return handleChange(event, newValue);
    },
    onMouseDown: onMouseDown,
    onMouseUp: onMouseUp,
    labelTooltip: labelTooltipOptions,
    ref: ref,
    components: {
      Rail: function Rail(props, style) {
        return /*#__PURE__*/React.createElement(Styled$8.RotationSliderList, _extends({}, props, {
          styles: _objectSpread$1({}, style)
        }), renderBar());
      },
      Thumb: Styled$8.RotationSliderControl
    },
    componentsProps: {
      rail: _objectSpread$1(_objectSpread$1({}, railProps), {}, {
        style: _objectSpread$1({}, railProps.style)
      }),
      track: _objectSpread$1(_objectSpread$1({}, trackProps), {}, {
        style: _objectSpread$1({}, trackProps.style)
      }),
      thumb: _objectSpread$1(_objectSpread$1({}, thumbProps), {}, {
        style: _objectSpread$1({
          top: '15%'
        }, thumbProps.style)
      }),
      labelTooltip: _objectSpread$1(_objectSpread$1({}, labelTooltipProps), {}, {
        style: _objectSpread$1({}, labelTooltipProps.style)
      })
    }
  }, rest, {
    defaultValue: Number(rest.defaultValue),
    style: _objectSpread$1({
      width: 'auto',
      height: 'auto'
    }, rest.style)
  }));
});
var RotationSlider$1 = RotationSlider;

var baseClassName$2 = 'SelectGroup';
var SelectGroup$2 = /*#__PURE__*/styled(StyledInputGroup.InputGroup).attrs({
  className: generateClassNames(baseClassName$2, 'root')
}).withConfig({
  componentId: "sc-1uvutwe-0"
})([""]);
var Styled$5 = applyDisplayNames({
  SelectGroup: SelectGroup$2
});
var Styled$6 = Styled$5;

var _excluded$7 = ["children", "size", "error", "label", "placeholder", "hint", "LabelProps", "SelectProps", "selectProps", "fullWidth", "showSelectionKey", "value", "multiple", "hideMenuItemsActions", "onChange", "readOnly", "disabled", "showClearIcon"];
var SelectGroup = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    size = _ref.size,
    _ref$error = _ref.error,
    error = _ref$error === void 0 ? false : _ref$error,
    label = _ref.label,
    placeholder = _ref.placeholder,
    hint = _ref.hint,
    LabelPropsData = _ref.LabelProps,
    SelectPropsData = _ref.SelectProps,
    selectProps = _ref.selectProps,
    _ref$fullWidth = _ref.fullWidth,
    fullWidth = _ref$fullWidth === void 0 ? false : _ref$fullWidth,
    showSelectionKey = _ref.showSelectionKey,
    value = _ref.value,
    multiple = _ref.multiple,
    _ref$hideMenuItemsAct = _ref.hideMenuItemsActions,
    hideMenuItemsActions = _ref$hideMenuItemsAct === void 0 ? false : _ref$hideMenuItemsAct,
    onChange = _ref.onChange,
    _ref$readOnly = _ref.readOnly,
    readOnly = _ref$readOnly === void 0 ? false : _ref$readOnly,
    _ref$disabled = _ref.disabled,
    disabled = _ref$disabled === void 0 ? false : _ref$disabled,
    showClearIcon = _ref.showClearIcon,
    rest = _objectWithoutProperties(_ref, _excluded$7);
  var renderLabel = function renderLabel() {
    if (label) {
      if (typeof label === 'function') {
        return label({
          error: error
        });
      }
      if (_typeof(label) === 'object') {
        return label;
      }
      return /*#__PURE__*/React.createElement(Label$6, LabelPropsData || {}, label);
    }
    return null;
  };
  var renderHint = function renderHint() {
    if (hint) {
      if (typeof hint === 'function') {
        return hint({
          error: error
        });
      }
      if (_typeof(hint) === 'object') {
        return hint;
      }
      return /*#__PURE__*/React.createElement(FormHint$1, {
        error: error
      }, hint);
    }
    return null;
  };
  return /*#__PURE__*/React.createElement(Styled$6.SelectGroup, _extends({}, rest, {
    ref: ref
  }), renderLabel(), /*#__PURE__*/React.createElement(Select$2, _extends({
    error: error,
    value: value,
    size: size,
    onChange: onChange,
    multiple: multiple,
    fullWidth: Boolean(fullWidth)
  }, SelectPropsData || {}, {
    selectProps: selectProps,
    readOnly: readOnly,
    disabled: disabled,
    placeholder: placeholder,
    showSelectionKey: showSelectionKey,
    hideMenuItemsActions: hideMenuItemsActions,
    showClearIcon: showClearIcon
  }), children), renderHint());
});
var SelectGroup$1 = SelectGroup;

var baseClassName$1 = 'Backdrop';
var Backdrop$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName$1, 'root')
}).withConfig({
  componentId: "sc-txa5a-0"
})(function (_ref) {
  var palette = _ref.theme.palette;
  return styled.css(["position:fixed;display:flex;align-items:center;justify-content:center;inset:0px;background-color:", ";transition:opacity 251ms cubic-bezier(0.4,0,0.2,1) 0ms;opacity:1;z-index:-1;"], palette[Color.Extra_0_3_Overlay]);
});
var Styled$3 = applyDisplayNames({
  Backdrop: Backdrop$2
});
var Styled$4 = Styled$3;

// TODO: add story for this component?
var Backdrop = intrinsicComponent$1(function (_ref, ref) {
  var rest = _extends({}, (_objectDestructuringEmpty(_ref), _ref));
  return /*#__PURE__*/React.createElement(Styled$4.Backdrop, _extends({}, rest, {
    ref: ref
  }));
});
var Backdrop$1 = Backdrop;

var baseClassName = 'Drawer';
var TemporaryDrawer = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'temporary')
}).withConfig({
  componentId: "sc-1riasfx-0"
})(function (_ref) {
  var open = _ref.open;
  return styled.css(["position:absolute;inset:0px;z-index:1200;visibility:", ";"], !open && 'hidden');
});
var PersistentDrawer = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'persistent')
}).withConfig({
  componentId: "sc-1riasfx-1"
})([""]);
var Drawer$2 = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'root')
}).withConfig({
  componentId: "sc-1riasfx-2"
})(function (_ref2) {
  var open = _ref2.open,
    isCollapsed = _ref2.isCollapsed,
    _ref2$top = _ref2.top,
    top = _ref2$top === void 0 ? 0 : _ref2$top,
    _ref2$theme = _ref2.theme,
    palette = _ref2$theme.palette,
    shadows = _ref2$theme.shadows,
    breakpoints = _ref2$theme.breakpoints;
  return styled.css(["display:flex;flex-direction:column;flex:1 0 auto;background-color:", ";box-shadow:", ";overflow-y:overlay;overflow-x:hidden;transform:", ";visibility:", ";transition:200ms;height:calc(100% - ", "px);", "{margin-top:0px;height:100%;}", " &{margin-top:0px;height:100%;}box-sizing:border-box;width:", ";", ""], palette[Color.BackgroundStateless], shadows[Shadows.LeftPanelMd], open ? 'none' : 'translateX(-100%)', !open && 'hidden', top, breakpoints.down('md'), breakpoints.classes.sm, isCollapsed ? '68px' : '302px', scrollBar);
});
var Header = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'header')
}).withConfig({
  componentId: "sc-1riasfx-3"
})(function (_ref3) {
  var isCollapsed = _ref3.isCollapsed;
  return styled.css(["display:", ";justify-content:flex-start;align-items:center;position:relative;text-decoration:none;width:100%;box-sizing:border-box;text-align:left;margin-top:12px;transition:background-color 100ms ease-out;"], isCollapsed ? 'none' : 'flex');
});
var Body = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'body')
}).withConfig({
  componentId: "sc-1riasfx-4"
})(["flex:1 1 auto;.SfxAccordionDetails-root{margin:0;}"]);
var Footer = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'footer')
}).withConfig({
  componentId: "sc-1riasfx-5"
})(function (_ref4) {
  var isCollapsed = _ref4.isCollapsed;
  return styled.css(["display:flex;flex-direction:column;width:100%;padding:", ";"], isCollapsed ? '0px' : '0px 8px');
});
var List = /*#__PURE__*/styled.ul.attrs({
  className: generateClassNames(baseClassName, 'list')
}).withConfig({
  componentId: "sc-1riasfx-6"
})(["list-style:none;margin:12px 0;padding:0;position:relative;"]);
var Item = /*#__PURE__*/styled.li.attrs({
  className: generateClassNames(baseClassName, 'item')
}).withConfig({
  componentId: "sc-1riasfx-7"
})(function (_ref5) {
  var palette = _ref5.theme.palette,
    isCollapsed = _ref5.isCollapsed,
    selected = _ref5.selected;
  return styled.css(["display:", ";justify-content:flex-start;align-items:center;position:relative;text-decoration:none;width:100%;box-sizing:border-box;text-align:left;padding:13px 16px;transition:background-color 100ms ease-out;margin-bottom:4px;cursor:pointer;&:hover{background-color:", ";& > *{color:", ";}}", ""], isCollapsed ? 'none' : 'flex', palette[Color.BackgroundActive], palette[Color.AccentStateless], selected && styled.css(["background-color:", ";& > *{color:", " !important;}"], palette[Color.BackgroundActive], palette[Color.AccentStateless]));
});
var ItemText = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'text')
}).withConfig({
  componentId: "sc-1riasfx-8"
})(function (_ref6) {
  var _ref6$theme = _ref6.theme,
    palette = _ref6$theme.palette,
    font = _ref6$theme.typography.font,
    fontKey = _ref6.font,
    isCollapsed = _ref6.isCollapsed;
  return styled.css(["flex:1 1 auto;color:", ";", ";transition:color 100ms ease-out;display:", ";user-select:none;"], palette[Color.TextPrimary], font[fontKey || FontVariant.LabelLarge], isCollapsed && 'none');
});
var Icon = /*#__PURE__*/styled.span.attrs({
  className: generateClassNames(baseClassName, 'icon')
}).withConfig({
  componentId: "sc-1riasfx-9"
})(function (_ref7) {
  var palette = _ref7.theme.palette,
    isCollapsed = _ref7.isCollapsed;
  return styled.css(["display:flex;flex-shrink:0;color:", ";margin-right:", ";transition:color 100ms ease-out;"], palette[Color.IconsPrimary], isCollapsed ? '0px' : '12px');
});
var ItemButton = /*#__PURE__*/styled.div.attrs({
  className: generateClassNames(baseClassName, 'item-button')
}).withConfig({
  componentId: "sc-1riasfx-10"
})(function (_ref8) {
  var palette = _ref8.theme.palette,
    isCollapsed = _ref8.isCollapsed,
    selected = _ref8.selected;
  return styled.css(["display:flex;justify-content:", ";align-items:center;border-radius:4px;box-sizing:border-box;text-align:left;padding:", ";width:", ";margin-bottom:12px;", ";transition:background-color 150ms cubic-bezier(0.4,0,0.2,1) 0ms;cursor:pointer;&:hover{background-color:", ";& > *{color:", ";}}", ""], isCollapsed ? 'center' : 'flex-start', isCollapsed ? '12px 0px' : '13px 16px', isCollapsed && '44px', isCollapsed && 'margin: 12px', palette[Color.BackgroundActive], palette[Color.AccentStateless], selected && styled.css(["background-color:", ";& > *{color:", ";}"], palette[Color.BackgroundActive], palette[Color.AccentStateless]));
});
var CollapsedButton = /*#__PURE__*/styled(ItemButton).attrs({
  className: generateClassNames(baseClassName, 'item-button')
}).withConfig({
  componentId: "sc-1riasfx-11"
})(function (_ref9) {
  var palette = _ref9.theme.palette,
    isCollapsed = _ref9.isCollapsed;
  return styled.css(["", " &:hover{background-color:", ";& > *{color:", ";}svg{color:", ";background-color:", ";border-radius:50%;path:first-of-type{color:", ";}}}"], !isCollapsed && styled.css(["padding:13px 16px;"]), palette[Color.BackgroundActive], palette[Color.AccentStateless], palette[Color.BackgroundActive], palette[Color.AccentStateless], palette[Color.AccentStateless]);
});
var DrawerAccordion = /*#__PURE__*/styled(Accordion$1).attrs({
  className: generateClassNames(baseClassName, 'accordion')
}).withConfig({
  componentId: "sc-1riasfx-12"
})(function (_ref10) {
  var _ref10$theme = _ref10.theme,
    palette = _ref10$theme.palette,
    font = _ref10$theme.typography.font,
    selected = _ref10.selected;
  return styled.css(["", "{padding:13px 16px;transition:background-color 100ms ease-out;", "{", ";color:", ";}&:hover{background-color:", ";& > *{color:", ";}}", "}", "{padding:0px 16px;}"], AccordionHeaderStyled.Header, AccordionHeaderStyled.Label, font[FontVariant.LabelLargeEmphasis], palette[Color.TextPrimary], palette[Color.BackgroundActive], palette[Color.AccentStateless], selected && styled.css(["", "{color:", ";}"], AccordionHeaderStyled.Label, palette[Color.AccentStateless]), AccordionDetailsStyled.AccordionDetails);
});
var Styled$1 = applyDisplayNames({
  TemporaryDrawer: TemporaryDrawer,
  PersistentDrawer: PersistentDrawer,
  Drawer: Drawer$2,
  Header: Header,
  Body: Body,
  Footer: Footer,
  List: List,
  Item: Item,
  ItemButton: ItemButton,
  Icon: Icon,
  ItemText: ItemText,
  DrawerAccordion: DrawerAccordion,
  CollapsedButton: CollapsedButton
});
var Styled$2 = Styled$1;

var DrawerContext = /*#__PURE__*/React.createContext({
  isCollapsed: false,
  size: 20
});
if (process.env.NODE_ENV !== 'production') {
  DrawerContext.displayName = 'DrawerContext';
}
var DrawerContext$1 = DrawerContext;

var _excluded$6 = ["children", "font"];
var DrawerItemText = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    font = _ref.font,
    rest = _objectWithoutProperties(_ref, _excluded$6);
  var _useContext = React.useContext(DrawerContext$1),
    isCollapsed = _useContext.isCollapsed;
  return /*#__PURE__*/React.createElement(Styled$2.ItemText, _extends({
    font: font,
    isCollapsed: isCollapsed
  }, rest, {
    ref: ref
  }), children);
});
var DrawerItemText$1 = DrawerItemText;

var _excluded$5 = ["children", "size"];
var DrawerItemIcon = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    _ref$size = _ref.size,
    iconSize = _ref$size === void 0 ? 20 : _ref$size,
    rest = _objectWithoutProperties(_ref, _excluded$5);
  var _useContext = React.useContext(DrawerContext$1),
    isCollapsed = _useContext.isCollapsed,
    size = _useContext.size;
  return /*#__PURE__*/React.createElement(Styled$2.Icon, _extends({}, rest, {
    isCollapsed: isCollapsed,
    ref: ref
  }), children && typeof children === 'function' ? children({
    size: size || iconSize
  }) : children);
});
var DrawerItemIcon$1 = DrawerItemIcon;

var Variant = {
  Auto: 'auto',
  Temporary: 'temporary',
  Persistent: 'persistent'
};

var _excluded$4 = ["children", "open", "iconsSize", "collapsed", "top", "hideBackdrop", "disablePortal", "collapseButtonLabel", "persistentDrawerStyles", "temproryDrawerStyles", "variant", "onClose", "onCollapse", "onCollapseClick"];
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
var Drawer = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    open = _ref.open,
    _ref$iconsSize = _ref.iconsSize,
    iconsSize = _ref$iconsSize === void 0 ? 20 : _ref$iconsSize,
    _ref$collapsed = _ref.collapsed,
    collapsed = _ref$collapsed === void 0 ? false : _ref$collapsed,
    top = _ref.top,
    _ref$hideBackdrop = _ref.hideBackdrop,
    hideBackdrop = _ref$hideBackdrop === void 0 ? false : _ref$hideBackdrop,
    disablePortal = _ref.disablePortal,
    _ref$collapseButtonLa = _ref.collapseButtonLabel,
    collapseButtonLabel = _ref$collapseButtonLa === void 0 ? 'Collapse menu' : _ref$collapseButtonLa,
    _ref$persistentDrawer = _ref.persistentDrawerStyles,
    persistentDrawerStyles = _ref$persistentDrawer === void 0 ? {} : _ref$persistentDrawer,
    _ref$temproryDrawerSt = _ref.temproryDrawerStyles,
    temproryDrawerStyles = _ref$temproryDrawerSt === void 0 ? {} : _ref$temproryDrawerSt,
    _ref$variant = _ref.variant,
    variant = _ref$variant === void 0 ? Variant.Auto : _ref$variant,
    onClose = _ref.onClose,
    onCollapse = _ref.onCollapse,
    onCollapseClick = _ref.onCollapseClick,
    rest = _objectWithoutProperties(_ref, _excluded$4);
  var theme = useTheme();
  var matchDownXl = useMediaQuery(theme.breakpoints.down('xl'));
  var _useState = React.useState(collapsed),
    _useState2 = _slicedToArray(_useState, 2),
    isCollapsed = _useState2[0],
    setIsCollapsed = _useState2[1];
  var temporaryDrawerRef = React.useRef(null);
  var DrawerIconsSize = React.useMemo(function () {
    return iconsSize;
  }, [iconsSize]);
  var target = document.querySelector('body');
  React.useEffect(function () {
    setIsCollapsed(collapsed);
  }, [collapsed]);
  React.useEffect(function () {
    if (onCollapse) {
      onCollapse(isCollapsed);
    }
  }, [isCollapsed]);
  var handleCollapse = function handleCollapse() {
    var newCollapseState = !isCollapsed;
    setIsCollapsed(newCollapseState);
    if (onCollapseClick) {
      onCollapseClick(newCollapseState);
    }
  };
  var handleClose = function handleClose() {
    if (typeof onClose === 'function') {
      onClose();
    }
  };
  var keyListener = function keyListener(ev) {
    var isTemporaryDrawer = false;
    if (temporaryDrawerRef !== null && temporaryDrawerRef !== void 0 && temporaryDrawerRef.current) {
      var _temporaryDrawerRef$c;
      isTemporaryDrawer = (temporaryDrawerRef === null || temporaryDrawerRef === void 0 || (_temporaryDrawerRef$c = temporaryDrawerRef.current) === null || _temporaryDrawerRef$c === void 0 ? void 0 : _temporaryDrawerRef$c.offsetWidth) > 0;
    }
    if (ev.key === 'Escape' && isTemporaryDrawer) {
      handleClose();
    }
  };
  React.useEffect(function () {
    document.addEventListener('keydown', keyListener);
    return function () {
      return document.removeEventListener('keydown', keyListener);
    };
  }, []);
  var renderDrawer = function renderDrawer(showCollapsedButton) {
    return /*#__PURE__*/React.createElement(Styled$2.Drawer, _extends({
      open: open,
      top: top
    }, rest, {
      isCollapsed: showCollapsedButton ? isCollapsed : false,
      ref: ref
    }), children, showCollapsedButton && /*#__PURE__*/React.createElement(Styled$2.CollapsedButton, {
      onClick: handleCollapse,
      isCollapsed: isCollapsed
    }, /*#__PURE__*/React.createElement(DrawerItemIcon$1, null, isCollapsed ? function (props) {
      return /*#__PURE__*/React.createElement(ArrowSidebarRightOutline$1, _extends({}, props, {
        size: iconsSize
      }));
    } : function (props) {
      return /*#__PURE__*/React.createElement(ArrowSidebarLeftOutline$1, _extends({}, props, {
        size: iconsSize
      }));
    }), /*#__PURE__*/React.createElement(DrawerItemText$1, null, collapseButtonLabel)));
  };
  var renderBackdrop = function renderBackdrop() {
    return !hideBackdrop && open ? /*#__PURE__*/React.createElement(Backdrop$1, {
      onClick: onClose
    }) : null;
  };
  var temporaryDrawer = function temporaryDrawer() {
    return disablePortal ? /*#__PURE__*/React.createElement(Styled$2.TemporaryDrawer, {
      ref: temporaryDrawerRef,
      style: _objectSpread({}, temproryDrawerStyles),
      open: open
    }, renderBackdrop(), renderDrawer(false)) : ( /*#__PURE__*/reactDom.createPortal( /*#__PURE__*/React.createElement(Styled$2.TemporaryDrawer, {
      ref: temporaryDrawerRef,
      style: _objectSpread({}, temproryDrawerStyles),
      open: open
    }, renderBackdrop(), renderDrawer(false)), target));
  };
  var persistentDrawer = function persistentDrawer() {
    return /*#__PURE__*/React.createElement(Styled$2.PersistentDrawer, {
      style: _objectSpread({}, persistentDrawerStyles)
    }, renderDrawer(true));
  };
  var getDrawerVariant = function getDrawerVariant() {
    switch (variant) {
      case Variant.Auto:
        return matchDownXl ? temporaryDrawer() : persistentDrawer();
      case Variant.Temporary:
        return temporaryDrawer();
      case Variant.Persistent:
        return persistentDrawer();
      default:
        return matchDownXl ? temporaryDrawer() : persistentDrawer();
    }
  };
  return /*#__PURE__*/React.createElement(DrawerContext$1.Provider, {
    value: {
      isCollapsed: !matchDownXl ? isCollapsed : false,
      size: DrawerIconsSize
    }
  }, getDrawerVariant());
});
var Drawer$1 = Drawer;

var _excluded$3 = ["children"];
var DrawerHeader = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded$3);
  var _useContext = React.useContext(DrawerContext$1),
    isCollapsed = _useContext.isCollapsed;
  return /*#__PURE__*/React.createElement(Styled$2.Header, _extends({}, rest, {
    isCollapsed: isCollapsed,
    ref: ref
  }), children);
});
var DrawerHeader$1 = DrawerHeader;

var _excluded$2 = ["children"];
var DrawerBody = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded$2);
  return /*#__PURE__*/React.createElement(Styled$2.Body, _extends({}, rest, {
    ref: ref
  }), children);
});
var DrawerBody$1 = DrawerBody;

var _excluded$1 = ["children"];
var DrawerList = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    rest = _objectWithoutProperties(_ref, _excluded$1);
  return /*#__PURE__*/React.createElement(Styled$2.List, _extends({}, rest, {
    ref: ref
  }), children);
});
var DrawerList$1 = DrawerList;

var _excluded = ["children", "selected"];
var DrawerItem = intrinsicComponent$1(function (_ref, ref) {
  var children = _ref.children,
    _ref$selected = _ref.selected,
    selected = _ref$selected === void 0 ? false : _ref$selected,
    rest = _objectWithoutProperties(_ref, _excluded);
  var _useContext = React.useContext(DrawerContext$1),
    isCollapsed = _useContext.isCollapsed;
  return /*#__PURE__*/React.createElement(Styled$2.Item, _extends({
    selected: selected,
    isCollapsed: isCollapsed
  }, rest, {
    ref: ref
  }), children);
});
var DrawerItem$1 = DrawerItem;

/** External Dependencies */
const StyledHSVOptions = styled.div`
  display: flex;
  width: 100%;
  justify-content: space-between;
  gap: 10px;

  .SfxSlider-root {
    min-width: 100px;
  }

  ${({
  isPhoneScreen
}) => isPhoneScreen && `
      flex-direction: column;

      .SfxSlider-root {
        min-width: 230px;
      }
    `}
`;
const StyledSliderContainer = styled.div`
  display: flex;
  flex-direction: column;
`;
const StyledSliderLabel = styled(Label$6)`
  color: black;
  font-size: 12px !important;
  line-height: 14px;
  font-family: "Open Sans", sans-serif;
  ${({
  theme
}) => theme.typography.font[FontVariant.LabelExtraSmallUp]};
`;
const StyledSliderWrapper = styled.div`
  display: flex;
  align-items: center;
`;
const StyledSliderInput = styled(Input$2)`
  display: inline-block;
  width: 40px;
  height: 28px;
  padding: 6px 2px;
  margin-left: 10px;
  border: none;
  color: black;
  font-size: 12px !important;
  line-height: 14px;
  font-family: "Open Sans", sans-serif;

  .SfxInput-Base {
    text-align: center;
    width: 100%;
    min-width: 100%;
    max-width: 100%;
    font-size: 12px !important;
  }


`;

/** External Dependencies */
const MIN_VALUE$6 = -1;
const DEFAULT_VALUE$4 = {
  brightness: 0
};
const MAX_VALUE$7 = 1;
const sliderStyle$4 = {
  width: 150,
  padding: 0,
  margin: 0
};
const BrightnessOptions = ({
  t
}) => {
  const [finetuneProps, setFinetuneProps] = useFinetune(Konva$2.Filters.Brighten, DEFAULT_VALUE$4);
  const changeValue = value => {
    setFinetuneProps({
      brightness: restrictNumber(value, MIN_VALUE$6, MAX_VALUE$7)
    });
  };
  return /*#__PURE__*/React.createElement(StyledSliderContainer, {
    className: "FIE_brightness-option-wrapper"
  }, /*#__PURE__*/React.createElement(StyledSliderLabel, {
    className: "FIE_brightness-option-label"
  }, t('brightness')), /*#__PURE__*/React.createElement(StyledSliderWrapper, null, /*#__PURE__*/React.createElement(Slider, {
    className: "FIE_brightness-option",
    min: MIN_VALUE$6,
    step: 0.05,
    max: MAX_VALUE$7,
    width: "124px",
    value: finetuneProps.brightness ?? DEFAULT_VALUE$4.brightness,
    onChange: changeValue,
    style: sliderStyle$4
  }), /*#__PURE__*/React.createElement(StyledSliderInput, {
    value: finetuneProps.brightness ?? DEFAULT_VALUE$4.brightness,
    onChange: ({
      target: {
        value
      }
    }) => changeValue(value)
  })));
};
BrightnessOptions.propTypes = {
  t: PropTypes.func.isRequired
};

const getZoomFitFactor = (previewDimens, originalDimens) => Math.min(previewDimens.width / originalDimens.width, previewDimens.height / originalDimens.height) || DEFAULT_ZOOM_FACTOR;

/** External Dependencies */
const DEFAULT_CROP_PRESETS = [{
  titleKey: 'custom',
  ratio: CUSTOM_CROP,
  icon: Custom$1,
  hide: ({
    lockCropAreaAt
  } = {}) => lockCropAreaAt
}, {
  titleKey: 'original',
  ratio: ORIGINAL_CROP,
  icon: ImageOutline$1
}, {
  titleKey: 'landscape',
  descriptionKey: '16:9',
  ratio: toPrecisedFloat(16 / 9),
  icon: Landscape$1
}, {
  titleKey: 'portrait',
  descriptionKey: '9:16',
  ratio: toPrecisedFloat(9 / 16),
  icon: Portrait$1
}, {
  titleKey: 'ellipse',
  ratio: ELLIPSE_CROP,
  icon: Ellipse$1
}];

/** External Dependencies */
const StyledToolsBarItemButtonWrapper = styled.div`
  display: flex;
`;
const StyledOpenMenuButton = styled(Button$1)`
  margin: 0 0 0 6px;
  padding: 0;
`;
const StyledMenuItemIcon = styled.div`
  svg,
  span {
    vertical-align: middle;
  }
`;
const StyledRatioDescription = styled(Label$6)`
  cursor: pointer;
  ${({
  theme: {
    typography
  }
}) => typography.font[FontVariant.InputSm]}
`;
const StyledMenu$1 = styled.div`
  min-width: 270px;
  border-radius: 4px;
  overflow: hidden;
  background-color: ${({
  theme: {
    palette
  }
}) => palette[Color.BackgroundStateless]};
`;
const StyledMenuItem$1 = styled(MenuItem$1)`
  display: flex;
  gap: 10px;
  justify-content: flex-start;
  align-items: center;
  border-radius: 4px;
  padding: 8px 16px;

  ${({
  isAccordion
}) => isAccordion && 'padding-left: 22px;'}

  ${({
  isListItem
}) => isListItem && 'padding: 0;'}
`;
const StyledMenuItemLabel = styled(Label$6)(({
  theme
}) => styled.css`
    color: ${theme.palette[Color.TextPrimary]};
    ${theme.typography.font[FontVariant.InputMd]};
  `);
const StyledAccordion = styled(Accordion$1)(({
  theme
}) => styled.css`
    .SfxAccordionHeader-icon {
      padding-left: 0;
    }

    .SfxAccordionHeader-label {
      ${theme.typography.font[FontVariant.LabelMediumEmphasis]};
      color: ${theme.palette[Color.TextPrimary]};
    }

    .SfxAccordionHeader-root {
      display: flex;
      flex-direction: row-reverse;
      width: fit-content;
      gap: 10px;
    }
  `);

/** External Dependeices */
const CropPresetItem = ({
  titleKey,
  description,
  ratio,
  onClick,
  Icon,
  isActive,
  isAccordion,
  theme,
  width,
  height,
  t,
  disableManualResize,
  noEffect
}) => {
  const handleOnClick = e => onClick(e, ratio, {
    ratioTitleKey: titleKey,
    width,
    height,
    disableManualResize,
    noEffect
  });
  return /*#__PURE__*/React.createElement(StyledMenuItem$1, {
    active: isActive,
    onClick: handleOnClick,
    isAccordion: isAccordion
  }, Icon && /*#__PURE__*/React.createElement(StyledMenuItemIcon, null, typeof Icon === 'string' ?
  /*#__PURE__*/
  // eslint-disable-next-line react/no-danger
  React.createElement("span", {
    dangerouslySetInnerHTML: {
      __html: Icon
    }
  }) : /*#__PURE__*/React.createElement(Icon, {
    color: theme.palette['icon-primary']
  })), /*#__PURE__*/React.createElement(StyledMenuItemLabel, null, t(titleKey)), description && /*#__PURE__*/React.createElement(StyledRatioDescription, null, description));
};
CropPresetItem.defaultProps = {
  Icon: undefined,
  width: undefined,
  height: undefined,
  disableManualResize: false,
  isAccordion: false,
  noEffect: false
};
CropPresetItem.propTypes = {
  titleKey: PropTypes.string.isRequired,
  description: PropTypes.string.isRequired,
  onClick: PropTypes.func.isRequired,
  t: PropTypes.func.isRequired,
  isActive: PropTypes.bool.isRequired,
  ratio: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired,
  disableManualResize: PropTypes.bool,
  isAccordion: PropTypes.bool,
  theme: PropTypes.instanceOf(Object).isRequired,
  width: PropTypes.number,
  height: PropTypes.number,
  Icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.string, PropTypes.instanceOf(HTMLElement)]),
  noEffect: PropTypes.bool
};

/** External Dependencies */
const CropPresetGroup = ({
  groupTitleKey,
  items,
  onItemSelect,
  t,
  isExpanded,
  setExpandedGroup
}) => {
  const {
    adjustments: {
      crop: {
        ratio: currentRatio,
        ratioGroupKey,
        ratioTitleKey
      }
    },
    theme
  } = useStore();
  const toggleExpand = () => {
    setExpandedGroup(isExpanded ? null : groupTitleKey);
  };
  const onItemSelectFromGroup = (e, newRatio, cropProps) => {
    onItemSelect(e, newRatio, {
      ...cropProps,
      ratioGroupKey: groupTitleKey
    });
  };
  return /*#__PURE__*/React.createElement(StyledAccordion, {
    label: t(groupTitleKey),
    onChange: toggleExpand,
    expanded: isExpanded
  }, items.map(({
    titleKey,
    ratio,
    width,
    height,
    descriptionKey,
    icon,
    disableManualResize,
    noEffect
  }) => {
    const newRatio = ratio ?? toPrecisedFloat(width / height);
    return /*#__PURE__*/React.createElement(CropPresetItem, {
      key: titleKey,
      titleKey: titleKey,
      t: t,
      description: t(descriptionKey),
      size: "sm",
      onClick: onItemSelectFromGroup,
      width: width,
      height: height,
      ratio: newRatio,
      Icon: icon,
      theme: theme,
      isAccordion: true,
      disableManualResize: disableManualResize,
      isActive: currentRatio === newRatio && ratioTitleKey === titleKey && ratioGroupKey === groupTitleKey,
      noEffect: noEffect
    });
  }));
};
CropPresetGroup.propTypes = {
  groupTitleKey: PropTypes.string.isRequired,
  items: PropTypes.instanceOf(Array).isRequired,
  onItemSelect: PropTypes.func.isRequired,
  t: PropTypes.func.isRequired,
  isExpanded: PropTypes.bool.isRequired,
  setExpandedGroup: PropTypes.func.isRequired
};

/** External Dependencies */
const CropPresetGroupsFolder = ({
  titleKey,
  Icon,
  theme,
  groups,
  onItemSelect,
  t
}) => {
  const {
    adjustments: {
      crop: {
        ratioFolderKey,
        ratioGroupKey
      }
    }
  } = useStore();
  const [expandedGroup, setExpandedGroup] = React.useState('');
  const onItemSelectFromFolder = (e, newRatio, cropProps) => {
    onItemSelect(e, newRatio, {
      ...cropProps,
      ratioFolderKey: titleKey
    });
  };
  return /*#__PURE__*/React.createElement(StyledMenuItem$1, {
    isListItem: true,
    list: [{
      content: t(titleKey),
      key: titleKey,
      active: titleKey === ratioFolderKey,
      prefix: Icon && /*#__PURE__*/React.createElement(StyledMenuItemIcon, null, typeof Icon === 'string' ?
      /*#__PURE__*/
      // eslint-disable-next-line react/no-danger
      React.createElement("span", {
        dangerouslySetInnerHTML: {
          __html: Icon
        }
      }) : /*#__PURE__*/React.createElement(Icon, {
        color: theme.palette['icon-primary']
      })),
      subList: groups.map(({
        titleKey: groupTitleKey,
        items
      }) => ({
        content: /*#__PURE__*/React.createElement(CropPresetGroup, {
          groupTitleKey: groupTitleKey,
          setExpandedGroup: setExpandedGroup,
          isExpanded: expandedGroup === '' ? ratioGroupKey === groupTitleKey : expandedGroup === groupTitleKey,
          t: t,
          items: items,
          onItemSelect: onItemSelectFromFolder
        }),
        key: groupTitleKey,
        disableHover: true
      })),
      subMenuProps: {
        style: {
          backgroundColor: theme.palette[Color.BackgroundStateless]
        }
      }
    }]
  });
};
CropPresetGroupsFolder.defaultProps = {
  Icon: undefined
};
CropPresetGroupsFolder.propTypes = {
  titleKey: PropTypes.string.isRequired,
  groups: PropTypes.instanceOf(Array).isRequired,
  onItemSelect: PropTypes.func.isRequired,
  t: PropTypes.func.isRequired,
  theme: PropTypes.instanceOf(Object).isRequired,
  Icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.string, PropTypes.instanceOf(HTMLElement)])
};

/** External Dependencies */
const CropPresetsOption = ({
  anchorEl,
  onClose
}) => {
  const {
    dispatch,
    t,
    adjustments: {
      crop: {
        ratio: appliedRatio,
        ratioTitleKey,
        ratioFolderKey
      } = {}
    } = {},
    shownImageDimensions,
    config,
    theme
  } = useStore();
  const currentRatio = appliedRatio || ORIGINAL_CROP; // we consider original as default one if no ratio has been set.
  const cropConfig = config[TOOLS_IDS.CROP];
  const isPhoneScreen = usePhoneScreen();
  const allPresets = React.useMemo(() => {
    const {
      presetsItems = [],
      presetsFolders = [],
      lockCropAreaAt
    } = cropConfig;
    const defaultPresets = lockCropAreaAt ? DEFAULT_CROP_PRESETS.filter(item => !item.hide?.({
      lockCropAreaAt
    })) : DEFAULT_CROP_PRESETS;
    return [...presetsFolders, ...defaultPresets, ...presetsItems];
  }, [cropConfig]);
  const changeCropRatio = (e, newCropRatio, cropProps) => {
    e.stopPropagation();
    const newCrop = {
      ratio: newCropRatio,
      ratioTitleKey: cropProps.ratioTitleKey,
      ratioGroupKey: cropProps.ratioGroupKey,
      ratioFolderKey: cropProps.ratioFolderKey,
      noEffect: cropProps.noEffect
    };
    dispatch({
      type: SET_CROP,
      payload: newCrop
    });
    if (cropConfig.autoResize) {
      dispatch({
        type: SET_RESIZE,
        payload: {
          width: cropProps.width,
          height: cropProps.height,
          manualChangeDisabled: cropProps.disableManualResize
        }
      });
      dispatch({
        type: ZOOM_CANVAS,
        payload: {
          factor: cropProps.width > shownImageDimensions.width || cropProps.height > shownImageDimensions.height ? getZoomFitFactor(shownImageDimensions, cropProps) : DEFAULT_ZOOM_FACTOR
        }
      });
    }
    onClose();
  };
  const renderPreset = ({
    titleKey,
    descriptionKey,
    ratio,
    width,
    height,
    groups,
    icon: Icon,
    disableManualResize,
    noEffect
  }) => groups ? /*#__PURE__*/React.createElement(CropPresetGroupsFolder, {
    key: titleKey,
    titleKey: titleKey,
    groups: groups,
    Icon: Icon,
    theme: theme,
    onItemSelect: changeCropRatio,
    t: t,
    disableManualResize: disableManualResize
  }) : /*#__PURE__*/React.createElement(CropPresetItem, {
    key: ratio,
    ratio: ratio ?? toPrecisedFloat(width / height),
    titleKey: titleKey,
    t: t,
    description: t(descriptionKey),
    Icon: Icon,
    isActive: currentRatio === (ratio ?? toPrecisedFloat(width / height)) && !ratioFolderKey,
    theme: theme,
    width: width,
    height: height,
    onClick: changeCropRatio,
    disableManualResize: disableManualResize,
    noEffect: noEffect
  });
  const toolTitleKey = ratioTitleKey || 'cropTool';
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledToolsBarItemButtonWrapper, null, /*#__PURE__*/React.createElement(StyledToolsBarItemButtonLabel, {
    className: "FIE_crop-tool-label FIE_selected-crop-preset-label",
    isPhoneScreen: isPhoneScreen
  }, t(toolTitleKey)), /*#__PURE__*/React.createElement(StyledOpenMenuButton, {
    className: "FIE_crop-presets-opener-button",
    color: "link-secondary",
    size: "lg"
  }, anchorEl ? /*#__PURE__*/React.createElement(MoveUpOutline, {
    size: 10
  }) : /*#__PURE__*/React.createElement(MoveDownOutline, {
    size: 10
  }))), /*#__PURE__*/React.createElement(Menu$2, {
    className: "FIE_crop-presets-menu",
    anchorEl: anchorEl,
    enableOverlay: true,
    onClose: onClose,
    open: Boolean(anchorEl),
    position: "top",
    style: {
      borderRadius: '10px'
    },
    popperOptions: {
      modifiers: [{
        name: 'offset',
        options: {
          offset: [0, 4]
        }
      }]
    },
    maxHeight: "100%"
  }, /*#__PURE__*/React.createElement(StyledMenu$1, null, allPresets.map(renderPreset))));
};
CropPresetsOption.defaultProps = {
  anchorEl: null
};
CropPresetsOption.propTypes = {
  onClose: PropTypes.func.isRequired,
  anchorEl: PropTypes.instanceOf(HTMLElement)
};

/** External Dependencies */
const Crop = ({
  selectTool,
  isSelected
}) => {
  const {
    config,
    t
  } = useStore();
  const [anchorEl, setAnchorEl] = React.useState();
  const selectToolAndShowPresets = (toolId, e) => {
    selectTool(toolId);
    setAnchorEl(e.currentTarget);
  };
  const closeCropPresets = () => {
    setAnchorEl(null);
  };
  return /*#__PURE__*/React.createElement(ToolsBarItemButton$1, {
    className: "FIE_crop-tool",
    id: TOOLS_IDS.CROP,
    Icon: Crop$1,
    onClick: selectToolAndShowPresets,
    isSelected: isSelected
  }, !config[TOOLS_IDS.CROP].noPresets ? /*#__PURE__*/React.createElement(CropPresetsOption, {
    anchorEl: anchorEl,
    onClose: closeCropPresets
  }) : /*#__PURE__*/React.createElement(StyledToolsBarItemButtonLabel, {
    className: "FIE_crop-tool-label"
  }, t('cropTool')));
};
Crop.defaultProps = {
  isSelected: false
};
Crop.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool
};

/** External Dependencies */
const xFlipReverseSideStyle = {
  transform: 'scaleX(-1)'
};
const FlipX = ({
  selectTool,
  isSelected,
  t
}) => {
  const {
    dispatch,
    adjustments: {
      isFlippedX
    }
  } = useStore();
  const isPhoneScreen = usePhoneScreen(320);
  const getFlipIcon = React.useCallback(() => /*#__PURE__*/React.createElement(FlipX$1, {
    size: isPhoneScreen ? 20 : 16,
    style: isFlippedX ? xFlipReverseSideStyle : undefined
  }), [isFlippedX, isPhoneScreen]);
  const {
    reverseLabelOfCurrXFlipDir,
    reverseIconOfCurrXFlipDir
  } = React.useMemo(() => ({
    reverseLabelOfCurrXFlipDir: isFlippedX ? t('unFlipX') : t('flipX'),
    reverseIconOfCurrXFlipDir: getFlipIcon
  }), [isFlippedX, getFlipIcon]);
  const toggleFlipX = React.useCallback(() => {
    dispatch({
      type: TOGGLE_FLIP,
      payload: {
        direction: FLIP_DIRECTIONS.X
      }
    });
  }, []);
  const handleButtonClick = React.useCallback(flipXToolId => {
    selectTool(flipXToolId);
    toggleFlipX();
  }, []);
  return /*#__PURE__*/React.createElement(ToolsBarItemButton$1, {
    className: "FIE_flip-x-tool-button",
    id: TOOLS_IDS.FLIP_X,
    label: reverseLabelOfCurrXFlipDir,
    Icon: reverseIconOfCurrXFlipDir,
    onClick: handleButtonClick,
    isSelected: isSelected
  });
};
FlipX.defaultProps = {
  isSelected: false
};
FlipX.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const yFlipReverseSideStyle = {
  transform: 'scaleY(-1)'
};
const FlipY = ({
  selectTool,
  isSelected,
  t
}) => {
  const {
    dispatch,
    adjustments: {
      isFlippedY
    }
  } = useStore();
  const isPhoneScreen = usePhoneScreen(320);
  const getFlipIcon = React.useCallback(() => /*#__PURE__*/React.createElement(FlipY$1, {
    size: isPhoneScreen ? 20 : 16,
    style: isFlippedY ? yFlipReverseSideStyle : undefined
  }), [isFlippedY, isPhoneScreen]);
  const {
    reverseLabelOfCurrYFlipDir,
    reverseIconOfCurrYFlipDir
  } = React.useMemo(() => ({
    reverseLabelOfCurrYFlipDir: isFlippedY ? t('unFlipY') : t('flipY'),
    reverseIconOfCurrYFlipDir: getFlipIcon
  }), [isFlippedY]);
  const toggleFlipY = React.useCallback(() => {
    dispatch({
      type: TOGGLE_FLIP,
      payload: {
        direction: FLIP_DIRECTIONS.Y
      }
    });
  }, []);
  const handleButtonClick = React.useCallback(flipYToolId => {
    selectTool(flipYToolId);
    toggleFlipY();
  }, []);
  return /*#__PURE__*/React.createElement(ToolsBarItemButton$1, {
    className: "FIE_flip-y-tool-button",
    id: TOOLS_IDS.FLIP_Y,
    label: reverseLabelOfCurrYFlipDir,
    Icon: reverseIconOfCurrYFlipDir,
    onClick: handleButtonClick,
    isSelected: isSelected
  });
};
FlipY.defaultProps = {
  isSelected: false
};
FlipY.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const RotateButton = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React.createElement(ToolsBarItemButton$1, {
  className: "FIE_rotate-tool-button",
  id: TOOLS_IDS.ROTATE,
  label: t('rotateTool'),
  Icon: RotationLeft,
  onClick: selectTool,
  isSelected: isSelected
});
RotateButton.defaultProps = {
  isSelected: false
};
RotateButton.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const StyledRotationOptions = styled.div`
  display: flex;
  align-items: center;
  gap: 16px;
`;
const StyledRotationSlider = styled(RotationSlider$1)`
  .SfxRotationSlider-control {
    width: 1px;
    height: 10px;
    background-color: ${({
  theme: {
    palette
  }
}) => palette[Color.IconsSecondary]};

    &:before {
      box-shadow: unset;
    }
  }

  .SfxRotationSlider-mark,
  .SfxRotationSlider-small-dot-wrapper {
    padding: 0;

    .SfxRotationSlider-mark-text {
      top: 10px;
    }

    .SfxRotationSlider-big-dot {
      width: 4px;
      height: 4px;
    }

    .SfxRotationSlider-small-dot {
      width: 1px;
      height: 1px;
    }
  }

  .SfxRotationSlider-list {
    gap: 4px;
  }
`;
const StyledRotateButton = styled(IconButton$1)``;

/** External Dependencies */
const RotateOptions = () => {
  const {
    dispatch,
    adjustments: {
      rotation = 0
    },
    resize = {},
    config
  } = useStore();
  const rotateConfig = config[TOOLS_IDS.ROTATE];
  const isPhoneScreen = usePhoneScreen();
  const changeRotation = useDebouncedCallback((_e, newRotation) => {
    const rotationAngle = restrictNumber(newRotation, -180, 180);
    dispatch({
      type: CHANGE_ROTATION,
      payload: {
        rotation: rotationAngle
      }
    });
    if (resize.width && resize.height) {
      const sizeAfterRotation = getSizeAfterRotation(resize.width, resize.height, rotationAngle);
      dispatch({
        type: SET_RESIZE,
        payload: {
          width: sizeAfterRotation.width,
          height: sizeAfterRotation.height
        }
      });
    }
  }, 20);
  const changeRotationButtonPositive = e => {
    const newAngle = rotation + rotateConfig.angle;
    changeRotation(e, newAngle);
  };
  const changeRotationButtonNegative = e => {
    const newAngle = rotation - rotateConfig.angle;
    changeRotation(e, newAngle);
  };
  if (rotateConfig.componentType === 'buttons') {
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ToolsBarItemButton$1, {
      className: "FIE_rotate_button_left",
      id: TOOLS_IDS.IMAGE,
      label: `-${rotateConfig.angle}°`,
      Icon: RotationLeft$1,
      onClick: changeRotationButtonNegative
    }), /*#__PURE__*/React.createElement(ToolsBarItemButton$1, {
      className: "FIE_rotate_button_right",
      id: TOOLS_IDS.IMAGE,
      label: `+${rotateConfig.angle}°`,
      Icon: RotationRight$1,
      onClick: changeRotationButtonPositive
    }));
  }
  return /*#__PURE__*/React.createElement(StyledRotationOptions, null, /*#__PURE__*/React.createElement(StyledRotateButton, {
    size: "sm",
    color: "basic",
    onClick: e => changeRotation(e, rotation - 90)
  }, /*#__PURE__*/React.createElement(Rotate90, {
    width: 15
  })), /*#__PURE__*/React.createElement(StyledRotationSlider, {
    className: "FIE_rotate-slider",
    showCurrentMarkText: true,
    min: -180,
    max: 180,
    step: isPhoneScreen ? rotateConfig.angle / 3 : 1,
    value: rotation,
    angle: rotateConfig.angle || 90,
    onChange: changeRotation
  }), /*#__PURE__*/React.createElement(StyledRotateButton, {
    size: "sm",
    color: "basic",
    onClick: e => changeRotation(e, rotation + 90)
  }, /*#__PURE__*/React.createElement(Rotate90, {
    width: 15,
    style: {
      transform: 'scaleX(-1)'
    }
  })));
};

/** External Dependencies */
const Contrast = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React.createElement(ToolsBarItemButton$1, {
  className: "FIE_contrast-tool-button",
  id: TOOLS_IDS.CONTRAST,
  label: t('contrastTool'),
  Icon: Contrast$1,
  onClick: selectTool,
  isSelected: isSelected
});
Contrast.defaultProps = {
  isSelected: false
};
Contrast.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Depdencies */
const MIN_VALUE$5 = -100;
const DEFAULT_VALUE$3 = {
  contrast: 0
};
const MAX_VALUE$6 = 100;
const sliderStyle$3 = {
  width: 150,
  padding: 0,
  margin: 0
};
const ContrastOptions = ({
  t
}) => {
  const [finetuneProps, setFinetuneProps] = useFinetune(Konva$2.Filters.Contrast, DEFAULT_VALUE$3);
  const changeValue = value => {
    setFinetuneProps({
      contrast: restrictNumber(value, MIN_VALUE$5, MAX_VALUE$6)
    });
  };
  return /*#__PURE__*/React.createElement(StyledSliderContainer, {
    className: "FIE_contrast-option-wrapper"
  }, /*#__PURE__*/React.createElement(StyledSliderLabel, {
    className: "FIE_contrast-option-label"
  }, t('contrastTool')), /*#__PURE__*/React.createElement(StyledSliderWrapper, null, /*#__PURE__*/React.createElement(Slider, {
    className: "FIE_contrast-option",
    min: MIN_VALUE$5,
    max: MAX_VALUE$6,
    width: "124px",
    value: finetuneProps.contrast ?? DEFAULT_VALUE$3.contrast,
    onChange: changeValue,
    style: sliderStyle$3
  }), /*#__PURE__*/React.createElement(StyledSliderInput, {
    value: finetuneProps.contrast ?? DEFAULT_VALUE$3.contrast,
    onChange: ({
      target: {
        value
      }
    }) => changeValue(value)
  })));
};
ContrastOptions.propTypes = {
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const HSV = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React.createElement(ToolsBarItemButton$1, {
  className: "FIE_hsv-tool-button",
  id: TOOLS_IDS.HSV,
  label: t('hsvTool'),
  Icon: Saturation,
  onClick: selectTool,
  isSelected: isSelected
});
HSV.defaultProps = {
  isSelected: false
};
HSV.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const DEFAULT_VALUE$2 = {
  hue: 0,
  saturation: 0,
  value: 0
};
const MAX_VALUE$5 = {
  hue: 259,
  saturation: 10,
  value: 2
};
const sliderStyle$2 = {
  padding: 0,
  margin: 0
};
const isPhoneScreen = usePhoneScreen();
const HSVOptions = ({
  t
}) => {
  const [finetuneProps, setFinetuneProps] = useFinetune(Konva$2.Filters.HSV, DEFAULT_VALUE$2);
  const changeValue = (name, value) => {
    setFinetuneProps({
      [name]: value > MAX_VALUE$5[name] ? MAX_VALUE$5[name] : +value
    });
  };
  return /*#__PURE__*/React.createElement(StyledHSVOptions, {
    isPhoneScreen: isPhoneScreen
  }, /*#__PURE__*/React.createElement(StyledSliderContainer, {
    className: "FIE_hue-option-wrapper"
  }, /*#__PURE__*/React.createElement(StyledSliderLabel, {
    className: "FIE_hue-option-label"
  }, t('hue')), /*#__PURE__*/React.createElement(StyledSliderWrapper, null, /*#__PURE__*/React.createElement(Slider, {
    className: "FIE_hue-option",
    min: 0,
    step: 1,
    max: 259,
    value: finetuneProps.hue ?? DEFAULT_VALUE$2.hue,
    onChange: val => changeValue('hue', val),
    style: sliderStyle$2
  }), /*#__PURE__*/React.createElement(StyledSliderInput, {
    value: finetuneProps.hue ?? DEFAULT_VALUE$2.hue,
    onChange: ({
      target: {
        value
      }
    }) => changeValue('hue', value)
  }))), /*#__PURE__*/React.createElement(StyledSliderContainer, {
    className: "FIE_saturation-option-wrapper"
  }, /*#__PURE__*/React.createElement(StyledSliderLabel, {
    className: "FIE_saturation-option-label"
  }, t('saturation')), /*#__PURE__*/React.createElement(StyledSliderWrapper, null, /*#__PURE__*/React.createElement(Slider, {
    className: "FIE_saturation-option",
    min: -2,
    step: 0.5,
    max: 10,
    value: finetuneProps.saturation ?? DEFAULT_VALUE$2.saturation,
    onChange: val => changeValue('saturation', val),
    style: sliderStyle$2
  }), /*#__PURE__*/React.createElement(StyledSliderInput, {
    value: finetuneProps.saturation ?? DEFAULT_VALUE$2.saturation,
    onChange: ({
      target: {
        value
      }
    }) => changeValue('saturation', value)
  }))), /*#__PURE__*/React.createElement(StyledSliderContainer, {
    className: "FIE_value-option-wrapper"
  }, /*#__PURE__*/React.createElement(StyledSliderLabel, {
    className: "FIE_value-option-label"
  }, t('value')), /*#__PURE__*/React.createElement(StyledSliderWrapper, null, /*#__PURE__*/React.createElement(Slider, {
    className: "FIE_value-option",
    min: -2,
    step: 0.1,
    max: 2,
    value: finetuneProps.value ?? DEFAULT_VALUE$2.value,
    onChange: val => changeValue('value', val),
    style: sliderStyle$2
  }), /*#__PURE__*/React.createElement(StyledSliderInput, {
    value: finetuneProps.value ?? DEFAULT_VALUE$2.value,
    onChange: ({
      target: {
        value
      }
    }) => changeValue('value', value)
  }))));
};
HSVOptions.propTypes = {
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const Blur = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React.createElement(ToolsBarItemButton$1, {
  className: "FIE_blur-tool-button",
  id: TOOLS_IDS.BLUR,
  label: t('blurTool'),
  Icon: Blur$1,
  onClick: selectTool,
  isSelected: isSelected
});
Blur.defaultProps = {
  isSelected: false
};
Blur.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const MIN_VALUE$4 = 0;
const DEFAULT_VALUE$1 = {
  blurRadius: MIN_VALUE$4
};
const MAX_VALUE$4 = 100;
const sliderStyle$1 = {
  width: 150,
  padding: 0,
  margin: 0
};
const BlurOptions = ({
  t
}) => {
  const [finetuneProps, setFinetuneProps] = useFinetune(Konva$2.Filters.Blur, DEFAULT_VALUE$1);
  const changeValue = value => {
    setFinetuneProps({
      blurRadius: restrictNumber(value, MIN_VALUE$4, MAX_VALUE$4)
    });
  };
  return /*#__PURE__*/React.createElement(StyledSliderContainer, {
    className: "FIE_blur-option-wrapper"
  }, /*#__PURE__*/React.createElement(StyledSliderLabel, {
    className: "FIE_blur-option-label"
  }, t('blur')), /*#__PURE__*/React.createElement(StyledSliderWrapper, null, /*#__PURE__*/React.createElement(Slider, {
    className: "FIE_blur-option",
    min: MIN_VALUE$4,
    max: MAX_VALUE$4,
    width: "124px",
    value: finetuneProps.blurRadius ?? DEFAULT_VALUE$1.blurRadius,
    onChange: changeValue,
    style: sliderStyle$1
  }), /*#__PURE__*/React.createElement(StyledSliderInput, {
    value: finetuneProps.blurRadius ?? DEFAULT_VALUE$1.blurRadius,
    onChange: ({
      target: {
        value
      }
    }) => changeValue(value)
  })));
};
BlurOptions.propTypes = {
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const Warmth = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React.createElement(ToolsBarItemButton$1, {
  className: "FIE_warmth-tool-button",
  id: TOOLS_IDS.WARMTH,
  label: t('warmthTool'),
  Icon: Temprature,
  onClick: selectTool,
  isSelected: isSelected
});
Warmth.defaultProps = {
  isSelected: false
};
Warmth.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const MIN_VALUE$3 = 0;
const DEFAULT_VALUE = {
  warmth: MIN_VALUE$3
};
const MAX_VALUE$3 = 200;
const sliderStyle = {
  width: 150,
  padding: 0,
  margin: 0
};
const WarmthOptions = ({
  t
}) => {
  const [finetuneProps, setFinetuneProps] = useFinetune(Warmth$1, DEFAULT_VALUE);
  const changeValue = value => {
    setFinetuneProps({
      warmth: restrictNumber(value, MIN_VALUE$3, MAX_VALUE$3)
    });
  };
  return /*#__PURE__*/React.createElement(StyledSliderContainer, {
    className: "FIE_warmth-option-wrapper"
  }, /*#__PURE__*/React.createElement(StyledSliderLabel, {
    className: "FIE_warmth-option-label"
  }, t('warmthTool')), /*#__PURE__*/React.createElement(StyledSliderWrapper, null, /*#__PURE__*/React.createElement(Slider, {
    className: "FIE_warmth-option",
    min: MIN_VALUE$3,
    max: MAX_VALUE$3,
    width: "124px",
    value: finetuneProps.warmth ?? DEFAULT_VALUE.warmth,
    onChange: changeValue,
    style: sliderStyle
  }), /*#__PURE__*/React.createElement(StyledSliderInput, {
    value: finetuneProps.warmth ?? DEFAULT_VALUE.warmth,
    onChange: ({
      target: {
        value
      }
    }) => changeValue(value)
  })));
};
WarmthOptions.propTypes = {
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const StyledCarouselWrapper = styled.div`
  max-width: 680px;
  min-width: 150px;
  position: relative;
  overflow: hidden;
  touch-action: pan-y pinch-zoom;
`;
const StyledCarousel = styled.ul`
  padding: 0;
  margin: 0;
  white-space: nowrap;
  overflow: hidden;
`;
const StyledCarouselItem = styled.li`
  padding: 4px;
  display: inline-block;
  list-style-type: none;
  user-select: none;
  font-family: 'Open Sans', sans-serif;
  letter-spacing: 0.04rem;
  font-size: 11px;
`;
const arrowsCommonStyles = styled.css`
  position: absolute;
  top: 0;
  height: 100%;
  width: 60px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 1;

  svg {
    color: ${({
  theme: {
    palette
  }
}) => palette[Color.IconsSecondary]};
  }
`;
const StyledPrevArrowWrapper = styled.div`
  ${arrowsCommonStyles}
  left: 0;
  justify-content: flex-start;
  background: linear-gradient(
    90deg,
    #ffffff 1.56%,
    rgba(255, 255, 255, 0.89) 52.4%,
    rgba(255, 255, 255, 0.532165) 76.04%,
    rgba(255, 255, 255, 0) 100%
  );
`;
const StyledNextArrowWrapper = styled.div`
  ${arrowsCommonStyles}
  right: 0;
  justify-content: flex-end;
  background: linear-gradient(
    270deg,
    #ffffff 1.56%,
    rgba(255, 255, 255, 0.89) 52.4%,
    rgba(255, 255, 255, 0.532165) 76.04%,
    rgba(255, 255, 255, 0) 100%
  );
`;

/** External Dependencies */
const Carousel = ({
  children,
  style,
  className
}) => {
  const scrollingByDraggingLatestX = React.useRef(false);
  const carouselRef = React.useRef();
  const [observeResize] = useResizeObserver();
  const [isPrevArrowShown, setIsPrevArrowShown] = React.useState(false);
  const [isNextArrowShown, setIsNextArrowShown] = React.useState(false);
  const childrenArray = React.Children.toArray(children);
  const updateArrowsVisibility = () => {
    if (carouselRef.current) {
      const {
        scrollWidth,
        offsetWidth,
        scrollLeft
      } = carouselRef.current;
      const scrollableWidth = Math.round(scrollWidth - offsetWidth);
      const scrollRight = Math.round(scrollableWidth - scrollLeft);
      setIsPrevArrowShown(scrollLeft > 0);
      setIsNextArrowShown(scrollRight > 0);
    }
  };
  const scrollCarouselToElement = (foundElements, direction) => {
    const liIndex = foundElements.findIndex(element => element.classList.contains('FIE_carousel-item'));
    if (liIndex !== -1) {
      foundElements[liIndex].scrollIntoView({
        inline: direction,
        behavior: 'smooth',
        block: 'nearest'
      });
      // setTimeout cuz we're not sure when the smooth scroll will be finished, we're waiting for 0.5s to start checking.
      setTimeout(() => {
        updateArrowsVisibility();
      }, 500);
    }
  };
  const scrollToPrev = e => {
    const {
      topOffset,
      leftOffset
    } = getScrollOffset();
    const currentElements = document.elementsFromPoint(e.pageX + e.currentTarget.offsetWidth - leftOffset, e.pageY - topOffset);
    scrollCarouselToElement(currentElements, 'end');
  };
  const scrollToNext = e => {
    const {
      topOffset,
      leftOffset
    } = getScrollOffset();
    const currentElements = document.elementsFromPoint(e.pageX - e.currentTarget.offsetWidth - leftOffset, e.pageY - topOffset);
    scrollCarouselToElement(currentElements, 'start');
  };
  const scrollByDragging = e => {
    if (scrollingByDraggingLatestX.current) {
      const currentX = (e.touches?.[0] || e).pageX;
      carouselRef.current.scrollBy(scrollingByDraggingLatestX.current - currentX, 0);
      scrollingByDraggingLatestX.current = currentX;
      debounce$1(updateArrowsVisibility, 30)();
    }
  };
  const stopScrollByDragging = () => {
    scrollingByDraggingLatestX.current = null;
    document.removeEventListener('mousemove', scrollByDragging);
    document.removeEventListener('mouseup', stopScrollByDragging);
    document.removeEventListener('touchmove', scrollByDragging);
    document.removeEventListener('touchcancel', stopScrollByDragging);
    document.removeEventListener('touchend', stopScrollByDragging);
  };
  const startScrollByDragging = e => {
    scrollingByDraggingLatestX.current = (e.touches?.[0] || e).pageX;
    document.addEventListener('mousemove', scrollByDragging);
    document.addEventListener('mouseup', stopScrollByDragging);
    document.addEventListener('touchmove', scrollByDragging);
    document.addEventListener('touchcancel', stopScrollByDragging);
    document.addEventListener('touchend', stopScrollByDragging);
  };
  React.useEffect(() => {
    if (carouselRef.current) {
      observeResize(carouselRef.current, updateArrowsVisibility);
    }
  }, []);
  return /*#__PURE__*/React.createElement(StyledCarouselWrapper, {
    className: `${className}-wrapper`,
    style: style,
    onMouseDown: startScrollByDragging,
    onTouchStart: startScrollByDragging
  }, isPrevArrowShown && /*#__PURE__*/React.createElement(StyledPrevArrowWrapper, {
    className: "FIE_carousel-prev-button",
    onClick: scrollToPrev
  }, /*#__PURE__*/React.createElement(ArrowLeftOutline, null)), /*#__PURE__*/React.createElement(StyledCarousel, {
    className: `${className}-items`,
    ref: carouselRef
  }, childrenArray.map(child => /*#__PURE__*/React.createElement(StyledCarouselItem, {
    className: `${className}-item-wrapper FIE_carousel-item`,
    key: child.key
  }, child))), isNextArrowShown && /*#__PURE__*/React.createElement(StyledNextArrowWrapper, {
    className: "FIE_carousel-next-button",
    onClick: scrollToNext
  }, /*#__PURE__*/React.createElement(ArrowRightOutline, null)));
};
Carousel.defaultProps = {
  style: null
};
Carousel.propTypes = {
  children: PropTypes.node.isRequired,
  className: PropTypes.string.isRequired,
  style: PropTypes.instanceOf(Object)
};

/** External Dependencies */
const StyledFilterItem = styled.div`
  display: inline-flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 0px 2px;
  gap: 6px;
  cursor: pointer;
  border-radius: 8px;
  color: black;
  canvas {
    border-radius: 10px;
  }
`;
const FilterItemPreview = styled(Stage)`
  [aria-selected="true"] & {
    padding: 2px;
    color: #e35628;
    border: 1px solid black;
    border-radius: 10px;
  }
`;
const FilterItemLabel = styled(Label$6)(({
  theme
}) => styled.css`
    color: black;
    font-size: 0.6875em;
    line-height: 14px;
    font-family: "Open Sans", sans-serif;
    ${theme.typography.font[FontVariant.LabelExtraSmallUp]};

    [aria-selected="true"] & {
      color: black;
    }
  `);

/** External Dependencies */
const MAX_FILTER_PREVIEW_WIDTH = 60;
const MAX_FILTER_PREVIEW_HEIGHT = 45;
const FilterItem = ({
  filterLabel,
  filterFn,
  applyFilter,
  isActive,
  image
}) => {
  const imageNodeRef = React.useRef();
  const handleFilterApplying = React.useCallback(() => {
    applyFilter(filterFn);
  }, [filterFn]);
  const cacheImageNode = React.useCallback(() => {
    if (imageNodeRef.current) {
      imageNodeRef.current.cache();
    } else {
      setTimeout(cacheImageNode, 0);
    }
  }, []);
  React.useEffect(() => {
    if (image) {
      cacheImageNode();
    }
    return () => {
      imageNodeRef.current?.clearCache();
    };
  }, [image]);
  const imgRatio = image.width / image.height;
  const isVerticalImg = imgRatio < 1;
  const filterImgPreviewWidth = isVerticalImg ? MAX_FILTER_PREVIEW_WIDTH : MAX_FILTER_PREVIEW_HEIGHT * imgRatio;
  const filterImgPreviewHeight = isVerticalImg ? MAX_FILTER_PREVIEW_WIDTH / imgRatio : MAX_FILTER_PREVIEW_HEIGHT;
  return /*#__PURE__*/React.createElement(StyledFilterItem, {
    className: "FIE_filters-item",
    onClick: handleFilterApplying,
    "aria-selected": isActive
  }, /*#__PURE__*/React.createElement(FilterItemPreview, {
    className: "FIE_filters-item-preview",
    width: MAX_FILTER_PREVIEW_WIDTH,
    height: MAX_FILTER_PREVIEW_HEIGHT
  }, /*#__PURE__*/React.createElement(Layer, {
    onTap: handleFilterApplying
  }, /*#__PURE__*/React.createElement(Image$1, {
    image: image,
    filters: filterFn ? [filterFn] : [],
    width: filterImgPreviewWidth,
    height: filterImgPreviewHeight,
    x: -(filterImgPreviewWidth - MAX_FILTER_PREVIEW_WIDTH) / 2,
    y: -(filterImgPreviewHeight - MAX_FILTER_PREVIEW_HEIGHT) / 2,
    ref: imageNodeRef
  }))), /*#__PURE__*/React.createElement(FilterItemLabel, {
    className: "FIE_filters-item-label"
  }, filterLabel));
};
FilterItem.defaultProps = {
  filterFn: undefined
};
FilterItem.propTypes = {
  image: PropTypes.instanceOf(HTMLImageElement).isRequired,
  filterLabel: PropTypes.string.isRequired,
  filterFn: PropTypes.func,
  applyFilter: PropTypes.func.isRequired,
  isActive: PropTypes.bool.isRequired
};
var FilterItem$1 = /*#__PURE__*/React.memo(FilterItem);

/** External Dependencies */
const konvaFilters = Konva$2.Filters;
const AVAILABLE_FILTERS = [{
  label: 'Original',
  filterFn: null
}, {
  label: 'Invert',
  filterFn: konvaFilters.Invert
}, {
  label: 'Black & White',
  filterFn: BlackAndWhite
}, {
  label: 'Sepia',
  filterFn: konvaFilters.Sepia
}, {
  label: 'Solarize',
  filterFn: konvaFilters.Solarize
}, {
  label: 'Clarendon',
  filterFn: Clarendon
}, {
  label: 'Gingham',
  filterFn: Gingham
}, {
  label: 'Moon',
  filterFn: Moon
}, {
  label: 'Lark',
  filterFn: Lark
}, {
  label: 'Reyes',
  filterFn: Reyes
}, {
  label: 'Juno',
  filterFn: Juno
}, {
  label: 'Slumber',
  filterFn: Slumber
}, {
  label: 'Crema',
  filterFn: Crema
}, {
  label: 'Ludwig',
  filterFn: Ludwig
}, {
  label: 'Aden',
  filterFn: Aden
}, {
  label: 'Perpetua',
  filterFn: Perpetua
}, {
  label: 'Amaro',
  filterFn: Amaro
}, {
  label: 'Mayfair',
  filterFn: Mayfair
}, {
  label: 'Rise',
  filterFn: Rise
}, {
  label: 'Hudson',
  filterFn: Hudson
}, {
  label: 'Valencia',
  filterFn: Valencia
}, {
  label: 'X-Pro II',
  filterFn: XPro2
}, {
  label: 'Sierra',
  filterFn: Sierra
}, {
  label: 'Willow',
  filterFn: Willow
}, {
  label: 'Lo-Fi',
  filterFn: LoFi
}, {
  label: 'Inkwell',
  filterFn: konvaFilters.Grayscale
}, {
  label: 'Hefe',
  filterFn: Hefe
}, {
  label: 'Nashville',
  filterFn: Nashville
}, {
  label: 'Stinson',
  filterFn: Stinson
}, {
  label: 'Vesper',
  filterFn: Vesper
}, {
  label: 'Earlybird',
  filterFn: Earlybird
}, {
  label: 'Brannan',
  filterFn: Brannan
}, {
  label: 'Sutro',
  filterFn: Sutro
}, {
  label: 'Toaster',
  filterFn: Toaster
}, {
  label: 'Walden',
  filterFn: Walden
}, {
  label: '1977',
  filterFn: NinteenSeventySeven
}, {
  label: 'Kelvin',
  filterFn: Kelvin
}, {
  label: 'Maven',
  filterFn: Maven
}, {
  label: 'Ginza',
  filterFn: Ginza
}, {
  label: 'Skyline',
  filterFn: Skyline
}, {
  label: 'Dogpatch',
  filterFn: Dogpatch
}, {
  label: 'Brooklyn',
  filterFn: Brooklyn
}, {
  label: 'Helena',
  filterFn: Helena
}, {
  label: 'Ashby',
  filterFn: Ashby
}, {
  label: 'Charmes',
  filterFn: Charmes
}];

/** External Dependencies */
const style$1 = {
  maxWidth: '100%',
  width: '100%'
};
const Filters = () => {
  const {
    originalImage
  } = useStore();
  const [appliedFilter, applyFilter] = useFilter();
  return /*#__PURE__*/React.createElement(Carousel, {
    className: "FIE_filters",
    style: style$1
  }, AVAILABLE_FILTERS.map(filter => /*#__PURE__*/React.createElement(FilterItem$1, {
    key: filter.label,
    filterLabel: filter.label,
    filterFn: filter.filterFn,
    applyFilter: applyFilter,
    isActive: appliedFilter === filter.filterFn,
    image: originalImage
  })));
};

/** External Dependencies */
const TextButton = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React.createElement(ToolsBarItemButton$1, {
  className: "FIE_text-tool-button",
  id: TOOLS_IDS.TEXT,
  label: t('textTool'),
  Icon: Text,
  onClick: selectTool,
  isSelected: isSelected
});
TextButton.defaultProps = {
  isSelected: false
};
TextButton.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const StyledOptions = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 8px 16px;
  margin-top: 4px;
  gap: 8px;
  flex-wrap: wrap;

  ${({
  isPhoneScreen
}) => isPhoneScreen && `
    max-width: 315px;
    padding: 0;
  `}

  svg {
    color: ${({
  theme: {
    palette
  }
}) => palette[Color.IconsPrimary]};
  }
`;
const StyledOptionsWrapper = styled.div`
  display: flex;
  flex-wrap: wrap;
  margin-left: -4px;
  gap: 4px;

  .FIE_annotation-option-triggerer {
    padding: 6px;
  }
`;
const StyledOptionPopupContent = styled.div`
  background: ${({
  theme
}) => theme.palette['bg-secondary']};
  border-radius: 4px;
  display: flex;
  flex-direction: column;
  padding: 8px 12px;
  overflow: visible;

  ${({
  position
}) => position && `
    display: grid;
    grid-template-columns: repeat(4, auto);
    padding: 0;
    margin-top: 8px;
    box-shadow: 0px 1px 2px ${({
  theme
}) => theme.palette['light-shadow']};
    `}

  ${({
  disablePadding
}) => disablePadding && `
      padding: 0;
    `}

  * {
  color: black;
  font-size: 11px;
   line-height: 14px;
  font-family: 'Open Sans', sans-serif;
  letter-spacing: 0.04rem;
  }
`;
const StyledSpacedOptionFields = styled.div`
  display: flex;
  align-items: center;
  gap: 12px;

  ${({
  preventFlex
}) => preventFlex && `
      display: block;

      label {
        margin-bottom: 8px;
      }
  `}
`;
const StyledTwoColumnsContainer = styled.div`
  display: flex;
  align-items: center;
  justify-content: space-between;
`;
const StyledColumn = styled.div`
  &:not(:first-child) {
    margin-left: 12px;
  }
`;
const StyledIconWrapper = styled.div(({
  theme,
  addThinBorder,
  secondaryIconColor,
  active,
  watermarkTool
}) => `
    cursor: pointer;
    padding: ${watermarkTool ? '6px' : '8px 12px'};
    border-radius: 2px;
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 6px;

    svg {
      vertical-align: middle;
      margin: 0 auto;
      color: black;
    }

    ${addThinBorder ? `border: 0.5px solid ${theme.palette['borders-secondary']};
        padding: 8px 8px;` : ''};
    color: black;

    ${active && `
      border-radius: 8px;
      border-color: #c9c9c9;
      background-color: #dedede;

        * {
          color: black;
        }
      `}

    :hover {
      background: #dedede;
    }
  `);
const StyledIconLabel = styled(Label$6)`
  color: black;
`;

/** External Dependencies */
const MIN_PERCENTANGE$1 = 0;
const MAX_PERCENTANGE$1 = 1;
const OpacityField = ({
  annotation,
  updateAnnotation,
  t
}) => {
  const {
    opacity
  } = annotation;
  const opacityValue = Math.round(opacity * 100);
  const changeOpacity = newOpactiy => {
    updateAnnotation({
      opacity: restrictNumber(newOpactiy / 100, MIN_PERCENTANGE$1, MAX_PERCENTANGE$1)
    });
  };
  return /*#__PURE__*/React.createElement(StyledOptionPopupContent, {
    disablePadding: true
  }, /*#__PURE__*/React.createElement(Label$6, null, t('transparency')), /*#__PURE__*/React.createElement(StyledSpacedOptionFields, null, /*#__PURE__*/React.createElement(Slider, {
    annotation: "%",
    onChange: changeOpacity,
    value: opacityValue,
    noMargin: true
  }), /*#__PURE__*/React.createElement(StyledIconLabel, null, `${opacityValue}%`)));
};
OpacityField.propTypes = {
  annotation: PropTypes.instanceOf(Object).isRequired,
  t: PropTypes.func.isRequired,
  updateAnnotation: PropTypes.func.isRequired
};

const ColorPickerModal$1 = styled(Modal$2)`
  max-width: 350px;
`;
const ColorPickerWrap = styled.div`
  .SfxColorPicker-root {
    max-width: 100%;
    padding: 0;
    box-shadow: none;
    border: none;
    ${({
  hideModalTitle
}) => hideModalTitle && "padding-top: 12px;"}
  }

  .SfxColorPicker-action {
    display: flex;
    gap: 12px;

    .SfxColorPicker-select {
      width: 90px;
    }
    .SfxInput-root {
      width: 190px !important;
    }
  }

  .SfxColorPicker-icon {
    color: black;
    padding-right: 10px;
  }

  .SfxColorPicker-range-picker,
  .SfxColorPicker-bar-wrapper {
    width: 100%;
  }
`;
const ModalActions = styled(ModalActions$2)`
  gap: 12px;
  padding: 24px;

  .SfxButton-root {
    flex: 1;
    margin: 0;
    height: 30px;
    color: black;
    border-radius: 50px;
    background-color: white;
    border: 1px solid #c9c9c9;
    line-height: 14px;
    font-family: "Open Sans", sans-serif;
    letter-spacing: 0.04rem;

    & > span > span {
      font-size: 0.75rem;
    }

    &:hover {
      background-color: #dedede;
    }
  }
`;
const Styled = {
  ColorPickerModal: ColorPickerModal$1,
  ColorPickerWrap,
  ModalActions
};

const modalStyles = {
  zIndex: 1301
};
const ColorPickerModal = ({
  hideModalTitle,
  defaultColor = '',
  onChange,
  open,
  pinnedColors,
  onClose,
  onApply
}) => {
  const {
    t
  } = useStore();
  if (!open) {
    return null;
  }
  return /*#__PURE__*/React.createElement(Styled.ColorPickerModal, {
    onClose: onClose,
    open: open,
    fullWidth: true,
    modalStyles: modalStyles
  }, !hideModalTitle && /*#__PURE__*/React.createElement(modalTitle, {
    onClose: onClose,
    primary: t('colorPickerModalTitleLabel', 'Pick color'),
    icon: /*#__PURE__*/React.createElement(ColorPickerIcon$1, {
      size: 29
    }),
    iconShadow: true,
    variant: "with-icon"
  }), /*#__PURE__*/React.createElement(ModalContent$1, null, /*#__PURE__*/React.createElement(Styled.ColorPickerWrap, {
    hideModalTitle: hideModalTitle
  }, /*#__PURE__*/React.createElement(ColorPicker$1, {
    onChange: onChange,
    pinnedColors: pinnedColors,
    defaultColor: defaultColor,
    showTransparentColor: true
  }))), /*#__PURE__*/React.createElement(Styled.ModalActions, null, /*#__PURE__*/React.createElement(Button$1, {
    onClick: onClose,
    style: {
      fontSize: "11px"
    }
  }, t('cancel')), /*#__PURE__*/React.createElement(Button$1, {
    onClick: onApply
  }, t('apply'))));
};
ColorPickerModal.defaultProps = {
  defaultColor: '',
  pinnedColors: [],
  onChange: () => {},
  open: false,
  hideModalTitle: false,
  onClose: () => {},
  onApply: () => {}
};
ColorPickerModal.propTypes = {
  defaultColor: PropTypes.string,
  onChange: PropTypes.func,
  open: PropTypes.bool,
  hideModalTitle: PropTypes.bool,
  pinnedColors: PropTypes.arrayOf(PropTypes.string),
  onClose: PropTypes.func,
  onApply: PropTypes.func
};

/** External Dependencies */
const StyledPickerTrigger = styled.div.attrs(({
  $color
}) => ({
  style: {
    background: $color === 'rgba(0,0,0,0)' ? 'repeating-conic-gradient(#5d6d7e 0% 25%, transparent 0% 50%) 50% / 8px 8px' : $color
  }
}))`
  background: ${({
  theme
}) => theme.palette['icons-primary']};
  width: 32px;
  height: 32px;
  border: 1px solid ${({
  theme
}) => theme.palette[Color.BorderPrimaryStateless]};
  cursor: pointer;
  box-sizing: border-box;
  border-radius: 50px;
`;

/** External Dependencies */
const pinnedColorsKey = 'FIE_pinnedColors';

// colorFor is used to save the latest color for a specific purpose (e.g. fill/shadow/stroke)
const ColorInput = ({
  onChange,
  color,
  colorFor
}) => {
  const {
    selectionsIds = [],
    config: {
      annotationsCommon = {}
    },
    dispatch,
    latestColors = {}
  } = useStore();
  const latestColor = latestColors[colorFor];
  const [anchorEl, setAnchorEl] = React.useState();
  const [currentColor, setCurrentColor] = React.useState(() => latestColor || color || annotationsCommon.fill);
  const [pinnedColors, setPinnedColors] = React.useState(window?.localStorage ? JSON.parse(localStorage.getItem(pinnedColorsKey) || '[]') : []);
  const initialColor = React.useRef(currentColor);
  const changePinnedColors = newPinnedColors => {
    if (!window?.localStorage) {
      return;
    }
    const localStoragePinnedColors = window.localStorage.getItem(pinnedColorsKey);
    if (JSON.stringify(newPinnedColors) !== localStoragePinnedColors) {
      const maxOfSavedColors = 9;
      const pinnedColorsToSave = newPinnedColors.slice(-maxOfSavedColors);
      window.localStorage.setItem(pinnedColorsKey, JSON.stringify(pinnedColorsToSave));
      setPinnedColors(pinnedColorsToSave);
    }
  };
  const changeColor = (_newColorHex, rgba, newPinnedColors) => {
    setCurrentColor(rgba);
    onChange(rgba);
    changePinnedColors(newPinnedColors);
    if (latestColor !== rgba) {
      dispatch({
        type: SET_LATEST_COLOR,
        payload: {
          latestColors: {
            [colorFor]: rgba
          }
        }
      });
    }
  };
  const togglePicker = e => {
    setAnchorEl(anchorEl ? null : e.currentTarget);
  };
  const closePicker = e => {
    onChange(initialColor.current || currentColor);
    togglePicker(e);
  };
  React.useEffect(() => {
    const colorToSet = selectionsIds.length === 0 && latestColor || color;
    setCurrentColor(colorToSet);
    onChange(colorToSet);
  }, [color, selectionsIds]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledPickerTrigger, {
    className: "FIE_color-picker-triggerer",
    onClick: togglePicker,
    $color: currentColor,
    onChange: onChange
  }), /*#__PURE__*/React.createElement(ColorPickerModal, {
    hideModalTitle: true,
    onChange: changeColor,
    defaultColor: currentColor,
    pinnedColors: pinnedColors,
    open: Boolean(anchorEl),
    onClose: closePicker,
    onApply: togglePicker
  }));
};
ColorInput.defaultProps = {
  color: undefined
};
ColorInput.propTypes = {
  onChange: PropTypes.func.isRequired,
  colorFor: PropTypes.string.isRequired,
  color: PropTypes.string
};

/** External Dependencies */
const MIN_PERCENTANGE = 0;
const MAX_PERCENTANGE = 100;
const StrokeFields = ({
  annotation,
  updateAnnotation
}) => {
  const {
    stroke,
    strokeWidth
  } = annotation;
  const changeStrokeWidth = newStrokeWidth => {
    updateAnnotation({
      strokeWidth: restrictNumber(newStrokeWidth, MIN_PERCENTANGE, MAX_PERCENTANGE)
    });
  };
  const changeStrokeColor = newStrokeColor => {
    updateAnnotation({
      stroke: newStrokeColor
    });
  };
  return /*#__PURE__*/React.createElement(StyledSpacedOptionFields, null, /*#__PURE__*/React.createElement(Slider, {
    annotation: "px",
    onChange: changeStrokeWidth,
    value: strokeWidth,
    noMargin: true
  }), /*#__PURE__*/React.createElement(ColorInput, {
    color: stroke,
    onChange: changeStrokeColor,
    colorFor: "stroke"
  }));
};
StrokeFields.propTypes = {
  annotation: PropTypes.instanceOf(Object).isRequired,
  updateAnnotation: PropTypes.func.isRequired
};

/** External Dependencies */
const ShadowFields = ({
  annotation,
  updateAnnotation,
  t
}) => {
  const {
    shadowOffsetX,
    shadowOffsetY,
    shadowBlur,
    shadowColor,
    shadowOpacity
  } = annotation;
  const changeSliderValue = (property, newValue, min = 0, max = 100) => {
    updateAnnotation({
      [property]: restrictNumber(newValue, min, max)
    });
  };
  const changeShadowColor = newShadowColor => {
    updateAnnotation({
      shadowColor: newShadowColor
    });
  };
  return /*#__PURE__*/React.createElement(StyledSpacedOptionFields, {
    preventFlex: true
  }, /*#__PURE__*/React.createElement(Label$6, null, t('shadow')), /*#__PURE__*/React.createElement(StyledTwoColumnsContainer, null, /*#__PURE__*/React.createElement(StyledColumn, null, /*#__PURE__*/React.createElement(Label$6, null, t('horizontal')), /*#__PURE__*/React.createElement(Slider, {
    annotation: "px",
    min: -100,
    max: 100,
    onChange: val => changeSliderValue('shadowOffsetX', val, -100, 100),
    value: shadowOffsetX || 0,
    hideTrack: true
  })), /*#__PURE__*/React.createElement(StyledColumn, null, /*#__PURE__*/React.createElement(Label$6, null, t('vertical')), /*#__PURE__*/React.createElement(Slider, {
    annotation: "px",
    min: -100,
    max: 100,
    onChange: val => changeSliderValue('shadowOffsetY', val, -100, 100),
    value: shadowOffsetY || 0,
    hideTrack: true
  }))), /*#__PURE__*/React.createElement(StyledTwoColumnsContainer, null, /*#__PURE__*/React.createElement(StyledColumn, null, /*#__PURE__*/React.createElement(Label$6, null, t('blur')), /*#__PURE__*/React.createElement(Slider, {
    annotation: "%",
    onChange: val => changeSliderValue('shadowBlur', val),
    value: shadowBlur
  })), /*#__PURE__*/React.createElement(StyledColumn, null, /*#__PURE__*/React.createElement(Label$6, null, t('opacity')), /*#__PURE__*/React.createElement(Slider, {
    annotation: "%",
    onChange: val => changeSliderValue('shadowOpacity', val / 100, 0, 1),
    value: Math.round(shadowOpacity * 100)
  }))), /*#__PURE__*/React.createElement(ColorInput, {
    color: shadowColor,
    onChange: changeShadowColor,
    colorFor: "shadow"
  }));
};
ShadowFields.propTypes = {
  annotation: PropTypes.instanceOf(Object).isRequired,
  updateAnnotation: PropTypes.func.isRequired,
  t: PropTypes.func.isRequired
};

/** Internal Dependencies */
const mapPositionStringToPoint = (annotation, designLayer, position) => {
  const {
    width,
    height,
    scaleX = 1,
    scaleY = 1,
    rotation = 0,
    padding = 0,
    radius,
    radiusX,
    radiusY
  } = annotation;
  const annotationWidth = width || (radius || radiusX) * 2;
  const annotationHeight = height || (radius || radiusY) * 2;
  const scaledRotatedAnnotationSize = getSizeAfterRotation(annotationWidth * scaleX, annotationHeight * scaleY, rotation);
  const {
    clipWidth: designLayerWidth,
    clipHeight: designLayerHeight,
    clipX: designLayerX = 0,
    clipY: designLayerY = 0
  } = designLayer.attrs;
  const xAxisMapping = {
    left: designLayerX + scaledRotatedAnnotationSize.offsetLeft + padding,
    center: designLayerX + designLayerWidth / 2 - (scaledRotatedAnnotationSize.width / 2 - scaledRotatedAnnotationSize.offsetLeft) + padding,
    right: designLayerX + designLayerWidth - scaledRotatedAnnotationSize.width - padding + scaledRotatedAnnotationSize.offsetLeft
  };
  const yAxisMapping = {
    top: designLayerY + scaledRotatedAnnotationSize.offsetTop + padding,
    middle: designLayerY + designLayerHeight / 2 - (scaledRotatedAnnotationSize.height / 2 - scaledRotatedAnnotationSize.offsetTop) + padding,
    bottom: designLayerY + designLayerHeight - scaledRotatedAnnotationSize.height - padding + scaledRotatedAnnotationSize.offsetTop
  };
  const mapStringToPoint = {
    [POSITIONS.TOP_LEFT]: () => ({
      x: xAxisMapping.left,
      y: yAxisMapping.top
    }),
    [POSITIONS.TOP_CENTER]: () => ({
      x: xAxisMapping.center,
      y: yAxisMapping.top
    }),
    [POSITIONS.TOP_RIGHT]: () => ({
      x: xAxisMapping.right,
      y: yAxisMapping.top
    }),
    [POSITIONS.MIDDLE_LEFT]: () => ({
      x: xAxisMapping.left,
      y: yAxisMapping.middle
    }),
    [POSITIONS.MIDDLE_CENTER]: () => ({
      x: xAxisMapping.center,
      y: yAxisMapping.middle
    }),
    [POSITIONS.MIDDLE_RIGHT]: () => ({
      x: xAxisMapping.right,
      y: yAxisMapping.middle
    }),
    [POSITIONS.BOTTOM_LEFT]: () => ({
      x: xAxisMapping.left,
      y: yAxisMapping.bottom
    }),
    [POSITIONS.BOTTOM_CENTER]: () => ({
      x: xAxisMapping.center,
      y: yAxisMapping.bottom
    }),
    [POSITIONS.BOTTOM_RIGHT]: () => ({
      x: xAxisMapping.right,
      y: yAxisMapping.bottom
    })
  };
  return mapStringToPoint[position]();
};

/** Internal Dependencies */
const AVAILABLE_POSITIONS = Object.values(POSITIONS);
const posCssRotateDegFromRightSide = {
  [POSITIONS.TOP_LEFT]: -145,
  [POSITIONS.TOP_CENTER]: -90,
  [POSITIONS.TOP_RIGHT]: -45,
  [POSITIONS.MIDDLE_LEFT]: 180,
  [POSITIONS.MIDDLE_CENTER]: 0,
  [POSITIONS.MIDDLE_RIGHT]: 0,
  [POSITIONS.BOTTOM_LEFT]: 135,
  [POSITIONS.BOTTOM_CENTER]: 90,
  [POSITIONS.BOTTOM_RIGHT]: 45
};
const POPPABLE_OPTIONS = {
  OPACITY: 'opacity',
  STROKE: 'stroke',
  SHADOW: 'shadow',
  POSITION: 'position'
};

/** External Dependencies */
const PositionFields = ({
  annotation,
  updateAnnotation
}) => {
  const [position, setPosition] = React.useState(null);
  const {
    designLayer
  } = useStore();
  const changePosition = newPositionStr => {
    updateAnnotation(mapPositionStringToPoint(annotation, designLayer, newPositionStr));
    setPosition(newPositionStr);
  };
  const positionsLength = AVAILABLE_POSITIONS.length;
  return AVAILABLE_POSITIONS.map((pos, i) => /*#__PURE__*/React.createElement(React.Fragment, {
    key: pos
  }, /*#__PURE__*/React.createElement(StyledIconWrapper, {
    onClick: () => changePosition(pos),
    active: position === pos,
    secondaryIconColor: true,
    addThinBorder: true
  }, pos === POSITIONS.MIDDLE_CENTER ? /*#__PURE__*/React.createElement(Point, null) : /*#__PURE__*/React.createElement(ArrowRight, {
    style: {
      transform: `rotate(${posCssRotateDegFromRightSide[pos]}deg)`
    }
  })), (i + 1) % 3 === 0 && i + 1 !== positionsLength && /*#__PURE__*/React.createElement("div", null)));
};
PositionFields.propTypes = {
  annotation: PropTypes.instanceOf(Object).isRequired,
  updateAnnotation: PropTypes.func.isRequired
};

const AnnotationOptions = ({
  children,
  morePoppableOptionsPrepended,
  moreOptionsPopupComponentsObj,
  morePoppableOptionsAppended,
  annotation,
  updateAnnotation,
  hideFillOption,
  hidePositionField,
  className,
  ...rest
}) => {
  const [anchorEl, setAnchorEl] = React.useState(null);
  const [currentOption, setCurrentOption] = React.useState(null);
  const {
    config: {
      useCloudimage
    },
    t
  } = useStore();
  const isPhoneScreen = usePhoneScreen(320);
  const options = React.useMemo(() => [...morePoppableOptionsPrepended, {
    titleKey: 'opacity',
    name: POPPABLE_OPTIONS.OPACITY,
    Icon: Transparency$1
  }, ...(!useCloudimage ? [{
    titleKey: 'stroke',
    name: POPPABLE_OPTIONS.STROKE,
    Icon: Stroke$1
  }, {
    titleKey: 'shadow',
    name: POPPABLE_OPTIONS.SHADOW,
    Icon: Shadow$1
  }] : []), !hidePositionField ? {
    titleKey: 'position',
    name: POPPABLE_OPTIONS.POSITION,
    Icon: Position$1
  } : undefined], [morePoppableOptionsPrepended]);
  const optionsPopups = React.useMemo(() => ({
    ...moreOptionsPopupComponentsObj,
    [POPPABLE_OPTIONS.OPACITY]: OpacityField,
    [POPPABLE_OPTIONS.STROKE]: StrokeFields,
    [POPPABLE_OPTIONS.SHADOW]: ShadowFields,
    [POPPABLE_OPTIONS.POSITION]: PositionFields,
    ...morePoppableOptionsAppended
  }), [moreOptionsPopupComponentsObj]);
  const toggleOptionPopup = React.useCallback((e, targetOptionName) => {
    const targetAnchorEl = e?.currentTarget;
    setAnchorEl(targetAnchorEl);
    setCurrentOption(targetOptionName);
  }, []);
  const changeAnnotationFill = React.useCallback(newFill => {
    updateAnnotation({
      fill: newFill
    });
  }, [updateAnnotation]);
  const OptionPopupComponent = anchorEl && currentOption && optionsPopups[currentOption];
  const renderPositionFields = () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Label$6, null, t('position')), /*#__PURE__*/React.createElement(StyledOptionPopupContent, {
    position: true
  }, /*#__PURE__*/React.createElement(OptionPopupComponent, _extends$1({
    annotation: annotation,
    updateAnnotation: updateAnnotation
  }, rest))));
  return /*#__PURE__*/React.createElement(StyledOptions, {
    className: `FIE_annotations-options${className ? ` ${className}` : ''}`,
    isPhoneScreen: isPhoneScreen
  }, !hideFillOption && /*#__PURE__*/React.createElement(ColorInput, {
    color: annotation.fill,
    onChange: changeAnnotationFill,
    colorFor: "fill"
  }), children, /*#__PURE__*/React.createElement(StyledOptionsWrapper, null, options.map(option => option && /*#__PURE__*/React.createElement(StyledIconWrapper, {
    className: "FIE_annotation-option-triggerer",
    key: option.name,
    title: t(option.titleKey),
    onClick: e => toggleOptionPopup(e, option.name),
    active: currentOption === option.name
  }, /*#__PURE__*/React.createElement(option.Icon, {
    size: 20
  })))), OptionPopupComponent && /*#__PURE__*/React.createElement(Menu$2, {
    className: "FIE_annotation-option-popup",
    anchorEl: anchorEl,
    open: Boolean(anchorEl),
    onClose: toggleOptionPopup,
    position: "top"
  }, /*#__PURE__*/React.createElement(StyledOptionPopupContent, null, currentOption === POPPABLE_OPTIONS.POSITION ? renderPositionFields() : /*#__PURE__*/React.createElement(OptionPopupComponent, _extends$1({
    annotation: annotation,
    updateAnnotation: updateAnnotation
  }, rest)))));
};
AnnotationOptions.defaultProps = {
  children: undefined,
  morePoppableOptionsPrepended: [],
  moreOptionsPopupComponentsObj: {},
  morePoppableOptionsAppended: [],
  hideFillOption: false,
  hidePositionField: false,
  className: undefined
};
AnnotationOptions.propTypes = {
  annotation: PropTypes.instanceOf(Object).isRequired,
  updateAnnotation: PropTypes.func.isRequired,
  children: PropTypes.node,
  hideFillOption: PropTypes.bool,
  morePoppableOptionsPrepended: PropTypes.arrayOf(PropTypes.instanceOf(Object)),
  morePoppableOptionsAppended: PropTypes.arrayOf(PropTypes.instanceOf(Object)),
  moreOptionsPopupComponentsObj: PropTypes.instanceOf(Object),
  hidePositionField: PropTypes.bool,
  className: PropTypes.string
};

/** External Dependencies */
const StyledFontFamilySelect = styled(Select$2)`
  width: 160px;
  border: 1px solid #a8a8a8;
  border-radius: 50px;
  font-size: 11px;
`;
const StyledFontSizeInput = styled(Input$2)`
  width: 72px;
  border: 1px solid #a8a8a8;
  border-radius: 50px;
 input {
    font-size: 11px !important;
  }
`;
const StyledToolsWrapper = styled.div`
  display: flex;
`;

/** External Dependencies */
const MIN_VALUE$2 = 0;
const MAX_VALUE$2 = 100;
const SLIDER_STEP = 1;
const TextSpacingsFields = ({
  annotation: text,
  updateAnnotation: updateText,
  t
}) => {
  const {
    letterSpacing,
    lineHeight
  } = text;
  const updateValue = (prop, val) => {
    updateText({
      [prop]: restrictNumber(val, MIN_VALUE$2, MAX_VALUE$2)
    });
  };
  return /*#__PURE__*/React.createElement(StyledSpacedOptionFields, {
    preventFlex: true
  }, /*#__PURE__*/React.createElement(Label$6, null, t('letterSpacing')), /*#__PURE__*/React.createElement(Slider, {
    annotation: "px",
    isActive: Boolean(letterSpacing),
    onChange: val => updateValue('letterSpacing', val),
    value: letterSpacing,
    step: SLIDER_STEP
  }), /*#__PURE__*/React.createElement(Label$6, null, t('lineHeight')), /*#__PURE__*/React.createElement(Slider, {
    annotation: "px",
    isActive: Boolean(lineHeight),
    onChange: val => updateValue('lineHeight', val),
    value: lineHeight,
    step: SLIDER_STEP
  }));
};
TextSpacingsFields.propTypes = {
  annotation: PropTypes.instanceOf(Object).isRequired,
  updateAnnotation: PropTypes.func.isRequired,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const rightAlignmentCssTransform = {
  transform: 'scaleX(-1)'
};
const TextAlignmentFields = ({
  annotation: text,
  updateAnnotation: updateText
}) => {
  const {
    align
  } = text;
  const changeHorizontalAlignment = newHorizonalAlignment => {
    updateText({
      align: newHorizonalAlignment
    });
  };
  return /*#__PURE__*/React.createElement(StyledSpacedOptionFields, null, /*#__PURE__*/React.createElement(StyledIconWrapper, {
    onClick: () => changeHorizontalAlignment('left'),
    active: align === 'left'
  }, /*#__PURE__*/React.createElement(TextAlignLeft, null)), /*#__PURE__*/React.createElement(StyledIconWrapper, {
    onClick: () => changeHorizontalAlignment('center'),
    active: align === 'center'
  }, /*#__PURE__*/React.createElement(TextAlignCenter, null)), /*#__PURE__*/React.createElement(StyledIconWrapper, {
    onClick: () => changeHorizontalAlignment('right'),
    active: align === 'right'
  }, /*#__PURE__*/React.createElement(TextAlignLeft, {
    style: rightAlignmentCssTransform
  })));
};
TextAlignmentFields.propTypes = {
  annotation: PropTypes.instanceOf(Object).isRequired,
  updateAnnotation: PropTypes.func.isRequired
};

/** External Dependencies */
const TEXT_ALIGNMENT = 'text-alignment';
const TEXT_SPACINGS = 'text-spacings';
const TEXT_POPPABLE_OPTIONS = [{
  titleKey: 'textAlignment',
  name: TEXT_ALIGNMENT,
  Icon: TextAlignCenter
}, {
  titleKey: 'textSpacings',
  name: TEXT_SPACINGS,
  Icon: Spacing$1
}];
const textOptionsPopupComponents = {
  [TEXT_ALIGNMENT]: TextAlignmentFields,
  [TEXT_SPACINGS]: TextSpacingsFields
};

let textarea;
let textNode;
let transformer;
let editFinishCallback;
let disableTextEditCallback;
const handleOutsideClick = e => {
  if (e.target !== textarea) {
    const textValue = textarea.value;
    // eslint-disable-next-line no-use-before-define
    deactivateTextChange();
    editFinishCallback(textValue);
  }
};
const deactivateTextChange = () => {
  if (textarea) {
    textarea.remove(textarea);
  }
  if (window) {
    window.removeEventListener('click', handleOutsideClick);
  }
  if (textNode) {
    textNode.show();
  }
  if (transformer) {
    transformer.show();
    /**
     * Disabled because of bug (#322)
     */
    // transformer.forceUpdate();
  }
  if (typeof disableTextEditCallback === 'function') {
    disableTextEditCallback();
  }
  textNode = null;
  textarea = null;
  transformer = null;
};
const activateTextChange = (textNodeId, canvasStage, currentTransformer, finishingCallback, dismissingTextEditing) => {
  editFinishCallback = finishingCallback;
  disableTextEditCallback = dismissingTextEditing;
  transformer = currentTransformer;
  textNode = canvasStage.findOne(`#${textNodeId}`);
  // hide text node and transformer:
  textNode.hide();
  transformer.hide();

  // at first lets find position of text node relative to the stage:
  const textPosition = textNode.absolutePosition();

  // create textarea and style it
  textarea = document.createElement('textarea');
  canvasStage.container().parentNode.appendChild(textarea);

  // apply many styles to match text on canvas as close as possible
  // remember that text rendering on canvas and on the textarea can be different
  // and sometimes it is hard to make it 100% the same. But we will try...
  textarea.value = textNode.text();
  textarea.style.position = 'absolute';
  textarea.style.top = `${textPosition.y}px`;
  textarea.style.left = `${textPosition.x}px`;
  textarea.style.width = `${textNode.width() - textNode.padding() * 2}px`;
  textarea.style.height = `${textNode.height() - textNode.padding() * 2 + 5}px`;
  textarea.style.maxWidth = `${textNode.width() - textNode.padding() * 2}px`;
  textarea.style.maxHeight = `${textNode.height() - textNode.padding() * 2 + 5}px`;
  textarea.style.fontSize = `${textNode.fontSize()}px`;
  textarea.style.border = '1px solid rgba(0, 0, 0, 0.5)';
  textarea.style.padding = '0px';
  textarea.style.margin = '0px';
  textarea.style.overflow = 'hidden';
  textarea.style.background = 'none';
  textarea.style.outline = 'none';
  textarea.style.resize = 'none';
  textarea.style.lineHeight = textNode.lineHeight();
  textarea.style.fontFamily = textNode.fontFamily();
  textarea.style.transformOrigin = 'left top';
  textarea.style.textAlign = textNode.align();
  textarea.style.fontStyle = textNode.fontStyle();
  textarea.style.letterSpacing = textNode.letterSpacing();
  textarea.style.lineHeight = textNode.lineHeight();
  textarea.style.color = textNode.fill();
  const rotation = textNode.rotation();
  let transform = '';
  if (rotation) {
    transform += `rotateZ(${rotation}deg)`;
  }
  let firefoxMovePx = 0;
  // also we need to slightly move textarea on firefox
  // because it jumps a bit
  const isFirefox = navigator.userAgent.toLowerCase().indexOf('firefox') > -1;
  if (isFirefox) {
    firefoxMovePx += 2 + Math.round(textNode.fontSize() / 20);
  }
  transform += `translateY(-${firefoxMovePx}px)`;
  textarea.style.transform = transform;

  // reset height
  textarea.style.height = 'auto';
  // after browsers resized it we can set actual value
  textarea.style.height = `${textarea.scrollHeight + 3}px`;
  textarea.focus();
  function setTextareaWidth(newTextWidth) {
    let newWidth = newTextWidth;
    if (!newWidth) {
      // set width for placeholder
      newWidth = textNode.placeholder.length * textNode.fontSize();
    }
    // some extra fixes on different browsers
    const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
    if (isSafari || isFirefox) {
      newWidth = Math.ceil(newWidth);
    }
    const isEdge = document.documentMode || /Edge/.test(navigator.userAgent);
    if (isEdge) {
      newWidth += 1;
    }
    textarea.style.width = `${newWidth}px`;
  }
  textarea.addEventListener('keydown', event => {
    // hide on enter
    // but don't hide on shift + enter
    if (event.key === 'Enter' && !event.shiftKey) {
      const textContent = textarea.value;
      deactivateTextChange();
      editFinishCallback(textContent);
    }
    // on esc do not set value back to node
    if (event.key === 'Escape') {
      deactivateTextChange();
    }
  });
  textarea.addEventListener('keydown', event => {
    if (event.key === 'Enter' || event.key === 'Escape') {
      return;
    }
    const scale = textNode.getAbsoluteScale().x;
    setTextareaWidth(textNode.width() * scale);
    textarea.style.height = 'auto';
    textarea.style.height = `${textarea.scrollHeight + textNode.fontSize()}px`;
  });
  if (window) {
    setTimeout(() => {
      window.addEventListener('click', handleOutsideClick);
    });
  }
};

/** External Dependencies */
const TextControls = ({
  text,
  saveText,
  children
}) => {
  const {
    dispatch,
    textIdOfEditableContent,
    designLayer,
    t,
    config
  } = useStore();
  const {
    useCloudimage
  } = config;
  const {
    fonts = [],
    onFontChange
  } = config[TOOLS_IDS.TEXT];
  const changeTextProps = React.useCallback(e => {
    const {
      name,
      value,
      type
    } = e.target;
    saveText(latestText => ({
      id: latestText.id,
      [name]: type === 'number' ? restrictNumber(value, 1, 500) : value
    }));
  }, [saveText]);
  const changeFontFamily = React.useCallback(newFontFamily => {
    changeTextProps({
      target: {
        name: 'fontFamily',
        value: newFontFamily
      }
    });
    if (text.fontFamily !== newFontFamily && typeof onFontChange === 'function') {
      const reRenderCanvasFn = designLayer.draw.bind(designLayer);
      onFontChange(newFontFamily, reRenderCanvasFn);
    }
  }, [changeTextProps, text, designLayer]);
  const changeFontStyle = React.useCallback(newStyle => {
    let fontStyle = text.fontStyle?.replace('normal', '').split(' ') || [];
    if (Object.keys(fontStyle).length > 0 && fontStyle.includes(newStyle)) {
      fontStyle = fontStyle.filter(style => style !== newStyle);
    } else {
      fontStyle.push(newStyle);
    }
    changeTextProps({
      target: {
        name: 'fontStyle',
        value: fontStyle.join(' ').trim() || 'normal'
      }
    });
  }, [text]);
  const disableTextEdit = React.useCallback(() => {
    dispatch({
      type: ENABLE_TEXT_CONTENT_EDIT,
      payload: {
        textIdOfEditableContent: null
      }
    });
  }, []);
  const changeTextContent = React.useCallback(newContent => {
    changeTextProps({
      target: {
        name: 'text',
        value: newContent
      }
    });
    disableTextEdit();
  }, []);
  React.useEffect(() => {
    let transformer;
    if (textIdOfEditableContent && text.id === textIdOfEditableContent) {
      const canvasStage = designLayer.getStage();
      [transformer] = canvasStage.findOne(`#${TRANSFORMERS_LAYER_ID}`).children;
      activateTextChange(textIdOfEditableContent, canvasStage, transformer, changeTextContent, disableTextEdit);
    }
    return () => {
      if (transformer && textIdOfEditableContent) deactivateTextChange();
    };
  }, [textIdOfEditableContent]);
  return /*#__PURE__*/React.createElement(AnnotationOptions, {
    className: "FIE_text-tool-options",
    annotation: text,
    updateAnnotation: saveText,
    morePoppableOptionsPrepended: !useCloudimage ? TEXT_POPPABLE_OPTIONS : [],
    moreOptionsPopupComponentsObj: !useCloudimage ? textOptionsPopupComponents : {},
    t: t
  }, Array.isArray(fonts) && fonts.length > 1 && /*#__PURE__*/React.createElement(StyledFontFamilySelect, {
    className: "FIE_text-font-family-option",
    onChange: changeFontFamily,
    value: text.fontFamily,
    placeholder: t('fontFamily'),
    size: "sm"
  }, fonts.map((fontFamily = '') => /*#__PURE__*/React.createElement(MenuItem$1, {
    className: "FIE_text-font-family-item",
    key: fontFamily.value ?? fontFamily,
    value: fontFamily.value ?? fontFamily
  }, fontFamily.label ?? fontFamily))), /*#__PURE__*/React.createElement(StyledFontSizeInput, {
    className: "FIE_text-size-option",
    value: text.fontSize || '',
    name: "fontSize",
    onChange: changeTextProps,
    inputMode: "numeric",
    type: "number",
    size: "sm",
    placeholder: t('size')
  }), /*#__PURE__*/React.createElement(StyledToolsWrapper, null, !useCloudimage && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledIconWrapper, {
    className: "FIE_text-bold-option",
    active: (text.fontStyle || '').includes('bold'),
    onClick: () => changeFontStyle('bold'),
    watermarkTool: true
  }, /*#__PURE__*/React.createElement(FontBold$1, {
    size: 20
  })), /*#__PURE__*/React.createElement(StyledIconWrapper, {
    className: "FIE_text-italic-option",
    active: (text.fontStyle || '').includes('italic'),
    onClick: () => changeFontStyle('italic'),
    watermarkTool: true
  }, /*#__PURE__*/React.createElement(FontItalic$1, {
    size: 20
  }))), children));
};
TextControls.defaultProps = {
  children: null
};
TextControls.propTypes = {
  text: PropTypes.instanceOf(Object).isRequired,
  saveText: PropTypes.func.isRequired,
  children: PropTypes.node
};

/** External Dependencies */
const TextOptions = ({
  t
}) => {
  const [text, saveText] = useAnnotation({
    name: TOOLS_IDS.TEXT
  });
  return /*#__PURE__*/React.createElement(TextControls, {
    text: text,
    saveText: saveText,
    t: t
  });
};
TextOptions.propTypes = {
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const ImageButton = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React.createElement(ToolsBarItemButton$1, {
  className: "FIE_image-tool-button",
  id: TOOLS_IDS.IMAGE,
  label: t('imageTool'),
  Icon: ImageOutline,
  onClick: selectTool,
  isSelected: isSelected
});
ImageButton.defaultProps = {
  isSelected: false
};
ImageButton.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const StyledHiddenUploadInput = styled.input`
  display: none;
  width: 1px;
  height: 1px;
  position: absolute;
  z-index: -1;
`;

const HiddenUploadInput = (props, ref) => {
  return /*#__PURE__*/React.createElement(StyledHiddenUploadInput, _extends$1({
    type: "file",
    ref: ref
  }, props));
};
var HiddenUploadInput$1 = /*#__PURE__*/React.forwardRef(HiddenUploadInput);

/** External Dependencies */
const StyledButtonWrapper = styled.div`
  display: flex;
  align-items: center;
  margin: ${({
  $noMargin
}) => $noMargin ? "0" : "12px"};
  flex-shrink: 0;
`;
const StyledMainButton = styled(Button$1)`
  flex-grow: 1;
  justify-content: center;
  align-items: center;
  background-color: #ffd843;
  & > span > span {
    font-size: 0.75rem !important;
  }
  &:hover {
    background-color: #fcc638;
  }
  border: 1px solid #fcc638;
  padding: 6px 12px;
  &.FIE_watermark-add-button {
    background-color: white;
    border: 1px solid black;
  }
  &.fie_topbar-save-button: hover {
    background-color: #fcc638;
  }
  &.FIE_watermark-add-button:hover {
    background-color: #dedede;
    border: 1px solid black;
    color: black;
  }
  color: black;
  border-radius: 20px;

`;
const StyledMenu = styled(Menu$2)`
  padding: 8px;
  background-color: ${({
  theme: {
    palette
  }
}) => palette[Color.BackgroundStateless]};
`;
const StyledMenuItem = styled(MenuItem$1)`
  border-radius: 4px;
`;
const StyledMenuIcon = styled(MenuItemIcon$1)`
  display: flex;
  align-items: center;
`;

/** External Dependencies */
const ButtonWithMenu = ({
  onClick,
  title,
  label,
  color,
  menuFromBtn,
  menuItems,
  menuPosition = 'bottom',
  disabled = false,
  className,
  menuStyle,
  wrapperStyle,
  buttonRef,
  noMargin
}) => {
  const {
    t
  } = useStore();
  const isMounted = React.useRef(true);
  const [anchorEl, setAnchorEl] = React.useState(null);
  const buttonSize = 'sm';
  const filteredMenuItems = menuItems.filter(Boolean);
  const hasMultipleMenuItems = filteredMenuItems.length > 1;
  const openMenu = e => {
    if (isMounted.current) {
      setAnchorEl(e.currentTarget);
    }
  };
  const closeMenu = () => {
    if (isMounted.current) {
      setAnchorEl(null);
    }
  };
  const handleMenuItemClick = onItemClick => {
    if (typeof onItemClick === 'function') {
      onItemClick();
    }
    closeMenu();
  };
  const handleButtonClick = e => {
    if (menuFromBtn && hasMultipleMenuItems) {
      openMenu(e);
      return;
    }
    if (typeof onClick === 'function') {
      onClick();
    } else if (filteredMenuItems[0]?.onClick) {
      filteredMenuItems[0].onClick();
    }
  };
  React.useEffect(() => {
    isMounted.current = true;
    return () => {
      isMounted.current = false;
    };
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledButtonWrapper, {
    className: `${className}-wrapper`,
    style: wrapperStyle,
    ref: buttonRef,
    $noMargin: noMargin
  }, /*#__PURE__*/React.createElement(StyledMainButton, {
    className: `${className}-button`,
    color: color,
    size: buttonSize,
    title: title,
    onClick: disabled ? undefined : handleButtonClick,
    disabled: disabled
  }, label === "Save" ? "Done" : label || t('saveAs'))), hasMultipleMenuItems && /*#__PURE__*/React.createElement(StyledMenu, {
    className: `${className}-menu`,
    anchorEl: anchorEl,
    onClose: closeMenu,
    open: Boolean(anchorEl),
    style: menuStyle,
    position: menuPosition
  }, menuItems.map(item => item && /*#__PURE__*/React.createElement(StyledMenuItem, {
    className: `${className}-menu-item`,
    key: item.key,
    active: item.isActive,
    onClick: () => handleMenuItemClick(item.onClick),
    size: buttonSize
  }, item.icon && /*#__PURE__*/React.createElement(StyledMenuIcon, {
    size: buttonSize
  }, typeof item.icon === 'string' ?
  /*#__PURE__*/
  // eslint-disable-next-line react/no-danger
  React.createElement("span", {
    dangerouslySetInnerHTML: {
      __html: item.icon
    }
  }) : /*#__PURE__*/React.createElement(item.icon, null)), /*#__PURE__*/React.createElement(MenuItemLabel$1, null, item.label)))));
};
ButtonWithMenu.defaultProps = {
  title: '',
  label: '',
  color: 'primary',
  menuFromBtn: false,
  noMargin: false,
  menuPosition: 'bottom',
  onClick: undefined,
  disabled: false,
  menuStyle: undefined,
  wrapperStyle: undefined,
  buttonRef: undefined
};
ButtonWithMenu.propTypes = {
  menuItems: PropTypes.instanceOf(Array).isRequired,
  className: PropTypes.string.isRequired,
  onClick: PropTypes.func,
  title: PropTypes.string,
  label: PropTypes.string,
  color: PropTypes.string,
  menuFromBtn: PropTypes.bool,
  noMargin: PropTypes.bool,
  menuPosition: PropTypes.string,
  disabled: PropTypes.bool,
  menuStyle: PropTypes.instanceOf(Object),
  wrapperStyle: PropTypes.instanceOf(Object),
  buttonRef: PropTypes.instanceOf(Object)
};

/** External Dependencies */
const ImageControls = ({
  image,
  saveImage,
  children,
  t
}) => /*#__PURE__*/React.createElement(AnnotationOptions, {
  className: "FIE_image-tool-options",
  annotation: image,
  updateAnnotation: saveImage,
  t: t,
  hideFillOption: true
}, children);
ImageControls.defaultProps = {
  children: null
};
ImageControls.propTypes = {
  image: PropTypes.instanceOf(Object).isRequired,
  saveImage: PropTypes.func.isRequired,
  children: PropTypes.node,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const StyledImagesGallery = styled.div`
  background: ${({
  theme
}) => theme.palette['bg-secondary']};
  box-shadow: 0px 1px 2px ${({
  theme
}) => theme.palette['light-shadow']};
  border-radius: 4px;
  padding: 8px;
  overflow-y: auto;
  max-height: 350px;
  max-width: 300px;
`;
const StyledImageWrapper = styled.div`
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 60px;
  height: 60px;
  margin: 4px;
  padding: 4px;
  cursor: pointer;
  border-radius: 4px;
  border: 2px solid ${({
  theme
}) => theme.palette['bg-primary-active']};
  user-select: none;

  :hover {
    border-color: ${({
  theme
}) => theme.palette['accent-primary-active']};
  }

  img {
    width: 100%;
    height: 100%;
    object-fit: contain;
  }
`;

/** External Dependencies */
const ImagesGallery = ({
  gallery,
  anchorEl,
  onClose,
  onSelect
}) => /*#__PURE__*/React.createElement(Popper$1, {
  className: "FIE_image-tool-gallery",
  anchorEl: anchorEl,
  open: Boolean(anchorEl),
  position: "top",
  onClick: onClose,
  overlay: true
}, /*#__PURE__*/React.createElement(StyledImagesGallery, null, gallery.map(({
  originalUrl,
  previewUrl
}) => /*#__PURE__*/React.createElement(StyledImageWrapper, {
  key: originalUrl,
  onClick: () => onSelect(originalUrl)
}, /*#__PURE__*/React.createElement("img", {
  src: previewUrl,
  alt: previewUrl,
  crossOrigin: "Anonymous",
  draggable: false
})))));
ImagesGallery.defaultProps = {
  gallery: [],
  anchorEl: null
};
ImagesGallery.propTypes = {
  onClose: PropTypes.func.isRequired,
  onSelect: PropTypes.func.isRequired,
  gallery: PropTypes.arrayOf(Object),
  anchorEl: PropTypes.instanceOf(Object)
};

/** External Dependencies */
const ADDED_IMG_SPACING_PERCENT = 0.15;
const ImageOptions = () => {
  const [isLoading, setIsLoading] = React.useState();
  const [galleryAnchorEl, setGalleryAnchorEl] = React.useState(null);
  const uploadImgsInput = React.useRef();
  const menuItemsBtnRef = React.useRef();
  const {
    shownImageDimensions,
    dispatch,
    adjustments: {
      crop = {}
    },
    t,
    config = {}
  } = useStore();
  const imageConfig = config[TOOLS_IDS.IMAGE];
  const isUploadEnabled = !imageConfig.disableUpload;
  const isGalleryEnabled = Array.isArray(imageConfig.gallery) && imageConfig.gallery.length > 0;
  const [image, saveImage, addNewImage] = useAnnotation({
    name: TOOLS_IDS.IMAGE,
    opacity: 1
  }, false);
  const requestedImgsCount = React.useRef(0);
  const addImgScaled = loadedImg => {
    const layerWidth = crop.width || shownImageDimensions.width;
    const layerHeight = crop.height || shownImageDimensions.height;
    const layerCropX = crop.x || 0;
    const layerCropY = crop.y || 0;
    const newImgRatio = Math.min(1, layerWidth / (loadedImg.width + loadedImg.width * ADDED_IMG_SPACING_PERCENT), layerHeight / (loadedImg.height + loadedImg.height * ADDED_IMG_SPACING_PERCENT));
    addNewImage({
      image: loadedImg,
      x: layerCropX + layerWidth / 2 - loadedImg.width * newImgRatio / 2,
      y: layerCropY + layerHeight / 2 - loadedImg.height * newImgRatio / 2,
      width: loadedImg.width * newImgRatio,
      height: loadedImg.height * newImgRatio
    });
  };
  const hideLoaderAfterDone = filesLength => {
    requestedImgsCount.current += 1;
    if (requestedImgsCount.current === filesLength) {
      requestedImgsCount.current = 0;
      setIsLoading(false);
    }
  };
  const setFeedback = msg => {
    dispatch({
      type: SET_FEEDBACK,
      payload: {
        feedback: {
          message: msg,
          status: FEEDBACK_STATUSES.WARNING
        }
      }
    });
  };
  const importImages = e => {
    if (e.target.files) {
      setIsLoading(true);
      const wrongFilesNames = [];
      const filesArray = Array.from(e.target.files);
      const filesLength = filesArray.length;
      filesArray.forEach(file => {
        if (file.type.startsWith('image/')) {
          const img = new Image();
          img.onload = () => {
            addImgScaled(img);
            URL.revokeObjectURL(file);
            hideLoaderAfterDone(filesLength);
          };
          img.onerror = () => {
            setFeedback(t('uploadImageError'));
            hideLoaderAfterDone(filesLength);
          };
          img.src = URL.createObjectURL(file);
        } else {
          wrongFilesNames.push(file.name);
          hideLoaderAfterDone(filesLength);
        }
      });
      if (wrongFilesNames.length > 0) {
        const errorLabel = wrongFilesNames.length > 1 ? t('areNotImages') : t('isNotImage');
        setFeedback(`${wrongFilesNames.join(', ')} ${errorLabel} ${t('toBeUploaded')}.`);
      }
    }
    e.target.value = '';
  };
  const triggerUploadInput = () => {
    if (uploadImgsInput.current) {
      uploadImgsInput.current.click();
    }
  };
  const importImgFromGallery = imgUrl => {
    setIsLoading(true);
    const img = new Image();
    img.onload = () => {
      addImgScaled(img);
      hideLoaderAfterDone(1);
    };
    img.onerror = () => {
      setFeedback(t('uploadImageError'));
      hideLoaderAfterDone(1);
    };
    img.crossOrigin = 'Anonymous';
    img.src = imgUrl;
  };
  const openGalleryPanel = () => {
    setGalleryAnchorEl(menuItemsBtnRef.current);
  };
  const closeGalleryPanel = () => {
    setGalleryAnchorEl(null);
  };
  const menuItems = React.useMemo(() => [isUploadEnabled && {
    key: 'add-by-upload-image',
    label: isLoading ? t('importing') : t('uploadImage'),
    icon: UploadOutline,
    onClick: isLoading ? undefined : triggerUploadInput
  }, isGalleryEnabled && {
    key: 'add-from-gallery',
    label: t('fromGallery'),
    icon: Images,
    onClick: openGalleryPanel
  }], [imageConfig, isLoading, t]);
  return /*#__PURE__*/React.createElement(ImageControls, {
    image: image,
    saveImage: saveImage,
    t: t
  }, /*#__PURE__*/React.createElement(ButtonWithMenu, {
    className: "FIE_image-tool-add-option",
    color: "secondary",
    label: t('addImage'),
    title: t('addImageTitle'),
    menuPosition: "top",
    menuItems: menuItems,
    size: "sm",
    style: {
      maxHeight: 24
    },
    buttonRef: menuItemsBtnRef,
    menuFromBtn: true
  }), isUploadEnabled && /*#__PURE__*/React.createElement(HiddenUploadInput$1, {
    ref: uploadImgsInput,
    onChange: isLoading ? undefined : importImages,
    disabled: isLoading,
    multiple: true
  }), isGalleryEnabled && /*#__PURE__*/React.createElement(ImagesGallery, {
    gallery: imageConfig.gallery,
    onSelect: importImgFromGallery,
    onClose: closeGalleryPanel,
    anchorEl: galleryAnchorEl
  }));
};

/** External Dependencies */
const RectButton = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React.createElement(ToolsBarItemButton$1, {
  className: "FIE_rect-tool-button",
  id: TOOLS_IDS.RECT,
  label: t('rectangleTool'),
  Icon: CropLandscape,
  onClick: selectTool,
  isSelected: isSelected
});
RectButton.defaultProps = {
  isSelected: false
};
RectButton.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const MIN_VALUE$1 = 0;
const MAX_VALUE$1 = 150;
const RectCornerField = ({
  annotation: rect,
  updateAnnotation: updateRect,
  t
}) => {
  const {
    cornerRadius
  } = rect;
  const updateCornerRadius = newCornerRadius => {
    updateRect({
      cornerRadius: restrictNumber(newCornerRadius, MIN_VALUE$1, MAX_VALUE$1)
    });
  };
  return /*#__PURE__*/React.createElement(StyledSpacedOptionFields, null, /*#__PURE__*/React.createElement(Label$6, null, t('cornerRadius')), /*#__PURE__*/React.createElement(Slider, {
    annotation: "px",
    onChange: updateCornerRadius,
    value: cornerRadius,
    min: MIN_VALUE$1,
    max: MAX_VALUE$1,
    noMargin: true
  }));
};
RectCornerField.propTypes = {
  annotation: PropTypes.instanceOf(Object).isRequired,
  updateAnnotation: PropTypes.func.isRequired,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const CORNER_RADIUS = 'corner-radius';
const RECT_POPPABLE_OPTIONS = [{
  titleKey: 'cornerRadius',
  name: CORNER_RADIUS,
  Icon: RadiusCorner$1
}];
const rectOptionsPopupComponents = {
  [CORNER_RADIUS]: RectCornerField
};

/** External Dependencies */
const RectOptions = ({
  t
}) => {
  const [rect, saveRect] = useAnnotation({
    name: TOOLS_IDS.RECT
  });
  return /*#__PURE__*/React.createElement(AnnotationOptions, {
    className: "FIE_rect-tool-options",
    moreOptionsPopupComponentsObj: rectOptionsPopupComponents,
    morePoppableOptionsPrepended: RECT_POPPABLE_OPTIONS,
    annotation: rect,
    updateAnnotation: saveRect,
    t: t
  });
};
RectOptions.propTypes = {
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const EllipseButton = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React.createElement(ToolsBarItemButton$1, {
  className: "FIE_ellipse-tool-button",
  id: TOOLS_IDS.ELLIPSE,
  label: t('ellipseTool'),
  Icon: Ellipse,
  onClick: selectTool,
  isSelected: isSelected
});
EllipseButton.defaultProps = {
  isSelected: false
};
EllipseButton.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const EllipseOptions = ({
  t
}) => {
  const [ellipse, saveEllipse] = useAnnotation({
    name: TOOLS_IDS.ELLIPSE
  });
  return /*#__PURE__*/React.createElement(AnnotationOptions, {
    className: "FIE_ellipse-tool-options",
    annotation: ellipse,
    updateAnnotation: saveEllipse,
    t: t
  });
};
EllipseOptions.propTypes = {
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const PenButton = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React.createElement(ToolsBarItemButton$1, {
  className: "FIE_pen-tool-button",
  id: TOOLS_IDS.PEN,
  label: t('penTool'),
  Icon: Annotation,
  onClick: selectTool,
  isSelected: isSelected
});
PenButton.defaultProps = {
  isSelected: false
};
PenButton.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const eventsOptions = {
  passive: true
};
const PenOptions = ({
  t
}) => {
  const {
    dispatch,
    designLayer,
    previewGroup,
    config
  } = useStore();
  const [pen, savePenDebounced, savePenNoDebounce] = useAnnotation({
    ...config.annotationsCommon,
    ...config[TOOLS_IDS.PEN],
    name: TOOLS_IDS.PEN
  }, false);
  const canvasRef = React.useRef(null);
  const updatedPen = React.useRef({
    points: [],
    moved: false,
    id: ''
  });
  const getPointerPosition = React.useCallback(() => {
    const canvasBoundingRect = getElemDocumentCoords(canvasRef.current.content);
    const pos = getPointerOffsetPositionBoundedToObject(previewGroup, canvasBoundingRect);
    return [pos.offsetX - (designLayer.attrs.xPadding || 0), pos.offsetY - (designLayer.attrs.yPadding || 0)];
  }, [designLayer]);
  const handlePointerMove = React.useCallback(() => {
    if (!updatedPen.current.moved) {
      updatedPen.current = {
        moved: true,
        id: randomId(TOOLS_IDS.PEN),
        points: [...updatedPen.current.points, ...getPointerPosition()]
      };
      savePenNoDebounce({
        id: updatedPen.current.id,
        name: TOOLS_IDS.PEN,
        points: updatedPen.current.points
      });
    } else {
      updatedPen.current.points = updatedPen.current.points.concat(getPointerPosition());
      dispatch({
        type: SET_ANNOTATION,
        payload: {
          id: updatedPen.current.id,
          points: updatedPen.current.points,
          dismissHistory: true
        }
      });
    }
  }, [getPointerPosition]);
  const handlePointerUp = React.useCallback(() => {
    if (updatedPen.current.id && config[TOOLS_IDS.PEN].selectAnnotationAfterDrawing) {
      dispatch({
        type: SELECT_ANNOTATION,
        payload: {
          annotationId: updatedPen.current.id
        }
      });
    }
    updatedPen.current = null;
    canvasRef.current.off('mousemove touchmove', handlePointerMove);
    canvasRef.current.off('mouseleave touchcancel', handlePointerUp);
    document.removeEventListener('mouseup', handlePointerUp, eventsOptions);
    document.removeEventListener('touchend', handlePointerUp, eventsOptions);
    document.removeEventListener('mouseleave', handlePointerUp, eventsOptions);
    document.removeEventListener('touchcancel', handlePointerUp, eventsOptions);
  }, [handlePointerMove]);
  const handlePointerDown = React.useCallback(e => {
    if (e.target.attrs.draggable) {
      return;
    }
    e.evt.preventDefault();
    updatedPen.current = {
      points: getPointerPosition()
    };
    canvasRef.current.on('mousemove touchmove', handlePointerMove);
    canvasRef.current.on('mouseleave touchcancel', handlePointerUp);
    document.addEventListener('mouseup', handlePointerUp, eventsOptions);
    document.addEventListener('touchend', handlePointerUp, eventsOptions);
    document.addEventListener('mouseleave', handlePointerUp, eventsOptions);
    document.addEventListener('touchcancel', handlePointerUp, eventsOptions);
  }, [getPointerPosition, handlePointerMove, handlePointerUp]);
  React.useEffect(() => {
    canvasRef.current = designLayer?.getStage();
    if (canvasRef.current) {
      canvasRef.current.on('mousedown touchstart', handlePointerDown);
    }
    return () => {
      if (canvasRef.current) {
        canvasRef.current.off('mousedown touchstart', handlePointerDown);
      }
    };
  }, [designLayer]);
  return /*#__PURE__*/React.createElement(AnnotationOptions, {
    className: "FIE_pen-tool-options",
    annotation: pen,
    updateAnnotation: savePenDebounced,
    t: t,
    hidePositionField: true,
    hideFillOption: true
  });
};
PenOptions.propTypes = {
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const LineButton = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React.createElement(ToolsBarItemButton$1, {
  className: "FIE_line-tool-button",
  id: TOOLS_IDS.LINE,
  label: t('lineTool'),
  Icon: Line$1,
  onClick: selectTool,
  isSelected: isSelected
});
LineButton.defaultProps = {
  isSelected: false
};
LineButton.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const LineOptions = ({
  t
}) => {
  const [line, saveLine] = useAnnotation({
    name: TOOLS_IDS.LINE
  });
  return /*#__PURE__*/React.createElement(AnnotationOptions, {
    className: "FIE_line-tool-options",
    annotation: line,
    updateAnnotation: saveLine,
    t: t,
    hidePositionField: true,
    hideFillOption: true
  });
};
LineOptions.propTypes = {
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const ArrowButton = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React.createElement(ToolsBarItemButton$1, {
  className: "FIE_arrow-tool-button",
  id: TOOLS_IDS.ARROW,
  label: t('arrowTool'),
  Icon: ArrowTool,
  onClick: selectTool,
  isSelected: isSelected
});
ArrowButton.defaultProps = {
  isSelected: false
};
ArrowButton.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const ArrowOptions = ({
  t
}) => {
  const [arrow, saveArrow] = useAnnotation({
    name: TOOLS_IDS.ARROW
  });
  return /*#__PURE__*/React.createElement(AnnotationOptions, {
    className: "FIE_arrow-tool-options",
    annotation: arrow,
    updateAnnotation: saveArrow,
    t: t,
    hidePositionField: true,
    hideFillOption: true
  });
};
ArrowOptions.propTypes = {
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const PolygonButton = ({
  selectTool,
  isSelected,
  t
}) => /*#__PURE__*/React.createElement(ToolsBarItemButton$1, {
  className: "FIE_polygon-tool-button",
  id: TOOLS_IDS.POLYGON,
  label: t('polygonTool'),
  Icon: Polygon,
  onClick: selectTool,
  isSelected: isSelected
});
PolygonButton.defaultProps = {
  isSelected: false
};
PolygonButton.propTypes = {
  selectTool: PropTypes.func.isRequired,
  isSelected: PropTypes.bool,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const MIN_VALUE = 3;
const MAX_VALUE = 25;
const PolygonSidesField = ({
  annotation: polygon,
  updateAnnotation: updatePolygon,
  t
}) => {
  const {
    sides
  } = polygon;
  const updateSidesNumber = newSidesNumber => {
    updatePolygon({
      sides: restrictNumber(newSidesNumber, MIN_VALUE, MAX_VALUE)
    });
  };
  return /*#__PURE__*/React.createElement(StyledSpacedOptionFields, null, /*#__PURE__*/React.createElement(Label$6, null, t('sides')), /*#__PURE__*/React.createElement(Slider, {
    annotation: "",
    onChange: updateSidesNumber,
    value: sides,
    min: MIN_VALUE,
    max: MAX_VALUE,
    noMargin: true
  }));
};
PolygonSidesField.propTypes = {
  annotation: PropTypes.instanceOf(Object).isRequired,
  updateAnnotation: PropTypes.func.isRequired,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const SIDES_NUMBER = 'sides-number';
const POLYGON_POPPABLE_OPTIONS = [{
  titleKey: 'sides',
  name: SIDES_NUMBER,
  Icon: PolygonSides$1
}];
const polygonOptionsPopupComponents = {
  [SIDES_NUMBER]: PolygonSidesField
};

/** External Dependencies */
const PolygonOptions = ({
  t
}) => {
  const [polygon, savePolygon] = useAnnotation({
    name: TOOLS_IDS.POLYGON
  });
  return /*#__PURE__*/React.createElement(AnnotationOptions, {
    className: "FIE_polygon-tool-options",
    morePoppableOptionsPrepended: POLYGON_POPPABLE_OPTIONS,
    moreOptionsPopupComponentsObj: polygonOptionsPopupComponents,
    annotation: polygon,
    updateAnnotation: savePolygon,
    t: t,
    hidePositionField: true
  });
};
PolygonOptions.propTypes = {
  t: PropTypes.func.isRequired
};

/** Internal Dependencies */
const getProperDimensions = (resizeDimensions, cropDimensions, shownImageDimensions, originalDimensions, rotationAngle = 0) => {
  if (resizeDimensions.width && resizeDimensions.height) {
    return resizeDimensions;
  }
  const mappedCropArea = mapCropBox(cropDimensions, shownImageDimensions, originalDimensions);
  const croppedRotatedArea = getSizeAfterRotation(mappedCropArea.width, mappedCropArea.height, rotationAngle);
  if (resizeDimensions.width || resizeDimensions.height) {
    return {
      width: resizeDimensions.width || croppedRotatedArea.width,
      height: resizeDimensions.height || croppedRotatedArea.height
    };
  }
  return croppedRotatedArea.width && croppedRotatedArea.height && croppedRotatedArea || {
    ...originalDimensions,
    ...getSizeAfterRotation(originalDimensions.width, originalDimensions.height, rotationAngle)
  };
};

/** External Dependencies */
const StyledResizeWrapper = styled.div`
  display: flex;
  justify-content: ${({
  alignment
}) => alignment || 'center'};
  align-items: flex-end;
  gap: 3px;
  flex-wrap: wrap;
`;
const StyledResizeInput = styled(InputGroup$1)(({
  theme
}) => styled.css`
    width: 106px;
    max-width: 106px;
    margin-top: 4px;

    .SfxInput-Base {
      width: 100%;
      min-width: 100%;
      max-width: 100%;
    }

    span {
      color: ${theme.palette[Color.TextSecondary]};
      ${theme.typography.font[FontVariant.LabelMedium]};
    }
  `);
const StyledRatioLockIcon = styled(IconButton$1)`
  svg {
    margin-bottom: 1px;
  }
`;
const StyledResetButton = styled(IconButton$1)`
  margin-left: 12px;
`;

/** External Dependencies */
const Resize = ({
  onChange,
  currentSize,
  hideResetButton,
  alignment
}) => {
  const {
    dispatch,
    originalImage,
    resize,
    shownImageDimensions,
    adjustments: {
      crop,
      rotation = 0
    },
    theme,
    t
  } = useStore();
  const dimensions = getProperDimensions((currentSize.width || currentSize.height) && currentSize || resize, crop, shownImageDimensions, originalImage, rotation);
  const changeResize = e => {
    const {
      name,
      value
    } = e.target;
    if (parseFloat(value) < 1) {
      return;
    }
    const maxResizeNumber = Math.min(originalImage.width * 10, originalImage.height * 10);
    const originalImgSizeAfterRotation = getSizeAfterRotation(originalImage.width, originalImage.height, rotation);
    const isHeight = name === 'height';
    const secondDimensionName = isHeight ? 'width' : 'height';
    const newResize = {
      [name]: value ? restrictNumber(value, 0, maxResizeNumber) : value,
      [secondDimensionName]: dimensions[secondDimensionName]
    };
    const isRatioUnlocked = currentSize.ratioUnlocked ?? resize.ratioUnlocked;
    if (!isRatioUnlocked) {
      const originalImgRatio = originalImgSizeAfterRotation.width / originalImgSizeAfterRotation.height;
      newResize[secondDimensionName] = isHeight ? Math.round(newResize[name] * originalImgRatio) : Math.round(newResize[name] / originalImgRatio);
    }
    if (newResize[name] === resize[name] && newResize[secondDimensionName] === resize[secondDimensionName]) {
      return;
    }
    if (typeof onChange === 'function') {
      onChange(newResize);
      return;
    }
    dispatch({
      type: SET_RESIZE,
      payload: newResize
    });

    // Fit if there was no resized width/height before for avoiding jumping on change resize
    // as we are simulating zoom relative to original image dimensions but not applying the real original image dimensions
    const dimensUsedInFit = crop.width && crop.height && crop || shownImageDimensions;
    const updatedResize = {
      ...resize,
      ...newResize
    };
    dispatch({
      type: ZOOM_CANVAS,
      payload: {
        factor: updatedResize.width && updatedResize.height ? getZoomFitFactor(dimensUsedInFit, updatedResize) : DEFAULT_ZOOM_FACTOR,
        isAbsoluteZoom: true
      }
    });
  };
  const toggleRatioLock = () => {
    if (typeof onChange === 'function') {
      onChange({
        ratioUnlocked: !currentSize.ratioUnlocked
      });
      return;
    }
    dispatch({
      type: SET_RESIZE,
      payload: {
        ratioUnlocked: !resize.ratioUnlocked
      }
    });
  };
  const resetResize = () => {
    dispatch({
      type: SET_RESIZE,
      payload: {
        width: undefined,
        height: undefined,
        ratioUnlocked: false
      }
    });
    const dimensUsedInFit = crop.width && crop.height && crop || shownImageDimensions;
    // Fitting after reset resize
    dispatch({
      type: ZOOM_CANVAS,
      payload: {
        factor: getZoomFitFactor(dimensUsedInFit, dimensUsedInFit)
      }
    });
  };
  const isOriginalSize = typeof resize.width === 'undefined' && typeof resize.height === 'undefined' || originalImage.width === resize.width && originalImage.height === resize.height;
  const isManualChangeDisabled = resize.manualChangeDisabled;
  const isEmptyEditedWidth = typeof resize.width !== 'undefined' && !resize.width;
  const isEmptyEditedHeight = typeof resize.height !== 'undefined' && !resize.height;
  return /*#__PURE__*/React.createElement(StyledResizeWrapper, {
    className: "FIE_resize-tool-options",
    alignment: alignment
  }, /*#__PURE__*/React.createElement(StyledResizeInput, {
    className: "FIE_resize-width-option",
    value: isEmptyEditedWidth ? '' : dimensions.width,
    name: "width",
    onChange: isManualChangeDisabled ? undefined : changeResize,
    inputMode: "numeric",
    title: t('resizeWidthTitle'),
    label: t('width'),
    inputProps: {
      type: 'number'
    },
    size: "sm",
    iconEnd: "px",
    placeholder: "Width",
    disabled: isManualChangeDisabled
  }), /*#__PURE__*/React.createElement(StyledRatioLockIcon, {
    className: "FIE_resize-ratio-locker",
    title: t('toggleRatioLockTitle'),
    onClick: isManualChangeDisabled ? undefined : toggleRatioLock,
    color: "basic",
    size: "sm",
    disabled: isManualChangeDisabled
  }, currentSize.ratioUnlocked || resize.ratioUnlocked ? /*#__PURE__*/React.createElement(UnlockOutline$1, {
    size: 16,
    color: theme.palette.success
  }) : /*#__PURE__*/React.createElement(LockOutline$1, {
    size: 16,
    color: theme.palette.error
  })), /*#__PURE__*/React.createElement(StyledResizeInput, {
    className: "FIE_resize-height-option",
    value: isEmptyEditedHeight ? '' : dimensions.height,
    name: "height",
    onChange: isManualChangeDisabled ? undefined : changeResize,
    inputMode: "numeric",
    title: t('resizeHeightTitle'),
    label: t('height'),
    inputProps: {
      type: 'number'
    },
    size: "sm",
    iconEnd: "px",
    placeholder: "Height",
    disabled: isManualChangeDisabled
  }), !hideResetButton && /*#__PURE__*/React.createElement(StyledResetButton, {
    className: "FIE_resize-reset-button",
    size: "sm",
    color: "basic",
    onClick: isOriginalSize || isManualChangeDisabled ? undefined : resetResize,
    disabled: isOriginalSize || isManualChangeDisabled
  }, /*#__PURE__*/React.createElement(Reset, null)));
};
Resize.defaultProps = {
  onChange: undefined,
  currentSize: {},
  hideResetButton: false,
  alignment: 'center'
};
Resize.propTypes = {
  alignment: PropTypes.string,
  hideResetButton: PropTypes.bool,
  onChange: PropTypes.func,
  currentSize: PropTypes.shape({
    width: PropTypes.number,
    height: PropTypes.number,
    ratioUnlocked: false
  })
};

/** External Dependencies */
const StyledWatermarkWrapper = styled.div`
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  gap: 8px;
  overflow: hidden;

  ${({
  noWrap
}) => noWrap ? 'flex-wrap: nowrap;' : ''};
`;
const StyledControlsWrapper = styled.div`
  margin-bottom: 8px;
`;
const StyledWatermarkGalleryItem = styled.div(({
  theme
}) => `
    padding: 6px 4px;
    border: 1px solid ${theme.palette['borders-secondary']};
    width: fit-content;
    height: 32px;
    border-radius: 2px;
    overflow: hidden;
    cursor: pointer;
    border-radius: 4px;

    :hover {
      background: ${theme.palette['bg-primary-active']};
    }

    &[aria-selected='true'] {
      background: ${theme.palette['bg-primary-active']};
      border-color: ${theme.palette['accent-primary-active']};
    }

    img {
      max-width: 100%;
      max-height: 100%;
    }
  `);

/** External Dependencies */
const WatermarksGallery = ({
  addImgWatermark,
  loadAndSetWatermarkImg,
  style
}) => {
  const {
    config,
    annotations,
    dispatch,
    t
  } = useStore();
  const currentWatermarkUrl = React.useMemo(() => (annotations[WATERMARK_ANNOTATION_ID$1] || {}).image?.src, [annotations[WATERMARK_ANNOTATION_ID$1]]);
  const getWatermarkImgAndSelect = e => {
    const watermarkImgEl = e.currentTarget.children[0];
    if (watermarkImgEl.complete) {
      if (!watermarkImgEl.naturalWidth) {
        dispatch({
          type: SET_FEEDBACK,
          payload: {
            feedback: {
              message: t('mutualizedFailedToLoadImg'),
              duration: 2000
            }
          }
        });
        return;
      }
      addImgWatermark(watermarkImgEl);
    }
  };
  const {
    gallery = []
  } = config[TOOLS_IDS.WATERMARK] || {};
  if (gallery.length === 0) {
    return null;
  }
  return /*#__PURE__*/React.createElement(Carousel, {
    className: "FIE_watermark-gallery",
    style: style
  }, gallery.map(watermark => {
    const watermarkUrl = watermark?.url || watermark;
    const previewUrl = watermark?.previewUrl || watermarkUrl;
    const isSameUrl = watermarkUrl === previewUrl;
    return /*#__PURE__*/React.createElement(StyledWatermarkGalleryItem, {
      className: "FIE_watermark-selected-item",
      onClick: e => isSameUrl ? getWatermarkImgAndSelect(e) : loadAndSetWatermarkImg(watermarkUrl),
      key: watermarkUrl,
      "aria-selected": watermarkUrl === currentWatermarkUrl
    }, /*#__PURE__*/React.createElement("img", {
      src: previewUrl,
      alt: "Failed to load.",
      crossOrigin: "Anonymous",
      draggable: false
    }));
  }));
};
WatermarksGallery.defaultProps = {
  style: undefined
};
WatermarksGallery.propTypes = {
  addImgWatermark: PropTypes.func.isRequired,
  loadAndSetWatermarkImg: PropTypes.func.isRequired,
  style: PropTypes.instanceOf(Object)
};

/** External Dependencies */
const WatermarkPadding = ({
  watermark,
  saveWatermark,
  t
}) => {
  const [anchorEl, setAnchorEl] = React.useState(null);
  const openOptionPopup = e => {
    setAnchorEl(e.currentTarget);
  };
  const closeOptionPopup = () => {
    setAnchorEl(null);
  };
  const updatePadding = newPadding => {
    saveWatermark({
      padding: restrictNumber(newPadding, 0, 100)
    });
  };
  const currentPadding = watermark.padding || 0;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledIconWrapper, {
    className: "FIE_watermark-padding-triggerer",
    title: t('padding'),
    onClick: openOptionPopup,
    active: anchorEl
  }, /*#__PURE__*/React.createElement(Padding$1, {
    size: 20
  })), /*#__PURE__*/React.createElement(Menu$2, {
    className: "FIE_watermark-padding-popup",
    anchorEl: anchorEl,
    open: Boolean(anchorEl),
    onClose: closeOptionPopup,
    position: "top"
  }, /*#__PURE__*/React.createElement(StyledOptionPopupContent, null, /*#__PURE__*/React.createElement(Label$6, null, t('padding')), /*#__PURE__*/React.createElement(StyledSpacedOptionFields, null, /*#__PURE__*/React.createElement(Slider, {
    annotation: "px",
    onChange: updatePadding,
    value: currentPadding,
    noMargin: true
  }), /*#__PURE__*/React.createElement(StyledIconLabel, null, `${currentPadding}px`)))));
};
WatermarkPadding.propTypes = {
  watermark: PropTypes.instanceOf(Object).isRequired,
  saveWatermark: PropTypes.func.isRequired,
  t: PropTypes.func.isRequired
};

/** External Dependencies */
const WATERMARK_IMG_RATIO_FROM_ORIGINAL = 0.33;
const WATERMARK_ANNOTATION_ID = 'watermark';
const Watermark = () => {
  const {
    annotations,
    shownImageDimensions,
    selectionsIds,
    config,
    dispatch,
    t,
    adjustments: {
      crop = {}
    }
  } = useStore();
  const isPhoneScreen = usePhoneScreen();
  const [isLoading, setIsLoading] = React.useState(false);
  const uploadImgInput = React.useRef();
  const watermarkConfig = config[TOOLS_IDS.WATERMARK];
  const watermark = React.useMemo(() => annotations[WATERMARK_ANNOTATION_ID], [annotations[WATERMARK_ANNOTATION_ID]]);
  const layerWidth = crop.width || shownImageDimensions.width;
  const layerHeight = crop.height || shownImageDimensions.height;
  const layerCropX = crop.x || 0;
  const layerCropY = crop.y || 0;
  const watermarkTextRatio = watermarkConfig.textScalingRatio || WATERMARK_IMG_RATIO_FROM_ORIGINAL;
  const watermarkImageRatio = watermarkConfig.imageScalingRatio || WATERMARK_IMG_RATIO_FROM_ORIGINAL;
  const addTextWatermark = () => {
    const dimensions = {};
    dimensions.height = layerHeight * watermarkTextRatio;
    dimensions.width = layerWidth * watermarkTextRatio;
    const textWatermark = {
      ...config.annotationsCommon,
      ...config[TOOLS_IDS.TEXT],
      ...dimensions,
      padding: 1,
      x: layerCropX + layerWidth / 2 - dimensions.width / 2,
      y: layerCropY + layerHeight / 2 - dimensions.height / 2,
      fill: '#000000',
      id: WATERMARK_ANNOTATION_ID,
      name: TOOLS_IDS.TEXT,
      replaceCurrent: true
    };
    dispatch({
      type: SET_ANNOTATION,
      payload: textWatermark
    });
  };
  const addImgWatermark = loadedImg => {
    const imgWidth = loadedImg.naturalWidth || loadedImg.width;
    const imgHeight = loadedImg.naturalHeight || loadedImg.height;
    const newImgScale = layerHeight > layerWidth ? layerHeight * watermarkImageRatio / imgHeight : layerWidth * watermarkImageRatio / imgWidth;
    const x = layerCropX + layerWidth / 2 - imgWidth * newImgScale / 2;
    const y = layerCropY + layerHeight / 2 - imgHeight * newImgScale / 2;
    const scaledWatermarkImg = {
      ...config.annotationsCommon,
      ...config[TOOLS_IDS.IMAGE],
      scaleX: newImgScale,
      scaleY: newImgScale,
      padding: 1,
      image: loadedImg,
      width: imgWidth,
      height: imgHeight,
      x,
      y,
      id: WATERMARK_ANNOTATION_ID,
      name: TOOLS_IDS.IMAGE,
      replaceCurrent: true
    };
    dispatch({
      type: SET_ANNOTATION,
      payload: scaledWatermarkImg
    });
  };
  const updateWatermarkOptions = newOptions => {
    dispatch({
      type: SET_ANNOTATION,
      payload: {
        ...(typeof newOptions === 'function' ? newOptions(watermark) : newOptions),
        id: WATERMARK_ANNOTATION_ID
      }
    });
  };
  const setFeedback = errorMsg => {
    dispatch({
      type: SET_FEEDBACK,
      payload: {
        feedback: {
          message: errorMsg,
          status: FEEDBACK_STATUSES.WARNING
        }
      }
    });
  };
  const loadAndSetWatermarkImg = (imgUrl, revokeObjectUrl) => {
    if (!imgUrl) {
      return;
    }
    setIsLoading(true);
    const img = new Image();
    img.onload = () => {
      addImgWatermark(img);
      if (revokeObjectUrl) {
        URL.revokeObjectURL(imgUrl);
      }
      setIsLoading(false);
    };
    img.onerror = () => {
      setFeedback(t('mutualizedFailedToLoadImg'));
      if (revokeObjectUrl) {
        URL.revokeObjectURL(imgUrl);
      }
      setIsLoading(false);
    };
    img.src = imgUrl;
  };
  const importWatermarkImg = e => {
    if (e.target.files) {
      const imgFile = e.target.files[0];
      if (imgFile.type.startsWith('image/')) {
        loadAndSetWatermarkImg(URL.createObjectURL(imgFile), true);
      }
    }
    e.target.value = '';
  };
  const handleUploadWatermarkClick = () => {
    if (typeof watermarkConfig.onUploadWatermarkImgClick === 'function') {
      const res = watermarkConfig.onUploadWatermarkImgClick(loadAndSetWatermarkImg);
      if (res instanceof Promise) {
        res.then(({
          url,
          revokeObjectUrl = false
        } = {}) => loadAndSetWatermarkImg(url, revokeObjectUrl));
      }
      return;
    }
    if (uploadImgInput.current) {
      uploadImgInput.current.click();
    }
  };
  React.useEffect(() => {
    if (watermark) {
      dispatch({
        type: CLEAR_ANNOTATIONS_SELECTIONS
      });
      dispatch({
        type: SELECT_ANNOTATION,
        payload: {
          annotationId: 'watermark'
        }
      });
    }
  }, [watermark]);

  // Always keep watermark selected
  React.useEffect(() => {
    if (watermark && (selectionsIds.length === 0 || selectionsIds[0].id !== WATERMARK_ANNOTATION_ID)) {
      dispatch({
        type: SELECT_ANNOTATION,
        payload: {
          annotationId: 'watermark'
        }
      });
    }
  }, [selectionsIds]);
  const menuItems = [(!config.useCloudimage || typeof watermarkConfig.onUploadWatermarkImgClick === 'function') && {
    key: 'upload-watermark',
    label: t('uploadWatermark'),
    icon: UploadOutline$1,
    onClick: handleUploadWatermarkClick
  }, !watermarkConfig.hideTextWatermark && {
    key: 'add-text-watermark',
    label: t('addWatermarkAsText'),
    icon: Text$1,
    onClick: addTextWatermark
  }];
  const addWatermarkLabel = () => {
    if (isPhoneScreen) return t('plus');
    if (menuItems[0]) return t('addWatermark');
    return t('addTextWatermark');
  };
  const renderWatermarkPadding = () => /*#__PURE__*/React.createElement(WatermarkPadding, {
    watermark: watermark,
    saveWatermark: updateWatermarkOptions,
    t: t
  });
  return /*#__PURE__*/React.createElement("div", {
    className: "FIE_watermark-tool-wrapper"
  }, watermark?.name === TOOLS_IDS.TEXT && /*#__PURE__*/React.createElement(StyledControlsWrapper, {
    className: "FIE_watermark-options-wrapper"
  }, /*#__PURE__*/React.createElement(TextControls, {
    text: watermark,
    saveText: updateWatermarkOptions,
    t: t
  }, renderWatermarkPadding())), watermark?.name === TOOLS_IDS.IMAGE && /*#__PURE__*/React.createElement(StyledControlsWrapper, {
    className: "FIE_watermark-options-wrapper"
  }, /*#__PURE__*/React.createElement(ImageControls, {
    image: watermark,
    saveImage: updateWatermarkOptions,
    t: t
  }, renderWatermarkPadding())), /*#__PURE__*/React.createElement(StyledWatermarkWrapper, {
    className: "FIE_watermark-add-wrapper",
    noWrap: true
  }, /*#__PURE__*/React.createElement(ButtonWithMenu, {
    className: "FIE_watermark-add",
    color: "secondary",
    label: addWatermarkLabel(),
    title: t('addWatermarkTitle'),
    menuPosition: "top",
    menuItems: menuItems,
    menuFromBtn: true,
    noMargin: true
  }), /*#__PURE__*/React.createElement(WatermarksGallery, {
    loadAndSetWatermarkImg: loadAndSetWatermarkImg,
    addImgWatermark: addImgWatermark,
    style: isPhoneScreen && Boolean(watermark?.name) ? {
      width: '55%'
    } : undefined
  }), /*#__PURE__*/React.createElement(HiddenUploadInput$1, {
    onChange: isLoading ? undefined : importWatermarkImg,
    disabled: isLoading,
    ref: uploadImgInput
  })));
};

/** Internal Dependencies */
const TOOLS_ITEMS = {
  [TOOLS_IDS.CROP]: {
    id: TOOLS_IDS.CROP,
    Item: Crop
  },
  [TOOLS_IDS.ROTATE]: {
    id: TOOLS_IDS.ROTATE,
    Item: RotateButton,
    ItemOptions: RotateOptions
  },
  [TOOLS_IDS.FLIP_X]: {
    id: TOOLS_IDS.FLIP_X,
    Item: FlipX
  },
  [TOOLS_IDS.FLIP_Y]: {
    id: TOOLS_IDS.FLIP_Y,
    Item: FlipY
  },
  [TOOLS_IDS.BRIGHTNESS]: {
    id: TOOLS_IDS.BRIGHTNESS,
    Item: Brightness,
    ItemOptions: BrightnessOptions
  },
  [TOOLS_IDS.CONTRAST]: {
    id: TOOLS_IDS.CONTRAST,
    Item: Contrast,
    ItemOptions: ContrastOptions
  },
  [TOOLS_IDS.HSV]: {
    id: TOOLS_IDS.HSV,
    Item: HSV,
    ItemOptions: HSVOptions,
    hideFn: ({
      useCloudimage
    }) => useCloudimage
  },
  [TOOLS_IDS.BLUR]: {
    id: TOOLS_IDS.BLUR,
    Item: Blur,
    ItemOptions: BlurOptions
  },
  [TOOLS_IDS.WARMTH]: {
    id: TOOLS_IDS.WARMTH,
    Item: Warmth,
    ItemOptions: WarmthOptions,
    hideFn: ({
      useCloudimage
    }) => useCloudimage
  },
  [TOOLS_IDS.FILTERS]: {
    id: TOOLS_IDS.FILTERS,
    Item: Filters
  },
  [TOOLS_IDS.WATERMARK]: {
    id: TOOLS_IDS.WATERMARK,
    Item: Watermark
  },
  [TOOLS_IDS.TEXT]: {
    id: TOOLS_IDS.TEXT,
    Item: TextButton,
    ItemOptions: TextOptions
  },
  [TOOLS_IDS.IMAGE]: {
    id: TOOLS_IDS.IMAGE,
    Item: ImageButton,
    ItemOptions: ImageOptions
  },
  [TOOLS_IDS.RECT]: {
    id: TOOLS_IDS.RECT,
    Item: RectButton,
    ItemOptions: RectOptions
  },
  [TOOLS_IDS.POLYGON]: {
    id: TOOLS_IDS.POLYGON,
    Item: PolygonButton,
    ItemOptions: PolygonOptions
  },
  [TOOLS_IDS.ELLIPSE]: {
    id: TOOLS_IDS.ELLIPSE,
    Item: EllipseButton,
    ItemOptions: EllipseOptions
  },
  [TOOLS_IDS.PEN]: {
    id: TOOLS_IDS.PEN,
    Item: PenButton,
    ItemOptions: PenOptions
  },
  [TOOLS_IDS.LINE]: {
    id: TOOLS_IDS.LINE,
    Item: LineButton,
    ItemOptions: LineOptions
  },
  [TOOLS_IDS.ARROW]: {
    id: TOOLS_IDS.ARROW,
    Item: ArrowButton,
    ItemOptions: ArrowOptions
  },
  [TOOLS_IDS.RESIZE]: {
    id: TOOLS_IDS.RESIZE,
    Item: Resize
  }
};
const TABS_TOOLS = {
  [TABS_IDS.ADJUST]: [TOOLS_IDS.CROP, TOOLS_IDS.ROTATE, TOOLS_IDS.FLIP_X, TOOLS_IDS.FLIP_Y],
  [TABS_IDS.FINETUNE]: [TOOLS_IDS.BRIGHTNESS, TOOLS_IDS.CONTRAST, TOOLS_IDS.HSV, TOOLS_IDS.BLUR, TOOLS_IDS.WARMTH],
  [TABS_IDS.FILTERS]: [TOOLS_IDS.FILTERS],
  [TABS_IDS.WATERMARK]: [TOOLS_IDS.WATERMARK],
  [TABS_IDS.ANNOTATE]: [TOOLS_IDS.TEXT, TOOLS_IDS.IMAGE, TOOLS_IDS.RECT, TOOLS_IDS.ELLIPSE, TOOLS_IDS.POLYGON, TOOLS_IDS.PEN, TOOLS_IDS.LINE, TOOLS_IDS.ARROW],
  [TABS_IDS.RESIZE]: [TOOLS_IDS.RESIZE]
};

const SELECT_TAB = 'SELECT_TAB';
const selectTab = (state, payload) => payload.tabId === state.tabId ? state : {
  ...state,
  tabId: payload.tabId,
  toolId: TABS_TOOLS[payload.tabId][0],
  selectionsIds: [],
  pointerCssIcon: payload.tabId === TABS_IDS.ANNOTATE ? POINTER_ICONS.DRAW : POINTER_ICONS.DEFAULT
};

/** Internal Dependencies */
const UNDO = 'UNDO';
const undo = state => {
  if (state.pastDesignStates && state.pastDesignStates.length > 0) {
    const currentDesignState = extractCurrentDesignState(state);
    const [presentDesignState, ...newPastDesignStates] = state.pastDesignStates;
    const newFutureDesignStates = [currentDesignState, ...(state.futureDesignStates || [])];
    return {
      ...state,
      ...presentDesignState,
      selectionsIds: [],
      pastDesignStates: newPastDesignStates,
      futureDesignStates: newFutureDesignStates,
      hasUndo: newPastDesignStates.length > 0,
      hasRedo: true,
      haveNotSavedChanges: newPastDesignStates.length > 0
    };
  }
  return state;
};

const SET_FINETUNE = 'SET_FINETUNE';
const setFinetune = (state, payload) => ({
  ...state,
  isDesignState: !payload.dismissHistory,
  // not stored in state, used in reducer to consider in undo/redo stacks
  finetunes: !payload.finetune || state.finetunes.includes(payload.finetune) ? state.finetunes : [...state.finetunes, payload.finetune],
  finetunesProps: {
    ...state.finetunesProps,
    ...payload.finetuneProps
  }
});

const SET_ANNOTATION = 'SET_ANNOTATION';
const setAnnotation = (state, payload = {}) => {
  // dismissHistory is used to prevent considering this change in history (undo/redo).
  const {
    dismissHistory = false,
    replaceCurrent = false,
    ...newAnnotation
  } = payload;
  const annotationId = newAnnotation.id ?? randomId(newAnnotation.name);
  const existedAnnotation = state.annotations[annotationId];
  // If annotation not changed don't update it.
  if (existedAnnotation && !Object.keys(newAnnotation).some(key => (newAnnotation[key] || newAnnotation[key] === 0) && newAnnotation[key] !== existedAnnotation[key])) {
    return state;
  }
  return {
    ...state,
    isDesignState: !dismissHistory,
    // not stored in state, used in reducer to consider in undo/redo stacks
    annotations: {
      ...state.annotations,
      [annotationId]: {
        ...(replaceCurrent ? {} : existedAnnotation),
        ...newAnnotation
      }
    }
  };
};

const CHANGE_POINTER_ICON = 'CHANGE_POINTER_ICON';
const changingPointerIcon = (state, payload) => state.pointerCssIcon !== payload.pointerCssIcon ? {
  ...state,
  pointerCssIcon: payload.pointerCssIcon
} : state;

const SELECT_ANNOTATION = 'SELECT_ANNOTATION';
const selectAnnotation = (state, payload) => {
  if (state.selectionsIds.length === 1 && state.selectionsIds[0] === payload.annotationId) {
    return state;
  }
  let newSelectionsIds;
  if (payload.multiple) {
    newSelectionsIds = state.selectionsIds.filter(id => id !== payload.annotationId);
    const wasAnnotationAlreadySelected = newSelectionsIds.length !== state.selectionsIds.length;
    if (!wasAnnotationAlreadySelected) {
      newSelectionsIds.push(payload.annotationId);
    }
  } else {
    newSelectionsIds = [payload.annotationId];
  }
  return {
    ...state,
    selectionsIds: newSelectionsIds
  };
};

const CLEAR_ANNOTATIONS_SELECTIONS = 'CLEAR_ANNOTATIONS_SELECTIONS';
const clearAnnotationsSelections = state => state.selectionsIds.length === 0 ? state : {
  ...state,
  selectionsIds: []
};

const TOGGLE_ORIGINAL_IMAGE_DISPLAY = 'TOGGLE_ORIGINAL_IMAGE_DISPLAY';
const toggleOriginalImageDisplay = (state, payload) => ({
  ...state,
  isShowOriginalImage: payload.isShow
});

const SELECT_TOOL = 'SELECT_TOOL';
const selectTool = (state, payload) => state.toolId === payload.toolId ? state : {
  ...state,
  toolId: payload.toolId,
  selectionsIds: payload.keepSelections ? state.selectionsIds : []
};

/** Internal Dependencies */
const TOGGLE_FLIP = 'TOGGLE_FLIP';
const toggleFlip = (state, payload) => {
  const flipProperty = `isFlipped${payload.direction === FLIP_DIRECTIONS.X ? 'X' : 'Y'}`;
  return {
    ...state,
    isDesignState: !payload.dismissHistory,
    adjustments: {
      ...state.adjustments,
      [flipProperty]: !state.adjustments[flipProperty]
    }
  };
};

const SET_CROP = 'SET_CROP';
const setCrop = (state, payload) => {
  const oldCrop = state.adjustments.crop ?? {};
  const newCrop = {
    x: toPrecisedFloat(payload.x) ?? oldCrop.x,
    y: toPrecisedFloat(payload.y) ?? oldCrop.y,
    ratio: typeof payload.ratio === 'string' ? payload.ratio : toPrecisedFloat(payload.ratio) ?? oldCrop.ratio,
    width: toPrecisedFloat(payload.width) ?? oldCrop.width,
    height: toPrecisedFloat(payload.height) ?? oldCrop.height,
    ratioTitleKey: payload.ratioTitleKey ?? oldCrop.ratioTitleKey,
    ratioGroupKey: payload.ratioGroupKey,
    ratioFolderKey: payload.ratioFolderKey,
    noEffect: payload.noEffect
  };

  // Disabled as it wasn't allow to revert the crop area to the original image dimensions if changed before,
  // let's remove this if no other issues arisen while being commented.
  // if (
  //   oldCrop.x === newCrop.x &&
  //   oldCrop.y === newCrop.y &&
  //   (oldCrop.width === newCrop.width ||
  //     (newCrop.width === toPrecisedFloat(state.shownImageDimensions.width) &&
  //       !oldCrop.width !== null &&
  //       newCrop.ratio !== ORIGINAL_CROP)) &&
  //   (oldCrop.height === newCrop.height ||
  //     (newCrop.height === toPrecisedFloat(state.shownImageDimensions.height) &&
  //       oldCrop.height !== null &&
  //       newCrop.ratio !== ORIGINAL_CROP)) &&
  //   oldCrop.ratio === newCrop.ratio &&
  //   oldCrop.ratioTitleKey === newCrop.ratioTitleKey &&
  //   oldCrop.ratioGroupKey === newCrop.ratioGroupKey &&
  //   oldCrop.ratioFolderKey === newCrop.ratioFolderKey
  // ) {
  //   return state;
  // }

  return {
    ...state,
    isDesignState: !payload.dismissHistory,
    adjustments: {
      ...state.adjustments,
      crop: {
        ...oldCrop,
        ...newCrop
      }
    }
  };
};

const CHANGE_ROTATION = 'CHANGE_ROTATION';
const changeRotation = (state, payload) => state.adjustments.rotation !== payload.rotation ? {
  ...state,
  isDesignState: !payload.dismissHistory,
  adjustments: {
    ...state.adjustments,
    rotation: payload.rotation
  }
} : state;

const calculateZoomData = (newZoom, oldZoom, canvasWidth, canvasHeight) => {
  if (newZoom.factor === DEFAULT_ZOOM_FACTOR) {
    return {
      x: 0,
      y: 0,
      factor: DEFAULT_ZOOM_FACTOR
    };
  }
  const isZoomIn = newZoom.factor > oldZoom.factor;
  const mousePointTo = {
    x: (newZoom.x - oldZoom.x || 0) / oldZoom.factor,
    y: (newZoom.y - oldZoom.y || 0) / oldZoom.factor
  };
  const newPos = {
    x: newZoom.x - mousePointTo.x * newZoom.factor,
    y: newZoom.y - mousePointTo.y * newZoom.factor
  };
  if (!isZoomIn || oldZoom.factor !== 1) {
    newPos.x = Math.min(0, Math.max(newPos.x, canvasWidth * (1 - oldZoom.factor)));
    newPos.y = Math.min(0, Math.max(newPos.y, canvasHeight * (1 - oldZoom.factor)));
  }
  if (newZoom.factor < 1) {
    const initialAndScaledWidthDiff = canvasWidth - canvasWidth * newZoom.factor;
    const initialAndScaledHeightDiff = canvasHeight - canvasHeight * newZoom.factor;
    newPos.x += initialAndScaledWidthDiff / 2;
    newPos.y += initialAndScaledHeightDiff / 2;
  }
  return {
    ...newPos,
    factor: newZoom.factor
  };
};

/** Internal Dependencies */
const ZOOM_CANVAS = 'ZOOM_CANVAS';
const MIN_ZOOM_FACTOR = 0.03;
const MAX_ZOOM_FACTOR = 60;
const zoomCanvas = (state, payload) => {
  const newZoomFactor = restrictNumber(parseFloat(payload.factor).toFixed(2), MIN_ZOOM_FACTOR, MAX_ZOOM_FACTOR);
  let newZoomData;
  if (payload.preparedDimensions) {
    const {
      preparedDimensions,
      ...zoomProps
    } = payload;
    newZoomData = zoomProps;
  } else {
    const newZoomPoint = {
      x: !payload.x && payload.x !== 0 ? state.canvasWidth / 2 : payload.x ?? state.zoom.x,
      y: !payload.y && payload.y !== 0 ? state.canvasHeight / 2 : payload.y ?? state.zoom.y
    };
    newZoomData = calculateZoomData({
      ...newZoomPoint,
      factor: newZoomFactor
    },
    // `isAbsoluteZoom` means we don't depend on the old zoom, and we are going to zoom & pan assuming it's happening for firsst time.
    payload.isAbsoluteZoom ? {
      factor: DEFAULT_ZOOM_FACTOR,
      x: null,
      y: null
    } : state.zoom, state.canvasWidth, state.canvasHeight);
  }
  return newZoomData.factor === state.zoom.factor && newZoomData.x === state.zoom.x && newZoomData.y === state.zoom.y ? state : {
    ...state,
    zoom: {
      ...state.zoom,
      ...newZoomData
    }
  };
};

/** Internal Dependencies */
const SET_CANVAS_SIZE = 'SET_CANVAS_SIZE';
const setCanvasSize = (state, payload) => {
  if (state.canvasWidth === payload.canvasWidth && state.canvasHeight === payload.canvasHeight) {
    return state;
  }

  /** if enabled, it wouldn't increase the image size in the container to be more clear for the user to edit the image....
   * which means if the image is small it would be hard to edit after having this enabled...
   * is should replace payload.canvasWidth & payload.canvasHeight in the code afterwards..
   * also it might cause some improper behavior that needs to be debugged if generated.
   */
  // const restrictedWidth = restrictNumber(
  //   payload.canvasWidth,
  //   0,
  //   state.originalImage.width
  // );

  // const restrictedHeight = restrictNumber(
  //   payload.canvasHeight,
  //   0,
  //   state.originalImage.height
  // );

  const {
    initialCanvasWidth = payload.canvasWidth,
    initialCanvasHeight = payload.canvasHeight
  } = state;
  const originalImageInitialScale = getDimensionsMinimalRatio(state.initialCanvasWidth, state.initialCanvasHeight, state.originalImage.width, state.originalImage.height);
  const originalImageInitialResizedWidth = originalImageInitialScale * state.originalImage.width;
  const originalImageInitialResizedHeight = originalImageInitialScale * state.originalImage.height;
  let scale = 1;
  if (initialCanvasWidth !== payload.canvasWidth || initialCanvasHeight !== payload.canvasHeight) {
    const widthScale = payload.canvasWidth / originalImageInitialResizedWidth;
    const heightScale = payload.canvasHeight / originalImageInitialResizedHeight;
    scale = Math.min(widthScale, heightScale);
  }
  return {
    ...state,
    initialCanvasWidth,
    initialCanvasHeight,
    canvasWidth: payload.canvasWidth,
    canvasHeight: payload.canvasHeight,
    canvasScale: scale
  };
};

const SET_ORIGINAL_IMAGE = 'SET_ORIGINAL_IMAGE';
const setOriginalImage = (state, payload) => ({
  ...state,
  feedback: {},
  originalImage: payload.originalImage,
  imgSrc: payload.originalImage.src
});

const SET_SHOWN_IMAGE_DIMENSIONS = 'SET_SHOWN_IMAGE_DIMENSIONS';
const setShownImageDimensions = (state, payload) => ({
  ...state,
  shownImageDimensions: {
    ...state.shownImageDimensions,
    ...payload.shownImageDimensions
  },
  designLayer: payload.designLayer || state.designLayer,
  previewGroup: payload.previewGroup || state.previewGroup
});

const REMOVE_ANNOTATIONS = 'REMOVE_ANNOTATIONS';
const removeAnnotations = (state, payload) => {
  const {
    annotations
  } = state;
  let newSelectionsIds = state.selectionsIds;
  payload.annotationsIds.forEach(id => {
    newSelectionsIds = newSelectionsIds.filter(selectionId => selectionId !== id);
    if (state.designLayer && annotations[id]) {
      const annotationNode = state.designLayer.findOne(`#${id}`);
      if (annotationNode) {
        annotationNode.destroy();
      }
      delete annotations[id];
    }
  });
  return {
    ...state,
    // not stored in state, used in reducer to consider in undo/redo stacks
    isDesignState: payload.isDesignState || true,
    annotations,
    selectionsIds: []
  };
};

/** Internal Dependencies */
const DUPLICATE_ANNOTATIONS = 'DUPLICATE_ANNOTATIONS';
const duplicateAnnotations = (state, payload) => {
  const {
    annotations
  } = state;
  const duplicatedAnnotations = {};
  payload.annotationsIds.forEach(id => {
    const annotation = annotations[id];
    if (annotation) {
      const clonedAnnotationId = randomId(annotation.name);
      duplicatedAnnotations[clonedAnnotationId] = {
        ...annotation,
        id: clonedAnnotationId,
        x: annotation.x + 20,
        y: annotation.y + 20
      };
    }
  });
  return {
    ...state,
    // not stored in state, used in reducer to consider in undo/redo stacks
    isDesignState: !payload.dismissHistory,
    annotations: {
      ...annotations,
      ...duplicatedAnnotations
    }
  };
};

const ENABLE_TEXT_CONTENT_EDIT = 'ENABLE_TEXT_CONTENT_EDIT';
const enableTextContentEdit = (state, payload) => ({
  ...state,
  textIdOfEditableContent: payload.textIdOfEditableContent || null
});

const SET_RESIZE = 'SET_RESIZE';
const setResize = (state, payload) => ({
  ...state,
  isDesignState: !payload.dismissHistory,
  resize: {
    ...state.resize,
    // width, height, manualChangeDisabled (false by default), ratioUnlocked (locked by default).
    ...payload,
    manualChangeDisabled: payload.manualChangeDisabled ?? false
  }
});

const SET_SAVED = 'SET_SAVED';
const setSaved = state => !state.haveNotSavedChanges ? state : {
  ...state,
  haveNotSavedChanges: false
};

const deepMerge = (source, object = {}, considerArray = false) => {
  const mergedObject = {
    ...source
  };
  const keys = Object.keys(object);
  keys.forEach(k => {
    // considers null in the values.
    const val = object[k];
    if (val !== undefined) {
      const valType = typeof val;
      if (valType !== 'object' || val instanceof HTMLElement || val === null || Array.isArray(val) || !source[k] || typeof source[k] !== 'object') {
        mergedObject[k] = considerArray && Array.isArray(mergedObject[k]) && Array.isArray(val) ? [...mergedObject[k], ...val] : val;
        return;
      }

      // After the above condition we now have both of them in type objects.
      mergedObject[k] = deepMerge(source[k], val);
    }
  });
  return mergedObject;
};

/** Internal Dependencies */
const UPDATE_STATE = 'UPDATE_STATE';
const updateState = (state, payloadObjOrFn) => {
  const payload = payloadObjOrFn && typeof payloadObjOrFn === 'function' ? payloadObjOrFn(state) : payloadObjOrFn;
  return payload ? deepMerge(state, payload) : state;
};

const SET_LATEST_COLOR = 'SET_LATEST_COLOR';
const setLatestColor = (state, payload) => ({
  ...state,
  latestColors: {
    ...state.latestColors,
    ...payload.latestColors
  }
});

const SET_SHOWN_TABS_MENU = 'SET_SHOWN_TABS_MENU';
const setShowTabsMenu = (state, payload) => ({
  ...state,
  showTabsMenu: payload.opened
});

const SET_SAVING = 'SET_SAVING';
const setSaving = (state, payload) => ({
  ...state,
  isSaving: payload.isSaving,
  isLoadingGlobally: payload.isSaving
});

var actions = {
  [SET_ORIGINAL_IMAGE]: setOriginalImage,
  [SET_FEEDBACK]: setFeedback,
  [SHOW_LOADER]: showLoader,
  [HIDE_LOADER]: hideLoader,
  [CHANGE_POINTER_ICON]: changingPointerIcon,
  [SELECT_ANNOTATION]: selectAnnotation,
  [CLEAR_ANNOTATIONS_SELECTIONS]: clearAnnotationsSelections,
  [TOGGLE_ORIGINAL_IMAGE_DISPLAY]: toggleOriginalImageDisplay,
  [SELECT_TAB]: selectTab,
  [SELECT_TOOL]: selectTool,
  [ZOOM_CANVAS]: zoomCanvas,
  [SET_CANVAS_SIZE]: setCanvasSize,
  [SET_SHOWN_IMAGE_DIMENSIONS]: setShownImageDimensions,
  [ENABLE_TEXT_CONTENT_EDIT]: enableTextContentEdit,
  [SET_LATEST_COLOR]: setLatestColor,
  [SET_SHOWN_TABS_MENU]: setShowTabsMenu,
  [SET_SAVING]: setSaving,
  // Start of Design actions...
  [ADD_FILTER]: addFilter,
  [SET_FINETUNE]: setFinetune,
  [SET_ANNOTATION]: setAnnotation,
  [SET_CROP]: setCrop,
  [CHANGE_ROTATION]: changeRotation,
  [TOGGLE_FLIP]: toggleFlip,
  [SET_RESIZE]: setResize,
  [REMOVE_ANNOTATIONS]: removeAnnotations,
  [DUPLICATE_ANNOTATIONS]: duplicateAnnotations,
  // End of Design actions.
  [UNDO]: undo,
  [REDO]: redo,
  [RESET]: reset,
  [SET_SAVED]: setSaved,
  [UPDATE_STATE]: updateState
};

const SPACING_PERCENTAGE = 0.05;
const DEFAULT_SPACING = 12;
const getProperImageToCanvasSpacing = () => (window ? Math.min(window.innerHeight, window.innerWidth) * SPACING_PERCENTAGE : DEFAULT_SPACING) * 2;

const getRotatedPoint = ({
  x,
  y
}, angleDegree) => {
  const radianAngle = angleDegree * Math.PI / 180;
  const rcos = Math.cos(radianAngle);
  const rsin = Math.sin(radianAngle);
  return {
    x: x * rcos - y * rsin,
    y: y * rcos + x * rsin
  };
};
const getCenterRotatedPoint = (width, height, newRotationAngleDegree) => {
  if (!width || !height || !newRotationAngleDegree && newRotationAngleDegree !== 0) {
    return {
      x: 0,
      y: 0,
      rotation: newRotationAngleDegree
    };
  }
  const topLeft = {
    x: -width / 2,
    y: -height / 2
  };
  const current = getRotatedPoint(topLeft, 0);
  const rotated = getRotatedPoint(topLeft, newRotationAngleDegree);
  const dx = rotated.x - current.x;
  const dy = rotated.y - current.y;
  return {
    x: dx,
    y: dy,
    rotation: newRotationAngleDegree
  };
};

const nodesCommonPropTypes = {
  definitions: {
    id: PropTypes.string.isRequired,
    name: PropTypes.string.isRequired,
    rotation: PropTypes.number,
    scaleX: PropTypes.number,
    scaleY: PropTypes.number,
    stroke: PropTypes.string,
    strokeWidth: PropTypes.number,
    shadowOffsetX: PropTypes.number,
    shadowOffsetY: PropTypes.number,
    shadowBlur: PropTypes.number,
    shadowColor: PropTypes.string,
    shadowOpacity: PropTypes.number,
    opacity: PropTypes.number
  },
  defaults: {
    rotation: 0,
    scaleX: 1,
    scaleY: 1,
    stroke: undefined,
    strokeWidth: undefined,
    shadowOffsetX: undefined,
    shadowOffsetY: undefined,
    shadowBlur: undefined,
    shadowColor: undefined,
    shadowOpacity: undefined,
    opacity: 1
  }
};

const RectNode = ({
  id,
  name,
  fill,
  x,
  y,
  width,
  height,
  scaleX,
  scaleY,
  rotation,
  annotationEvents,
  stroke,
  strokeWidth,
  shadowOffsetX,
  shadowOffsetY,
  shadowBlur,
  shadowColor,
  shadowOpacity,
  opacity,
  cornerRadius,
  ...otherProps
}) => /*#__PURE__*/React.createElement(Rect, _extends$1({
  id: id,
  name: name,
  rotation: rotation,
  scaleX: scaleX,
  scaleY: scaleY,
  stroke: stroke,
  strokeWidth: strokeWidth,
  shadowOffsetX: shadowOffsetX,
  shadowOffsetY: shadowOffsetY,
  shadowBlur: shadowBlur,
  shadowColor: shadowColor,
  shadowOpacity: shadowOpacity,
  fill: fill,
  x: x,
  y: y,
  width: width,
  height: height,
  opacity: opacity,
  cornerRadius: cornerRadius
}, annotationEvents, otherProps));
RectNode.defaultProps = {
  ...nodesCommonPropTypes.defaults,
  fill: '#000',
  cornerRadius: 0,
  width: 0,
  height: 0
};
RectNode.propTypes = {
  ...nodesCommonPropTypes.definitions,
  x: PropTypes.number.isRequired,
  y: PropTypes.number.isRequired,
  annotationEvents: PropTypes.instanceOf(Object).isRequired,
  width: PropTypes.number,
  height: PropTypes.number,
  fill: PropTypes.string,
  cornerRadius: PropTypes.number
};

const EllipseNode = ({
  id,
  name,
  fill,
  x,
  y,
  radiusX,
  radiusY,
  scaleX,
  scaleY,
  rotation,
  annotationEvents,
  stroke,
  strokeWidth,
  shadowOffsetX,
  shadowOffsetY,
  shadowBlur,
  shadowColor,
  shadowOpacity,
  opacity,
  ...otherProps
}) => /*#__PURE__*/React.createElement(Ellipse$2, _extends$1({
  id: id,
  name: name,
  rotation: rotation,
  scaleX: scaleX,
  scaleY: scaleY,
  stroke: stroke,
  strokeWidth: strokeWidth,
  shadowOffsetX: shadowOffsetX,
  shadowOffsetY: shadowOffsetY,
  shadowBlur: shadowBlur,
  shadowColor: shadowColor,
  shadowOpacity: shadowOpacity,
  fill: fill,
  x: x,
  y: y,
  radiusX: radiusX,
  radiusY: radiusY,
  offsetX: -radiusX,
  offsetY: -radiusY,
  opacity: opacity
}, annotationEvents, otherProps));
EllipseNode.defaultProps = {
  ...nodesCommonPropTypes.defaults,
  fill: '#000',
  radiusX: 0,
  radiusY: 0
};
EllipseNode.propTypes = {
  ...nodesCommonPropTypes.definitions,
  x: PropTypes.number.isRequired,
  y: PropTypes.number.isRequired,
  annotationEvents: PropTypes.instanceOf(Object).isRequired,
  radiusX: PropTypes.number,
  radiusY: PropTypes.number,
  fill: PropTypes.string
};

const PolygonNode = ({
  id,
  name,
  fill,
  x,
  y,
  radius,
  scaleX,
  scaleY,
  rotation,
  sides,
  annotationEvents,
  stroke,
  strokeWidth,
  shadowOffsetX,
  shadowOffsetY,
  shadowBlur,
  shadowColor,
  shadowOpacity,
  opacity,
  ...otherProps
}) => /*#__PURE__*/React.createElement(RegularPolygon, _extends$1({
  id: id,
  name: name,
  rotation: rotation,
  scaleX: scaleX,
  scaleY: scaleY,
  stroke: stroke,
  strokeWidth: strokeWidth,
  shadowOffsetX: shadowOffsetX,
  shadowOffsetY: shadowOffsetY,
  shadowBlur: shadowBlur,
  shadowColor: shadowColor,
  shadowOpacity: shadowOpacity,
  fill: fill,
  x: x,
  y: y,
  radius: radius,
  offsetX: -radius,
  offsetY: -radius,
  sides: sides,
  opacity: opacity
}, annotationEvents, otherProps));
PolygonNode.defaultProps = {
  ...nodesCommonPropTypes.defaults,
  fill: '#000',
  sides: 3
};
PolygonNode.propTypes = {
  ...nodesCommonPropTypes.definitions,
  x: PropTypes.number.isRequired,
  y: PropTypes.number.isRequired,
  annotationEvents: PropTypes.instanceOf(Object).isRequired,
  radius: PropTypes.number.isRequired,
  fill: PropTypes.string,
  sides: PropTypes.number
};

const TextNode = ({
  id,
  name,
  text,
  fontFamily,
  fontSize,
  fontStyle,
  fill,
  x,
  y,
  width,
  height,
  scaleX,
  scaleY,
  rotation,
  annotationEvents,
  stroke,
  strokeWidth,
  shadowOffsetX,
  shadowOffsetY,
  shadowBlur,
  shadowColor,
  shadowOpacity,
  opacity,
  letterSpacing,
  lineHeight,
  align,
  ...otherProps
}) => /*#__PURE__*/React.createElement(Text$3, _extends$1({
  id: id,
  name: name,
  rotation: rotation,
  scaleX: scaleX,
  scaleY: scaleY,
  stroke: stroke,
  strokeWidth: strokeWidth,
  shadowOffsetX: shadowOffsetX,
  shadowOffsetY: shadowOffsetY,
  shadowBlur: shadowBlur,
  shadowColor: shadowColor,
  shadowOpacity: shadowOpacity,
  opacity: opacity,
  fill: fill,
  text: text,
  fontFamily: fontFamily,
  fontStyle: fontStyle,
  fontSize: fontSize,
  letterSpacing: letterSpacing,
  lineHeight: lineHeight,
  align: align,
  x: x,
  y: y,
  width: width,
  height: height
}, annotationEvents, otherProps));
TextNode.defaultProps = {
  ...nodesCommonPropTypes.defaults,
  text: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur imperdiet tortor quis odio facilisis, id aliquet nulla facilisis. Etiam tincidunt tempor odio nec placerat.',
  fontFamily: 'Arial',
  fontSize: 14,
  fill: '#000',
  width: 0,
  height: 0,
  letterSpacing: undefined,
  lineHeight: undefined,
  align: 'left'
};
TextNode.propTypes = {
  ...nodesCommonPropTypes.definitions,
  x: PropTypes.number.isRequired,
  y: PropTypes.number.isRequired,
  annotationEvents: PropTypes.instanceOf(Object).isRequired,
  width: PropTypes.number,
  height: PropTypes.number,
  text: PropTypes.string,
  fontFamily: PropTypes.string,
  fontSize: PropTypes.number,
  fill: PropTypes.string,
  letterSpacing: PropTypes.number,
  lineHeight: PropTypes.number,
  align: PropTypes.string
};

const extractNameFromUrl = url => {
  const urlParts = url.split('/');
  return urlParts[urlParts.length - 1].split('?')[0];
};

const loadImage = (imageSrc, imageFileName, noCrossOrigin = false) => new Promise((resolve, reject) => {
  const imageElement = new Image();
  if (!noCrossOrigin) {
    imageElement.crossOrigin = 'Anonymous';
  }
  imageElement.src = imageSrc;
  imageElement.name = imageFileName ?? extractNameFromUrl(imageSrc);
  imageElement.onload = () => {
    resolve(imageElement);
  };
  imageElement.onerror = () => {
    reject(new Error(`Error in loading the image with the provided url: ${imageSrc}`));
  };
});

const ImageNode = ({
  id,
  name,
  image,
  x,
  y,
  width,
  height,
  scaleX,
  scaleY,
  rotation,
  annotationEvents,
  stroke,
  strokeWidth,
  shadowOffsetX,
  shadowOffsetY,
  shadowBlur,
  shadowColor,
  shadowOpacity,
  opacity,
  ...otherProps
}) => {
  const [imgElement, setImgElement] = React.useState(null);
  React.useEffect(() => {
    if (typeof image === 'string') {
      loadImage(image).then(setImgElement);
    }
  }, [image]);
  const isImgElement = image instanceof HTMLImageElement;
  if (!isImgElement && !imgElement) {
    return null;
  }
  const finalImg = isImgElement ? image : imgElement;
  return /*#__PURE__*/React.createElement(Image$1, _extends$1({
    id: id,
    name: name,
    rotation: rotation,
    scaleX: scaleX,
    scaleY: scaleY,
    stroke: stroke,
    strokeWidth: strokeWidth,
    shadowOffsetX: shadowOffsetX,
    shadowOffsetY: shadowOffsetY,
    shadowBlur: shadowBlur,
    shadowColor: shadowColor,
    shadowOpacity: shadowOpacity,
    image: finalImg,
    x: x,
    y: y,
    width: width,
    height: height,
    opacity: opacity
  }, otherProps, annotationEvents, otherProps));
};
ImageNode.defaultProps = {
  ...nodesCommonPropTypes.defaults,
  width: 0,
  height: 0
};
ImageNode.propTypes = {
  ...nodesCommonPropTypes.definitions,
  image: PropTypes.oneOfType([PropTypes.instanceOf(HTMLImageElement), PropTypes.instanceOf(SVGImageElement),
  // PropTypes.instanceOf(HTMLVideoElement),
  PropTypes.instanceOf(ImageBitmap), PropTypes.string]).isRequired,
  x: PropTypes.number.isRequired,
  y: PropTypes.number.isRequired,
  annotationEvents: PropTypes.instanceOf(Object).isRequired,
  width: PropTypes.number,
  height: PropTypes.number
};

const LineNode = ({
  id,
  name,
  scaleX,
  scaleY,
  rotation,
  annotationEvents,
  points,
  lineCap,
  stroke,
  strokeWidth,
  shadowOffsetX,
  shadowOffsetY,
  shadowBlur,
  shadowColor,
  shadowOpacity,
  tension,
  opacity,
  ...otherProps
}) => /*#__PURE__*/React.createElement(Line$2, _extends$1({
  id: id,
  name: name,
  rotation: rotation,
  scaleX: scaleX,
  scaleY: scaleY,
  stroke: stroke,
  strokeWidth: strokeWidth,
  shadowOffsetX: shadowOffsetX,
  shadowOffsetY: shadowOffsetY,
  shadowBlur: shadowBlur,
  shadowColor: shadowColor,
  shadowOpacity: shadowOpacity,
  points: points,
  lineCap: lineCap,
  tension: tension,
  hitStrokeWidth: 20,
  x: 0,
  y: 0,
  opacity: opacity
}, annotationEvents, otherProps));
LineNode.defaultProps = {
  ...nodesCommonPropTypes.defaults,
  stroke: '#000000',
  strokeWidth: 1,
  lineCap: 'butt',
  // butt/round/square
  annotationEvents: {},
  tension: undefined
};
LineNode.propTypes = {
  ...nodesCommonPropTypes.definitions,
  points: PropTypes.instanceOf(Array).isRequired,
  annotationEvents: PropTypes.instanceOf(Object),
  lineCap: PropTypes.string,
  tension: PropTypes.number
};

const ArrowNode = ({
  id,
  name,
  fill,
  pointerLength,
  pointerWidth,
  scaleX,
  scaleY,
  rotation,
  annotationEvents,
  points,
  lineCap,
  stroke,
  strokeWidth,
  shadowOffsetX,
  shadowOffsetY,
  shadowBlur,
  shadowColor,
  shadowOpacity,
  opacity,
  ...otherProps
}) => /*#__PURE__*/React.createElement(Arrow$3, _extends$1({
  id: id,
  name: name,
  rotation: rotation,
  scaleX: scaleX,
  scaleY: scaleY,
  stroke: stroke,
  strokeWidth: strokeWidth,
  shadowOffsetX: shadowOffsetX,
  shadowOffsetY: shadowOffsetY,
  shadowBlur: shadowBlur,
  shadowColor: shadowColor,
  shadowOpacity: shadowOpacity,
  fill: fill,
  x: 0,
  y: 0,
  points: points,
  pointerLength: pointerLength,
  pointerWidth: pointerWidth,
  lineCap: lineCap,
  opacity: opacity
}, annotationEvents, otherProps));
ArrowNode.defaultProps = {
  ...nodesCommonPropTypes.defaults,
  stroke: '#000000',
  strokeWidth: 6,
  fill: undefined,
  lineCap: 'butt',
  pointerLength: undefined,
  pointerWidth: undefined
};
ArrowNode.propTypes = {
  ...nodesCommonPropTypes.definitions,
  points: PropTypes.instanceOf(Array).isRequired,
  annotationEvents: PropTypes.instanceOf(Object).isRequired,
  pointerLength: PropTypes.number,
  pointerWidth: PropTypes.number,
  fill: PropTypes.string,
  lineCap: PropTypes.string
};

/** Internal Dependencies */
const ANNOTATION_NAMES_TO_COMPONENT = {
  [TOOLS_IDS.RECT]: RectNode,
  [TOOLS_IDS.ELLIPSE]: EllipseNode,
  [TOOLS_IDS.POLYGON]: PolygonNode,
  [TOOLS_IDS.TEXT]: TextNode,
  [TOOLS_IDS.IMAGE]: ImageNode,
  [TOOLS_IDS.LINE]: LineNode,
  [TOOLS_IDS.ARROW]: ArrowNode,
  [TOOLS_IDS.PEN]: LineNode
};

const MemoizedAnnotation = ({
  annotation,
  annotationEvents,
  selectionsIds
}) => {
  const AnnotationComponent = ANNOTATION_NAMES_TO_COMPONENT[annotation.name];
  if (!AnnotationComponent) return null;
  return /*#__PURE__*/React.createElement(AnnotationComponent, _extends$1({
    key: annotation.id,
    annotationEvents: annotationEvents,
    draggable: selectionsIds.includes(annotation.id)
  }, annotation));
};
MemoizedAnnotation.propTypes = {
  annotation: PropTypes.instanceOf(Object).isRequired,
  annotationEvents: PropTypes.instanceOf(Object).isRequired,
  selectionsIds: PropTypes.instanceOf(Object).isRequired
};
var MemoizedAnnotation$1 = /*#__PURE__*/React.memo(MemoizedAnnotation);

/** External Dependencies */
const AnnotationNodes = () => {
  const {
    annotations = {},
    selectionsIds = []
  } = useStore();
  const annotationEvents = useAnnotationEvents();
  return React.useMemo(() => Object.values(annotations).map(annotation => /*#__PURE__*/React.createElement(MemoizedAnnotation$1, {
    key: annotation.id,
    annotation: annotation,
    annotationEvents: annotationEvents,
    selectionsIds: selectionsIds
  })), [annotations, annotationEvents, selectionsIds]);
};

const PreviewGroup = (props, ref) => {
  return /*#__PURE__*/React.createElement(Group, _extends$1({
    ref: ref
  }, props));
};
var PreviewGroup$1 = /*#__PURE__*/React.forwardRef(PreviewGroup);

const CANVAS_TO_IMG_SPACING = getProperImageToCanvasSpacing();
const MIN_SPACED_WIDTH = 10; // As sometimes the spaced width is less than that and it might be hard to view the image initially.

const DesignLayer = () => {
  const designLayerRef = React.useRef();
  const {
    initialCanvasWidth,
    initialCanvasHeight,
    canvasWidth,
    canvasHeight,
    dispatch,
    toolId,
    canvasScale,
    originalImage = {},
    finetunes = [],
    finetunesProps = {},
    filter = null,
    adjustments: {
      rotation = 0,
      crop = {},
      isFlippedX,
      isFlippedY
    } = {},
    resize,
    isSaving,
    config = {}
  } = useStore();
  const {
    backgroundColor,
    backgroundImage
  } = config;
  const imageNodeRef = React.useRef();
  const previewGroupRef = React.useRef();
  const isCurrentlyCropping = toolId === TOOLS_IDS.CROP;
  const finetunesAndFilter = React.useMemo(() => filter ? [...finetunes, filter] : finetunes, [finetunes, filter]);
  const spacedOriginalImg = React.useMemo(() => {
    const spacedWidth = Math.max(MIN_SPACED_WIDTH, originalImage.width - CANVAS_TO_IMG_SPACING);
    const imgRatio = originalImage.width / originalImage.height;
    return {
      width: spacedWidth,
      height: spacedWidth / imgRatio
    };
  }, [originalImage]);
  const originalImgSizeAfterRotation = React.useMemo(() => getSizeAfterRotation(originalImage.width, originalImage.height, rotation), [originalImage, rotation]);
  const originalImgInitialScale = React.useMemo(() => getDimensionsMinimalRatio(initialCanvasWidth, initialCanvasHeight, originalImage.width, originalImage.height), [originalImage, initialCanvasWidth, initialCanvasHeight]);
  const scaledSpacedOriginalImg = React.useMemo(() => ({
    width: spacedOriginalImg.width * originalImgInitialScale,
    height: spacedOriginalImg.height * originalImgInitialScale
  }), [spacedOriginalImg, originalImgInitialScale]);
  const resizedX = resize.width && !isCurrentlyCropping ? resize.width / (crop.width ?? scaledSpacedOriginalImg.width ?? originalImgSizeAfterRotation.width) : 1;
  const resizedY = resize.height && !isCurrentlyCropping ? resize.height / (crop.height ?? scaledSpacedOriginalImg.height ?? originalImgSizeAfterRotation.height) : 1;
  const xPointToCenterImgInCanvas = canvasWidth / (2 * canvasScale) - scaledSpacedOriginalImg.width * resizedX / 2;
  const yPointToCenterImgInCanvas = canvasHeight / (2 * canvasScale) - scaledSpacedOriginalImg.height * resizedY / 2;
  const xPointNoResizeNoCrop = canvasWidth / (2 * canvasScale) - scaledSpacedOriginalImg.width / 2;
  const yPointNoResizeNoCrop = canvasHeight / (2 * canvasScale) - scaledSpacedOriginalImg.height / 2;
  const imageDimensions = React.useMemo(() => ({
    x: Math.round(xPointToCenterImgInCanvas),
    y: Math.round(yPointToCenterImgInCanvas),
    abstractX: Math.round(xPointNoResizeNoCrop),
    abstractY: Math.round(yPointNoResizeNoCrop),
    width: scaledSpacedOriginalImg.width,
    height: scaledSpacedOriginalImg.height,
    scaledBy: canvasScale
  }), [canvasScale, xPointToCenterImgInCanvas, yPointToCenterImgInCanvas, xPointNoResizeNoCrop, yPointNoResizeNoCrop, scaledSpacedOriginalImg]);
  const clipFunc = ctx => {
    // We are using isSaving to apply ellitpical crop if we're saving the image while in crop tool and it's elliptical crop ratio,
    // As elliptical crop isn't applied while in crop tool.
    const isCroppingAndNotSaving = isCurrentlyCropping && !designLayerRef.current?.attrs?.isSaving;
    const clipBox = isCroppingAndNotSaving || crop.noEffect ? {
      ...imageDimensions,
      x: 0,
      y: 0
    } : {
      width: crop.width || imageDimensions.width,
      height: crop.height || imageDimensions.height,
      x: crop.x || 0,
      y: crop.y || 0
    };
    cropImage(ctx, {
      ratio: crop.ratio,
      ...clipBox
    }, isCroppingAndNotSaving);
    if (designLayerRef.current) {
      designLayerRef.current.setAttrs({
        clipX: clipBox.x,
        clipY: clipBox.y,
        clipWidth: clipBox.width,
        clipHeight: clipBox.height
      });
    }
  };
  const cacheImageNode = React.useCallback(() => {
    if (imageNodeRef.current) {
      imageNodeRef.current.cache();
    } else {
      setTimeout(cacheImageNode, 0);
    }
  }, []);
  const sizeAfterRotation = getSizeAfterRotation(imageDimensions.width, imageDimensions.height, rotation);
  const scaleAfterRotation = !isCurrentlyCropping ? getDimensionsMinimalRatio(imageDimensions.width, imageDimensions.height, sizeAfterRotation.width, sizeAfterRotation.height) : 1;
  React.useEffect(() => {
    if (originalImage) {
      cacheImageNode();
    }
    return () => {
      imageNodeRef.current?.clearCache();
    };
  }, [originalImage]);
  React.useEffect(() => {
    if (imageDimensions) {
      dispatch({
        type: SET_SHOWN_IMAGE_DIMENSIONS,
        payload: {
          shownImageDimensions: imageDimensions,
          designLayer: designLayerRef.current,
          previewGroup: previewGroupRef.current
        }
      });
    }
  }, [imageDimensions]);
  if (!xPointToCenterImgInCanvas || !yPointToCenterImgInCanvas || !imageDimensions) {
    return null;
  }
  const cropCenterRotatedPoint = getCenterRotatedPoint(crop.x, crop.y, rotation);
  const xPointAfterCrop = xPointToCenterImgInCanvas + (!isCurrentlyCropping && crop.width ? (imageDimensions.width / 2 - crop.x - crop.width / 2 + cropCenterRotatedPoint.x) * resizedX : 0);
  const yPointAfterCrop = yPointToCenterImgInCanvas + (!isCurrentlyCropping && crop.height ? (imageDimensions.height / 2 - crop.y - crop.height / 2 + cropCenterRotatedPoint.y) * resizedY : 0);
  const xPoint = isCurrentlyCropping ? xPointNoResizeNoCrop : xPointAfterCrop;
  const yPoint = isCurrentlyCropping ? yPointNoResizeNoCrop : yPointAfterCrop;
  const finalScaleX = (isCurrentlyCropping ? 1 : resizedX) * scaleAfterRotation;
  const finalScaleY = (isCurrentlyCropping ? 1 : resizedY) * scaleAfterRotation;
  return /*#__PURE__*/React.createElement(Layer, {
    id: DESIGN_LAYER_ID,
    ref: designLayerRef,
    xPadding: xPoint,
    yPadding: yPoint,
    offsetX: scaledSpacedOriginalImg.width / 2,
    offsetY: scaledSpacedOriginalImg.height / 2,
    x: scaledSpacedOriginalImg.width * resizedX / 2 + xPoint,
    y: scaledSpacedOriginalImg.height * resizedY / 2 + yPoint,
    scaleX: finalScaleX,
    scaleY: finalScaleY,
    rotation: isCurrentlyCropping ? 0 : rotation,
    clipFunc: clipFunc
  }, !isSaving && /*#__PURE__*/React.createElement(Rect, {
    x: isFlippedX ? scaledSpacedOriginalImg.width : 0,
    y: isFlippedY ? scaledSpacedOriginalImg.height : 0,
    fill: backgroundColor,
    fillPatternImage: backgroundImage,
    fillPatternRepeat: "repeat",
    width: scaledSpacedOriginalImg.width,
    height: scaledSpacedOriginalImg.height,
    listening: false,
    scaleX: isFlippedX ? -1 : 1,
    scaleY: isFlippedY ? -1 : 1
  }), /*#__PURE__*/React.createElement(Image$1, _extends$1({
    id: IMAGE_NODE_ID,
    image: originalImage,
    width: scaledSpacedOriginalImg.width,
    height: scaledSpacedOriginalImg.height,
    offsetX: scaledSpacedOriginalImg.width / 2,
    offsetY: scaledSpacedOriginalImg.height / 2,
    x: scaledSpacedOriginalImg.width / 2,
    y: scaledSpacedOriginalImg.height / 2,
    listening: false,
    filters: finetunesAndFilter,
    ref: imageNodeRef,
    scaleX: isFlippedX ? -1 : 1,
    scaleY: isFlippedY ? -1 : 1
  }, finetunesProps)), /*#__PURE__*/React.createElement(AnnotationNodes, null), /*#__PURE__*/React.createElement(PreviewGroup$1, {
    ref: previewGroupRef
  }));
};

const compareRatios = (ratio1, ratio2) => toPrecisedFloat(ratio1) === toPrecisedFloat(ratio2);

const boundDragging = (newDimensions, allowedArea) => {
  const maxAllowedX = allowedArea.width - (newDimensions.radiusX * 2 || newDimensions.width);
  const maxAllowedY = allowedArea.height - (newDimensions.radiusY * 2 || newDimensions.height);
  return {
    x: toPrecisedFloat(Math.min(Math.max(newDimensions.x, 0), maxAllowedX)),
    y: toPrecisedFloat(Math.min(Math.max(newDimensions.y, 0), maxAllowedY))
  };
};
const getPositionByPlaceLabel = (position, allowedArea, currentDimensions) => {
  const [yPlace, xPlace] = position.split('-');
  const newPosition = {
    x: 0,
    y: 0
  };
  if (yPlace === 'center') {
    newPosition.y = allowedArea.height / 2 - currentDimensions.height / 2;
  } else if (yPlace === 'bottom') {
    newPosition.y = allowedArea.height - currentDimensions.height;
  }
  if (xPlace === 'center') {
    newPosition.x = allowedArea.width / 2 - currentDimensions.width / 2;
  } else if (xPlace === 'right') {
    newPosition.x = allowedArea.width - currentDimensions.width;
  }
  return newPosition;
};
const boundResizing = (oldDimensions, newDimensions, allowedArea, ratio, cropRestrictions = {}) => {
  const scaledAllowedArea = {
    x: toPrecisedFloat(allowedArea.abstractX * allowedArea.scaledBy),
    y: toPrecisedFloat(allowedArea.abstractY * allowedArea.scaledBy),
    width: toPrecisedFloat(allowedArea.width * (cropRestrictions.noScale ? 1 : allowedArea.scaledBy)),
    height: toPrecisedFloat(allowedArea.height * (cropRestrictions.noScale ? 1 : allowedArea.scaledBy))
  };
  const boundedDimensions = {
    ...newDimensions
  };
  if (newDimensions.x < scaledAllowedArea.x) {
    boundedDimensions.x = scaledAllowedArea.x;
    boundedDimensions.width = oldDimensions.x - scaledAllowedArea.x + oldDimensions.width;
  }
  if (newDimensions.y < scaledAllowedArea.y) {
    boundedDimensions.y = scaledAllowedArea.y;
    boundedDimensions.height = oldDimensions.y - scaledAllowedArea.y + oldDimensions.height;
  }
  if (boundedDimensions.x + boundedDimensions.width > scaledAllowedArea.x + scaledAllowedArea.width) {
    boundedDimensions.width = scaledAllowedArea.x + scaledAllowedArea.width - boundedDimensions.x;
  }
  if (boundedDimensions.y + boundedDimensions.height > scaledAllowedArea.y + scaledAllowedArea.height) {
    boundedDimensions.height = scaledAllowedArea.y + scaledAllowedArea.height - boundedDimensions.y;
  }
  if (typeof ratio === 'number' && !compareRatios(boundedDimensions.width / boundedDimensions.height, ratio)) {
    const ratioedBoundedWidth = boundedDimensions.height * ratio;
    const ratioedBoundedHeight = boundedDimensions.width / ratio;
    if (toPrecisedFloat(boundedDimensions.y + ratioedBoundedHeight) <= scaledAllowedArea.y + scaledAllowedArea.height) {
      boundedDimensions.height = ratioedBoundedHeight;
    } else {
      boundedDimensions.width = ratioedBoundedWidth;
    }
  }
  if (cropRestrictions.minWidth && boundedDimensions.width <= cropRestrictions.minWidth || cropRestrictions.maxWidth && boundedDimensions.width >= cropRestrictions.maxWidth) {
    boundedDimensions.width = restrictNumber(boundedDimensions.width, cropRestrictions.minWidth, cropRestrictions.maxWidth);
    boundedDimensions.x = oldDimensions.x;
    boundedDimensions.y = oldDimensions.y;
    if (typeof ratio === 'number') {
      boundedDimensions.height = boundedDimensions.width / ratio;
    }
  }
  if (cropRestrictions.minHeight && newDimensions.height <= cropRestrictions.minHeight || cropRestrictions.maxHeight && newDimensions.height >= cropRestrictions.maxHeight) {
    boundedDimensions.height = restrictNumber(boundedDimensions.height, cropRestrictions.minHeight, cropRestrictions.maxHeight);
    boundedDimensions.x = oldDimensions.x;
    boundedDimensions.y = oldDimensions.y;
    if (typeof ratio === 'number') {
      boundedDimensions.width = boundedDimensions.height * ratio;
    }
  }
  if (typeof cropRestrictions.lockCropAreaAt === 'string') {
    const {
      x,
      y
    } = getPositionByPlaceLabel(cropRestrictions.lockCropAreaAt, scaledAllowedArea, boundedDimensions);
    boundedDimensions.x = x;
    boundedDimensions.y = y;
  }
  return boundedDimensions;
};

const noEffectTextDimensions = {
  width: 200,
  height: 100
};
const CropTransformer = () => {
  const {
    dispatch,
    theme,
    designLayer,
    originalImage,
    shownImageDimensions,
    adjustments: {
      crop = {},
      isFlippedX,
      isFlippedY
    } = {},
    resize = {},
    config,
    t
  } = useStore();
  const cropShapeRef = React.useRef();
  const cropTransformerRef = React.useRef();
  const tmpImgNodeRef = React.useRef();
  const shownImageDimensionsRef = React.useRef();
  const cropConfig = config[TOOLS_IDS.CROP];
  const cropSettings = React.useMemo(() => ({
    ...cropConfig,
    lockCropAreaAt: crop.lockCropAreaAt ?? cropConfig?.lockCropAreaAt
  }), [crop.lockCropAreaAt, cropConfig]);
  const {
    lockCropAreaAt
  } = cropSettings;
  const cropRatio = crop.ratio || cropSettings.ratio;
  const isCustom = cropRatio === CUSTOM_CROP;
  const isEllipse = cropRatio === ELLIPSE_CROP;
  const getProperCropRatio = () => cropRatio === ORIGINAL_CROP ? originalImage.width / originalImage.height : cropRatio;
  const saveCrop = ({
    width,
    height,
    x,
    y
  }, noHistory) => {
    const newCrop = {
      x,
      y,
      width,
      height
    };
    const isOldCropBiggerThanResize = crop.width >= resize.width && crop.height >= resize.height;
    if (resize.width && resize.height && (width < resize.width || height < resize.height) && isOldCropBiggerThanResize) {
      dispatch({
        type: SET_FEEDBACK,
        payload: {
          feedback: {
            message: t('cropSizeLowerThanResizedWarning'),
            status: FEEDBACK_STATUSES.WARNING
          }
        }
      });
    }
    dispatch({
      type: SET_CROP,
      payload: {
        ...crop,
        ...newCrop,
        dismissHistory: noHistory
      }
    });
  };
  const saveBoundedCropWithLatestConfig = (cropWidth, cropHeight, restrictions = {
    noScale: true
  }) => {
    if (cropTransformerRef.current && cropShapeRef.current) {
      cropTransformerRef.current.nodes([cropShapeRef.current]);
    }
    const imageDimensions = shownImageDimensionsRef.current;
    const attrs = {
      width: cropWidth,
      height: cropHeight,
      x: crop.x ?? 0,
      y: crop.y ?? 0
    };
    saveCrop(boundResizing(attrs, attrs, {
      ...imageDimensions,
      abstractX: 0,
      abstractY: 0
    }, isCustom || isEllipse ? false : getProperCropRatio(), {
      ...cropSettings,
      ...restrictions
    }), true);
  };
  React.useEffect(() => {
    if (designLayer && cropTransformerRef.current && cropShapeRef.current) {
      if (tmpImgNodeRef.current) {
        tmpImgNodeRef.current.cache();
      }
      cropTransformerRef.current.nodes([cropShapeRef.current]);
    }
    return () => {
      if (tmpImgNodeRef.current) {
        tmpImgNodeRef.current.clearCache();
      }
    };
  }, [designLayer, originalImage, shownImageDimensions]);
  React.useEffect(() => {
    if (shownImageDimensions) {
      shownImageDimensionsRef.current = shownImageDimensions;
      if (typeof shownImageDimensions.x !== 'undefined' && shownImageDimensions.width) {
        saveBoundedCropWithLatestConfig(crop.width ?? shownImageDimensions.width, crop.height ?? shownImageDimensions.height);
      }
    }
  }, [cropRatio, shownImageDimensions, cropSettings]);
  if (!designLayer) {
    return null;
  }
  const enabledAnchors = (lockCropAreaAt || crop.noEffect) && [] || (isCustom || isEllipse ? undefined : ['top-left', 'bottom-left', 'top-right', 'bottom-right']);
  const saveCropFromEvent = (e, noHistory = false) => {
    if (!e.target) {
      return;
    }
    saveCrop({
      width: e.target.width() * e.target.scaleX(),
      height: e.target.height() * e.target.scaleY(),
      x: e.target.x(),
      y: e.target.y()
    }, noHistory);
  };
  const limitDragging = e => {
    const currentCropShape = e.target;
    currentCropShape.setAttrs(boundDragging(currentCropShape.attrs, shownImageDimensionsRef.current));
  };
  let attrs;
  if (!crop.width && !crop.height) {
    const scaleFactor = shownImageDimensions.scaledBy < 1 ? shownImageDimensions.scaledBy : 1;
    const unscaledImgDimensions = {
      ...shownImageDimensions,
      width: shownImageDimensions.width / scaleFactor,
      height: shownImageDimensions.height / scaleFactor
    };
    attrs = boundResizing(unscaledImgDimensions, {
      ...unscaledImgDimensions,
      x: 0,
      y: 0
    }, {
      ...unscaledImgDimensions,
      abstractX: 0,
      abstractY: 0
    }, isCustom || isEllipse ? false : getProperCropRatio(), cropSettings);
  } else {
    attrs = crop;
  }
  const {
    x = 0,
    y = 0,
    width,
    height
  } = attrs;
  const cropShapeProps = {
    x,
    y,
    ref: cropShapeRef,
    fill: '#FFFFFF',
    scaleX: 1,
    scaleY: 1,
    globalCompositeOperation: 'destination-out',
    onDragEnd: lockCropAreaAt ? undefined : saveCropFromEvent,
    onDragMove: lockCropAreaAt ? undefined : limitDragging,
    onTransformEnd: lockCropAreaAt ? undefined : saveCropFromEvent,
    draggable: !lockCropAreaAt
  };

  // ALT is used to center scaling
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Image$1, {
    image: originalImage,
    x: isFlippedX ? shownImageDimensions.width : 0,
    y: isFlippedY ? shownImageDimensions.height : 0,
    width: shownImageDimensions.width,
    height: shownImageDimensions.height,
    filters: [Konva$2.Filters.Blur, Konva$2.Filters.Brighten],
    blurRadius: 10,
    brightness: -0.3,
    scaleX: isFlippedX ? -1 : 1,
    scaleY: isFlippedY ? -1 : 1,
    ref: tmpImgNodeRef
  }), isEllipse ? /*#__PURE__*/React.createElement(Ellipse$2, _extends$1({}, cropShapeProps, {
    radiusX: width / 2,
    radiusY: height / 2,
    offset: {
      x: -width / 2,
      y: -height / 2
    }
  })) : /*#__PURE__*/React.createElement(Rect, _extends$1({}, cropShapeProps, {
    width: crop.noEffect ? 0 : width,
    height: crop.noEffect ? 0 : height
  })), crop.noEffect && /*#__PURE__*/React.createElement(TextNode, {
    name: "Text",
    id: "no-preview-text-node",
    text: t('cropItemNoEffect'),
    x: shownImageDimensions.width / 2 - noEffectTextDimensions.width / 2,
    y: shownImageDimensions.height / 2 - noEffectTextDimensions.height / 2,
    fontSize: 20,
    fill: "#ffffff",
    stroke: "#ff0000",
    strokeWidth: 0.2,
    shadowColor: "#ff0000",
    shadowBlur: 10,
    annotationEvents: {},
    align: "center",
    width: noEffectTextDimensions.width,
    height: noEffectTextDimensions.height
  }), /*#__PURE__*/React.createElement(Transformer, {
    centeredScaling: false,
    flipEnabled: false,
    rotateEnabled: false,
    nodes: cropShapeRef.current ? [cropShapeRef.current] : [],
    anchorSize: 14,
    anchorCornerRadius: 7,
    enabledAnchors: enabledAnchors,
    ignoreStroke: false,
    anchorStroke: theme.palette['accent-primary'],
    anchorFill: theme.palette['access-primary'],
    anchorStrokeWidth: 2,
    borderStroke: theme.palette['accent-primary'],
    borderStrokeWidth: 2,
    borderDash: [4],
    keepRatio: !isCustom || !isEllipse,
    ref: cropTransformerRef,
    boundBoxFunc: (absOldBox, absNewBox) => boundResizing(absOldBox, absNewBox, shownImageDimensionsRef.current, isCustom || isEllipse ? false : getProperCropRatio(), cropSettings)
  }));
};

/** External Dependencies */
const NodesTransformer = () => {
  const {
    selectionsIds = [],
    theme,
    designLayer,
    dispatch,
    config: {
      useCloudimage
    }
  } = useStore();
  const selections = React.useMemo(() => designLayer?.findOne ? selectionsIds.map(selectionId => designLayer.findOne(`#${selectionId}`)).filter(Boolean) : [], [selectionsIds]);
  const changePointerIconToMove = () => {
    dispatch({
      type: CHANGE_POINTER_ICON,
      payload: {
        pointerCssIcon: POINTER_ICONS.MOVE
      }
    });
  };
  const changePointerIconToDraw = () => {
    dispatch({
      type: CHANGE_POINTER_ICON,
      payload: {
        pointerCssIcon: POINTER_ICONS.DRAW
      }
    });
  };
  const enableTextContentChangeOnDblClick = () => {
    if (selections.length === 1 && selections[0].name() === TOOLS_IDS.TEXT) {
      dispatch({
        type: ENABLE_TEXT_CONTENT_EDIT,
        payload: {
          textIdOfEditableContent: selections[0].id()
        }
      });
    }
  };
  const enabledAnchors = useCloudimage ? ['top-left', 'bottom-left', 'top-right', 'bottom-right'] : undefined;

  // ALT is used to center scaling
  // SHIFT is used to scaling with keeping ratio
  return /*#__PURE__*/React.createElement(Transformer, {
    id: NODES_TRANSFORMER_ID,
    centeredScaling: false,
    rotationSnaps: [0, 45, 90, 135, 180, 225, 270, 315],
    nodes: selections,
    rotateAnchorOffset: 30,
    anchorSize: 14,
    anchorCornerRadius: 7,
    padding: selections.length === 1 ? selections[0].attrs.padding ?? 1 : 1,
    ignoreStroke: false,
    anchorStroke: theme.palette['accent-primary'],
    anchorFill: theme.palette['access-primary'],
    anchorStrokeWidth: 2,
    borderStroke: theme.palette['accent-primary'],
    borderStrokeWidth: 2,
    borderDash: [4],
    rotateEnabled: !useCloudimage,
    onMouseOver: changePointerIconToMove,
    onMouseLeave: changePointerIconToDraw,
    onDblClick: enableTextContentChangeOnDblClick,
    onDblTap: enableTextContentChangeOnDblClick,
    enabledAnchors: enabledAnchors,
    flipEnabled: !useCloudimage,
    shouldOverdrawWholeArea: true
  });
};

/** External Dependencies */
const TransformersLayer = () => {
  const {
    toolId,
    shownImageDimensions
  } = useStore();
  return /*#__PURE__*/React.createElement(Layer, {
    id: TRANSFORMERS_LAYER_ID,
    x: shownImageDimensions.abstractX || 0,
    y: shownImageDimensions.abstractY || 0
  }, /*#__PURE__*/React.createElement(NodesTransformer, null), toolId === TOOLS_IDS.CROP && /*#__PURE__*/React.createElement(CropTransformer, null));
};

/** External Dependencies */
const StyledNodeControls = styled.div(({
  theme,
  top,
  left
}) => `
  position: absolute;
  z-index: 1;
  background: ${theme.palette["bg-secondary"]};
  border-radius: 50px;
  display: flex;
  align-items: center;
  justify-content: center;
  box-shadow: 0px 1px 2px ${theme.palette["light-shadow"]};
  top: ${(top || 0) + 8}px;
  left: ${(left || 0) + 4}px;
  transform: translateX(-50%);
  height: 32px;
  color: black;
  & > button {
    color: black;
  }
  & > button:hover {
    color: black;
    background-color: #dedede;
  }

  & > button:first-child:hover {
    border-top-left-radius: 50px;
    border-bottom-left-radius: 50px;
  }

  & > button:last-child:hover {
    border-top-right-radius: 50px;
    border-bottom-right-radius: 50px;
  }
`);

/** External Dependencies */
const NodeControls = () => {
  const {
    selectionsIds = [],
    designLayer,
    annotations,
    dispatch
  } = useStore();
  const [position, setPosition] = React.useState({
    left: 0,
    top: 0
  });
  const nodesTransformer = React.useMemo(() => designLayer?.getStage()?.findOne(`#${NODES_TRANSFORMER_ID}`), [designLayer]);
  const selectionsLength = selectionsIds.length;
  const updatePosition = debounce$1(() => {
    if (!nodesTransformer) {
      return;
    }
    setPosition({
      left: (nodesTransformer.x() + nodesTransformer.width() / 2) * nodesTransformer.scaleX(),
      top: (nodesTransformer.y() + nodesTransformer.height()) * nodesTransformer.scaleY()
    });
  }, 0);
  React.useEffect(() => {
    updatePosition();
  }, [selectionsIds, nodesTransformer, annotations]);
  if (selectionsLength === 0 || !nodesTransformer) return null;

  // TODO: Implemenet annotation ordering.
  // const changeAnnotationOrder = () => {};

  const duplicateSelectedNodes = () => {
    dispatch({
      type: DUPLICATE_ANNOTATIONS,
      payload: {
        annotationsIds: selectionsIds
      }
    });
  };
  const removeSelectedNodes = () => {
    dispatch({
      type: REMOVE_ANNOTATIONS,
      payload: {
        annotationsIds: selectionsIds
      }
    });
  };
  return /*#__PURE__*/React.createElement(StyledNodeControls, {
    className: "FIE_annotation-controls-overlay",
    left: position.left,
    top: position.top
  }, selectionsIds[0] !== WATERMARK_ANNOTATION_ID$1 && /*#__PURE__*/React.createElement(IconButton$1, {
    color: "basic",
    size: "sm",
    onClick: duplicateSelectedNodes
  }, /*#__PURE__*/React.createElement(Duplicate$1, null)), /*#__PURE__*/React.createElement(IconButton$1, {
    color: "basic",
    size: "sm",
    onClick: removeSelectedNodes
  }, /*#__PURE__*/React.createElement(DeleteOutline$1, null)));
};

function getDistance(p1, p2) {
  return Math.sqrt((p2.x - p1.x) ** 2 + (p2.y - p1.y) ** 2);
}
function getCenter(p1, p2) {
  return {
    x: (p1.x + p2.x) / 2,
    y: (p1.y + p2.y) / 2
  };
}
let lastCenter = null;
let lastDist = 0;
const zoomOnTouchesMove = (e, saveZoomFn) => {
  e.evt.preventDefault();
  const touch1 = e.evt.touches[0];
  const touch2 = e.evt.touches[1];
  if (!touch1 || !touch2) {
    return;
  }
  const stageCanvas = e.currentTarget;
  // if the stageCanvas was under Konva's drag&drop
  // we need to stop it, and implement our own pan logic with two pointers
  if (stageCanvas.isDragging()) {
    stageCanvas.stopDrag();
  }
  const p1 = {
    x: touch1.clientX,
    y: touch1.clientY
  };
  const p2 = {
    x: touch2.clientX,
    y: touch2.clientY
  };
  if (!lastCenter) {
    lastCenter = getCenter(p1, p2);
    return;
  }
  const newCenter = getCenter(p1, p2);
  const dist = getDistance(p1, p2);
  if (!lastDist) {
    lastDist = dist;
  }
  const currentZoomFactor = stageCanvas.attrs.zoomFactor || DEFAULT_ZOOM_FACTOR;

  // local coordinates of center point
  const pointTo = {
    x: (newCenter.x - stageCanvas.x()) / currentZoomFactor,
    y: (newCenter.y - stageCanvas.y()) / currentZoomFactor
  };
  const scale = (currentZoomFactor || DEFAULT_ZOOM_FACTOR) * (dist / lastDist);

  // calculate new position of the stageCanvas
  const dx = newCenter.x - lastCenter.x;
  const dy = newCenter.y - lastCenter.y;
  const newPos = {
    x: newCenter.x - pointTo.x * scale + dx,
    y: newCenter.y - pointTo.y * scale + dy
  };
  lastDist = dist;
  lastCenter = newCenter;
  saveZoomFn({
    ...newPos,
    factor: scale,
    preparedDimensions: true
  });
};
const endTouchesZooming = cb => {
  lastDist = 0;
  lastCenter = null;
  if (typeof cb === 'function') {
    cb();
  }
};

/** External Dependencies */
const CanvasContainer = styled.div`
  width: 100%;
  position: relative;
  // backup for flex-grow, 94px, 12px = toolsbar's maxheight, app container padding.
  height: calc(100% - 112px - 16px);
  overflow: hidden;
  min-height: 250px;
  padding: 16px;
  flex-grow: 1;
`;
const StyledOrignalImage = styled.img`
  max-width: 98%;
  max-height: 98%;
  box-shadow: 0 0 0 5px rgba(0, 0, 0, 0.1);
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  z-index: 2;
`;
const StyledCanvasNode = styled(Stage)`
  outline: none;
`;

/** External Dependencies */
const ZOOM_DELTA_TO_SCALE_CONVERT_FACTOR = 0.006;
const CanvasNode = ({
  children
}) => {
  useStrictMode(true);
  const canvasRef = React.useRef();
  const {
    dispatch,
    pointerCssIcon,
    tabId,
    toolId,
    canvasWidth,
    canvasHeight,
    canvasScale,
    selectionsIds = [],
    zoom = {},
    config: {
      previewPixelRatio,
      disableZooming
    }
  } = useStore();
  Konva$2.pixelRatio = previewPixelRatio;
  const defaultZoomFactor = DEFAULT_ZOOM_FACTOR;
  const isZoomEnabled = !disableZooming && toolId !== TOOLS_IDS.CROP;
  const [isPanningEnabled, setIsPanningEnabled] = React.useState(tabId !== TABS_IDS.ANNOTATE && tabId !== TABS_IDS.WATERMARK && zoom.factor > defaultZoomFactor);
  const cursorStyle = React.useMemo(() => ({
    cursor: pointerCssIcon === POINTER_ICONS.DEFAULT && tabId === TABS_IDS.ANNOTATE ? POINTER_ICONS.DRAW : pointerCssIcon
  }), [tabId, pointerCssIcon]);
  const saveZoom = newZoomProps => {
    dispatch({
      type: ZOOM_CANVAS,
      payload: newZoomProps
    });
  };
  const handleCanvasDragEnd = e => {
    if (e.currentTarget.draggable() && e.target.nodeType.toLowerCase() === 'stage' && isZoomEnabled && isPanningEnabled) {
      saveZoom({
        factor: zoom.factor,
        x: e.target.x(),
        y: e.target.y(),
        preparedDimensions: true
      });
    }
  };
  const clearSelections = React.useCallback(e => {
    e.evt.preventDefault();
    e.currentTarget.container?.().focus();
    if (e.target instanceof Konva$2.Stage && selectionsIds.length > 0) {
      dispatch({
        type: CLEAR_ANNOTATIONS_SELECTIONS
      });
    }
  }, [selectionsIds]);
  const dragBoundFunc = pos => {
    const x = Math.min(0, Math.max(pos.x, canvasWidth * (1 - zoom.factor)));
    const y = Math.min(0, Math.max(pos.y, canvasHeight * (1 - zoom.factor)));
    return {
      x,
      y
    };
  };
  const handleZoom = e => {
    e.evt.preventDefault();
    const newScale = (zoom.factor || defaultZoomFactor) + e.evt.deltaY * -ZOOM_DELTA_TO_SCALE_CONVERT_FACTOR;
    const pointer = e.currentTarget.getPointerPosition();
    saveZoom({
      ...pointer,
      factor: newScale
    });
  };
  const preventDraggingIfMultiTouches = e => {
    if (e.evt.touches?.length > 1) {
      setIsPanningEnabled(false);
    }
  };
  const resetPanningAbility = () => setIsPanningEnabled(tabId !== TABS_IDS.ANNOTATE || tabId === TABS_IDS.WATERMARK);
  const endTouchesZoomingEnablePanning = () => {
    endTouchesZooming(resetPanningAbility);
  };
  const mapKeyboardKeys = e => {
    if ((e.code === 'Space' || e.key === 'Control') && !e.repeat && zoom.factor > defaultZoomFactor && isZoomEnabled) {
      e.preventDefault();
      setIsPanningEnabled(true);
      dispatch({
        type: CHANGE_POINTER_ICON,
        payload: {
          pointerCssIcon: POINTER_ICONS.DRAG
        }
      });
    }
  };
  const revertKeyboardKeysEffect = e => {
    if (e.code === 'Space') {
      e.preventDefault();
      resetPanningAbility();
    }
  };
  const focusCanvasOnEnter = () => {
    if (canvasRef.current) {
      canvasRef.current.container().focus();
    }
  };
  React.useEffect(() => {
    dispatch({
      type: CHANGE_POINTER_ICON,
      payload: {
        pointerCssIcon: POINTER_ICONS[isPanningEnabled ? 'DRAG' : 'DEFAULT']
      }
    });
  }, [isPanningEnabled]);
  React.useEffect(() => {
    setIsPanningEnabled(tabId !== TABS_IDS.ANNOTATE && tabId !== TABS_IDS.WATERMARK && zoom.factor > defaultZoomFactor);

    // Remove & register the event on changing tabId, zoom.factor, defaultZoomFactor to always access latest state.
    let canvasContainer;
    if (canvasRef.current) {
      canvasContainer = canvasRef.current.container();
      canvasContainer.addEventListener('mouseenter', focusCanvasOnEnter);
      canvasContainer.addEventListener('keydown', mapKeyboardKeys);
      canvasContainer.addEventListener('keyup', revertKeyboardKeysEffect);
    }
    return () => {
      if (canvasContainer) {
        canvasContainer.removeEventListener('mouseenter', focusCanvasOnEnter);
        canvasContainer.removeEventListener('keydown', mapKeyboardKeys);
        canvasContainer.removeEventListener('keyup', revertKeyboardKeysEffect);
      }
    };
  }, [tabId, zoom.factor, defaultZoomFactor]);

  // Zoom panning is done by dragging mouse except in annotate tab,
  // it's done by toggling panning through mouse right click (enable/disable) then drag mouse.
  const zoomedResponsiveCanvasScale = canvasScale * (isZoomEnabled && zoom.factor || defaultZoomFactor);
  return /*#__PURE__*/React.createElement(StyledCanvasNode, {
    className: "FIE_canvas-node",
    tabIndex: -1,
    ref: canvasRef,
    width: canvasWidth,
    height: canvasHeight,
    scaleX: zoomedResponsiveCanvasScale,
    scaleY: zoomedResponsiveCanvasScale,
    x: isZoomEnabled && zoom.x || null,
    y: isZoomEnabled && zoom.y || null,
    zoomFactor: isZoomEnabled && zoom.factor || defaultZoomFactor,
    onWheel: isZoomEnabled ? handleZoom : undefined,
    onTap: clearSelections,
    onClick: clearSelections,
    onTouchMove: isZoomEnabled ? e => zoomOnTouchesMove(e, saveZoom) : undefined,
    onDragStart: preventDraggingIfMultiTouches,
    onTouchEnd: isZoomEnabled ? endTouchesZoomingEnablePanning : undefined,
    dragBoundFunc: dragBoundFunc,
    draggable: isZoomEnabled && isPanningEnabled,
    onDragEnd: handleCanvasDragEnd,
    style: cursorStyle
  }, children);
};
CanvasNode.propTypes = {
  children: PropTypes.node.isRequired
};
var CanvasNode$1 = /*#__PURE__*/React.memo(CanvasNode);

/** External Dependencies */
const MainCanvas = () => {
  const [observeResize] = useResizeObserver();
  const providedAppContext = useStore();
  const canvasContainerRef = React.useRef(null);
  const setNewCanvasSize = React.useCallback(({
    width: containerWidth,
    height: containerHeight
  }) => {
    providedAppContext.dispatch({
      type: SET_CANVAS_SIZE,
      payload: {
        canvasWidth: containerWidth,
        canvasHeight: containerHeight
      }
    });
  }, []);
  React.useEffect(() => {
    observeResize(canvasContainerRef.current, setNewCanvasSize);
  }, []);
  return /*#__PURE__*/React.createElement(CanvasContainer, {
    className: "FIE_canvas-container",
    ref: canvasContainerRef
  }, !providedAppContext.textIdOfEditableContent && /*#__PURE__*/React.createElement(NodeControls, null), providedAppContext.isShowOriginalImage && /*#__PURE__*/React.createElement(StyledOrignalImage, {
    className: "FIE_original-image-compare",
    src: providedAppContext.originalImage.src
  }), /*#__PURE__*/React.createElement(CanvasNode$1, null, /*#__PURE__*/React.createElement(AppProviderOverridenValue, {
    overridingValue: providedAppContext
  }, /*#__PURE__*/React.createElement(DesignLayer, null), /*#__PURE__*/React.createElement(TransformersLayer, null))));
};

styled.div`
  display: inline-block;
  height: ${props => props.height};
  width: ${props => props.width};
  border-radius: 1px;
  background: ${({
  theme: {
    palette
  }
}) => palette[Color.BordersSecondary]};
`;

/** External Dependencies */
({
  height: PropTypes.string,
  width: PropTypes.string
});

/** External Dependencies */
const StyledTopbar = styled.div`
  padding: 16px;
  box-sizing: border-box;
  position: relative;
  width: 100%;
  display: flex;
  flex-wrap: wrap;
  gap: 16px;
  align-items: center;
  justify-content: space-between;
  border-bottom: 1px solid
    ${({
  theme: {
    palette
  }
}) => palette[Color.BordersSecondary]};

  [data-phone="true"] & {
    padding: 6px 6px 4px 6px;

    ${({
  isPhoneScreen
}) => isPhoneScreen && `
      padding: 12px 12px 0px;
      gap: 12px;
    `}
  }
`;
const StyledMainButtonsWrapper = styled.div`
  display: flex;
  align-items: center;
  order: 3;
`;
const StyledControlButtonsWrapper = styled.div`
  display: flex;
  align-items: center;
  order: 1;
  gap: 4px;
`;
const StyledHistoryButton = styled(IconButton$1)`
  margin: ${({
  margin
}) => margin ?? "0 4px"};
  color: black;
  &.FIE_topbar-undo-button {
    border-right: 1px solid #dedede;
    padding-right: 10px;
    padding-left: 10px;
    padding-top: 6px;
    padding-bottom: 6px;
    border-radius: 0px;
  }
  &.FIE_topbar-redo-button {
    padding-top: 6px;
    padding-bottom: 6px;
    padding-right: 10px;
    padding-left: 10px;
  }
  &.FIE_topbar-undo-button:hover {
    background-color: #dedede;
    border-bottom-left-radius: 50px;
    border-top-left-radius: 50px;
  }
  &.FIE_topbar-redo-button:hover {
    background-color: #dedede;
    border-bottom-right-radius: 50px;
    border-top-right-radius: 50px;
  }
  svg {
    color: ${({
  theme: {
    palette
  },
  disabled
}) => !disabled ? "black" : palette[Color.IconsMuted]};
  }
`;
const StyledZoomingWrapper = styled.div`
  display: flex;
  align-items: center;
  gap: 2px;
  border-radius: 20px;
  border: 1px solid #dedede;
  color: black;
`;
styled(Label$6)`
  flex-shrink: 0;
  color: ${({
  theme: {
    palette
  }
}) => palette[Color.TextPlaceholder]};
  ${({
  theme: {
    typography
  }
}) => typography.font[FontVariant.LabelMedium]};
`;
const StyledSmallButton = styled(IconButton$1)`
  padding: 8px;
  border-radius: 0px !important;
  &.FIE_topbar-zoom-out-btn {
    border-right: 1px solid #dedede;
    padding-left: 10px;
    padding-right: 10px;
  }
  &.FIE_topbar-zoom-in-btn {
    border-left: 1px solid #dedede;
    padding-left: 10px;
    padding-right: 10px;
  }
  svg {
    color: black;
  }

  &:hover {
    background-color: transparent;
  }

  &:focus {
    background-color: transparent;
  }
`;
const StyledFlexCenterAlignedContainer = styled.div`
  width: ${({
  $showBackButton
}) => $showBackButton ? "318px" : "384px"};
  height: 32px;
  display: block;
  width: 100%;
  order: 2;
  ${({
  reverseDirection
}) => reverseDirection ? "flex-direction: row-reverse" : ""};
  @media (min-width: 761px) {
    display: flex;
    align-items: center;
    justify-content: center;
    width: fit-content;
    order: 2;
  }
`;
const StyledZoomPercentageLabel = styled(Label$6)`
  cursor: pointer;
  color: black;
  padding: 0px 10px;
  font-size: 12px;
`;
const StyledBackButtonLabel = styled.span`
  color: black;
`;
const StyledCloseButton = styled(CrossButton$1)`
  padding: 8px;
  z-index: 111;
`;
styled(Button$1)`
  padding: 4px 12px;
`;
styled(InputGroup$1)``;
styled(SelectGroup$1)`
  margin-top: 16px;
`;
styled.div`
  width: 100%;
  margin-top: 16px;
`;
styled.div`
  margin-top: 16px;
  width: 100%;
`;
styled(Label$6)`
  margin-bottom: 4px;
`;
const StyledHistoryButtons = styled.div`
  display: flex;
  border: 1px solid #dedede;
  border-radius: 20px;
`;
const StyledImageOptionsButtons = styled.div`
  display: flex;
  gap: 12px;
  justify-content: ${({
  isPhoneScreen
}) => isPhoneScreen ? "space-between" : "center"};
`;
const StyledMenuIconButton = styled(IconButton$1)`
  @media (min-width: 761px) {
    display: none;
  }
`;
const StyledDimensionsButtons = styled.div`
  display: flex;
  gap: 12px;
  align-items: center;
`;

/** External Dependencies */
const StyledModal = styled(Modal$2)`
  width: ${({
  width
}) => width || '300px'};
  max-width: unset;
`;
const StyledModalTitle = styled(modalTitle)(({
  theme,
  isWarning
}) => styled.css`
    padding-bottom: 0;

    .SfxModalTitle-Icon {
      background-color: ${isWarning && theme.palette[Color.Orange_0_1_Overlay]};
    }

    .SfxModalTitle-LabelPrimary {
      margin-bottom: 24px;
      font-size: 1.25rem !important;
      font-family: "Open Sans", sans-serif !important;
      color: black !important;
      }
      
      .SfxModalTitle-LabelSecondary {
        font-size: 1rem !important;
    font-family: "Open Sans", sans-serif !important;
    color: black !important;
      text-align: center;
    }
  `);
const StyledModalActions = styled(ModalActions$2)`
  gap: 12px;
  padding: 24px;
  .SfxButton-root {
    flex: 1;
    margin: 0;
    height: 30px;
    color: black;
    border-radius: 50px;
    background-color: white;
    border: 1px solid #c9c9c9;
    line-height: 14px;
    font-family: "Open Sans", sans-serif;
    letter-spacing: 0.04rem;

    & > span > span {
      font-size: 0.75rem;
    }

    &:hover {
      background-color: #dedede;
    }
  }
`;

/** External Dependencies */
const Modal = ({
  title,
  hint,
  Icon,
  onDone,
  onCancel,
  doneLabel,
  cancelLabel,
  isOpened,
  doneButtonStyle,
  doneButtonColor = 'basic',
  cancelButtonColor = 'basic',
  children,
  areButtonsDisabled,
  zIndex,
  className,
  width,
  isWarning
}) => {
  const onKeyUp = e => {
    if (e.key === 'Enter') {
      onDone(e);
    }
    if (e.key === 'Escape') {
      onCancel();
    }
  };
  return /*#__PURE__*/React.createElement(StyledModal, {
    className: className,
    open: isOpened,
    onClose: onCancel,
    style: {
      zIndex
    },
    onKeyUp: onKeyUp,
    width: width,
    role: "dialog",
    tabIndex: -1,
    "aria-modal": "true",
    "aria-label": title
  }, /*#__PURE__*/React.createElement(StyledModalTitle, {
    icon: /*#__PURE__*/React.createElement(Icon, {
      size: 25
    }),
    iconShadow: true,
    isWarning: isWarning,
    onClose: onCancel,
    primary: title,
    secondary: hint,
    variant: "with-icon"
  }), children && /*#__PURE__*/React.createElement(ModalContent$1, null, children), /*#__PURE__*/React.createElement(StyledModalActions, {
    align: "center"
  }, /*#__PURE__*/React.createElement(Button$1, {
    color: cancelButtonColor,
    onClick: onCancel,
    size: "md",
    disabled: areButtonsDisabled
  }, cancelLabel), /*#__PURE__*/React.createElement(Button$1, {
    color: doneButtonColor,
    onClick: onDone,
    size: "md",
    warning: isWarning,
    style: doneButtonStyle,
    disabled: areButtonsDisabled
  }, doneLabel)));
};
Modal.defaultProps = {
  hint: '',
  isOpened: false,
  doneLabel: 'Yes',
  cancelLabel: 'No',
  doneButtonStyle: undefined,
  doneButtonColor: 'basic',
  cancelButtonColor: 'basic',
  children: undefined,
  areButtonsDisabled: false,
  zIndex: undefined,
  className: undefined,
  width: '',
  isWarning: false
};
Modal.propTypes = {
  title: PropTypes.string.isRequired,
  Icon: PropTypes.instanceOf(Object).isRequired,
  onDone: PropTypes.func.isRequired,
  onCancel: PropTypes.func.isRequired,
  hint: PropTypes.string,
  isOpened: PropTypes.bool,
  doneLabel: PropTypes.string,
  cancelLabel: PropTypes.string,
  doneButtonStyle: PropTypes.instanceOf(Object),
  doneButtonColor: PropTypes.string,
  cancelButtonColor: PropTypes.string,
  children: PropTypes.node,
  areButtonsDisabled: PropTypes.bool,
  zIndex: PropTypes.number,
  className: PropTypes.string,
  width: PropTypes.string,
  isWarning: PropTypes.bool
};

/** External Dependencies */
const ConfirmationModal = ({
  children,
  isReset
}) => {
  const {
    t,
    theme,
    config,
    dispatch,
    isResetted = true,
    haveNotSavedChanges,
    config: {
      onClose
    }
  } = useStore();
  const [isModalOpened, setIsModalOpened] = React.useState(false);
  const WarningIcon = () => /*#__PURE__*/React.createElement(Warning, {
    color: theme.palette.warning,
    size: 25
  });

  //   Hacky solution for avoiding (zoom & image info) components go to right if we have no close button.
  if (typeof onClose !== 'function' && !isReset) {
    return /*#__PURE__*/React.createElement("span", null);
  }
  const cancelModal = () => {
    setIsModalOpened(false);
  };
  const openModal = () => {
    setIsModalOpened(true);
  };
  const dispatchReset = React.useCallback(() => {
    dispatch({
      type: RESET,
      payload: {
        config
      }
    });
    cancelModal();
  }, [config]);
  const closeWithReason = () => {
    if (isReset) return;
    onClose(CLOSING_REASONS.CLOSE_BUTTON, haveNotSavedChanges);
    dispatchReset();
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.cloneElement(children, {
    onClick: isResetted ? closeWithReason : openModal
  }), isModalOpened && /*#__PURE__*/React.createElement(Modal, {
    title: isReset ? t('warning') : t('discardChanges'),
    hint: isReset ? t('changesLoseWarningHint') : t('discardChangesWarningHint'),
    isOpened: isModalOpened,
    onCancel: cancelModal,
    onDone: isReset ? dispatchReset : closeWithReason,
    Icon: WarningIcon,
    doneLabel: t('confirm'),
    doneButtonColor: "warning-primary",
    cancelLabel: t('cancel'),
    width: "400px",
    isWarning: true
  }));
};
ConfirmationModal.defaultProps = {
  isReset: false
};
ConfirmationModal.propTypes = {
  children: PropTypes.node.isRequired,
  isReset: PropTypes.bool
};

/** External Dependencies */
const CloseButton = () => {
  const {
    config: {
      onClose
    }
  } = useStore();
  if (typeof onClose !== 'function') {
    return null;
  }
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ConfirmationModal, null, /*#__PURE__*/React.createElement(StyledCloseButton, {
    className: "FIE_topbar-close-button",
    color: "basic",
    size: "md"
  }, /*#__PURE__*/React.createElement(CrossOutline$1, null))));
};

const getDefaultSaveQuality = providedDefaultQuality => providedDefaultQuality <= 0 || providedDefaultQuality > 1 ? DEFAULT_SAVE_QUALITY : providedDefaultQuality;

/** External Dependencies */
const saveButtonWrapperStyle = {
  minWidth: 67,
  width: 'fit-content'
}; // 67px same width as tabs bar
const saveButtonMenuStyle = {
  marginLeft: 12
};
const SaveButton = () => {
  const state = useStore();
  const optionSaveFnRef = React.useRef();
  const {
    theme,
    dispatch,
    originalImage,
    resize,
    isLoadingGlobally,
    haveNotSavedChanges,
    feedback,
    hasUndo,
    t,
    config: {
      onClose,
      closeAfterSave,
      onBeforeSave,
      onSave,
      forceToPngInEllipticalCrop,
      defaultSavedImageName,
      defaultSavedImageType,
      defaultSavedImageQuality = DEFAULT_SAVE_QUALITY,
      useCloudimage,
      moreSaveOptions,
      disableSaveIfNoChanges,
      removeSaveButton
    }
  } = state;
  const [imageFileInfo, setImageFileInfo] = React.useState({
    quality: getDefaultSaveQuality(defaultSavedImageQuality)
  });
  const transformImgFn = useTransformedImgData();
  const isBlockerError = feedback.duration === 0;
  const handleSave = () => {
    const transformedData = transformImgFn(imageFileInfo, false, true);
    const onSaveFn = optionSaveFnRef.current || onSave;
    const savingResult = onSaveFn(transformedData.imageData, transformedData.designState);
    const finalizeSaving = () => {
      dispatch({
        type: SET_SAVING,
        payload: {
          isSaving: false
        }
      });
    };
    if (savingResult instanceof Promise) {
      savingResult.finally(finalizeSaving);
    } else {
      finalizeSaving();
    }
    optionSaveFnRef.current = null;
    if (closeAfterSave && onClose) {
      onClose(CLOSING_REASONS.AFTER_SAVE, haveNotSavedChanges);
    }
  };
  const startSaving = () => {
    dispatch({
      type: SET_SAVING,
      payload: {
        isSaving: true
      }
    });
    setTimeout(handleSave, 3);
  };
  const triggerSaveHandler = () => {
    if (disableSaveIfNoChanges && !hasUndo) return;
    if (useCloudimage) {
      const transformedCloudimageData = transformImgFn(imageFileInfo);
      const onSaveFn = optionSaveFnRef.current || onSave;
      onSaveFn(transformedCloudimageData.imageData, transformedCloudimageData.designState);
      return;
    }
    if (!optionSaveFnRef.current && typeof onBeforeSave === 'function' && onBeforeSave(imageFileInfo) === false) {
      return;
    }
    startSaving();
  };
  const changeSaveFnAndTriggerAnother = (saveFn, fnToTrigger) => {
    if (typeof saveFn === 'function') {
      optionSaveFnRef.current = saveFn;
      fnToTrigger();
    } else {
      throw new Error('onSave function callback is required.');
    }
  };
  const setFileNameAndExtension = () => {
    const {
      name,
      extension
    } = getFileFullName(defaultSavedImageName || originalImage.name, forceToPngInEllipticalCrop && crop?.ratio === ELLIPSE_CROP ? 'png' : SUPPORTED_IMAGE_TYPES.includes(defaultSavedImageType?.toLowerCase()) && defaultSavedImageType);
    setImageFileInfo({
      ...imageFileInfo,
      name,
      extension
    });
  };
  React.useEffect(() => {
    if (originalImage) setFileNameAndExtension();
  }, [originalImage]);
  React.useEffect(() => {
    setImageFileInfo({
      ...imageFileInfo,
      size: {
        width: resize.width,
        height: resize.height
      }
    });
  }, [resize]);
  React.useEffect(() => {
    return () => {
    };
  }, []);
  if (removeSaveButton) return null;
  const menuItems = Array.isArray(moreSaveOptions) && moreSaveOptions.length > 0 ? moreSaveOptions.map((option, i) => ({
    ...option,
    key: `${option.label || i}-option-key`,
    onClick: typeof option.onClick === 'function' ? () => option.onClick(saveCallback => changeSaveFnAndTriggerAnother(saveCallback, triggerSaveHandler), saveCallback => changeSaveFnAndTriggerAnother(saveCallback, startSaving)) : undefined
  })) : [];
  return /*#__PURE__*/React.createElement(ButtonWithMenu, {
    className: "FIE_topbar-save",
    color: "primary",
    onClick: triggerSaveHandler,
    menuPosition: "bottom",
    menuFromBtn: true,
    label: menuItems.length > 0 ? t('saveAs') : t('save'),
    menuItems: menuItems,
    menuStyle: saveButtonMenuStyle,
    wrapperStyle: saveButtonWrapperStyle,
    disabled: isLoadingGlobally || disableSaveIfNoChanges && !hasUndo || isBlockerError,
    noMargin: true
  });
};

/** External Dependencies */
({
  margin: PropTypes.string
});

/** External Dependencies */
const UndoButton = ({
  margin
}) => {
  const {
    dispatch,
    hasUndo = false,
    t,
    feedback
  } = useStore();
  const isBlockerError = feedback.duration === 0;
  const dispatchUndo = React.useCallback(() => {
    dispatch({
      type: UNDO
    });
  }, []);
  return /*#__PURE__*/React.createElement(StyledHistoryButton, {
    className: "FIE_topbar-undo-button",
    color: "basic",
    size: "sm",
    onClick: hasUndo ? dispatchUndo : undefined,
    disabled: !hasUndo || isBlockerError,
    title: t('undoTitle'),
    margin: margin
  }, /*#__PURE__*/React.createElement(Undo$1, {
    size: 12
  }));
};
UndoButton.defaultProps = {
  margin: undefined
};
UndoButton.propTypes = {
  margin: PropTypes.string
};

/** External Dependencies */
const RedoButton = ({
  margin
}) => {
  const {
    dispatch,
    hasRedo = false,
    t
  } = useStore();
  const dispatchRedo = React.useCallback(() => {
    dispatch({
      type: REDO
    });
  }, []);
  return /*#__PURE__*/React.createElement(StyledHistoryButton, {
    className: "FIE_topbar-redo-button",
    color: "basic",
    size: "sm",
    onClick: hasRedo ? dispatchRedo : undefined,
    disabled: !hasRedo,
    title: t('redoTitle'),
    margin: margin
  }, /*#__PURE__*/React.createElement(Redo$1, {
    size: 12
  }));
};
RedoButton.defaultProps = {
  margin: undefined
};
RedoButton.propTypes = {
  margin: PropTypes.string
};

const ZOOM_FACTORS_PRESETS = [{
  labelKey: 'fitSize',
  factor: 'fit'
}, {
  labelKey: 'actualSize',
  factor: 1
}, {
  label: '25%',
  factor: 0.25
}, {
  label: '50%',
  factor: 0.5
}, {
  label: '75%',
  factor: 0.75
}, {
  label: '125%',
  factor: 1.25
}, {
  label: '170%',
  factor: 1.7
}, {
  label: '300%',
  factor: 3
}, {
  label: '500%',
  factor: 5
}, {
  label: '1000%',
  factor: 10
}];

/** External Dependencies */
const MULTIPLY_ZOOM_FACTOR = 1.1;
const CanvasZooming = ({
  showBackButton
}) => {
  const {
    dispatch,
    zoom = {},
    toolId,
    feedback,
    t,
    shownImageDimensions,
    resize,
    originalImage,
    adjustments: {
      crop
    },
    config: {
      useZoomPresetsMenu
    }
  } = useStore();
  const isBlockerError = feedback.duration === 0;
  const [zoomingMenuAnchorEl, setZoomingMenuAnchorEl] = React.useState(null);
  const saveZoom = (zoomFactor, isAbsoluteZoom) => {
    dispatch({
      type: ZOOM_CANVAS,
      payload: {
        factor: zoomFactor,
        isAbsoluteZoom
      }
    });
  };
  const zoomIn = () => {
    saveZoom(zoom.factor * MULTIPLY_ZOOM_FACTOR);
  };
  const fitCanvas = () => {
    const usedAsOrgDimens = resize.width && resize.height && resize || crop.width && crop.height && crop || shownImageDimensions;
    const fitCanvasFactor = getZoomFitFactor(crop.width && crop.height && crop || shownImageDimensions, usedAsOrgDimens);
    saveZoom(fitCanvasFactor || DEFAULT_ZOOM_FACTOR, true);
  };
  const zoomOut = () => {
    saveZoom(zoom.factor / MULTIPLY_ZOOM_FACTOR);
  };
  const toggleZoomingMenu = event => {
    setZoomingMenuAnchorEl(zoomingMenuAnchorEl ? null : event.target);
  };
  const applyZoomFactorPreset = factor => {
    if (factor === 'fit') {
      fitCanvas();
      toggleZoomingMenu();
      return;
    }
    const factorToAchieveSelected = resize.width || resize.height ? factor : Math.min(factor * originalImage.width / shownImageDimensions.width, factor * originalImage.height / shownImageDimensions.height);
    saveZoom(factorToAchieveSelected, true);
    toggleZoomingMenu();
  };
  const isZoomDisabled = toolId === TOOLS_IDS.CROP || isBlockerError;
  const previewToRealImgFactor = originalImage && !resize.width && !resize.height ? Math.min(shownImageDimensions.width * zoom.factor / originalImage.width, shownImageDimensions.height * zoom.factor / originalImage.height) : zoom.factor;
  return /*#__PURE__*/React.createElement(StyledZoomingWrapper, {
    className: "text-black"
  }, /*#__PURE__*/React.createElement(StyledSmallButton, {
    onClick: zoomOut,
    color: "basic",
    title: t('zoomOutTitle'),
    disabled: isZoomDisabled,
    showBackButton: showBackButton,
    className: "FIE_topbar-zoom-out-btn"
  }, /*#__PURE__*/React.createElement(MinusOutline, {
    size: 8
  })), /*#__PURE__*/React.createElement(StyledZoomPercentageLabel, {
    title: t('toggleZoomMenuTitle'),
    onClick: isZoomDisabled ? undefined : useZoomPresetsMenu && toggleZoomingMenu || fitCanvas,
    "aria-disabled": isZoomDisabled,
    className: "FIE_topbar-zoom-label"
  }, `${toPrecisedFloat(previewToRealImgFactor * 100, 0)}%`), /*#__PURE__*/React.createElement(StyledSmallButton, {
    onClick: zoomIn,
    color: "basic",
    title: t('zoomInTitle'),
    disabled: isZoomDisabled,
    showBackButton: showBackButton,
    className: "FIE_topbar-zoom-in-btn"
  }, /*#__PURE__*/React.createElement(PlusOutline, {
    size: 9
  })), /*#__PURE__*/React.createElement(Menu$2, {
    anchorEl: zoomingMenuAnchorEl,
    onClose: toggleZoomingMenu,
    open: Boolean(zoomingMenuAnchorEl),
    position: "bottom",
    className: "FIE_topbar-zoom-menu"
  }, ZOOM_FACTORS_PRESETS.map(({
    factor,
    labelKey,
    label
  }) => /*#__PURE__*/React.createElement(MenuItem$1, {
    key: label || labelKey,
    onClick: () => applyZoomFactorPreset(factor)
  }, /*#__PURE__*/React.createElement(MenuItemLabel$1, null, label ?? t(labelKey))))));
};
CanvasZooming.defaultProps = {
  showBackButton: false
};
CanvasZooming.propTypes = {
  showBackButton: PropTypes.bool
};

/** External Dependencies */
const ImageDimensionsAndDisplayToggle = ({
  showBackButton,
  isPhoneScreen
}) => {
  const {
    dispatch,
    isResetted = true,
    originalImage,
    resize = {},
    adjustments: {
      crop,
      rotation = 0
    },
    shownImageDimensions,
    config: {
      disableZooming
    },
    t
  } = useStore();
  if (!originalImage) {
    return null;
  }
  getProperDimensions(resize, crop, shownImageDimensions, originalImage, rotation);
  return /*#__PURE__*/React.createElement(StyledImageOptionsButtons, {
    isPhoneScreen: isPhoneScreen
  }, /*#__PURE__*/React.createElement(StyledDimensionsButtons, null, !disableZooming && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CanvasZooming, {
    showBackButton: showBackButton
  }))));

  // return (
  //   <StyledImageOptionsButtons isPhoneScreen={isPhoneScreen}>
  //     <StyledDimensionsLabel title={t('imageDimensionsHoverTitle')}>
  //       {`${dimensions.width} x ${dimensions.height} px`}
  //     </StyledDimensionsLabel>

  //     <StyledDimensionsButtons>
  //       <StyledSmallButton
  //         color="basic"
  //         onMouseDown={isResetted ? undefined : showOriginalImage}
  //         onTouchStart={isResetted ? undefined : showOriginalImage}
  //         disabled={isResetted}
  //         showBackButton={showBackButton}
  //         title={t('showImageTitle')}
  //       >
  //         <Compare />
  //       </StyledSmallButton>
  //       {!disableZooming && (
  //         <>
  //           <Separator />
  //           <CanvasZooming showBackButton={showBackButton} />
  //         </>
  //       )}
  //     </StyledDimensionsButtons>
  //   </StyledImageOptionsButtons>
  // );
};
ImageDimensionsAndDisplayToggle.defaultProps = {
  showBackButton: false,
  isPhoneScreen: false
};
ImageDimensionsAndDisplayToggle.propTypes = {
  showBackButton: PropTypes.bool,
  isPhoneScreen: PropTypes.bool
};

/** External Dependencies */
const BackButton = () => {
  const {
    t
  } = useStore();
  const isPhone = usePhoneScreen();
  return /*#__PURE__*/React.createElement(ConfirmationModal, null, /*#__PURE__*/React.createElement(Button$1, {
    className: "FIE_topbar-back-button",
    color: "link-secondary",
    size: "sm",
    startIcon: /*#__PURE__*/React.createElement(ArrowLeftOutline, null)
  }, !isPhone && /*#__PURE__*/React.createElement(StyledBackButtonLabel, null, t('back'))));
};

/** External Dependencies */
const Topbar = ({
  toggleMainMenu
}) => {
  const {
    config: {
      showBackButton
    }
  } = useStore();
  const isPhoneScreen = usePhoneScreen(320);
  return /*#__PURE__*/React.createElement(StyledTopbar, {
    className: "FIE_topbar",
    $isPhoneScreen: isPhoneScreen
  }, /*#__PURE__*/React.createElement(StyledMainButtonsWrapper, {
    className: "FIE_topbar-buttons-wrapper"
  }, /*#__PURE__*/React.createElement(StyledMenuIconButton, {
    className: "FIE_tabs_toggle_btn",
    size: isPhoneScreen ? 'sm' : 'lg',
    color: "basic",
    onClick: () => toggleMainMenu(true)
  }, props => /*#__PURE__*/React.createElement(Menu, props)), showBackButton ? /*#__PURE__*/React.createElement(BackButton, null) : /*#__PURE__*/React.createElement(SaveButton, null)), /*#__PURE__*/React.createElement(StyledFlexCenterAlignedContainer, {
    className: "FIE_topbar-center-options",
    $showBackButton: showBackButton
  }, /*#__PURE__*/React.createElement(ImageDimensionsAndDisplayToggle, {
    showBackButton: showBackButton,
    isPhoneScreen: isPhoneScreen
  })), /*#__PURE__*/React.createElement(StyledControlButtonsWrapper, null, /*#__PURE__*/React.createElement(StyledHistoryButtons, {
    className: "FIE_topbar-history-buttons"
  }, /*#__PURE__*/React.createElement(UndoButton, {
    margin: "0",
    showBackButton: showBackButton
  }), /*#__PURE__*/React.createElement(RedoButton, {
    margin: "0",
    showBackButton: showBackButton
  })), showBackButton ? /*#__PURE__*/React.createElement(SaveButton, null) : /*#__PURE__*/React.createElement(CloseButton, null)));
};
Topbar.defaultProps = {
  toggleMainMenu: () => {}
};
Topbar.propTypes = {
  toggleMainMenu: PropTypes.func
};

/** External Dependencies */
const StyledTabItem = styled.div(({
  theme
}) => `
    width: 72px;
    min-height: 72px;
    padding: 4px 10px;
    border-radius: 10px;
    display: flex;
    flex-direction: column;
    gap: 6px;
    background: white;
    align-items: center;
    justify-content: center;
    border: 0.01rem solid #dedede;
    [data-phone='true'] & {
      margin-bottom: 0;
      height: 50px;
      border-radius: 0;
    }

    svg {
      color: black;
    }

    &,
    * {
      cursor: pointer;
    }

    &:hover {
     border: 1px solid #d6d6d6;
    }

    &[aria-selected='true'] {
    background: #dedede;
     border: 0.062rem solid #c9c9c9;
      * {
        color: black;
      }
    }
  `);
const StyledTabItemLabel = styled(Label$6)(({
  theme
}) => `
  color: black;
  font-size: 0.6875em;
   line-height: 14px;
  font-family: 'Open Sans', sans-serif;
  letter-spacing: 0.04rem;
  span {
    white-space: normal;
  }

  [data-phone='true'] & {
    font-size: 10px;
  }
`);

/** External Dependencies */
const TabItem = ({
  id,
  label,
  Icon,
  isSelected,
  onClick
}) => {
  const handleClick = React.useCallback(() => {
    if (typeof onClick === 'function') {
      onClick(id);
    }
  }, [id]);
  return /*#__PURE__*/React.createElement(StyledTabItem, {
    className: "FIE_tab",
    "aria-selected": isSelected,
    onClick: handleClick
  }, /*#__PURE__*/React.createElement(Icon, {
    size: 20
  }), label && /*#__PURE__*/React.createElement(StyledTabItemLabel, {
    className: "FIE_tab-label"
  }, label));
};
TabItem.defaultProps = {
  isSelected: false,
  onClick: undefined,
  label: undefined
};
TabItem.propTypes = {
  id: PropTypes.string.isRequired,
  label: PropTypes.string,
  Icon: PropTypes.oneOfType([PropTypes.node, PropTypes.func, PropTypes.instanceOf(Object)]).isRequired,
  onClick: PropTypes.func,
  isSelected: PropTypes.bool
};
var TabItem$1 = /*#__PURE__*/React.memo(TabItem);

/** External Dependencies */
const AVAILABLE_TABS = [{
  id: TABS_IDS.ADJUST,
  labelKey: 'adjustTab',
  icon: CropFrame
}, {
  id: TABS_IDS.FINETUNE,
  labelKey: 'finetuneTab',
  icon: FineTune
}, {
  id: TABS_IDS.FILTERS,
  labelKey: 'filtersTab',
  icon: ImageFilters,
  hideFn: ({
    useCloudimage
  }) => useCloudimage
}, {
  id: TABS_IDS.WATERMARK,
  labelKey: 'watermarkTab',
  icon: Watermark$1
}, {
  id: TABS_IDS.ANNOTATE,
  labelKey: 'annotateTabLabel',
  icon: Annotate,
  hideFn: ({
    useCloudimage
  }) => useCloudimage
}, {
  id: TABS_IDS.RESIZE,
  labelKey: 'resizeTab',
  icon: Resize$1
}];

/** External Dependencies */
const Tabs = ({
  toggleMainMenu,
  isDrawer
}) => {
  const {
    t,
    tabId = null,
    dispatch,
    config: {
      defaultTabId,
      tabsIds,
      useCloudimage
    }
  } = useStore();
  const currentTabId = tabId || defaultTabId;
  const selectTab = React.useCallback(newTabId => {
    dispatch({
      type: SELECT_TAB,
      payload: {
        tabId: newTabId
      }
    });
    toggleMainMenu(false);
  }, []);
  const chosenTabs = React.useMemo(() => {
    let tabs = [];
    if (Object.keys(tabsIds).length > 0) {
      AVAILABLE_TABS.forEach(tab => {
        const index = tabsIds.indexOf(tab.id);
        if (index !== -1) {
          tabs[index] = tab;
        }
      });
    } else {
      tabs = AVAILABLE_TABS;
    }
    return (tabs.length > 0 ? tabs : AVAILABLE_TABS).filter(({
      hideFn
    }) => !hideFn || !hideFn({
      useCloudimage
    }));
  }, [tabsIds]);

  // If only 1 tab is needed then no need to have the tabs sidebar.
  if (chosenTabs.length === 1) {
    return null;
  }
  const tabItems = ({
    id,
    labelKey,
    icon
  }) => /*#__PURE__*/React.createElement(TabItem$1, {
    key: id,
    id: id,
    label: t(labelKey),
    Icon: icon,
    isSelected: currentTabId === id,
    onClick: selectTab
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, chosenTabs.map(tab => isDrawer ? /*#__PURE__*/React.createElement(DrawerItem$1, {
    key: tab.id
  }, tabItems(tab)) : tabItems(tab)));
};
Tabs.defaultProps = {
  toggleMainMenu: () => {},
  isDrawer: false
};
Tabs.propTypes = {
  toggleMainMenu: PropTypes.func,
  isDrawer: PropTypes.bool
};

/** External Dependencies */
const ToolsBarItemOptionsWrapper = ({
  children,
  isPhoneScreen
}) => /*#__PURE__*/React.createElement(StyledToolsBarItemOptionsWrapper, {
  className: "FIE_tool-options-wrapper",
  hasChildren: Boolean(children),
  isPhoneScreen: isPhoneScreen
}, children);
ToolsBarItemOptionsWrapper.defaultProps = {
  children: undefined,
  isPhoneScreen: false
};
ToolsBarItemOptionsWrapper.propTypes = {
  children: PropTypes.node,
  isPhoneScreen: PropTypes.bool
};

/** External Depepdencneis */
const style = {
  maxWidth: '100%',
  width: '100%'
};
const ToolsBar = ({
  isPhoneScreen
}) => {
  const {
    t,
    dispatch,
    tabId,
    toolId,
    annotations,
    selectionsIds = [],
    config: {
      defaultTabId,
      defaultToolId,
      useCloudimage
    }
  } = useStore();
  const currentTabId = tabId || defaultTabId;
  const currentToolId = toolId || defaultToolId || TABS_TOOLS[currentTabId]?.[0];
  const tabTools = React.useMemo(() => TABS_TOOLS[currentTabId] || [], [currentTabId]);
  const selectTool = React.useCallback(newToolId => {
    dispatch({
      type: SELECT_TOOL,
      payload: {
        toolId: newToolId
      }
    });
  }, []);
  const items = React.useMemo(() => tabTools.map(id => {
    const {
      Item,
      hideFn
    } = TOOLS_ITEMS[id];
    return Item && (!hideFn || !hideFn({
      useCloudimage
    })) && /*#__PURE__*/React.createElement(Item, {
      key: id,
      selectTool: selectTool,
      t: t,
      isSelected: currentToolId === id
    });
  }), [tabTools, currentToolId]);
  const ToolOptionsComponent = React.useMemo(() => {
    if (!currentToolId) {
      return false;
    }
    if (currentTabId === TABS_IDS.ANNOTATE) {
      const selectionsLength = selectionsIds.length;
      if (selectionsLength === 1) {
        const selectedAnnotation = annotations[selectionsIds[0]];
        return TOOLS_ITEMS[selectedAnnotation.name]?.ItemOptions;
      }
      if (selectionsLength > 1) {
        return null;
      }
    }
    return currentTabId && currentToolId && TABS_TOOLS[currentTabId].includes(currentToolId) && (!TOOLS_ITEMS[toolId]?.hideFn || !TOOLS_ITEMS[toolId]?.hideFn({
      useCloudimage
    })) && TOOLS_ITEMS[toolId]?.ItemOptions;
  }, [currentTabId, currentToolId, annotations, selectionsIds]);
  React.useEffect(() => {
    if (!toolId && currentToolId) {
      dispatch({
        type: SELECT_TOOL,
        payload: {
          toolId: currentToolId
        }
      });
    }
  }, []);
  return /*#__PURE__*/React.createElement(StyledToolsBar, {
    className: "FIE_tools-bar-wrapper"
  }, /*#__PURE__*/React.createElement(ToolsBarItemOptionsWrapper, {
    isPhoneScreen: isPhoneScreen
  }, ToolOptionsComponent && /*#__PURE__*/React.createElement(ToolOptionsComponent, {
    t: t
  })), items && /*#__PURE__*/React.createElement(StyledToolsBarItems, {
    className: "FIE_tools-bar",
    isPhoneScreen: isPhoneScreen
  }, currentTabId !== TABS_IDS.WATERMARK ? /*#__PURE__*/React.createElement(Carousel, {
    className: "FIE_tools",
    style: style
  }, items) : items));
};
ToolsBar.defaultProps = {
  isPhoneScreen: false
};
ToolsBar.propTypes = {
  isPhoneScreen: PropTypes.bool
};

/** External Dependencies */
const defaultAnchorOrigin = {
  horizontal: 'center',
  vertical: 'bottom'
};
const ERROR_TO_ROBOT_STATUS = {
  [FEEDBACK_STATUSES.ERROR]: 'error',
  [FEEDBACK_STATUSES.WARNING]: 'warning'
};
const FeedbackPopup = ({
  anchorOrigin
}) => {
  const {
    feedback = {},
    dispatch
  } = useStore();
  if (!feedback.message) {
    return null;
  }
  const onClose = () => {
    dispatch({
      type: SET_FEEDBACK,
      payload: {
        feedback: {}
      }
    });
  };
  return /*#__PURE__*/React.createElement(Popup$1, {
    className: "FIE_feedback-robot",
    anchorOrigin: anchorOrigin,
    autoHideDuration: feedback.duration ?? 5000,
    message: feedback.message,
    open: Boolean(feedback.message),
    status: ERROR_TO_ROBOT_STATUS[feedback.status || FEEDBACK_STATUSES.ERROR],
    onClose: onClose
  });
};
FeedbackPopup.defaultProps = {
  anchorOrigin: defaultAnchorOrigin
};
FeedbackPopup.propTypes = {
  anchorOrigin: PropTypes.instanceOf(Object)
};

/** External Dependencies */
const spin = styled.keyframes`
  to { transform: rotate(360deg); }
`;
const StyledSpinnerWrapper = styled.div`
  background: ${({
  theme: {
    palette
  }
}) => palette[Color.BackgroundStateless]};
  display: flex;
  align-items: center;
  justify-content: center;
  position: absolute;
  z-index: 11111;
  top: 0;
  bottom: 0;
  right: 0;
  left: 0;
  flex-direction: column;
  user-select: none;
`;
const StyledSpinner = styled(Loading)`
  animation: ${spin} 1.2s infinite;
`;

/** External Dependencies */
const Spinner = ({
  theme
}) => {
  return /*#__PURE__*/React.createElement(StyledSpinnerWrapper, {
    className: "FIE_spinner-wrapper"
  }, /*#__PURE__*/React.createElement(StyledSpinner, {
    size: 50,
    color: theme.palette[Color.AccentStateless]
  }));
};
Spinner.defaultProps = {
  theme: {}
};
Spinner.propTypes = {
  theme: PropTypes.instanceOf(Object)
};

const propertyToOperation = (operation, value, shownImageDimensions = {}, originalImage = {}) => {
  const lockCropAreaAt = CLOUDIMG_TO_EDITOR_POSITIONS[value];
  switch (operation) {
    case 'wat_text':
      return {
        watermark: {
          text: value.replaceAll('+', ' ')
        }
      };
    case 'wat_font':
      return {
        watermark: {
          fontFamily: value
        }
      };
    case 'wat_color':
      return {
        watermark: {
          fill: `#${value}`
        }
      };
    case 'wat_fontsize':
      return {
        watermark: {
          fontSize: parseFloat(value)
        }
      };
    case 'wat_opacity':
      return {
        watermark: {
          opacity: parseFloat(value)
        }
      };
    case 'wat_pos':
      {
        const [x, y] = value.split(',');
        return {
          watermark: {
            x: parseFloat(x) / 100 * shownImageDimensions.width,
            y: parseFloat(y) / 100 * shownImageDimensions.height
          }
        };
      }
    case 'wat_url':
      return {
        watermark: {
          image: decodeURIComponent(value)
        }
      };
    case 'wat_scale':
      {
        const [scaleX, scaleY] = value.split(',');
        return {
          watermark: {
            width: parseFloat(scaleX) / 100 * (shownImageDimensions.width || 0),
            height: parseFloat(scaleY) / 100 * (shownImageDimensions.height || 0)
          }
        };
      }
    case 'tl_px':
      {
        const [x, y] = value.split(',');
        return {
          crop: {
            x: mapNumber(parseFloat(x), 0, originalImage.width, 0, shownImageDimensions.width),
            y: mapNumber(parseFloat(y), 0, originalImage.height, 0, shownImageDimensions.height)
          }
        };
      }
    case 'br_px':
      {
        const [x, y] = value.split(',');
        return {
          cropX2: mapNumber(parseFloat(x), 0, originalImage.width, 0, shownImageDimensions.width),
          cropY2: mapNumber(parseFloat(y), 0, originalImage.height, 0, shownImageDimensions.height)
        };
      }
    case 'round':
      return {
        crop: {
          ratio: ELLIPSE_CROP
        }
      };
    case 'gravity':
      return {
        crop: lockCropAreaAt ? {
          lockCropAreaAt,
          width: null,
          height: null
        } : {
          noEffect: true,
          ratio: value,
          ratioTitleKey: value,
          width: null,
          height: null
        }
      };
    case 'aspect_ratio':
      return {
        crop: {
          ratio: Number(value)
        }
      };
    case 'w':
      return {
        resize: {
          width: parseFloat(value)
        }
      };
    case 'h':
      {
        return {
          resize: {
            height: parseFloat(value)
          }
        };
      }
    case 'r':
      {
        return {
          adjustments: {
            rotation: -parseInt(value, 10)
          }
        };
      }
    case 'flip':
    case 'mirror':
      return {
        adjustments: {
          isFlippedX: value.includes('x') || value.includes('h'),
          isFlippedY: value.includes('y') || value.includes('v')
        }
      };
    default:
      {
        let finetuneName;
        Object.keys(finetuneNameToParamInfo).forEach(key => {
          if (finetuneNameToParamInfo[key].cloudimage.name === operation.toLowerCase()) {
            finetuneName = key;
          }
        });
        if (!finetuneName) return null;
        const {
          cloudimage,
          internal
        } = finetuneNameToParamInfo[finetuneName];
        return {
          finetunes: [Konva$2.Filters[finetuneName]],
          finetunesProps: {
            [internal.propName]: mapNumber(parseFloat(value), cloudimage.min, cloudimage.max, internal.min, internal.max)
          }
        };
      }
  }
};
const cloudimageQueryToDesignState = (cloudimageQuery, shownImageDimensions, originalImage) => {
  if (!cloudimageQuery) {
    return null;
  }
  const operationsStrings = cloudimageQuery.split('&');
  let designState = {};
  operationsStrings.forEach(operationStr => {
    const [operation, value] = operationStr.split('=');
    const operationDesignStateObject = propertyToOperation(operation, value, shownImageDimensions, originalImage);
    if (operationDesignStateObject) {
      designState = deepMerge(designState, operationDesignStateObject, true);
    }
  });
  const {
    cropX2,
    cropY2,
    crop,
    watermark,
    ...unPreparedDesignState
  } = designState;
  const validDesignState = {
    ...unPreparedDesignState,
    ...(cropX2 && cropY2 && crop || crop?.noEffect || crop?.lockCropAreaAt ? {
      adjustments: {
        ...unPreparedDesignState.adjustments,
        crop: {
          width: (cropX2 || 0) - crop.x,
          height: (cropY2 || 0) - crop.y,
          ...crop
        }
      }
    } : {}),
    annotations: {
      ...(watermark ? {
        [WATERMARK_ANNOTATION_ID$1]: {
          ...watermark,
          x: (crop?.x || 0) + (watermark.x || 0),
          y: (crop?.y || 0) + (watermark.y || 0),
          id: WATERMARK_ANNOTATION_ID$1,
          name: watermark.text ? TOOLS_IDS.TEXT : TOOLS_IDS.IMAGE,
          ...(watermark.text ? {
            width: watermark.text.length * watermark.fontSize,
            height: watermark.fontSize
          } : {})
        }
      } : {})
    }
  };
  return validDesignState;
};

const isSameImage = (img1, img2HtmlElement) => img1 && img2HtmlElement && (img1 instanceof HTMLImageElement && img1.src === img2HtmlElement.src && img1.width === img2HtmlElement.width && img1.height === img2HtmlElement.height || (img1?.src || img1) === img2HtmlElement.src);

/** External Dependencies */
const useUpdateEffect = (effectCallback, dependencies) => {
  const isFirstRender = React.useRef(true);
  React.useEffect(() => () => {
    isFirstRender.current = true;
  }, []);
  React.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
    } else if (typeof effectCallback === 'function') {
      return effectCallback();
    }
    return undefined;
  }, dependencies);
};

/** External Dependencies */
const StyledAppWrapper = styled.div.attrs(({
  $size = {}
}) => ({
  style: {
    width: $size.width ?? '100%',
    height: $size.height ?? '100%'
  }
}))`
  display: flex;
  flex-direction: column;
  align-items: center;
  height: 100%;
  max-height: 100%;
  width: 100%;
  max-width: 100%;
  overflow: auto;
  border-radius: 8px;
  position: relative;
  min-height: 250px;
  background: ${({
  theme
}) => theme.palette['bg-secondary']};

  ${({
  showTabsDrawer
}) => showTabsDrawer && `
      overflow: unset;
  `}
`;
const StyledMainContent = styled.div`
  display: flex;
  align-items: flex-start;
  width: 100%;
  box-sizing: border-box;
  height: calc(100% - 95px); // 95px = possible max height of topbar w/ spaces
  flex-grow: 1;

  [data-phone='true'] & {
    padding: 0;
  }
`;
const StyledCanvasAndTools = styled.div`
  height: 100%;
  width: calc(100% - 80px); // 80px = tabsbar's width.
  flex-grow: 1;
  overflow-y: auto;
  display: flex;
  flex-direction: column;

  ${({
  showTabsDrawer
}) => showTabsDrawer && `
     overflow-y: unset;
  `}
`;
const StyledTabs = styled.div`
  min-width: 108px;
  height: 100%;
  padding: 16px;
  display: flex;
  flex-direction: column;
  gap: 16px;
  overflow-y: auto;
  max-height: 100%;
  [data-phone='true'] & {
    display: flex;
    padding: 0;
  }
`;
const StyledDrawer = styled(Drawer$1)`
  transition: transform 200ms ease-in-out;
  width: 92px;
  height: 100%;
  padding: 12px;

  .SfxDrawer-list,
  .SfxDrawer-item {
    padding: 0;
  }
`;

// added

const StyledCanvasWrapper = styled.div`
  flex-grow: 1;
  position: relative;
  display: flex;
  flex-direction: column;
  min-height: 300px; 
`;
const StyledToolsBarContainer = styled.div`
  background: #fff;
  padding: 8px 12px;
  z-index: 5;
`;

/** External Dependencies */
const TabsDrawer = ({
  toggleMainMenu
}) => {
  const {
    t,
    showTabsMenu
  } = useStore();
  return /*#__PURE__*/React.createElement(StyledDrawer, {
    className: "FIE_tabs-drawer",
    open: showTabsMenu,
    onClose: () => toggleMainMenu(false),
    disablePortal: true
  }, /*#__PURE__*/React.createElement(DrawerHeader$1, null, /*#__PURE__*/React.createElement(Button$1, {
    color: "link-basic-secondary",
    startIcon: /*#__PURE__*/React.createElement(Menu, null),
    onClick: () => toggleMainMenu(false)
  }, t('tabsMenu'))), /*#__PURE__*/React.createElement(DrawerBody$1, null, /*#__PURE__*/React.createElement(DrawerList$1, null, /*#__PURE__*/React.createElement(Tabs, {
    toggleMainMenu: toggleMainMenu,
    isDrawer: true
  }))));
};
TabsDrawer.defaultProps = {
  toggleMainMenu: () => {}
};
TabsDrawer.propTypes = {
  toggleMainMenu: PropTypes.func
};

/** External Dependencies */
const App = () => {
  const {
    config,
    isLoadingGlobally,
    haveNotSavedChanges,
    dispatch,
    originalImage,
    shownImageDimensions,
    t,
    theme,
    feedback = {}
  } = useStore();
  const {
    loadableDesignState,
    useCloudimage,
    cloudimage,
    source,
    avoidChangesNotSavedAlertOnLeave,
    useBackendTranslations,
    translations,
    language,
    defaultSavedImageName,
    observePluginContainerSize,
    showCanvasOnly,
    getCurrentImgDataFnRef,
    updateStateFnRef,
    noCrossOrigin,
    resetOnImageSourceChange
  } = config;
  const showTabsDrawer = window.matchMedia('(max-width: 760px)').matches;
  const [observeResize, unobserveElement] = useResizeObserver();
  const [rootSize, setRootSize] = React.useState({
    width: undefined,
    height: undefined
  });
  const isPhoneScreen = usePhoneScreen();
  const pluginRootRef = React.useRef(null);
  const cloudimageQueryLoaded = React.useRef(false);
  const imageBeingLoadedSrc = React.useRef(null);
  // Hacky solution, For being used in beforeunload event
  // as it won't be possible to have the latest value of the state variable in js event handler.
  const haveNotSavedChangesRef = React.useRef(haveNotSavedChanges);
  const transformImgFn = useTransformedImgData();
  const setNewOriginalImage = React.useCallback(newOriginalImage => {
    dispatch({
      type: SET_ORIGINAL_IMAGE,
      payload: {
        originalImage: newOriginalImage
      }
    });
  }, []);
  const setError = React.useCallback(newError => {
    dispatch({
      type: SET_FEEDBACK,
      payload: {
        feedback: {
          message: newError.message || newError,
          duration: 0
        }
      }
    });
  }, []);

  // We are promisifying the image loading for mixing it with other promises
  const loadAndSetOriginalImage = imgToLoad => new Promise(resolve => {
    const imgSrc = imgToLoad?.src || imgToLoad;
    if (imageBeingLoadedSrc.current === imgSrc || !imgSrc && originalImage || isSameImage(imgSrc, originalImage)) {
      if (!imageBeingLoadedSrc.current) {
        resolve();
      }
      return;
    }
    const triggerResolve = () => {
      imageBeingLoadedSrc.current = null;
      resolve();
    };
    imageBeingLoadedSrc.current = imgSrc;

    // This timeout is a workaround when re-initializing
    // the react app from vanilla JS. Due to a bug in react
    // the dispatch method that is called in setNewOriginalImage
    // still points to the old dispatch method after re-init,
    // so we need to wait for one tick to make sure it's updated.
    //
    // This applies to both URLs and HTMLImageElement, since URLs
    // may resolve immediately in some cases, e.g. memory cache.
    setTimeout(() => {
      if (typeof imgToLoad === 'string') {
        loadImage(imgToLoad, defaultSavedImageName, noCrossOrigin).then(setNewOriginalImage).catch(setError).finally(triggerResolve);
      } else if (imgToLoad instanceof HTMLImageElement) {
        if (!imgToLoad.name && defaultSavedImageName) {
          // eslint-disable-next-line no-param-reassign
          imgToLoad.name = defaultSavedImageName;
        }
        if (!imgToLoad.complete) {
          imgToLoad.addEventListener('load', () => {
            setNewOriginalImage(imgToLoad);
            triggerResolve();
          });
          return;
        }
        setNewOriginalImage(imgToLoad);
        triggerResolve();
      } else {
        setError(t('invalidImageError'));
        triggerResolve();
      }
    }, 0);
  });
  const promptDialogIfHasChangeNotSaved = e => {
    if (haveNotSavedChangesRef.current) {
      e.preventDefault();
      e.returnValue = '';
    }
  };

  // loadingPromisesFn is a function for enabling the ability to show loader first then trigger requests not vice versa.
  const handleLoading = (loadingPromisesFn = () => []) => {
    dispatch({
      type: SHOW_LOADER
    });
    return Promise.all(loadingPromisesFn()).finally(() => {
      dispatch({
        type: HIDE_LOADER
      });
    });
  };
  const updateDesignStateWithLoadableOne = () => {
    if (loadableDesignState && Object.keys(loadableDesignState).length > 0) {
      dispatch({
        type: UPDATE_STATE,
        payload: {
          ...loadableDesignState,
          finetunes: finetunesStrsToClasses(loadableDesignState?.finetunes),
          filter: filterStrToClass(loadableDesignState?.filter)
        }
      });
    }
  };
  useUpdateEffect(() => {
    if (source && !isSameImage(source, originalImage)) {
      cloudimageQueryLoaded.current = false;
      handleLoading(() => [loadAndSetOriginalImage(source)]);
    }
    if (resetOnImageSourceChange) {
      dispatch({
        type: RESET,
        payload: {
          config
        }
      });
    }
  }, [source]);
  useUpdateEffect(() => {
    const newImgSrc = loadableDesignState?.imgSrc;
    if (newImgSrc && !isSameImage(newImgSrc, originalImage)) {
      handleLoading(() => [loadAndSetOriginalImage(newImgSrc).then(updateDesignStateWithLoadableOne)]);
    } else {
      updateDesignStateWithLoadableOne();
    }
  }, [loadableDesignState]);
  React.useEffect(() => {
    if (Object.keys(shownImageDimensions || {}).length > 0 && !Object.keys(shownImageDimensions).some(k => !shownImageDimensions[k]) && originalImage && useCloudimage && cloudimage?.loadableQuery && !cloudimageQueryLoaded.current) {
      dispatch({
        type: UPDATE_STATE,
        payload: cloudimageQueryToDesignState(cloudimage.loadableQuery, shownImageDimensions, originalImage)
      });
      cloudimageQueryLoaded.current = true;
    }
  }, [shownImageDimensions, originalImage, useCloudimage, cloudimage]);
  React.useEffect(() => {
    let isUnmounted = false;
    if (observePluginContainerSize && pluginRootRef.current) {
      observeResize(pluginRootRef.current.parentNode, ({
        width,
        height
      }) => setRootSize({
        width,
        height
      }));
    } else if (rootSize.width && rootSize.height && !isUnmounted) {
      setRootSize({
        width: undefined,
        height: undefined
      });
    }
    return () => {
      if (observePluginContainerSize && pluginRootRef.current) {
        unobserveElement(pluginRootRef.current);
      }
      isUnmounted = true;
    };
  }, [observePluginContainerSize]);
  React.useEffect(() => {
    const initialRequestsPromisesFn = () => [loadAndSetOriginalImage(loadableDesignState?.imgSrc || source), ...(useBackendTranslations ? [getBackendTranslations(language, translations)] : [])];
    handleLoading(initialRequestsPromisesFn);
    if (window && !avoidChangesNotSavedAlertOnLeave) {
      window.addEventListener('beforeunload', promptDialogIfHasChangeNotSaved);
    }
    return () => {
      if (window && !avoidChangesNotSavedAlertOnLeave) {
        window.removeEventListener('beforeunload', promptDialogIfHasChangeNotSaved);
      }
    };
  }, []);
  React.useEffect(() => {
    if (updateStateFnRef && typeof updateStateFnRef === 'object') {
      updateStateFnRef.current = newStatePartObjOrFn => {
        dispatch({
          type: UPDATE_STATE,
          payload: newStatePartObjOrFn
        });
      };
    }
  }, [updateStateFnRef, dispatch]);
  React.useEffect(() => {
    if (getCurrentImgDataFnRef && typeof getCurrentImgDataFnRef === 'object') {
      getCurrentImgDataFnRef.current = transformImgFn;
    }
  }, [transformImgFn]);
  React.useEffect(() => {
    haveNotSavedChangesRef.current = haveNotSavedChanges;
  }, [haveNotSavedChanges]);
  const toggleMainMenu = open => {
    dispatch({
      type: SET_SHOWN_TABS_MENU,
      payload: {
        opened: open
      }
    });
  };
  const renderContent = () => /*#__PURE__*/React.createElement(React.Fragment, null, !showCanvasOnly && /*#__PURE__*/React.createElement(React.Fragment, null, showTabsDrawer && /*#__PURE__*/React.createElement(TabsDrawer, {
    toggleMainMenu: toggleMainMenu
  }), /*#__PURE__*/React.createElement(Topbar, {
    toggleMainMenu: toggleMainMenu
  })), originalImage && feedback.duration !== 0 && /*#__PURE__*/React.createElement(StyledMainContent, {
    className: "FIE_main-container"
  }, !showCanvasOnly && !showTabsDrawer && /*#__PURE__*/React.createElement(StyledTabs, {
    className: "FIE_tabs"
  }, /*#__PURE__*/React.createElement(Tabs, {
    toggleMainMenu: toggleMainMenu
  })), /*#__PURE__*/React.createElement(StyledCanvasAndTools, {
    showTabsDrawer: showTabsDrawer
  }, /*#__PURE__*/React.createElement(StyledCanvasWrapper, null, /*#__PURE__*/React.createElement(MainCanvas, null)), !showCanvasOnly && /*#__PURE__*/React.createElement(StyledToolsBarContainer, null, /*#__PURE__*/React.createElement(ToolsBar, {
    isPhoneScreen: isPhoneScreen
  })))));
  return /*#__PURE__*/React.createElement(StyledAppWrapper, {
    className: ROOT_CONTAINER_CLASS_NAME,
    "data-phone": isPhoneScreen,
    $showTabsDrawer: showTabsDrawer,
    ref: pluginRootRef,
    $size: rootSize
  }, isLoadingGlobally && /*#__PURE__*/React.createElement(Spinner, {
    theme: theme
  }), renderContent(), /*#__PURE__*/React.createElement(FeedbackPopup, null));
};
var App$1 = /*#__PURE__*/React.memo(App);

const assignFinetuneNamesToKonva = () => {
  Object.keys(Konva.Filters).forEach(key => Konva.Filters[key].finetuneName = key);
};

/** External Dependencies */
const FontsFaces = styled.createGlobalStyle`
  .${ROOT_CONTAINER_CLASS_NAME} {
    font-family: ${({
  theme = {}
}) => theme.typography?.fontFamily || 'Arial'};
  }

  .SfxModal-Wrapper * {
    font-family: ${({
  theme = {}
}) => theme.typography?.fontFamily || 'Arial'};
  }
`;
const OverrideDefaultStyles = styled.createGlobalStyle`
  .Menu-open {
    overflow: visible !important;
  }

  .${ROOT_CONTAINER_CLASS_NAME}, #SfxPopper {
    box-sizing: border-box;

    .SfxPopper-root .SfxMenu-root {
      overflow: visible;
      width: max-content;
      border-radius: 10px;
      padding-right: 2px;
      padding-left: 2px;

      .SfxMenuItem-prefix {
        margin-right: 6px;
      }
    }
  }
  .${ROOT_CONTAINER_CLASS_NAME} *, #SfxPopper * {
    box-sizing: border-box;
    scrollbar-color: rgba(203, 211, 218, 1) rgba(203, 211, 218, 0.35);
    
    :not(button) > svg:not([color]) {
      color: ${({
  theme
}) => theme.palette['icons-primary']}
    }

    :disabled, [aria-disabled="true"] {
      cursor: not-allowed;
    }

    &::-webkit-scrollbar {
      width: 4px;
      height: 4px;
    }

    &::-webkit-scrollbar-track {
      background: rgba(203, 211, 218, 0.35);
    }

    &::-webkit-scrollbar-thumb {
      background: rgba(203, 211, 218, 1);
      border-radius: 10px;
    }
  }
`;

// /** External Dependencies */
// import React, { useEffect, memo } from 'react';
// import PropTypes from 'prop-types';
// import ThemeProvider from '@scaleflex/ui/theme';

const AssemblyPoint = props => {
  const {
    source,
    useCloudimage,
    cloudimage
  } = props;
  if (!source || typeof source !== 'string' && !(source instanceof HTMLImageElement)) {
    throw new Error('`source` property is required either a string of image url or a HTMLImageElement for the image that will be edited.');
  }
  if (useCloudimage) {
    if (cloudimage?.imageSealing?.enable && !cloudimage?.imageSealing?.salt) {
      throw new Error('`salt` property of imageSealing object is required in cloudimage mode as long as `imageSealing` is enabled.');
    }
  }
  React.useEffect(() => {
    assignFinetuneNamesToKonva();
  }, []);
  const defaultAndProvidedConfigMerged = deepMerge(defaultConfig, props);
  return /*#__PURE__*/React.createElement(React.StrictMode, null, /*#__PURE__*/React.createElement(ThemeProvider$1, {
    theme: defaultAndProvidedConfigMerged.theme
  }, /*#__PURE__*/React.createElement(FontsFaces, null), /*#__PURE__*/React.createElement(OverrideDefaultStyles, null), /*#__PURE__*/React.createElement(AppProvider, {
    config: defaultAndProvidedConfigMerged
  }, /*#__PURE__*/React.createElement(App$1, null))));
};
AssemblyPoint.defaultProps = {
  useCloudimage: false,
  cloudimage: {}
};
AssemblyPoint.propTypes = {
  source: propTypesExports.oneOfType([propTypesExports.string, propTypesExports.instanceOf(HTMLImageElement), propTypesExports.instanceOf(SVGImageElement), propTypesExports.instanceOf(ImageBitmap)]).isRequired,
  useCloudimage: propTypesExports.bool,
  cloudimage: propTypesExports.instanceOf(Object)
};
var FilerobotImageEditor = /*#__PURE__*/React.memo(AssemblyPoint);

/** Internal Dependencies */
// import FilerobotImageEditor from './components/AssemblyPoint';
// import { TABS_IDS, TOOLS_IDS } from './utils/constants';

exports.TABS = TABS_IDS;
exports.TOOLS = TOOLS_IDS;
exports.default = FilerobotImageEditor;
